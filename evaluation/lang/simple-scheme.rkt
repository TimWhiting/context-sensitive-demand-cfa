#lang racket
(require "common.rkt" "syntax.rkt")
(provide (except-out (all-from-out racket)
                     #%module-begin
                     #%top)
         (rename-out [module-begin #%module-begin])
         (rename-out [unbound-as-quoted #%top])
         )
(define-syntax-rule (whereami)
  (variable-reference->module-source (#%variable-reference)))
(define-syntax-rule (module-begin e ...)
  (#%module-begin
   (define example-expr (translate-top-defs-out `(e) ...))
   (define example-name (string->symbol (path->string (path-replace-extension (file-name-from-path (whereami)) ""))))
   (provide (all-defined-out))
   (pretty-print example-expr)
   (pretty-print example-name)
   ))
(define-syntax-rule (unbound-as-quoted . id)
  #`id)
