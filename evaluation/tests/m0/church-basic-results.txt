'(expression:
  (letrec ((plus
            (λ (p1)
              (λ (p2) (λ (pf) (λ (x) (app (app p1 pf) (app (app p2 pf) x)))))))
           (mult (λ (m1) (λ (m2) (λ (mf) (app m2 (app m1 mf))))))
           (pred
            (λ (n)
              (λ (rf)
                (λ (rx)
                  (app
                   (app
                    (app n (λ (g) (λ (h) (app h (app g rf)))))
                    (λ (ignored) rx))
                   (λ (id) id))))))
           (sub (λ (s1) (λ (s2) (app (app s2 pred) s1))))
           (church0 (λ (f0) (λ (x0) x0)))
           (church1 (λ (f1) (λ (x1) (app f1 x1))))
           (church2 (λ (f2) (λ (x2) (app f2 (app f2 x2)))))
           (church3 (λ (f3) (λ (x3) (app f3 (app f3 (app f3 x3))))))
           (church0? (λ (z) (app (app z (λ (zx) #f)) #t)))
           (church=?
            (λ (e1)
              (λ (e2)
                (match
                 (app church0? e1)
                 (#t (app church0? e2))
                 (#f
                  (match
                   (app church0? e2)
                   (#t #f)
                   (#f
                    (app
                     (app church=? (app (app sub e1) church1))
                     (app (app sub e2) church1))))))))))
    (app
     (app church=? (app (app mult church2) (app (app plus church1) church3)))
     (app
      (app plus (app (app mult church2) church1))
      (app (app mult church2) church3)))))
