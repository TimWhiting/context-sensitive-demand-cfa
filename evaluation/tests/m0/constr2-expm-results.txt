'(expression:
  (letrec ((try (λ (f) (app or (app f (app #t))))))
    (app try (λ (f) (app not f)))))
(list
 'query:
 '(letrec ((-> try = (λ (f) (app or (app f (app #t)))) <-)) bod)
 (expenv '()))
(list 'clos/con: (list (list '(λ (f) (app or (app f (app #t)))) (expenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(λ (f) (-> (app or (app f (app #t))) <-)) (expenv '(())))
(list
 'clos/con:
 (list
  (list '(#f ()) (expenv '(())))
  (list
   (list '(#t ()) (list (product/set (list '(con #t ()) (expenv '(()))))))
   (expenv '(())))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(top) (expenv '()))
(list
 'clos/con:
 (list
  (list '(#f ()) (expenv '(())))
  (list
   (list '(#t ()) (list (product/set (list '(con #t ()) (expenv '(()))))))
   (expenv '(())))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app f (-> (app #t) <-)) (expenv '(())))
(list 'clos/con: (list (list '(#t ()) (expenv '(())))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app (-> #t <-)) (expenv '(())))
(list 'clos/con: (list (list #t (expenv '(())))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app (-> f <-) (app #t)) (expenv '(())))
(list
 'clos/con:
 (list
  (list '(#t ()) (expenv '(())))
  (list '(λ (f) (app not f)) (expenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app (-> try <-) (λ (f) (app not f))) (expenv '()))
(list 'clos/con: (list (list '(λ (f) (app or (app f (app #t)))) (expenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app (-> or <-) (app f (app #t))) (expenv '(())))
'(clos/con: (#<procedure:do-or>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app (-> not <-) f) (expenv '(())))
'(clos/con: (#<procedure:do-not>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app try (-> (λ (f) (app not f)) <-)) (expenv '()))
(list 'clos/con: (list (list '(λ (f) (app not f)) (expenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app not (-> f <-)) (expenv '(())))
(list
 'clos/con:
 (list
  (list '(#t ()) (expenv '(())))
  (list '(λ (f) (app not f)) (expenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(letrec (try) (-> (app try (λ (f) (app not f))) <-))
 (expenv '()))
(list
 'clos/con:
 (list
  (list '(#f ()) (expenv '(())))
  (list
   (list '(#t ()) (list (product/set (list '(con #t ()) (expenv '(()))))))
   (expenv '(())))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(λ (f) (-> (app not f) <-)) (expenv '(())))
(list 'clos/con: (list (list '(#f ()) (expenv '(())))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app or (-> (app f (app #t)) <-)) (expenv '(())))
(list
 'clos/con:
 (list
  (list '(#f ()) (expenv '(())))
  (list
   (list '(#t ()) (list (product/set (list '(con #t ()) (expenv '(()))))))
   (expenv '(())))))
'(literals: (⊥ ⊥ ⊥ ⊥))
