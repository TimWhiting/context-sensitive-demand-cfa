'(clean-cache
  sat-1
  0
  15
  94
  letrec*
  "'(eval ((top) letrec* (phi ... sat-solve-4) ...) (env ()))"
  #f
  121
  96
  16
  9
  96
  16
  112
  1
  1
  58
  #f
  23/16
  ((2 2 0)))
'(clean-cache
  sat-1
  0
  15
  94
  lambda
  "'(eval\n  (letrec* (... try (sat-solve-4 (-> (λ (p) ...) <-)) () ...) ...)\n  (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  94
  app
  "'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env (())))"
  #f
  118
  94
  16
  8
  94
  16
  110
  1
  1
  58
  #f
  67/47
  ((2 2 0)))
'(clean-cache
  sat-1
  0
  15
  94
  lambda
  "'(eval (app try (-> (λ (n1) ...) <-)) (env (())))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  94
  app
  "'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env (() ())))"
  #f
  117
  93
  16
  8
  93
  16
  109
  1
  1
  58
  #f
  44/31
  ((2 2 0)))
'(clean-cache
  sat-1
  0
  15
  94
  lambda
  "'(eval (app try (-> (λ (n2) ...) <-)) (env (() ())))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  94
  app
  "'(eval (λ (n2) (-> (app try (λ (n3) ...)) <-)) (env (() () ())))"
  #f
  117
  93
  16
  8
  93
  16
  109
  1
  1
  58
  #f
  44/31
  ((2 2 0)))
'(clean-cache
  sat-1
  0
  15
  94
  lambda
  "'(eval (app try (-> (λ (n3) ...) <-)) (env (() () ())))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  94
  app
  "'(eval (λ (n3) (-> (app try (λ (n4) ...)) <-)) (env (() () () ())))"
  #f
  117
  93
  16
  8
  93
  16
  109
  1
  1
  58
  #f
  44/31
  ((2 2 0)))
'(clean-cache
  sat-1
  0
  15
  94
  lambda
  "'(eval (app try (-> (λ (n4) ...) <-)) (env (() () () ())))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  94
  app
  "'(eval (λ (n4) (-> (app p n1 n2 n3 n4) <-)) (env (() () () () ())))"
  #f
  88
  74
  11
  3
  74
  11
  85
  1
  1
  48
  #f
  50/37
  ((1 1 0)))
'(clean-cache
  sat-1
  0
  15
  94
  ref-or-constructor
  "'(eval (app p n1 n2 n3 (-> n4 <-)) (env (() () () () ())))"
  #f
  11
  7
  3
  1
  7
  3
  10
  1
  1
  6
  #f
  8/7
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  94
  ref-or-constructor
  "'(eval (app p n1 n2 (-> n3 <-) n4) (env (() () () () ())))"
  #f
  11
  7
  3
  1
  7
  3
  10
  1
  1
  6
  #f
  8/7
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  94
  ref-or-constructor
  "'(eval (app p n1 (-> n2 <-) n3 n4) (env (() () () () ())))"
  #f
  11
  7
  3
  1
  7
  3
  10
  1
  1
  6
  #f
  8/7
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  94
  ref-or-constructor
  "'(eval (app p (-> n1 <-) n2 n3 n4) (env (() () () () ())))"
  #f
  11
  7
  3
  1
  7
  3
  10
  1
  1
  6
  #f
  8/7
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  94
  ref-or-constructor
  "'(eval (app (-> p <-) n1 n2 n3 n4) (env (() () () () ())))"
  #f
  5
  3
  2
  0
  3
  2
  5
  1
  1
  3
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  94
  ref-or-constructor
  "'(eval (app (-> try <-) (λ (n4) ...)) (env (() () () ())))"
  (lambda number char string quoted constructor)
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  94
  ref-or-constructor
  "'(eval (app (-> try <-) (λ (n3) ...)) (env (() () ())))"
  (lambda number char string quoted constructor)
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  94
  ref-or-constructor
  "'(eval (app (-> try <-) (λ (n2) ...)) (env (() ())))"
  (lambda number char string quoted constructor)
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  94
  ref-or-constructor
  "'(eval (app (-> try <-) (λ (n1) ...)) (env (())))"
  (lambda number char string quoted constructor)
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  94
  lambda
  "'(eval\n  (letrec* (... phi (try (-> (λ (f) ...) <-)) sat-solve-4 ...) ...)\n  (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  94
  match
  "'(eval (λ (f) (-> (match (app f (app #t ...)) ...) <-)) (env (())))"
  #f
  117
  93
  16
  8
  93
  16
  109
  1
  1
  58
  #f
  44/31
  ((2 2 0)))
'(clean-cache
  sat-1
  0
  15
  94
  app
  "'(eval (match (app f (app #t)) (#f) (_ (-> (app #t) <-))) (env (())))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  94
  constructor
  "'(eval (app (-> #t <-)) (env (())))"
  (constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  94
  match
  "'(eval\n  (match (app f (app #t)) ((#f) (-> (match (app f (app #f ...)) ...) <-)) _)\n  (env (())))"
  #f
  117
  93
  16
  8
  93
  16
  109
  1
  1
  58
  #f
  44/31
  ((2 2 0)))
'(clean-cache
  sat-1
  0
  15
  94
  app
  "'(eval (match (app f (app #f)) (#f) (_ (-> (app #t) <-))) (env (())))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  94
  constructor
  "'(eval (app (-> #t <-)) (env (())))"
  (constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  94
  app
  "'(eval (match (app f (app #f)) ((#f) (-> (app #f) <-)) _) (env (())))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  94
  constructor
  "'(eval (app (-> #f <-)) (env (())))"
  (constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  94
  app
  "'(eval (match (-> (app f (app #f)) <-) (#f) _) (env (())))"
  #f
  117
  93
  16
  8
  93
  16
  109
  1
  1
  58
  #f
  44/31
  ((2 2 0)))
'(clean-cache
  sat-1
  0
  15
  94
  app
  "'(eval (app f (-> (app #f) <-)) (env (())))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  94
  constructor
  "'(eval (app (-> #f <-)) (env (())))"
  (constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  94
  ref-or-constructor
  "'(eval (app (-> f <-) (app #f)) (env (())))"
  #f
  10
  5
  5
  0
  5
  5
  10
  1
  1
  4
  #f
  8/5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  94
  app
  "'(eval (match (-> (app f (app #t)) <-) (#f) _) (env (())))"
  #f
  117
  93
  16
  8
  93
  16
  109
  1
  1
  58
  #f
  44/31
  ((2 2 0)))
'(clean-cache
  sat-1
  0
  15
  94
  app
  "'(eval (app f (-> (app #t) <-)) (env (())))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  94
  constructor
  "'(eval (app (-> #t <-)) (env (())))"
  (constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  94
  ref-or-constructor
  "'(eval (app (-> f <-) (app #t)) (env (())))"
  #f
  10
  5
  5
  0
  5
  5
  10
  1
  1
  4
  #f
  8/5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  94
  lambda
  "'(eval\n  (letrec* (... () (phi (-> (λ (x1 x2 x3 x4) ...) <-)) try ...) ...)\n  (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  94
  match
  "'(eval (λ (x1 x2 x3 x4) (-> (match (match x1 ...) ...) <-)) (env (())))"
  #f
  81
  70
  9
  2
  70
  9
  79
  1
  1
  45
  #f
  19/14
  ((1 1 0)))
'(clean-cache
  sat-1
  0
  15
  94
  match
  "'(eval\n  (match (match x1 ...) (#f) (_ (-> (match (match (app not ...) ...) ...) <-)))\n  (env (())))"
  #f
  57
  47
  8
  2
  47
  8
  55
  1
  1
  32
  #f
  62/47
  ((1 1 0)))
'(clean-cache
  sat-1
  0
  15
  94
  match
  "'(eval\n  (match (match (app not x2) ...) (#f) (_ (-> (match (match x4 ...) ...) <-)))\n  (env (())))"
  #f
  35
  26
  7
  2
  26
  7
  33
  1
  1
  19
  #f
  33/26
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  94
  app
  "'(eval (match (match x4 ...) (#f) (_ (-> (app #t) <-))) (env (())))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  94
  constructor
  "'(eval (app (-> #t <-)) (env (())))"
  (constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  94
  app
  "'(eval (match (match x4 ...) ((#f) (-> (app #f) <-)) _) (env (())))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  94
  constructor
  "'(eval (app (-> #f <-)) (env (())))"
  (constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  94
  match
  "'(eval (match (-> (match x4 ...) <-) (#f) _) (env (())))"
  #f
  30
  21
  7
  2
  21
  7
  28
  1
  1
  15
  #f
  9/7
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  94
  app
  "'(eval (match x4 (#f) (_ (-> (app #t) <-))) (env (())))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  94
  constructor
  "'(eval (app (-> #t <-)) (env (())))"
  (constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  94
  match
  "'(eval (match x4 ((#f) (-> (match x2 ...) <-)) _) (env (())))"
  #f
  23
  15
  6
  2
  15
  6
  21
  1
  1
  12
  #f
  6/5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  94
  app
  "'(eval (match x2 (#f) (_ (-> (app #t) <-))) (env (())))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  94
  constructor
  "'(eval (app (-> #t <-)) (env (())))"
  (constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  94
  app
  "'(eval (match x2 ((#f) (-> (app #f) <-)) _) (env (())))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  94
  constructor
  "'(eval (app (-> #f <-)) (env (())))"
  (constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  94
  ref-or-constructor
  "'(eval (match (-> x2 <-) (#f) _) (env (())))"
  #f
  18
  10
  6
  2
  10
  6
  16
  1
  1
  8
  #f
  6/5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  94
  ref-or-constructor
  "'(eval (match (-> x4 <-) (#f) _) (env (())))"
  #f
  18
  10
  6
  2
  10
  6
  16
  1
  1
  8
  #f
  6/5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  94
  app
  "'(eval (match (match (app not x2) ...) ((#f) (-> (app #f) <-)) _) (env (())))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  94
  constructor
  "'(eval (app (-> #f <-)) (env (())))"
  (constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  94
  match
  "'(eval (match (-> (match (app not x2) ...) <-) (#f) _) (env (())))"
  #f
  36
  27
  7
  2
  27
  7
  34
  1
  1
  19
  #f
  35/27
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  94
  app
  "'(eval (match (app not x2) (#f) (_ (-> (app #t) <-))) (env (())))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  94
  constructor
  "'(eval (app (-> #t <-)) (env (())))"
  (constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  94
  match
  "'(eval\n  (match (app not x2) ((#f) (-> (match (app not x3) ...) <-)) _)\n  (env (())))"
  #f
  27
  19
  6
  2
  19
  6
  25
  1
  1
  15
  #f
  23/19
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  94
  app
  "'(eval (match (app not x3) (#f) (_ (-> (app #t) <-))) (env (())))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  94
  constructor
  "'(eval (app (-> #t <-)) (env (())))"
  (constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  94
  app
  "'(eval (match (app not x3) ((#f) (-> (app #f) <-)) _) (env (())))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  94
  constructor
  "'(eval (app (-> #f <-)) (env (())))"
  (constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  94
  app
  "'(eval (match (-> (app not x3) <-) (#f) _) (env (())))"
  #f
  22
  14
  6
  2
  14
  6
  20
  1
  1
  11
  #f
  17/14
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  94
  ref-or-constructor
  "'(eval (app not (-> x3 <-)) (env (())))"
  #f
  18
  10
  6
  2
  10
  6
  16
  1
  1
  8
  #f
  6/5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  94
  ref-or-constructor
  "'(eval (app (-> not <-) x3) (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  94
  app
  "'(eval (match (-> (app not x2) <-) (#f) _) (env (())))"
  #f
  22
  14
  6
  2
  14
  6
  20
  1
  1
  11
  #f
  17/14
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  94
  ref-or-constructor
  "'(eval (app not (-> x2 <-)) (env (())))"
  #f
  18
  10
  6
  2
  10
  6
  16
  1
  1
  8
  #f
  6/5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  94
  ref-or-constructor
  "'(eval (app (-> not <-) x2) (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  94
  app
  "'(eval (match (match x1 ...) ((#f) (-> (app #f) <-)) _) (env (())))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  94
  constructor
  "'(eval (app (-> #f <-)) (env (())))"
  (constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  94
  match
  "'(eval (match (-> (match x1 ...) <-) (#f) _) (env (())))"
  #f
  43
  33
  8
  2
  33
  8
  41
  1
  1
  22
  #f
  4/3
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  94
  app
  "'(eval (match x1 (#f) (_ (-> (app #t) <-))) (env (())))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  94
  constructor
  "'(eval (app (-> #t <-)) (env (())))"
  (constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  94
  match
  "'(eval (match x1 ((#f) (-> (match (app not x2) ...) <-)) _) (env (())))"
  #f
  36
  27
  7
  2
  27
  7
  34
  1
  1
  19
  #f
  35/27
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  94
  app
  "'(eval (match (app not x2) (#f) (_ (-> (app #t) <-))) (env (())))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  94
  constructor
  "'(eval (app (-> #t <-)) (env (())))"
  (constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  94
  match
  "'(eval\n  (match (app not x2) ((#f) (-> (match (app not x3) ...) <-)) _)\n  (env (())))"
  #f
  27
  19
  6
  2
  19
  6
  25
  1
  1
  15
  #f
  23/19
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  94
  app
  "'(eval (match (app not x3) (#f) (_ (-> (app #t) <-))) (env (())))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  94
  constructor
  "'(eval (app (-> #t <-)) (env (())))"
  (constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  94
  app
  "'(eval (match (app not x3) ((#f) (-> (app #f) <-)) _) (env (())))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  94
  constructor
  "'(eval (app (-> #f <-)) (env (())))"
  (constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  94
  app
  "'(eval (match (-> (app not x3) <-) (#f) _) (env (())))"
  #f
  22
  14
  6
  2
  14
  6
  20
  1
  1
  11
  #f
  17/14
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  94
  ref-or-constructor
  "'(eval (app not (-> x3 <-)) (env (())))"
  #f
  18
  10
  6
  2
  10
  6
  16
  1
  1
  8
  #f
  6/5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  94
  ref-or-constructor
  "'(eval (app (-> not <-) x3) (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  94
  app
  "'(eval (match (-> (app not x2) <-) (#f) _) (env (())))"
  #f
  22
  14
  6
  2
  14
  6
  20
  1
  1
  11
  #f
  17/14
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  94
  ref-or-constructor
  "'(eval (app not (-> x2 <-)) (env (())))"
  #f
  18
  10
  6
  2
  10
  6
  16
  1
  1
  8
  #f
  6/5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  94
  ref-or-constructor
  "'(eval (app (-> not <-) x2) (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  94
  ref-or-constructor
  "'(eval (match (-> x1 <-) (#f) _) (env (())))"
  #f
  18
  10
  6
  2
  10
  6
  16
  1
  1
  8
  #f
  6/5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  94
  app
  "'(eval (letrec* (phi ... sat-solve-4) (-> (app sat-solve-4 phi) <-)) (env ()))"
  #f
  120
  95
  16
  9
  95
  16
  111
  1
  1
  58
  #f
  136/95
  ((2 2 0)))
'(clean-cache
  sat-1
  0
  15
  94
  ref-or-constructor
  "'(eval (app sat-solve-4 (-> phi <-)) (env ()))"
  (lambda number char string quoted constructor)
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  94
  ref-or-constructor
  "'(eval (app (-> sat-solve-4 <-) phi) (env ()))"
  (lambda number char string quoted constructor)
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
