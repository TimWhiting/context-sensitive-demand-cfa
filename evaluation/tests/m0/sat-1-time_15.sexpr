'(clean-cache
  sat-1
  0
  15
  58
  letrec*
  "'(eval ((top) letrec* (phi ... sat-solve-4) ...) (env ()))"
  #f
  85
  60
  16
  9
  60
  16
  76
  1
  1
  29
  #f
  19/12
  ((6 7 0)))
'(clean-cache
  sat-1
  0
  15
  58
  lambda
  "'(eval\n  (letrec* (... try (sat-solve-4 (-> (λ (p) ...) <-)) () ...) ...)\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  58
  app
  "'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env (())))"
  #f
  82
  58
  16
  8
  58
  16
  74
  1
  1
  29
  #f
  91/58
  ((5 5 0)))
'(clean-cache
  sat-1
  0
  15
  58
  lambda
  "'(eval (app try (-> (λ (n1) ...) <-)) (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  58
  app
  "'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env (() ())))"
  #f
  81
  57
  16
  8
  57
  16
  73
  1
  1
  29
  #f
  89/57
  ((5 5 0)))
'(clean-cache
  sat-1
  0
  15
  58
  lambda
  "'(eval (app try (-> (λ (n2) ...) <-)) (env (() ())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  58
  app
  "'(eval (λ (n2) (-> (app try (λ (n3) ...)) <-)) (env (() () ())))"
  #f
  81
  57
  16
  8
  57
  16
  73
  1
  1
  29
  #f
  89/57
  ((5 5 0)))
'(clean-cache
  sat-1
  0
  15
  58
  lambda
  "'(eval (app try (-> (λ (n3) ...) <-)) (env (() () ())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  58
  app
  "'(eval (λ (n3) (-> (app try (λ (n4) ...)) <-)) (env (() () () ())))"
  #f
  81
  57
  16
  8
  57
  16
  73
  1
  1
  29
  #f
  89/57
  ((5 5 0)))
'(clean-cache
  sat-1
  0
  15
  58
  lambda
  "'(eval (app try (-> (λ (n4) ...) <-)) (env (() () () ())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  58
  app
  "'(eval (λ (n4) (-> (app p n1 n2 n3 n4) <-)) (env (() () () () ())))"
  #f
  58
  44
  11
  3
  44
  11
  55
  1
  1
  24
  #f
  16/11
  ((4 4 0)))
'(clean-cache
  sat-1
  0
  15
  58
  ref-or-constructor
  "'(eval (app p n1 n2 n3 (-> n4 <-)) (env (() () () () ())))"
  #f
  11
  7
  3
  1
  7
  3
  10
  1
  1
  6
  #f
  8/7
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  58
  ref-or-constructor
  "'(eval (app p n1 n2 (-> n3 <-) n4) (env (() () () () ())))"
  #f
  11
  7
  3
  1
  7
  3
  10
  1
  1
  6
  #f
  8/7
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  58
  ref-or-constructor
  "'(eval (app p n1 (-> n2 <-) n3 n4) (env (() () () () ())))"
  #f
  11
  7
  3
  1
  7
  3
  10
  1
  1
  6
  #f
  8/7
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  58
  ref-or-constructor
  "'(eval (app p (-> n1 <-) n2 n3 n4) (env (() () () () ())))"
  #f
  11
  7
  3
  1
  7
  3
  10
  1
  1
  6
  #f
  8/7
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  58
  ref-or-constructor
  "'(eval (app (-> p <-) n1 n2 n3 n4) (env (() () () () ())))"
  #f
  5
  3
  2
  0
  3
  2
  5
  1
  1
  3
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  58
  ref-or-constructor
  "'(eval (app (-> try <-) (λ (n4) ...)) (env (() () () ())))"
  #t
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  58
  ref-or-constructor
  "'(eval (app (-> try <-) (λ (n3) ...)) (env (() () ())))"
  #t
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  58
  ref-or-constructor
  "'(eval (app (-> try <-) (λ (n2) ...)) (env (() ())))"
  #t
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  58
  ref-or-constructor
  "'(eval (app (-> try <-) (λ (n1) ...)) (env (())))"
  #t
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  58
  lambda
  "'(eval\n  (letrec* (... phi (try (-> (λ (f) ...) <-)) sat-solve-4 ...) ...)\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  58
  app
  "'(eval (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-)) (env (())))"
  #f
  81
  57
  16
  8
  57
  16
  73
  1
  1
  29
  #f
  89/57
  ((5 5 0)))
'(clean-cache
  sat-1
  0
  15
  58
  app
  "'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env (())))"
  #f
  81
  57
  16
  8
  57
  16
  73
  1
  1
  29
  #f
  89/57
  ((5 5 0)))
'(clean-cache
  sat-1
  0
  15
  58
  app
  "'(eval (app f (-> (app #f) <-)) (env (())))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  58
  constructor
  "'(eval (app (-> #f <-)) (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  58
  ref-or-constructor
  "'(eval (app (-> f <-) (app #f)) (env (())))"
  #f
  10
  5
  5
  0
  5
  5
  10
  1
  1
  4
  #f
  8/5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  58
  app
  "'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env (())))"
  #f
  81
  57
  16
  8
  57
  16
  73
  1
  1
  29
  #f
  89/57
  ((5 5 0)))
'(clean-cache
  sat-1
  0
  15
  58
  app
  "'(eval (app f (-> (app #t) <-)) (env (())))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  58
  constructor
  "'(eval (app (-> #t <-)) (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  58
  ref-or-constructor
  "'(eval (app (-> f <-) (app #t)) (env (())))"
  #f
  10
  5
  5
  0
  5
  5
  10
  1
  1
  4
  #f
  8/5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  58
  ref-or-constructor
  "'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  58
  lambda
  "'(eval\n  (letrec* (... () (phi (-> (λ (x1 x2 x3 x4) ...) <-)) try ...) ...)\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  58
  app
  "'(eval\n  (λ (x1 x2 x3 x4)\n    (->\n     (app\n      and\n      (app or x1 (app not x2) (app not x3))\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env (())))"
  #f
  51
  40
  9
  2
  40
  9
  49
  1
  1
  21
  #f
  59/40
  ((3 3 0)))
'(clean-cache
  sat-1
  0
  15
  58
  app
  "'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env (())))"
  #f
  26
  17
  7
  2
  17
  7
  24
  1
  1
  12
  #f
  22/17
  ((1 1 0)))
'(clean-cache
  sat-1
  0
  15
  58
  ref-or-constructor
  "'(eval (app or x4 (-> x2 <-)) (env (())))"
  #f
  18
  10
  6
  2
  10
  6
  16
  1
  1
  8
  #f
  6/5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  58
  ref-or-constructor
  "'(eval (app or (-> x4 <-) x2) (env (())))"
  #f
  18
  10
  6
  2
  10
  6
  16
  1
  1
  8
  #f
  6/5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  58
  ref-or-constructor
  "'(eval (app (-> or <-) x4 x2) (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  58
  app
  "'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env (())))"
  #f
  30
  21
  7
  2
  21
  7
  28
  1
  1
  14
  #f
  4/3
  ((1 1 0)))
'(clean-cache
  sat-1
  0
  15
  58
  app
  "'(eval (app or (app not x2) (-> (app not x3) <-)) (env (())))"
  #f
  22
  14
  6
  2
  14
  6
  20
  1
  1
  11
  #f
  17/14
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  58
  ref-or-constructor
  "'(eval (app not (-> x3 <-)) (env (())))"
  #f
  18
  10
  6
  2
  10
  6
  16
  1
  1
  8
  #f
  6/5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  58
  ref-or-constructor
  "'(eval (app (-> not <-) x3) (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  58
  app
  "'(eval (app or (-> (app not x2) <-) (app not x3)) (env (())))"
  #f
  22
  14
  6
  2
  14
  6
  20
  1
  1
  11
  #f
  17/14
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  58
  ref-or-constructor
  "'(eval (app not (-> x2 <-)) (env (())))"
  #f
  18
  10
  6
  2
  10
  6
  16
  1
  1
  8
  #f
  6/5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  58
  ref-or-constructor
  "'(eval (app (-> not <-) x2) (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  58
  ref-or-constructor
  "'(eval (app (-> or <-) (app not x2) (app not x3)) (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  58
  app
  "'(eval\n  (app\n   and\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))"
  #f
  34
  24
  8
  2
  24
  8
  32
  1
  1
  15
  #f
  11/8
  ((2 2 0)))
'(clean-cache
  sat-1
  0
  15
  58
  app
  "'(eval (app or x1 (app not x2) (-> (app not x3) <-)) (env (())))"
  #f
  22
  14
  6
  2
  14
  6
  20
  1
  1
  11
  #f
  17/14
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  58
  ref-or-constructor
  "'(eval (app not (-> x3 <-)) (env (())))"
  #f
  18
  10
  6
  2
  10
  6
  16
  1
  1
  8
  #f
  6/5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  58
  ref-or-constructor
  "'(eval (app (-> not <-) x3) (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  58
  app
  "'(eval (app or x1 (-> (app not x2) <-) (app not x3)) (env (())))"
  #f
  22
  14
  6
  2
  14
  6
  20
  1
  1
  11
  #f
  17/14
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  58
  ref-or-constructor
  "'(eval (app not (-> x2 <-)) (env (())))"
  #f
  18
  10
  6
  2
  10
  6
  16
  1
  1
  8
  #f
  6/5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  58
  ref-or-constructor
  "'(eval (app (-> not <-) x2) (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  58
  ref-or-constructor
  "'(eval (app or (-> x1 <-) (app not x2) (app not x3)) (env (())))"
  #f
  18
  10
  6
  2
  10
  6
  16
  1
  1
  8
  #f
  6/5
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  58
  ref-or-constructor
  "'(eval (app (-> or <-) x1 (app not x2) (app not x3)) (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  58
  ref-or-constructor
  "'(eval\n  (app\n   (-> and <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  58
  app
  "'(eval (letrec* (phi ... sat-solve-4) (-> (app sat-solve-4 phi) <-)) (env ()))"
  #f
  84
  59
  16
  9
  59
  16
  75
  1
  1
  29
  #f
  93/59
  ((5 5 0)))
'(clean-cache
  sat-1
  0
  15
  58
  ref-or-constructor
  "'(eval (app sat-solve-4 (-> phi <-)) (env ()))"
  #t
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  0
  15
  58
  ref-or-constructor
  "'(eval (app (-> sat-solve-4 <-) phi) (env ()))"
  #t
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
