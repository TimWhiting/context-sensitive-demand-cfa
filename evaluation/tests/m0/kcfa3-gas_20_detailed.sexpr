'(clean-cache
  kcfa3
  0
  20
  45
  app
  "'(eval ((top) app (λ (f1) ...) (λ (x1) ...)) (env ()))"
  #f
  #f)
'(clean-cache
  kcfa3
  0
  20
  45
  lambda
  "'(eval (app (λ (f1) ...) (-> (λ (x1) ...) <-)) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa3
  0
  20
  45
  app
  "'(eval (λ (x1) (-> (app (λ (f2) ...) (λ (x2) ...)) <-)) (env (())))"
  #f
  #f)
'(clean-cache
  kcfa3
  0
  20
  45
  lambda
  "'(eval (app (λ (f2) ...) (-> (λ (x2) ...) <-)) (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa3
  0
  20
  45
  app
  "'(eval (λ (x2) (-> (app (λ (f3) ...) (λ (x3) ...)) <-)) (env (() ())))"
  #f
  #f)
'(clean-cache
  kcfa3
  0
  20
  45
  lambda
  "'(eval (app (λ (f3) ...) (-> (λ (x3) ...) <-)) (env (() ())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa3
  0
  20
  45
  app
  "'(eval (λ (x3) (-> (app (λ (z) ...) (λ (y1 y2 y3) ...)) <-)) (env (() () ())))"
  #f
  #f)
'(clean-cache
  kcfa3
  0
  20
  45
  lambda
  "'(eval (app (λ (z) ...) (-> (λ (y1 y2 y3) ...) <-)) (env (() () ())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa3
  0
  20
  45
  ref-or-constructor
  "'(eval (λ (y1 y2 y3) (-> y1 <-)) (env (() () () ())))"
  #f
  #f)
'(clean-cache
  kcfa3
  0
  20
  45
  lambda
  "'(eval (app (-> (λ (z) ...) <-) (λ (y1 y2 y3) ...)) (env (() () ())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa3
  0
  20
  45
  app
  "'(eval (λ (z) (-> (app z x1 x2 x3) <-)) (env (() () () ())))"
  #f
  #f)
'(clean-cache
  kcfa3
  0
  20
  45
  ref-or-constructor
  "'(eval (app z x1 x2 (-> x3 <-)) (env (() () () ())))"
  #f
  #f)
'(clean-cache
  kcfa3
  0
  20
  45
  ref-or-constructor
  "'(eval (app z x1 (-> x2 <-) x3) (env (() () () ())))"
  #f
  9
  6
  3
  0
  6
  3
  9
  1
  1
  5
  #f
  7/6
  (0 0 0))
'(clean-cache
  kcfa3
  0
  20
  45
  ref-or-constructor
  "'(eval (app z (-> x1 <-) x2 x3) (env (() () () ())))"
  #f
  9
  6
  3
  0
  6
  3
  9
  1
  1
  5
  #f
  7/6
  (0 0 0))
'(clean-cache
  kcfa3
  0
  20
  45
  ref-or-constructor
  "'(eval (app (-> z <-) x1 x2 x3) (env (() () () ())))"
  #f
  3
  2
  1
  0
  2
  1
  3
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa3
  0
  20
  45
  lambda
  "'(eval (app (-> (λ (f3) ...) <-) (λ (x3) ...)) (env (() ())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa3
  0
  20
  45
  let
  "'(eval (λ (f3) (-> (let (c) ...) <-)) (env (() () ())))"
  #f
  #f)
'(clean-cache
  kcfa3
  0
  20
  45
  app
  "'(eval\n  (let (... () (c (-> (app f3 (app #t)) <-)) () ...) ...)\n  (env (() () ())))"
  #f
  #f)
'(clean-cache
  kcfa3
  0
  20
  45
  app
  "'(eval (app f3 (-> (app #t) <-)) (env (() () ())))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa3
  0
  20
  45
  constructor
  "'(eval (app (-> #t <-)) (env (() () ())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa3
  0
  20
  45
  ref-or-constructor
  "'(eval (app (-> f3 <-) (app #t)) (env (() () ())))"
  #f
  3
  2
  1
  0
  2
  1
  3
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa3
  0
  20
  45
  app
  "'(eval (let (c) (-> (app f3 (app #f)) <-)) (env (() () ())))"
  #f
  #f)
'(clean-cache
  kcfa3
  0
  20
  45
  app
  "'(eval (app f3 (-> (app #f) <-)) (env (() () ())))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa3
  0
  20
  45
  constructor
  "'(eval (app (-> #f <-)) (env (() () ())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa3
  0
  20
  45
  ref-or-constructor
  "'(eval (app (-> f3 <-) (app #f)) (env (() () ())))"
  #f
  3
  2
  1
  0
  2
  1
  3
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa3
  0
  20
  45
  lambda
  "'(eval (app (-> (λ (f2) ...) <-) (λ (x2) ...)) (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa3
  0
  20
  45
  let
  "'(eval (λ (f2) (-> (let (b) ...) <-)) (env (() ())))"
  #f
  #f)
'(clean-cache
  kcfa3
  0
  20
  45
  app
  "'(eval (let (... () (b (-> (app f2 (app #t)) <-)) () ...) ...) (env (() ())))"
  #f
  #f)
'(clean-cache
  kcfa3
  0
  20
  45
  app
  "'(eval (app f2 (-> (app #t) <-)) (env (() ())))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa3
  0
  20
  45
  constructor
  "'(eval (app (-> #t <-)) (env (() ())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa3
  0
  20
  45
  ref-or-constructor
  "'(eval (app (-> f2 <-) (app #t)) (env (() ())))"
  #f
  3
  2
  1
  0
  2
  1
  3
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa3
  0
  20
  45
  app
  "'(eval (let (b) (-> (app f2 (app #f)) <-)) (env (() ())))"
  #f
  #f)
'(clean-cache
  kcfa3
  0
  20
  45
  app
  "'(eval (app f2 (-> (app #f) <-)) (env (() ())))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa3
  0
  20
  45
  constructor
  "'(eval (app (-> #f <-)) (env (() ())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa3
  0
  20
  45
  ref-or-constructor
  "'(eval (app (-> f2 <-) (app #f)) (env (() ())))"
  #f
  3
  2
  1
  0
  2
  1
  3
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa3
  0
  20
  45
  lambda
  "'(eval (app (-> (λ (f1) ...) <-) (λ (x1) ...)) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa3
  0
  20
  45
  let
  "'(eval (λ (f1) (-> (let (a) ...) <-)) (env (())))"
  #f
  #f)
'(clean-cache
  kcfa3
  0
  20
  45
  app
  "'(eval (let (... () (a (-> (app f1 (app #t)) <-)) () ...) ...) (env (())))"
  #f
  #f)
'(clean-cache
  kcfa3
  0
  20
  45
  app
  "'(eval (app f1 (-> (app #t) <-)) (env (())))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa3
  0
  20
  45
  constructor
  "'(eval (app (-> #t <-)) (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa3
  0
  20
  45
  ref-or-constructor
  "'(eval (app (-> f1 <-) (app #t)) (env (())))"
  #f
  3
  2
  1
  0
  2
  1
  3
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa3
  0
  20
  45
  app
  "'(eval (let (a) (-> (app f1 (app #f)) <-)) (env (())))"
  #f
  #f)
'(clean-cache
  kcfa3
  0
  20
  45
  app
  "'(eval (app f1 (-> (app #f) <-)) (env (())))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa3
  0
  20
  45
  constructor
  "'(eval (app (-> #f <-)) (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa3
  0
  20
  45
  ref-or-constructor
  "'(eval (app (-> f1 <-) (app #f)) (env (())))"
  #f
  3
  2
  1
  0
  2
  1
  3
  1
  1
  2
  #t
  1
  (0 0 0))
