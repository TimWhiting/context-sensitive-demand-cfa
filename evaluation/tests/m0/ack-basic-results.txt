'(expression:
  (let ((ack
         (λ (m n)
           (match
            (app = m 0)
            (#t (app + n 1))
            (#f
             (match
              (app = n 0)
              (#t (app ack (app - m 1) 1))
              (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
    (app ack 3 12)))
'(query: (top) ())
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
'(query:
  (let ((->
         ack
         =
         (λ (m n)
           (match
            (app = m 0)
            (#t (app + n 1))
            (#f
             (match
              (app = n 0)
              (#t (app ack (app - m 1) 1))
              (#f (app ack (app - m 1) (app ack m (app - n 1))))))))
         <-))
    bod)
  ())
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
'(query:
  (λ (m n)
    (->
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
     <-))
  (()))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
'(query:
  (match
   (app = m 0)
   (#t (app + n 1))
   (->
    #f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))
    <-))
  (()))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
'(query:
  (match
   (app = n 0)
   (#t (app ack (app - m 1) 1))
   (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))
  (()))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
'(query: (app ack (app - m 1) (-> (app ack m (app - n 1)) <-)) (()))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
'(query: (app ack m (-> (app - n 1) <-)) (()))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
'(query: (app - n (-> 1 <-)) (()))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
'(query: (app - (-> n <-) 1) (()))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
'(query: (app (-> - <-) n 1) (()))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
'(query: (app ack (-> m <-) (app - n 1)) (()))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
'(query: (app (-> ack <-) m (app - n 1)) (()))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
'(query: (app ack (-> (app - m 1) <-) (app ack m (app - n 1))) (()))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
'(query: (app - m (-> 1 <-)) (()))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
'(query: (app - (-> m <-) 1) (()))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
'(query: (app (-> - <-) m 1) (()))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
'(query: (app (-> ack <-) (app - m 1) (app ack m (app - n 1))) (()))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
'(query:
  (match
   (app = n 0)
   (-> #t (app ack (app - m 1) 1) <-)
   (#f (app ack (app - m 1) (app ack m (app - n 1)))))
  (()))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
'(query: (app ack (app - m 1) (-> 1 <-)) (()))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
'(query: (app ack (-> (app - m 1) <-) 1) (()))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
'(query: (app - m (-> 1 <-)) (()))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
'(query: (app - (-> m <-) 1) (()))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
'(query: (app (-> - <-) m 1) (()))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
'(query: (app (-> ack <-) (app - m 1) 1) (()))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
'(query:
  (match
   (-> (app = n 0) <-)
   (#t (app ack (app - m 1) 1))
   (#f (app ack (app - m 1) (app ack m (app - n 1)))))
  (()))
'(clos/con: (#f #t))
'(literals: (⊥ ⊥ ⊥ ⊥))
'(query: (app = n (-> 0 <-)) (()))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
'(query: (app = (-> n <-) 0) (()))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
'(query: (app (-> = <-) n 0) (()))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
'(query:
  (match
   (app = m 0)
   (-> #t (app + n 1) <-)
   (#f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
  (()))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
'(query: (app + n (-> 1 <-)) (()))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
'(query: (app + (-> n <-) 1) (()))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
'(query: (app (-> + <-) n 1) (()))
'(clos/con: (#<procedure:do-add>))
'(literals: (⊥ ⊥ ⊥ ⊥))
'(query:
  (match
   (-> (app = m 0) <-)
   (#t (app + n 1))
   (#f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
  (()))
'(clos/con: (#f #t))
'(literals: (⊥ ⊥ ⊥ ⊥))
'(query: (app = m (-> 0 <-)) (()))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
'(query: (app = (-> m <-) 0) (()))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
'(query: (app (-> = <-) m 0) (()))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
'(query: (let (ack) (-> (app ack 3 12) <-)) ())
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
'(query: (app ack 3 (-> 12 <-)) ())
'(clos/con: ⊥)
'(literals: (12 ⊥ ⊥ ⊥))
'(query: (app ack (-> 3 <-) 12) ())
'(clos/con: ⊥)
'(literals: (3 ⊥ ⊥ ⊥))
'(query: (app (-> ack <-) 3 12) ())
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
