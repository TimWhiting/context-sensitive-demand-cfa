'(expression:
  (letrec ((a
            (λ (y) (match (app equal? y 0) (#t (app a (app - y 1))) (#f y)))))
    (app a 2)))
(list 'query: '(top) (menv '()))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(letrec ((->
            a
            =
            (λ (y) (match (app equal? y 0) (#t (app a (app - y 1))) (#f y)))
            <-))
    bod)
 (menv '()))
'(clos/con: ((λ (y) (match (app equal? y 0) (#t (app a (app - y 1))) (#f y)))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (y) (-> (match (app equal? y 0) (#t (app a (app - y 1))) (#f y)) <-))
 (menv '(())))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match (app equal? y 0) (#t (app a (app - y 1))) (-> #f y <-))
 (menv '(())))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
 (menv '(())))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list 'query: '(app a (-> (app - y 1) <-)) (menv '(())))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list 'query: '(app - y (-> 1 <-)) (menv '(())))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list 'query: '(app - (-> y <-) 1) (menv '(())))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list 'query: '(app (-> - <-) y 1) (menv '(())))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app (-> a <-) (app - y 1)) (menv '(())))
'(clos/con: ((λ (y) (match (app equal? y 0) (#t (app a (app - y 1))) (#f y)))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match (-> (app equal? y 0) <-) (#t (app a (app - y 1))) (#f y))
 (menv '(())))
'(clos/con: (#t #f))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app equal? y (-> 0 <-)) (menv '(())))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list 'query: '(app equal? (-> y <-) 0) (menv '(())))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list 'query: '(app (-> equal? <-) y 0) (menv '(())))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(letrec (a) (-> (app a 2) <-)) (menv '()))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list 'query: '(app a (-> 2 <-)) (menv '()))
'(clos/con: ⊥)
'(literals: (2 ⊥ ⊥ ⊥))
(list 'query: '(app (-> a <-) 2) (menv '()))
'(clos/con: ((λ (y) (match (app equal? y 0) (#t (app a (app - y 1))) (#f y)))))
'(literals: (⊥ ⊥ ⊥ ⊥))
