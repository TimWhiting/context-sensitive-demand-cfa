'(clean-cache
  map
  0
  1000
  97
  lettypes
  "'(eval ((top) lettypes (cons ... nil) ...) (env ()))"
  #f
  70
  60
  10
  0
  60
  10
  70
  1
  1
  41
  #f
  9/5
  (8 8 0))
'(clean-cache
  map
  0
  1000
  97
  letrec*
  "'(eval (lettypes cons ... nil (letrec* (car ... my-map) ...)) (env ()))"
  #f
  69
  59
  10
  0
  59
  10
  69
  1
  1
  41
  #f
  106/59
  (7 7 0))
'(clean-cache
  map
  0
  1000
  97
  lambda
  "'(eval (letrec* (... id (my-map (-> (λ (f l) ...) <-)) () ...) ...) (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  map
  0
  1000
  97
  let
  "'(eval (λ (f l) (-> (let (_) ...) <-)) (env (())))"
  #f
  64
  54
  10
  0
  54
  10
  64
  1
  1
  39
  #f
  49/27
  (7 7 0))
'(clean-cache
  map
  0
  1000
  97
  app
  "'(eval (let (... () (_ (-> (app debug-trace) <-)) () ...) ...) (env (())))"
  #f
  5
  5
  0
  0
  5
  0
  5
  1
  1
  5
  #t
  1
  (0 0 0))
'(clean-cache
  map
  0
  1000
  97
  ref-or-constructor
  "'(eval (app (-> debug-trace <-)) (env (())))"
  (lambda number char string quoted constructor)
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  map
  0
  1000
  97
  letrec
  "'(eval (let (_) (-> (letrec (lp) ...) <-)) (env (())))"
  #f
  63
  53
  10
  0
  53
  10
  63
  1
  1
  39
  #f
  96/53
  (7 8 0))
'(clean-cache
  map
  0
  1000
  97
  lambda
  "'(eval (letrec (... () (lp (-> (λ (lst) ...) <-)) () ...) ...) (env (())))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  map
  0
  1000
  97
  match
  "'(eval (λ (lst) (-> (match (app not (app pair? ...)) ...) <-)) (env (() ())))"
  #f
  59
  49
  10
  0
  49
  10
  59
  1
  1
  37
  #f
  90/49
  (6 6 0))
'(clean-cache
  map
  0
  1000
  97
  app
  "'(eval\n  (match (app not (app pair? lst)) (#f) (_ (-> (app nil) <-)))\n  (env (() ())))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  map
  0
  1000
  97
  ref-or-constructor
  "'(eval (app (-> nil <-)) (env (() ())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  map
  0
  1000
  97
  app
  "'(eval\n  (match\n   (app not (app pair? lst))\n   ((#f)\n    (-> (app cons (app (app id ...) (app car ...)) (app lp (app cdr ...))) <-))\n   _)\n  (env (() ())))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  map
  0
  1000
  97
  app
  "'(eval\n  (app cons (app (app id f) (app car lst)) (-> (app lp (app cdr lst)) <-))\n  (env (() ())))"
  #f
  62
  52
  10
  0
  52
  10
  62
  1
  1
  39
  #f
  47/26
  (7 7 0))
'(clean-cache
  map
  0
  1000
  97
  app
  "'(eval (app lp (-> (app cdr lst) <-)) (env (() ())))"
  #f
  38
  30
  8
  0
  30
  8
  38
  1
  1
  24
  #f
  11/6
  (3 3 0))
'(clean-cache
  map
  0
  1000
  97
  ref-or-constructor
  "'(eval (app cdr (-> lst <-)) (env (() ())))"
  #f
  38
  30
  8
  0
  30
  8
  38
  1
  1
  24
  #f
  11/6
  (4 4 0))
'(clean-cache
  map
  0
  1000
  97
  ref-or-constructor
  "'(eval (app (-> cdr <-) lst) (env (() ())))"
  (lambda number char string quoted constructor)
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  map
  0
  1000
  97
  ref-or-constructor
  "'(eval (app (-> lp <-) (app cdr lst)) (env (() ())))"
  (lambda number char string quoted constructor)
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  map
  0
  1000
  97
  app
  "'(eval\n  (app cons (-> (app (app id f) (app car lst)) <-) (app lp (app cdr lst)))\n  (env (() ())))"
  #f
  83
  61
  22
  0
  61
  22
  83
  1
  1
  39
  #f
  112/61
  (14 15 0))
'(clean-cache
  map
  0
  1000
  97
  app
  "'(eval (app (app id f) (-> (app car lst) <-)) (env (() ())))"
  #f
  47
  37
  10
  0
  37
  10
  47
  1
  1
  26
  #f
  77/37
  (8 9 0))
'(clean-cache
  map
  0
  1000
  97
  ref-or-constructor
  "'(eval (app car (-> lst <-)) (env (() ())))"
  #f
  39
  31
  8
  0
  31
  8
  39
  1
  1
  24
  #f
  2
  (6 8 0))
'(clean-cache
  map
  0
  1000
  97
  ref-or-constructor
  "'(eval (app (-> car <-) lst) (env (() ())))"
  (lambda number char string quoted constructor)
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  map
  0
  1000
  97
  app
  "'(eval (app (-> (app id f) <-) (app car lst)) (env (() ())))"
  #f
  19
  12
  7
  0
  12
  7
  19
  1
  1
  6
  #f
  3/2
  (2 2 0))
'(clean-cache
  map
  0
  1000
  97
  ref-or-constructor
  "'(eval (app id (-> f <-)) (env (() ())))"
  #f
  17
  10
  7
  0
  10
  7
  17
  1
  1
  5
  #f
  3/2
  (2 2 0))
'(clean-cache
  map
  0
  1000
  97
  ref-or-constructor
  "'(eval (app (-> id <-) f) (env (() ())))"
  (lambda number char string quoted constructor)
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  map
  0
  1000
  97
  ref-or-constructor
  "'(eval\n  (app (-> cons <-) (app (app id f) (app car lst)) (app lp (app cdr lst)))\n  (env (() ())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  map
  0
  1000
  97
  app
  "'(eval (match (-> (app not (app pair? lst)) <-) (#f) _) (env (() ())))"
  #f
  54
  44
  10
  0
  44
  10
  54
  1
  1
  33
  #f
  21/11
  (9 11 0))
'(clean-cache
  map
  0
  1000
  97
  app
  "'(eval (app not (-> (app pair? lst) <-)) (env (() ())))"
  #f
  50
  40
  10
  0
  40
  10
  50
  1
  1
  30
  #f
  79/40
  (8 9 0))
'(clean-cache
  map
  0
  1000
  97
  ref-or-constructor
  "'(eval (app pair? (-> lst <-)) (env (() ())))"
  #f
  39
  31
  8
  0
  31
  8
  39
  1
  1
  24
  #f
  2
  (3 3 0))
'(clean-cache
  map
  0
  1000
  97
  ref-or-constructor
  "'(eval (app (-> pair? <-) lst) (env (() ())))"
  (lambda number char string quoted constructor)
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  map
  0
  1000
  97
  ref-or-constructor
  "'(eval (app (-> not <-) (app pair? lst)) (env (() ())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  map
  0
  1000
  97
  app
  "'(eval (letrec (lp) (-> (app lp l) <-)) (env (())))"
  #f
  62
  52
  10
  0
  52
  10
  62
  1
  1
  39
  #f
  47/26
  (7 7 0))
'(clean-cache
  map
  0
  1000
  97
  ref-or-constructor
  "'(eval (app lp (-> l <-)) (env (())))"
  #f
  8
  5
  3
  0
  5
  3
  8
  1
  1
  4
  #f
  6/5
  (0 0 0))
'(clean-cache
  map
  0
  1000
  97
  ref-or-constructor
  "'(eval (app (-> lp <-) l) (env (())))"
  (lambda number char string quoted constructor)
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  map
  0
  1000
  97
  lambda
  "'(eval\n  (letrec* (... debug-trace (id (-> (λ (xx) ...) <-)) my-map ...) ...)\n  (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  map
  0
  1000
  97
  let
  "'(eval (λ (xx) (-> (let (_) ...) <-)) (env (())))"
  #f
  17
  10
  7
  0
  10
  7
  17
  1
  1
  5
  #f
  3/2
  (1 1 0))
'(clean-cache
  map
  0
  1000
  97
  app
  "'(eval (let (... () (_ (-> (app debug-trace) <-)) () ...) ...) (env (())))"
  #f
  5
  5
  0
  0
  5
  0
  5
  1
  1
  5
  #t
  1
  (0 0 0))
'(clean-cache
  map
  0
  1000
  97
  ref-or-constructor
  "'(eval (app (-> debug-trace <-)) (env (())))"
  (lambda number char string quoted constructor)
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  map
  0
  1000
  97
  ref-or-constructor
  "'(eval (let (_) (-> xx <-)) (env (())))"
  #f
  17
  10
  7
  0
  10
  7
  17
  1
  1
  5
  #f
  3/2
  (1 1 0))
'(clean-cache
  map
  0
  1000
  97
  lambda
  "'(eval\n  (letrec* (... pair? (debug-trace (-> (λ () ...) <-)) id ...) ...)\n  (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  map
  0
  1000
  97
  app
  "'(eval (λ () (-> (app #f) <-)) (env (())))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  map
  0
  1000
  97
  constructor
  "'(eval (app (-> #f <-)) (env (())))"
  (constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  map
  0
  1000
  97
  lambda
  "'(eval\n  (letrec* (... cdr (pair? (-> (λ (pair?-v) ...) <-)) debug-trace ...) ...)\n  (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  map
  0
  1000
  97
  match
  "'(eval (λ (pair?-v) (-> (match pair?-v ...) <-)) (env (())))"
  #f
  47
  37
  10
  0
  37
  10
  47
  1
  1
  28
  #f
  75/37
  (6 7 0))
'(clean-cache
  map
  0
  1000
  97
  app
  "'(eval (match pair?-v (cons pair?-c pair?-d) (_ (-> (app #f) <-))) (env (())))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  map
  0
  1000
  97
  constructor
  "'(eval (app (-> #f <-)) (env (())))"
  (constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  map
  0
  1000
  97
  app
  "'(eval (match pair?-v ((cons pair?-c pair?-d) (-> (app #t) <-)) _) (env (())))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  map
  0
  1000
  97
  constructor
  "'(eval (app (-> #t <-)) (env (())))"
  (constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  map
  0
  1000
  97
  ref-or-constructor
  "'(eval (match (-> pair?-v <-) (cons pair?-c pair?-d) _) (env (())))"
  #f
  42
  32
  10
  0
  32
  10
  42
  1
  1
  24
  #f
  69/32
  (3 4 0))
'(clean-cache
  map
  0
  1000
  97
  lambda
  "'(eval\n  (letrec* (... car (cdr (-> (λ (cdr-v) ...) <-)) pair? ...) ...)\n  (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  map
  0
  1000
  97
  match
  "'(eval (λ (cdr-v) (-> (match cdr-v ...) <-)) (env (())))"
  #f
  38
  30
  8
  0
  30
  8
  38
  1
  1
  24
  #f
  11/6
  (4 4 0))
'(clean-cache
  map
  0
  1000
  97
  ref-or-constructor
  "'(eval (match cdr-v ((cons cdr-c cdr-d) (-> cdr-d <-))) (env (())))"
  #f
  38
  30
  8
  0
  30
  8
  38
  1
  1
  24
  #f
  11/6
  (4 4 0))
'(clean-cache
  map
  0
  1000
  97
  ref-or-constructor
  "'(eval (match (-> cdr-v <-) (cons cdr-c cdr-d)) (env (())))"
  #f
  38
  30
  8
  0
  30
  8
  38
  1
  1
  24
  #f
  11/6
  (3 3 0))
'(clean-cache
  map
  0
  1000
  97
  lambda
  "'(eval (letrec* (... () (car (-> (λ (car-v) ...) <-)) cdr ...) ...) (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  map
  0
  1000
  97
  match
  "'(eval (λ (car-v) (-> (match car-v ...) <-)) (env (())))"
  #f
  44
  34
  10
  0
  34
  10
  44
  1
  1
  24
  #f
  73/34
  (5 6 0))
'(clean-cache
  map
  0
  1000
  97
  ref-or-constructor
  "'(eval (match car-v ((cons car-c car-d) (-> car-c <-))) (env (())))"
  #f
  43
  33
  10
  0
  33
  10
  43
  1
  1
  24
  #f
  71/33
  (4 4 0))
'(clean-cache
  map
  0
  1000
  97
  ref-or-constructor
  "'(eval (match (-> car-v <-) (cons car-c car-d)) (env (())))"
  #f
  42
  32
  10
  0
  32
  10
  42
  1
  1
  24
  #f
  69/32
  (4 4 0))
'(clean-cache
  map
  0
  1000
  97
  let
  "'(eval (letrec* (car ... my-map) (-> (let (_) ...) <-)) (env ()))"
  #f
  68
  58
  10
  0
  58
  10
  68
  1
  1
  41
  #f
  52/29
  (6 7 0))
'(clean-cache
  map
  0
  1000
  97
  app
  "'(eval\n  (let (...\n        ()\n        (_\n         (-> (app my-map (app id (λ (a) ...)) (app cons 1 (app cons ...))) <-))\n        ()\n        ...)\n    ...)\n  (env ()))"
  #f
  67
  57
  10
  0
  57
  10
  67
  1
  1
  41
  #f
  34/19
  (6 6 0))
'(clean-cache
  map
  0
  1000
  97
  app
  "'(eval\n  (app\n   my-map\n   (app id (λ (a) ...))\n   (-> (app cons 1 (app cons 2 (app cons ...))) <-))\n  (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  map
  0
  1000
  97
  app
  "'(eval (app cons 1 (-> (app cons 2 (app cons 3 (app nil ...))) <-)) (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  map
  0
  1000
  97
  app
  "'(eval (app cons 2 (-> (app cons 3 (app nil)) <-)) (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  map
  0
  1000
  97
  app
  "'(eval (app cons 3 (-> (app nil) <-)) (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  map
  0
  1000
  97
  ref-or-constructor
  "'(eval (app (-> nil <-)) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  map
  0
  1000
  97
  number
  "'(eval (app cons (-> 3 <-) (app nil)) (env ()))"
  (number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  map
  0
  1000
  97
  ref-or-constructor
  "'(eval (app (-> cons <-) 3 (app nil)) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  map
  0
  1000
  97
  number
  "'(eval (app cons (-> 2 <-) (app cons 3 (app nil))) (env ()))"
  (number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  map
  0
  1000
  97
  ref-or-constructor
  "'(eval (app (-> cons <-) 2 (app cons 3 (app nil))) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  map
  0
  1000
  97
  number
  "'(eval (app cons (-> 1 <-) (app cons 2 (app cons 3 (app nil ...)))) (env ()))"
  (number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  map
  0
  1000
  97
  ref-or-constructor
  "'(eval (app (-> cons <-) 1 (app cons 2 (app cons 3 (app nil ...)))) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  map
  0
  1000
  97
  app
  "'(eval\n  (app\n   my-map\n   (-> (app id (λ (a) ...)) <-)\n   (app cons 1 (app cons 2 (app cons ...))))\n  (env ()))"
  #f
  17
  10
  7
  0
  10
  7
  17
  1
  1
  5
  #f
  3/2
  (1 1 0))
'(clean-cache
  map
  0
  1000
  97
  lambda
  "'(eval (app id (-> (λ (a) ...) <-)) (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  map
  0
  1000
  97
  app
  "'(eval (λ (a) (-> (app + 1 a) <-)) (env (())))"
  #f
  68
  47
  21
  0
  47
  21
  68
  1
  1
  34
  #f
  89/47
  (6 6 0))
'(clean-cache
  map
  0
  1000
  97
  ref-or-constructor
  "'(eval (app + 1 (-> a <-)) (env (())))"
  #f
  65
  44
  21
  0
  44
  21
  65
  1
  1
  32
  #f
  85/44
  (7 7 0))
'(clean-cache
  map
  0
  1000
  97
  number
  "'(eval (app + (-> 1 <-) a) (env (())))"
  (number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  map
  0
  1000
  97
  ref-or-constructor
  "'(eval (app (-> + <-) 1 a) (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  map
  0
  1000
  97
  ref-or-constructor
  "'(eval (app (-> id <-) (λ (a) ...)) (env ()))"
  (lambda number char string quoted constructor)
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  map
  0
  1000
  97
  ref-or-constructor
  "'(eval\n  (app\n   (-> my-map <-)\n   (app id (λ (a) ...))\n   (app cons 1 (app cons 2 (app cons ...))))\n  (env ()))"
  (lambda number char string quoted constructor)
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  map
  0
  1000
  97
  app
  "'(eval\n  (let (_)\n    (-> (app my-map (app id (λ (b) ...)) (app cons 7 (app cons ...))) <-))\n  (env ()))"
  #f
  67
  57
  10
  0
  57
  10
  67
  1
  1
  41
  #f
  34/19
  (7 7 0))
'(clean-cache
  map
  0
  1000
  97
  app
  "'(eval\n  (app\n   my-map\n   (app id (λ (b) ...))\n   (-> (app cons 7 (app cons 8 (app cons ...))) <-))\n  (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  map
  0
  1000
  97
  app
  "'(eval (app cons 7 (-> (app cons 8 (app cons 9 (app nil ...))) <-)) (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  map
  0
  1000
  97
  app
  "'(eval (app cons 8 (-> (app cons 9 (app nil)) <-)) (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  map
  0
  1000
  97
  app
  "'(eval (app cons 9 (-> (app nil) <-)) (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  map
  0
  1000
  97
  ref-or-constructor
  "'(eval (app (-> nil <-)) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  map
  0
  1000
  97
  number
  "'(eval (app cons (-> 9 <-) (app nil)) (env ()))"
  (number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  map
  0
  1000
  97
  ref-or-constructor
  "'(eval (app (-> cons <-) 9 (app nil)) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  map
  0
  1000
  97
  number
  "'(eval (app cons (-> 8 <-) (app cons 9 (app nil))) (env ()))"
  (number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  map
  0
  1000
  97
  ref-or-constructor
  "'(eval (app (-> cons <-) 8 (app cons 9 (app nil))) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  map
  0
  1000
  97
  number
  "'(eval (app cons (-> 7 <-) (app cons 8 (app cons 9 (app nil ...)))) (env ()))"
  (number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  map
  0
  1000
  97
  ref-or-constructor
  "'(eval (app (-> cons <-) 7 (app cons 8 (app cons 9 (app nil ...)))) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  map
  0
  1000
  97
  app
  "'(eval\n  (app\n   my-map\n   (-> (app id (λ (b) ...)) <-)\n   (app cons 7 (app cons 8 (app cons ...))))\n  (env ()))"
  #f
  17
  10
  7
  0
  10
  7
  17
  1
  1
  5
  #f
  3/2
  (1 1 0))
'(clean-cache
  map
  0
  1000
  97
  lambda
  "'(eval (app id (-> (λ (b) ...) <-)) (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  map
  0
  1000
  97
  app
  "'(eval (λ (b) (-> (app + 1 b) <-)) (env (())))"
  #f
  68
  47
  21
  0
  47
  21
  68
  1
  1
  34
  #f
  89/47
  (6 7 0))
'(clean-cache
  map
  0
  1000
  97
  ref-or-constructor
  "'(eval (app + 1 (-> b <-)) (env (())))"
  #f
  65
  44
  21
  0
  44
  21
  65
  1
  1
  32
  #f
  85/44
  (8 8 0))
'(clean-cache
  map
  0
  1000
  97
  number
  "'(eval (app + (-> 1 <-) b) (env (())))"
  (number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  map
  0
  1000
  97
  ref-or-constructor
  "'(eval (app (-> + <-) 1 b) (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  map
  0
  1000
  97
  ref-or-constructor
  "'(eval (app (-> id <-) (λ (b) ...)) (env ()))"
  (lambda number char string quoted constructor)
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  map
  0
  1000
  97
  ref-or-constructor
  "'(eval\n  (app\n   (-> my-map <-)\n   (app id (λ (b) ...))\n   (app cons 7 (app cons 8 (app cons ...))))\n  (env ()))"
  (lambda number char string quoted constructor)
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
