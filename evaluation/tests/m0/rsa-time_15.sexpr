'(clean-cache
  rsa
  0
  15
  122
  lettypes
  "\"'(eval ((top) lettypes (cons) ...) (env ()))\""
  246
  206
  29
  11
  206
  29
  235
  1
  1
  135
  #f
  289/206
  ((5 5 0) (5 5 0) (5 5 0)))
'(clean-cache
  rsa
  0
  15
  122
  letrec*
  "\"'(eval\n  (lettypes cons ... cons (letrec* (car ... decrypted-ciphertext) ...))\n  (env ()))\""
  245
  205
  29
  11
  205
  29
  234
  1
  1
  135
  #f
  7/5
  ((5 5 0) (5 5 0) (5 5 0)))
'(clean-cache
  rsa
  0
  15
  122
  app
  "\"'(eval\n  (letrec*\n   (...\n    ciphertext\n    (decrypted-ciphertext (-> (app decrypt ciphertext d n) <-))\n    ()\n    ...)\n   ...)\n  (env ()))\""
  231
  191
  29
  11
  191
  29
  220
  1
  1
  126
  #f
  268/191
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app decrypt ciphertext d (-> n <-)) (env ()))\""
  7
  7
  0
  0
  7
  0
  7
  1
  1
  7
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app decrypt ciphertext (-> d <-) n) (env ()))\""
  142
  117
  18
  7
  117
  18
  135
  1
  1
  82
  #f
  152/117
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app decrypt (-> ciphertext <-) d n) (env ()))\""
  225
  186
  29
  10
  186
  29
  215
  1
  1
  123
  #f
  87/62
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  rsa
  0
  15
  122
  app
  "\"'(eval\n  (letrec*\n   (...\n    plaintext\n    (ciphertext (-> (app encrypt plaintext e n) <-))\n    decrypted-ciphertext\n    ...)\n   ...)\n  (env ()))\""
  225
  186
  29
  10
  186
  29
  215
  1
  1
  123
  #f
  87/62
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app encrypt plaintext e (-> n <-)) (env ()))\""
  7
  7
  0
  0
  7
  0
  7
  1
  1
  7
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  0
  15
  122
  app
  "\"'(eval\n  (letrec* (... e (d (-> (app private-exponent e p q) <-)) plaintext ...) ...)\n  (env ()))\""
  141
  116
  18
  7
  116
  18
  134
  1
  1
  82
  #f
  75/58
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  rsa
  0
  15
  122
  app
  "\"'(eval (letrec* (... q (n (-> (app * p q) <-)) e ...) ...) (env ()))\""
  6
  6
  0
  0
  6
  0
  6
  1
  1
  6
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  0
  15
  122
  app
  "\"'(eval (位 (c d n) (-> (app modulo-power c d n) <-)) (env (())))\""
  227
  188
  29
  10
  188
  29
  217
  1
  1
  124
  #f
  66/47
  ((9/2 9/2 0) (9/2 9/2 0) (5 5 0)))
'(clean-cache
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app modulo-power c d (-> n <-)) (env (())))\""
  10
  8
  2
  0
  8
  2
  10
  1
  1
  8
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app modulo-power c (-> d <-) n) (env (())))\""
  145
  118
  20
  7
  118
  20
  138
  1
  1
  82
  #f
  77/59
  ((3 3 0) (5/2 5/2 0) (3 3 0)))
'(clean-cache
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app modulo-power (-> c <-) d n) (env (())))\""
  225
  186
  29
  10
  186
  29
  215
  1
  1
  123
  #f
  87/62
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  rsa
  0
  15
  122
  match
  "\"'(eval (位 (m e n) (-> (match (app > m n) ...) <-)) (env (())))\""
  225
  186
  29
  10
  186
  29
  215
  1
  1
  123
  #f
  87/62
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  rsa
  0
  15
  122
  app
  "\"'(eval\n  (match\n   (app > m n)\n   (#f)\n   (_ (-> (app error \"The modulus is too small to encrypt the message.\") <-)))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  0
  15
  122
  app
  "\"'(eval\n  (match (app > m n) ((#f) (-> (app modulo-power m e n) <-)) _)\n  (env (())))\""
  225
  186
  29
  10
  186
  29
  215
  1
  1
  123
  #f
  87/62
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app modulo-power m e (-> n <-)) (env (())))\""
  10
  8
  2
  0
  8
  2
  10
  1
  1
  8
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app modulo-power m (-> e <-) n) (env (())))\""
  5
  3
  2
  0
  3
  2
  5
  1
  1
  3
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app modulo-power (-> m <-) e n) (env (())))\""
  5
  3
  2
  0
  3
  2
  5
  1
  1
  3
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  0
  15
  122
  app
  "\"'(eval (match (-> (app > m n) <-) (#f) _) (env (())))\""
  15
  13
  2
  0
  13
  2
  15
  1
  1
  13
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app > m (-> n <-)) (env (())))\""
  10
  8
  2
  0
  8
  2
  10
  1
  1
  8
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app > (-> m <-) n) (env (())))\""
  5
  3
  2
  0
  3
  2
  5
  1
  1
  3
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  0
  15
  122
  match
  "\"'(eval\n  (位 (e p q) (-> (match (app is-legal-public-exponent? e p q) ...) <-))\n  (env (())))\""
  137
  113
  18
  6
  113
  18
  131
  1
  1
  80
  #f
  146/113
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  rsa
  0
  15
  122
  app
  "\"'(eval\n  (match\n   (app is-legal-public-exponent? e p q)\n   (#f)\n   (_ (-> (app modulo-inverse e (app totient p q)) <-)))\n  (env (())))\""
  111
  88
  18
  5
  88
  18
  106
  1
  1
  56
  #f
  15/11
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  rsa
  0
  15
  122
  app
  "\"'(eval (app modulo-inverse e (-> (app totient p q) <-)) (env (())))\""
  34
  25
  8
  1
  25
  8
  33
  1
  1
  25
  #t
  1
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app totient p (-> q <-)) (env (())))\""
  5
  3
  2
  0
  3
  2
  5
  1
  1
  3
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app totient (-> p <-) q) (env (())))\""
  5
  3
  2
  0
  3
  2
  5
  1
  1
  3
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app modulo-inverse (-> e <-) (app totient p q)) (env (())))\""
  5
  3
  2
  0
  3
  2
  5
  1
  1
  3
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  0
  15
  122
  app
  "\"'(eval\n  (match\n   (app is-legal-public-exponent? e p q)\n   ((#f) (-> (app error \"Not a legal public exponent for that modulus.\") <-))\n   _)\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  0
  15
  122
  app
  "\"'(eval (match (-> (app is-legal-public-exponent? e p q) <-) (#f) _) (env (())))\""
  59
  49
  8
  2
  49
  8
  57
  1
  1
  49
  #t
  1
  ((1 1 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app is-legal-public-exponent? e p (-> q <-)) (env (())))\""
  5
  3
  2
  0
  3
  2
  5
  1
  1
  3
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app is-legal-public-exponent? e (-> p <-) q) (env (())))\""
  5
  3
  2
  0
  3
  2
  5
  1
  1
  3
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app is-legal-public-exponent? (-> e <-) p q) (env (())))\""
  5
  3
  2
  0
  3
  2
  5
  1
  1
  3
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  0
  15
  122
  app
  "\"'(eval\n  (位 (e p q)\n    (->\n     (app\n      and\n      (app < 1 e)\n      (app < e (app totient p q))\n      (app = 1 (app gcd e (app totient p q))))\n     <-))\n  (env (())))\""
  55
  46
  8
  1
  46
  8
  54
  1
  1
  46
  #t
  1
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  rsa
  0
  15
  122
  app
  "\"'(eval\n  (app\n   and\n   (app < 1 e)\n   (app < e (app totient p q))\n   (-> (app = 1 (app gcd e (app totient p q))) <-))\n  (env (())))\""
  43
  34
  8
  1
  34
  8
  42
  1
  1
  34
  #t
  1
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  rsa
  0
  15
  122
  app
  "\"'(eval (app = 1 (-> (app gcd e (app totient p q)) <-)) (env (())))\""
  40
  31
  8
  1
  31
  8
  39
  1
  1
  31
  #t
  1
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  rsa
  0
  15
  122
  app
  "\"'(eval (app gcd e (-> (app totient p q) <-)) (env (())))\""
  34
  25
  8
  1
  25
  8
  33
  1
  1
  25
  #t
  1
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app totient p (-> q <-)) (env (())))\""
  8
  4
  4
  0
  4
  4
  8
  1
  1
  4
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app totient (-> p <-) q) (env (())))\""
  8
  4
  4
  0
  4
  4
  8
  1
  1
  4
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app gcd (-> e <-) (app totient p q)) (env (())))\""
  8
  4
  4
  0
  4
  4
  8
  1
  1
  4
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  0
  15
  122
  app
  "\"'(eval\n  (app\n   and\n   (app < 1 e)\n   (-> (app < e (app totient p q)) <-)\n   (app = 1 (app gcd e (app totient p q))))\n  (env (())))\""
  40
  31
  8
  1
  31
  8
  39
  1
  1
  31
  #t
  1
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  rsa
  0
  15
  122
  app
  "\"'(eval (app < e (-> (app totient p q) <-)) (env (())))\""
  34
  25
  8
  1
  25
  8
  33
  1
  1
  25
  #t
  1
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app totient p (-> q <-)) (env (())))\""
  8
  4
  4
  0
  4
  4
  8
  1
  1
  4
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app totient (-> p <-) q) (env (())))\""
  8
  4
  4
  0
  4
  4
  8
  1
  1
  4
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app < (-> e <-) (app totient p q)) (env (())))\""
  8
  4
  4
  0
  4
  4
  8
  1
  1
  4
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  0
  15
  122
  app
  "\"'(eval\n  (app\n   and\n   (-> (app < 1 e) <-)\n   (app < e (app totient p q))\n   (app = 1 (app gcd e (app totient p q))))\n  (env (())))\""
  11
  7
  4
  0
  7
  4
  11
  1
  1
  7
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app < 1 (-> e <-)) (env (())))\""
  8
  4
  4
  0
  4
  4
  8
  1
  1
  4
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  0
  15
  122
  match
  "\"'(eval (位 (base exp n) (-> (match (app = exp 0) ...) <-)) (env (())))\""
  225
  186
  29
  10
  186
  29
  215
  1
  1
  123
  #f
  87/62
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  rsa
  0
  15
  122
  match
  "\"'(eval\n  (match (app = exp 0) ((#f) (-> (match (app odd? exp) ...) <-)) _)\n  (env (())))\""
  225
  186
  29
  10
  186
  29
  215
  1
  1
  123
  #f
  87/62
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  rsa
  0
  15
  122
  app
  "\"'(eval\n  (match\n   (app odd? exp)\n   (#f)\n   (_\n    (->\n     (app modulo (app * base (app modulo-power base (app - exp 1) n)) n)\n     <-)))\n  (env (())))\""
  225
  186
  29
  10
  186
  29
  215
  1
  1
  123
  #f
  87/62
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval\n  (app modulo (app * base (app modulo-power base (app - exp 1) n)) (-> n <-))\n  (env (())))\""
  22
  13
  9
  0
  13
  9
  22
  1
  1
  13
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  0
  15
  122
  app
  "\"'(eval\n  (app modulo (-> (app * base (app modulo-power base (app - exp 1) n)) <-) n)\n  (env (())))\""
  225
  186
  29
  10
  186
  29
  215
  1
  1
  123
  #f
  87/62
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  rsa
  0
  15
  122
  app
  "\"'(eval (app * base (-> (app modulo-power base (app - exp 1) n) <-)) (env (())))\""
  225
  186
  29
  10
  186
  29
  215
  1
  1
  123
  #f
  87/62
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app modulo-power base (app - exp 1) (-> n <-)) (env (())))\""
  21
  12
  9
  0
  12
  9
  21
  1
  1
  12
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  0
  15
  122
  app
  "\"'(eval (app modulo-power base (-> (app - exp 1) <-) n) (env (())))\""
  162
  128
  27
  7
  128
  27
  155
  1
  1
  88
  #f
  11/8
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(clean-cache
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app - (-> exp <-) 1) (env (())))\""
  162
  128
  27
  7
  128
  27
  155
  1
  1
  88
  #f
  11/8
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(clean-cache
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app modulo-power (-> base <-) (app - exp 1) n) (env (())))\""
  225
  186
  29
  10
  186
  29
  215
  1
  1
  123
  #f
  87/62
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app * (-> base <-) (app modulo-power base (app - exp 1) n)) (env (())))\""
  225
  186
  29
  10
  186
  29
  215
  1
  1
  123
  #f
  87/62
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  rsa
  0
  15
  122
  app
  "\"'(eval\n  (match\n   (app odd? exp)\n   ((#f)\n    (->\n     (app modulo (app square (app modulo-power base (app / exp 2) n)) n)\n     <-))\n   _)\n  (env (())))\""
  225
  186
  29
  10
  186
  29
  215
  1
  1
  123
  #f
  87/62
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval\n  (app modulo (app square (app modulo-power base (app / exp 2) n)) (-> n <-))\n  (env (())))\""
  22
  13
  9
  0
  13
  9
  22
  1
  1
  13
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  0
  15
  122
  app
  "\"'(eval\n  (app modulo (-> (app square (app modulo-power base (app / exp 2) n)) <-) n)\n  (env (())))\""
  225
  186
  29
  10
  186
  29
  215
  1
  1
  123
  #f
  87/62
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  rsa
  0
  15
  122
  app
  "\"'(eval (app square (-> (app modulo-power base (app / exp 2) n) <-)) (env (())))\""
  225
  186
  29
  10
  186
  29
  215
  1
  1
  123
  #f
  87/62
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app modulo-power base (app / exp 2) (-> n <-)) (env (())))\""
  21
  12
  9
  0
  12
  9
  21
  1
  1
  12
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  0
  15
  122
  app
  "\"'(eval (app modulo-power base (-> (app / exp 2) <-) n) (env (())))\""
  162
  128
  27
  7
  128
  27
  155
  1
  1
  88
  #f
  11/8
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app / (-> exp <-) 2) (env (())))\""
  162
  128
  27
  7
  128
  27
  155
  1
  1
  88
  #f
  11/8
  ((7/2 7/2 0) (3 3 0) (3 3 0)))
'(clean-cache
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app modulo-power (-> base <-) (app / exp 2) n) (env (())))\""
  225
  186
  29
  10
  186
  29
  215
  1
  1
  123
  #f
  87/62
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  rsa
  0
  15
  122
  app
  "\"'(eval (match (-> (app odd? exp) <-) (#f) _) (env (())))\""
  165
  131
  27
  7
  131
  27
  158
  1
  1
  89
  #f
  183/131
  ((3 3 0) (3 3 0) (7/2 7/2 0)))
'(clean-cache
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app odd? (-> exp <-)) (env (())))\""
  163
  129
  27
  7
  129
  27
  156
  1
  1
  88
  #f
  60/43
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  rsa
  0
  15
  122
  app
  "\"'(eval (match (-> (app = exp 0) <-) (#f) _) (env (())))\""
  166
  132
  27
  7
  132
  27
  159
  1
  1
  90
  #f
  46/33
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(clean-cache
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app = (-> exp <-) 0) (env (())))\""
  163
  129
  27
  7
  129
  27
  156
  1
  1
  88
  #f
  60/43
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(clean-cache
  rsa
  0
  15
  122
  app
  "\"'(eval (位 (x) (-> (app * x x) <-)) (env (())))\""
  225
  186
  29
  10
  186
  29
  215
  1
  1
  123
  #f
  87/62
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app * x (-> x <-)) (env (())))\""
  225
  186
  29
  10
  186
  29
  215
  1
  1
  123
  #f
  87/62
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app * (-> x <-) x) (env (())))\""
  225
  186
  29
  10
  186
  29
  215
  1
  1
  123
  #f
  87/62
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  rsa
  0
  15
  122
  app
  "\"'(eval (位 (p q) (-> (app * (app - p 1) (app - q 1)) <-)) (env (())))\""
  30
  22
  8
  0
  22
  8
  30
  1
  1
  22
  #t
  1
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  rsa
  0
  15
  122
  app
  "\"'(eval (app * (app - p 1) (-> (app - q 1) <-)) (env (())))\""
  18
  10
  8
  0
  10
  8
  18
  1
  1
  10
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app - (-> q <-) 1) (env (())))\""
  15
  7
  8
  0
  7
  8
  15
  1
  1
  7
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  0
  15
  122
  app
  "\"'(eval (app * (-> (app - p 1) <-) (app - q 1)) (env (())))\""
  18
  10
  8
  0
  10
  8
  18
  1
  1
  10
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app - (-> p <-) 1) (env (())))\""
  15
  7
  8
  0
  7
  8
  15
  1
  1
  7
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  0
  15
  122
  app
  "\"'(eval\n  (位 (a n) (-> (app modulo (app car (app extended-gcd a n)) n) <-))\n  (env (())))\""
  107
  85
  18
  4
  85
  18
  103
  1
  1
  54
  #f
  116/85
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app modulo (app car (app extended-gcd a n)) (-> n <-)) (env (())))\""
  37
  26
  10
  1
  26
  10
  36
  1
  1
  26
  #t
  1
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  rsa
  0
  15
  122
  app
  "\"'(eval (app modulo (-> (app car (app extended-gcd a n)) <-) n) (env (())))\""
  104
  82
  18
  4
  82
  18
  100
  1
  1
  52
  #f
  56/41
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  rsa
  0
  15
  122
  app
  "\"'(eval (app car (-> (app extended-gcd a n) <-)) (env (())))\""
  66
  51
  13
  2
  51
  13
  64
  1
  1
  41
  #f
  61/51
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app extended-gcd a (-> n <-)) (env (())))\""
  37
  26
  10
  1
  26
  10
  36
  1
  1
  26
  #t
  1
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app extended-gcd (-> a <-) n) (env (())))\""
  8
  4
  4
  0
  4
  4
  8
  1
  1
  4
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  0
  15
  122
  match
  "\"'(eval (位 (a b) (-> (match (app = (app modulo a b) 0) ...) <-)) (env (())))\""
  62
  48
  13
  1
  48
  13
  61
  1
  1
  39
  #f
  19/16
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  rsa
  0
  15
  122
  app
  "\"'(eval\n  (match (app = (app modulo a b) 0) (#f) (_ (-> (app cons 0 1) <-)))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  0
  15
  122
  let*
  "\"'(eval\n  (match (app = (app modulo a b) 0) ((#f) (-> (let* (x:y ... y) ...) <-)) _)\n  (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  3
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  0
  15
  122
  app
  "\"'(eval (let* (... x (y (-> (app cdr x:y) <-)) () ...) ...) (env (())))\""
  102
  80
  18
  4
  80
  18
  98
  1
  1
  51
  #f
  109/80
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app cdr (-> x:y <-)) (env (())))\""
  67
  52
  13
  2
  52
  13
  65
  1
  1
  41
  #f
  63/52
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  rsa
  0
  15
  122
  app
  "\"'(eval (let* (... x:y (x (-> (app car x:y) <-)) y ...) ...) (env (())))\""
  102
  80
  18
  4
  80
  18
  98
  1
  1
  51
  #f
  109/80
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app car (-> x:y <-)) (env (())))\""
  67
  52
  13
  2
  52
  13
  65
  1
  1
  41
  #f
  63/52
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  rsa
  0
  15
  122
  app
  "\"'(eval\n  (let* (... () (x:y (-> (app extended-gcd b (app modulo a b)) <-)) x ...) ...)\n  (env (())))\""
  66
  51
  13
  2
  51
  13
  64
  1
  1
  41
  #f
  61/51
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  rsa
  0
  15
  122
  app
  "\"'(eval (app extended-gcd b (-> (app modulo a b) <-)) (env (())))\""
  49
  35
  13
  1
  35
  13
  48
  1
  1
  31
  #f
  39/35
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app modulo a (-> b <-)) (env (())))\""
  49
  35
  13
  1
  35
  13
  48
  1
  1
  31
  #f
  39/35
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app modulo (-> a <-) b) (env (())))\""
  49
  35
  13
  1
  35
  13
  48
  1
  1
  31
  #f
  39/35
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app extended-gcd (-> b <-) (app modulo a b)) (env (())))\""
  49
  35
  13
  1
  35
  13
  48
  1
  1
  31
  #f
  39/35
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  rsa
  0
  15
  122
  app
  "\"'(eval\n  (let* (x:y ... y)\n    (-> (app cons y (app - x (app * y (app quotient a b)))) <-))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  0
  15
  122
  app
  "\"'(eval (app cons y (-> (app - x (app * y (app quotient a b))) <-)) (env (())))\""
  102
  80
  18
  4
  80
  18
  98
  1
  1
  51
  #f
  109/80
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  rsa
  0
  15
  122
  app
  "\"'(eval (app - x (-> (app * y (app quotient a b)) <-)) (env (())))\""
  102
  80
  18
  4
  80
  18
  98
  1
  1
  51
  #f
  109/80
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  rsa
  0
  15
  122
  app
  "\"'(eval (app * y (-> (app quotient a b) <-)) (env (())))\""
  53
  39
  13
  1
  39
  13
  52
  1
  1
  32
  #f
  46/39
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app quotient a (-> b <-)) (env (())))\""
  50
  36
  13
  1
  36
  13
  49
  1
  1
  31
  #f
  41/36
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app quotient (-> a <-) b) (env (())))\""
  50
  36
  13
  1
  36
  13
  49
  1
  1
  31
  #f
  41/36
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app * (-> y <-) (app quotient a b)) (env (())))\""
  102
  80
  18
  4
  80
  18
  98
  1
  1
  51
  #f
  109/80
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app - (-> x <-) (app * y (app quotient a b))) (env (())))\""
  102
  80
  18
  4
  80
  18
  98
  1
  1
  51
  #f
  109/80
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app cons (-> y <-) (app - x (app * y (app quotient a b)))) (env (())))\""
  102
  80
  18
  4
  80
  18
  98
  1
  1
  51
  #f
  109/80
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  rsa
  0
  15
  122
  app
  "\"'(eval (match (-> (app = (app modulo a b) 0) <-) (#f) _) (env (())))\""
  56
  42
  13
  1
  42
  13
  55
  1
  1
  34
  #f
  25/21
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  rsa
  0
  15
  122
  app
  "\"'(eval (app = (-> (app modulo a b) <-) 0) (env (())))\""
  53
  39
  13
  1
  39
  13
  52
  1
  1
  32
  #f
  46/39
  ((1/2 1/2 0) (1/2 1/2 0) (1 1 0)))
'(clean-cache
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app modulo a (-> b <-)) (env (())))\""
  50
  36
  13
  1
  36
  13
  49
  1
  1
  31
  #f
  41/36
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app modulo (-> a <-) b) (env (())))\""
  50
  36
  13
  1
  36
  13
  49
  1
  1
  31
  #f
  41/36
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  rsa
  0
  15
  122
  match
  "\"'(eval (位 (cdr-v) (-> (match cdr-v ...) <-)) (env (())))\""
  102
  80
  18
  4
  80
  18
  98
  1
  1
  51
  #f
  109/80
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (match cdr-v ((cons cdr-c cdr-d) (-> cdr-d <-))) (env (())))\""
  102
  80
  18
  4
  80
  18
  98
  1
  1
  51
  #f
  109/80
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (match (-> cdr-v <-) (cons cdr-c cdr-d)) (env (())))\""
  70
  53
  15
  2
  53
  15
  68
  1
  1
  41
  #f
  65/53
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  rsa
  0
  15
  122
  match
  "\"'(eval (位 (car-v) (-> (match car-v ...) <-)) (env (())))\""
  102
  80
  18
  4
  80
  18
  98
  1
  1
  51
  #f
  109/80
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (match car-v ((cons car-c car-d) (-> car-c <-))) (env (())))\""
  102
  80
  18
  4
  80
  18
  98
  1
  1
  51
  #f
  109/80
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (match (-> car-v <-) (cons car-c car-d)) (env (())))\""
  73
  55
  16
  2
  55
  16
  71
  1
  1
  42
  #f
  68/55
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  rsa
  0
  15
  122
  match
  "\"'(eval\n  (letrec*\n   (car ... decrypted-ciphertext)\n   (-> (match (app not (app = plaintext decrypted-ciphertext)) ...) <-))\n  (env ()))\""
  244
  204
  29
  11
  204
  29
  233
  1
  1
  135
  #f
  95/68
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  rsa
  0
  15
  122
  app
  "\"'(eval\n  (match\n   (app not (app = plaintext decrypted-ciphertext))\n   (#f)\n   (_ (-> (app error \"RSA fail!\") <-)))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  0
  15
  122
  app
  "\"'(eval\n  (match\n   (app not (app = plaintext decrypted-ciphertext))\n   ((#f) (-> (app display \"RSA success!\") <-))\n   _)\n  (env ()))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  3
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  0
  15
  122
  app
  "\"'(eval\n  (match (-> (app not (app = plaintext decrypted-ciphertext)) <-) (#f) _)\n  (env ()))\""
  238
  198
  29
  11
  198
  29
  227
  1
  1
  130
  #f
  139/99
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  rsa
  0
  15
  122
  app
  "\"'(eval (app not (-> (app = plaintext decrypted-ciphertext) <-)) (env ()))\""
  235
  195
  29
  11
  195
  29
  224
  1
  1
  128
  #f
  274/195
  ((9/2 9/2 0) (9/2 9/2 0) (5 5 0)))
'(clean-cache
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app = plaintext (-> decrypted-ciphertext <-)) (env ()))\""
  232
  192
  29
  11
  192
  29
  221
  1
  1
  126
  #f
  45/32
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app - (-> x <-) (app * y (app quotient a b))) (env (())))\""
  102
  80
  18
  4
  80
  18
  98
  1
  1
  51
  #f
  109/80
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  app
  "\"'(eval (let* (... x (y (-> (app cdr x:y) <-)) () ...) ...) (env (())))\""
  102
  80
  18
  4
  80
  18
  98
  1
  1
  51
  #f
  109/80
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  app
  "\"'(eval (app = 1 (-> (app gcd e (app totient p q)) <-)) (env (())))\""
  108
  86
  18
  4
  86
  18
  104
  1
  1
  57
  #t
  115/86
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app totient (-> p <-) q) (env (())))\""
  108
  86
  18
  4
  86
  18
  104
  1
  1
  57
  #t
  115/86
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  match
  "\"'(eval (位 (m e n) (-> (match (app > m n) ...) <-)) (env (())))\""
  225
  186
  29
  10
  186
  29
  215
  1
  1
  123
  #f
  87/62
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app decrypt ciphertext d (-> n <-)) (env ()))\""
  225
  186
  29
  10
  186
  29
  215
  1
  1
  123
  #t
  87/62
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  match
  "\"'(eval (位 (car-v) (-> (match car-v ...) <-)) (env (())))\""
  225
  186
  29
  10
  186
  29
  215
  1
  1
  123
  #f
  87/62
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app * (-> base <-) (app modulo-power base (app - exp 1) n)) (env (())))\""
  225
  186
  29
  10
  186
  29
  215
  1
  1
  123
  #f
  87/62
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  app
  "\"'(eval\n  (letrec*\n   (...\n    ciphertext\n    (decrypted-ciphertext (-> (app decrypt ciphertext d n) <-))\n    ()\n    ...)\n   ...)\n  (env ()))\""
  231
  191
  29
  11
  191
  29
  220
  1
  1
  126
  #f
  268/191
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  app
  "\"'(eval (位 (p q) (-> (app * (app - p 1) (app - q 1)) <-)) (env (())))\""
  231
  191
  29
  11
  191
  29
  220
  1
  1
  126
  #t
  268/191
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  letrec*
  "\"'(eval\n  (lettypes cons ... cons (letrec* (car ... decrypted-ciphertext) ...))\n  (env ()))\""
  245
  205
  29
  11
  205
  29
  234
  1
  1
  135
  #f
  7/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app extended-gcd (-> b <-) (app modulo a b)) (env (())))\""
  245
  205
  29
  11
  205
  29
  234
  1
  1
  135
  #f
  7/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app modulo-power base (app - exp 1) (-> n <-)) (env (())))\""
  245
  205
  29
  11
  205
  29
  234
  1
  1
  135
  #t
  7/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app modulo-inverse (-> e <-) (app totient p q)) (env (())))\""
  245
  205
  29
  11
  205
  29
  234
  1
  1
  135
  #t
  7/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app is-legal-public-exponent? e (-> p <-) q) (env (())))\""
  245
  205
  29
  11
  205
  29
  234
  1
  1
  135
  #t
  7/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app decrypt (-> ciphertext <-) d n) (env ()))\""
  245
  205
  29
  11
  205
  29
  234
  1
  1
  135
  #f
  7/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  app
  "\"'(eval\n  (app\n   and\n   (app < 1 e)\n   (app < e (app totient p q))\n   (-> (app = 1 (app gcd e (app totient p q))) <-))\n  (env (())))\""
  245
  205
  29
  11
  205
  29
  234
  1
  1
  135
  #t
  7/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  app
  "\"'(eval (app * (-> (app - p 1) <-) (app - q 1)) (env (())))\""
  245
  205
  29
  11
  205
  29
  234
  1
  1
  135
  #t
  7/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (match (-> cdr-v <-) (cons cdr-c cdr-d)) (env (())))\""
  245
  205
  29
  11
  205
  29
  234
  1
  1
  135
  #f
  7/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app totient p (-> q <-)) (env (())))\""
  245
  205
  29
  11
  205
  29
  234
  1
  1
  135
  #t
  7/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  app
  "\"'(eval (app not (-> (app = plaintext decrypted-ciphertext) <-)) (env ()))\""
  245
  205
  29
  11
  205
  29
  234
  1
  1
  135
  #f
  7/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  match
  "\"'(eval (位 (base exp n) (-> (match (app = exp 0) ...) <-)) (env (())))\""
  245
  205
  29
  11
  205
  29
  234
  1
  1
  135
  #f
  7/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app modulo-power (-> c <-) d n) (env (())))\""
  245
  205
  29
  11
  205
  29
  234
  1
  1
  135
  #f
  7/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  app
  "\"'(eval\n  (app\n   and\n   (-> (app < 1 e) <-)\n   (app < e (app totient p q))\n   (app = 1 (app gcd e (app totient p q))))\n  (env (())))\""
  245
  205
  29
  11
  205
  29
  234
  1
  1
  135
  #t
  7/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app modulo-power c d (-> n <-)) (env (())))\""
  245
  205
  29
  11
  205
  29
  234
  1
  1
  135
  #t
  7/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app cdr (-> x:y <-)) (env (())))\""
  245
  205
  29
  11
  205
  29
  234
  1
  1
  135
  #f
  7/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  app
  "\"'(eval\n  (letrec* (... e (d (-> (app private-exponent e p q) <-)) plaintext ...) ...)\n  (env ()))\""
  245
  205
  29
  11
  205
  29
  234
  1
  1
  135
  #f
  7/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  app
  "\"'(eval\n  (match\n   (app odd? exp)\n   (#f)\n   (_\n    (->\n     (app modulo (app * base (app modulo-power base (app - exp 1) n)) n)\n     <-)))\n  (env (())))\""
  245
  205
  29
  11
  205
  29
  234
  1
  1
  135
  #f
  7/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app < 1 (-> e <-)) (env (())))\""
  245
  205
  29
  11
  205
  29
  234
  1
  1
  135
  #t
  7/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval\n  (app modulo (app * base (app modulo-power base (app - exp 1) n)) (-> n <-))\n  (env (())))\""
  245
  205
  29
  11
  205
  29
  234
  1
  1
  135
  #t
  7/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  app
  "\"'(eval (app extended-gcd b (-> (app modulo a b) <-)) (env (())))\""
  245
  205
  29
  11
  205
  29
  234
  1
  1
  135
  #f
  7/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app totient p (-> q <-)) (env (())))\""
  245
  205
  29
  11
  205
  29
  234
  1
  1
  135
  #t
  7/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  app
  "\"'(eval (app modulo-inverse e (-> (app totient p q) <-)) (env (())))\""
  245
  205
  29
  11
  205
  29
  234
  1
  1
  135
  #t
  7/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app modulo-power (-> m <-) e n) (env (())))\""
  245
  205
  29
  11
  205
  29
  234
  1
  1
  135
  #t
  7/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  app
  "\"'(eval\n  (match\n   (app not (app = plaintext decrypted-ciphertext))\n   ((#f) (-> (app display \"RSA success!\") <-))\n   _)\n  (env ()))\""
  245
  205
  29
  11
  205
  29
  234
  1
  1
  135
  #t
  7/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app car (-> x:y <-)) (env (())))\""
  245
  205
  29
  11
  205
  29
  234
  1
  1
  135
  #f
  7/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app totient (-> p <-) q) (env (())))\""
  245
  205
  29
  11
  205
  29
  234
  1
  1
  135
  #t
  7/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  app
  "\"'(eval (letrec* (... q (n (-> (app * p q) <-)) e ...) ...) (env ()))\""
  245
  205
  29
  11
  205
  29
  234
  1
  1
  135
  #t
  7/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  app
  "\"'(eval\n  (match\n   (app is-legal-public-exponent? e p q)\n   (#f)\n   (_ (-> (app modulo-inverse e (app totient p q)) <-)))\n  (env (())))\""
  245
  205
  29
  11
  205
  29
  234
  1
  1
  135
  #f
  7/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app modulo-power (-> base <-) (app / exp 2) n) (env (())))\""
  245
  205
  29
  11
  205
  29
  234
  1
  1
  135
  #f
  7/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  lettypes
  "\"'(eval ((top) lettypes (cons) ...) (env ()))\""
  246
  206
  29
  11
  206
  29
  235
  1
  1
  135
  #f
  289/206
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app is-legal-public-exponent? e p (-> q <-)) (env (())))\""
  246
  206
  29
  11
  206
  29
  235
  1
  1
  135
  #t
  289/206
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app modulo (-> a <-) b) (env (())))\""
  246
  206
  29
  11
  206
  29
  235
  1
  1
  135
  #f
  289/206
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  app
  "\"'(eval\n  (match\n   (app > m n)\n   (#f)\n   (_ (-> (app error \"The modulus is too small to encrypt the message.\") <-)))\n  (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #t
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  app
  "\"'(eval (app < e (-> (app totient p q) <-)) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #t
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app / (-> exp <-) 2) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #f
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app = plaintext (-> decrypted-ciphertext <-)) (env ()))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #f
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  match
  "\"'(eval\n  (letrec*\n   (car ... decrypted-ciphertext)\n   (-> (match (app not (app = plaintext decrypted-ciphertext)) ...) <-))\n  (env ()))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #f
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  app
  "\"'(eval (app * base (-> (app modulo-power base (app - exp 1) n) <-)) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #f
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  match
  "\"'(eval (位 (cdr-v) (-> (match cdr-v ...) <-)) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #f
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  app
  "\"'(eval (位 (c d n) (-> (app modulo-power c d n) <-)) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #f
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  app
  "\"'(eval\n  (match (-> (app not (app = plaintext decrypted-ciphertext)) <-) (#f) _)\n  (env ()))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #f
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  app
  "\"'(eval (app modulo-power base (-> (app - exp 1) <-) n) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #f
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  app
  "\"'(eval (app = (-> (app modulo a b) <-) 0) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #f
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app encrypt plaintext e (-> n <-)) (env ()))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #t
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app decrypt ciphertext (-> d <-) n) (env ()))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #f
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app modulo (app car (app extended-gcd a n)) (-> n <-)) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #t
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  app
  "\"'(eval\n  (match\n   (app odd? exp)\n   ((#f)\n    (->\n     (app modulo (app square (app modulo-power base (app / exp 2) n)) n)\n     <-))\n   _)\n  (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #f
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  app
  "\"'(eval\n  (app modulo (-> (app * base (app modulo-power base (app - exp 1) n)) <-) n)\n  (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #f
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  app
  "\"'(eval\n  (match (app > m n) ((#f) (-> (app modulo-power m e n) <-)) _)\n  (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #f
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  app
  "\"'(eval (位 (x) (-> (app * x x) <-)) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #f
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app extended-gcd (-> a <-) n) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #t
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  match
  "\"'(eval\n  (位 (e p q) (-> (match (app is-legal-public-exponent? e p q) ...) <-))\n  (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #f
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app - (-> q <-) 1) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #t
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app - (-> exp <-) 1) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #f
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  app
  "\"'(eval (app car (-> (app extended-gcd a n) <-)) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #f
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app - (-> p <-) 1) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #t
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  app
  "\"'(eval (app - x (-> (app * y (app quotient a b)) <-)) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #f
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app odd? (-> exp <-)) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #f
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app < (-> e <-) (app totient p q)) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #t
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app modulo (-> a <-) b) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #f
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app * (-> y <-) (app quotient a b)) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #f
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app is-legal-public-exponent? (-> e <-) p q) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #t
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  app
  "\"'(eval (app square (-> (app modulo-power base (app / exp 2) n) <-)) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #f
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app quotient (-> a <-) b) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #f
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app > m (-> n <-)) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #t
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  app
  "\"'(eval (match (-> (app > m n) <-) (#f) _) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #t
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  app
  "\"'(eval\n  (letrec*\n   (...\n    plaintext\n    (ciphertext (-> (app encrypt plaintext e n) <-))\n    decrypted-ciphertext\n    ...)\n   ...)\n  (env ()))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #f
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  app
  "\"'(eval (match (-> (app is-legal-public-exponent? e p q) <-) (#f) _) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #t
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  match
  "\"'(eval (位 (a b) (-> (match (app = (app modulo a b) 0) ...) <-)) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #f
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app modulo-power (-> base <-) (app - exp 1) n) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #f
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  app
  "\"'(eval (app cons y (-> (app - x (app * y (app quotient a b))) <-)) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #f
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  app
  "\"'(eval\n  (位 (e p q)\n    (->\n     (app\n      and\n      (app < 1 e)\n      (app < e (app totient p q))\n      (app = 1 (app gcd e (app totient p q))))\n     <-))\n  (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #t
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app extended-gcd a (-> n <-)) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #t
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  app
  "\"'(eval\n  (match (app = (app modulo a b) 0) (#f) (_ (-> (app cons 0 1) <-)))\n  (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #t
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app modulo-power c (-> d <-) n) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #f
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  app
  "\"'(eval (let* (... x:y (x (-> (app car x:y) <-)) y ...) ...) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #f
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  app
  "\"'(eval (app * (app - p 1) (-> (app - q 1) <-)) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #t
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app totient (-> p <-) q) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #t
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  app
  "\"'(eval (match (-> (app = exp 0) <-) (#f) _) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #f
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  app
  "\"'(eval\n  (app\n   and\n   (app < 1 e)\n   (-> (app < e (app totient p q)) <-)\n   (app = 1 (app gcd e (app totient p q))))\n  (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #t
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app quotient a (-> b <-)) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #f
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  app
  "\"'(eval\n  (match\n   (app not (app = plaintext decrypted-ciphertext))\n   (#f)\n   (_ (-> (app error \"RSA fail!\") <-)))\n  (env ()))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #t
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  app
  "\"'(eval (match (-> (app odd? exp) <-) (#f) _) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #f
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app * (-> x <-) x) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #f
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app modulo-power m e (-> n <-)) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #t
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app totient p (-> q <-)) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #t
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  app
  "\"'(eval (app modulo (-> (app car (app extended-gcd a n)) <-) n) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #f
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app > (-> m <-) n) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #t
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app modulo-power m (-> e <-) n) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #t
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval\n  (app modulo (app square (app modulo-power base (app / exp 2) n)) (-> n <-))\n  (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #t
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app modulo-power base (app / exp 2) (-> n <-)) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #t
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  app
  "\"'(eval (app modulo-power base (-> (app / exp 2) <-) n) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #f
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app cons (-> y <-) (app - x (app * y (app quotient a b)))) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #f
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app * x (-> x <-)) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #f
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app = (-> exp <-) 0) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #f
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  match
  "\"'(eval\n  (match (app = exp 0) ((#f) (-> (match (app odd? exp) ...) <-)) _)\n  (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #f
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (match cdr-v ((cons cdr-c cdr-d) (-> cdr-d <-))) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #f
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  app
  "\"'(eval\n  (app modulo (-> (app square (app modulo-power base (app / exp 2) n)) <-) n)\n  (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #f
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  app
  "\"'(eval\n  (位 (a n) (-> (app modulo (app car (app extended-gcd a n)) n) <-))\n  (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #f
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app gcd (-> e <-) (app totient p q)) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #t
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  app
  "\"'(eval (app * y (-> (app quotient a b) <-)) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #f
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  app
  "\"'(eval\n  (match\n   (app is-legal-public-exponent? e p q)\n   ((#f) (-> (app error \"Not a legal public exponent for that modulus.\") <-))\n   _)\n  (env (())))\""
  250
  210
  29
  11
  210
  29
  239
  1
  1
  139
  #t
  293/210
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app modulo a (-> b <-)) (env (())))\""
  250
  210
  29
  11
  210
  29
  239
  1
  1
  139
  #f
  293/210
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  app
  "\"'(eval (app gcd e (-> (app totient p q) <-)) (env (())))\""
  250
  210
  29
  11
  210
  29
  239
  1
  1
  139
  #t
  293/210
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (match car-v ((cons car-c car-d) (-> car-c <-))) (env (())))\""
  250
  210
  29
  11
  210
  29
  239
  1
  1
  139
  #f
  293/210
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  let*
  "\"'(eval\n  (match (app = (app modulo a b) 0) ((#f) (-> (let* (x:y ... y) ...) <-)) _)\n  (env (())))\""
  250
  210
  29
  11
  210
  29
  239
  1
  1
  139
  #t
  293/210
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  app
  "\"'(eval\n  (let* (x:y ... y)\n    (-> (app cons y (app - x (app * y (app quotient a b)))) <-))\n  (env (())))\""
  250
  210
  29
  11
  210
  29
  239
  1
  1
  139
  #t
  293/210
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  app
  "\"'(eval (match (-> (app = (app modulo a b) 0) <-) (#f) _) (env (())))\""
  250
  210
  29
  11
  210
  29
  239
  1
  1
  139
  #f
  293/210
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app modulo a (-> b <-)) (env (())))\""
  250
  210
  29
  11
  210
  29
  239
  1
  1
  139
  #f
  293/210
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (match (-> car-v <-) (cons car-c car-d)) (env (())))\""
  250
  210
  29
  11
  210
  29
  239
  1
  1
  139
  #f
  293/210
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  0
  15
  122
  app
  "\"'(eval\n  (let* (... () (x:y (-> (app extended-gcd b (app modulo a b)) <-)) x ...) ...)\n  (env (())))\""
  250
  210
  29
  11
  210
  29
  239
  1
  1
  139
  #f
  293/210
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app - (-> x <-) (app * y (app quotient a b))) (env (())))\""
  102
  80
  18
  4
  80
  18
  98
  1
  1
  51
  #f
  109/80
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  app
  "\"'(eval\n  (match\n   (app > m n)\n   (#f)\n   (_ (-> (app error \"The modulus is too small to encrypt the message.\") <-)))\n  (env (())))\""
  104
  82
  18
  4
  82
  18
  100
  1
  1
  53
  #t
  111/82
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app modulo (app car (app extended-gcd a n)) (-> n <-)) (env (())))\""
  105
  83
  18
  4
  83
  18
  101
  1
  1
  54
  #t
  112/83
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  app
  "\"'(eval (app modulo-power base (-> (app - exp 1) <-) n) (env (())))\""
  164
  130
  27
  7
  130
  27
  157
  1
  1
  90
  #f
  89/65
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  match
  "\"'(eval\n  (letrec*\n   (car ... decrypted-ciphertext)\n   (-> (match (app not (app = plaintext decrypted-ciphertext)) ...) <-))\n  (env ()))\""
  246
  206
  29
  11
  206
  29
  235
  1
  1
  137
  #f
  287/206
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  app
  "\"'(eval (app modulo-inverse e (-> (app totient p q) <-)) (env (())))\""
  246
  206
  29
  11
  206
  29
  235
  1
  1
  137
  #t
  287/206
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app totient p (-> q <-)) (env (())))\""
  246
  206
  29
  11
  206
  29
  235
  1
  1
  137
  #t
  287/206
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app > (-> m <-) n) (env (())))\""
  246
  206
  29
  11
  206
  29
  235
  1
  1
  137
  #t
  287/206
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app totient p (-> q <-)) (env (())))\""
  246
  206
  29
  11
  206
  29
  235
  1
  1
  137
  #t
  287/206
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  app
  "\"'(eval (let* (... x:y (x (-> (app car x:y) <-)) y ...) ...) (env (())))\""
  246
  206
  29
  11
  206
  29
  235
  1
  1
  137
  #f
  287/206
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  match
  "\"'(eval (位 (cdr-v) (-> (match cdr-v ...) <-)) (env (())))\""
  246
  206
  29
  11
  206
  29
  235
  1
  1
  137
  #f
  287/206
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  app
  "\"'(eval (app car (-> (app extended-gcd a n) <-)) (env (())))\""
  246
  206
  29
  11
  206
  29
  235
  1
  1
  137
  #f
  287/206
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app car (-> x:y <-)) (env (())))\""
  246
  206
  29
  11
  206
  29
  235
  1
  1
  137
  #f
  287/206
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  app
  "\"'(eval (let* (... x (y (-> (app cdr x:y) <-)) () ...) ...) (env (())))\""
  246
  206
  29
  11
  206
  29
  235
  1
  1
  137
  #f
  287/206
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  app
  "\"'(eval (app - x (-> (app * y (app quotient a b)) <-)) (env (())))\""
  246
  206
  29
  11
  206
  29
  235
  1
  1
  137
  #f
  287/206
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  app
  "\"'(eval\n  (match\n   (app odd? exp)\n   ((#f)\n    (->\n     (app modulo (app square (app modulo-power base (app / exp 2) n)) n)\n     <-))\n   _)\n  (env (())))\""
  246
  206
  29
  11
  206
  29
  235
  1
  1
  137
  #f
  287/206
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app < 1 (-> e <-)) (env (())))\""
  246
  206
  29
  11
  206
  29
  235
  1
  1
  137
  #t
  287/206
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (match car-v ((cons car-c car-d) (-> car-c <-))) (env (())))\""
  246
  206
  29
  11
  206
  29
  235
  1
  1
  137
  #f
  287/206
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  app
  "\"'(eval\n  (let* (... () (x:y (-> (app extended-gcd b (app modulo a b)) <-)) x ...) ...)\n  (env (())))\""
  246
  206
  29
  11
  206
  29
  235
  1
  1
  137
  #f
  287/206
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  app
  "\"'(eval (位 (x) (-> (app * x x) <-)) (env (())))\""
  246
  206
  29
  11
  206
  29
  235
  1
  1
  137
  #f
  287/206
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app totient (-> p <-) q) (env (())))\""
  246
  206
  29
  11
  206
  29
  235
  1
  1
  137
  #t
  287/206
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  lettypes
  "\"'(eval ((top) lettypes (cons) ...) (env ()))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #f
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app gcd (-> e <-) (app totient p q)) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #t
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app < (-> e <-) (app totient p q)) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #t
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app totient p (-> q <-)) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #t
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app modulo-power (-> base <-) (app / exp 2) n) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #f
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  let*
  "\"'(eval\n  (match (app = (app modulo a b) 0) ((#f) (-> (let* (x:y ... y) ...) <-)) _)\n  (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #t
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  app
  "\"'(eval (letrec* (... q (n (-> (app * p q) <-)) e ...) ...) (env ()))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #t
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  app
  "\"'(eval (match (-> (app = (app modulo a b) 0) <-) (#f) _) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #f
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  letrec*
  "\"'(eval\n  (lettypes cons ... cons (letrec* (car ... decrypted-ciphertext) ...))\n  (env ()))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #f
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app decrypt (-> ciphertext <-) d n) (env ()))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #f
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  match
  "\"'(eval\n  (match (app = exp 0) ((#f) (-> (match (app odd? exp) ...) <-)) _)\n  (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #f
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  match
  "\"'(eval (位 (m e n) (-> (match (app > m n) ...) <-)) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #f
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app modulo-power c (-> d <-) n) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #f
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app = (-> exp <-) 0) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #f
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app * (-> x <-) x) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #f
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  app
  "\"'(eval\n  (letrec*\n   (...\n    ciphertext\n    (decrypted-ciphertext (-> (app decrypt ciphertext d n) <-))\n    ()\n    ...)\n   ...)\n  (env ()))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #f
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  app
  "\"'(eval (app modulo (-> (app car (app extended-gcd a n)) <-) n) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #f
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app - (-> q <-) 1) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #t
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  app
  "\"'(eval (app modulo-power base (-> (app / exp 2) <-) n) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #f
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app quotient a (-> b <-)) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #f
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  app
  "\"'(eval\n  (match\n   (app odd? exp)\n   (#f)\n   (_\n    (->\n     (app modulo (app * base (app modulo-power base (app - exp 1) n)) n)\n     <-)))\n  (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #f
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  app
  "\"'(eval\n  (app modulo (-> (app * base (app modulo-power base (app - exp 1) n)) <-) n)\n  (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #f
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app extended-gcd (-> a <-) n) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #t
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app quotient (-> a <-) b) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #f
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  app
  "\"'(eval\n  (app\n   and\n   (app < 1 e)\n   (-> (app < e (app totient p q)) <-)\n   (app = 1 (app gcd e (app totient p q))))\n  (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #t
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app is-legal-public-exponent? e p (-> q <-)) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #t
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app modulo a (-> b <-)) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #f
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  app
  "\"'(eval (app extended-gcd b (-> (app modulo a b) <-)) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #f
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app - (-> p <-) 1) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #t
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  app
  "\"'(eval (app gcd e (-> (app totient p q) <-)) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #t
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  app
  "\"'(eval (match (-> (app = exp 0) <-) (#f) _) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #f
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  app
  "\"'(eval (app = 1 (-> (app gcd e (app totient p q)) <-)) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #t
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app modulo a (-> b <-)) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #f
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app * (-> y <-) (app quotient a b)) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #f
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  app
  "\"'(eval (app * (-> (app - p 1) <-) (app - q 1)) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #t
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (match cdr-v ((cons cdr-c cdr-d) (-> cdr-d <-))) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #f
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app modulo-power (-> base <-) (app - exp 1) n) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #f
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  app
  "\"'(eval (match (-> (app odd? exp) <-) (#f) _) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #f
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app * (-> base <-) (app modulo-power base (app - exp 1) n)) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #f
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app modulo-power (-> c <-) d n) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #f
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  app
  "\"'(eval\n  (match (app = (app modulo a b) 0) (#f) (_ (-> (app cons 0 1) <-)))\n  (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #t
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app modulo-power base (app - exp 1) (-> n <-)) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #t
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  app
  "\"'(eval\n  (match\n   (app is-legal-public-exponent? e p q)\n   (#f)\n   (_ (-> (app modulo-inverse e (app totient p q)) <-)))\n  (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #f
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app totient (-> p <-) q) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #t
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  app
  "\"'(eval (match (-> (app > m n) <-) (#f) _) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #t
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  app
  "\"'(eval\n  (match (-> (app not (app = plaintext decrypted-ciphertext)) <-) (#f) _)\n  (env ()))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #f
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  match
  "\"'(eval (位 (base exp n) (-> (match (app = exp 0) ...) <-)) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #f
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  app
  "\"'(eval\n  (letrec*\n   (...\n    plaintext\n    (ciphertext (-> (app encrypt plaintext e n) <-))\n    decrypted-ciphertext\n    ...)\n   ...)\n  (env ()))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #f
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  app
  "\"'(eval (app cons y (-> (app - x (app * y (app quotient a b))) <-)) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #f
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app decrypt ciphertext d (-> n <-)) (env ()))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #t
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  app
  "\"'(eval\n  (位 (e p q)\n    (->\n     (app\n      and\n      (app < 1 e)\n      (app < e (app totient p q))\n      (app = 1 (app gcd e (app totient p q))))\n     <-))\n  (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #t
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  app
  "\"'(eval\n  (app\n   and\n   (-> (app < 1 e) <-)\n   (app < e (app totient p q))\n   (app = 1 (app gcd e (app totient p q))))\n  (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #t
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app is-legal-public-exponent? e (-> p <-) q) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #t
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (match (-> car-v <-) (cons car-c car-d)) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #f
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app modulo-power (-> m <-) e n) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #t
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  app
  "\"'(eval\n  (app\n   and\n   (app < 1 e)\n   (app < e (app totient p q))\n   (-> (app = 1 (app gcd e (app totient p q))) <-))\n  (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #t
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  app
  "\"'(eval (app = (-> (app modulo a b) <-) 0) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #f
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  app
  "\"'(eval\n  (let* (x:y ... y)\n    (-> (app cons y (app - x (app * y (app quotient a b)))) <-))\n  (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #t
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  app
  "\"'(eval\n  (letrec* (... e (d (-> (app private-exponent e p q) <-)) plaintext ...) ...)\n  (env ()))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #f
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app modulo-power base (app / exp 2) (-> n <-)) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #t
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app / (-> exp <-) 2) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #f
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (match (-> cdr-v <-) (cons cdr-c cdr-d)) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #f
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  app
  "\"'(eval (app * y (-> (app quotient a b) <-)) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #f
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  app
  "\"'(eval (位 (p q) (-> (app * (app - p 1) (app - q 1)) <-)) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #t
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  app
  "\"'(eval\n  (match (app > m n) ((#f) (-> (app modulo-power m e n) <-)) _)\n  (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #f
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app decrypt ciphertext (-> d <-) n) (env ()))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #f
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  app
  "\"'(eval (位 (c d n) (-> (app modulo-power c d n) <-)) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #f
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  app
  "\"'(eval (app < e (-> (app totient p q) <-)) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #t
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  match
  "\"'(eval (位 (a b) (-> (match (app = (app modulo a b) 0) ...) <-)) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #f
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app modulo-inverse (-> e <-) (app totient p q)) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #t
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app cdr (-> x:y <-)) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #f
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app > m (-> n <-)) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #t
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  match
  "\"'(eval (位 (car-v) (-> (match car-v ...) <-)) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #f
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app odd? (-> exp <-)) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #f
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  app
  "\"'(eval (app square (-> (app modulo-power base (app / exp 2) n) <-)) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #f
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval\n  (app modulo (app * base (app modulo-power base (app - exp 1) n)) (-> n <-))\n  (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #t
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app * x (-> x <-)) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #f
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app modulo (-> a <-) b) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #f
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  match
  "\"'(eval\n  (位 (e p q) (-> (match (app is-legal-public-exponent? e p q) ...) <-))\n  (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #f
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app = plaintext (-> decrypted-ciphertext <-)) (env ()))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #f
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  app
  "\"'(eval\n  (app modulo (-> (app square (app modulo-power base (app / exp 2) n)) <-) n)\n  (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #f
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  app
  "\"'(eval (app * (app - p 1) (-> (app - q 1) <-)) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #t
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval\n  (app modulo (app square (app modulo-power base (app / exp 2) n)) (-> n <-))\n  (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #t
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app totient (-> p <-) q) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #t
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app modulo-power c d (-> n <-)) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #t
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  app
  "\"'(eval\n  (match\n   (app not (app = plaintext decrypted-ciphertext))\n   ((#f) (-> (app display \"RSA success!\") <-))\n   _)\n  (env ()))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #t
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app extended-gcd (-> b <-) (app modulo a b)) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #f
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app modulo-power m e (-> n <-)) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #t
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  app
  "\"'(eval (app not (-> (app = plaintext decrypted-ciphertext) <-)) (env ()))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #f
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app modulo-power m (-> e <-) n) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #t
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  app
  "\"'(eval\n  (位 (a n) (-> (app modulo (app car (app extended-gcd a n)) n) <-))\n  (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #f
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app is-legal-public-exponent? (-> e <-) p q) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #t
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app cons (-> y <-) (app - x (app * y (app quotient a b)))) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #f
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app extended-gcd a (-> n <-)) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #t
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app - (-> exp <-) 1) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #f
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app encrypt plaintext e (-> n <-)) (env ()))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #t
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  app
  "\"'(eval (match (-> (app is-legal-public-exponent? e p q) <-) (#f) _) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #t
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  app
  "\"'(eval (app * base (-> (app modulo-power base (app - exp 1) n) <-)) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #f
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  app
  "\"'(eval\n  (match\n   (app not (app = plaintext decrypted-ciphertext))\n   (#f)\n   (_ (-> (app error \"RSA fail!\") <-)))\n  (env ()))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #t
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  ref-or-constructor
  "\"'(eval (app modulo (-> a <-) b) (env (())))\""
  248
  208
  29
  11
  208
  29
  237
  1
  1
  137
  #f
  291/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  0
  15
  122
  app
  "\"'(eval\n  (match\n   (app is-legal-public-exponent? e p q)\n   ((#f) (-> (app error \"Not a legal public exponent for that modulus.\") <-))\n   _)\n  (env (())))\""
  250
  210
  29
  11
  210
  29
  239
  1
  1
  139
  #t
  293/210
  ((0 0 0) (0 0 0) (0 0 0)))
