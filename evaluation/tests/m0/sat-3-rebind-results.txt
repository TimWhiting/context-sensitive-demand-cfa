'(expression:
  (letrec ((println (λ (s) (let ((_ (app display s))) newline)))
           (phi
            (λ (x1 x2 x3 x4 x5 x6 x7)
              (app
               and
               (app or x1 x2)
               (app or x1 (app not x2) (app not x3))
               (app or x3 x4)
               (app or (app not x4) x1)
               (app or (app not x2) (app not x3))
               (app or x4 x2))))
           (try
            (λ (f)
              (let ((_ (app println "trying")))
                (app or (app f #t) (app f #f)))))
           (sat-solve-7
            (λ (p)
              (app
               try
               (λ (n1)
                 (app
                  try
                  (λ (n2)
                    (app
                     try
                     (λ (n3)
                       (app
                        try
                        (λ (n4)
                          (app
                           try
                           (λ (n5)
                             (app
                              try
                              (λ (n6)
                                (app
                                 try
                                 (λ (n7)
                                   (app
                                    p
                                    n1
                                    n2
                                    n3
                                    n4
                                    n5
                                    n6
                                    n7))))))))))))))))))
    (let ((_ (app display (app sat-solve-7 phi)))) (app newline))))
(list
 'query:
 '(app
   (-> try <-)
   (λ (n4)
     (app
      try
      (λ (n5)
        (app try (λ (n6) (app try (λ (n7) (app p n1 n2 n3 n4 n5 n6 n7)))))))))
 (flatenv '()))
(list
 'clos/con:
 (list
  (list
   '(λ (f) (let ((_ (app println "trying"))) (app or (app f #t) (app f #f))))
   (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (x1 x2 x3 x4 x5 x6 x7)
    (->
     (app
      and
      (app or x1 x2)
      (app or x1 (app not x2) (app not x3))
      (app or x3 x4)
      (app or (app not x4) x1)
      (app or (app not x2) (app not x3))
      (app or x4 x2))
     <-))
 (flatenv '()))
(list 'clos/con: (list (list #f (flatenv '())) (list #t (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   (-> try <-)
   (λ (n2)
     (app
      try
      (λ (n3)
        (app
         try
         (λ (n4)
           (app
            try
            (λ (n5)
              (app
               try
               (λ (n6)
                 (app try (λ (n7) (app p n1 n2 n3 n4 n5 n6 n7)))))))))))))
 (flatenv '()))
(list
 'clos/con:
 (list
  (list
   '(λ (f) (let ((_ (app println "trying"))) (app or (app f #t) (app f #f))))
   (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app println (-> "trying" <-)) (flatenv '()))
'(clos/con: ⊥)
'(literals: (⊥ ⊥ ⊥ "trying"))
(list 'query: '(app (-> or <-) x1 (app not x2) (app not x3)) (flatenv '()))
'(clos/con: (#<procedure:do-or>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app (-> or <-) (app f #t) (app f #f)) (flatenv '()))
'(clos/con: (#<procedure:do-or>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app p n1 n2 n3 n4 n5 n6 (-> n7 <-)) (flatenv '()))
(list 'clos/con: (list (list #f (flatenv '())) (list #t (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(letrec (println
           (->
            phi
            =
            (λ (x1 x2 x3 x4 x5 x6 x7)
              (app
               and
               (app or x1 x2)
               (app or x1 (app not x2) (app not x3))
               (app or x3 x4)
               (app or (app not x4) x1)
               (app or (app not x2) (app not x3))
               (app or x4 x2)))
            <-)
           try
           sat-solve-7)
    bod)
 (flatenv '()))
(list
 'clos/con:
 (list
  (list
   '(λ (x1 x2 x3 x4 x5 x6 x7)
      (app
       and
       (app or x1 x2)
       (app or x1 (app not x2) (app not x3))
       (app or x3 x4)
       (app or (app not x4) x1)
       (app or (app not x2) (app not x3))
       (app or x4 x2)))
   (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   and
   (app or x1 x2)
   (-> (app or x1 (app not x2) (app not x3)) <-)
   (app or x3 x4)
   (app or (app not x4) x1)
   (app or (app not x2) (app not x3))
   (app or x4 x2))
 (flatenv '()))
(list 'clos/con: (list (list #f (flatenv '())) (list #t (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app (-> println <-) "trying") (flatenv '()))
(list
 'clos/con:
 (list (list '(λ (s) (let ((_ (app display s))) newline)) (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(let ((-> _ = (app display s) <-)) bod) (flatenv '()))
(list 'clos/con: (list (list 'display (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(letrec (println phi try sat-solve-7)
    (-> (let ((_ (app display (app sat-solve-7 phi)))) (app newline)) <-))
 (flatenv '()))
(list 'clos/con: (list (list 'newline (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app or (-> x1 <-) (app not x2) (app not x3)) (flatenv '()))
(list 'clos/con: (list (list #f (flatenv '())) (list #t (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app p n1 (-> n2 <-) n3 n4 n5 n6 n7) (flatenv '()))
(list 'clos/con: (list (list #f (flatenv '())) (list #t (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(let ((-> _ = (app display (app sat-solve-7 phi)) <-)) bod)
 (flatenv '()))
(list 'clos/con: (list (list 'display (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app display (-> (app sat-solve-7 phi) <-)) (flatenv '()))
(list 'clos/con: (list (list #f (flatenv '())) (list #t (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(let (_) (-> (app or (app f #t) (app f #f)) <-)) (flatenv '()))
(list 'clos/con: (list (list #f (flatenv '())) (list #t (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app or (-> x1 <-) x2) (flatenv '()))
(list 'clos/con: (list (list #f (flatenv '())) (list #t (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   (-> and <-)
   (app or x1 x2)
   (app or x1 (app not x2) (app not x3))
   (app or x3 x4)
   (app or (app not x4) x1)
   (app or (app not x2) (app not x3))
   (app or x4 x2))
 (flatenv '()))
'(clos/con: (#<procedure:do-and>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app or (app f #t) (-> (app f #f) <-)) (flatenv '()))
(list
 'clos/con:
 (list
  (list #f (flatenv '()))
  (list #t (flatenv '()))
  (list #f (flatenv '()))
  (list #t (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (f)
    (-> (let ((_ (app println "trying"))) (app or (app f #t) (app f #f))) <-))
 (flatenv '()))
(list 'clos/con: (list (list #f (flatenv '())) (list #t (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(let (_) (-> newline <-)) (flatenv '()))
(list 'clos/con: (list (list 'newline (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(letrec ((-> println = (λ (s) (let ((_ (app display s))) newline)) <-)
           phi
           try
           sat-solve-7)
    bod)
 (flatenv '()))
(list
 'clos/con:
 (list (list '(λ (s) (let ((_ (app display s))) newline)) (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (n5)
    (-> (app try (λ (n6) (app try (λ (n7) (app p n1 n2 n3 n4 n5 n6 n7))))) <-))
 (flatenv '()))
(list 'clos/con: (list (list #f (flatenv '())) (list #t (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(letrec (println
           phi
           (->
            try
            =
            (λ (f)
              (let ((_ (app println "trying")))
                (app or (app f #t) (app f #f))))
            <-)
           sat-solve-7)
    bod)
 (flatenv '()))
(list
 'clos/con:
 (list
  (list
   '(λ (f) (let ((_ (app println "trying"))) (app or (app f #t) (app f #f))))
   (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (s) (-> (let ((_ (app display s))) newline) <-))
 (flatenv '()))
(list 'clos/con: (list (list 'newline (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app (-> or <-) x4 x2) (flatenv '()))
'(clos/con: (#<procedure:do-or>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app or (-> x3 <-) x4) (flatenv '()))
(list 'clos/con: (list (list #f (flatenv '())) (list #t (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   (-> try <-)
   (λ (n3)
     (app
      try
      (λ (n4)
        (app
         try
         (λ (n5)
           (app
            try
            (λ (n6) (app try (λ (n7) (app p n1 n2 n3 n4 n5 n6 n7)))))))))))
 (flatenv '()))
(list
 'clos/con:
 (list
  (list
   '(λ (f) (let ((_ (app println "trying"))) (app or (app f #t) (app f #f))))
   (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app not (-> x3 <-)) (flatenv '()))
(list 'clos/con: (list (list #f (flatenv '())) (list #t (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app sat-solve-7 (-> phi <-)) (flatenv '()))
(list
 'clos/con:
 (list
  (list
   '(λ (x1 x2 x3 x4 x5 x6 x7)
      (app
       and
       (app or x1 x2)
       (app or x1 (app not x2) (app not x3))
       (app or x3 x4)
       (app or (app not x4) x1)
       (app or (app not x2) (app not x3))
       (app or x4 x2)))
   (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app (-> f <-) #t) (flatenv '()))
(list
 'clos/con:
 (list
  (list
   '(λ (n3)
      (app
       try
       (λ (n4)
         (app
          try
          (λ (n5)
            (app
             try
             (λ (n6) (app try (λ (n7) (app p n1 n2 n3 n4 n5 n6 n7))))))))))
   (flatenv '()))
  (list
   '(λ (n2)
      (app
       try
       (λ (n3)
         (app
          try
          (λ (n4)
            (app
             try
             (λ (n5)
               (app
                try
                (λ (n6)
                  (app try (λ (n7) (app p n1 n2 n3 n4 n5 n6 n7))))))))))))
   (flatenv '()))
  (list '(λ (n7) (app p n1 n2 n3 n4 n5 n6 n7)) (flatenv '()))
  (list
   '(λ (n6) (app try (λ (n7) (app p n1 n2 n3 n4 n5 n6 n7))))
   (flatenv '()))
  (list
   '(λ (n1)
      (app
       try
       (λ (n2)
         (app
          try
          (λ (n3)
            (app
             try
             (λ (n4)
               (app
                try
                (λ (n5)
                  (app
                   try
                   (λ (n6)
                     (app try (λ (n7) (app p n1 n2 n3 n4 n5 n6 n7))))))))))))))
   (flatenv '()))
  (list
   '(λ (n5) (app try (λ (n6) (app try (λ (n7) (app p n1 n2 n3 n4 n5 n6 n7))))))
   (flatenv '()))
  (list
   '(λ (n4)
      (app
       try
       (λ (n5)
         (app try (λ (n6) (app try (λ (n7) (app p n1 n2 n3 n4 n5 n6 n7))))))))
   (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   try
   (->
    (λ (n4)
      (app
       try
       (λ (n5)
         (app try (λ (n6) (app try (λ (n7) (app p n1 n2 n3 n4 n5 n6 n7))))))))
    <-))
 (flatenv '()))
(list
 'clos/con:
 (list
  (list
   '(λ (n4)
      (app
       try
       (λ (n5)
         (app try (λ (n6) (app try (λ (n7) (app p n1 n2 n3 n4 n5 n6 n7))))))))
   (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(let (_) (-> (app newline) <-)) (flatenv '()))
(list 'clos/con: (list (list 'newline (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app (-> newline <-)) (flatenv '()))
(list 'clos/con: (list (list 'newline (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app (-> f <-) #f) (flatenv '()))
(list
 'clos/con:
 (list
  (list
   '(λ (n3)
      (app
       try
       (λ (n4)
         (app
          try
          (λ (n5)
            (app
             try
             (λ (n6) (app try (λ (n7) (app p n1 n2 n3 n4 n5 n6 n7))))))))))
   (flatenv '()))
  (list
   '(λ (n2)
      (app
       try
       (λ (n3)
         (app
          try
          (λ (n4)
            (app
             try
             (λ (n5)
               (app
                try
                (λ (n6)
                  (app try (λ (n7) (app p n1 n2 n3 n4 n5 n6 n7))))))))))))
   (flatenv '()))
  (list '(λ (n7) (app p n1 n2 n3 n4 n5 n6 n7)) (flatenv '()))
  (list
   '(λ (n6) (app try (λ (n7) (app p n1 n2 n3 n4 n5 n6 n7))))
   (flatenv '()))
  (list
   '(λ (n1)
      (app
       try
       (λ (n2)
         (app
          try
          (λ (n3)
            (app
             try
             (λ (n4)
               (app
                try
                (λ (n5)
                  (app
                   try
                   (λ (n6)
                     (app try (λ (n7) (app p n1 n2 n3 n4 n5 n6 n7))))))))))))))
   (flatenv '()))
  (list
   '(λ (n5) (app try (λ (n6) (app try (λ (n7) (app p n1 n2 n3 n4 n5 n6 n7))))))
   (flatenv '()))
  (list
   '(λ (n4)
      (app
       try
       (λ (n5)
         (app try (λ (n6) (app try (λ (n7) (app p n1 n2 n3 n4 n5 n6 n7))))))))
   (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app or (-> (app f #t) <-) (app f #f)) (flatenv '()))
(list
 'clos/con:
 (list
  (list #f (flatenv '()))
  (list #t (flatenv '()))
  (list #f (flatenv '()))
  (list #t (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (n3)
    (->
     (app
      try
      (λ (n4)
        (app
         try
         (λ (n5)
           (app
            try
            (λ (n6) (app try (λ (n7) (app p n1 n2 n3 n4 n5 n6 n7)))))))))
     <-))
 (flatenv '()))
(list 'clos/con: (list (list #f (flatenv '())) (list #t (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (n2)
    (->
     (app
      try
      (λ (n3)
        (app
         try
         (λ (n4)
           (app
            try
            (λ (n5)
              (app
               try
               (λ (n6) (app try (λ (n7) (app p n1 n2 n3 n4 n5 n6 n7)))))))))))
     <-))
 (flatenv '()))
(list 'clos/con: (list (list #f (flatenv '())) (list #t (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app (-> not <-) x2) (flatenv '()))
'(clos/con: (#<procedure:do-not>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   try
   (->
    (λ (n5) (app try (λ (n6) (app try (λ (n7) (app p n1 n2 n3 n4 n5 n6 n7))))))
    <-))
 (flatenv '()))
(list
 'clos/con:
 (list
  (list
   '(λ (n5) (app try (λ (n6) (app try (λ (n7) (app p n1 n2 n3 n4 n5 n6 n7))))))
   (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app or (app not x4) (-> x1 <-)) (flatenv '()))
(list 'clos/con: (list (list #f (flatenv '())) (list #t (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app p n1 n2 (-> n3 <-) n4 n5 n6 n7) (flatenv '()))
(list 'clos/con: (list (list #f (flatenv '())) (list #t (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app or (app not x2) (-> (app not x3) <-)) (flatenv '()))
(list 'clos/con: (list (list #f (flatenv '())) (list #t (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app (-> not <-) x3) (flatenv '()))
'(clos/con: (#<procedure:do-not>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   and
   (app or x1 x2)
   (app or x1 (app not x2) (app not x3))
   (-> (app or x3 x4) <-)
   (app or (app not x4) x1)
   (app or (app not x2) (app not x3))
   (app or x4 x2))
 (flatenv '()))
(list 'clos/con: (list (list #t (flatenv '())) (list #f (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app not (-> x4 <-)) (flatenv '()))
(list 'clos/con: (list (list #f (flatenv '())) (list #t (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app (-> not <-) x3) (flatenv '()))
'(clos/con: (#<procedure:do-not>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   and
   (app or x1 x2)
   (app or x1 (app not x2) (app not x3))
   (app or x3 x4)
   (-> (app or (app not x4) x1) <-)
   (app or (app not x2) (app not x3))
   (app or x4 x2))
 (flatenv '()))
(list 'clos/con: (list (list #f (flatenv '())) (list #t (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   try
   (->
    (λ (n3)
      (app
       try
       (λ (n4)
         (app
          try
          (λ (n5)
            (app
             try
             (λ (n6) (app try (λ (n7) (app p n1 n2 n3 n4 n5 n6 n7))))))))))
    <-))
 (flatenv '()))
(list
 'clos/con:
 (list
  (list
   '(λ (n3)
      (app
       try
       (λ (n4)
         (app
          try
          (λ (n5)
            (app
             try
             (λ (n6) (app try (λ (n7) (app p n1 n2 n3 n4 n5 n6 n7))))))))))
   (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app or (-> x4 <-) x2) (flatenv '()))
(list 'clos/con: (list (list #f (flatenv '())) (list #t (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app or (-> (app not x4) <-) x1) (flatenv '()))
(list 'clos/con: (list (list #f (flatenv '())) (list #t (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (n4)
    (->
     (app
      try
      (λ (n5)
        (app try (λ (n6) (app try (λ (n7) (app p n1 n2 n3 n4 n5 n6 n7)))))))
     <-))
 (flatenv '()))
(list 'clos/con: (list (list #f (flatenv '())) (list #t (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app display (-> s <-)) (flatenv '()))
'(clos/con: ⊥)
'(literals: (⊥ ⊥ ⊥ "trying"))
(list
 'query:
 '(app
   try
   (->
    (λ (n2)
      (app
       try
       (λ (n3)
         (app
          try
          (λ (n4)
            (app
             try
             (λ (n5)
               (app
                try
                (λ (n6)
                  (app try (λ (n7) (app p n1 n2 n3 n4 n5 n6 n7))))))))))))
    <-))
 (flatenv '()))
(list
 'clos/con:
 (list
  (list
   '(λ (n2)
      (app
       try
       (λ (n3)
         (app
          try
          (λ (n4)
            (app
             try
             (λ (n5)
               (app
                try
                (λ (n6)
                  (app try (λ (n7) (app p n1 n2 n3 n4 n5 n6 n7))))))))))))
   (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app (-> or <-) (app not x4) x1) (flatenv '()))
'(clos/con: (#<procedure:do-or>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   and
   (app or x1 x2)
   (app or x1 (app not x2) (app not x3))
   (app or x3 x4)
   (app or (app not x4) x1)
   (app or (app not x2) (app not x3))
   (-> (app or x4 x2) <-))
 (flatenv '()))
(list 'clos/con: (list (list #t (flatenv '())) (list #f (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   (-> try <-)
   (λ (n1)
     (app
      try
      (λ (n2)
        (app
         try
         (λ (n3)
           (app
            try
            (λ (n4)
              (app
               try
               (λ (n5)
                 (app
                  try
                  (λ (n6)
                    (app try (λ (n7) (app p n1 n2 n3 n4 n5 n6 n7)))))))))))))))
 (flatenv '()))
(list
 'clos/con:
 (list
  (list
   '(λ (f) (let ((_ (app println "trying"))) (app or (app f #t) (app f #f))))
   (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   try
   (->
    (λ (n1)
      (app
       try
       (λ (n2)
         (app
          try
          (λ (n3)
            (app
             try
             (λ (n4)
               (app
                try
                (λ (n5)
                  (app
                   try
                   (λ (n6)
                     (app try (λ (n7) (app p n1 n2 n3 n4 n5 n6 n7))))))))))))))
    <-))
 (flatenv '()))
(list
 'clos/con:
 (list
  (list
   '(λ (n1)
      (app
       try
       (λ (n2)
         (app
          try
          (λ (n3)
            (app
             try
             (λ (n4)
               (app
                try
                (λ (n5)
                  (app
                   try
                   (λ (n6)
                     (app try (λ (n7) (app p n1 n2 n3 n4 n5 n6 n7))))))))))))))
   (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> try <-) (λ (n6) (app try (λ (n7) (app p n1 n2 n3 n4 n5 n6 n7)))))
 (flatenv '()))
(list
 'clos/con:
 (list
  (list
   '(λ (f) (let ((_ (app println "trying"))) (app or (app f #t) (app f #f))))
   (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app (-> or <-) x3 x4) (flatenv '()))
'(clos/con: (#<procedure:do-or>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app or x1 (-> (app not x2) <-) (app not x3)) (flatenv '()))
(list 'clos/con: (list (list #f (flatenv '())) (list #t (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app or x1 (-> x2 <-)) (flatenv '()))
(list 'clos/con: (list (list #f (flatenv '())) (list #t (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app or x1 (app not x2) (-> (app not x3) <-)) (flatenv '()))
(list 'clos/con: (list (list #f (flatenv '())) (list #t (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app not (-> x3 <-)) (flatenv '()))
(list 'clos/con: (list (list #f (flatenv '())) (list #t (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(letrec (println
           phi
           try
           (->
            sat-solve-7
            =
            (λ (p)
              (app
               try
               (λ (n1)
                 (app
                  try
                  (λ (n2)
                    (app
                     try
                     (λ (n3)
                       (app
                        try
                        (λ (n4)
                          (app
                           try
                           (λ (n5)
                             (app
                              try
                              (λ (n6)
                                (app
                                 try
                                 (λ (n7)
                                   (app p n1 n2 n3 n4 n5 n6 n7))))))))))))))))
            <-))
    bod)
 (flatenv '()))
(list
 'clos/con:
 (list
  (list
   '(λ (p)
      (app
       try
       (λ (n1)
         (app
          try
          (λ (n2)
            (app
             try
             (λ (n3)
               (app
                try
                (λ (n4)
                  (app
                   try
                   (λ (n5)
                     (app
                      try
                      (λ (n6)
                        (app
                         try
                         (λ (n7) (app p n1 n2 n3 n4 n5 n6 n7))))))))))))))))
   (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app p n1 n2 n3 (-> n4 <-) n5 n6 n7) (flatenv '()))
(list 'clos/con: (list (list #f (flatenv '())) (list #t (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app (-> p <-) n1 n2 n3 n4 n5 n6 n7) (flatenv '()))
(list
 'clos/con:
 (list
  (list
   '(λ (x1 x2 x3 x4 x5 x6 x7)
      (app
       and
       (app or x1 x2)
       (app or x1 (app not x2) (app not x3))
       (app or x3 x4)
       (app or (app not x4) x1)
       (app or (app not x2) (app not x3))
       (app or x4 x2)))
   (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app not (-> x2 <-)) (flatenv '()))
(list 'clos/con: (list (list #f (flatenv '())) (list #t (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   and
   (-> (app or x1 x2) <-)
   (app or x1 (app not x2) (app not x3))
   (app or x3 x4)
   (app or (app not x4) x1)
   (app or (app not x2) (app not x3))
   (app or x4 x2))
 (flatenv '()))
(list 'clos/con: (list (list #t (flatenv '())) (list #f (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app try (-> (λ (n6) (app try (λ (n7) (app p n1 n2 n3 n4 n5 n6 n7)))) <-))
 (flatenv '()))
(list
 'clos/con:
 (list
  (list
   '(λ (n6) (app try (λ (n7) (app p n1 n2 n3 n4 n5 n6 n7))))
   (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app (-> display <-) (app sat-solve-7 phi)) (flatenv '()))
(list 'clos/con: (list (list 'display (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app p n1 n2 n3 n4 n5 (-> n6 <-) n7) (flatenv '()))
(list 'clos/con: (list (list #f (flatenv '())) (list #t (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app f (-> #t <-)) (flatenv '()))
(list 'clos/con: (list (list #t (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (n1)
    (->
     (app
      try
      (λ (n2)
        (app
         try
         (λ (n3)
           (app
            try
            (λ (n4)
              (app
               try
               (λ (n5)
                 (app
                  try
                  (λ (n6)
                    (app try (λ (n7) (app p n1 n2 n3 n4 n5 n6 n7)))))))))))))
     <-))
 (flatenv '()))
(list 'clos/con: (list (list #f (flatenv '())) (list #t (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app p n1 n2 n3 n4 (-> n5 <-) n6 n7) (flatenv '()))
(list 'clos/con: (list (list #f (flatenv '())) (list #t (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> try <-) (λ (n7) (app p n1 n2 n3 n4 n5 n6 n7)))
 (flatenv '()))
(list
 'clos/con:
 (list
  (list
   '(λ (f) (let ((_ (app println "trying"))) (app or (app f #t) (app f #f))))
   (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app or (-> (app not x2) <-) (app not x3)) (flatenv '()))
(list 'clos/con: (list (list #f (flatenv '())) (list #t (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app or x3 (-> x4 <-)) (flatenv '()))
(list 'clos/con: (list (list #f (flatenv '())) (list #t (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app (-> display <-) s) (flatenv '()))
(list 'clos/con: (list (list 'display (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app p (-> n1 <-) n2 n3 n4 n5 n6 n7) (flatenv '()))
(list 'clos/con: (list (list #f (flatenv '())) (list #t (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app (-> or <-) (app not x2) (app not x3)) (flatenv '()))
'(clos/con: (#<procedure:do-or>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app try (-> (λ (n7) (app p n1 n2 n3 n4 n5 n6 n7)) <-))
 (flatenv '()))
(list
 'clos/con:
 (list (list '(λ (n7) (app p n1 n2 n3 n4 n5 n6 n7)) (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app or x4 (-> x2 <-)) (flatenv '()))
(list 'clos/con: (list (list #f (flatenv '())) (list #t (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app f (-> #f <-)) (flatenv '()))
(list 'clos/con: (list (list #f (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(top) (flatenv '()))
(list 'clos/con: (list (list 'newline (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (n6) (-> (app try (λ (n7) (app p n1 n2 n3 n4 n5 n6 n7))) <-))
 (flatenv '()))
(list 'clos/con: (list (list #f (flatenv '())) (list #t (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   and
   (app or x1 x2)
   (app or x1 (app not x2) (app not x3))
   (app or x3 x4)
   (app or (app not x4) x1)
   (-> (app or (app not x2) (app not x3)) <-)
   (app or x4 x2))
 (flatenv '()))
(list 'clos/con: (list (list #f (flatenv '())) (list #t (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app (-> not <-) x2) (flatenv '()))
'(clos/con: (#<procedure:do-not>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   (-> try <-)
   (λ (n5) (app try (λ (n6) (app try (λ (n7) (app p n1 n2 n3 n4 n5 n6 n7)))))))
 (flatenv '()))
(list
 'clos/con:
 (list
  (list
   '(λ (f) (let ((_ (app println "trying"))) (app or (app f #t) (app f #f))))
   (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app not (-> x2 <-)) (flatenv '()))
(list 'clos/con: (list (list #f (flatenv '())) (list #t (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app (-> sat-solve-7 <-) phi) (flatenv '()))
(list
 'clos/con:
 (list
  (list
   '(λ (p)
      (app
       try
       (λ (n1)
         (app
          try
          (λ (n2)
            (app
             try
             (λ (n3)
               (app
                try
                (λ (n4)
                  (app
                   try
                   (λ (n5)
                     (app
                      try
                      (λ (n6)
                        (app
                         try
                         (λ (n7) (app p n1 n2 n3 n4 n5 n6 n7))))))))))))))))
   (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (p)
    (->
     (app
      try
      (λ (n1)
        (app
         try
         (λ (n2)
           (app
            try
            (λ (n3)
              (app
               try
               (λ (n4)
                 (app
                  try
                  (λ (n5)
                    (app
                     try
                     (λ (n6)
                       (app
                        try
                        (λ (n7) (app p n1 n2 n3 n4 n5 n6 n7)))))))))))))))
     <-))
 (flatenv '()))
(list 'clos/con: (list (list #f (flatenv '())) (list #t (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(λ (n7) (-> (app p n1 n2 n3 n4 n5 n6 n7) <-)) (flatenv '()))
(list 'clos/con: (list (list #f (flatenv '())) (list #t (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(let ((-> _ = (app println "trying") <-)) bod) (flatenv '()))
(list 'clos/con: (list (list 'newline (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app (-> not <-) x4) (flatenv '()))
'(clos/con: (#<procedure:do-not>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app (-> or <-) x1 x2) (flatenv '()))
'(clos/con: (#<procedure:do-or>))
'(literals: (⊥ ⊥ ⊥ ⊥))
