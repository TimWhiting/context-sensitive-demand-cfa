'(clean-cache
  ack
  0
  25
  20
  letrec*
  "\"'(eval ((top) letrec* (ack) ...) (env ()))\""
  46
  40
  5
  1
  40
  5
  45
  1
  1
  20
  #f
  3/2
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  ack
  0
  25
  20
  match
  "\"'(eval (λ (m n) (-> (match (app = m 0) ...) <-)) (env (())))\""
  43
  37
  5
  1
  37
  5
  42
  1
  1
  19
  #f
  55/37
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  ack
  0
  25
  20
  app
  "\"'(eval (match (app = m 0) (#f) (_ (-> (app + n 1) <-))) (env (())))\""
  43
  37
  5
  1
  37
  5
  42
  1
  1
  19
  #f
  55/37
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  ack
  0
  25
  20
  ref-or-constructor
  "\"'(eval (app + (-> n <-) 1) (env (())))\""
  43
  37
  5
  1
  37
  5
  42
  1
  1
  19
  #f
  55/37
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  ack
  0
  25
  20
  match
  "\"'(eval (match (app = m 0) ((#f) (-> (match (app = n 0) ...) <-)) _) (env (())))\""
  43
  37
  5
  1
  37
  5
  42
  1
  1
  19
  #f
  55/37
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  ack
  0
  25
  20
  app
  "\"'(eval (match (app = n 0) (#f) (_ (-> (app ack (app - m 1) 1) <-))) (env (())))\""
  43
  37
  5
  1
  37
  5
  42
  1
  1
  19
  #f
  55/37
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  ack
  0
  25
  20
  app
  "\"'(eval (app ack (-> (app - m 1) <-) 1) (env (())))\""
  15
  10
  5
  0
  10
  5
  15
  1
  1
  5
  #f
  3/2
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  ack
  0
  25
  20
  ref-or-constructor
  "\"'(eval (app - (-> m <-) 1) (env (())))\""
  15
  10
  5
  0
  10
  5
  15
  1
  1
  5
  #f
  3/2
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  ack
  0
  25
  20
  app
  "\"'(eval\n  (match\n   (app = n 0)\n   ((#f) (-> (app ack (app - m 1) (app ack m (app - n 1))) <-))\n   _)\n  (env (())))\""
  43
  37
  5
  1
  37
  5
  42
  1
  1
  19
  #f
  55/37
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  ack
  0
  25
  20
  app
  "\"'(eval (app ack (app - m 1) (-> (app ack m (app - n 1)) <-)) (env (())))\""
  43
  37
  5
  1
  37
  5
  42
  1
  1
  19
  #f
  55/37
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  ack
  0
  25
  20
  app
  "\"'(eval (app ack m (-> (app - n 1) <-)) (env (())))\""
  43
  37
  5
  1
  37
  5
  42
  1
  1
  19
  #f
  55/37
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  ack
  0
  25
  20
  ref-or-constructor
  "\"'(eval (app - (-> n <-) 1) (env (())))\""
  43
  37
  5
  1
  37
  5
  42
  1
  1
  19
  #f
  55/37
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  ack
  0
  25
  20
  ref-or-constructor
  "\"'(eval (app ack (-> m <-) (app - n 1)) (env (())))\""
  15
  10
  5
  0
  10
  5
  15
  1
  1
  5
  #f
  3/2
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  ack
  0
  25
  20
  app
  "\"'(eval (app ack (-> (app - m 1) <-) (app ack m (app - n 1))) (env (())))\""
  15
  10
  5
  0
  10
  5
  15
  1
  1
  5
  #f
  3/2
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  ack
  0
  25
  20
  ref-or-constructor
  "\"'(eval (app - (-> m <-) 1) (env (())))\""
  15
  10
  5
  0
  10
  5
  15
  1
  1
  5
  #f
  3/2
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  ack
  0
  25
  20
  app
  "\"'(eval (match (-> (app = n 0) <-) (#f) _) (env (())))\""
  43
  37
  5
  1
  37
  5
  42
  1
  1
  19
  #f
  55/37
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  ack
  0
  25
  20
  ref-or-constructor
  "\"'(eval (app = (-> n <-) 0) (env (())))\""
  43
  37
  5
  1
  37
  5
  42
  1
  1
  19
  #f
  55/37
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  ack
  0
  25
  20
  app
  "\"'(eval (match (-> (app = m 0) <-) (#f) _) (env (())))\""
  19
  14
  5
  0
  14
  5
  19
  1
  1
  7
  #f
  3/2
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  ack
  0
  25
  20
  ref-or-constructor
  "\"'(eval (app = (-> m <-) 0) (env (())))\""
  16
  11
  5
  0
  11
  5
  16
  1
  1
  5
  #f
  17/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  ack
  0
  25
  20
  app
  "\"'(eval (letrec* (ack) (-> (app ack 3 12) <-)) (env ()))\""
  45
  39
  5
  1
  39
  5
  44
  1
  1
  20
  #f
  58/39
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  0
  25
  20
  ref-or-constructor
  "\"'(eval (app = (-> n <-) 0) (env (())))\""
  43
  37
  5
  1
  37
  5
  42
  1
  1
  19
  #f
  55/37
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  0
  25
  20
  ref-or-constructor
  "\"'(eval (app ack (-> m <-) (app - n 1)) (env (())))\""
  43
  37
  5
  1
  37
  5
  42
  1
  1
  19
  #f
  55/37
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  0
  25
  20
  app
  "\"'(eval (letrec* (ack) (-> (app ack 3 12) <-)) (env ()))\""
  45
  39
  5
  1
  39
  5
  44
  1
  1
  20
  #f
  58/39
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  0
  25
  20
  app
  "\"'(eval (app ack (app - m 1) (-> (app ack m (app - n 1)) <-)) (env (())))\""
  45
  39
  5
  1
  39
  5
  44
  1
  1
  20
  #f
  58/39
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  0
  25
  20
  ref-or-constructor
  "\"'(eval (app - (-> m <-) 1) (env (())))\""
  45
  39
  5
  1
  39
  5
  44
  1
  1
  20
  #f
  58/39
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  0
  25
  20
  match
  "\"'(eval (λ (m n) (-> (match (app = m 0) ...) <-)) (env (())))\""
  45
  39
  5
  1
  39
  5
  44
  1
  1
  20
  #f
  58/39
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  0
  25
  20
  ref-or-constructor
  "\"'(eval (app + (-> n <-) 1) (env (())))\""
  45
  39
  5
  1
  39
  5
  44
  1
  1
  20
  #f
  58/39
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  0
  25
  20
  app
  "\"'(eval (match (app = n 0) (#f) (_ (-> (app ack (app - m 1) 1) <-))) (env (())))\""
  45
  39
  5
  1
  39
  5
  44
  1
  1
  20
  #f
  58/39
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  0
  25
  20
  app
  "\"'(eval (match (-> (app = m 0) <-) (#f) _) (env (())))\""
  45
  39
  5
  1
  39
  5
  44
  1
  1
  20
  #f
  58/39
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  0
  25
  20
  app
  "\"'(eval (match (-> (app = n 0) <-) (#f) _) (env (())))\""
  45
  39
  5
  1
  39
  5
  44
  1
  1
  20
  #f
  58/39
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  0
  25
  20
  ref-or-constructor
  "\"'(eval (app = (-> m <-) 0) (env (())))\""
  45
  39
  5
  1
  39
  5
  44
  1
  1
  20
  #f
  58/39
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  0
  25
  20
  match
  "\"'(eval (match (app = m 0) ((#f) (-> (match (app = n 0) ...) <-)) _) (env (())))\""
  45
  39
  5
  1
  39
  5
  44
  1
  1
  20
  #f
  58/39
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  0
  25
  20
  app
  "\"'(eval (app ack (-> (app - m 1) <-) 1) (env (())))\""
  45
  39
  5
  1
  39
  5
  44
  1
  1
  20
  #f
  58/39
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  0
  25
  20
  letrec*
  "\"'(eval ((top) letrec* (ack) ...) (env ()))\""
  46
  40
  5
  1
  40
  5
  45
  1
  1
  20
  #f
  3/2
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  0
  25
  20
  app
  "\"'(eval (app ack m (-> (app - n 1) <-)) (env (())))\""
  46
  40
  5
  1
  40
  5
  45
  1
  1
  20
  #f
  3/2
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  0
  25
  20
  ref-or-constructor
  "\"'(eval (app - (-> n <-) 1) (env (())))\""
  46
  40
  5
  1
  40
  5
  45
  1
  1
  20
  #f
  3/2
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  0
  25
  20
  ref-or-constructor
  "\"'(eval (app - (-> m <-) 1) (env (())))\""
  46
  40
  5
  1
  40
  5
  45
  1
  1
  20
  #f
  3/2
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  0
  25
  20
  app
  "\"'(eval (app ack (-> (app - m 1) <-) (app ack m (app - n 1))) (env (())))\""
  46
  40
  5
  1
  40
  5
  45
  1
  1
  20
  #f
  3/2
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  0
  25
  20
  app
  "\"'(eval\n  (match\n   (app = n 0)\n   ((#f) (-> (app ack (app - m 1) (app ack m (app - n 1))) <-))\n   _)\n  (env (())))\""
  46
  40
  5
  1
  40
  5
  45
  1
  1
  20
  #f
  3/2
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  0
  25
  20
  app
  "\"'(eval (match (app = m 0) (#f) (_ (-> (app + n 1) <-))) (env (())))\""
  46
  40
  5
  1
  40
  5
  45
  1
  1
  20
  #f
  3/2
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  0
  25
  20
  ref-or-constructor
  "\"'(eval (app - (-> m <-) 1) (env (())))\""
  15
  10
  5
  0
  10
  5
  15
  1
  1
  5
  #f
  3/2
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  0
  25
  20
  ref-or-constructor
  "\"'(eval (app + (-> n <-) 1) (env (())))\""
  43
  37
  5
  1
  37
  5
  42
  1
  1
  19
  #f
  55/37
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  0
  25
  20
  app
  "\"'(eval (app ack (-> (app - m 1) <-) (app ack m (app - n 1))) (env (())))\""
  43
  37
  5
  1
  37
  5
  42
  1
  1
  19
  #f
  55/37
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  0
  25
  20
  ref-or-constructor
  "\"'(eval (app ack (-> m <-) (app - n 1)) (env (())))\""
  43
  37
  5
  1
  37
  5
  42
  1
  1
  19
  #f
  55/37
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  0
  25
  20
  app
  "\"'(eval (match (app = n 0) (#f) (_ (-> (app ack (app - m 1) 1) <-))) (env (())))\""
  43
  37
  5
  1
  37
  5
  42
  1
  1
  19
  #f
  55/37
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  0
  25
  20
  app
  "\"'(eval (match (app = m 0) (#f) (_ (-> (app + n 1) <-))) (env (())))\""
  43
  37
  5
  1
  37
  5
  42
  1
  1
  19
  #f
  55/37
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  0
  25
  20
  ref-or-constructor
  "\"'(eval (app = (-> n <-) 0) (env (())))\""
  43
  37
  5
  1
  37
  5
  42
  1
  1
  19
  #f
  55/37
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  0
  25
  20
  match
  "\"'(eval (match (app = m 0) ((#f) (-> (match (app = n 0) ...) <-)) _) (env (())))\""
  43
  37
  5
  1
  37
  5
  42
  1
  1
  19
  #f
  55/37
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  0
  25
  20
  ref-or-constructor
  "\"'(eval (app - (-> n <-) 1) (env (())))\""
  43
  37
  5
  1
  37
  5
  42
  1
  1
  19
  #f
  55/37
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  0
  25
  20
  app
  "\"'(eval (app ack m (-> (app - n 1) <-)) (env (())))\""
  43
  37
  5
  1
  37
  5
  42
  1
  1
  19
  #f
  55/37
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  0
  25
  20
  app
  "\"'(eval (match (-> (app = n 0) <-) (#f) _) (env (())))\""
  43
  37
  5
  1
  37
  5
  42
  1
  1
  19
  #f
  55/37
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  0
  25
  20
  letrec*
  "\"'(eval ((top) letrec* (ack) ...) (env ()))\""
  46
  40
  5
  1
  40
  5
  45
  1
  1
  20
  #f
  3/2
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  0
  25
  20
  ref-or-constructor
  "\"'(eval (app = (-> m <-) 0) (env (())))\""
  46
  40
  5
  1
  40
  5
  45
  1
  1
  20
  #f
  3/2
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  0
  25
  20
  match
  "\"'(eval (λ (m n) (-> (match (app = m 0) ...) <-)) (env (())))\""
  46
  40
  5
  1
  40
  5
  45
  1
  1
  20
  #f
  3/2
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  0
  25
  20
  ref-or-constructor
  "\"'(eval (app - (-> m <-) 1) (env (())))\""
  46
  40
  5
  1
  40
  5
  45
  1
  1
  20
  #f
  3/2
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  0
  25
  20
  app
  "\"'(eval (app ack (-> (app - m 1) <-) 1) (env (())))\""
  46
  40
  5
  1
  40
  5
  45
  1
  1
  20
  #f
  3/2
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  0
  25
  20
  app
  "\"'(eval\n  (match\n   (app = n 0)\n   ((#f) (-> (app ack (app - m 1) (app ack m (app - n 1))) <-))\n   _)\n  (env (())))\""
  46
  40
  5
  1
  40
  5
  45
  1
  1
  20
  #f
  3/2
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  0
  25
  20
  app
  "\"'(eval (match (-> (app = m 0) <-) (#f) _) (env (())))\""
  46
  40
  5
  1
  40
  5
  45
  1
  1
  20
  #f
  3/2
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  0
  25
  20
  app
  "\"'(eval (app ack (app - m 1) (-> (app ack m (app - n 1)) <-)) (env (())))\""
  46
  40
  5
  1
  40
  5
  45
  1
  1
  20
  #f
  3/2
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  0
  25
  20
  app
  "\"'(eval (letrec* (ack) (-> (app ack 3 12) <-)) (env ()))\""
  46
  40
  5
  1
  40
  5
  45
  1
  1
  20
  #f
  3/2
  ((0 0 0) (0 0 0) (0 0 0)))
