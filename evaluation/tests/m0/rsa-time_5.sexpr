'(clean-cache
  rsa
  0
  5
  211
  lettypes
  "'(eval ((top) lettypes (cons) ...) (env ()))"
  #f
  #f)
'(clean-cache
  rsa
  0
  5
  211
  letrec*
  "'(eval\n  (lettypes cons ... cons (letrec* (car ... decrypted-ciphertext) ...))\n  (env ()))"
  #f
  #f)
'(clean-cache
  rsa
  0
  5
  211
  app
  "'(eval\n  (letrec*\n   (...\n    ciphertext\n    (decrypted-ciphertext (-> (app decrypt ciphertext d n) <-))\n    ()\n    ...)\n   ...)\n  (env ()))"
  #f
  #f)
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (app decrypt ciphertext d (-> n <-)) (env ()))"
  #f
  7
  7
  0
  0
  7
  0
  7
  1
  1
  7
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (app decrypt ciphertext (-> d <-) n) (env ()))"
  #f
  #f)
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (app decrypt (-> ciphertext <-) d n) (env ()))"
  #f
  #f)
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (app (-> decrypt <-) ciphertext d n) (env ()))"
  #t
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  app
  "'(eval\n  (letrec*\n   (...\n    plaintext\n    (ciphertext (-> (app encrypt plaintext e n) <-))\n    decrypted-ciphertext\n    ...)\n   ...)\n  (env ()))"
  #f
  #f)
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (app encrypt plaintext e (-> n <-)) (env ()))"
  #f
  7
  7
  0
  0
  7
  0
  7
  1
  1
  7
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (app encrypt plaintext (-> e <-) n) (env ()))"
  #t
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (app encrypt (-> plaintext <-) e n) (env ()))"
  #t
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (app (-> encrypt <-) plaintext e n) (env ()))"
  #t
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  number
  "'(eval (letrec* (... d (plaintext (-> 42 <-)) ciphertext ...) ...) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  app
  "'(eval\n  (letrec* (... e (d (-> (app private-exponent e p q) <-)) plaintext ...) ...)\n  (env ()))"
  #f
  #f)
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (app private-exponent e p (-> q <-)) (env ()))"
  #t
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (app private-exponent e (-> p <-) q) (env ()))"
  #t
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (app private-exponent (-> e <-) p q) (env ()))"
  #t
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (app (-> private-exponent <-) e p q) (env ()))"
  #t
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  number
  "'(eval (letrec* (... n (e (-> 7 <-)) d ...) ...) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  app
  "'(eval (letrec* (... q (n (-> (app * p q) <-)) e ...) ...) (env ()))"
  #f
  6
  6
  0
  0
  6
  0
  6
  1
  1
  6
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (app * p (-> q <-)) (env ()))"
  #t
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (app * (-> p <-) q) (env ()))"
  #t
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (app (-> * <-) p q) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  number
  "'(eval (letrec* (... p (q (-> 47 <-)) n ...) ...) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  number
  "'(eval (letrec* (... decrypt (p (-> 41 <-)) q ...) ...) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  lambda
  "'(eval\n  (letrec* (... encrypt (decrypt (-> (λ (c d n) ...) <-)) p ...) ...)\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  app
  "'(eval (λ (c d n) (-> (app modulo-power c d n) <-)) (env (())))"
  #f
  #f)
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (app modulo-power c d (-> n <-)) (env (())))"
  #f
  10
  8
  2
  0
  8
  2
  10
  1
  1
  8
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (app modulo-power c (-> d <-) n) (env (())))"
  #f
  #f)
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (app modulo-power (-> c <-) d n) (env (())))"
  #f
  #f)
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (app (-> modulo-power <-) c d n) (env (())))"
  #t
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  lambda
  "'(eval\n  (letrec*\n   (... private-exponent (encrypt (-> (λ (m e n) ...) <-)) decrypt ...)\n   ...)\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  match
  "'(eval (λ (m e n) (-> (match (app > m n) ...) <-)) (env (())))"
  #f
  #f)
'(clean-cache
  rsa
  0
  5
  211
  app
  "'(eval\n  (match\n   (app > m n)\n   (#f)\n   (_ (-> (app error \"The modulus is too small to encrypt the message.\") <-)))\n  (env (())))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  string
  "'(eval\n  (app error (-> \"The modulus is too small to encrypt the message.\" <-))\n  (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval\n  (app (-> error <-) \"The modulus is too small to encrypt the message.\")\n  (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  app
  "'(eval\n  (match (app > m n) ((#f) (-> (app modulo-power m e n) <-)) _)\n  (env (())))"
  #f
  #f)
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (app modulo-power m e (-> n <-)) (env (())))"
  #f
  10
  8
  2
  0
  8
  2
  10
  1
  1
  8
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (app modulo-power m (-> e <-) n) (env (())))"
  #f
  5
  3
  2
  0
  3
  2
  5
  1
  1
  3
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (app modulo-power (-> m <-) e n) (env (())))"
  #f
  5
  3
  2
  0
  3
  2
  5
  1
  1
  3
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (app (-> modulo-power <-) m e n) (env (())))"
  #t
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  app
  "'(eval (match (-> (app > m n) <-) (#f) _) (env (())))"
  #f
  15
  13
  2
  0
  13
  2
  15
  1
  1
  13
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (app > m (-> n <-)) (env (())))"
  #f
  10
  8
  2
  0
  8
  2
  10
  1
  1
  8
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (app > (-> m <-) n) (env (())))"
  #f
  5
  3
  2
  0
  3
  2
  5
  1
  1
  3
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (app (-> > <-) m n) (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  lambda
  "'(eval\n  (letrec*\n   (...\n    is-legal-public-exponent?\n    (private-exponent (-> (λ (e p q) ...) <-))\n    encrypt\n    ...)\n   ...)\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  match
  "'(eval\n  (λ (e p q) (-> (match (app is-legal-public-exponent? e p q) ...) <-))\n  (env (())))"
  #f
  #f)
'(clean-cache
  rsa
  0
  5
  211
  app
  "'(eval\n  (match\n   (app is-legal-public-exponent? e p q)\n   (#f)\n   (_ (-> (app modulo-inverse e (app totient p q)) <-)))\n  (env (())))"
  #f
  #f)
'(clean-cache
  rsa
  0
  5
  211
  app
  "'(eval (app modulo-inverse e (-> (app totient p q) <-)) (env (())))"
  #f
  34
  25
  8
  1
  25
  8
  33
  1
  1
  25
  #t
  1
  ((1 2 0)))
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (app totient p (-> q <-)) (env (())))"
  #f
  5
  3
  2
  0
  3
  2
  5
  1
  1
  3
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (app totient (-> p <-) q) (env (())))"
  #f
  5
  3
  2
  0
  3
  2
  5
  1
  1
  3
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (app (-> totient <-) p q) (env (())))"
  #t
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (app modulo-inverse (-> e <-) (app totient p q)) (env (())))"
  #f
  5
  3
  2
  0
  3
  2
  5
  1
  1
  3
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (app (-> modulo-inverse <-) e (app totient p q)) (env (())))"
  #t
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  app
  "'(eval\n  (match\n   (app is-legal-public-exponent? e p q)\n   ((#f) (-> (app error \"Not a legal public exponent for that modulus.\") <-))\n   _)\n  (env (())))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  string
  "'(eval\n  (app error (-> \"Not a legal public exponent for that modulus.\" <-))\n  (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval\n  (app (-> error <-) \"Not a legal public exponent for that modulus.\")\n  (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  app
  "'(eval (match (-> (app is-legal-public-exponent? e p q) <-) (#f) _) (env (())))"
  #f
  59
  49
  8
  2
  49
  8
  57
  1
  1
  49
  #t
  1
  ((2 2 0)))
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (app is-legal-public-exponent? e p (-> q <-)) (env (())))"
  #f
  5
  3
  2
  0
  3
  2
  5
  1
  1
  3
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (app is-legal-public-exponent? e (-> p <-) q) (env (())))"
  #f
  5
  3
  2
  0
  3
  2
  5
  1
  1
  3
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (app is-legal-public-exponent? (-> e <-) p q) (env (())))"
  #f
  5
  3
  2
  0
  3
  2
  5
  1
  1
  3
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (app (-> is-legal-public-exponent? <-) e p q) (env (())))"
  #t
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  lambda
  "'(eval\n  (letrec*\n   (...\n    modulo-power\n    (is-legal-public-exponent? (-> (λ (e p q) ...) <-))\n    private-exponent\n    ...)\n   ...)\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  app
  "'(eval\n  (λ (e p q)\n    (->\n     (app\n      and\n      (app < 1 e)\n      (app < e (app totient p q))\n      (app = 1 (app gcd e (app totient p q))))\n     <-))\n  (env (())))"
  #f
  55
  46
  8
  1
  46
  8
  54
  1
  1
  46
  #t
  1
  ((2 2 0)))
'(clean-cache
  rsa
  0
  5
  211
  app
  "'(eval\n  (app\n   and\n   (app < 1 e)\n   (app < e (app totient p q))\n   (-> (app = 1 (app gcd e (app totient p q))) <-))\n  (env (())))"
  #f
  43
  34
  8
  1
  34
  8
  42
  1
  1
  34
  #t
  1
  ((2 2 0)))
'(clean-cache
  rsa
  0
  5
  211
  app
  "'(eval (app = 1 (-> (app gcd e (app totient p q)) <-)) (env (())))"
  #f
  40
  31
  8
  1
  31
  8
  39
  1
  1
  31
  #t
  1
  ((1 1 0)))
'(clean-cache
  rsa
  0
  5
  211
  app
  "'(eval (app gcd e (-> (app totient p q) <-)) (env (())))"
  #f
  34
  25
  8
  1
  25
  8
  33
  1
  1
  25
  #t
  1
  ((1 1 0)))
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (app totient p (-> q <-)) (env (())))"
  #f
  8
  4
  4
  0
  4
  4
  8
  1
  1
  4
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (app totient (-> p <-) q) (env (())))"
  #f
  8
  4
  4
  0
  4
  4
  8
  1
  1
  4
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (app (-> totient <-) p q) (env (())))"
  #t
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (app gcd (-> e <-) (app totient p q)) (env (())))"
  #f
  8
  4
  4
  0
  4
  4
  8
  1
  1
  4
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (app (-> gcd <-) e (app totient p q)) (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  number
  "'(eval (app = (-> 1 <-) (app gcd e (app totient p q))) (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (app (-> = <-) 1 (app gcd e (app totient p q))) (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  app
  "'(eval\n  (app\n   and\n   (app < 1 e)\n   (-> (app < e (app totient p q)) <-)\n   (app = 1 (app gcd e (app totient p q))))\n  (env (())))"
  #f
  40
  31
  8
  1
  31
  8
  39
  1
  1
  31
  #t
  1
  ((2 2 0)))
'(clean-cache
  rsa
  0
  5
  211
  app
  "'(eval (app < e (-> (app totient p q) <-)) (env (())))"
  #f
  34
  25
  8
  1
  25
  8
  33
  1
  1
  25
  #t
  1
  ((1 1 0)))
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (app totient p (-> q <-)) (env (())))"
  #f
  8
  4
  4
  0
  4
  4
  8
  1
  1
  4
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (app totient (-> p <-) q) (env (())))"
  #f
  8
  4
  4
  0
  4
  4
  8
  1
  1
  4
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (app (-> totient <-) p q) (env (())))"
  #t
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (app < (-> e <-) (app totient p q)) (env (())))"
  #f
  8
  4
  4
  0
  4
  4
  8
  1
  1
  4
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (app (-> < <-) e (app totient p q)) (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  app
  "'(eval\n  (app\n   and\n   (-> (app < 1 e) <-)\n   (app < e (app totient p q))\n   (app = 1 (app gcd e (app totient p q))))\n  (env (())))"
  #f
  11
  7
  4
  0
  7
  4
  11
  1
  1
  7
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (app < 1 (-> e <-)) (env (())))"
  #f
  8
  4
  4
  0
  4
  4
  8
  1
  1
  4
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  number
  "'(eval (app < (-> 1 <-) e) (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (app (-> < <-) 1 e) (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval\n  (app\n   (-> and <-)\n   (app < 1 e)\n   (app < e (app totient p q))\n   (app = 1 (app gcd e (app totient p q))))\n  (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  lambda
  "'(eval\n  (letrec*\n   (...\n    square\n    (modulo-power (-> (λ (base exp n) ...) <-))\n    is-legal-public-exponent?\n    ...)\n   ...)\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  match
  "'(eval (λ (base exp n) (-> (match (app = exp 0) ...) <-)) (env (())))"
  #f
  #f)
'(clean-cache
  rsa
  0
  5
  211
  number
  "'(eval (match (app = exp 0) (#f) (_ (-> 1 <-))) (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  match
  "'(eval\n  (match (app = exp 0) ((#f) (-> (match (app odd? exp) ...) <-)) _)\n  (env (())))"
  #f
  #f)
'(clean-cache
  rsa
  0
  5
  211
  app
  "'(eval\n  (match\n   (app odd? exp)\n   (#f)\n   (_\n    (->\n     (app modulo (app * base (app modulo-power base (app - exp 1) n)) n)\n     <-)))\n  (env (())))"
  #f
  #f)
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval\n  (app modulo (app * base (app modulo-power base (app - exp 1) n)) (-> n <-))\n  (env (())))"
  #f
  22
  13
  9
  0
  13
  9
  22
  1
  1
  13
  #t
  1
  ((1 1 0)))
'(clean-cache
  rsa
  0
  5
  211
  app
  "'(eval\n  (app modulo (-> (app * base (app modulo-power base (app - exp 1) n)) <-) n)\n  (env (())))"
  #f
  #f)
'(clean-cache
  rsa
  0
  5
  211
  app
  "'(eval (app * base (-> (app modulo-power base (app - exp 1) n) <-)) (env (())))"
  #f
  #f)
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (app modulo-power base (app - exp 1) (-> n <-)) (env (())))"
  #f
  21
  12
  9
  0
  12
  9
  21
  1
  1
  12
  #t
  1
  ((1 1 0)))
'(clean-cache
  rsa
  0
  5
  211
  app
  "'(eval (app modulo-power base (-> (app - exp 1) <-) n) (env (())))"
  #f
  #f)
'(clean-cache
  rsa
  0
  5
  211
  number
  "'(eval (app - exp (-> 1 <-)) (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (app - (-> exp <-) 1) (env (())))"
  #f
  #f)
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (app (-> - <-) exp 1) (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (app modulo-power (-> base <-) (app - exp 1) n) (env (())))"
  #f
  #f)
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (app (-> modulo-power <-) base (app - exp 1) n) (env (())))"
  #t
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (app * (-> base <-) (app modulo-power base (app - exp 1) n)) (env (())))"
  #f
  #f)
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (app (-> * <-) base (app modulo-power base (app - exp 1) n)) (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval\n  (app (-> modulo <-) (app * base (app modulo-power base (app - exp 1) n)) n)\n  (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  app
  "'(eval\n  (match\n   (app odd? exp)\n   ((#f)\n    (->\n     (app modulo (app square (app modulo-power base (app / exp 2) n)) n)\n     <-))\n   _)\n  (env (())))"
  #f
  #f)
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval\n  (app modulo (app square (app modulo-power base (app / exp 2) n)) (-> n <-))\n  (env (())))"
  #f
  22
  13
  9
  0
  13
  9
  22
  1
  1
  13
  #t
  1
  ((1 1 0)))
'(clean-cache
  rsa
  0
  5
  211
  app
  "'(eval\n  (app modulo (-> (app square (app modulo-power base (app / exp 2) n)) <-) n)\n  (env (())))"
  #f
  #f)
'(clean-cache
  rsa
  0
  5
  211
  app
  "'(eval (app square (-> (app modulo-power base (app / exp 2) n) <-)) (env (())))"
  #f
  #f)
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (app modulo-power base (app / exp 2) (-> n <-)) (env (())))"
  #f
  21
  12
  9
  0
  12
  9
  21
  1
  1
  12
  #t
  1
  ((1 1 0)))
'(clean-cache
  rsa
  0
  5
  211
  app
  "'(eval (app modulo-power base (-> (app / exp 2) <-) n) (env (())))"
  #f
  #f)
'(clean-cache
  rsa
  0
  5
  211
  number
  "'(eval (app / exp (-> 2 <-)) (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (app / (-> exp <-) 2) (env (())))"
  #f
  #f)
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (app (-> / <-) exp 2) (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (app modulo-power (-> base <-) (app / exp 2) n) (env (())))"
  #f
  #f)
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (app (-> modulo-power <-) base (app / exp 2) n) (env (())))"
  #t
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (app (-> square <-) (app modulo-power base (app / exp 2) n)) (env (())))"
  #t
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval\n  (app (-> modulo <-) (app square (app modulo-power base (app / exp 2) n)) n)\n  (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  app
  "'(eval (match (-> (app odd? exp) <-) (#f) _) (env (())))"
  #f
  #f)
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (app odd? (-> exp <-)) (env (())))"
  #f
  #f)
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (app (-> odd? <-) exp) (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  app
  "'(eval (match (-> (app = exp 0) <-) (#f) _) (env (())))"
  #f
  #f)
'(clean-cache
  rsa
  0
  5
  211
  number
  "'(eval (app = exp (-> 0 <-)) (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (app = (-> exp <-) 0) (env (())))"
  #f
  #f)
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (app (-> = <-) exp 0) (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  lambda
  "'(eval\n  (letrec* (... totient (square (-> (λ (x) ...) <-)) modulo-power ...) ...)\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  app
  "'(eval (λ (x) (-> (app * x x) <-)) (env (())))"
  #f
  #f)
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (app * x (-> x <-)) (env (())))"
  #f
  #f)
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (app * (-> x <-) x) (env (())))"
  #f
  #f)
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (app (-> * <-) x x) (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  lambda
  "'(eval\n  (letrec* (... modulo-inverse (totient (-> (λ (p q) ...) <-)) square ...) ...)\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  app
  "'(eval (λ (p q) (-> (app * (app - p 1) (app - q 1)) <-)) (env (())))"
  #f
  30
  22
  8
  0
  22
  8
  30
  1
  1
  22
  #t
  1
  ((1 1 0)))
'(clean-cache
  rsa
  0
  5
  211
  app
  "'(eval (app * (app - p 1) (-> (app - q 1) <-)) (env (())))"
  #f
  18
  10
  8
  0
  10
  8
  18
  1
  1
  10
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  number
  "'(eval (app - q (-> 1 <-)) (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (app - (-> q <-) 1) (env (())))"
  #f
  15
  7
  8
  0
  7
  8
  15
  1
  1
  7
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (app (-> - <-) q 1) (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  app
  "'(eval (app * (-> (app - p 1) <-) (app - q 1)) (env (())))"
  #f
  18
  10
  8
  0
  10
  8
  18
  1
  1
  10
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  number
  "'(eval (app - p (-> 1 <-)) (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (app - (-> p <-) 1) (env (())))"
  #f
  15
  7
  8
  0
  7
  8
  15
  1
  1
  7
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (app (-> - <-) p 1) (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (app (-> * <-) (app - p 1) (app - q 1)) (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  lambda
  "'(eval\n  (letrec*\n   (... extended-gcd (modulo-inverse (-> (λ (a n) ...) <-)) totient ...)\n   ...)\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  app
  "'(eval\n  (λ (a n) (-> (app modulo (app car (app extended-gcd a n)) n) <-))\n  (env (())))"
  #f
  #f)
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (app modulo (app car (app extended-gcd a n)) (-> n <-)) (env (())))"
  #f
  37
  26
  10
  1
  26
  10
  36
  1
  1
  26
  #t
  1
  ((1 1 0)))
'(clean-cache
  rsa
  0
  5
  211
  app
  "'(eval (app modulo (-> (app car (app extended-gcd a n)) <-) n) (env (())))"
  #f
  #f)
'(clean-cache
  rsa
  0
  5
  211
  app
  "'(eval (app car (-> (app extended-gcd a n) <-)) (env (())))"
  #f
  66
  51
  13
  2
  51
  13
  64
  1
  1
  41
  #f
  61/51
  ((3 3 0)))
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (app extended-gcd a (-> n <-)) (env (())))"
  #f
  37
  26
  10
  1
  26
  10
  36
  1
  1
  26
  #t
  1
  ((1 1 0)))
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (app extended-gcd (-> a <-) n) (env (())))"
  #f
  8
  4
  4
  0
  4
  4
  8
  1
  1
  4
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (app (-> extended-gcd <-) a n) (env (())))"
  #t
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (app (-> car <-) (app extended-gcd a n)) (env (())))"
  #t
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (app (-> modulo <-) (app car (app extended-gcd a n)) n) (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  lambda
  "'(eval\n  (letrec*\n   (... cdr (extended-gcd (-> (λ (a b) ...) <-)) modulo-inverse ...)\n   ...)\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  match
  "'(eval (λ (a b) (-> (match (app = (app modulo a b) 0) ...) <-)) (env (())))"
  #f
  62
  48
  13
  1
  48
  13
  61
  1
  1
  39
  #f
  19/16
  ((3 3 0)))
'(clean-cache
  rsa
  0
  5
  211
  app
  "'(eval\n  (match (app = (app modulo a b) 0) (#f) (_ (-> (app cons 0 1) <-)))\n  (env (())))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  number
  "'(eval (app cons 0 (-> 1 <-)) (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  number
  "'(eval (app cons (-> 0 <-) 1) (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (app (-> cons <-) 0 1) (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  let*
  "'(eval\n  (match (app = (app modulo a b) 0) ((#f) (-> (let* (x:y ... y) ...) <-)) _)\n  (env (())))"
  #f
  3
  3
  0
  0
  3
  0
  3
  1
  1
  3
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  app
  "'(eval (let* (... x (y (-> (app cdr x:y) <-)) () ...) ...) (env (())))"
  #f
  #f)
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (app cdr (-> x:y <-)) (env (())))"
  #f
  67
  52
  13
  2
  52
  13
  65
  1
  1
  41
  #f
  63/52
  ((3 3 0)))
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (app (-> cdr <-) x:y) (env (())))"
  #t
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  app
  "'(eval (let* (... x:y (x (-> (app car x:y) <-)) y ...) ...) (env (())))"
  #f
  #f)
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (app car (-> x:y <-)) (env (())))"
  #f
  67
  52
  13
  2
  52
  13
  65
  1
  1
  41
  #f
  63/52
  ((3 3 0)))
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (app (-> car <-) x:y) (env (())))"
  #t
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  app
  "'(eval\n  (let* (... () (x:y (-> (app extended-gcd b (app modulo a b)) <-)) x ...) ...)\n  (env (())))"
  #f
  66
  51
  13
  2
  51
  13
  64
  1
  1
  41
  #f
  61/51
  ((3 3 0)))
'(clean-cache
  rsa
  0
  5
  211
  app
  "'(eval (app extended-gcd b (-> (app modulo a b) <-)) (env (())))"
  #f
  49
  35
  13
  1
  35
  13
  48
  1
  1
  31
  #f
  39/35
  ((2 2 0)))
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (app modulo a (-> b <-)) (env (())))"
  #f
  49
  35
  13
  1
  35
  13
  48
  1
  1
  31
  #f
  39/35
  ((2 2 0)))
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (app modulo (-> a <-) b) (env (())))"
  #f
  49
  35
  13
  1
  35
  13
  48
  1
  1
  31
  #f
  39/35
  ((2 2 0)))
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (app (-> modulo <-) a b) (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (app extended-gcd (-> b <-) (app modulo a b)) (env (())))"
  #f
  49
  35
  13
  1
  35
  13
  48
  1
  1
  31
  #f
  39/35
  ((2 2 0)))
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (app (-> extended-gcd <-) b (app modulo a b)) (env (())))"
  #t
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  app
  "'(eval\n  (let* (x:y ... y)\n    (-> (app cons y (app - x (app * y (app quotient a b)))) <-))\n  (env (())))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  app
  "'(eval (app cons y (-> (app - x (app * y (app quotient a b))) <-)) (env (())))"
  #f
  #f)
'(clean-cache
  rsa
  0
  5
  211
  app
  "'(eval (app - x (-> (app * y (app quotient a b)) <-)) (env (())))"
  #f
  #f)
'(clean-cache
  rsa
  0
  5
  211
  app
  "'(eval (app * y (-> (app quotient a b) <-)) (env (())))"
  #f
  53
  39
  13
  1
  39
  13
  52
  1
  1
  32
  #f
  46/39
  ((2 2 0)))
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (app quotient a (-> b <-)) (env (())))"
  #f
  50
  36
  13
  1
  36
  13
  49
  1
  1
  31
  #f
  41/36
  ((2 2 0)))
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (app quotient (-> a <-) b) (env (())))"
  #f
  50
  36
  13
  1
  36
  13
  49
  1
  1
  31
  #f
  41/36
  ((2 2 0)))
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (app (-> quotient <-) a b) (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (app * (-> y <-) (app quotient a b)) (env (())))"
  #f
  #f)
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (app (-> * <-) y (app quotient a b)) (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (app - (-> x <-) (app * y (app quotient a b))) (env (())))"
  #f
  #f)
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (app (-> - <-) x (app * y (app quotient a b))) (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (app cons (-> y <-) (app - x (app * y (app quotient a b)))) (env (())))"
  #f
  #f)
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (app (-> cons <-) y (app - x (app * y (app quotient a b)))) (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  app
  "'(eval (match (-> (app = (app modulo a b) 0) <-) (#f) _) (env (())))"
  #f
  56
  42
  13
  1
  42
  13
  55
  1
  1
  34
  #f
  25/21
  ((2 3 0)))
'(clean-cache
  rsa
  0
  5
  211
  number
  "'(eval (app = (app modulo a b) (-> 0 <-)) (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  app
  "'(eval (app = (-> (app modulo a b) <-) 0) (env (())))"
  #f
  53
  39
  13
  1
  39
  13
  52
  1
  1
  32
  #f
  46/39
  ((2 2 0)))
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (app modulo a (-> b <-)) (env (())))"
  #f
  50
  36
  13
  1
  36
  13
  49
  1
  1
  31
  #f
  41/36
  ((2 2 0)))
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (app modulo (-> a <-) b) (env (())))"
  #f
  50
  36
  13
  1
  36
  13
  49
  1
  1
  31
  #f
  41/36
  ((2 2 0)))
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (app (-> modulo <-) a b) (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (app (-> = <-) (app modulo a b) 0) (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  lambda
  "'(eval\n  (letrec* (... car (cdr (-> (λ (cdr-v) ...) <-)) extended-gcd ...) ...)\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  match
  "'(eval (λ (cdr-v) (-> (match cdr-v ...) <-)) (env (())))"
  #f
  #f)
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (match cdr-v ((cons cdr-c cdr-d) (-> cdr-d <-))) (env (())))"
  #f
  #f)
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (match (-> cdr-v <-) (cons cdr-c cdr-d)) (env (())))"
  #f
  70
  53
  15
  2
  53
  15
  68
  1
  1
  41
  #f
  65/53
  ((3 3 0)))
'(clean-cache
  rsa
  0
  5
  211
  lambda
  "'(eval (letrec* (... () (car (-> (λ (car-v) ...) <-)) cdr ...) ...) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  match
  "'(eval (λ (car-v) (-> (match car-v ...) <-)) (env (())))"
  #f
  #f)
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (match car-v ((cons car-c car-d) (-> car-c <-))) (env (())))"
  #f
  #f)
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (match (-> car-v <-) (cons car-c car-d)) (env (())))"
  #f
  73
  55
  16
  2
  55
  16
  71
  1
  1
  42
  #f
  68/55
  ((3 3 0)))
'(clean-cache
  rsa
  0
  5
  211
  match
  "'(eval\n  (letrec*\n   (car ... decrypted-ciphertext)\n   (-> (match (app not (app = plaintext decrypted-ciphertext)) ...) <-))\n  (env ()))"
  #f
  #f)
'(clean-cache
  rsa
  0
  5
  211
  app
  "'(eval\n  (match\n   (app not (app = plaintext decrypted-ciphertext))\n   (#f)\n   (_ (-> (app error \"RSA fail!\") <-)))\n  (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  string
  "'(eval (app error (-> \"RSA fail!\" <-)) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (app (-> error <-) \"RSA fail!\") (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  app
  "'(eval\n  (match\n   (app not (app = plaintext decrypted-ciphertext))\n   ((#f) (-> (app display \"RSA success!\") <-))\n   _)\n  (env ()))"
  #f
  3
  3
  0
  0
  3
  0
  3
  1
  1
  3
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  string
  "'(eval (app display (-> \"RSA success!\" <-)) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (app (-> display <-) \"RSA success!\") (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  app
  "'(eval\n  (match (-> (app not (app = plaintext decrypted-ciphertext)) <-) (#f) _)\n  (env ()))"
  #f
  #f)
'(clean-cache
  rsa
  0
  5
  211
  app
  "'(eval (app not (-> (app = plaintext decrypted-ciphertext) <-)) (env ()))"
  #f
  #f)
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (app = plaintext (-> decrypted-ciphertext <-)) (env ()))"
  #f
  #f)
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (app = (-> plaintext <-) decrypted-ciphertext) (env ()))"
  #t
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (app (-> = <-) plaintext decrypted-ciphertext) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  rsa
  0
  5
  211
  ref-or-constructor
  "'(eval (app (-> not <-) (app = plaintext decrypted-ciphertext)) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
