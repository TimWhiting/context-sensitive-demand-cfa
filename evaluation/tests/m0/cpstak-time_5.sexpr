'(clean-cache
  cpstak
  0
  36
  letrec*
  "\"'(eval ((top) letrec* (cpstak) ...) (env ()))\""
  #f)
'(clean-cache
  cpstak
  0
  36
  letrec*
  "\"'(eval (λ (x y z) (-> (letrec* (tak) ...) <-)) (env (())))\""
  #f)
'(clean-cache
  cpstak
  0
  36
  match
  "\"'(eval (λ (x y z k) (-> (match (app not (app < y x)) ...) <-)) (env (() ())))\""
  #f)
'(clean-cache
  cpstak
  0
  36
  app
  "\"'(eval (match (app not (app < y x)) (#f) (_ (-> (app k z) <-))) (env (() ())))\""
  #f)
'(clean-cache
  cpstak
  0
  36
  ref-or-constructor
  "\"'(eval (app k (-> z <-)) (env (() ())))\""
  #f)
'(clean-cache
  cpstak
  0
  5
  36
  ref-or-constructor
  "\"'(eval (app (-> k <-) z) (env (() ())))\""
  12
  6
  6
  0
  6
  6
  12
  1
  1
  4
  #f
  6
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  cpstak
  0
  36
  app
  "\"'(eval\n  (match\n   (app not (app < y x))\n   ((#f) (-> (app tak (app - x 1) y z (λ (v1) ...)) <-))\n   _)\n  (env (() ())))\""
  #f)
'(clean-cache
  cpstak
  0
  36
  app
  "\"'(eval\n  (λ (v1) (-> (app tak (app - y 1) z x (λ (v2) ...)) <-))\n  (env (() () ())))\""
  #f)
'(clean-cache
  cpstak
  0
  36
  app
  "\"'(eval\n  (λ (v2) (-> (app tak (app - z 1) x y (λ (v3) ...)) <-))\n  (env (() () () ())))\""
  #f)
'(clean-cache
  cpstak
  0
  36
  app
  "\"'(eval (λ (v3) (-> (app tak v1 v2 v3 k) <-)) (env (() () () () ())))\""
  #f)
'(clean-cache
  cpstak
  0
  5
  36
  ref-or-constructor
  "\"'(eval (app tak v1 v2 v3 (-> k <-)) (env (() () () () ())))\""
  11
  5
  6
  0
  5
  6
  11
  1
  1
  4
  #f
  28/5
  ((3/2 3/2 0) (1 1 0) (1 1 0)))
'(clean-cache
  cpstak
  0
  36
  ref-or-constructor
  "\"'(eval (app tak v1 v2 (-> v3 <-) k) (env (() () () () ())))\""
  #f)
'(clean-cache
  cpstak
  0
  36
  ref-or-constructor
  "\"'(eval (app tak v1 (-> v2 <-) v3 k) (env (() () () () ())))\""
  #f)
'(clean-cache
  cpstak
  0
  36
  ref-or-constructor
  "\"'(eval (app tak (-> v1 <-) v2 v3 k) (env (() () () () ())))\""
  #f)
'(clean-cache
  cpstak
  0
  36
  ref-or-constructor
  "\"'(eval (app tak (app - z 1) x (-> y <-) (λ (v3) ...)) (env (() () () ())))\""
  #f)
'(clean-cache
  cpstak
  0
  36
  ref-or-constructor
  "\"'(eval (app tak (app - z 1) (-> x <-) y (λ (v3) ...)) (env (() () () ())))\""
  #f)
'(clean-cache
  cpstak
  0
  36
  app
  "\"'(eval (app tak (-> (app - z 1) <-) x y (λ (v3) ...)) (env (() () () ())))\""
  #f)
'(clean-cache
  cpstak
  0
  36
  ref-or-constructor
  "\"'(eval (app - (-> z <-) 1) (env (() () () ())))\""
  #f)
'(clean-cache
  cpstak
  0
  36
  ref-or-constructor
  "\"'(eval (app tak (app - y 1) z (-> x <-) (λ (v2) ...)) (env (() () ())))\""
  #f)
'(clean-cache
  cpstak
  0
  36
  ref-or-constructor
  "\"'(eval (app tak (app - y 1) (-> z <-) x (λ (v2) ...)) (env (() () ())))\""
  #f)
'(clean-cache
  cpstak
  0
  36
  app
  "\"'(eval (app tak (-> (app - y 1) <-) z x (λ (v2) ...)) (env (() () ())))\""
  #f)
'(clean-cache
  cpstak
  0
  36
  ref-or-constructor
  "\"'(eval (app - (-> y <-) 1) (env (() () ())))\""
  #f)
'(clean-cache
  cpstak
  0
  36
  ref-or-constructor
  "\"'(eval (app tak (app - x 1) y (-> z <-) (λ (v1) ...)) (env (() ())))\""
  #f)
'(clean-cache
  cpstak
  0
  36
  ref-or-constructor
  "\"'(eval (app tak (app - x 1) (-> y <-) z (λ (v1) ...)) (env (() ())))\""
  #f)
'(clean-cache
  cpstak
  0
  36
  app
  "\"'(eval (app tak (-> (app - x 1) <-) y z (λ (v1) ...)) (env (() ())))\""
  #f)
'(clean-cache
  cpstak
  0
  36
  ref-or-constructor
  "\"'(eval (app - (-> x <-) 1) (env (() ())))\""
  #f)
'(clean-cache
  cpstak
  0
  36
  app
  "\"'(eval (match (-> (app not (app < y x)) <-) (#f) _) (env (() ())))\""
  #f)
'(clean-cache
  cpstak
  0
  36
  app
  "\"'(eval (app not (-> (app < y x) <-)) (env (() ())))\""
  #f)
'(clean-cache
  cpstak
  0
  36
  ref-or-constructor
  "\"'(eval (app < y (-> x <-)) (env (() ())))\""
  #f)
'(clean-cache
  cpstak
  0
  36
  ref-or-constructor
  "\"'(eval (app < (-> y <-) x) (env (() ())))\""
  #f)
'(clean-cache
  cpstak
  0
  36
  app
  "\"'(eval (letrec* (tak) (-> (app tak x y z (λ (a) ...)) <-)) (env (())))\""
  #f)
'(clean-cache
  cpstak
  0
  36
  ref-or-constructor
  "\"'(eval (λ (a) (-> a <-)) (env (() ())))\""
  #f)
'(clean-cache
  cpstak
  0
  5
  36
  ref-or-constructor
  "\"'(eval (app tak x y (-> z <-) (λ (a) ...)) (env (())))\""
  4
  2
  2
  0
  2
  2
  4
  1
  1
  0
  #f
  4
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  cpstak
  0
  5
  36
  ref-or-constructor
  "\"'(eval (app tak x (-> y <-) z (λ (a) ...)) (env (())))\""
  4
  2
  2
  0
  2
  2
  4
  1
  1
  0
  #f
  4
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  cpstak
  0
  5
  36
  ref-or-constructor
  "\"'(eval (app tak (-> x <-) y z (λ (a) ...)) (env (())))\""
  4
  2
  2
  0
  2
  2
  4
  1
  1
  0
  #f
  4
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  cpstak
  0
  36
  app
  "\"'(eval (letrec* (cpstak) (-> (app cpstak 32 15 8) <-)) (env ()))\""
  #f)
'(shuffled-cache
  0
  cpstak
  0
  36
  letrec*
  "\"'(eval ((top) letrec* (cpstak) ...) (env ()))\""
  #f)
'(shuffled-cache
  0
  cpstak
  0
  5
  36
  ref-or-constructor
  "\"'(eval (app tak x y (-> z <-) (λ (a) ...)) (env (())))\""
  4
  2
  2
  0
  2
  2
  4
  1
  1
  0
  #f
  4
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  cpstak
  0
  36
  ref-or-constructor
  "\"'(eval (λ (a) (-> a <-)) (env (() ())))\""
  #f)
'(shuffled-cache
  0
  cpstak
  0
  36
  ref-or-constructor
  "\"'(eval (app - (-> z <-) 1) (env (() () () ())))\""
  #f)
'(shuffled-cache
  0
  cpstak
  0
  36
  ref-or-constructor
  "\"'(eval (app tak (app - y 1) (-> z <-) x (λ (v2) ...)) (env (() () ())))\""
  #f)
'(shuffled-cache
  0
  cpstak
  0
  36
  letrec*
  "\"'(eval (λ (x y z) (-> (letrec* (tak) ...) <-)) (env (())))\""
  #f)
'(shuffled-cache
  0
  cpstak
  0
  36
  app
  "\"'(eval (letrec* (cpstak) (-> (app cpstak 32 15 8) <-)) (env ()))\""
  #f)
'(shuffled-cache
  0
  cpstak
  0
  36
  app
  "\"'(eval (app not (-> (app < y x) <-)) (env (() ())))\""
  #f)
'(shuffled-cache
  0
  cpstak
  0
  36
  ref-or-constructor
  "\"'(eval (app < (-> y <-) x) (env (() ())))\""
  #f)
'(shuffled-cache
  0
  cpstak
  0
  36
  app
  "\"'(eval\n  (match\n   (app not (app < y x))\n   ((#f) (-> (app tak (app - x 1) y z (λ (v1) ...)) <-))\n   _)\n  (env (() ())))\""
  #f)
'(shuffled-cache
  0
  cpstak
  0
  5
  36
  ref-or-constructor
  "\"'(eval (app tak (-> x <-) y z (λ (a) ...)) (env (())))\""
  4
  2
  2
  0
  2
  2
  4
  1
  1
  0
  #f
  4
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  cpstak
  0
  36
  ref-or-constructor
  "\"'(eval (app tak (app - x 1) y (-> z <-) (λ (v1) ...)) (env (() ())))\""
  #f)
'(shuffled-cache
  0
  cpstak
  0
  36
  app
  "\"'(eval (app tak (-> (app - x 1) <-) y z (λ (v1) ...)) (env (() ())))\""
  #f)
'(shuffled-cache
  0
  cpstak
  0
  36
  app
  "\"'(eval\n  (λ (v1) (-> (app tak (app - y 1) z x (λ (v2) ...)) <-))\n  (env (() () ())))\""
  #f)
'(shuffled-cache
  0
  cpstak
  0
  36
  app
  "\"'(eval (λ (v3) (-> (app tak v1 v2 v3 k) <-)) (env (() () () () ())))\""
  #f)
'(shuffled-cache
  0
  cpstak
  0
  36
  ref-or-constructor
  "\"'(eval (app tak (app - x 1) (-> y <-) z (λ (v1) ...)) (env (() ())))\""
  #f)
'(shuffled-cache
  0
  cpstak
  0
  36
  ref-or-constructor
  "\"'(eval (app tak (app - z 1) (-> x <-) y (λ (v3) ...)) (env (() () () ())))\""
  #f)
'(shuffled-cache
  0
  cpstak
  0
  5
  36
  ref-or-constructor
  "\"'(eval (app (-> k <-) z) (env (() ())))\""
  12
  6
  6
  0
  6
  6
  12
  1
  1
  4
  #f
  6
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  cpstak
  0
  36
  app
  "\"'(eval\n  (λ (v2) (-> (app tak (app - z 1) x y (λ (v3) ...)) <-))\n  (env (() () () ())))\""
  #f)
'(shuffled-cache
  0
  cpstak
  0
  36
  ref-or-constructor
  "\"'(eval (app - (-> x <-) 1) (env (() ())))\""
  #f)
'(shuffled-cache
  0
  cpstak
  0
  36
  ref-or-constructor
  "\"'(eval (app tak (app - z 1) x (-> y <-) (λ (v3) ...)) (env (() () () ())))\""
  #f)
'(shuffled-cache
  0
  cpstak
  0
  36
  app
  "\"'(eval (app tak (-> (app - z 1) <-) x y (λ (v3) ...)) (env (() () () ())))\""
  #f)
'(shuffled-cache
  0
  cpstak
  0
  36
  app
  "\"'(eval (match (-> (app not (app < y x)) <-) (#f) _) (env (() ())))\""
  #f)
'(shuffled-cache
  0
  cpstak
  0
  36
  ref-or-constructor
  "\"'(eval (app tak (app - y 1) z (-> x <-) (λ (v2) ...)) (env (() () ())))\""
  #f)
'(shuffled-cache
  0
  cpstak
  0
  5
  36
  ref-or-constructor
  "\"'(eval (app tak v1 v2 v3 (-> k <-)) (env (() () () () ())))\""
  11
  5
  6
  0
  5
  6
  11
  1
  1
  4
  #f
  28/5
  ((3/2 3/2 0) (1 1 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  cpstak
  0
  36
  app
  "\"'(eval (app tak (-> (app - y 1) <-) z x (λ (v2) ...)) (env (() () ())))\""
  #f)
'(shuffled-cache
  0
  cpstak
  0
  36
  app
  "\"'(eval (letrec* (tak) (-> (app tak x y z (λ (a) ...)) <-)) (env (())))\""
  #f)
'(shuffled-cache
  0
  cpstak
  0
  36
  ref-or-constructor
  "\"'(eval (app tak v1 v2 (-> v3 <-) k) (env (() () () () ())))\""
  #f)
'(shuffled-cache
  0
  cpstak
  0
  36
  ref-or-constructor
  "\"'(eval (app - (-> y <-) 1) (env (() () ())))\""
  #f)
'(shuffled-cache
  0
  cpstak
  0
  36
  app
  "\"'(eval (match (app not (app < y x)) (#f) (_ (-> (app k z) <-))) (env (() ())))\""
  #f)
'(shuffled-cache
  0
  cpstak
  0
  36
  ref-or-constructor
  "\"'(eval (app < y (-> x <-)) (env (() ())))\""
  #f)
'(shuffled-cache
  0
  cpstak
  0
  5
  36
  ref-or-constructor
  "\"'(eval (app tak x (-> y <-) z (λ (a) ...)) (env (())))\""
  4
  2
  2
  0
  2
  2
  4
  1
  1
  0
  #f
  4
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  cpstak
  0
  36
  ref-or-constructor
  "\"'(eval (app tak v1 (-> v2 <-) v3 k) (env (() () () () ())))\""
  #f)
'(shuffled-cache
  0
  cpstak
  0
  36
  ref-or-constructor
  "\"'(eval (app tak (-> v1 <-) v2 v3 k) (env (() () () () ())))\""
  #f)
'(shuffled-cache
  0
  cpstak
  0
  36
  ref-or-constructor
  "\"'(eval (app k (-> z <-)) (env (() ())))\""
  #f)
'(shuffled-cache
  0
  cpstak
  0
  36
  match
  "\"'(eval (λ (x y z k) (-> (match (app not (app < y x)) ...) <-)) (env (() ())))\""
  #f)
'(shuffled-cache
  1
  cpstak
  0
  5
  36
  ref-or-constructor
  "\"'(eval (app tak x y (-> z <-) (λ (a) ...)) (env (())))\""
  4
  2
  2
  0
  2
  2
  4
  1
  1
  0
  #f
  4
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  cpstak
  0
  36
  ref-or-constructor
  "\"'(eval (app k (-> z <-)) (env (() ())))\""
  #f)
'(shuffled-cache
  1
  cpstak
  0
  36
  app
  "\"'(eval (app tak (-> (app - z 1) <-) x y (λ (v3) ...)) (env (() () () ())))\""
  #f)
'(shuffled-cache
  1
  cpstak
  0
  36
  ref-or-constructor
  "\"'(eval (app tak v1 v2 (-> v3 <-) k) (env (() () () () ())))\""
  #f)
'(shuffled-cache
  1
  cpstak
  0
  5
  36
  ref-or-constructor
  "\"'(eval (app tak (-> x <-) y z (λ (a) ...)) (env (())))\""
  4
  2
  2
  0
  2
  2
  4
  1
  1
  0
  #f
  4
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  cpstak
  0
  36
  letrec*
  "\"'(eval ((top) letrec* (cpstak) ...) (env ()))\""
  #f)
'(shuffled-cache
  1
  cpstak
  0
  36
  ref-or-constructor
  "\"'(eval (app - (-> y <-) 1) (env (() () ())))\""
  #f)
'(shuffled-cache
  1
  cpstak
  0
  36
  app
  "\"'(eval (letrec* (cpstak) (-> (app cpstak 32 15 8) <-)) (env ()))\""
  #f)
'(shuffled-cache
  1
  cpstak
  0
  36
  app
  "\"'(eval (letrec* (tak) (-> (app tak x y z (λ (a) ...)) <-)) (env (())))\""
  #f)
'(shuffled-cache
  1
  cpstak
  0
  36
  ref-or-constructor
  "\"'(eval (app tak (app - y 1) (-> z <-) x (λ (v2) ...)) (env (() () ())))\""
  #f)
'(shuffled-cache
  1
  cpstak
  0
  36
  match
  "\"'(eval (λ (x y z k) (-> (match (app not (app < y x)) ...) <-)) (env (() ())))\""
  #f)
'(shuffled-cache
  1
  cpstak
  0
  36
  ref-or-constructor
  "\"'(eval (app tak (app - z 1) x (-> y <-) (λ (v3) ...)) (env (() () () ())))\""
  #f)
'(shuffled-cache
  1
  cpstak
  0
  36
  app
  "\"'(eval\n  (λ (v1) (-> (app tak (app - y 1) z x (λ (v2) ...)) <-))\n  (env (() () ())))\""
  #f)
'(shuffled-cache
  1
  cpstak
  0
  36
  letrec*
  "\"'(eval (λ (x y z) (-> (letrec* (tak) ...) <-)) (env (())))\""
  #f)
'(shuffled-cache
  1
  cpstak
  0
  5
  36
  ref-or-constructor
  "\"'(eval (app tak x (-> y <-) z (λ (a) ...)) (env (())))\""
  4
  2
  2
  0
  2
  2
  4
  1
  1
  0
  #f
  4
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  cpstak
  0
  36
  app
  "\"'(eval (match (app not (app < y x)) (#f) (_ (-> (app k z) <-))) (env (() ())))\""
  #f)
'(shuffled-cache
  1
  cpstak
  0
  36
  app
  "\"'(eval (match (-> (app not (app < y x)) <-) (#f) _) (env (() ())))\""
  #f)
'(shuffled-cache
  1
  cpstak
  0
  36
  ref-or-constructor
  "\"'(eval (app tak (app - z 1) (-> x <-) y (λ (v3) ...)) (env (() () () ())))\""
  #f)
'(shuffled-cache
  1
  cpstak
  0
  36
  ref-or-constructor
  "\"'(eval (app tak (app - y 1) z (-> x <-) (λ (v2) ...)) (env (() () ())))\""
  #f)
'(shuffled-cache
  1
  cpstak
  0
  36
  app
  "\"'(eval (app tak (-> (app - y 1) <-) z x (λ (v2) ...)) (env (() () ())))\""
  #f)
'(shuffled-cache
  1
  cpstak
  0
  5
  36
  ref-or-constructor
  "\"'(eval (app tak v1 v2 v3 (-> k <-)) (env (() () () () ())))\""
  11
  5
  6
  0
  5
  6
  11
  1
  1
  4
  #f
  28/5
  ((1 1 0) (1 3/2 0) (3/2 2 0)))
'(shuffled-cache
  1
  cpstak
  0
  36
  app
  "\"'(eval\n  (λ (v2) (-> (app tak (app - z 1) x y (λ (v3) ...)) <-))\n  (env (() () () ())))\""
  #f)
'(shuffled-cache
  1
  cpstak
  0
  36
  app
  "\"'(eval (app tak (-> (app - x 1) <-) y z (λ (v1) ...)) (env (() ())))\""
  #f)
'(shuffled-cache
  1
  cpstak
  0
  36
  ref-or-constructor
  "\"'(eval (app tak (app - x 1) y (-> z <-) (λ (v1) ...)) (env (() ())))\""
  #f)
'(shuffled-cache
  1
  cpstak
  0
  36
  ref-or-constructor
  "\"'(eval (λ (a) (-> a <-)) (env (() ())))\""
  #f)
'(shuffled-cache
  1
  cpstak
  0
  36
  app
  "\"'(eval\n  (match\n   (app not (app < y x))\n   ((#f) (-> (app tak (app - x 1) y z (λ (v1) ...)) <-))\n   _)\n  (env (() ())))\""
  #f)
'(shuffled-cache
  1
  cpstak
  0
  36
  ref-or-constructor
  "\"'(eval (app tak (-> v1 <-) v2 v3 k) (env (() () () () ())))\""
  #f)
'(shuffled-cache
  1
  cpstak
  0
  36
  app
  "\"'(eval (app not (-> (app < y x) <-)) (env (() ())))\""
  #f)
'(shuffled-cache
  1
  cpstak
  0
  36
  ref-or-constructor
  "\"'(eval (app < y (-> x <-)) (env (() ())))\""
  #f)
'(shuffled-cache
  1
  cpstak
  0
  36
  ref-or-constructor
  "\"'(eval (app tak v1 (-> v2 <-) v3 k) (env (() () () () ())))\""
  #f)
'(shuffled-cache
  1
  cpstak
  0
  36
  ref-or-constructor
  "\"'(eval (app - (-> z <-) 1) (env (() () () ())))\""
  #f)
'(shuffled-cache
  1
  cpstak
  0
  36
  ref-or-constructor
  "\"'(eval (app - (-> x <-) 1) (env (() ())))\""
  #f)
'(shuffled-cache
  1
  cpstak
  0
  36
  app
  "\"'(eval (λ (v3) (-> (app tak v1 v2 v3 k) <-)) (env (() () () () ())))\""
  #f)
'(shuffled-cache
  1
  cpstak
  0
  36
  ref-or-constructor
  "\"'(eval (app < (-> y <-) x) (env (() ())))\""
  #f)
'(shuffled-cache
  1
  cpstak
  0
  36
  ref-or-constructor
  "\"'(eval (app tak (app - x 1) (-> y <-) z (λ (v1) ...)) (env (() ())))\""
  #f)
'(shuffled-cache
  1
  cpstak
  0
  5
  36
  ref-or-constructor
  "\"'(eval (app (-> k <-) z) (env (() ())))\""
  12
  6
  6
  0
  6
  6
  12
  1
  1
  4
  #f
  6
  ((3/2 3/2 0) (3/2 2 0) (3/2 3/2 0)))
