'(clean-cache
  blur
  0
  15
  23
  letrec
  "\"'(eval ((top) letrec (id ... lp) ...) (env ()))\""
  62
  43
  15
  4
  43
  15
  58
  1
  1
  25
  #f
  61/43
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  blur
  0
  15
  23
  match
  "\"'(eval (λ (a n) (-> (match (app <= n 1) ...) <-)) (env (())))\""
  59
  40
  15
  4
  40
  15
  55
  1
  1
  24
  #f
  7/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  blur
  0
  15
  23
  app
  "\"'(eval (match (app <= n 1) (#f) (_ (-> (app id a) <-))) (env (())))\""
  59
  40
  15
  4
  40
  15
  55
  1
  1
  24
  #f
  7/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  blur
  0
  15
  23
  ref-or-constructor
  "\"'(eval (app id (-> a <-)) (env (())))\""
  59
  40
  15
  4
  40
  15
  55
  1
  1
  24
  #f
  7/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  blur
  0
  15
  23
  let*
  "\"'(eval (match (app <= n 1) ((#f) (-> (let* (r ... s) ...) <-)) _) (env (())))\""
  59
  40
  15
  4
  40
  15
  55
  1
  1
  24
  #f
  7/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  blur
  0
  15
  23
  app
  "\"'(eval\n  (let* (... r (s (-> (app (app blur id) (app #f)) <-)) () ...) ...)\n  (env (())))\""
  59
  40
  15
  4
  40
  15
  55
  1
  1
  24
  #f
  7/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  blur
  0
  15
  23
  app
  "\"'(eval (app (app blur id) (-> (app #f) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  blur
  0
  15
  23
  app
  "\"'(eval (app (-> (app blur id) <-) (app #f)) (env (())))\""
  14
  9
  4
  1
  9
  4
  13
  1
  1
  7
  #f
  11/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  blur
  0
  15
  23
  app
  "\"'(eval\n  (let* (... () (r (-> (app (app blur id) (app #t)) <-)) s ...) ...)\n  (env (())))\""
  61
  42
  15
  4
  42
  15
  57
  1
  1
  24
  #f
  10/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  blur
  0
  15
  23
  app
  "\"'(eval (app (app blur id) (-> (app #t) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  blur
  0
  15
  23
  app
  "\"'(eval (app (-> (app blur id) <-) (app #t)) (env (())))\""
  14
  9
  4
  1
  9
  4
  13
  1
  1
  7
  #f
  11/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  blur
  0
  15
  23
  app
  "\"'(eval\n  (let* (r ... s) (-> (app not (app (app blur lp) s (app - n 1))) <-))\n  (env (())))\""
  59
  40
  15
  4
  40
  15
  55
  1
  1
  24
  #f
  7/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  blur
  0
  15
  23
  app
  "\"'(eval (app not (-> (app (app blur lp) s (app - n 1)) <-)) (env (())))\""
  59
  40
  15
  4
  40
  15
  55
  1
  1
  24
  #f
  7/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  blur
  0
  15
  23
  app
  "\"'(eval (app (app blur lp) s (-> (app - n 1) <-)) (env (())))\""
  19
  7
  11
  1
  7
  11
  18
  1
  1
  5
  #f
  9/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  blur
  0
  15
  23
  ref-or-constructor
  "\"'(eval (app - (-> n <-) 1) (env (())))\""
  19
  7
  11
  1
  7
  11
  18
  1
  1
  5
  #f
  9/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  blur
  0
  15
  23
  ref-or-constructor
  "\"'(eval (app (app blur lp) (-> s <-) (app - n 1)) (env (())))\""
  59
  40
  15
  4
  40
  15
  55
  1
  1
  24
  #f
  7/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  blur
  0
  15
  23
  app
  "\"'(eval (app (-> (app blur lp) <-) s (app - n 1)) (env (())))\""
  14
  9
  4
  1
  9
  4
  13
  1
  1
  7
  #f
  11/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  blur
  0
  15
  23
  app
  "\"'(eval (match (-> (app <= n 1) <-) (#f) _) (env (())))\""
  23
  11
  11
  1
  11
  11
  22
  1
  1
  7
  #f
  15/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  blur
  0
  15
  23
  ref-or-constructor
  "\"'(eval (app <= (-> n <-) 1) (env (())))\""
  20
  8
  11
  1
  8
  11
  19
  1
  1
  5
  #f
  11/8
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  blur
  0
  15
  23
  ref-or-constructor
  "\"'(eval (λ (y) (-> y <-)) (env (())))\""
  10
  6
  4
  0
  6
  4
  10
  1
  1
  5
  #f
  7/6
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  blur
  0
  15
  23
  ref-or-constructor
  "\"'(eval (λ (x) (-> x <-)) (env (())))\""
  59
  40
  15
  4
  40
  15
  55
  1
  1
  24
  #f
  7/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  blur
  0
  15
  23
  app
  "\"'(eval (letrec (id ... lp) (-> (app lp (app #f) 2) <-)) (env ()))\""
  61
  42
  15
  4
  42
  15
  57
  1
  1
  25
  #f
  59/42
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  blur
  0
  15
  23
  app
  "\"'(eval (app lp (-> (app #f) <-) 2) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  0
  15
  23
  app
  "\"'(eval (app (app blur lp) s (-> (app - n 1) <-)) (env (())))\""
  19
  7
  11
  1
  7
  11
  18
  1
  1
  5
  #f
  9/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  0
  15
  23
  app
  "\"'(eval (app (app blur id) (-> (app #t) <-)) (env (())))\""
  21
  9
  11
  1
  9
  11
  20
  1
  1
  7
  #t
  11/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  0
  15
  23
  ref-or-constructor
  "\"'(eval (λ (x) (-> x <-)) (env (())))\""
  59
  40
  15
  4
  40
  15
  55
  1
  1
  24
  #f
  7/5
  ((0 0 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  blur
  0
  15
  23
  app
  "\"'(eval\n  (let* (... r (s (-> (app (app blur id) (app #f)) <-)) () ...) ...)\n  (env (())))\""
  59
  40
  15
  4
  40
  15
  55
  1
  1
  24
  #f
  7/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  0
  15
  23
  match
  "\"'(eval (λ (a n) (-> (match (app <= n 1) ...) <-)) (env (())))\""
  59
  40
  15
  4
  40
  15
  55
  1
  1
  24
  #f
  7/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  0
  15
  23
  app
  "\"'(eval (app (-> (app blur lp) <-) s (app - n 1)) (env (())))\""
  59
  40
  15
  4
  40
  15
  55
  1
  1
  24
  #f
  7/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  0
  15
  23
  app
  "\"'(eval (app not (-> (app (app blur lp) s (app - n 1)) <-)) (env (())))\""
  59
  40
  15
  4
  40
  15
  55
  1
  1
  24
  #f
  7/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  0
  15
  23
  app
  "\"'(eval (match (app <= n 1) (#f) (_ (-> (app id a) <-))) (env (())))\""
  59
  40
  15
  4
  40
  15
  55
  1
  1
  24
  #f
  7/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  0
  15
  23
  ref-or-constructor
  "\"'(eval (app (app blur lp) (-> s <-) (app - n 1)) (env (())))\""
  59
  40
  15
  4
  40
  15
  55
  1
  1
  24
  #f
  7/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  0
  15
  23
  let*
  "\"'(eval (match (app <= n 1) ((#f) (-> (let* (r ... s) ...) <-)) _) (env (())))\""
  59
  40
  15
  4
  40
  15
  55
  1
  1
  24
  #f
  7/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  0
  15
  23
  app
  "\"'(eval\n  (let* (... () (r (-> (app (app blur id) (app #t)) <-)) s ...) ...)\n  (env (())))\""
  61
  42
  15
  4
  42
  15
  57
  1
  1
  24
  #f
  10/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  0
  15
  23
  ref-or-constructor
  "\"'(eval (app - (-> n <-) 1) (env (())))\""
  61
  42
  15
  4
  42
  15
  57
  1
  1
  24
  #f
  10/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  0
  15
  23
  app
  "\"'(eval (app (-> (app blur id) <-) (app #f)) (env (())))\""
  61
  42
  15
  4
  42
  15
  57
  1
  1
  24
  #f
  10/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  0
  15
  23
  app
  "\"'(eval\n  (let* (r ... s) (-> (app not (app (app blur lp) s (app - n 1))) <-))\n  (env (())))\""
  61
  42
  15
  4
  42
  15
  57
  1
  1
  24
  #f
  10/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  0
  15
  23
  app
  "\"'(eval (app (-> (app blur id) <-) (app #t)) (env (())))\""
  61
  42
  15
  4
  42
  15
  57
  1
  1
  24
  #f
  10/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  0
  15
  23
  app
  "\"'(eval (letrec (id ... lp) (-> (app lp (app #f) 2) <-)) (env ()))\""
  63
  44
  15
  4
  44
  15
  59
  1
  1
  25
  #f
  63/44
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  0
  15
  23
  app
  "\"'(eval (app (app blur id) (-> (app #f) <-)) (env (())))\""
  63
  44
  15
  4
  44
  15
  59
  1
  1
  25
  #t
  63/44
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  0
  15
  23
  app
  "\"'(eval (match (-> (app <= n 1) <-) (#f) _) (env (())))\""
  63
  44
  15
  4
  44
  15
  59
  1
  1
  25
  #f
  63/44
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  0
  15
  23
  letrec
  "\"'(eval ((top) letrec (id ... lp) ...) (env ()))\""
  64
  45
  15
  4
  45
  15
  60
  1
  1
  25
  #f
  13/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  0
  15
  23
  app
  "\"'(eval (app lp (-> (app #f) <-) 2) (env ()))\""
  64
  45
  15
  4
  45
  15
  60
  1
  1
  25
  #t
  13/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  0
  15
  23
  ref-or-constructor
  "\"'(eval (app <= (-> n <-) 1) (env (())))\""
  64
  45
  15
  4
  45
  15
  60
  1
  1
  25
  #f
  13/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  0
  15
  23
  ref-or-constructor
  "\"'(eval (λ (y) (-> y <-)) (env (())))\""
  64
  45
  15
  4
  45
  15
  60
  1
  1
  25
  #f
  13/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  0
  15
  23
  ref-or-constructor
  "\"'(eval (app id (-> a <-)) (env (())))\""
  64
  45
  15
  4
  45
  15
  60
  1
  1
  25
  #f
  13/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  0
  15
  23
  app
  "\"'(eval (app lp (-> (app #f) <-) 2) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  0
  15
  23
  ref-or-constructor
  "\"'(eval (app <= (-> n <-) 1) (env (())))\""
  22
  10
  11
  1
  10
  11
  21
  1
  1
  7
  #f
  13/10
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  0
  15
  23
  letrec
  "\"'(eval ((top) letrec (id ... lp) ...) (env ()))\""
  62
  43
  15
  4
  43
  15
  58
  1
  1
  25
  #f
  61/43
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  0
  15
  23
  app
  "\"'(eval (app (app blur id) (-> (app #t) <-)) (env (())))\""
  62
  43
  15
  4
  43
  15
  58
  1
  1
  25
  #t
  61/43
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  0
  15
  23
  app
  "\"'(eval (app not (-> (app (app blur lp) s (app - n 1)) <-)) (env (())))\""
  62
  43
  15
  4
  43
  15
  58
  1
  1
  25
  #f
  61/43
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  0
  15
  23
  app
  "\"'(eval (match (-> (app <= n 1) <-) (#f) _) (env (())))\""
  62
  43
  15
  4
  43
  15
  58
  1
  1
  25
  #f
  61/43
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  0
  15
  23
  ref-or-constructor
  "\"'(eval (λ (y) (-> y <-)) (env (())))\""
  62
  43
  15
  4
  43
  15
  58
  1
  1
  25
  #f
  61/43
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  0
  15
  23
  ref-or-constructor
  "\"'(eval (app (app blur lp) (-> s <-) (app - n 1)) (env (())))\""
  62
  43
  15
  4
  43
  15
  58
  1
  1
  25
  #f
  61/43
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  0
  15
  23
  ref-or-constructor
  "\"'(eval (λ (x) (-> x <-)) (env (())))\""
  62
  43
  15
  4
  43
  15
  58
  1
  1
  25
  #f
  61/43
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  0
  15
  23
  app
  "\"'(eval (letrec (id ... lp) (-> (app lp (app #f) 2) <-)) (env ()))\""
  62
  43
  15
  4
  43
  15
  58
  1
  1
  25
  #f
  61/43
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  0
  15
  23
  app
  "\"'(eval (app (-> (app blur id) <-) (app #f)) (env (())))\""
  62
  43
  15
  4
  43
  15
  58
  1
  1
  25
  #f
  61/43
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  0
  15
  23
  app
  "\"'(eval (app (-> (app blur lp) <-) s (app - n 1)) (env (())))\""
  62
  43
  15
  4
  43
  15
  58
  1
  1
  25
  #f
  61/43
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  0
  15
  23
  app
  "\"'(eval (app (app blur id) (-> (app #f) <-)) (env (())))\""
  62
  43
  15
  4
  43
  15
  58
  1
  1
  25
  #t
  61/43
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  0
  15
  23
  app
  "\"'(eval (app (app blur lp) s (-> (app - n 1) <-)) (env (())))\""
  62
  43
  15
  4
  43
  15
  58
  1
  1
  25
  #f
  61/43
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  0
  15
  23
  app
  "\"'(eval\n  (let* (r ... s) (-> (app not (app (app blur lp) s (app - n 1))) <-))\n  (env (())))\""
  62
  43
  15
  4
  43
  15
  58
  1
  1
  25
  #f
  61/43
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  0
  15
  23
  app
  "\"'(eval (app (-> (app blur id) <-) (app #t)) (env (())))\""
  63
  44
  15
  4
  44
  15
  59
  1
  1
  25
  #f
  63/44
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  0
  15
  23
  app
  "\"'(eval (match (app <= n 1) (#f) (_ (-> (app id a) <-))) (env (())))\""
  63
  44
  15
  4
  44
  15
  59
  1
  1
  25
  #f
  63/44
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  0
  15
  23
  ref-or-constructor
  "\"'(eval (app id (-> a <-)) (env (())))\""
  63
  44
  15
  4
  44
  15
  59
  1
  1
  25
  #f
  63/44
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  0
  15
  23
  let*
  "\"'(eval (match (app <= n 1) ((#f) (-> (let* (r ... s) ...) <-)) _) (env (())))\""
  63
  44
  15
  4
  44
  15
  59
  1
  1
  25
  #f
  63/44
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  0
  15
  23
  match
  "\"'(eval (λ (a n) (-> (match (app <= n 1) ...) <-)) (env (())))\""
  63
  44
  15
  4
  44
  15
  59
  1
  1
  25
  #f
  63/44
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  0
  15
  23
  app
  "\"'(eval\n  (let* (... r (s (-> (app (app blur id) (app #f)) <-)) () ...) ...)\n  (env (())))\""
  63
  44
  15
  4
  44
  15
  59
  1
  1
  25
  #f
  63/44
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  0
  15
  23
  app
  "\"'(eval\n  (let* (... () (r (-> (app (app blur id) (app #t)) <-)) s ...) ...)\n  (env (())))\""
  64
  45
  15
  4
  45
  15
  60
  1
  1
  25
  #f
  13/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  0
  15
  23
  ref-or-constructor
  "\"'(eval (app - (-> n <-) 1) (env (())))\""
  64
  45
  15
  4
  45
  15
  60
  1
  1
  25
  #f
  13/9
  ((0 0 0) (0 0 0) (0 0 0)))
