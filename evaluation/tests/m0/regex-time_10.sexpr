'(regex 0 5000 409 179 4204/409 ((2922 2922 29) (2919 2920 29) (2954 2954 31)))
'(regex 0 5000 409 108 4204/409 ((786 786 2) (833 833 3) (809 809 3)))
'(clean-cache
  regex
  0
  364
  lettypes
  "\"'(eval ((top) lettypes (cons ... nil) ...) (env ()))\""
  #f)
'(clean-cache
  regex
  0
  364
  letrec*
  "\"'(eval (lettypes cons ... nil (letrec* (car ... check-expect) ...)) (env ()))\""
  #f)
'(clean-cache
  regex
  0
  364
  app
  "\"'(eval (λ (check expect) (-> (app equal? check expect) <-)) (env (())))\""
  #f)
'(clean-cache
  regex
  0
  10
  364
  ref-or-constructor
  "\"'(eval (app equal? check (-> expect <-)) (env (())))\""
  5
  3
  2
  0
  3
  2
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  364
  ref-or-constructor
  "\"'(eval (app equal? (-> check <-) expect) (env (())))\""
  #f)
'(clean-cache
  regex
  0
  10
  364
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) check expect) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  364
  match
  "\"'(eval (λ (pattern data) (-> (match (app null? data) ...) <-)) (env (())))\""
  #f)
'(clean-cache
  regex
  0
  364
  app
  "\"'(eval\n  (match\n   (app null? data)\n   (#f)\n   (_ (-> (app regex-empty? (app regex-empty pattern)) <-)))\n  (env (())))\""
  #f)
'(clean-cache
  regex
  0
  364
  app
  "\"'(eval (app regex-empty? (-> (app regex-empty pattern) <-)) (env (())))\""
  #f)
'(clean-cache
  regex
  0
  364
  ref-or-constructor
  "\"'(eval (app regex-empty (-> pattern <-)) (env (())))\""
  #f)
'(clean-cache
  regex
  0
  10
  364
  ref-or-constructor
  "\"'(eval (app (-> regex-empty <-) pattern) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  10
  364
  ref-or-constructor
  "\"'(eval (app (-> regex-empty? <-) (app regex-empty pattern)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  364
  app
  "\"'(eval\n  (match\n   (app null? data)\n   ((#f)\n    (->\n     (app\n      regex-match\n      (app regex-derivative pattern (app car data))\n      (app cdr data))\n     <-))\n   _)\n  (env (())))\""
  #f)
'(clean-cache
  regex
  0
  364
  app
  "\"'(eval\n  (app\n   regex-match\n   (app regex-derivative pattern (app car data))\n   (-> (app cdr data) <-))\n  (env (())))\""
  #f)
'(clean-cache
  regex
  0
  364
  ref-or-constructor
  "\"'(eval (app cdr (-> data <-)) (env (())))\""
  #f)
'(clean-cache
  regex
  0
  10
  364
  ref-or-constructor
  "\"'(eval (app (-> cdr <-) data) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  364
  app
  "\"'(eval\n  (app\n   regex-match\n   (-> (app regex-derivative pattern (app car data)) <-)\n   (app cdr data))\n  (env (())))\""
  #f)
'(clean-cache
  regex
  0
  364
  app
  "\"'(eval (app regex-derivative pattern (-> (app car data) <-)) (env (())))\""
  #f)
'(clean-cache
  regex
  0
  364
  ref-or-constructor
  "\"'(eval (app car (-> data <-)) (env (())))\""
  #f)
'(clean-cache
  regex
  0
  10
  364
  ref-or-constructor
  "\"'(eval (app (-> car <-) data) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  364
  ref-or-constructor
  "\"'(eval (app regex-derivative (-> pattern <-) (app car data)) (env (())))\""
  #f)
'(clean-cache
  regex
  0
  10
  364
  ref-or-constructor
  "\"'(eval (app (-> regex-derivative <-) pattern (app car data)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  10
  364
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> regex-match <-)\n   (app regex-derivative pattern (app car data))\n   (app cdr data))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  364
  app
  "\"'(eval (match (-> (app null? data) <-) (#f) _) (env (())))\""
  #f)
'(clean-cache
  regex
  0
  364
  ref-or-constructor
  "\"'(eval (app null? (-> data <-)) (env (())))\""
  #f)
'(clean-cache
  regex
  0
  10
  364
  ref-or-constructor
  "\"'(eval (app (-> null? <-) data) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  364
  let
  "\"'(eval (λ (re c) (-> (let (_) ...) <-)) (env (())))\""
  #f)
'(clean-cache
  regex
  0
  10
  364
  app
  "\"'(eval (let (... () (_ (-> (app debug-trace) <-)) () ...) ...) (env (())))\""
  5
  4
  0
  1
  4
  0
  4
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  10
  364
  ref-or-constructor
  "\"'(eval (app (-> debug-trace <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  364
  match
  "\"'(eval (let (_) (-> (match (app regex-empty? re) ...) <-)) (env (())))\""
  #f)
'(clean-cache
  regex
  0
  10
  364
  ref-or-constructor
  "\"'(eval (match (app regex-empty? re) (#f) (_ (-> regex-NULL <-))) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  364
  match
  "\"'(eval\n  (match\n   (app regex-empty? re)\n   ((#f) (-> (match (app regex-null? re) ...) <-))\n   _)\n  (env (())))\""
  #f)
'(clean-cache
  regex
  0
  10
  364
  ref-or-constructor
  "\"'(eval (match (app regex-null? re) (#f) (_ (-> regex-NULL <-))) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  364
  match
  "\"'(eval\n  (match (app regex-null? re) ((#f) (-> (match (app eq? c re) ...) <-)) _)\n  (env (())))\""
  #f)
'(clean-cache
  regex
  0
  10
  364
  ref-or-constructor
  "\"'(eval (match (app eq? c re) (#f) (_ (-> regex-BLANK <-))) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  364
  match
  "\"'(eval\n  (match (app eq? c re) ((#f) (-> (match (app regex-atom? re) ...) <-)) _)\n  (env (())))\""
  #f)
'(clean-cache
  regex
  0
  10
  364
  ref-or-constructor
  "\"'(eval (match (app regex-atom? re) (#f) (_ (-> regex-NULL <-))) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  364
  match
  "\"'(eval\n  (match\n   (app regex-atom? re)\n   ((#f) (-> (match (app match-seq re (λ (pat1 pat2) ...)) ...) <-))\n   _)\n  (env (())))\""
  #f)
'(clean-cache
  regex
  0
  364
  ref-or-constructor
  "\"'(eval\n  (match (app match-seq re (λ (pat1 pat2) ...)) (#f) (c-x (-> c-x <-)))\n  (env (())))\""
  #f)
'(clean-cache
  regex
  0
  364
  match
  "\"'(eval\n  (match\n   (app match-seq re (λ (pat1 pat2) ...))\n   ((#f) (-> (match (app match-alt re (λ (pat1 pat2) ...)) ...) <-))\n   c-x)\n  (env (())))\""
  #f)
'(clean-cache
  regex
  0
  364
  ref-or-constructor
  "\"'(eval\n  (match (app match-alt re (λ (pat1 pat2) ...)) (#f) (c-x (-> c-x <-)))\n  (env (())))\""
  #f)
'(clean-cache
  regex
  0
  364
  match
  "\"'(eval\n  (match\n   (app match-alt re (λ (pat1 pat2) ...))\n   ((#f) (-> (match (app match-rep re (λ (pat) ...)) ...) <-))\n   c-x)\n  (env (())))\""
  #f)
'(clean-cache
  regex
  0
  364
  ref-or-constructor
  "\"'(eval\n  (match (app match-rep re (λ (pat) ...)) (#f) (c-x (-> c-x <-)))\n  (env (())))\""
  #f)
'(clean-cache
  regex
  0
  10
  364
  ref-or-constructor
  "\"'(eval\n  (match (app match-rep re (λ (pat) ...)) ((#f) (-> regex-NULL <-)) c-x)\n  (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  364
  app
  "\"'(eval (match (-> (app match-rep re (λ (pat) ...)) <-) (#f) c-x) (env (())))\""
  #f)
'(clean-cache
  regex
  0
  364
  app
  "\"'(eval\n  (λ (pat) (-> (app seq (app regex-derivative pat c) (app rep pat)) <-))\n  (env (() ())))\""
  #f)
'(clean-cache
  regex
  0
  364
  app
  "\"'(eval\n  (app seq (app regex-derivative pat c) (-> (app rep pat) <-))\n  (env (() ())))\""
  #f)
'(clean-cache
  regex
  0
  364
  ref-or-constructor
  "\"'(eval (app rep (-> pat <-)) (env (() ())))\""
  #f)
'(clean-cache
  regex
  0
  10
  364
  ref-or-constructor
  "\"'(eval (app (-> rep <-) pat) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  364
  app
  "\"'(eval\n  (app seq (-> (app regex-derivative pat c) <-) (app rep pat))\n  (env (() ())))\""
  #f)
'(clean-cache
  regex
  0
  364
  ref-or-constructor
  "\"'(eval (app regex-derivative pat (-> c <-)) (env (() ())))\""
  #f)
'(clean-cache
  regex
  0
  364
  ref-or-constructor
  "\"'(eval (app regex-derivative (-> pat <-) c) (env (() ())))\""
  #f)
'(clean-cache
  regex
  0
  10
  364
  ref-or-constructor
  "\"'(eval (app (-> regex-derivative <-) pat c) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  10
  364
  ref-or-constructor
  "\"'(eval\n  (app (-> seq <-) (app regex-derivative pat c) (app rep pat))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  364
  ref-or-constructor
  "\"'(eval (app match-rep (-> re <-) (λ (pat) ...)) (env (())))\""
  #f)
'(clean-cache
  regex
  0
  10
  364
  ref-or-constructor
  "\"'(eval (app (-> match-rep <-) re (λ (pat) ...)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  364
  app
  "\"'(eval\n  (match (-> (app match-alt re (λ (pat1 pat2) ...)) <-) (#f) c-x)\n  (env (())))\""
  #f)
'(clean-cache
  regex
  0
  364
  app
  "\"'(eval\n  (λ (pat1 pat2)\n    (->\n     (app alt (app regex-derivative pat1 c) (app regex-derivative pat2 c))\n     <-))\n  (env (() ())))\""
  #f)
'(clean-cache
  regex
  0
  364
  app
  "\"'(eval\n  (app alt (app regex-derivative pat1 c) (-> (app regex-derivative pat2 c) <-))\n  (env (() ())))\""
  #f)
'(clean-cache
  regex
  0
  364
  ref-or-constructor
  "\"'(eval (app regex-derivative pat2 (-> c <-)) (env (() ())))\""
  #f)
'(clean-cache
  regex
  0
  364
  ref-or-constructor
  "\"'(eval (app regex-derivative (-> pat2 <-) c) (env (() ())))\""
  #f)
'(clean-cache
  regex
  0
  10
  364
  ref-or-constructor
  "\"'(eval (app (-> regex-derivative <-) pat2 c) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  364
  app
  "\"'(eval\n  (app alt (-> (app regex-derivative pat1 c) <-) (app regex-derivative pat2 c))\n  (env (() ())))\""
  #f)
'(clean-cache
  regex
  0
  364
  ref-or-constructor
  "\"'(eval (app regex-derivative pat1 (-> c <-)) (env (() ())))\""
  #f)
'(clean-cache
  regex
  0
  364
  ref-or-constructor
  "\"'(eval (app regex-derivative (-> pat1 <-) c) (env (() ())))\""
  #f)
'(clean-cache
  regex
  0
  10
  364
  ref-or-constructor
  "\"'(eval (app (-> regex-derivative <-) pat1 c) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  10
  364
  ref-or-constructor
  "\"'(eval\n  (app (-> alt <-) (app regex-derivative pat1 c) (app regex-derivative pat2 c))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  364
  ref-or-constructor
  "\"'(eval (app match-alt (-> re <-) (λ (pat1 pat2) ...)) (env (())))\""
  #f)
'(clean-cache
  regex
  0
  10
  364
  ref-or-constructor
  "\"'(eval (app (-> match-alt <-) re (λ (pat1 pat2) ...)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  364
  app
  "\"'(eval\n  (match (-> (app match-seq re (λ (pat1 pat2) ...)) <-) (#f) c-x)\n  (env (())))\""
  #f)
'(clean-cache
  regex
  0
  364
  app
  "\"'(eval\n  (λ (pat1 pat2)\n    (->\n     (app\n      alt\n      (app seq (app regex-derivative pat1 c) pat2)\n      (app seq (app regex-empty pat1) (app regex-derivative pat2 c)))\n     <-))\n  (env (() ())))\""
  #f)
'(clean-cache
  regex
  0
  364
  app
  "\"'(eval\n  (app\n   alt\n   (app seq (app regex-derivative pat1 c) pat2)\n   (-> (app seq (app regex-empty pat1) (app regex-derivative pat2 c)) <-))\n  (env (() ())))\""
  #f)
'(clean-cache
  regex
  0
  364
  app
  "\"'(eval\n  (app seq (app regex-empty pat1) (-> (app regex-derivative pat2 c) <-))\n  (env (() ())))\""
  #f)
'(clean-cache
  regex
  0
  364
  ref-or-constructor
  "\"'(eval (app regex-derivative pat2 (-> c <-)) (env (() ())))\""
  #f)
'(clean-cache
  regex
  0
  364
  ref-or-constructor
  "\"'(eval (app regex-derivative (-> pat2 <-) c) (env (() ())))\""
  #f)
'(clean-cache
  regex
  0
  10
  364
  ref-or-constructor
  "\"'(eval (app (-> regex-derivative <-) pat2 c) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  364
  app
  "\"'(eval\n  (app seq (-> (app regex-empty pat1) <-) (app regex-derivative pat2 c))\n  (env (() ())))\""
  #f)
'(clean-cache
  regex
  0
  364
  ref-or-constructor
  "\"'(eval (app regex-empty (-> pat1 <-)) (env (() ())))\""
  #f)
'(clean-cache
  regex
  0
  10
  364
  ref-or-constructor
  "\"'(eval (app (-> regex-empty <-) pat1) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  10
  364
  ref-or-constructor
  "\"'(eval\n  (app (-> seq <-) (app regex-empty pat1) (app regex-derivative pat2 c))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  364
  app
  "\"'(eval\n  (app\n   alt\n   (-> (app seq (app regex-derivative pat1 c) pat2) <-)\n   (app seq (app regex-empty pat1) (app regex-derivative pat2 c)))\n  (env (() ())))\""
  #f)
'(clean-cache
  regex
  0
  364
  ref-or-constructor
  "\"'(eval (app seq (app regex-derivative pat1 c) (-> pat2 <-)) (env (() ())))\""
  #f)
'(clean-cache
  regex
  0
  364
  app
  "\"'(eval (app seq (-> (app regex-derivative pat1 c) <-) pat2) (env (() ())))\""
  #f)
'(clean-cache
  regex
  0
  364
  ref-or-constructor
  "\"'(eval (app regex-derivative pat1 (-> c <-)) (env (() ())))\""
  #f)
'(clean-cache
  regex
  0
  364
  ref-or-constructor
  "\"'(eval (app regex-derivative (-> pat1 <-) c) (env (() ())))\""
  #f)
'(clean-cache
  regex
  0
  10
  364
  ref-or-constructor
  "\"'(eval (app (-> regex-derivative <-) pat1 c) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  10
  364
  ref-or-constructor
  "\"'(eval (app (-> seq <-) (app regex-derivative pat1 c) pat2) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  10
  364
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> alt <-)\n   (app seq (app regex-derivative pat1 c) pat2)\n   (app seq (app regex-empty pat1) (app regex-derivative pat2 c)))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  364
  ref-or-constructor
  "\"'(eval (app match-seq (-> re <-) (λ (pat1 pat2) ...)) (env (())))\""
  #f)
'(clean-cache
  regex
  0
  10
  364
  ref-or-constructor
  "\"'(eval (app (-> match-seq <-) re (λ (pat1 pat2) ...)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  364
  app
  "\"'(eval (match (-> (app regex-atom? re) <-) (#f) _) (env (())))\""
  #f)
'(clean-cache
  regex
  0
  364
  ref-or-constructor
  "\"'(eval (app regex-atom? (-> re <-)) (env (())))\""
  #f)
'(clean-cache
  regex
  0
  10
  364
  ref-or-constructor
  "\"'(eval (app (-> regex-atom? <-) re) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  364
  app
  "\"'(eval (match (-> (app eq? c re) <-) (#f) _) (env (())))\""
  #f)
'(clean-cache
  regex
  0
  364
  ref-or-constructor
  "\"'(eval (app eq? c (-> re <-)) (env (())))\""
  #f)
'(clean-cache
  regex
  0
  364
  ref-or-constructor
  "\"'(eval (app eq? (-> c <-) re) (env (())))\""
  #f)
'(clean-cache
  regex
  0
  10
  364
  ref-or-constructor
  "\"'(eval (app (-> eq? <-) c re) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  364
  app
  "\"'(eval (match (-> (app regex-null? re) <-) (#f) _) (env (())))\""
  #f)
'(clean-cache
  regex
  0
  364
  ref-or-constructor
  "\"'(eval (app regex-null? (-> re <-)) (env (())))\""
  #f)
'(clean-cache
  regex
  0
  10
  364
  ref-or-constructor
  "\"'(eval (app (-> regex-null? <-) re) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  364
  app
  "\"'(eval (match (-> (app regex-empty? re) <-) (#f) _) (env (())))\""
  #f)
'(clean-cache
  regex
  0
  364
  ref-or-constructor
  "\"'(eval (app regex-empty? (-> re <-)) (env (())))\""
  #f)
'(clean-cache
  regex
  0
  10
  364
  ref-or-constructor
  "\"'(eval (app (-> regex-empty? <-) re) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  364
  match
  "\"'(eval (λ (re) (-> (match (app regex-empty? re) ...) <-)) (env (())))\""
  #f)
'(clean-cache
  regex
  0
  10
  364
  app
  "\"'(eval (match (app regex-empty? re) (#f) (_ (-> (app #t) <-))) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  364
  match
  "\"'(eval\n  (match\n   (app regex-empty? re)\n   ((#f) (-> (match (app regex-null? re) ...) <-))\n   _)\n  (env (())))\""
  #f)
'(clean-cache
  regex
  0
  10
  364
  app
  "\"'(eval (match (app regex-null? re) (#f) (_ (-> (app #f) <-))) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  364
  match
  "\"'(eval\n  (match\n   (app regex-null? re)\n   ((#f) (-> (match (app regex-atom? re) ...) <-))\n   _)\n  (env (())))\""
  #f)
'(clean-cache
  regex
  0
  10
  364
  app
  "\"'(eval (match (app regex-atom? re) (#f) (_ (-> (app #f) <-))) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  364
  match
  "\"'(eval\n  (match\n   (app regex-atom? re)\n   ((#f) (-> (match (app match-seq re (λ (pat1 pat2) ...)) ...) <-))\n   _)\n  (env (())))\""
  #f)
'(clean-cache
  regex
  0
  364
  ref-or-constructor
  "\"'(eval\n  (match (app match-seq re (λ (pat1 pat2) ...)) (#f) (c-x (-> c-x <-)))\n  (env (())))\""
  #f)
'(clean-cache
  regex
  0
  364
  match
  "\"'(eval\n  (match\n   (app match-seq re (λ (pat1 pat2) ...))\n   ((#f) (-> (match (app match-alt re (λ (pat1 pat2) ...)) ...) <-))\n   c-x)\n  (env (())))\""
  #f)
'(clean-cache
  regex
  0
  364
  ref-or-constructor
  "\"'(eval\n  (match (app match-alt re (λ (pat1 pat2) ...)) (#f) (c-x (-> c-x <-)))\n  (env (())))\""
  #f)
'(clean-cache
  regex
  0
  364
  match
  "\"'(eval\n  (match\n   (app match-alt re (λ (pat1 pat2) ...))\n   ((#f) (-> (match (app regex-rep? re) ...) <-))\n   c-x)\n  (env (())))\""
  #f)
'(clean-cache
  regex
  0
  10
  364
  app
  "\"'(eval (match (app regex-rep? re) (#f) (_ (-> (app #t) <-))) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  10
  364
  app
  "\"'(eval (match (app regex-rep? re) ((#f) (-> (app #f) <-)) _) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  364
  app
  "\"'(eval (match (-> (app regex-rep? re) <-) (#f) _) (env (())))\""
  #f)
'(clean-cache
  regex
  0
  364
  ref-or-constructor
  "\"'(eval (app regex-rep? (-> re <-)) (env (())))\""
  #f)
'(clean-cache
  regex
  0
  10
  364
  ref-or-constructor
  "\"'(eval (app (-> regex-rep? <-) re) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  364
  app
  "\"'(eval\n  (match (-> (app match-alt re (λ (pat1 pat2) ...)) <-) (#f) c-x)\n  (env (())))\""
  #f)
'(clean-cache
  regex
  0
  364
  app
  "\"'(eval\n  (λ (pat1 pat2)\n    (-> (app alt (app regex-empty pat1) (app regex-empty pat2)) <-))\n  (env (() ())))\""
  #f)
'(clean-cache
  regex
  0
  364
  app
  "\"'(eval\n  (app alt (app regex-empty pat1) (-> (app regex-empty pat2) <-))\n  (env (() ())))\""
  #f)
'(clean-cache
  regex
  0
  364
  ref-or-constructor
  "\"'(eval (app regex-empty (-> pat2 <-)) (env (() ())))\""
  #f)
'(clean-cache
  regex
  0
  10
  364
  ref-or-constructor
  "\"'(eval (app (-> regex-empty <-) pat2) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  364
  app
  "\"'(eval\n  (app alt (-> (app regex-empty pat1) <-) (app regex-empty pat2))\n  (env (() ())))\""
  #f)
'(clean-cache
  regex
  0
  364
  ref-or-constructor
  "\"'(eval (app regex-empty (-> pat1 <-)) (env (() ())))\""
  #f)
'(clean-cache
  regex
  0
  10
  364
  ref-or-constructor
  "\"'(eval (app (-> regex-empty <-) pat1) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  10
  364
  ref-or-constructor
  "\"'(eval\n  (app (-> alt <-) (app regex-empty pat1) (app regex-empty pat2))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  364
  ref-or-constructor
  "\"'(eval (app match-alt (-> re <-) (λ (pat1 pat2) ...)) (env (())))\""
  #f)
'(clean-cache
  regex
  0
  10
  364
  ref-or-constructor
  "\"'(eval (app (-> match-alt <-) re (λ (pat1 pat2) ...)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  364
  app
  "\"'(eval\n  (match (-> (app match-seq re (λ (pat1 pat2) ...)) <-) (#f) c-x)\n  (env (())))\""
  #f)
'(clean-cache
  regex
  0
  364
  app
  "\"'(eval\n  (λ (pat1 pat2)\n    (-> (app seq (app regex-empty pat1) (app regex-empty pat2)) <-))\n  (env (() ())))\""
  #f)
'(clean-cache
  regex
  0
  364
  app
  "\"'(eval\n  (app seq (app regex-empty pat1) (-> (app regex-empty pat2) <-))\n  (env (() ())))\""
  #f)
'(clean-cache
  regex
  0
  364
  ref-or-constructor
  "\"'(eval (app regex-empty (-> pat2 <-)) (env (() ())))\""
  #f)
'(clean-cache
  regex
  0
  10
  364
  ref-or-constructor
  "\"'(eval (app (-> regex-empty <-) pat2) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  364
  app
  "\"'(eval\n  (app seq (-> (app regex-empty pat1) <-) (app regex-empty pat2))\n  (env (() ())))\""
  #f)
'(clean-cache
  regex
  0
  364
  ref-or-constructor
  "\"'(eval (app regex-empty (-> pat1 <-)) (env (() ())))\""
  #f)
'(clean-cache
  regex
  0
  10
  364
  ref-or-constructor
  "\"'(eval (app (-> regex-empty <-) pat1) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  10
  364
  ref-or-constructor
  "\"'(eval\n  (app (-> seq <-) (app regex-empty pat1) (app regex-empty pat2))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  364
  ref-or-constructor
  "\"'(eval (app match-seq (-> re <-) (λ (pat1 pat2) ...)) (env (())))\""
  #f)
'(clean-cache
  regex
  0
  10
  364
  ref-or-constructor
  "\"'(eval (app (-> match-seq <-) re (λ (pat1 pat2) ...)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  364
  app
  "\"'(eval (match (-> (app regex-atom? re) <-) (#f) _) (env (())))\""
  #f)
'(clean-cache
  regex
  0
  364
  ref-or-constructor
  "\"'(eval (app regex-atom? (-> re <-)) (env (())))\""
  #f)
'(clean-cache
  regex
  0
  10
  364
  ref-or-constructor
  "\"'(eval (app (-> regex-atom? <-) re) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  364
  app
  "\"'(eval (match (-> (app regex-null? re) <-) (#f) _) (env (())))\""
  #f)
'(clean-cache
  regex
  0
  364
  ref-or-constructor
  "\"'(eval (app regex-null? (-> re <-)) (env (())))\""
  #f)
'(clean-cache
  regex
  0
  10
  364
  ref-or-constructor
  "\"'(eval (app (-> regex-null? <-) re) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  364
  app
  "\"'(eval (match (-> (app regex-empty? re) <-) (#f) _) (env (())))\""
  #f)
'(clean-cache
  regex
  0
  364
  ref-or-constructor
  "\"'(eval (app regex-empty? (-> re <-)) (env (())))\""
  #f)
'(clean-cache
  regex
  0
  10
  364
  ref-or-constructor
  "\"'(eval (app (-> regex-empty? <-) re) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  364
  match
  "\"'(eval (λ (pat) (-> (match (app regex-null? pat) ...) <-)) (env (())))\""
  #f)
'(clean-cache
  regex
  0
  10
  364
  ref-or-constructor
  "\"'(eval (match (app regex-null? pat) (#f) (_ (-> regex-BLANK <-))) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  364
  match
  "\"'(eval\n  (match\n   (app regex-null? pat)\n   ((#f) (-> (match (app regex-empty? pat) ...) <-))\n   _)\n  (env (())))\""
  #f)
'(clean-cache
  regex
  0
  10
  364
  ref-or-constructor
  "\"'(eval (match (app regex-empty? pat) (#f) (_ (-> regex-BLANK <-))) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  10
  364
  app
  "\"'(eval\n  (match\n   (app regex-empty? pat)\n   ((#f) (-> (app cons 'rep (app cons pat (app nil))) <-))\n   _)\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  10
  364
  app
  "\"'(eval (app cons 'rep (-> (app cons pat (app nil)) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  10
  364
  app
  "\"'(eval (app cons pat (-> (app nil) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  10
  364
  ref-or-constructor
  "\"'(eval (app (-> nil <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  364
  ref-or-constructor
  "\"'(eval (app cons (-> pat <-) (app nil)) (env (())))\""
  #f)
'(clean-cache
  regex
  0
  10
  364
  ref-or-constructor
  "\"'(eval (app (-> cons <-) pat (app nil)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  10
  364
  ref-or-constructor
  "\"'(eval (app (-> cons <-) 'rep (app cons pat (app nil))) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  364
  app
  "\"'(eval (match (-> (app regex-empty? pat) <-) (#f) _) (env (())))\""
  #f)
'(clean-cache
  regex
  0
  364
  ref-or-constructor
  "\"'(eval (app regex-empty? (-> pat <-)) (env (())))\""
  #f)
'(clean-cache
  regex
  0
  10
  364
  ref-or-constructor
  "\"'(eval (app (-> regex-empty? <-) pat) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  364
  app
  "\"'(eval (match (-> (app regex-null? pat) <-) (#f) _) (env (())))\""
  #f)
'(clean-cache
  regex
  0
  364
  ref-or-constructor
  "\"'(eval (app regex-null? (-> pat <-)) (env (())))\""
  #f)
'(clean-cache
  regex
  0
  10
  364
  ref-or-constructor
  "\"'(eval (app (-> regex-null? <-) pat) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  364
  match
  "\"'(eval (λ (pat1 pat2) (-> (match (app regex-null? pat1) ...) <-)) (env (())))\""
  #f)
'(clean-cache
  regex
  0
  364
  ref-or-constructor
  "\"'(eval (match (app regex-null? pat1) (#f) (_ (-> pat2 <-))) (env (())))\""
  #f)
'(clean-cache
  regex
  0
  364
  match
  "\"'(eval\n  (match\n   (app regex-null? pat1)\n   ((#f) (-> (match (app regex-null? pat2) ...) <-))\n   _)\n  (env (())))\""
  #f)
'(clean-cache
  regex
  0
  364
  ref-or-constructor
  "\"'(eval (match (app regex-null? pat2) (#f) (_ (-> pat1 <-))) (env (())))\""
  #f)
'(clean-cache
  regex
  0
  10
  364
  app
  "\"'(eval\n  (match\n   (app regex-null? pat2)\n   ((#f) (-> (app cons 'alt (app cons pat1 (app cons pat2 (app nil)))) <-))\n   _)\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  10
  364
  app
  "\"'(eval\n  (app cons 'alt (-> (app cons pat1 (app cons pat2 (app nil))) <-))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  10
  364
  app
  "\"'(eval (app cons pat1 (-> (app cons pat2 (app nil)) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  10
  364
  app
  "\"'(eval (app cons pat2 (-> (app nil) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  10
  364
  ref-or-constructor
  "\"'(eval (app (-> nil <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  364
  ref-or-constructor
  "\"'(eval (app cons (-> pat2 <-) (app nil)) (env (())))\""
  #f)
'(clean-cache
  regex
  0
  10
  364
  ref-or-constructor
  "\"'(eval (app (-> cons <-) pat2 (app nil)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  364
  ref-or-constructor
  "\"'(eval (app cons (-> pat1 <-) (app cons pat2 (app nil))) (env (())))\""
  #f)
'(clean-cache
  regex
  0
  10
  364
  ref-or-constructor
  "\"'(eval (app (-> cons <-) pat1 (app cons pat2 (app nil))) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  10
  364
  ref-or-constructor
  "\"'(eval\n  (app (-> cons <-) 'alt (app cons pat1 (app cons pat2 (app nil))))\n  (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  364
  app
  "\"'(eval (match (-> (app regex-null? pat2) <-) (#f) _) (env (())))\""
  #f)
'(clean-cache
  regex
  0
  364
  ref-or-constructor
  "\"'(eval (app regex-null? (-> pat2 <-)) (env (())))\""
  #f)
'(clean-cache
  regex
  0
  10
  364
  ref-or-constructor
  "\"'(eval (app (-> regex-null? <-) pat2) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  364
  app
  "\"'(eval (match (-> (app regex-null? pat1) <-) (#f) _) (env (())))\""
  #f)
'(clean-cache
  regex
  0
  364
  ref-or-constructor
  "\"'(eval (app regex-null? (-> pat1 <-)) (env (())))\""
  #f)
'(clean-cache
  regex
  0
  10
  364
  ref-or-constructor
  "\"'(eval (app (-> regex-null? <-) pat1) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  364
  match
  "\"'(eval (λ (pat1 pat2) (-> (match (app regex-null? pat1) ...) <-)) (env (())))\""
  #f)
'(clean-cache
  regex
  0
  10
  364
  ref-or-constructor
  "\"'(eval (match (app regex-null? pat1) (#f) (_ (-> regex-NULL <-))) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  364
  match
  "\"'(eval\n  (match\n   (app regex-null? pat1)\n   ((#f) (-> (match (app regex-null? pat2) ...) <-))\n   _)\n  (env (())))\""
  #f)
'(clean-cache
  regex
  0
  10
  364
  ref-or-constructor
  "\"'(eval (match (app regex-null? pat2) (#f) (_ (-> regex-NULL <-))) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  364
  match
  "\"'(eval\n  (match\n   (app regex-null? pat2)\n   ((#f) (-> (match (app regex-empty? pat1) ...) <-))\n   _)\n  (env (())))\""
  #f)
'(clean-cache
  regex
  0
  364
  ref-or-constructor
  "\"'(eval (match (app regex-empty? pat1) (#f) (_ (-> pat2 <-))) (env (())))\""
  #f)
'(clean-cache
  regex
  0
  364
  match
  "\"'(eval\n  (match\n   (app regex-empty? pat1)\n   ((#f) (-> (match (app regex-empty? pat2) ...) <-))\n   _)\n  (env (())))\""
  #f)
'(clean-cache
  regex
  0
  364
  ref-or-constructor
  "\"'(eval (match (app regex-empty? pat2) (#f) (_ (-> pat1 <-))) (env (())))\""
  #f)
'(clean-cache
  regex
  0
  10
  364
  app
  "\"'(eval\n  (match\n   (app regex-empty? pat2)\n   ((#f) (-> (app cons 'seq (app cons pat1 (app cons pat2 (app nil)))) <-))\n   _)\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  10
  364
  app
  "\"'(eval\n  (app cons 'seq (-> (app cons pat1 (app cons pat2 (app nil))) <-))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  10
  364
  app
  "\"'(eval (app cons pat1 (-> (app cons pat2 (app nil)) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  10
  364
  app
  "\"'(eval (app cons pat2 (-> (app nil) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  10
  364
  ref-or-constructor
  "\"'(eval (app (-> nil <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  364
  ref-or-constructor
  "\"'(eval (app cons (-> pat2 <-) (app nil)) (env (())))\""
  #f)
'(clean-cache
  regex
  0
  10
  364
  ref-or-constructor
  "\"'(eval (app (-> cons <-) pat2 (app nil)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  364
  ref-or-constructor
  "\"'(eval (app cons (-> pat1 <-) (app cons pat2 (app nil))) (env (())))\""
  #f)
'(clean-cache
  regex
  0
  10
  364
  ref-or-constructor
  "\"'(eval (app (-> cons <-) pat1 (app cons pat2 (app nil))) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  10
  364
  ref-or-constructor
  "\"'(eval\n  (app (-> cons <-) 'seq (app cons pat1 (app cons pat2 (app nil))))\n  (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  364
  app
  "\"'(eval (match (-> (app regex-empty? pat2) <-) (#f) _) (env (())))\""
  #f)
'(clean-cache
  regex
  0
  364
  ref-or-constructor
  "\"'(eval (app regex-empty? (-> pat2 <-)) (env (())))\""
  #f)
'(clean-cache
  regex
  0
  10
  364
  ref-or-constructor
  "\"'(eval (app (-> regex-empty? <-) pat2) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  364
  app
  "\"'(eval (match (-> (app regex-empty? pat1) <-) (#f) _) (env (())))\""
  #f)
'(clean-cache
  regex
  0
  364
  ref-or-constructor
  "\"'(eval (app regex-empty? (-> pat1 <-)) (env (())))\""
  #f)
'(clean-cache
  regex
  0
  10
  364
  ref-or-constructor
  "\"'(eval (app (-> regex-empty? <-) pat1) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  364
  app
  "\"'(eval (match (-> (app regex-null? pat2) <-) (#f) _) (env (())))\""
  #f)
'(clean-cache
  regex
  0
  364
  ref-or-constructor
  "\"'(eval (app regex-null? (-> pat2 <-)) (env (())))\""
  #f)
'(clean-cache
  regex
  0
  10
  364
  ref-or-constructor
  "\"'(eval (app (-> regex-null? <-) pat2) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  364
  app
  "\"'(eval (match (-> (app regex-null? pat1) <-) (#f) _) (env (())))\""
  #f)
'(clean-cache
  regex
  0
  364
  ref-or-constructor
  "\"'(eval (app regex-null? (-> pat1 <-)) (env (())))\""
  #f)
'(clean-cache
  regex
  0
  10
  364
  ref-or-constructor
  "\"'(eval (app (-> regex-null? <-) pat1) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  364
  app
  "\"'(eval\n  (λ (re f) (-> (app and (app regex-rep? re) (app f (app cadr re))) <-))\n  (env (())))\""
  #f)
'(clean-cache
  regex
  0
  364
  app
  "\"'(eval (app and (app regex-rep? re) (-> (app f (app cadr re)) <-)) (env (())))\""
  #f)
'(clean-cache
  regex
  0
  364
  app
  "\"'(eval (app f (-> (app cadr re) <-)) (env (())))\""
  #f)
'(clean-cache
  regex
  0
  364
  ref-or-constructor
  "\"'(eval (app cadr (-> re <-)) (env (())))\""
  #f)
'(clean-cache
  regex
  0
  10
  364
  ref-or-constructor
  "\"'(eval (app (-> cadr <-) re) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  10
  364
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app cadr re)) (env (())))\""
  4
  2
  2
  0
  2
  2
  4
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  364
  app
  "\"'(eval (app and (-> (app regex-rep? re) <-) (app f (app cadr re))) (env (())))\""
  #f)
'(clean-cache
  regex
  0
  364
  ref-or-constructor
  "\"'(eval (app regex-rep? (-> re <-)) (env (())))\""
  #f)
'(clean-cache
  regex
  0
  10
  364
  ref-or-constructor
  "\"'(eval (app (-> regex-rep? <-) re) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  10
  364
  ref-or-constructor
  "\"'(eval (app (-> and <-) (app regex-rep? re) (app f (app cadr re))) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  364
  app
  "\"'(eval\n  (λ (re f)\n    (-> (app and (app regex-alt? re) (app f (app cadr re) (app caddr re))) <-))\n  (env (())))\""
  #f)
'(clean-cache
  regex
  0
  364
  app
  "\"'(eval\n  (app and (app regex-alt? re) (-> (app f (app cadr re) (app caddr re)) <-))\n  (env (())))\""
  #f)
'(clean-cache
  regex
  0
  364
  app
  "\"'(eval (app f (app cadr re) (-> (app caddr re) <-)) (env (())))\""
  #f)
'(clean-cache
  regex
  0
  364
  ref-or-constructor
  "\"'(eval (app caddr (-> re <-)) (env (())))\""
  #f)
'(clean-cache
  regex
  0
  10
  364
  ref-or-constructor
  "\"'(eval (app (-> caddr <-) re) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  364
  app
  "\"'(eval (app f (-> (app cadr re) <-) (app caddr re)) (env (())))\""
  #f)
'(clean-cache
  regex
  0
  364
  ref-or-constructor
  "\"'(eval (app cadr (-> re <-)) (env (())))\""
  #f)
'(clean-cache
  regex
  0
  10
  364
  ref-or-constructor
  "\"'(eval (app (-> cadr <-) re) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  10
  364
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app cadr re) (app caddr re)) (env (())))\""
  6
  3
  3
  0
  3
  3
  6
  1
  1
  16/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  364
  app
  "\"'(eval\n  (app and (-> (app regex-alt? re) <-) (app f (app cadr re) (app caddr re)))\n  (env (())))\""
  #f)
'(clean-cache
  regex
  0
  364
  ref-or-constructor
  "\"'(eval (app regex-alt? (-> re <-)) (env (())))\""
  #f)
'(clean-cache
  regex
  0
  10
  364
  ref-or-constructor
  "\"'(eval (app (-> regex-alt? <-) re) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  10
  364
  ref-or-constructor
  "\"'(eval\n  (app (-> and <-) (app regex-alt? re) (app f (app cadr re) (app caddr re)))\n  (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  364
  app
  "\"'(eval\n  (λ (re f)\n    (-> (app and (app regex-seq? re) (app f (app cadr re) (app caddr re))) <-))\n  (env (())))\""
  #f)
'(clean-cache
  regex
  0
  364
  app
  "\"'(eval\n  (app and (app regex-seq? re) (-> (app f (app cadr re) (app caddr re)) <-))\n  (env (())))\""
  #f)
'(clean-cache
  regex
  0
  364
  app
  "\"'(eval (app f (app cadr re) (-> (app caddr re) <-)) (env (())))\""
  #f)
'(clean-cache
  regex
  0
  364
  ref-or-constructor
  "\"'(eval (app caddr (-> re <-)) (env (())))\""
  #f)
'(clean-cache
  regex
  0
  10
  364
  ref-or-constructor
  "\"'(eval (app (-> caddr <-) re) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  364
  app
  "\"'(eval (app f (-> (app cadr re) <-) (app caddr re)) (env (())))\""
  #f)
'(clean-cache
  regex
  0
  364
  ref-or-constructor
  "\"'(eval (app cadr (-> re <-)) (env (())))\""
  #f)
'(clean-cache
  regex
  0
  10
  364
  ref-or-constructor
  "\"'(eval (app (-> cadr <-) re) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  10
  364
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app cadr re) (app caddr re)) (env (())))\""
  6
  3
  3
  0
  3
  3
  6
  1
  1
  16/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  364
  app
  "\"'(eval\n  (app and (-> (app regex-seq? re) <-) (app f (app cadr re) (app caddr re)))\n  (env (())))\""
  #f)
'(clean-cache
  regex
  0
  364
  ref-or-constructor
  "\"'(eval (app regex-seq? (-> re <-)) (env (())))\""
  #f)
'(clean-cache
  regex
  0
  10
  364
  ref-or-constructor
  "\"'(eval (app (-> regex-seq? <-) re) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  10
  364
  ref-or-constructor
  "\"'(eval\n  (app (-> and <-) (app regex-seq? re) (app f (app cadr re) (app caddr re)))\n  (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  364
  app
  "\"'(eval (λ (re) (-> (app or (app char? re) (app symbol? re)) <-)) (env (())))\""
  #f)
'(clean-cache
  regex
  0
  364
  app
  "\"'(eval (app or (app char? re) (-> (app symbol? re) <-)) (env (())))\""
  #f)
'(clean-cache
  regex
  0
  364
  ref-or-constructor
  "\"'(eval (app symbol? (-> re <-)) (env (())))\""
  #f)
'(clean-cache
  regex
  0
  10
  364
  ref-or-constructor
  "\"'(eval (app (-> symbol? <-) re) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  364
  app
  "\"'(eval (app or (-> (app char? re) <-) (app symbol? re)) (env (())))\""
  #f)
'(clean-cache
  regex
  0
  364
  ref-or-constructor
  "\"'(eval (app char? (-> re <-)) (env (())))\""
  #f)
'(clean-cache
  regex
  0
  10
  364
  ref-or-constructor
  "\"'(eval (app (-> char? <-) re) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  10
  364
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app char? re) (app symbol? re)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  364
  app
  "\"'(eval (λ (re) (-> (app eq? re (app #t)) <-)) (env (())))\""
  #f)
'(clean-cache
  regex
  0
  10
  364
  app
  "\"'(eval (app eq? re (-> (app #t) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  364
  ref-or-constructor
  "\"'(eval (app eq? (-> re <-) (app #t)) (env (())))\""
  #f)
'(clean-cache
  regex
  0
  10
  364
  ref-or-constructor
  "\"'(eval (app (-> eq? <-) re (app #t)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  364
  app
  "\"'(eval (λ (re) (-> (app eq? re (app #f)) <-)) (env (())))\""
  #f)
'(clean-cache
  regex
  0
  10
  364
  app
  "\"'(eval (app eq? re (-> (app #f) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  364
  ref-or-constructor
  "\"'(eval (app eq? (-> re <-) (app #f)) (env (())))\""
  #f)
'(clean-cache
  regex
  0
  10
  364
  ref-or-constructor
  "\"'(eval (app (-> eq? <-) re (app #f)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  364
  app
  "\"'(eval\n  (λ (re) (-> (app and (app pair? re) (app eq? (app car re) 'rep)) <-))\n  (env (())))\""
  #f)
'(clean-cache
  regex
  0
  364
  app
  "\"'(eval (app and (app pair? re) (-> (app eq? (app car re) 'rep) <-)) (env (())))\""
  #f)
'(clean-cache
  regex
  0
  364
  app
  "\"'(eval (app eq? (-> (app car re) <-) 'rep) (env (())))\""
  #f)
'(clean-cache
  regex
  0
  364
  ref-or-constructor
  "\"'(eval (app car (-> re <-)) (env (())))\""
  #f)
'(clean-cache
  regex
  0
  10
  364
  ref-or-constructor
  "\"'(eval (app (-> car <-) re) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  10
  364
  ref-or-constructor
  "\"'(eval (app (-> eq? <-) (app car re) 'rep) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  364
  app
  "\"'(eval (app and (-> (app pair? re) <-) (app eq? (app car re) 'rep)) (env (())))\""
  #f)
'(clean-cache
  regex
  0
  364
  ref-or-constructor
  "\"'(eval (app pair? (-> re <-)) (env (())))\""
  #f)
'(clean-cache
  regex
  0
  10
  364
  ref-or-constructor
  "\"'(eval (app (-> pair? <-) re) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  10
  364
  ref-or-constructor
  "\"'(eval (app (-> and <-) (app pair? re) (app eq? (app car re) 'rep)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  0
  364
  app
  "\"'(eval\n  (λ (re) (-> (app and (app pair? re) (app eq? (app car re) 'seq)) <-))\n  (env (())))\""
  #f)
'(clean-cache
  regex
  0
  364
  app
  "\"'(eval (app and (app pair? re) (-> (app eq? (app car re) 'seq) <-)) (env (())))\""
  #f)
'(clean-cache
  regex
  0
  364