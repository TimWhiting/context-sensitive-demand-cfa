'(expression:
  (lettypes
   ((cons car cdr) (nil) (error r))
   (letrec*
    ((car (λ (car-v) (match car-v ((cons car-c car-d) car-c))))
     (cdr (λ (cdr-v) (match cdr-v ((cons cdr-c cdr-d) cdr-d))))
     (length
      (λ (length-l)
        (match
         length-l
         ((cons length-c length-d) (app + 1 (app length length-d)))
         ((nil) 0))))
     (pair?
      (λ (pair?-v)
        (match pair?-v ((cons pair?-c pair?-d) (app #t)) (_ (app #f)))))
     (null? (λ (null?-v) (match null?-v ((nil) (app #t)) (_ (app #f)))))
     (cadr (λ (p) (app car (app cdr p))))
     (caadr (λ (p) (app car (app car (app cdr p)))))
     (caddr (λ (p) (app car (app cdr (app cdr p)))))
     (cadddr (λ (p) (app car (app cdr (app cdr (app cdr p))))))
     (map
      (λ (f lst)
        (match
         (app pair? lst)
         ((#f) (app nil))
         (_ (app cons (app f (app car lst)) (app map f (app cdr lst)))))))
     (append
      (λ (lst1 lst2)
        (match
         (app not (app pair? lst1))
         ((#f) (app cons (app car lst1) (app append (app cdr lst1) lst2)))
         (_ lst2))))
     (string->list
      (λ (s)
        (letrec*
         ((f
           (λ (i)
             (match
              (app < i (app string-length s))
              ((#f) (app nil))
              (_ (app cons (app string-ref s i) (app f (app + i 1))))))))
         (app f 0))))
     (tagged-list?
      (λ (tag l)
        (match
         (app pair? l)
         ((#f) (app #f))
         (_ (match (app eq? tag (app car l)) ((#f) (app #f)) (_ (app #t)))))))
     (char->natural
      (λ (c)
        (let ((i (app char->integer c)))
          (match (app < i 0) ((#f) (app + (app * 2 i) 1)) (_ (app * -2 i))))))
     (integer->char-list (λ (n) (app string->list (app number->string n))))
     (const? (λ (exp) (app integer? exp)))
     (ref? (λ (exp) (app symbol? exp)))
     (let? (λ (exp) (app tagged-list? 'let exp)))
     (let->bindings (λ (exp) (app cadr exp)))
     (let->exp (λ (exp) (app caddr exp)))
     (letrec1?
      (λ (exp)
        (match
         (app tagged-list? 'letrec exp)
         ((#f) (app #f))
         (_
          (match
           (app = (app length (app cadr exp)) 1)
           ((#f) (app #f))
           (_ (app #t)))))))
     (letrec1->binding (λ (exp) (app caadr exp)))
     (letrec1->exp (λ (exp) (app caddr exp)))
     (lambda? (λ (exp) (app tagged-list? 'lambda exp)))
     (lambda->formals (λ (exp) (app cadr exp)))
     (lambda->exp (λ (exp) (app caddr exp)))
     (if? (λ (exp) (app tagged-list? 'if exp)))
     (if->condition (λ (exp) (app cadr exp)))
     (if->then (λ (exp) (app caddr exp)))
     (if->else (λ (exp) (app cadddr exp)))
     (app? (λ (exp) (app pair? exp)))
     (app->fun (λ (exp) (app car exp)))
     (app->args (λ (exp) (app cdr exp)))
     (prim?
      (λ (exp)
        (match
         (app eq? exp '+)
         ((#f)
          (match
           (app eq? exp '-)
           ((#f)
            (match
             (app eq? exp '*)
             ((#f)
              (match
               (app eq? exp '=)
               ((#f)
                (match (app eq? exp 'display) ((#f) (app #f)) (_ (app #t))))
               (_ (app #t))))
             (_ (app #t))))
           (_ (app #t))))
         (_ (app #t)))))
     (begin? (λ (exp) (app tagged-list? 'begin exp)))
     (begin->exps (λ (exp) (app cdr exp)))
     (set!? (λ (exp) (app tagged-list? 'set! exp)))
     (set!-var (λ (exp) (app cadr exp)))
     (set!-exp (λ (exp) (app caddr exp)))
     (let=>lambda
      (λ (exp)
        (match
         (app let? exp)
         ((#f) exp)
         (_
          (let ((vars (app map car (app let->bindings exp)))
                (args (app map cadr (app let->bindings exp))))
            (app
             cons
             (app
              cons
              (app
               cons
               'lambda
               (app
                cons
                (app append vars (app nil))
                (app cons (app let->exp exp) (app nil))))
              (app append args (app nil)))
             (app nil)))))))
     (arity (λ (lam) (app length (app lambda->formals lam))))
     (xargs
      (λ (n)
        (match
         (app <= n 0)
         ((#f)
          (app
           cons
           (app string->symbol (app string-append "x" (app number->string n)))
           (app xargs (app - n 1))))
         (_ (app nil)))))
     (Yn
      (λ (n)
        (app
         cons
         (app
          cons
          (app
           cons
           'lambda
           (app
            cons
            (app cons 'h (app nil))
            (app
             cons
             (app
              cons
              'lambda
              (app
               cons
               (app cons 'F (app nil))
               (app
                cons
                (app
                 cons
                 'F
                 (app
                  cons
                  (app
                   cons
                   'lambda
                   (app
                    cons
                    (app append (app xargs n) (app nil))
                    (app
                     cons
                     (app
                      cons
                      (app
                       cons
                       (app cons 'h (app cons 'h (app nil)))
                       (app cons 'F (app nil)))
                      (app append (app xargs n) (app nil)))
                     (app nil))))
                  (app nil)))
                (app nil))))
             (app nil))))
          (app
           cons
           (app
            cons
            'lambda
            (app
             cons
             (app cons 'h (app nil))
             (app
              cons
              (app
               cons
               'lambda
               (app
                cons
                (app cons 'F (app nil))
                (app
                 cons
                 (app
                  cons
                  'F
                  (app
                   cons
                   (app
                    cons
                    'lambda
                    (app
                     cons
                     (app append (app xargs n) (app nil))
                     (app
                      cons
                      (app
                       cons
                       (app
                        cons
                        (app cons 'h (app cons 'h (app nil)))
                        (app cons 'F (app nil)))
                       (app append (app xargs n) (app nil)))
                      (app nil))))
                   (app nil)))
                 (app nil))))
              (app nil))))
           (app nil)))
         (app nil))))
     (letrec1=>Y
      (λ (exp)
        (match
         (app letrec1? exp)
         ((#f) exp)
         (_
          (let* ((binding (app letrec1->binding exp))
                 (name (app car binding))
                 (arg (app cadr binding))
                 (num-args (app arity arg)))
            (app
             cons
             (app
              cons
              'let
              (app
               cons
               (app
                cons
                (app
                 cons
                 name
                 (app
                  cons
                  (app
                   cons
                   (app Yn num-args)
                   (app
                    cons
                    (app
                     cons
                     'lambda
                     (app
                      cons
                      (app cons name (app nil))
                      (app cons arg (app nil))))
                    (app nil)))
                  (app nil)))
                (app nil))
               (app cons (app letrec1->exp exp) (app nil))))
             (app nil)))))))
     (begin=>let
      (λ (exp)
        (letrec*
         ((singlet?
           (λ (l)
             (match
              (app list? l)
              ((#f) (app #f))
              (_
               (match
                (app = (app length l) 1)
                ((#f) (app #f))
                (_ (app #t)))))))
          (dummy-bind
           (λ (exps)
             (match
              (app singlet? exps)
              ((#f)
               (match
                (app pair? exps)
                ((#f) (app error "no-match"))
                (_
                 (app
                  cons
                  (app
                   cons
                   'let
                   (app
                    cons
                    (app
                     cons
                     (app cons '$_ (app cons (app car exps) (app nil)))
                     (app nil))
                    (app cons (app dummy-bind (app cdr exps)) (app nil))))
                  (app nil)))))
              (_ (app car exps))))))
         (app dummy-bind (app begin->exps exp)))))
     (mutable-variables (app nil))
     (mark-mutable
      (λ (symbol)
        (app set! mutable-variables (app cons symbol mutable-variables))))
     (is-mutable?
      (λ (symbol)
        (letrec*
         ((is-in?
           (λ (S)
             (match
              (app not (app pair? S))
              ((#f)
               (match
                (app eq? (app car S) symbol)
                ((#f) (app is-in? (app cdr S)))
                (_ (app #t))))
              (_ (app #f))))))
         (app is-in? mutable-variables))))
     (analyze-mutable-variables
      (λ (exp)
        (match
         (app const? exp)
         ((#f)
          (match
           (app ref? exp)
           ((#f)
            (match
             (app prim? exp)
             ((#f)
              (match
               (app lambda? exp)
               ((#f)
                (match
                 (app let? exp)
                 ((#f)
                  (match
                   (app letrec1? exp)
                   ((#f)
                    (match
                     (app set!? exp)
                     ((#f)
                      (match
                       (app if? exp)
                       ((#f)
                        (match
                         (app begin? exp)
                         ((#f)
                          (match
                           (app app? exp)
                           ((#f) (app error "unknown expression type: " exp))
                           (_
                            (let ((_ (app map analyze-mutable-variables exp)))
                              (app void)))))
                         (_
                          (let ((_
                                 (app
                                  map
                                  analyze-mutable-variables
                                  (app begin->exps exp))))
                            (app void)))))
                       (_
                        (let ((_
                               (app
                                analyze-mutable-variables
                                (app if->condition exp))))
                          (let ((_
                                 (app
                                  analyze-mutable-variables
                                  (app if->then exp))))
                            (app
                             analyze-mutable-variables
                             (app if->else exp)))))))
                     (_ (app mark-mutable (app set!-var exp)))))
                   (_
                    (let ((_
                           (app
                            analyze-mutable-variables
                            (app cadr (app letrec1->binding exp)))))
                      (app
                       analyze-mutable-variables
                       (app letrec1->exp exp))))))
                 (_
                  (let ((_
                         (app
                          map
                          analyze-mutable-variables
                          (app map cadr (app let->bindings exp)))))
                    (app analyze-mutable-variables (app let->exp exp))))))
               (_ (app analyze-mutable-variables (app lambda->exp exp)))))
             (_ (app void))))
           (_ (app void))))
         (_ (app void)))))
     (mangle
      (λ (symbol)
        (letrec*
         ((m
           (λ (chars)
             (match
              (app null? chars)
              ((#f)
               (match
                (match
                 (match
                  (app char-alphabetic? (app car chars))
                  ((#f) (app #f))
                  (_
                   (match
                    (app not (app char=? (app car chars) #\_))
                    ((#f) (app #f))
                    (_ (app #t)))))
                 ((#f)
                  (match
                   (app char-numeric? (app car chars))
                   ((#f) (app #f))
                   (_ (app #t))))
                 (_ (app #t)))
                ((#f)
                 (app
                  cons
                  #\_
                  (app
                   append
                   (app integer->char-list (app char->natural (app car chars)))
                   (app m (app cdr chars)))))
                (_ (app cons (app car chars) (app m (app cdr chars))))))
              (_ (app nil))))))
         (app
          list->string
          (app m (app string->list (app symbol->string symbol)))))))
     (java-compile-program
      (λ (exp)
        (app
         string-append
         "public class BOut extends RuntimeEnvironment {\n"
         " public static void main (String[] args) {\n"
         (app java-compile-exp exp)
         " ;\n"
         " }\n"
         "}\n")))
     (java-compile-exp
      (λ (exp)
        (match
         (app const? exp)
         ((#f)
          (match
           (app prim? exp)
           ((#f)
            (match
             (app ref? exp)
             ((#f)
              (match
               (app lambda? exp)
               ((#f)
                (match
                 (app if? exp)
                 ((#f)
                  (match
                   (app set!? exp)
                   ((#f)
                    (match
                     (app let? exp)
                     ((#f)
                      (match
                       (app letrec1? exp)
                       ((#f)
                        (match
                         (app begin? exp)
                         ((#f)
                          (match
                           (app app? exp)
                           ((#f) (app error "no-match"))
                           (_ (app java-compile-app exp))))
                         (_ (app java-compile-exp (app begin=>let exp)))))
                       (_ (app java-compile-exp (app letrec1=>Y exp)))))
                     (_ (app java-compile-exp (app let=>lambda exp)))))
                   (_ (app java-compile-set! exp))))
                 (_ (app java-compile-if exp))))
               (_ (app java-compile-lambda exp))))
             (_ (app java-compile-ref exp))))
           (_ (app java-compile-prim exp))))
         (_ (app java-compile-const exp)))))
     (java-compile-const
      (λ (exp)
        (match
         (app integer? exp)
         ((#f) (app error "unknown constant: " exp))
         (_
          (app string-append "new IntValue(" (app number->string exp) ")")))))
     (java-compile-prim
      (λ (p)
        (match
         (app eq? '+ p)
         ((#f)
          (match
           (app eq? '- p)
           ((#f)
            (match
             (app eq? '* p)
             ((#f)
              (match
               (app eq? '= p)
               ((#f)
                (match
                 (app eq? 'display p)
                 ((#f) (app error "unhandled primitive " p))
                 (_ "display")))
               (_ "numEqual")))
             (_ "product")))
           (_ "difference")))
         (_ "sum"))))
     (java-compile-ref
      (λ (exp)
        (match
         (app is-mutable? exp)
         ((#f) (app mangle exp))
         (_ (app string-append "m_" (app mangle exp) ".value")))))
     (java-compile-formals
      (λ (formals)
        (match
         (app not (app pair? formals))
         ((#f)
          (app
           string-append
           "final Value "
           (app mangle (app car formals))
           (match
            (app pair? (app cdr formals))
            ((#f) "")
            (_
             (app
              string-append
              ", "
              (app java-compile-formals (app cdr formals)))))))
         (_ ""))))
     (java-compile-lambda
      (λ (exp)
        (letrec*
         ((java-wrap-mutables
           (λ (vars)
             (match
              (app not (app pair? vars))
              ((#f)
               (app
                string-append
                (match
                 (app is-mutable? (app car vars))
                 ((#f) "")
                 (_
                  (app
                   string-append
                   " final ValueCell m_"
                   (app mangle (app car vars))
                   " = new ValueCell("
                   (app mangle (app car vars))
                   ");\n")))
                (app java-wrap-mutables (app cdr vars))))
              (_ "")))))
         (let* ((formals (app lambda->formals exp))
                (num-args (app length formals)))
           (app
            string-append
            "new NullProcValue"
            (app number->string num-args)
            " () {\n"
            " public Value apply("
            (app java-compile-formals formals)
            ") {\n"
            (app java-wrap-mutables formals)
            "\n"
            "  return "
            (app java-compile-exp (app lambda->exp exp))
            " ;\n"
            "}}\n")))))
     (java-compile-args
      (λ (args)
        (match
         (app not (app pair? args))
         ((#f)
          (app
           string-append
           (app java-compile-exp (app car args))
           (match
            (app pair? (app cdr args))
            ((#f) "")
            (_
             (app
              string-append
              ", "
              (app java-compile-args (app cdr args)))))))
         (_ ""))))
     (java-compile-set!
      (λ (exp)
        (app
         string-append
         "VoidValue.Void(m_"
         (app mangle (app set!-var exp))
         ".value = "
         (app java-compile-exp (app set!-exp exp))
         ")")))
     (java-compile-app
      (λ (exp)
        (let* ((args (app app->args exp))
               (fun (app app->fun exp))
               (num-args (app length args)))
          (app
           string-append
           "((ProcValue"
           (app number->string num-args)
           ")("
           (app java-compile-exp fun)
           ")).apply("
           (app java-compile-args args)
           ")\n"))))
     (java-compile-if
      (λ (exp)
        (app
         string-append
         "("
         (app java-compile-exp (app if->condition exp))
         ").toBoolean() ? ("
         (app java-compile-exp (app if->then exp))
         ") : ("
         (app java-compile-exp (app if->else exp))
         ")")))
     (input-program
      (app
       cons
       (app
        cons
        'lambda
        (app
         cons
         (app cons 'x (app nil))
         (app
          cons
          (app
           cons
           'let
           (app
            cons
            (app
             cons
             (app
              cons
              'z
              (app
               cons
               (app cons '+ (app cons 3 (app cons 'x (app nil))))
               (app nil)))
             (app nil))
            (app
             cons
             (app cons '+ (app cons 3 (app cons 'x (app cons 'z (app nil)))))
             (app nil))))
          (app cons 10 (app nil)))))
       (app nil))))
    (let ((_ (app analyze-mutable-variables input-program)))
      (app display (app java-compile-program input-program))))))

'(query:
  (app
   cons
   'lambda
   (->
    (app
     cons
     (app append (app xargs ...) (app nil ...))
     (app cons (app cons ...) (app nil ...)))
    <-))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app
   cons
   'lambda
   (->
    (app
     cons
     (app append (app xargs ...) (app nil ...))
     (app cons (app cons ...) (app nil ...)))
    <-))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app
   cons
   'lambda
   (->
    (app
     cons
     (app append vars (app nil ...))
     (app cons (app let->exp ...) (app nil ...)))
    <-))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append vars (app nil ...))
      (app cons (app let->exp ...) (app nil ...)))
     <-)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app
   cons
   'lambda
   (->
    (app
     cons
     (app cons 'F (app nil ...))
     (app cons (app cons ...) (app nil ...)))
    <-))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app
   cons
   'lambda
   (->
    (app
     cons
     (app cons 'F (app nil ...))
     (app cons (app cons ...) (app nil ...)))
    <-))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app
   cons
   'lambda
   (->
    (app
     cons
     (app cons 'h (app nil ...))
     (app cons (app cons ...) (app nil ...)))
    <-))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app
   cons
   'lambda
   (->
    (app
     cons
     (app cons 'h (app nil ...))
     (app cons (app cons ...) (app nil ...)))
    <-))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app
   cons
   'lambda
   (->
    (app
     cons
     (app cons 'x (app nil ...))
     (app cons (app cons ...) (app cons ...)))
    <-))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'x (app nil ...))
      (app cons (app cons ...) (app cons ...)))
     <-)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app
   cons
   'lambda
   (->
    (app cons (app cons name (app nil ...)) (app cons arg (app nil ...)))
    <-))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app cons (app cons name (app nil ...)) (app cons arg (app nil ...)))
     <-)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app
   cons
   'let
   (->
    (app
     cons
     (app cons (app cons ...) (app nil ...))
     (app cons (app cons ...) (app nil ...)))
    <-))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app
   cons
   'let
   (->
    (app
     cons
     (app cons (app cons ...) (app nil ...))
     (app cons (app dummy-bind ...) (app nil ...)))
    <-))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app dummy-bind ...) (app nil ...)))
     <-)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app
   cons
   'let
   (->
    (app
     cons
     (app cons (app cons ...) (app nil ...))
     (app cons (app letrec1->exp ...) (app nil ...)))
    <-))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app letrec1->exp ...) (app nil ...)))
     <-)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app
   cons
   (->
    (app
     cons
     (app cons 'lambda (app cons ...))
     (app append args (app nil ...)))
    <-)
   (app nil))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app
   cons
   (->
    (app
     cons
     (app cons 'lambda (app cons ...))
     (app cons (app cons ...) (app nil ...)))
    <-)
   (app nil))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app
   cons
   (->
    (app
     cons
     (app cons (app cons ...) (app cons ...))
     (app append (app xargs ...) (app nil ...)))
    <-)
   (app nil))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app
   cons
   (->
    (app
     cons
     (app cons (app cons ...) (app cons ...))
     (app append (app xargs ...) (app nil ...)))
    <-)
   (app nil))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app
   cons
   (->
    (app string->symbol (app string-append "x" (app number->string ...)))
    <-)
   (app xargs (app - n 1)))
  (env ()))
clos/con: ⊥
literals: '(⊥ ⊥ ⊥ ⊤)

'(query:
  (app
   cons
   (-> (app Yn num-args) <-)
   (app cons (app cons 'lambda (app cons ...)) (app nil)))
  (env ()))
clos/con:
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app
   cons
   (-> (app append (app xargs n) (app nil)) <-)
   (app cons (app cons (app cons ...) (app append ...)) (app nil)))
  (env ()))
clos/con:
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app
   cons
   (-> (app append (app xargs n) (app nil)) <-)
   (app cons (app cons (app cons ...) (app append ...)) (app nil)))
  (env ()))
clos/con:
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app
   cons
   (-> (app append vars (app nil)) <-)
   (app cons (app let->exp exp) (app nil)))
  (env ()))
clos/con:
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app
   cons
   (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
   (app nil))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app
   cons
   (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
   (app nil))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app
   cons
   (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
   (app nil))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app
   cons
   (-> (app cons 'F (app nil)) <-)
   (app cons (app cons 'F (app cons ...)) (app nil)))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app
   cons
   (-> (app cons 'F (app nil)) <-)
   (app cons (app cons 'F (app cons ...)) (app nil)))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app
   cons
   (-> (app cons 'h (app cons 'h (app nil ...))) <-)
   (app cons 'F (app nil)))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app
   cons
   (-> (app cons 'h (app cons 'h (app nil ...))) <-)
   (app cons 'F (app nil)))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app
   cons
   (-> (app cons 'h (app nil)) <-)
   (app cons (app cons 'lambda (app cons ...)) (app nil)))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app
   cons
   (-> (app cons 'h (app nil)) <-)
   (app cons (app cons 'lambda (app cons ...)) (app nil)))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app
   cons
   (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
   (app append args (app nil)))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app
   cons
   (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
   (app nil))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app
   cons
   (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
   (app nil))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app
   cons
   (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
   (app cons (app cons 'lambda (app cons ...)) (app nil)))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app
   cons
   (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
   (app nil))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app
   cons
   (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
   (app nil))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app
   cons
   (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
   (app nil))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app
   cons
   (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
   (app nil))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app
   cons
   (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
   (app nil))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app
   cons
   (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
   (app cons 10 (app nil)))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app
   cons
   (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
   (app nil))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app
   cons
   (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
   (app nil))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app
   cons
   (-> (app cons 'x (app nil)) <-)
   (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...))))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app
   cons
   (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
   (app nil))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app
   cons
   (-> (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...))) <-)
   (app nil))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app
   cons
   (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
   (app cons (app dummy-bind (app cdr ...)) (app nil)))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app
   cons
   (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
   (app append (app xargs n) (app nil)))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app
   cons
   (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
   (app append (app xargs n) (app nil)))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app
   cons
   (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
   (app cons (app cons '+ (app cons ...)) (app nil)))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app
   cons
   (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
   (app cons (app letrec1->exp exp) (app nil)))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app
   cons
   (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
   (app nil))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app
   cons
   (-> name <-)
   (app cons (app cons (app Yn ...) (app cons ...)) (app nil)))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query:
  (app
   cons
   (app
    cons
    (app cons 'lambda (app cons ...))
    (app cons (app cons ...) (app nil ...)))
   (-> (app nil) <-))
  (env ()))
clos/con:
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app
   cons
   (app
    cons
    (app cons (app cons ...) (app cons ...))
    (app append (app xargs ...) (app nil ...)))
   (-> (app nil) <-))
  (env ()))
clos/con:
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app
   cons
   (app
    cons
    (app cons (app cons ...) (app cons ...))
    (app append (app xargs ...) (app nil ...)))
   (-> (app nil) <-))
  (env ()))
clos/con:
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app
   cons
   (app Yn num-args)
   (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (app Yn num-args)
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app
   cons
   (app append (app xargs n) (app nil))
   (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app
   cons
   (app append (app xargs n) (app nil))
   (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app
   cons
   (app append vars (app nil))
   (-> (app cons (app let->exp exp) (app nil)) <-))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (app append vars (app nil))
    (-> (app cons (app let->exp exp) (app nil)) <-)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app
   cons
   (app cons '$_ (app cons (app car ...) (app nil ...)))
   (-> (app nil) <-))
  (env ()))
clos/con:
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app
   cons
   (app cons 'F (app cons (app cons ...) (app nil ...)))
   (-> (app nil) <-))
  (env ()))
clos/con:
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app
   cons
   (app cons 'F (app cons (app cons ...) (app nil ...)))
   (-> (app nil) <-))
  (env ()))
clos/con:
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app
   cons
   (app cons 'F (app nil))
   (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app
   cons
   (app cons 'F (app nil))
   (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app
   cons
   (app cons 'h (app cons 'h (app nil ...)))
   (-> (app cons 'F (app nil)) <-))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app
   cons
   (app cons 'h (app cons 'h (app nil ...)))
   (-> (app cons 'F (app nil)) <-))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app
   cons
   (app cons 'h (app nil))
   (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app
   cons
   (app cons 'h (app nil))
   (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app
   cons
   (app cons 'lambda (app cons (app append ...) (app cons ...)))
   (-> (app append args (app nil)) <-))
  (env ()))
clos/con:
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app
   cons
   (app cons 'lambda (app cons (app append ...) (app cons ...)))
   (-> (app nil) <-))
  (env ()))
clos/con:
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app
   cons
   (app cons 'lambda (app cons (app append ...) (app cons ...)))
   (-> (app nil) <-))
  (env ()))
clos/con:
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app
   cons
   (app cons 'lambda (app cons (app cons ...) (app cons ...)))
   (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (app cons 'lambda (app cons (app cons ...) (app cons ...)))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app
   cons
   (app cons 'lambda (app cons (app cons ...) (app cons ...)))
   (-> (app nil) <-))
  (env ()))
clos/con:
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app
   cons
   (app cons 'lambda (app cons (app cons ...) (app cons ...)))
   (-> (app nil) <-))
  (env ()))
clos/con:
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app
   cons
   (app cons 'lambda (app cons (app cons ...) (app cons ...)))
   (-> (app nil) <-))
  (env ()))
clos/con:
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app
   cons
   (app cons 'lambda (app cons (app cons ...) (app cons ...)))
   (-> (app nil) <-))
  (env ()))
clos/con:
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app
   cons
   (app cons 'lambda (app cons (app cons ...) (app cons ...)))
   (-> (app nil) <-))
  (env ()))
clos/con:
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app
   cons
   (app cons 'let (app cons (app cons ...) (app cons ...)))
   (-> (app cons 10 (app nil)) <-))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (app cons 'let (app cons (app cons ...) (app cons ...)))
    (-> (app cons 10 (app nil)) <-)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app
   cons
   (app cons 'let (app cons (app cons ...) (app cons ...)))
   (-> (app nil) <-))
  (env ()))
clos/con:
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app
   cons
   (app cons 'let (app cons (app cons ...) (app cons ...)))
   (-> (app nil) <-))
  (env ()))
clos/con:
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app
   cons
   (app cons 'x (app nil))
   (->
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))
    <-))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (app cons 'x (app nil))
    (->
     (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))
     <-)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app
   cons
   (app cons 'z (app cons (app cons ...) (app nil ...)))
   (-> (app nil) <-))
  (env ()))
clos/con:
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app
   cons
   (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
   (-> (app nil) <-))
  (env ()))
clos/con:
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app
   cons
   (app cons (app cons '$_ (app cons ...)) (app nil))
   (-> (app cons (app dummy-bind (app cdr ...)) (app nil)) <-))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (app cons (app cons '$_ (app cons ...)) (app nil))
    (-> (app cons (app dummy-bind (app cdr ...)) (app nil)) <-)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app
   cons
   (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...)))
   (-> (app append (app xargs n) (app nil)) <-))
  (env ()))
clos/con:
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app
   cons
   (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...)))
   (-> (app append (app xargs n) (app nil)) <-))
  (env ()))
clos/con:
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app
   cons
   (app cons (app cons 'lambda (app cons ...)) (app append args (app nil ...)))
   (-> (app nil) <-))
  (env ()))
clos/con:
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app
   cons
   (app cons (app cons 'z (app cons ...)) (app nil))
   (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (app cons (app cons 'z (app cons ...)) (app nil))
    (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app
   cons
   (app cons (app cons name (app cons ...)) (app nil))
   (-> (app cons (app letrec1->exp exp) (app nil)) <-))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (app cons (app cons name (app cons ...)) (app nil))
    (-> (app cons (app letrec1->exp exp) (app nil)) <-)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app
   cons
   (app cons name (app cons (app cons ...) (app nil ...)))
   (-> (app nil) <-))
  (env ()))
clos/con:
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app
   cons
   (app string->symbol (app string-append "x" (app number->string ...)))
   (-> (app xargs (app - n 1)) <-))
  (env ()))
clos/con:
	'((con
   cons
   (match
    (app <= n 0)
    ((#f)
     (->
      (app
       cons
       (app string->symbol (app string-append ...))
       (app xargs (app - ...)))
      <-))
    _))
  (env ()))
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app
   cons
   name
   (-> (app cons (app cons (app Yn ...) (app cons ...)) (app nil)) <-))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    name
    (-> (app cons (app cons (app Yn ...) (app cons ...)) (app nil)) <-)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app
   list->string
   (-> (app m (app string->list (app symbol->string ...))) <-))
  (env ()))
clos/con:
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app
   map
   analyze-mutable-variables
   (-> (app map cadr (app let->bindings exp)) <-))
  (env ()))
clos/con:
	'((con
   cons
   (match
    (app pair? lst)
    (#f)
    (_ (-> (app cons (app f (app car ...)) (app map f (app cdr ...))) <-))))
  (env ()))
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app
   string-append
   " final ValueCell m_"
   (-> (app mangle (app car vars)) <-)
   " = new ValueCell("
   (app mangle (app car vars))
   ");\n")
  (env ()))
clos/con: ⊥
literals: '(⊥ ⊥ ⊤ ⊥)

'(query:
  (app
   string-append
   " final ValueCell m_"
   (app mangle (app car vars))
   " = new ValueCell("
   (-> (app mangle (app car vars)) <-)
   ");\n")
  (env ()))
clos/con: ⊥
literals: '(⊥ ⊥ ⊤ ⊥)

'(query:
  (app
   string-append
   "("
   (-> (app java-compile-exp (app if->condition exp)) <-)
   ").toBoolean() ? ("
   (app java-compile-exp (app if->then exp))
   ") : ("
   (app java-compile-exp (app if->else exp))
   ")")
  (env ()))
clos/con:
	'((con
   error
   (match
    (app eq? 'display p)
    ((#f) (-> (app error "unhandled primitive " p) <-))
    _))
  (env ()))
	'((con
   error
   (match
    (app integer? exp)
    ((#f) (-> (app error "unknown constant: " exp) <-))
    _))
  (env ()))
	'((con error (match (app app? exp) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
literals: '(⊥ ⊥ ⊤ ⊥)

'(query:
  (app
   string-append
   "("
   (app java-compile-exp (app if->condition exp))
   ").toBoolean() ? ("
   (-> (app java-compile-exp (app if->then exp)) <-)
   ") : ("
   (app java-compile-exp (app if->else exp))
   ")")
  (env ()))
clos/con:
	'((con
   error
   (match
    (app eq? 'display p)
    ((#f) (-> (app error "unhandled primitive " p) <-))
    _))
  (env ()))
	'((con
   error
   (match
    (app integer? exp)
    ((#f) (-> (app error "unknown constant: " exp) <-))
    _))
  (env ()))
	'((con error (match (app app? exp) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
literals: '(⊥ ⊥ ⊤ ⊥)

'(query:
  (app
   string-append
   "("
   (app java-compile-exp (app if->condition exp))
   ").toBoolean() ? ("
   (app java-compile-exp (app if->then exp))
   ") : ("
   (-> (app java-compile-exp (app if->else exp)) <-)
   ")")
  (env ()))
clos/con:
	'((con
   error
   (match
    (app eq? 'display p)
    ((#f) (-> (app error "unhandled primitive " p) <-))
    _))
  (env ()))
	'((con
   error
   (match
    (app integer? exp)
    ((#f) (-> (app error "unknown constant: " exp) <-))
    _))
  (env ()))
	'((con error (match (app app? exp) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
literals: '(⊥ ⊥ ⊤ ⊥)

'(query:
  (app
   string-append
   "((ProcValue"
   (-> (app number->string num-args) <-)
   ")("
   (app java-compile-exp fun)
   ")).apply("
   (app java-compile-args args)
   ")\n")
  (env ()))
clos/con: ⊥
literals: '(⊥ ⊥ ⊤ ⊥)

'(query:
  (app
   string-append
   "((ProcValue"
   (app number->string num-args)
   ")("
   (-> (app java-compile-exp fun) <-)
   ")).apply("
   (app java-compile-args args)
   ")\n")
  (env ()))
clos/con:
	'((con
   error
   (match
    (app eq? 'display p)
    ((#f) (-> (app error "unhandled primitive " p) <-))
    _))
  (env ()))
	'((con
   error
   (match
    (app integer? exp)
    ((#f) (-> (app error "unknown constant: " exp) <-))
    _))
  (env ()))
	'((con error (match (app app? exp) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
literals: '(⊥ ⊥ ⊤ ⊥)

'(query:
  (app
   string-append
   "((ProcValue"
   (app number->string num-args)
   ")("
   (app java-compile-exp fun)
   ")).apply("
   (-> (app java-compile-args args) <-)
   ")\n")
  (env ()))
clos/con: ⊥
literals: '(⊥ ⊥ ⊤ ⊥)

'(query:
  (app
   string-append
   "VoidValue.Void(m_"
   (-> (app mangle (app set!-var exp)) <-)
   ".value = "
   (app java-compile-exp (app set!-exp exp))
   ")")
  (env ()))
clos/con: ⊥
literals: '(⊥ ⊥ ⊤ ⊥)

'(query:
  (app
   string-append
   "VoidValue.Void(m_"
   (app mangle (app set!-var exp))
   ".value = "
   (-> (app java-compile-exp (app set!-exp exp)) <-)
   ")")
  (env ()))
clos/con:
	'((con
   error
   (match
    (app eq? 'display p)
    ((#f) (-> (app error "unhandled primitive " p) <-))
    _))
  (env ()))
	'((con
   error
   (match
    (app integer? exp)
    ((#f) (-> (app error "unknown constant: " exp) <-))
    _))
  (env ()))
	'((con error (match (app app? exp) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
literals: '(⊥ ⊥ ⊤ ⊥)

'(query:
  (app
   string-append
   "final Value "
   (-> (app mangle (app car formals)) <-)
   (match (app pair? (app cdr ...)) ...))
  (env ()))
clos/con: ⊥
literals: '(⊥ ⊥ ⊤ ⊥)

'(query:
  (app
   string-append
   "final Value "
   (app mangle (app car formals))
   (-> (match (app pair? (app cdr ...)) ...) <-))
  (env ()))
clos/con: ⊥
literals: '(⊥ ⊥ ⊤ ⊥)

'(query:
  (app
   string-append
   "new NullProcValue"
   (-> (app number->string num-args) <-)
   " () {\n"
   " public Value apply("
   (app java-compile-formals formals)
   ") {\n"
   (app java-wrap-mutables formals)
   "\n"
   "  return "
   (app java-compile-exp (app lambda->exp exp))
   " ;\n"
   "}}\n")
  (env ()))
clos/con: ⊥
literals: '(⊥ ⊥ ⊤ ⊥)

'(query:
  (app
   string-append
   "new NullProcValue"
   (app number->string num-args)
   " () {\n"
   " public Value apply("
   (-> (app java-compile-formals formals) <-)
   ") {\n"
   (app java-wrap-mutables formals)
   "\n"
   "  return "
   (app java-compile-exp (app lambda->exp exp))
   " ;\n"
   "}}\n")
  (env ()))
clos/con: ⊥
literals: '(⊥ ⊥ ⊤ ⊥)

'(query:
  (app
   string-append
   "new NullProcValue"
   (app number->string num-args)
   " () {\n"
   " public Value apply("
   (app java-compile-formals formals)
   ") {\n"
   (-> (app java-wrap-mutables formals) <-)
   "\n"
   "  return "
   (app java-compile-exp (app lambda->exp exp))
   " ;\n"
   "}}\n")
  (env ()))
clos/con: ⊥
literals: '(⊥ ⊥ ⊤ ⊥)

'(query:
  (app
   string-append
   "new NullProcValue"
   (app number->string num-args)
   " () {\n"
   " public Value apply("
   (app java-compile-formals formals)
   ") {\n"
   (app java-wrap-mutables formals)
   "\n"
   "  return "
   (-> (app java-compile-exp (app lambda->exp exp)) <-)
   " ;\n"
   "}}\n")
  (env ()))
clos/con:
	'((con
   error
   (match
    (app eq? 'display p)
    ((#f) (-> (app error "unhandled primitive " p) <-))
    _))
  (env ()))
	'((con
   error
   (match
    (app integer? exp)
    ((#f) (-> (app error "unknown constant: " exp) <-))
    _))
  (env ()))
	'((con error (match (app app? exp) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
literals: '(⊥ ⊥ ⊤ ⊥)

'(query:
  (app
   string-append
   "public class BOut extends RuntimeEnvironment {\n"
   " public static void main (String[] args) {\n"
   (-> (app java-compile-exp exp) <-)
   " ;\n"
   " }\n"
   "}\n")
  (env ()))
clos/con:
	'((con
   error
   (match
    (app eq? 'display p)
    ((#f) (-> (app error "unhandled primitive " p) <-))
    _))
  (env ()))
	'((con
   error
   (match
    (app integer? exp)
    ((#f) (-> (app error "unknown constant: " exp) <-))
    _))
  (env ()))
	'((con error (match (app app? exp) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
literals: '(⊥ ⊥ ⊤ ⊥)

'(query:
  (app
   string-append
   (-> (app java-compile-exp (app car args)) <-)
   (match (app pair? (app cdr ...)) ...))
  (env ()))
clos/con:
	'((con
   error
   (match
    (app eq? 'display p)
    ((#f) (-> (app error "unhandled primitive " p) <-))
    _))
  (env ()))
	'((con
   error
   (match
    (app integer? exp)
    ((#f) (-> (app error "unknown constant: " exp) <-))
    _))
  (env ()))
	'((con error (match (app app? exp) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
literals: '(⊥ ⊥ ⊤ ⊥)

'(query:
  (app
   string-append
   (-> (match (app is-mutable? (app car ...)) ...) <-)
   (app java-wrap-mutables (app cdr vars)))
  (env ()))
clos/con: ⊥
literals: '(⊥ ⊥ ⊤ ⊥)

'(query:
  (app
   string-append
   (app java-compile-exp (app car args))
   (-> (match (app pair? (app cdr ...)) ...) <-))
  (env ()))
clos/con: ⊥
literals: '(⊥ ⊥ ⊤ ⊥)

'(query:
  (app
   string-append
   (match (app is-mutable? (app car ...)) ...)
   (-> (app java-wrap-mutables (app cdr vars)) <-))
  (env ()))
clos/con: ⊥
literals: '(⊥ ⊥ ⊤ ⊥)

'(query:
  (app analyze-mutable-variables (-> (app cadr (app letrec1->binding exp)) <-))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query:
  (app analyze-mutable-variables (-> (app if->condition exp) <-))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query:
  (app analyze-mutable-variables (-> (app lambda->exp exp) <-))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query:
  (app analyze-mutable-variables (-> (app letrec1->exp exp) <-))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query:
  (app cons '+ (-> (app cons 3 (app cons 'x (app cons ...))) <-))
  (env ()))
clos/con:
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app cons ...))) <-)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app cons '+ (-> (app cons 3 (app cons 'x (app nil ...))) <-))
  (env ()))
clos/con:
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app nil ...))) <-)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app cons 'F (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app cons 'F (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app cons 'z (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-))
  (env ()))
clos/con:
	'((con
   cons
   (app cons 'z (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app cons (-> (app car lst1) <-) (app append (app cdr lst1) lst2))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query:
  (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil))
  (env ()))
clos/con:
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil))
  (env ()))
clos/con:
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil)))
  (env ()))
clos/con:
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app cons (-> (app f (app car lst)) <-) (app map f (app cdr lst)))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query:
  (app cons (app car lst1) (-> (app append (app cdr lst1) lst2) <-))
  (env ()))
clos/con:
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app cons (app cons '+ (app cons 3 (app cons ...))) (-> (app nil) <-))
  (env ()))
clos/con:
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app cons (app cons '+ (app cons 3 (app cons ...))) (-> (app nil) <-))
  (env ()))
clos/con:
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app cons (app cons name (app nil)) (-> (app cons arg (app nil)) <-))
  (env ()))
clos/con:
	'((con
   cons
   (app cons (app cons name (app nil)) (-> (app cons arg (app nil)) <-)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app cons (app f (app car lst)) (-> (app map f (app cdr lst)) <-))
  (env ()))
clos/con:
	'((con
   cons
   (match
    (app pair? lst)
    (#f)
    (_ (-> (app cons (app f (app car ...)) (app map f (app cdr ...))) <-))))
  (env ()))
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app cons 3 (-> (app cons 'x (app cons 'z (app nil ...))) <-))
  (env ()))
clos/con:
	'((con cons (app cons 3 (-> (app cons 'x (app cons 'z (app nil ...))) <-)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app display (-> (app java-compile-program input-program) <-))
  (env ()))
clos/con: ⊥
literals: '(⊥ ⊥ ⊤ ⊥)

'(query:
  (app m (-> (app string->list (app symbol->string symbol)) <-))
  (env ()))
clos/con:
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app map analyze-mutable-variables (-> (app begin->exps exp) <-))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append vars (app nil ...))
      (app cons (app let->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'x (app nil ...))
      (app cons (app cons ...) (app cons ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app cons (app cons name (app nil ...)) (app cons arg (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app dummy-bind ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app letrec1->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app Yn num-args)
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append vars (app nil))
    (-> (app cons (app let->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'lambda (app cons (app cons ...) (app cons ...)))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'let (app cons (app cons ...) (app cons ...)))
    (-> (app cons 10 (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'x (app nil))
    (->
     (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons '$_ (app cons ...)) (app nil))
    (-> (app cons (app dummy-bind (app cdr ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons 'z (app cons ...)) (app nil))
    (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons name (app cons ...)) (app nil))
    (-> (app cons (app letrec1->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    name
    (-> (app cons (app cons (app Yn ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons 'z (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons (app cons name (app nil)) (-> (app cons arg (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app set! mutable-variables (-> (app cons symbol mutable-variables) <-)))
  (env ()))
	'((con
   cons
   (match
    (app <= n 0)
    ((#f)
     (->
      (app
       cons
       (app string->symbol (app string-append ...))
       (app xargs (app - ...)))
      <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? lst)
    (#f)
    (_ (-> (app cons (app f (app car ...)) (app map f (app cdr ...))) <-))))
  (env ()))
	'((con cons (app cons '$_ (-> (app cons (app car exps) (app nil)) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app cons ...))) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'x (-> (app cons 'z (app nil)) <-))) (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app cons 'z (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app nil)) <-))) (env ()))
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app set! mutable-variables (-> (app cons symbol mutable-variables) <-))
  (env ()))
clos/con:
	'((con
   cons
   (app set! mutable-variables (-> (app cons symbol mutable-variables) <-)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (app string->symbol (-> (app string-append "x" (app number->string n)) <-))
  (env ()))
clos/con: ⊥
literals: '(⊥ ⊥ ⊤ ⊥)

'(query:
  (app string-append ", " (-> (app java-compile-args (app cdr args)) <-))
  (env ()))
clos/con: ⊥
literals: '(⊥ ⊥ ⊤ ⊥)

'(query:
  (app string-append ", " (-> (app java-compile-formals (app cdr formals)) <-))
  (env ()))
clos/con: ⊥
literals: '(⊥ ⊥ ⊤ ⊥)

'(query:
  (app string-append "new IntValue(" (-> (app number->string exp) <-) ")")
  (env ()))
clos/con: ⊥
literals: '(⊥ ⊥ ⊤ ⊥)

'(query:
  (let (...
        ()
        (_
         (->
          (app
           map
           analyze-mutable-variables
           (app map cadr (app let->bindings ...)))
          <-))
        ()
        ...)
    ...)
  (env ()))
clos/con:
	'((con
   cons
   (match
    (app pair? lst)
    (#f)
    (_ (-> (app cons (app f (app car ...)) (app map f (app cdr ...))) <-))))
  (env ()))
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (let (...
        ()
        (_
         (->
          (app analyze-mutable-variables (app cadr (app letrec1->binding ...)))
          <-))
        ()
        ...)
    ...)
  (env ()))
clos/con:
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con void) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (let (...
        ()
        (_ (-> (app analyze-mutable-variables (app if->condition exp)) <-))
        ()
        ...)
    ...)
  (env ()))
clos/con:
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con void) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (let (...
        ()
        (_ (-> (app analyze-mutable-variables (app if->then exp)) <-))
        ()
        ...)
    ...)
  (env ()))
clos/con:
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con void) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (let (...
        ()
        (_ (-> (app analyze-mutable-variables input-program) <-))
        ()
        ...)
    ...)
  (env ()))
clos/con:
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con void) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (let (...
        ()
        (_ (-> (app map analyze-mutable-variables (app begin->exps exp)) <-))
        ()
        ...)
    ...)
  (env ()))
clos/con:
	'((con
   cons
   (match
    (app pair? lst)
    (#f)
    (_ (-> (app cons (app f (app car ...)) (app map f (app cdr ...))) <-))))
  (env ()))
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (let (... () (_ (-> (app map analyze-mutable-variables exp) <-)) () ...) ...)
  (env ()))
clos/con:
	'((con
   cons
   (match
    (app pair? lst)
    (#f)
    (_ (-> (app cons (app f (app car ...)) (app map f (app cdr ...))) <-))))
  (env ()))
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (let (... () (vars (-> (app map car (app let->bindings exp)) <-)) args ...)
    ...)
  (env ()))
clos/con:
	'((con
   cons
   (match
    (app pair? lst)
    (#f)
    (_ (-> (app cons (app f (app car ...)) (app map f (app cdr ...))) <-))))
  (env ()))
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (let (... vars (args (-> (app map cadr (app let->bindings exp)) <-)) () ...)
    ...)
  (env ()))
clos/con:
	'((con
   cons
   (match
    (app pair? lst)
    (#f)
    (_ (-> (app cons (app f (app car ...)) (app map f (app cdr ...))) <-))))
  (env ()))
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (let (_) (-> (app analyze-mutable-variables (app if->else exp)) <-))
  (env ()))
clos/con:
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con void) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (let (_) (-> (app analyze-mutable-variables (app let->exp exp)) <-))
  (env ()))
clos/con:
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con void) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (let (_) (-> (app analyze-mutable-variables (app letrec1->exp exp)) <-))
  (env ()))
clos/con:
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con void) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (let (_) (-> (app display (app java-compile-program input-program)) <-))
  (env ()))
clos/con:
	'((con void) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (let (vars ... args)
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-))
  (env ()))
clos/con:
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (let* (... () (args (-> (app app->args exp) <-)) fun ...) ...)
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append vars (app nil ...))
      (app cons (app let->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'x (app nil ...))
      (app cons (app cons ...) (app cons ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app cons (app cons name (app nil ...)) (app cons arg (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app dummy-bind ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app letrec1->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app Yn num-args)
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append vars (app nil))
    (-> (app cons (app let->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'lambda (app cons (app cons ...) (app cons ...)))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'let (app cons (app cons ...) (app cons ...)))
    (-> (app cons 10 (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'x (app nil))
    (->
     (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons '$_ (app cons ...)) (app nil))
    (-> (app cons (app dummy-bind (app cdr ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons 'z (app cons ...)) (app nil))
    (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons name (app cons ...)) (app nil))
    (-> (app cons (app letrec1->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    name
    (-> (app cons (app cons (app Yn ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons 'z (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons (app cons name (app nil)) (-> (app cons arg (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app set! mutable-variables (-> (app cons symbol mutable-variables) <-)))
  (env ()))
	'((con
   cons
   (match
    (app <= n 0)
    ((#f)
     (->
      (app
       cons
       (app string->symbol (app string-append ...))
       (app xargs (app - ...)))
      <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? lst)
    (#f)
    (_ (-> (app cons (app f (app car ...)) (app map f (app cdr ...))) <-))))
  (env ()))
	'((con cons (app cons '$_ (-> (app cons (app car exps) (app nil)) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app cons ...))) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'x (-> (app cons 'z (app nil)) <-))) (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app cons 'z (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app nil)) <-))) (env ()))
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (let* (... () (binding (-> (app letrec1->binding exp) <-)) name ...) ...)
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query:
  (let* (... () (formals (-> (app lambda->formals exp) <-)) num-args ...) ...)
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query:
  (let* (... arg (num-args (-> (app arity arg) <-)) () ...) ...)
  (env ()))
clos/con: ⊥
literals: '(⊤ ⊥ ⊥ ⊥)

'(query:
  (let* (... args (fun (-> (app app->fun exp) <-)) num-args ...) ...)
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query:
  (let* (... binding (name (-> (app car binding) <-)) arg ...) ...)
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query:
  (let* (... formals (num-args (-> (app length formals) <-)) () ...) ...)
  (env ()))
clos/con: ⊥
literals: '(⊤ ⊥ ⊥ ⊥)

'(query:
  (let* (... fun (num-args (-> (app length args) <-)) () ...) ...)
  (env ()))
clos/con: ⊥
literals: '(⊤ ⊥ ⊥ ⊥)

'(query:
  (let* (... name (arg (-> (app cadr binding) <-)) num-args ...) ...)
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query:
  (let* (args ... num-args)
    (->
     (app
      string-append
      "((ProcValue"
      (app number->string num-args)
      ")("
      (app java-compile-exp fun)
      ")).apply("
      (app java-compile-args args)
      ")\n")
     <-))
  (env ()))
clos/con: ⊥
literals: '(⊥ ⊥ ⊤ ⊥)

'(query:
  (let* (binding ... num-args)
    (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))
  (env ()))
clos/con:
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (let* (formals ... num-args)
    (->
     (app
      string-append
      "new NullProcValue"
      (app number->string num-args)
      " () {\n"
      " public Value apply("
      (app java-compile-formals formals)
      ") {\n"
      (app java-wrap-mutables formals)
      "\n"
      "  return "
      (app java-compile-exp (app lambda->exp ...))
      " ;\n"
      "}}\n")
     <-))
  (env ()))
clos/con: ⊥
literals: '(⊥ ⊥ ⊤ ⊥)

'(query:
  (letrec*
   (...
    java-compile-if
    (input-program
     (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
    ()
    ...)
   ...)
  (env ()))
clos/con:
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (letrec*
   (... begin=>let (mutable-variables (-> (app nil) <-)) mark-mutable ...)
   ...)
  (env ()))
clos/con:
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (letrec*
   (singlet? ... dummy-bind)
   (-> (app dummy-bind (app begin->exps exp)) <-))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query:
  (letrec* (java-wrap-mutables) (-> (let* (formals ... num-args) ...) <-))
  (env ()))
clos/con: ⊥
literals: '(⊥ ⊥ ⊤ ⊥)

'(query:
  (letrec* (m) (-> (app list->string (app m (app string->list ...))) <-))
  (env ()))
clos/con: ⊥
literals: '(⊥ ⊥ ⊤ ⊥)

'(query:
  (lettypes cons ... error (letrec* (car ... input-program) ...))
  (env ()))
clos/con:
	'((con void) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (match
   (app < i (app string-length s))
   (#f)
   (_ (-> (app cons (app string-ref s i) (app f (app + ...))) <-)))
  (env ()))
clos/con: ⊥
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (match
   (app <= n 0)
   ((#f)
    (->
     (app
      cons
      (app string->symbol (app string-append ...))
      (app xargs (app - ...)))
     <-))
   _)
  (env ()))
clos/con:
	'((con
   cons
   (match
    (app <= n 0)
    ((#f)
     (->
      (app
       cons
       (app string->symbol (app string-append ...))
       (app xargs (app - ...)))
      <-))
    _))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (match
   (app app? exp)
   ((#f) (-> (app error "unknown expression type: " exp) <-))
   _)
  (env ()))
clos/con:
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (match
   (app begin? exp)
   (#f)
   (_ (-> (app java-compile-exp (app begin=>let exp)) <-)))
  (env ()))
clos/con:
	'((con
   error
   (match
    (app eq? 'display p)
    ((#f) (-> (app error "unhandled primitive " p) <-))
    _))
  (env ()))
	'((con
   error
   (match
    (app integer? exp)
    ((#f) (-> (app error "unknown constant: " exp) <-))
    _))
  (env ()))
	'((con error (match (app app? exp) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
literals: '(⊥ ⊥ ⊤ ⊥)

'(query:
  (match
   (app eq? 'display p)
   ((#f) (-> (app error "unhandled primitive " p) <-))
   _)
  (env ()))
clos/con:
	'((con
   error
   (match
    (app eq? 'display p)
    ((#f) (-> (app error "unhandled primitive " p) <-))
    _))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (match
   (app eq? (app car S) symbol)
   ((#f) (-> (app is-in? (app cdr S)) <-))
   _)
  (env ()))
clos/con:
	'((con #f) (env ()))
	'((con #t) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (match
   (app integer? exp)
   (#f)
   (_
    (-> (app string-append "new IntValue(" (app number->string exp) ")") <-)))
  (env ()))
clos/con: ⊥
literals: '(⊥ ⊥ ⊤ ⊥)

'(query:
  (match
   (app integer? exp)
   ((#f) (-> (app error "unknown constant: " exp) <-))
   _)
  (env ()))
clos/con:
	'((con
   error
   (match
    (app integer? exp)
    ((#f) (-> (app error "unknown constant: " exp) <-))
    _))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (match
   (app is-mutable? (app car vars))
   (#f)
   (_
    (->
     (app
      string-append
      " final ValueCell m_"
      (app mangle (app car ...))
      " = new ValueCell("
      (app mangle (app car ...))
      ");\n")
     <-)))
  (env ()))
clos/con: ⊥
literals: '(⊥ ⊥ ⊤ ⊥)

'(query:
  (match
   (app is-mutable? exp)
   (#f)
   (_ (-> (app string-append "m_" (app mangle exp) ".value") <-)))
  (env ()))
clos/con: ⊥
literals: '(⊥ ⊥ ⊤ ⊥)

'(query:
  (match
   (app lambda? exp)
   (#f)
   (_ (-> (app analyze-mutable-variables (app lambda->exp exp)) <-)))
  (env ()))
clos/con:
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con void) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (match
   (app let? exp)
   (#f)
   (_ (-> (app java-compile-exp (app let=>lambda exp)) <-)))
  (env ()))
clos/con:
	'((con
   error
   (match
    (app eq? 'display p)
    ((#f) (-> (app error "unhandled primitive " p) <-))
    _))
  (env ()))
	'((con
   error
   (match
    (app integer? exp)
    ((#f) (-> (app error "unknown constant: " exp) <-))
    _))
  (env ()))
	'((con error (match (app app? exp) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
literals: '(⊥ ⊥ ⊤ ⊥)

'(query:
  (match
   (app letrec1? exp)
   (#f)
   (_ (-> (app java-compile-exp (app letrec1=>Y exp)) <-)))
  (env ()))
clos/con:
	'((con
   error
   (match
    (app eq? 'display p)
    ((#f) (-> (app error "unhandled primitive " p) <-))
    _))
  (env ()))
	'((con
   error
   (match
    (app integer? exp)
    ((#f) (-> (app error "unknown constant: " exp) <-))
    _))
  (env ()))
	'((con error (match (app app? exp) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
literals: '(⊥ ⊥ ⊤ ⊥)

'(query:
  (match
   (app not (app pair? S))
   ((#f) (-> (match (app eq? (app car ...) symbol) ...) <-))
   _)
  (env ()))
clos/con:
	'((con #f) (env ()))
	'((con #t) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (match
   (app not (app pair? args))
   ((#f)
    (->
     (app
      string-append
      (app java-compile-exp (app car ...))
      (match (app pair? ...) ...))
     <-))
   _)
  (env ()))
clos/con: ⊥
literals: '(⊥ ⊥ ⊤ ⊥)

'(query:
  (match
   (app not (app pair? formals))
   ((#f)
    (->
     (app
      string-append
      "final Value "
      (app mangle (app car ...))
      (match (app pair? ...) ...))
     <-))
   _)
  (env ()))
clos/con: ⊥
literals: '(⊥ ⊥ ⊤ ⊥)

'(query:
  (match
   (app not (app pair? lst1))
   ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
   _)
  (env ()))
clos/con:
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (match
   (app not (app pair? vars))
   ((#f)
    (->
     (app
      string-append
      (match (app is-mutable? ...) ...)
      (app java-wrap-mutables (app cdr ...)))
     <-))
   _)
  (env ()))
clos/con: ⊥
literals: '(⊥ ⊥ ⊤ ⊥)

'(query:
  (match
   (app pair? (app cdr args))
   (#f)
   (_ (-> (app string-append ", " (app java-compile-args (app cdr ...))) <-)))
  (env ()))
clos/con: ⊥
literals: '(⊥ ⊥ ⊤ ⊥)

'(query:
  (match
   (app pair? (app cdr formals))
   (#f)
   (_
    (-> (app string-append ", " (app java-compile-formals (app cdr ...))) <-)))
  (env ()))
clos/con: ⊥
literals: '(⊥ ⊥ ⊤ ⊥)

'(query:
  (match
   (app pair? exps)
   (#f)
   (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
clos/con:
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (match
   (app pair? l)
   (#f)
   (_ (-> (match (app eq? tag (app car ...)) ...) <-)))
  (env ()))
clos/con:
	'((con #f) (env ()))
	'((con #t) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (match
   (app pair? lst)
   (#f)
   (_ (-> (app cons (app f (app car ...)) (app map f (app cdr ...))) <-)))
  (env ()))
clos/con:
	'((con
   cons
   (match
    (app pair? lst)
    (#f)
    (_ (-> (app cons (app f (app car ...)) (app map f (app cdr ...))) <-))))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (match
   (app set!? exp)
   (#f)
   (_ (-> (app mark-mutable (app set!-var exp)) <-)))
  (env ()))
clos/con:
	'((con void) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (match
   (app tagged-list? 'letrec exp)
   (#f)
   (_ (-> (match (app = (app length ...) 1) ...) <-)))
  (env ()))
clos/con:
	'((con #f) (env ()))
	'((con #t) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (match
   length-l
   ((cons length-c length-d) (-> (app + 1 (app length length-d)) <-))
   (nil))
  (env ()))
clos/con: ⊥
literals: '(⊤ ⊥ ⊥ ⊥)

'(query:
  (match (app < i (app string-length s)) ((#f) (-> (app nil) <-)) _)
  (env ()))
clos/con:
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (match (app = (app length (app cadr ...)) 1) (#f) (_ (-> (app #t) <-)))
  (env ()))
clos/con:
	'((con #t) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (match (app = (app length (app cadr ...)) 1) ((#f) (-> (app #f) <-)) _)
  (env ()))
clos/con:
	'((con #f) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (match (app app? exp) (#f) (_ (-> (app java-compile-app exp) <-)))
  (env ()))
clos/con: ⊥
literals: '(⊥ ⊥ ⊤ ⊥)

'(query:
  (match (app app? exp) ((#f) (-> (app error "no-match") <-)) _)
  (env ()))
clos/con:
	'((con error (match (app app? exp) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (match (app begin? exp) ((#f) (-> (match (app app? exp) ...) <-)) _)
  (env ()))
clos/con:
	'((con error (match (app app? exp) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
literals: '(⊥ ⊥ ⊤ ⊥)

'(query:
  (match (app begin? exp) ((#f) (-> (match (app app? exp) ...) <-)) _)
  (env ()))
clos/con:
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con void) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (match (app const? exp) (#f) (_ (-> (app java-compile-const exp) <-)))
  (env ()))
clos/con:
	'((con
   error
   (match
    (app integer? exp)
    ((#f) (-> (app error "unknown constant: " exp) <-))
    _))
  (env ()))
literals: '(⊥ ⊥ ⊤ ⊥)

'(query:
  (match (app const? exp) ((#f) (-> (match (app prim? exp) ...) <-)) _)
  (env ()))
clos/con:
	'((con
   error
   (match
    (app eq? 'display p)
    ((#f) (-> (app error "unhandled primitive " p) <-))
    _))
  (env ()))
	'((con
   error
   (match
    (app integer? exp)
    ((#f) (-> (app error "unknown constant: " exp) <-))
    _))
  (env ()))
	'((con error (match (app app? exp) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
literals: '(⊥ ⊥ ⊤ ⊥)

'(query:
  (match (app const? exp) ((#f) (-> (match (app ref? exp) ...) <-)) _)
  (env ()))
clos/con:
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con void) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (match (app eq? '* p) ((#f) (-> (match (app eq? '= p) ...) <-)) _)
  (env ()))
clos/con:
	'((con
   error
   (match
    (app eq? 'display p)
    ((#f) (-> (app error "unhandled primitive " p) <-))
    _))
  (env ()))
literals: '(⊥ ⊥ ⊤ ⊥)

'(query:
  (match (app eq? '+ p) ((#f) (-> (match (app eq? '- p) ...) <-)) _)
  (env ()))
clos/con:
	'((con
   error
   (match
    (app eq? 'display p)
    ((#f) (-> (app error "unhandled primitive " p) <-))
    _))
  (env ()))
literals: '(⊥ ⊥ ⊤ ⊥)

'(query:
  (match (app eq? '- p) ((#f) (-> (match (app eq? '* p) ...) <-)) _)
  (env ()))
clos/con:
	'((con
   error
   (match
    (app eq? 'display p)
    ((#f) (-> (app error "unhandled primitive " p) <-))
    _))
  (env ()))
literals: '(⊥ ⊥ ⊤ ⊥)

'(query:
  (match (app eq? '= p) ((#f) (-> (match (app eq? 'display p) ...) <-)) _)
  (env ()))
clos/con:
	'((con
   error
   (match
    (app eq? 'display p)
    ((#f) (-> (app error "unhandled primitive " p) <-))
    _))
  (env ()))
literals: '(⊥ ⊥ "display" ⊥)

'(query:
  (match (app eq? (app car S) symbol) (#f) (_ (-> (app #t) <-)))
  (env ()))
clos/con:
	'((con #t) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (match (app eq? exp '*) ((#f) (-> (match (app eq? exp '=) ...) <-)) _)
  (env ()))
clos/con:
	'((con #f) (env ()))
	'((con #t) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (match (app eq? exp '+) ((#f) (-> (match (app eq? exp '-) ...) <-)) _)
  (env ()))
clos/con:
	'((con #f) (env ()))
	'((con #t) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (match (app eq? exp '-) ((#f) (-> (match (app eq? exp '*) ...) <-)) _)
  (env ()))
clos/con:
	'((con #f) (env ()))
	'((con #t) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (match (app eq? exp '=) ((#f) (-> (match (app eq? exp 'display) ...) <-)) _)
  (env ()))
clos/con:
	'((con #f) (env ()))
	'((con #t) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (match (app if? exp) (#f) (_ (-> (app java-compile-if exp) <-)))
  (env ()))
clos/con: ⊥
literals: '(⊥ ⊥ ⊤ ⊥)

'(query:
  (match (app if? exp) ((#f) (-> (match (app begin? exp) ...) <-)) _)
  (env ()))
clos/con:
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con void) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (match (app if? exp) ((#f) (-> (match (app set!? exp) ...) <-)) _)
  (env ()))
clos/con:
	'((con
   error
   (match
    (app eq? 'display p)
    ((#f) (-> (app error "unhandled primitive " p) <-))
    _))
  (env ()))
	'((con
   error
   (match
    (app integer? exp)
    ((#f) (-> (app error "unknown constant: " exp) <-))
    _))
  (env ()))
	'((con error (match (app app? exp) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
literals: '(⊥ ⊥ ⊤ ⊥)

'(query:
  (match (app is-mutable? exp) ((#f) (-> (app mangle exp) <-)) _)
  (env ()))
clos/con: ⊥
literals: '(⊥ ⊥ ⊤ ⊥)

'(query:
  (match (app lambda? exp) (#f) (_ (-> (app java-compile-lambda exp) <-)))
  (env ()))
clos/con: ⊥
literals: '(⊥ ⊥ ⊤ ⊥)

'(query:
  (match (app lambda? exp) ((#f) (-> (match (app if? exp) ...) <-)) _)
  (env ()))
clos/con:
	'((con
   error
   (match
    (app eq? 'display p)
    ((#f) (-> (app error "unhandled primitive " p) <-))
    _))
  (env ()))
	'((con
   error
   (match
    (app integer? exp)
    ((#f) (-> (app error "unknown constant: " exp) <-))
    _))
  (env ()))
	'((con error (match (app app? exp) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
literals: '(⊥ ⊥ ⊤ ⊥)

'(query:
  (match (app lambda? exp) ((#f) (-> (match (app let? exp) ...) <-)) _)
  (env ()))
clos/con:
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con void) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (match (app let? exp) (#f) (_ (-> (let (vars ... args) ...) <-)))
  (env ()))
clos/con:
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (match (app let? exp) ((#f) (-> (match (app letrec1? exp) ...) <-)) _)
  (env ()))
clos/con:
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con void) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (match (app let? exp) ((#f) (-> (match (app letrec1? exp) ...) <-)) _)
  (env ()))
clos/con:
	'((con
   error
   (match
    (app eq? 'display p)
    ((#f) (-> (app error "unhandled primitive " p) <-))
    _))
  (env ()))
	'((con
   error
   (match
    (app integer? exp)
    ((#f) (-> (app error "unknown constant: " exp) <-))
    _))
  (env ()))
	'((con error (match (app app? exp) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
literals: '(⊥ ⊥ ⊤ ⊥)

'(query:
  (match (app letrec1? exp) (#f) (_ (-> (let* (binding ... num-args) ...) <-)))
  (env ()))
clos/con:
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (match (app letrec1? exp) ((#f) (-> (match (app begin? exp) ...) <-)) _)
  (env ()))
clos/con:
	'((con
   error
   (match
    (app eq? 'display p)
    ((#f) (-> (app error "unhandled primitive " p) <-))
    _))
  (env ()))
	'((con
   error
   (match
    (app integer? exp)
    ((#f) (-> (app error "unknown constant: " exp) <-))
    _))
  (env ()))
	'((con error (match (app app? exp) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
literals: '(⊥ ⊥ ⊤ ⊥)

'(query:
  (match (app letrec1? exp) ((#f) (-> (match (app set!? exp) ...) <-)) _)
  (env ()))
clos/con:
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con void) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (match (app list? l) (#f) (_ (-> (match (app = (app length ...) 1) ...) <-)))
  (env ()))
clos/con:
	'((con #f) (env ()))
	'((con #t) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _)
  (env ()))
clos/con:
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (match (app prim? exp) (#f) (_ (-> (app java-compile-prim exp) <-)))
  (env ()))
clos/con:
	'((con
   error
   (match
    (app eq? 'display p)
    ((#f) (-> (app error "unhandled primitive " p) <-))
    _))
  (env ()))
literals: '(⊥ ⊥ ⊤ ⊥)

'(query:
  (match (app prim? exp) ((#f) (-> (match (app lambda? exp) ...) <-)) _)
  (env ()))
clos/con:
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con void) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (match (app prim? exp) ((#f) (-> (match (app ref? exp) ...) <-)) _)
  (env ()))
clos/con:
	'((con
   error
   (match
    (app eq? 'display p)
    ((#f) (-> (app error "unhandled primitive " p) <-))
    _))
  (env ()))
	'((con
   error
   (match
    (app integer? exp)
    ((#f) (-> (app error "unknown constant: " exp) <-))
    _))
  (env ()))
	'((con error (match (app app? exp) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
literals: '(⊥ ⊥ ⊤ ⊥)

'(query:
  (match (app ref? exp) (#f) (_ (-> (app java-compile-ref exp) <-)))
  (env ()))
clos/con: ⊥
literals: '(⊥ ⊥ ⊤ ⊥)

'(query:
  (match (app ref? exp) ((#f) (-> (match (app lambda? exp) ...) <-)) _)
  (env ()))
clos/con:
	'((con
   error
   (match
    (app eq? 'display p)
    ((#f) (-> (app error "unhandled primitive " p) <-))
    _))
  (env ()))
	'((con
   error
   (match
    (app integer? exp)
    ((#f) (-> (app error "unknown constant: " exp) <-))
    _))
  (env ()))
	'((con error (match (app app? exp) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
literals: '(⊥ ⊥ ⊤ ⊥)

'(query:
  (match (app ref? exp) ((#f) (-> (match (app prim? exp) ...) <-)) _)
  (env ()))
clos/con:
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con void) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (match (app set!? exp) (#f) (_ (-> (app java-compile-set! exp) <-)))
  (env ()))
clos/con: ⊥
literals: '(⊥ ⊥ ⊤ ⊥)

'(query:
  (match (app set!? exp) ((#f) (-> (match (app if? exp) ...) <-)) _)
  (env ()))
clos/con:
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con void) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (match (app set!? exp) ((#f) (-> (match (app let? exp) ...) <-)) _)
  (env ()))
clos/con:
	'((con
   error
   (match
    (app eq? 'display p)
    ((#f) (-> (app error "unhandled primitive " p) <-))
    _))
  (env ()))
	'((con
   error
   (match
    (app integer? exp)
    ((#f) (-> (app error "unknown constant: " exp) <-))
    _))
  (env ()))
	'((con error (match (app app? exp) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
literals: '(⊥ ⊥ ⊤ ⊥)

'(query:
  (match (app singlet? exps) ((#f) (-> (match (app pair? exps) ...) <-)) _)
  (env ()))
clos/con:
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (match (app tagged-list? 'letrec exp) ((#f) (-> (app #f) <-)) _)
  (env ()))
clos/con:
	'((con #f) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (λ (exp)
    (->
     (app
      string-append
      "("
      (app java-compile-exp (app if->condition ...))
      ").toBoolean() ? ("
      (app java-compile-exp (app if->then ...))
      ") : ("
      (app java-compile-exp (app if->else ...))
      ")")
     <-))
  (env ()))
clos/con: ⊥
literals: '(⊥ ⊥ ⊤ ⊥)

'(query:
  (λ (exp)
    (->
     (app
      string-append
      "VoidValue.Void(m_"
      (app mangle (app set!-var ...))
      ".value = "
      (app java-compile-exp (app set!-exp ...))
      ")")
     <-))
  (env ()))
clos/con: ⊥
literals: '(⊥ ⊥ ⊤ ⊥)

'(query:
  (λ (exp)
    (->
     (app
      string-append
      "public class BOut extends RuntimeEnvironment {\n"
      " public static void main (String[] args) {\n"
      (app java-compile-exp exp)
      " ;\n"
      " }\n"
      "}\n")
     <-))
  (env ()))
clos/con: ⊥
literals: '(⊥ ⊥ ⊤ ⊥)

'(query:
  (λ (i) (-> (match (app < i (app string-length ...)) ...) <-))
  (env ()))
clos/con:
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (λ (lst1 lst2) (-> (match (app not (app pair? ...)) ...) <-))
  (env ()))
clos/con:
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (λ (n) (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-))
  (env ()))
clos/con:
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query:
  (λ (symbol)
    (-> (app set! mutable-variables (app cons symbol mutable-variables)) <-))
  (env ()))
clos/con:
	'((con void) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: ((top) lettypes (cons ... error) ...) (env ()))
clos/con:
	'((con void) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (app (-> f <-) (app car lst)) (env ()))
clos/con:
	'((letrec*
   (...
    is-mutable?
    (analyze-mutable-variables (-> (λ (exp) ...) <-))
    mangle
    ...)
   ...)
  (env ()))
	'((letrec* (... () (car (-> (λ (car-v) ...) <-)) cdr ...) ...) (env ()))
	'((letrec* (... null? (cadr (-> (λ (p) ...) <-)) caadr ...) ...) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (app + 1 (-> (app length length-d) <-)) (env ()))
clos/con: ⊥
literals: '(⊤ ⊥ ⊥ ⊥)

'(query: (app - (-> n <-) 1) (env ()))
clos/con: ⊥
literals: '(⊤ ⊥ ⊥ ⊥)

'(query: (app < (-> i <-) (app string-length s)) (env ()))
clos/con: ⊥
literals: '(0 ⊥ ⊥ ⊥)

'(query: (app < i (-> (app string-length s) <-)) (env ()))
clos/con: ⊥
literals: '(⊤ ⊥ ⊥ ⊥)

'(query: (app <= (-> n <-) 0) (env ()))
clos/con: ⊥
literals: '(⊤ ⊥ ⊥ ⊥)

'(query: (app = (-> (app length (app cadr exp)) <-) 1) (env ()))
clos/con: ⊥
literals: '(⊤ ⊥ ⊥ ⊥)

'(query: (app = (-> (app length l) <-) 1) (env ()))
clos/con: ⊥
literals: '(⊤ ⊥ ⊥ ⊥)

'(query: (app Yn (-> num-args <-)) (env ()))
clos/con: ⊥
literals: '(⊤ ⊥ ⊥ ⊥)

'(query: (app analyze-mutable-variables (-> (app if->else exp) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app analyze-mutable-variables (-> (app if->then exp) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app analyze-mutable-variables (-> (app let->exp exp) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app analyze-mutable-variables (-> input-program <-)) (env ()))
clos/con:
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (app app->args (-> exp <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app app->fun (-> exp <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app app? (-> exp <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app app? (-> exp <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app append (-> (app cdr lst1) <-) lst2) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append vars (app nil ...))
      (app cons (app let->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'x (app nil ...))
      (app cons (app cons ...) (app cons ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app cons (app cons name (app nil ...)) (app cons arg (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app dummy-bind ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app letrec1->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app Yn num-args)
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append vars (app nil))
    (-> (app cons (app let->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'lambda (app cons (app cons ...) (app cons ...)))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'let (app cons (app cons ...) (app cons ...)))
    (-> (app cons 10 (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'x (app nil))
    (->
     (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons '$_ (app cons ...)) (app nil))
    (-> (app cons (app dummy-bind (app cdr ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons 'z (app cons ...)) (app nil))
    (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons name (app cons ...)) (app nil))
    (-> (app cons (app letrec1->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    name
    (-> (app cons (app cons (app Yn ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons 'z (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons (app cons name (app nil)) (-> (app cons arg (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app set! mutable-variables (-> (app cons symbol mutable-variables) <-)))
  (env ()))
	'((con
   cons
   (match
    (app <= n 0)
    ((#f)
     (->
      (app
       cons
       (app string->symbol (app string-append ...))
       (app xargs (app - ...)))
      <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? lst)
    (#f)
    (_ (-> (app cons (app f (app car ...)) (app map f (app cdr ...))) <-))))
  (env ()))
	'((con cons (app cons '$_ (-> (app cons (app car exps) (app nil)) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app cons ...))) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'x (-> (app cons 'z (app nil)) <-))) (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app cons 'z (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app nil)) <-))) (env ()))
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (app append (-> (app xargs n) <-) (app nil)) (env ()))
clos/con:
	'((con
   cons
   (match
    (app <= n 0)
    ((#f)
     (->
      (app
       cons
       (app string->symbol (app string-append ...))
       (app xargs (app - ...)))
      <-))
    _))
  (env ()))
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (app append (-> (app xargs n) <-) (app nil)) (env ()))
clos/con:
	'((con
   cons
   (match
    (app <= n 0)
    ((#f)
     (->
      (app
       cons
       (app string->symbol (app string-append ...))
       (app xargs (app - ...)))
      <-))
    _))
  (env ()))
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (app append (-> (app xargs n) <-) (app nil)) (env ()))
clos/con:
	'((con
   cons
   (match
    (app <= n 0)
    ((#f)
     (->
      (app
       cons
       (app string->symbol (app string-append ...))
       (app xargs (app - ...)))
      <-))
    _))
  (env ()))
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (app append (-> (app xargs n) <-) (app nil)) (env ()))
clos/con:
	'((con
   cons
   (match
    (app <= n 0)
    ((#f)
     (->
      (app
       cons
       (app string->symbol (app string-append ...))
       (app xargs (app - ...)))
      <-))
    _))
  (env ()))
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (app append (-> args <-) (app nil)) (env ()))
clos/con:
	'((con
   cons
   (match
    (app pair? lst)
    (#f)
    (_ (-> (app cons (app f (app car ...)) (app map f (app cdr ...))) <-))))
  (env ()))
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (app append (-> vars <-) (app nil)) (env ()))
clos/con:
	'((con
   cons
   (match
    (app pair? lst)
    (#f)
    (_ (-> (app cons (app f (app car ...)) (app map f (app cdr ...))) <-))))
  (env ()))
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (app append (app cdr lst1) (-> lst2 <-)) (env ()))
clos/con:
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (app append (app xargs n) (-> (app nil) <-)) (env ()))
clos/con:
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (app append (app xargs n) (-> (app nil) <-)) (env ()))
clos/con:
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (app append (app xargs n) (-> (app nil) <-)) (env ()))
clos/con:
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (app append (app xargs n) (-> (app nil) <-)) (env ()))
clos/con:
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (app append args (-> (app nil) <-)) (env ()))
clos/con:
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (app append vars (-> (app nil) <-)) (env ()))
clos/con:
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (app arity (-> arg <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app begin->exps (-> exp <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app begin->exps (-> exp <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app begin=>let (-> exp <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app begin? (-> exp <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app begin? (-> exp <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app caadr (-> exp <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app cadddr (-> exp <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app caddr (-> exp <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app caddr (-> exp <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app caddr (-> exp <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app caddr (-> exp <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app caddr (-> exp <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app cadr (-> (app letrec1->binding exp) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app cadr (-> binding <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app cadr (-> exp <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app cadr (-> exp <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app cadr (-> exp <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app cadr (-> exp <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app cadr (-> exp <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app car (-> (app car (app cdr p)) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app car (-> (app cdr (app cdr (app cdr ...))) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append vars (app nil ...))
      (app cons (app let->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'x (app nil ...))
      (app cons (app cons ...) (app cons ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app cons (app cons name (app nil ...)) (app cons arg (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app dummy-bind ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app letrec1->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app Yn num-args)
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append vars (app nil))
    (-> (app cons (app let->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'lambda (app cons (app cons ...) (app cons ...)))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'let (app cons (app cons ...) (app cons ...)))
    (-> (app cons 10 (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'x (app nil))
    (->
     (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons '$_ (app cons ...)) (app nil))
    (-> (app cons (app dummy-bind (app cdr ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons 'z (app cons ...)) (app nil))
    (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons name (app cons ...)) (app nil))
    (-> (app cons (app letrec1->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    name
    (-> (app cons (app cons (app Yn ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons 'z (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons (app cons name (app nil)) (-> (app cons arg (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app set! mutable-variables (-> (app cons symbol mutable-variables) <-)))
  (env ()))
	'((con
   cons
   (match
    (app <= n 0)
    ((#f)
     (->
      (app
       cons
       (app string->symbol (app string-append ...))
       (app xargs (app - ...)))
      <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? lst)
    (#f)
    (_ (-> (app cons (app f (app car ...)) (app map f (app cdr ...))) <-))))
  (env ()))
	'((con cons (app cons '$_ (-> (app cons (app car exps) (app nil)) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app cons ...))) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'x (-> (app cons 'z (app nil)) <-))) (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app cons 'z (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app nil)) <-))) (env ()))
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (app car (-> (app cdr (app cdr p)) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append vars (app nil ...))
      (app cons (app let->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'x (app nil ...))
      (app cons (app cons ...) (app cons ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app cons (app cons name (app nil ...)) (app cons arg (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app dummy-bind ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app letrec1->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app Yn num-args)
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append vars (app nil))
    (-> (app cons (app let->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'lambda (app cons (app cons ...) (app cons ...)))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'let (app cons (app cons ...) (app cons ...)))
    (-> (app cons 10 (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'x (app nil))
    (->
     (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons '$_ (app cons ...)) (app nil))
    (-> (app cons (app dummy-bind (app cdr ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons 'z (app cons ...)) (app nil))
    (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons name (app cons ...)) (app nil))
    (-> (app cons (app letrec1->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    name
    (-> (app cons (app cons (app Yn ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons 'z (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons (app cons name (app nil)) (-> (app cons arg (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app set! mutable-variables (-> (app cons symbol mutable-variables) <-)))
  (env ()))
	'((con
   cons
   (match
    (app <= n 0)
    ((#f)
     (->
      (app
       cons
       (app string->symbol (app string-append ...))
       (app xargs (app - ...)))
      <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? lst)
    (#f)
    (_ (-> (app cons (app f (app car ...)) (app map f (app cdr ...))) <-))))
  (env ()))
	'((con cons (app cons '$_ (-> (app cons (app car exps) (app nil)) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app cons ...))) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'x (-> (app cons 'z (app nil)) <-))) (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app cons 'z (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app nil)) <-))) (env ()))
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (app car (-> (app cdr p) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append vars (app nil ...))
      (app cons (app let->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'x (app nil ...))
      (app cons (app cons ...) (app cons ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app cons (app cons name (app nil ...)) (app cons arg (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app dummy-bind ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app letrec1->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app Yn num-args)
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append vars (app nil))
    (-> (app cons (app let->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'lambda (app cons (app cons ...) (app cons ...)))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'let (app cons (app cons ...) (app cons ...)))
    (-> (app cons 10 (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'x (app nil))
    (->
     (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons '$_ (app cons ...)) (app nil))
    (-> (app cons (app dummy-bind (app cdr ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons 'z (app cons ...)) (app nil))
    (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons name (app cons ...)) (app nil))
    (-> (app cons (app letrec1->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    name
    (-> (app cons (app cons (app Yn ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons 'z (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons (app cons name (app nil)) (-> (app cons arg (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app set! mutable-variables (-> (app cons symbol mutable-variables) <-)))
  (env ()))
	'((con
   cons
   (match
    (app <= n 0)
    ((#f)
     (->
      (app
       cons
       (app string->symbol (app string-append ...))
       (app xargs (app - ...)))
      <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? lst)
    (#f)
    (_ (-> (app cons (app f (app car ...)) (app map f (app cdr ...))) <-))))
  (env ()))
	'((con cons (app cons '$_ (-> (app cons (app car exps) (app nil)) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app cons ...))) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'x (-> (app cons 'z (app nil)) <-))) (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app cons 'z (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app nil)) <-))) (env ()))
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (app car (-> (app cdr p) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append vars (app nil ...))
      (app cons (app let->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'x (app nil ...))
      (app cons (app cons ...) (app cons ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app cons (app cons name (app nil ...)) (app cons arg (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app dummy-bind ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app letrec1->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app Yn num-args)
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append vars (app nil))
    (-> (app cons (app let->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'lambda (app cons (app cons ...) (app cons ...)))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'let (app cons (app cons ...) (app cons ...)))
    (-> (app cons 10 (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'x (app nil))
    (->
     (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons '$_ (app cons ...)) (app nil))
    (-> (app cons (app dummy-bind (app cdr ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons 'z (app cons ...)) (app nil))
    (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons name (app cons ...)) (app nil))
    (-> (app cons (app letrec1->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    name
    (-> (app cons (app cons (app Yn ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons 'z (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons (app cons name (app nil)) (-> (app cons arg (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app set! mutable-variables (-> (app cons symbol mutable-variables) <-)))
  (env ()))
	'((con
   cons
   (match
    (app <= n 0)
    ((#f)
     (->
      (app
       cons
       (app string->symbol (app string-append ...))
       (app xargs (app - ...)))
      <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? lst)
    (#f)
    (_ (-> (app cons (app f (app car ...)) (app map f (app cdr ...))) <-))))
  (env ()))
	'((con cons (app cons '$_ (-> (app cons (app car exps) (app nil)) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app cons ...))) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'x (-> (app cons 'z (app nil)) <-))) (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app cons 'z (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app nil)) <-))) (env ()))
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (app car (-> S <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append vars (app nil ...))
      (app cons (app let->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'x (app nil ...))
      (app cons (app cons ...) (app cons ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app cons (app cons name (app nil ...)) (app cons arg (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app dummy-bind ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app letrec1->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app Yn num-args)
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append vars (app nil))
    (-> (app cons (app let->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'lambda (app cons (app cons ...) (app cons ...)))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'let (app cons (app cons ...) (app cons ...)))
    (-> (app cons 10 (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'x (app nil))
    (->
     (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons '$_ (app cons ...)) (app nil))
    (-> (app cons (app dummy-bind (app cdr ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons 'z (app cons ...)) (app nil))
    (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons name (app cons ...)) (app nil))
    (-> (app cons (app letrec1->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    name
    (-> (app cons (app cons (app Yn ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons 'z (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons (app cons name (app nil)) (-> (app cons arg (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app set! mutable-variables (-> (app cons symbol mutable-variables) <-)))
  (env ()))
	'((con
   cons
   (match
    (app <= n 0)
    ((#f)
     (->
      (app
       cons
       (app string->symbol (app string-append ...))
       (app xargs (app - ...)))
      <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? lst)
    (#f)
    (_ (-> (app cons (app f (app car ...)) (app map f (app cdr ...))) <-))))
  (env ()))
	'((con cons (app cons '$_ (-> (app cons (app car exps) (app nil)) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app cons ...))) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'x (-> (app cons 'z (app nil)) <-))) (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app cons 'z (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app nil)) <-))) (env ()))
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (app car (-> args <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append vars (app nil ...))
      (app cons (app let->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'x (app nil ...))
      (app cons (app cons ...) (app cons ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app cons (app cons name (app nil ...)) (app cons arg (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app dummy-bind ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app letrec1->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app Yn num-args)
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append vars (app nil))
    (-> (app cons (app let->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'lambda (app cons (app cons ...) (app cons ...)))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'let (app cons (app cons ...) (app cons ...)))
    (-> (app cons 10 (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'x (app nil))
    (->
     (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons '$_ (app cons ...)) (app nil))
    (-> (app cons (app dummy-bind (app cdr ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons 'z (app cons ...)) (app nil))
    (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons name (app cons ...)) (app nil))
    (-> (app cons (app letrec1->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    name
    (-> (app cons (app cons (app Yn ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons 'z (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons (app cons name (app nil)) (-> (app cons arg (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app set! mutable-variables (-> (app cons symbol mutable-variables) <-)))
  (env ()))
	'((con
   cons
   (match
    (app <= n 0)
    ((#f)
     (->
      (app
       cons
       (app string->symbol (app string-append ...))
       (app xargs (app - ...)))
      <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? lst)
    (#f)
    (_ (-> (app cons (app f (app car ...)) (app map f (app cdr ...))) <-))))
  (env ()))
	'((con cons (app cons '$_ (-> (app cons (app car exps) (app nil)) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app cons ...))) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'x (-> (app cons 'z (app nil)) <-))) (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app cons 'z (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app nil)) <-))) (env ()))
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (app car (-> binding <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app car (-> exp <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app car (-> exps <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append vars (app nil ...))
      (app cons (app let->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'x (app nil ...))
      (app cons (app cons ...) (app cons ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app cons (app cons name (app nil ...)) (app cons arg (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app dummy-bind ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app letrec1->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app Yn num-args)
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append vars (app nil))
    (-> (app cons (app let->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'lambda (app cons (app cons ...) (app cons ...)))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'let (app cons (app cons ...) (app cons ...)))
    (-> (app cons 10 (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'x (app nil))
    (->
     (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons '$_ (app cons ...)) (app nil))
    (-> (app cons (app dummy-bind (app cdr ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons 'z (app cons ...)) (app nil))
    (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons name (app cons ...)) (app nil))
    (-> (app cons (app letrec1->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    name
    (-> (app cons (app cons (app Yn ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons 'z (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons (app cons name (app nil)) (-> (app cons arg (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app set! mutable-variables (-> (app cons symbol mutable-variables) <-)))
  (env ()))
	'((con
   cons
   (match
    (app <= n 0)
    ((#f)
     (->
      (app
       cons
       (app string->symbol (app string-append ...))
       (app xargs (app - ...)))
      <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? lst)
    (#f)
    (_ (-> (app cons (app f (app car ...)) (app map f (app cdr ...))) <-))))
  (env ()))
	'((con cons (app cons '$_ (-> (app cons (app car exps) (app nil)) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app cons ...))) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'x (-> (app cons 'z (app nil)) <-))) (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app cons 'z (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app nil)) <-))) (env ()))
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (app car (-> exps <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append vars (app nil ...))
      (app cons (app let->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'x (app nil ...))
      (app cons (app cons ...) (app cons ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app cons (app cons name (app nil ...)) (app cons arg (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app dummy-bind ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app letrec1->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app Yn num-args)
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append vars (app nil))
    (-> (app cons (app let->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'lambda (app cons (app cons ...) (app cons ...)))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'let (app cons (app cons ...) (app cons ...)))
    (-> (app cons 10 (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'x (app nil))
    (->
     (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons '$_ (app cons ...)) (app nil))
    (-> (app cons (app dummy-bind (app cdr ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons 'z (app cons ...)) (app nil))
    (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons name (app cons ...)) (app nil))
    (-> (app cons (app letrec1->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    name
    (-> (app cons (app cons (app Yn ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons 'z (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons (app cons name (app nil)) (-> (app cons arg (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app set! mutable-variables (-> (app cons symbol mutable-variables) <-)))
  (env ()))
	'((con
   cons
   (match
    (app <= n 0)
    ((#f)
     (->
      (app
       cons
       (app string->symbol (app string-append ...))
       (app xargs (app - ...)))
      <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? lst)
    (#f)
    (_ (-> (app cons (app f (app car ...)) (app map f (app cdr ...))) <-))))
  (env ()))
	'((con cons (app cons '$_ (-> (app cons (app car exps) (app nil)) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app cons ...))) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'x (-> (app cons 'z (app nil)) <-))) (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app cons 'z (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app nil)) <-))) (env ()))
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (app car (-> formals <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append vars (app nil ...))
      (app cons (app let->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'x (app nil ...))
      (app cons (app cons ...) (app cons ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app cons (app cons name (app nil ...)) (app cons arg (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app dummy-bind ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app letrec1->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app Yn num-args)
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append vars (app nil))
    (-> (app cons (app let->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'lambda (app cons (app cons ...) (app cons ...)))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'let (app cons (app cons ...) (app cons ...)))
    (-> (app cons 10 (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'x (app nil))
    (->
     (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons '$_ (app cons ...)) (app nil))
    (-> (app cons (app dummy-bind (app cdr ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons 'z (app cons ...)) (app nil))
    (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons name (app cons ...)) (app nil))
    (-> (app cons (app letrec1->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    name
    (-> (app cons (app cons (app Yn ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons 'z (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (app cons (app cons name (app nil)) (-> (app cons arg (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app set! mutable-variables (-> (app cons symbol mutable-variables) <-)))
  (env ()))
	'((con
   cons
   (match
    (app <= n 0)
    ((#f)
     (->
      (app
       cons
       (app string->symbol (app string-append ...))
       (app xargs (app - ...)))
      <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (match
    (app pair? lst)
    (#f)
    (_ (-> (app cons (app f (app car ...)) (app map f (app cdr ...))) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con cons (app cons '$_ (-> (app cons (app car exps) (app nil)) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app cons ...))) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'x (-> (app cons 'z (app nil)) <-))) (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app cons 'z (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app nil)) <-))) (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app car (-> l <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app car (-> lst <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append vars (app nil ...))
      (app cons (app let->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'x (app nil ...))
      (app cons (app cons ...) (app cons ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app cons (app cons name (app nil ...)) (app cons arg (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app dummy-bind ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app letrec1->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app Yn num-args)
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append vars (app nil))
    (-> (app cons (app let->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'lambda (app cons (app cons ...) (app cons ...)))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'let (app cons (app cons ...) (app cons ...)))
    (-> (app cons 10 (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'x (app nil))
    (->
     (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons '$_ (app cons ...)) (app nil))
    (-> (app cons (app dummy-bind (app cdr ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons 'z (app cons ...)) (app nil))
    (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons name (app cons ...)) (app nil))
    (-> (app cons (app letrec1->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    name
    (-> (app cons (app cons (app Yn ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons 'z (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (app cons (app cons name (app nil)) (-> (app cons arg (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app set! mutable-variables (-> (app cons symbol mutable-variables) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app <= n 0)
    ((#f)
     (->
      (app
       cons
       (app string->symbol (app string-append ...))
       (app xargs (app - ...)))
      <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (match
    (app pair? lst)
    (#f)
    (_ (-> (app cons (app f (app car ...)) (app map f (app cdr ...))) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con cons (app cons '$_ (-> (app cons (app car exps) (app nil)) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app cons ...))) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'x (-> (app cons 'z (app nil)) <-))) (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app cons 'z (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app nil)) <-))) (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app car (-> lst1 <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append vars (app nil ...))
      (app cons (app let->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'x (app nil ...))
      (app cons (app cons ...) (app cons ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app cons (app cons name (app nil ...)) (app cons arg (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app dummy-bind ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app letrec1->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app Yn num-args)
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append vars (app nil))
    (-> (app cons (app let->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'lambda (app cons (app cons ...) (app cons ...)))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'let (app cons (app cons ...) (app cons ...)))
    (-> (app cons 10 (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'x (app nil))
    (->
     (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons '$_ (app cons ...)) (app nil))
    (-> (app cons (app dummy-bind (app cdr ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons 'z (app cons ...)) (app nil))
    (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons name (app cons ...)) (app nil))
    (-> (app cons (app letrec1->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    name
    (-> (app cons (app cons (app Yn ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons 'z (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons (app cons name (app nil)) (-> (app cons arg (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app set! mutable-variables (-> (app cons symbol mutable-variables) <-)))
  (env ()))
	'((con
   cons
   (match
    (app <= n 0)
    ((#f)
     (->
      (app
       cons
       (app string->symbol (app string-append ...))
       (app xargs (app - ...)))
      <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? lst)
    (#f)
    (_ (-> (app cons (app f (app car ...)) (app map f (app cdr ...))) <-))))
  (env ()))
	'((con cons (app cons '$_ (-> (app cons (app car exps) (app nil)) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app cons ...))) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'x (-> (app cons 'z (app nil)) <-))) (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app cons 'z (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app nil)) <-))) (env ()))
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (app car (-> vars <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append vars (app nil ...))
      (app cons (app let->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'x (app nil ...))
      (app cons (app cons ...) (app cons ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app cons (app cons name (app nil ...)) (app cons arg (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app dummy-bind ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app letrec1->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app Yn num-args)
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append vars (app nil))
    (-> (app cons (app let->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'lambda (app cons (app cons ...) (app cons ...)))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'let (app cons (app cons ...) (app cons ...)))
    (-> (app cons 10 (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'x (app nil))
    (->
     (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons '$_ (app cons ...)) (app nil))
    (-> (app cons (app dummy-bind (app cdr ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons 'z (app cons ...)) (app nil))
    (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons name (app cons ...)) (app nil))
    (-> (app cons (app letrec1->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    name
    (-> (app cons (app cons (app Yn ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons 'z (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (app cons (app cons name (app nil)) (-> (app cons arg (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app set! mutable-variables (-> (app cons symbol mutable-variables) <-)))
  (env ()))
	'((con
   cons
   (match
    (app <= n 0)
    ((#f)
     (->
      (app
       cons
       (app string->symbol (app string-append ...))
       (app xargs (app - ...)))
      <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (match
    (app pair? lst)
    (#f)
    (_ (-> (app cons (app f (app car ...)) (app map f (app cdr ...))) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con cons (app cons '$_ (-> (app cons (app car exps) (app nil)) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app cons ...))) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'x (-> (app cons 'z (app nil)) <-))) (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app cons 'z (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app nil)) <-))) (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app car (-> vars <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append vars (app nil ...))
      (app cons (app let->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'x (app nil ...))
      (app cons (app cons ...) (app cons ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app cons (app cons name (app nil ...)) (app cons arg (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app dummy-bind ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app letrec1->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app Yn num-args)
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append vars (app nil))
    (-> (app cons (app let->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'lambda (app cons (app cons ...) (app cons ...)))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'let (app cons (app cons ...) (app cons ...)))
    (-> (app cons 10 (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'x (app nil))
    (->
     (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons '$_ (app cons ...)) (app nil))
    (-> (app cons (app dummy-bind (app cdr ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons 'z (app cons ...)) (app nil))
    (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons name (app cons ...)) (app nil))
    (-> (app cons (app letrec1->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    name
    (-> (app cons (app cons (app Yn ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons 'z (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (app cons (app cons name (app nil)) (-> (app cons arg (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app set! mutable-variables (-> (app cons symbol mutable-variables) <-)))
  (env ()))
	'((con
   cons
   (match
    (app <= n 0)
    ((#f)
     (->
      (app
       cons
       (app string->symbol (app string-append ...))
       (app xargs (app - ...)))
      <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (match
    (app pair? lst)
    (#f)
    (_ (-> (app cons (app f (app car ...)) (app map f (app cdr ...))) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con cons (app cons '$_ (-> (app cons (app car exps) (app nil)) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app cons ...))) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'x (-> (app cons 'z (app nil)) <-))) (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app cons 'z (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app nil)) <-))) (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app car (-> vars <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append vars (app nil ...))
      (app cons (app let->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'x (app nil ...))
      (app cons (app cons ...) (app cons ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app cons (app cons name (app nil ...)) (app cons arg (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app dummy-bind ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app letrec1->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app Yn num-args)
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append vars (app nil))
    (-> (app cons (app let->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'lambda (app cons (app cons ...) (app cons ...)))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'let (app cons (app cons ...) (app cons ...)))
    (-> (app cons 10 (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'x (app nil))
    (->
     (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons '$_ (app cons ...)) (app nil))
    (-> (app cons (app dummy-bind (app cdr ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons 'z (app cons ...)) (app nil))
    (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons name (app cons ...)) (app nil))
    (-> (app cons (app letrec1->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    name
    (-> (app cons (app cons (app Yn ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons 'z (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (app cons (app cons name (app nil)) (-> (app cons arg (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app set! mutable-variables (-> (app cons symbol mutable-variables) <-)))
  (env ()))
	'((con
   cons
   (match
    (app <= n 0)
    ((#f)
     (->
      (app
       cons
       (app string->symbol (app string-append ...))
       (app xargs (app - ...)))
      <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (match
    (app pair? lst)
    (#f)
    (_ (-> (app cons (app f (app car ...)) (app map f (app cdr ...))) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con cons (app cons '$_ (-> (app cons (app car exps) (app nil)) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app cons ...))) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'x (-> (app cons 'z (app nil)) <-))) (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app cons 'z (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app nil)) <-))) (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app cdr (-> (app cdr (app cdr p)) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append vars (app nil ...))
      (app cons (app let->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'x (app nil ...))
      (app cons (app cons ...) (app cons ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app cons (app cons name (app nil ...)) (app cons arg (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app dummy-bind ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app letrec1->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app Yn num-args)
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append vars (app nil))
    (-> (app cons (app let->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'lambda (app cons (app cons ...) (app cons ...)))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'let (app cons (app cons ...) (app cons ...)))
    (-> (app cons 10 (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'x (app nil))
    (->
     (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons '$_ (app cons ...)) (app nil))
    (-> (app cons (app dummy-bind (app cdr ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons 'z (app cons ...)) (app nil))
    (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons name (app cons ...)) (app nil))
    (-> (app cons (app letrec1->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    name
    (-> (app cons (app cons (app Yn ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons 'z (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons (app cons name (app nil)) (-> (app cons arg (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app set! mutable-variables (-> (app cons symbol mutable-variables) <-)))
  (env ()))
	'((con
   cons
   (match
    (app <= n 0)
    ((#f)
     (->
      (app
       cons
       (app string->symbol (app string-append ...))
       (app xargs (app - ...)))
      <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? lst)
    (#f)
    (_ (-> (app cons (app f (app car ...)) (app map f (app cdr ...))) <-))))
  (env ()))
	'((con cons (app cons '$_ (-> (app cons (app car exps) (app nil)) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app cons ...))) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'x (-> (app cons 'z (app nil)) <-))) (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app cons 'z (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app nil)) <-))) (env ()))
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (app cdr (-> (app cdr p) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append vars (app nil ...))
      (app cons (app let->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'x (app nil ...))
      (app cons (app cons ...) (app cons ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app cons (app cons name (app nil ...)) (app cons arg (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app dummy-bind ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app letrec1->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app Yn num-args)
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append vars (app nil))
    (-> (app cons (app let->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'lambda (app cons (app cons ...) (app cons ...)))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'let (app cons (app cons ...) (app cons ...)))
    (-> (app cons 10 (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'x (app nil))
    (->
     (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons '$_ (app cons ...)) (app nil))
    (-> (app cons (app dummy-bind (app cdr ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons 'z (app cons ...)) (app nil))
    (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons name (app cons ...)) (app nil))
    (-> (app cons (app letrec1->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    name
    (-> (app cons (app cons (app Yn ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons 'z (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons (app cons name (app nil)) (-> (app cons arg (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app set! mutable-variables (-> (app cons symbol mutable-variables) <-)))
  (env ()))
	'((con
   cons
   (match
    (app <= n 0)
    ((#f)
     (->
      (app
       cons
       (app string->symbol (app string-append ...))
       (app xargs (app - ...)))
      <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? lst)
    (#f)
    (_ (-> (app cons (app f (app car ...)) (app map f (app cdr ...))) <-))))
  (env ()))
	'((con cons (app cons '$_ (-> (app cons (app car exps) (app nil)) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app cons ...))) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'x (-> (app cons 'z (app nil)) <-))) (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app cons 'z (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app nil)) <-))) (env ()))
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (app cdr (-> (app cdr p) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append vars (app nil ...))
      (app cons (app let->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'x (app nil ...))
      (app cons (app cons ...) (app cons ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app cons (app cons name (app nil ...)) (app cons arg (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app dummy-bind ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app letrec1->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app Yn num-args)
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append vars (app nil))
    (-> (app cons (app let->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'lambda (app cons (app cons ...) (app cons ...)))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'let (app cons (app cons ...) (app cons ...)))
    (-> (app cons 10 (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'x (app nil))
    (->
     (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons '$_ (app cons ...)) (app nil))
    (-> (app cons (app dummy-bind (app cdr ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons 'z (app cons ...)) (app nil))
    (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons name (app cons ...)) (app nil))
    (-> (app cons (app letrec1->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    name
    (-> (app cons (app cons (app Yn ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons 'z (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons (app cons name (app nil)) (-> (app cons arg (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app set! mutable-variables (-> (app cons symbol mutable-variables) <-)))
  (env ()))
	'((con
   cons
   (match
    (app <= n 0)
    ((#f)
     (->
      (app
       cons
       (app string->symbol (app string-append ...))
       (app xargs (app - ...)))
      <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? lst)
    (#f)
    (_ (-> (app cons (app f (app car ...)) (app map f (app cdr ...))) <-))))
  (env ()))
	'((con cons (app cons '$_ (-> (app cons (app car exps) (app nil)) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app cons ...))) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'x (-> (app cons 'z (app nil)) <-))) (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app cons 'z (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app nil)) <-))) (env ()))
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (app cdr (-> S <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append vars (app nil ...))
      (app cons (app let->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'x (app nil ...))
      (app cons (app cons ...) (app cons ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app cons (app cons name (app nil ...)) (app cons arg (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app dummy-bind ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app letrec1->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app Yn num-args)
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append vars (app nil))
    (-> (app cons (app let->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'lambda (app cons (app cons ...) (app cons ...)))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'let (app cons (app cons ...) (app cons ...)))
    (-> (app cons 10 (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'x (app nil))
    (->
     (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons '$_ (app cons ...)) (app nil))
    (-> (app cons (app dummy-bind (app cdr ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons 'z (app cons ...)) (app nil))
    (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons name (app cons ...)) (app nil))
    (-> (app cons (app letrec1->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    name
    (-> (app cons (app cons (app Yn ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons 'z (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons (app cons name (app nil)) (-> (app cons arg (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app set! mutable-variables (-> (app cons symbol mutable-variables) <-)))
  (env ()))
	'((con
   cons
   (match
    (app <= n 0)
    ((#f)
     (->
      (app
       cons
       (app string->symbol (app string-append ...))
       (app xargs (app - ...)))
      <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? lst)
    (#f)
    (_ (-> (app cons (app f (app car ...)) (app map f (app cdr ...))) <-))))
  (env ()))
	'((con cons (app cons '$_ (-> (app cons (app car exps) (app nil)) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app cons ...))) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'x (-> (app cons 'z (app nil)) <-))) (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app cons 'z (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app nil)) <-))) (env ()))
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (app cdr (-> args <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append vars (app nil ...))
      (app cons (app let->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'x (app nil ...))
      (app cons (app cons ...) (app cons ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app cons (app cons name (app nil ...)) (app cons arg (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app dummy-bind ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app letrec1->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app Yn num-args)
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append vars (app nil))
    (-> (app cons (app let->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'lambda (app cons (app cons ...) (app cons ...)))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'let (app cons (app cons ...) (app cons ...)))
    (-> (app cons 10 (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'x (app nil))
    (->
     (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons '$_ (app cons ...)) (app nil))
    (-> (app cons (app dummy-bind (app cdr ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons 'z (app cons ...)) (app nil))
    (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons name (app cons ...)) (app nil))
    (-> (app cons (app letrec1->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    name
    (-> (app cons (app cons (app Yn ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons 'z (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons (app cons name (app nil)) (-> (app cons arg (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app set! mutable-variables (-> (app cons symbol mutable-variables) <-)))
  (env ()))
	'((con
   cons
   (match
    (app <= n 0)
    ((#f)
     (->
      (app
       cons
       (app string->symbol (app string-append ...))
       (app xargs (app - ...)))
      <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? lst)
    (#f)
    (_ (-> (app cons (app f (app car ...)) (app map f (app cdr ...))) <-))))
  (env ()))
	'((con cons (app cons '$_ (-> (app cons (app car exps) (app nil)) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app cons ...))) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'x (-> (app cons 'z (app nil)) <-))) (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app cons 'z (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app nil)) <-))) (env ()))
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (app cdr (-> args <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append vars (app nil ...))
      (app cons (app let->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'x (app nil ...))
      (app cons (app cons ...) (app cons ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app cons (app cons name (app nil ...)) (app cons arg (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app dummy-bind ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app letrec1->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app Yn num-args)
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append vars (app nil))
    (-> (app cons (app let->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'lambda (app cons (app cons ...) (app cons ...)))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'let (app cons (app cons ...) (app cons ...)))
    (-> (app cons 10 (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'x (app nil))
    (->
     (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons '$_ (app cons ...)) (app nil))
    (-> (app cons (app dummy-bind (app cdr ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons 'z (app cons ...)) (app nil))
    (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons name (app cons ...)) (app nil))
    (-> (app cons (app letrec1->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    name
    (-> (app cons (app cons (app Yn ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons 'z (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons (app cons name (app nil)) (-> (app cons arg (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app set! mutable-variables (-> (app cons symbol mutable-variables) <-)))
  (env ()))
	'((con
   cons
   (match
    (app <= n 0)
    ((#f)
     (->
      (app
       cons
       (app string->symbol (app string-append ...))
       (app xargs (app - ...)))
      <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? lst)
    (#f)
    (_ (-> (app cons (app f (app car ...)) (app map f (app cdr ...))) <-))))
  (env ()))
	'((con cons (app cons '$_ (-> (app cons (app car exps) (app nil)) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app cons ...))) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'x (-> (app cons 'z (app nil)) <-))) (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app cons 'z (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app nil)) <-))) (env ()))
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (app cdr (-> exp <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app cdr (-> exp <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app cdr (-> exps <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append vars (app nil ...))
      (app cons (app let->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'x (app nil ...))
      (app cons (app cons ...) (app cons ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app cons (app cons name (app nil ...)) (app cons arg (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app dummy-bind ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app letrec1->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app Yn num-args)
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append vars (app nil))
    (-> (app cons (app let->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'lambda (app cons (app cons ...) (app cons ...)))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'let (app cons (app cons ...) (app cons ...)))
    (-> (app cons 10 (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'x (app nil))
    (->
     (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons '$_ (app cons ...)) (app nil))
    (-> (app cons (app dummy-bind (app cdr ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons 'z (app cons ...)) (app nil))
    (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons name (app cons ...)) (app nil))
    (-> (app cons (app letrec1->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    name
    (-> (app cons (app cons (app Yn ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons 'z (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons (app cons name (app nil)) (-> (app cons arg (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app set! mutable-variables (-> (app cons symbol mutable-variables) <-)))
  (env ()))
	'((con
   cons
   (match
    (app <= n 0)
    ((#f)
     (->
      (app
       cons
       (app string->symbol (app string-append ...))
       (app xargs (app - ...)))
      <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? lst)
    (#f)
    (_ (-> (app cons (app f (app car ...)) (app map f (app cdr ...))) <-))))
  (env ()))
	'((con cons (app cons '$_ (-> (app cons (app car exps) (app nil)) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app cons ...))) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'x (-> (app cons 'z (app nil)) <-))) (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app cons 'z (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app nil)) <-))) (env ()))
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (app cdr (-> formals <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append vars (app nil ...))
      (app cons (app let->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'x (app nil ...))
      (app cons (app cons ...) (app cons ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app cons (app cons name (app nil ...)) (app cons arg (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app dummy-bind ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app letrec1->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app Yn num-args)
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append vars (app nil))
    (-> (app cons (app let->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'lambda (app cons (app cons ...) (app cons ...)))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'let (app cons (app cons ...) (app cons ...)))
    (-> (app cons 10 (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'x (app nil))
    (->
     (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons '$_ (app cons ...)) (app nil))
    (-> (app cons (app dummy-bind (app cdr ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons 'z (app cons ...)) (app nil))
    (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons name (app cons ...)) (app nil))
    (-> (app cons (app letrec1->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    name
    (-> (app cons (app cons (app Yn ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons 'z (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (app cons (app cons name (app nil)) (-> (app cons arg (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app set! mutable-variables (-> (app cons symbol mutable-variables) <-)))
  (env ()))
	'((con
   cons
   (match
    (app <= n 0)
    ((#f)
     (->
      (app
       cons
       (app string->symbol (app string-append ...))
       (app xargs (app - ...)))
      <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (match
    (app pair? lst)
    (#f)
    (_ (-> (app cons (app f (app car ...)) (app map f (app cdr ...))) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con cons (app cons '$_ (-> (app cons (app car exps) (app nil)) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app cons ...))) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'x (-> (app cons 'z (app nil)) <-))) (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app cons 'z (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app nil)) <-))) (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app cdr (-> formals <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append vars (app nil ...))
      (app cons (app let->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'x (app nil ...))
      (app cons (app cons ...) (app cons ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app cons (app cons name (app nil ...)) (app cons arg (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app dummy-bind ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app letrec1->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app Yn num-args)
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append vars (app nil))
    (-> (app cons (app let->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'lambda (app cons (app cons ...) (app cons ...)))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'let (app cons (app cons ...) (app cons ...)))
    (-> (app cons 10 (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'x (app nil))
    (->
     (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons '$_ (app cons ...)) (app nil))
    (-> (app cons (app dummy-bind (app cdr ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons 'z (app cons ...)) (app nil))
    (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons name (app cons ...)) (app nil))
    (-> (app cons (app letrec1->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    name
    (-> (app cons (app cons (app Yn ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons 'z (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (app cons (app cons name (app nil)) (-> (app cons arg (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app set! mutable-variables (-> (app cons symbol mutable-variables) <-)))
  (env ()))
	'((con
   cons
   (match
    (app <= n 0)
    ((#f)
     (->
      (app
       cons
       (app string->symbol (app string-append ...))
       (app xargs (app - ...)))
      <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (match
    (app pair? lst)
    (#f)
    (_ (-> (app cons (app f (app car ...)) (app map f (app cdr ...))) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con cons (app cons '$_ (-> (app cons (app car exps) (app nil)) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app cons ...))) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'x (-> (app cons 'z (app nil)) <-))) (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app cons 'z (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app nil)) <-))) (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app cdr (-> lst <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append vars (app nil ...))
      (app cons (app let->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'x (app nil ...))
      (app cons (app cons ...) (app cons ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app cons (app cons name (app nil ...)) (app cons arg (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app dummy-bind ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app letrec1->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app Yn num-args)
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append vars (app nil))
    (-> (app cons (app let->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'lambda (app cons (app cons ...) (app cons ...)))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'let (app cons (app cons ...) (app cons ...)))
    (-> (app cons 10 (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'x (app nil))
    (->
     (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons '$_ (app cons ...)) (app nil))
    (-> (app cons (app dummy-bind (app cdr ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons 'z (app cons ...)) (app nil))
    (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons name (app cons ...)) (app nil))
    (-> (app cons (app letrec1->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    name
    (-> (app cons (app cons (app Yn ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons 'z (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (app cons (app cons name (app nil)) (-> (app cons arg (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app set! mutable-variables (-> (app cons symbol mutable-variables) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app <= n 0)
    ((#f)
     (->
      (app
       cons
       (app string->symbol (app string-append ...))
       (app xargs (app - ...)))
      <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (match
    (app pair? lst)
    (#f)
    (_ (-> (app cons (app f (app car ...)) (app map f (app cdr ...))) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con cons (app cons '$_ (-> (app cons (app car exps) (app nil)) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app cons ...))) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'x (-> (app cons 'z (app nil)) <-))) (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app cons 'z (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app nil)) <-))) (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app cdr (-> lst1 <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append vars (app nil ...))
      (app cons (app let->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'x (app nil ...))
      (app cons (app cons ...) (app cons ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app cons (app cons name (app nil ...)) (app cons arg (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app dummy-bind ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app letrec1->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app Yn num-args)
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append vars (app nil))
    (-> (app cons (app let->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'lambda (app cons (app cons ...) (app cons ...)))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'let (app cons (app cons ...) (app cons ...)))
    (-> (app cons 10 (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'x (app nil))
    (->
     (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons '$_ (app cons ...)) (app nil))
    (-> (app cons (app dummy-bind (app cdr ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons 'z (app cons ...)) (app nil))
    (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons name (app cons ...)) (app nil))
    (-> (app cons (app letrec1->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    name
    (-> (app cons (app cons (app Yn ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons 'z (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons (app cons name (app nil)) (-> (app cons arg (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app set! mutable-variables (-> (app cons symbol mutable-variables) <-)))
  (env ()))
	'((con
   cons
   (match
    (app <= n 0)
    ((#f)
     (->
      (app
       cons
       (app string->symbol (app string-append ...))
       (app xargs (app - ...)))
      <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? lst)
    (#f)
    (_ (-> (app cons (app f (app car ...)) (app map f (app cdr ...))) <-))))
  (env ()))
	'((con cons (app cons '$_ (-> (app cons (app car exps) (app nil)) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app cons ...))) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'x (-> (app cons 'z (app nil)) <-))) (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app cons 'z (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app nil)) <-))) (env ()))
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (app cdr (-> p <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app cdr (-> p <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app cdr (-> p <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app cdr (-> p <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app cdr (-> vars <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append vars (app nil ...))
      (app cons (app let->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'x (app nil ...))
      (app cons (app cons ...) (app cons ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app cons (app cons name (app nil ...)) (app cons arg (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app dummy-bind ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app letrec1->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app Yn num-args)
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append vars (app nil))
    (-> (app cons (app let->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'lambda (app cons (app cons ...) (app cons ...)))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'let (app cons (app cons ...) (app cons ...)))
    (-> (app cons 10 (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'x (app nil))
    (->
     (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons '$_ (app cons ...)) (app nil))
    (-> (app cons (app dummy-bind (app cdr ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons 'z (app cons ...)) (app nil))
    (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons name (app cons ...)) (app nil))
    (-> (app cons (app letrec1->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    name
    (-> (app cons (app cons (app Yn ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons 'z (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (app cons (app cons name (app nil)) (-> (app cons arg (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app set! mutable-variables (-> (app cons symbol mutable-variables) <-)))
  (env ()))
	'((con
   cons
   (match
    (app <= n 0)
    ((#f)
     (->
      (app
       cons
       (app string->symbol (app string-append ...))
       (app xargs (app - ...)))
      <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (match
    (app pair? lst)
    (#f)
    (_ (-> (app cons (app f (app car ...)) (app map f (app cdr ...))) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con cons (app cons '$_ (-> (app cons (app car exps) (app nil)) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app cons ...))) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'x (-> (app cons 'z (app nil)) <-))) (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app cons 'z (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app nil)) <-))) (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app cons '$_ (-> (app cons (app car exps) (app nil)) <-)) (env ()))
clos/con:
	'((con cons (app cons '$_ (-> (app cons (app car exps) (app nil)) <-)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (app cons 'F (-> (app nil) <-)) (env ()))
clos/con:
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (app cons 'F (-> (app nil) <-)) (env ()))
clos/con:
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (app cons 'F (-> (app nil) <-)) (env ()))
clos/con:
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (app cons 'F (-> (app nil) <-)) (env ()))
clos/con:
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (app cons 'h (-> (app cons 'h (app nil)) <-)) (env ()))
clos/con:
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (app cons 'h (-> (app cons 'h (app nil)) <-)) (env ()))
clos/con:
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (app cons 'h (-> (app nil) <-)) (env ()))
clos/con:
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (app cons 'h (-> (app nil) <-)) (env ()))
clos/con:
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (app cons 'h (-> (app nil) <-)) (env ()))
clos/con:
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (app cons 'h (-> (app nil) <-)) (env ()))
clos/con:
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (app cons 'x (-> (app cons 'z (app nil)) <-)) (env ()))
clos/con:
	'((con cons (app cons 'x (-> (app cons 'z (app nil)) <-))) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (app cons 'x (-> (app nil) <-)) (env ()))
clos/con:
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (app cons 'x (-> (app nil) <-)) (env ()))
clos/con:
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (app cons 'z (-> (app nil) <-)) (env ()))
clos/con:
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (app cons (-> (app car exps) <-) (app nil)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app cons (-> (app dummy-bind (app cdr exps)) <-) (app nil)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app cons (-> (app let->exp exp) <-) (app nil)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app cons (-> (app letrec1->exp exp) <-) (app nil)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app cons (-> (app string-ref s i) <-) (app f (app + i 1))) (env ()))
clos/con: ⊥
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (app cons (-> arg <-) (app nil)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app cons (-> name <-) (app nil)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app cons (-> symbol <-) mutable-variables) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app cons (app car exps) (-> (app nil) <-)) (env ()))
clos/con:
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (app cons (app dummy-bind (app cdr exps)) (-> (app nil) <-)) (env ()))
clos/con:
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (app cons (app let->exp exp) (-> (app nil) <-)) (env ()))
clos/con:
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (app cons (app letrec1->exp exp) (-> (app nil) <-)) (env ()))
clos/con:
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (app cons 10 (-> (app nil) <-)) (env ()))
clos/con:
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (app cons 3 (-> (app cons 'x (app nil)) <-)) (env ()))
clos/con:
	'((con cons (app cons 3 (-> (app cons 'x (app nil)) <-))) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (app cons arg (-> (app nil) <-)) (env ()))
clos/con:
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (app cons name (-> (app nil) <-)) (env ()))
clos/con:
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (app cons symbol (-> mutable-variables <-)) (env ()))
clos/con:
	'((con
   cons
   (app set! mutable-variables (-> (app cons symbol mutable-variables) <-)))
  (env ()))
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (app const? (-> exp <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app const? (-> exp <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app dummy-bind (-> (app begin->exps exp) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append vars (app nil ...))
      (app cons (app let->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'x (app nil ...))
      (app cons (app cons ...) (app cons ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app cons (app cons name (app nil ...)) (app cons arg (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app dummy-bind ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app letrec1->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app Yn num-args)
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append vars (app nil))
    (-> (app cons (app let->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'lambda (app cons (app cons ...) (app cons ...)))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'let (app cons (app cons ...) (app cons ...)))
    (-> (app cons 10 (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'x (app nil))
    (->
     (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons '$_ (app cons ...)) (app nil))
    (-> (app cons (app dummy-bind (app cdr ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons 'z (app cons ...)) (app nil))
    (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons name (app cons ...)) (app nil))
    (-> (app cons (app letrec1->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    name
    (-> (app cons (app cons (app Yn ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons 'z (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons (app cons name (app nil)) (-> (app cons arg (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app set! mutable-variables (-> (app cons symbol mutable-variables) <-)))
  (env ()))
	'((con
   cons
   (match
    (app <= n 0)
    ((#f)
     (->
      (app
       cons
       (app string->symbol (app string-append ...))
       (app xargs (app - ...)))
      <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? lst)
    (#f)
    (_ (-> (app cons (app f (app car ...)) (app map f (app cdr ...))) <-))))
  (env ()))
	'((con cons (app cons '$_ (-> (app cons (app car exps) (app nil)) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app cons ...))) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'x (-> (app cons 'z (app nil)) <-))) (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app cons 'z (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app nil)) <-))) (env ()))
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (app dummy-bind (-> (app cdr exps) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append vars (app nil ...))
      (app cons (app let->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'x (app nil ...))
      (app cons (app cons ...) (app cons ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app cons (app cons name (app nil ...)) (app cons arg (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app dummy-bind ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app letrec1->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app Yn num-args)
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append vars (app nil))
    (-> (app cons (app let->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'lambda (app cons (app cons ...) (app cons ...)))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'let (app cons (app cons ...) (app cons ...)))
    (-> (app cons 10 (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'x (app nil))
    (->
     (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons '$_ (app cons ...)) (app nil))
    (-> (app cons (app dummy-bind (app cdr ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons 'z (app cons ...)) (app nil))
    (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons name (app cons ...)) (app nil))
    (-> (app cons (app letrec1->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    name
    (-> (app cons (app cons (app Yn ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons 'z (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons (app cons name (app nil)) (-> (app cons arg (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app set! mutable-variables (-> (app cons symbol mutable-variables) <-)))
  (env ()))
	'((con
   cons
   (match
    (app <= n 0)
    ((#f)
     (->
      (app
       cons
       (app string->symbol (app string-append ...))
       (app xargs (app - ...)))
      <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? lst)
    (#f)
    (_ (-> (app cons (app f (app car ...)) (app map f (app cdr ...))) <-))))
  (env ()))
	'((con cons (app cons '$_ (-> (app cons (app car exps) (app nil)) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app cons ...))) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'x (-> (app cons 'z (app nil)) <-))) (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app cons 'z (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app nil)) <-))) (env ()))
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (app eq? '* (-> p <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app eq? '+ (-> p <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app eq? '- (-> p <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app eq? '= (-> p <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app eq? 'display (-> p <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app eq? (-> (app car S) <-) symbol) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app eq? (-> exp <-) '*) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app eq? (-> exp <-) '+) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app eq? (-> exp <-) '-) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app eq? (-> exp <-) '=) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app eq? (-> exp <-) 'display) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app eq? (-> tag <-) (app car l)) (env ()))
clos/con: ⊥
literals: '(⊥ ⊥ ⊥ ⊤)

'(query: (app eq? (app car S) (-> symbol <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app eq? tag (-> (app car l) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app error "unhandled primitive " (-> p <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app error "unknown constant: " (-> exp <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app error "unknown expression type: " (-> exp <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app f (-> (app car lst) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app if->condition (-> exp <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app if->condition (-> exp <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app if->else (-> exp <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app if->else (-> exp <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app if->then (-> exp <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app if->then (-> exp <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app if? (-> exp <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app if? (-> exp <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app integer? (-> exp <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app integer? (-> exp <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app is-in? (-> (app cdr S) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append vars (app nil ...))
      (app cons (app let->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'x (app nil ...))
      (app cons (app cons ...) (app cons ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app cons (app cons name (app nil ...)) (app cons arg (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app dummy-bind ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app letrec1->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app Yn num-args)
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append vars (app nil))
    (-> (app cons (app let->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'lambda (app cons (app cons ...) (app cons ...)))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'let (app cons (app cons ...) (app cons ...)))
    (-> (app cons 10 (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'x (app nil))
    (->
     (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons '$_ (app cons ...)) (app nil))
    (-> (app cons (app dummy-bind (app cdr ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons 'z (app cons ...)) (app nil))
    (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons name (app cons ...)) (app nil))
    (-> (app cons (app letrec1->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    name
    (-> (app cons (app cons (app Yn ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons 'z (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons (app cons name (app nil)) (-> (app cons arg (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app set! mutable-variables (-> (app cons symbol mutable-variables) <-)))
  (env ()))
	'((con
   cons
   (match
    (app <= n 0)
    ((#f)
     (->
      (app
       cons
       (app string->symbol (app string-append ...))
       (app xargs (app - ...)))
      <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? lst)
    (#f)
    (_ (-> (app cons (app f (app car ...)) (app map f (app cdr ...))) <-))))
  (env ()))
	'((con cons (app cons '$_ (-> (app cons (app car exps) (app nil)) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app cons ...))) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'x (-> (app cons 'z (app nil)) <-))) (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app cons 'z (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app nil)) <-))) (env ()))
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (app is-in? (-> mutable-variables <-)) (env ()))
clos/con:
	'((con
   cons
   (app set! mutable-variables (-> (app cons symbol mutable-variables) <-)))
  (env ()))
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (app is-mutable? (-> (app car vars) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app is-mutable? (-> exp <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app java-compile-app (-> exp <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app java-compile-args (-> (app cdr args) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append vars (app nil ...))
      (app cons (app let->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'x (app nil ...))
      (app cons (app cons ...) (app cons ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app cons (app cons name (app nil ...)) (app cons arg (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app dummy-bind ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app letrec1->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app Yn num-args)
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append vars (app nil))
    (-> (app cons (app let->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'lambda (app cons (app cons ...) (app cons ...)))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'let (app cons (app cons ...) (app cons ...)))
    (-> (app cons 10 (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'x (app nil))
    (->
     (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons '$_ (app cons ...)) (app nil))
    (-> (app cons (app dummy-bind (app cdr ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons 'z (app cons ...)) (app nil))
    (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons name (app cons ...)) (app nil))
    (-> (app cons (app letrec1->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    name
    (-> (app cons (app cons (app Yn ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons 'z (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons (app cons name (app nil)) (-> (app cons arg (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app set! mutable-variables (-> (app cons symbol mutable-variables) <-)))
  (env ()))
	'((con
   cons
   (match
    (app <= n 0)
    ((#f)
     (->
      (app
       cons
       (app string->symbol (app string-append ...))
       (app xargs (app - ...)))
      <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? lst)
    (#f)
    (_ (-> (app cons (app f (app car ...)) (app map f (app cdr ...))) <-))))
  (env ()))
	'((con cons (app cons '$_ (-> (app cons (app car exps) (app nil)) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app cons ...))) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'x (-> (app cons 'z (app nil)) <-))) (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app cons 'z (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app nil)) <-))) (env ()))
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (app java-compile-args (-> args <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append vars (app nil ...))
      (app cons (app let->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'x (app nil ...))
      (app cons (app cons ...) (app cons ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app cons (app cons name (app nil ...)) (app cons arg (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app dummy-bind ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app letrec1->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app Yn num-args)
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append vars (app nil))
    (-> (app cons (app let->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'lambda (app cons (app cons ...) (app cons ...)))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'let (app cons (app cons ...) (app cons ...)))
    (-> (app cons 10 (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'x (app nil))
    (->
     (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons '$_ (app cons ...)) (app nil))
    (-> (app cons (app dummy-bind (app cdr ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons 'z (app cons ...)) (app nil))
    (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons name (app cons ...)) (app nil))
    (-> (app cons (app letrec1->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    name
    (-> (app cons (app cons (app Yn ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons 'z (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons (app cons name (app nil)) (-> (app cons arg (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app set! mutable-variables (-> (app cons symbol mutable-variables) <-)))
  (env ()))
	'((con
   cons
   (match
    (app <= n 0)
    ((#f)
     (->
      (app
       cons
       (app string->symbol (app string-append ...))
       (app xargs (app - ...)))
      <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? lst)
    (#f)
    (_ (-> (app cons (app f (app car ...)) (app map f (app cdr ...))) <-))))
  (env ()))
	'((con cons (app cons '$_ (-> (app cons (app car exps) (app nil)) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app cons ...))) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'x (-> (app cons 'z (app nil)) <-))) (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app cons 'z (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app nil)) <-))) (env ()))
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (app java-compile-const (-> exp <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app java-compile-exp (-> (app begin=>let exp) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app java-compile-exp (-> (app car args) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app java-compile-exp (-> (app if->condition exp) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app java-compile-exp (-> (app if->else exp) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app java-compile-exp (-> (app if->then exp) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app java-compile-exp (-> (app lambda->exp exp) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app java-compile-exp (-> (app let=>lambda exp) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app java-compile-exp (-> (app letrec1=>Y exp) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app java-compile-exp (-> (app set!-exp exp) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app java-compile-exp (-> exp <-)) (env ()))
clos/con:
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (app java-compile-exp (-> fun <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app java-compile-formals (-> (app cdr formals) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append vars (app nil ...))
      (app cons (app let->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'x (app nil ...))
      (app cons (app cons ...) (app cons ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app cons (app cons name (app nil ...)) (app cons arg (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app dummy-bind ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app letrec1->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app Yn num-args)
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append vars (app nil))
    (-> (app cons (app let->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'lambda (app cons (app cons ...) (app cons ...)))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'let (app cons (app cons ...) (app cons ...)))
    (-> (app cons 10 (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'x (app nil))
    (->
     (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons '$_ (app cons ...)) (app nil))
    (-> (app cons (app dummy-bind (app cdr ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons 'z (app cons ...)) (app nil))
    (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons name (app cons ...)) (app nil))
    (-> (app cons (app letrec1->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    name
    (-> (app cons (app cons (app Yn ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons 'z (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons (app cons name (app nil)) (-> (app cons arg (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app set! mutable-variables (-> (app cons symbol mutable-variables) <-)))
  (env ()))
	'((con
   cons
   (match
    (app <= n 0)
    ((#f)
     (->
      (app
       cons
       (app string->symbol (app string-append ...))
       (app xargs (app - ...)))
      <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? lst)
    (#f)
    (_ (-> (app cons (app f (app car ...)) (app map f (app cdr ...))) <-))))
  (env ()))
	'((con cons (app cons '$_ (-> (app cons (app car exps) (app nil)) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app cons ...))) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'x (-> (app cons 'z (app nil)) <-))) (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app cons 'z (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app nil)) <-))) (env ()))
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (app java-compile-formals (-> formals <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app java-compile-if (-> exp <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app java-compile-lambda (-> exp <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app java-compile-prim (-> exp <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app java-compile-program (-> input-program <-)) (env ()))
clos/con:
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (app java-compile-ref (-> exp <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app java-compile-set! (-> exp <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app java-wrap-mutables (-> (app cdr vars) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append vars (app nil ...))
      (app cons (app let->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'x (app nil ...))
      (app cons (app cons ...) (app cons ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app cons (app cons name (app nil ...)) (app cons arg (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app dummy-bind ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app letrec1->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app Yn num-args)
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append vars (app nil))
    (-> (app cons (app let->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'lambda (app cons (app cons ...) (app cons ...)))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'let (app cons (app cons ...) (app cons ...)))
    (-> (app cons 10 (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'x (app nil))
    (->
     (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons '$_ (app cons ...)) (app nil))
    (-> (app cons (app dummy-bind (app cdr ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons 'z (app cons ...)) (app nil))
    (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons name (app cons ...)) (app nil))
    (-> (app cons (app letrec1->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    name
    (-> (app cons (app cons (app Yn ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons 'z (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons (app cons name (app nil)) (-> (app cons arg (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app set! mutable-variables (-> (app cons symbol mutable-variables) <-)))
  (env ()))
	'((con
   cons
   (match
    (app <= n 0)
    ((#f)
     (->
      (app
       cons
       (app string->symbol (app string-append ...))
       (app xargs (app - ...)))
      <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? lst)
    (#f)
    (_ (-> (app cons (app f (app car ...)) (app map f (app cdr ...))) <-))))
  (env ()))
	'((con cons (app cons '$_ (-> (app cons (app car exps) (app nil)) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app cons ...))) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'x (-> (app cons 'z (app nil)) <-))) (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app cons 'z (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app nil)) <-))) (env ()))
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (app java-wrap-mutables (-> formals <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app lambda->exp (-> exp <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app lambda->exp (-> exp <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app lambda->formals (-> exp <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app lambda->formals (-> lam <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app lambda? (-> exp <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app lambda? (-> exp <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app length (-> (app cadr exp) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app length (-> (app lambda->formals lam) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app length (-> args <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append vars (app nil ...))
      (app cons (app let->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'x (app nil ...))
      (app cons (app cons ...) (app cons ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app cons (app cons name (app nil ...)) (app cons arg (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app dummy-bind ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app letrec1->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app Yn num-args)
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append vars (app nil))
    (-> (app cons (app let->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'lambda (app cons (app cons ...) (app cons ...)))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'let (app cons (app cons ...) (app cons ...)))
    (-> (app cons 10 (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'x (app nil))
    (->
     (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons '$_ (app cons ...)) (app nil))
    (-> (app cons (app dummy-bind (app cdr ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons 'z (app cons ...)) (app nil))
    (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons name (app cons ...)) (app nil))
    (-> (app cons (app letrec1->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    name
    (-> (app cons (app cons (app Yn ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons 'z (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons (app cons name (app nil)) (-> (app cons arg (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app set! mutable-variables (-> (app cons symbol mutable-variables) <-)))
  (env ()))
	'((con
   cons
   (match
    (app <= n 0)
    ((#f)
     (->
      (app
       cons
       (app string->symbol (app string-append ...))
       (app xargs (app - ...)))
      <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? lst)
    (#f)
    (_ (-> (app cons (app f (app car ...)) (app map f (app cdr ...))) <-))))
  (env ()))
	'((con cons (app cons '$_ (-> (app cons (app car exps) (app nil)) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app cons ...))) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'x (-> (app cons 'z (app nil)) <-))) (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app cons 'z (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app nil)) <-))) (env ()))
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (app length (-> formals <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app length (-> l <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append vars (app nil ...))
      (app cons (app let->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'x (app nil ...))
      (app cons (app cons ...) (app cons ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app cons (app cons name (app nil ...)) (app cons arg (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app dummy-bind ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app letrec1->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app Yn num-args)
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append vars (app nil))
    (-> (app cons (app let->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'lambda (app cons (app cons ...) (app cons ...)))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'let (app cons (app cons ...) (app cons ...)))
    (-> (app cons 10 (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'x (app nil))
    (->
     (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons '$_ (app cons ...)) (app nil))
    (-> (app cons (app dummy-bind (app cdr ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons 'z (app cons ...)) (app nil))
    (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons name (app cons ...)) (app nil))
    (-> (app cons (app letrec1->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    name
    (-> (app cons (app cons (app Yn ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons 'z (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons (app cons name (app nil)) (-> (app cons arg (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app set! mutable-variables (-> (app cons symbol mutable-variables) <-)))
  (env ()))
	'((con
   cons
   (match
    (app <= n 0)
    ((#f)
     (->
      (app
       cons
       (app string->symbol (app string-append ...))
       (app xargs (app - ...)))
      <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? lst)
    (#f)
    (_ (-> (app cons (app f (app car ...)) (app map f (app cdr ...))) <-))))
  (env ()))
	'((con cons (app cons '$_ (-> (app cons (app car exps) (app nil)) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app cons ...))) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'x (-> (app cons 'z (app nil)) <-))) (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app cons 'z (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app nil)) <-))) (env ()))
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (app length (-> length-d <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append vars (app nil ...))
      (app cons (app let->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'x (app nil ...))
      (app cons (app cons ...) (app cons ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app cons (app cons name (app nil ...)) (app cons arg (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app dummy-bind ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app letrec1->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app Yn num-args)
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append vars (app nil))
    (-> (app cons (app let->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'lambda (app cons (app cons ...) (app cons ...)))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'let (app cons (app cons ...) (app cons ...)))
    (-> (app cons 10 (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'x (app nil))
    (->
     (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons '$_ (app cons ...)) (app nil))
    (-> (app cons (app dummy-bind (app cdr ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons 'z (app cons ...)) (app nil))
    (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons name (app cons ...)) (app nil))
    (-> (app cons (app letrec1->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    name
    (-> (app cons (app cons (app Yn ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons 'z (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons (app cons name (app nil)) (-> (app cons arg (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app set! mutable-variables (-> (app cons symbol mutable-variables) <-)))
  (env ()))
	'((con
   cons
   (match
    (app <= n 0)
    ((#f)
     (->
      (app
       cons
       (app string->symbol (app string-append ...))
       (app xargs (app - ...)))
      <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? lst)
    (#f)
    (_ (-> (app cons (app f (app car ...)) (app map f (app cdr ...))) <-))))
  (env ()))
	'((con cons (app cons '$_ (-> (app cons (app car exps) (app nil)) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app cons ...))) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'x (-> (app cons 'z (app nil)) <-))) (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app cons 'z (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app nil)) <-))) (env ()))
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (app let->bindings (-> exp <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app let->bindings (-> exp <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app let->bindings (-> exp <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app let->exp (-> exp <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app let->exp (-> exp <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app let=>lambda (-> exp <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app let? (-> exp <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app let? (-> exp <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app let? (-> exp <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app letrec1->binding (-> exp <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app letrec1->binding (-> exp <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app letrec1->exp (-> exp <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app letrec1->exp (-> exp <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app letrec1=>Y (-> exp <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app letrec1? (-> exp <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app letrec1? (-> exp <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app letrec1? (-> exp <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app list? (-> l <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append vars (app nil ...))
      (app cons (app let->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'x (app nil ...))
      (app cons (app cons ...) (app cons ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app cons (app cons name (app nil ...)) (app cons arg (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app dummy-bind ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app letrec1->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app Yn num-args)
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append vars (app nil))
    (-> (app cons (app let->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'lambda (app cons (app cons ...) (app cons ...)))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'let (app cons (app cons ...) (app cons ...)))
    (-> (app cons 10 (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'x (app nil))
    (->
     (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons '$_ (app cons ...)) (app nil))
    (-> (app cons (app dummy-bind (app cdr ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons 'z (app cons ...)) (app nil))
    (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons name (app cons ...)) (app nil))
    (-> (app cons (app letrec1->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    name
    (-> (app cons (app cons (app Yn ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons 'z (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons (app cons name (app nil)) (-> (app cons arg (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app set! mutable-variables (-> (app cons symbol mutable-variables) <-)))
  (env ()))
	'((con
   cons
   (match
    (app <= n 0)
    ((#f)
     (->
      (app
       cons
       (app string->symbol (app string-append ...))
       (app xargs (app - ...)))
      <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? lst)
    (#f)
    (_ (-> (app cons (app f (app car ...)) (app map f (app cdr ...))) <-))))
  (env ()))
	'((con cons (app cons '$_ (-> (app cons (app car exps) (app nil)) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app cons ...))) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'x (-> (app cons 'z (app nil)) <-))) (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app cons 'z (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app nil)) <-))) (env ()))
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (app mangle (-> (app car formals) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app mangle (-> (app car vars) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app mangle (-> (app car vars) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app mangle (-> (app set!-var exp) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app mangle (-> exp <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app mangle (-> exp <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app map (-> f <-) (app cdr lst)) (env ()))
clos/con:
	'((letrec*
   (...
    is-mutable?
    (analyze-mutable-variables (-> (λ (exp) ...) <-))
    mangle
    ...)
   ...)
  (env ()))
	'((letrec* (... () (car (-> (λ (car-v) ...) <-)) cdr ...) ...) (env ()))
	'((letrec* (... null? (cadr (-> (λ (p) ...) <-)) caadr ...) ...) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (app map analyze-mutable-variables (-> exp <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app map cadr (-> (app let->bindings exp) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app map cadr (-> (app let->bindings exp) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app map car (-> (app let->bindings exp) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app map f (-> (app cdr lst) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append vars (app nil ...))
      (app cons (app let->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'x (app nil ...))
      (app cons (app cons ...) (app cons ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app cons (app cons name (app nil ...)) (app cons arg (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app dummy-bind ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app letrec1->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app Yn num-args)
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append vars (app nil))
    (-> (app cons (app let->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'lambda (app cons (app cons ...) (app cons ...)))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'let (app cons (app cons ...) (app cons ...)))
    (-> (app cons 10 (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'x (app nil))
    (->
     (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons '$_ (app cons ...)) (app nil))
    (-> (app cons (app dummy-bind (app cdr ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons 'z (app cons ...)) (app nil))
    (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons name (app cons ...)) (app nil))
    (-> (app cons (app letrec1->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    name
    (-> (app cons (app cons (app Yn ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons 'z (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons (app cons name (app nil)) (-> (app cons arg (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app set! mutable-variables (-> (app cons symbol mutable-variables) <-)))
  (env ()))
	'((con
   cons
   (match
    (app <= n 0)
    ((#f)
     (->
      (app
       cons
       (app string->symbol (app string-append ...))
       (app xargs (app - ...)))
      <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? lst)
    (#f)
    (_ (-> (app cons (app f (app car ...)) (app map f (app cdr ...))) <-))))
  (env ()))
	'((con cons (app cons '$_ (-> (app cons (app car exps) (app nil)) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app cons ...))) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'x (-> (app cons 'z (app nil)) <-))) (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app cons 'z (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app nil)) <-))) (env ()))
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (app mark-mutable (-> (app set!-var exp) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app not (-> (app pair? S) <-)) (env ()))
clos/con:
	'((con #f) (env ()))
	'((con #t) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (app not (-> (app pair? args) <-)) (env ()))
clos/con:
	'((con #f) (env ()))
	'((con #t) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (app not (-> (app pair? formals) <-)) (env ()))
clos/con:
	'((con #f) (env ()))
	'((con #t) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (app not (-> (app pair? lst1) <-)) (env ()))
clos/con:
	'((con #f) (env ()))
	'((con #t) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (app not (-> (app pair? vars) <-)) (env ()))
clos/con:
	'((con #f) (env ()))
	'((con #t) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (app null? (-> chars <-)) (env ()))
clos/con:
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (app number->string (-> exp <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app number->string (-> n <-)) (env ()))
clos/con: ⊥
literals: '(⊤ ⊥ ⊥ ⊥)

'(query: (app number->string (-> num-args <-)) (env ()))
clos/con: ⊥
literals: '(⊤ ⊥ ⊥ ⊥)

'(query: (app number->string (-> num-args <-)) (env ()))
clos/con: ⊥
literals: '(⊤ ⊥ ⊥ ⊥)

'(query: (app pair? (-> (app cdr args) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append vars (app nil ...))
      (app cons (app let->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'x (app nil ...))
      (app cons (app cons ...) (app cons ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app cons (app cons name (app nil ...)) (app cons arg (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app dummy-bind ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app letrec1->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app Yn num-args)
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append vars (app nil))
    (-> (app cons (app let->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'lambda (app cons (app cons ...) (app cons ...)))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'let (app cons (app cons ...) (app cons ...)))
    (-> (app cons 10 (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'x (app nil))
    (->
     (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons '$_ (app cons ...)) (app nil))
    (-> (app cons (app dummy-bind (app cdr ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons 'z (app cons ...)) (app nil))
    (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons name (app cons ...)) (app nil))
    (-> (app cons (app letrec1->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    name
    (-> (app cons (app cons (app Yn ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons 'z (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons (app cons name (app nil)) (-> (app cons arg (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app set! mutable-variables (-> (app cons symbol mutable-variables) <-)))
  (env ()))
	'((con
   cons
   (match
    (app <= n 0)
    ((#f)
     (->
      (app
       cons
       (app string->symbol (app string-append ...))
       (app xargs (app - ...)))
      <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? lst)
    (#f)
    (_ (-> (app cons (app f (app car ...)) (app map f (app cdr ...))) <-))))
  (env ()))
	'((con cons (app cons '$_ (-> (app cons (app car exps) (app nil)) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app cons ...))) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'x (-> (app cons 'z (app nil)) <-))) (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app cons 'z (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app nil)) <-))) (env ()))
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (app pair? (-> (app cdr formals) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append vars (app nil ...))
      (app cons (app let->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'x (app nil ...))
      (app cons (app cons ...) (app cons ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app cons (app cons name (app nil ...)) (app cons arg (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app dummy-bind ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app letrec1->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app Yn num-args)
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append vars (app nil))
    (-> (app cons (app let->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'lambda (app cons (app cons ...) (app cons ...)))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'let (app cons (app cons ...) (app cons ...)))
    (-> (app cons 10 (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'x (app nil))
    (->
     (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons '$_ (app cons ...)) (app nil))
    (-> (app cons (app dummy-bind (app cdr ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons 'z (app cons ...)) (app nil))
    (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons name (app cons ...)) (app nil))
    (-> (app cons (app letrec1->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    name
    (-> (app cons (app cons (app Yn ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons 'z (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons (app cons name (app nil)) (-> (app cons arg (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app set! mutable-variables (-> (app cons symbol mutable-variables) <-)))
  (env ()))
	'((con
   cons
   (match
    (app <= n 0)
    ((#f)
     (->
      (app
       cons
       (app string->symbol (app string-append ...))
       (app xargs (app - ...)))
      <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? lst)
    (#f)
    (_ (-> (app cons (app f (app car ...)) (app map f (app cdr ...))) <-))))
  (env ()))
	'((con cons (app cons '$_ (-> (app cons (app car exps) (app nil)) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app cons ...))) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'x (-> (app cons 'z (app nil)) <-))) (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app cons 'z (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app nil)) <-))) (env ()))
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (app pair? (-> S <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append vars (app nil ...))
      (app cons (app let->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'x (app nil ...))
      (app cons (app cons ...) (app cons ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app cons (app cons name (app nil ...)) (app cons arg (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app dummy-bind ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app letrec1->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app Yn num-args)
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append vars (app nil))
    (-> (app cons (app let->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'lambda (app cons (app cons ...) (app cons ...)))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'let (app cons (app cons ...) (app cons ...)))
    (-> (app cons 10 (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'x (app nil))
    (->
     (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons '$_ (app cons ...)) (app nil))
    (-> (app cons (app dummy-bind (app cdr ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons 'z (app cons ...)) (app nil))
    (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons name (app cons ...)) (app nil))
    (-> (app cons (app letrec1->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    name
    (-> (app cons (app cons (app Yn ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons 'z (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons (app cons name (app nil)) (-> (app cons arg (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app set! mutable-variables (-> (app cons symbol mutable-variables) <-)))
  (env ()))
	'((con
   cons
   (match
    (app <= n 0)
    ((#f)
     (->
      (app
       cons
       (app string->symbol (app string-append ...))
       (app xargs (app - ...)))
      <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? lst)
    (#f)
    (_ (-> (app cons (app f (app car ...)) (app map f (app cdr ...))) <-))))
  (env ()))
	'((con cons (app cons '$_ (-> (app cons (app car exps) (app nil)) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app cons ...))) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'x (-> (app cons 'z (app nil)) <-))) (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app cons 'z (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app nil)) <-))) (env ()))
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (app pair? (-> args <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append vars (app nil ...))
      (app cons (app let->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'x (app nil ...))
      (app cons (app cons ...) (app cons ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app cons (app cons name (app nil ...)) (app cons arg (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app dummy-bind ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app letrec1->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app Yn num-args)
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append vars (app nil))
    (-> (app cons (app let->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'lambda (app cons (app cons ...) (app cons ...)))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'let (app cons (app cons ...) (app cons ...)))
    (-> (app cons 10 (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'x (app nil))
    (->
     (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons '$_ (app cons ...)) (app nil))
    (-> (app cons (app dummy-bind (app cdr ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons 'z (app cons ...)) (app nil))
    (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons name (app cons ...)) (app nil))
    (-> (app cons (app letrec1->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    name
    (-> (app cons (app cons (app Yn ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons 'z (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons (app cons name (app nil)) (-> (app cons arg (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app set! mutable-variables (-> (app cons symbol mutable-variables) <-)))
  (env ()))
	'((con
   cons
   (match
    (app <= n 0)
    ((#f)
     (->
      (app
       cons
       (app string->symbol (app string-append ...))
       (app xargs (app - ...)))
      <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? lst)
    (#f)
    (_ (-> (app cons (app f (app car ...)) (app map f (app cdr ...))) <-))))
  (env ()))
	'((con cons (app cons '$_ (-> (app cons (app car exps) (app nil)) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app cons ...))) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'x (-> (app cons 'z (app nil)) <-))) (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app cons 'z (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app nil)) <-))) (env ()))
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (app pair? (-> exp <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app pair? (-> exps <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append vars (app nil ...))
      (app cons (app let->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'x (app nil ...))
      (app cons (app cons ...) (app cons ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app cons (app cons name (app nil ...)) (app cons arg (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app dummy-bind ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app letrec1->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app Yn num-args)
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append vars (app nil))
    (-> (app cons (app let->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'lambda (app cons (app cons ...) (app cons ...)))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'let (app cons (app cons ...) (app cons ...)))
    (-> (app cons 10 (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'x (app nil))
    (->
     (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons '$_ (app cons ...)) (app nil))
    (-> (app cons (app dummy-bind (app cdr ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons 'z (app cons ...)) (app nil))
    (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons name (app cons ...)) (app nil))
    (-> (app cons (app letrec1->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    name
    (-> (app cons (app cons (app Yn ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons 'z (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons (app cons name (app nil)) (-> (app cons arg (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app set! mutable-variables (-> (app cons symbol mutable-variables) <-)))
  (env ()))
	'((con
   cons
   (match
    (app <= n 0)
    ((#f)
     (->
      (app
       cons
       (app string->symbol (app string-append ...))
       (app xargs (app - ...)))
      <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? lst)
    (#f)
    (_ (-> (app cons (app f (app car ...)) (app map f (app cdr ...))) <-))))
  (env ()))
	'((con cons (app cons '$_ (-> (app cons (app car exps) (app nil)) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app cons ...))) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'x (-> (app cons 'z (app nil)) <-))) (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app cons 'z (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app nil)) <-))) (env ()))
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (app pair? (-> formals <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append vars (app nil ...))
      (app cons (app let->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'x (app nil ...))
      (app cons (app cons ...) (app cons ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app cons (app cons name (app nil ...)) (app cons arg (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app dummy-bind ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app letrec1->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app Yn num-args)
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append vars (app nil))
    (-> (app cons (app let->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'lambda (app cons (app cons ...) (app cons ...)))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'let (app cons (app cons ...) (app cons ...)))
    (-> (app cons 10 (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'x (app nil))
    (->
     (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons '$_ (app cons ...)) (app nil))
    (-> (app cons (app dummy-bind (app cdr ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons 'z (app cons ...)) (app nil))
    (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons name (app cons ...)) (app nil))
    (-> (app cons (app letrec1->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    name
    (-> (app cons (app cons (app Yn ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons 'z (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (app cons (app cons name (app nil)) (-> (app cons arg (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app set! mutable-variables (-> (app cons symbol mutable-variables) <-)))
  (env ()))
	'((con
   cons
   (match
    (app <= n 0)
    ((#f)
     (->
      (app
       cons
       (app string->symbol (app string-append ...))
       (app xargs (app - ...)))
      <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (match
    (app pair? lst)
    (#f)
    (_ (-> (app cons (app f (app car ...)) (app map f (app cdr ...))) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con cons (app cons '$_ (-> (app cons (app car exps) (app nil)) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app cons ...))) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'x (-> (app cons 'z (app nil)) <-))) (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app cons 'z (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app nil)) <-))) (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app pair? (-> l <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app pair? (-> lst <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append vars (app nil ...))
      (app cons (app let->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'x (app nil ...))
      (app cons (app cons ...) (app cons ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app cons (app cons name (app nil ...)) (app cons arg (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app dummy-bind ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app letrec1->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app Yn num-args)
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append vars (app nil))
    (-> (app cons (app let->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'lambda (app cons (app cons ...) (app cons ...)))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'let (app cons (app cons ...) (app cons ...)))
    (-> (app cons 10 (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'x (app nil))
    (->
     (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons '$_ (app cons ...)) (app nil))
    (-> (app cons (app dummy-bind (app cdr ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons 'z (app cons ...)) (app nil))
    (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons name (app cons ...)) (app nil))
    (-> (app cons (app letrec1->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    name
    (-> (app cons (app cons (app Yn ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons 'z (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (app cons (app cons name (app nil)) (-> (app cons arg (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app set! mutable-variables (-> (app cons symbol mutable-variables) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app <= n 0)
    ((#f)
     (->
      (app
       cons
       (app string->symbol (app string-append ...))
       (app xargs (app - ...)))
      <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (match
    (app pair? lst)
    (#f)
    (_ (-> (app cons (app f (app car ...)) (app map f (app cdr ...))) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con cons (app cons '$_ (-> (app cons (app car exps) (app nil)) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app cons ...))) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'x (-> (app cons 'z (app nil)) <-))) (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app cons 'z (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app nil)) <-))) (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app pair? (-> lst1 <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append vars (app nil ...))
      (app cons (app let->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'x (app nil ...))
      (app cons (app cons ...) (app cons ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app cons (app cons name (app nil ...)) (app cons arg (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app dummy-bind ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app letrec1->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app Yn num-args)
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append vars (app nil))
    (-> (app cons (app let->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'lambda (app cons (app cons ...) (app cons ...)))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'let (app cons (app cons ...) (app cons ...)))
    (-> (app cons 10 (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'x (app nil))
    (->
     (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons '$_ (app cons ...)) (app nil))
    (-> (app cons (app dummy-bind (app cdr ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons 'z (app cons ...)) (app nil))
    (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons name (app cons ...)) (app nil))
    (-> (app cons (app letrec1->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    name
    (-> (app cons (app cons (app Yn ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons 'z (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons (app cons name (app nil)) (-> (app cons arg (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app set! mutable-variables (-> (app cons symbol mutable-variables) <-)))
  (env ()))
	'((con
   cons
   (match
    (app <= n 0)
    ((#f)
     (->
      (app
       cons
       (app string->symbol (app string-append ...))
       (app xargs (app - ...)))
      <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? lst)
    (#f)
    (_ (-> (app cons (app f (app car ...)) (app map f (app cdr ...))) <-))))
  (env ()))
	'((con cons (app cons '$_ (-> (app cons (app car exps) (app nil)) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app cons ...))) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'x (-> (app cons 'z (app nil)) <-))) (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app cons 'z (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app nil)) <-))) (env ()))
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (app pair? (-> vars <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append vars (app nil ...))
      (app cons (app let->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'x (app nil ...))
      (app cons (app cons ...) (app cons ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app cons (app cons name (app nil ...)) (app cons arg (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app dummy-bind ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app letrec1->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app Yn num-args)
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append vars (app nil))
    (-> (app cons (app let->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'lambda (app cons (app cons ...) (app cons ...)))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'let (app cons (app cons ...) (app cons ...)))
    (-> (app cons 10 (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'x (app nil))
    (->
     (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons '$_ (app cons ...)) (app nil))
    (-> (app cons (app dummy-bind (app cdr ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons 'z (app cons ...)) (app nil))
    (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons name (app cons ...)) (app nil))
    (-> (app cons (app letrec1->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    name
    (-> (app cons (app cons (app Yn ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons 'z (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (app cons (app cons name (app nil)) (-> (app cons arg (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app set! mutable-variables (-> (app cons symbol mutable-variables) <-)))
  (env ()))
	'((con
   cons
   (match
    (app <= n 0)
    ((#f)
     (->
      (app
       cons
       (app string->symbol (app string-append ...))
       (app xargs (app - ...)))
      <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (match
    (app pair? lst)
    (#f)
    (_ (-> (app cons (app f (app car ...)) (app map f (app cdr ...))) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con cons (app cons '$_ (-> (app cons (app car exps) (app nil)) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app cons ...))) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'x (-> (app cons 'z (app nil)) <-))) (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app cons 'z (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app nil)) <-))) (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app prim? (-> exp <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app prim? (-> exp <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app ref? (-> exp <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app ref? (-> exp <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app set!-exp (-> exp <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app set!-var (-> exp <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app set!-var (-> exp <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app set!? (-> exp <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app set!? (-> exp <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app singlet? (-> exps <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append vars (app nil ...))
      (app cons (app let->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'x (app nil ...))
      (app cons (app cons ...) (app cons ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app cons (app cons name (app nil ...)) (app cons arg (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app dummy-bind ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app letrec1->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app Yn num-args)
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append vars (app nil))
    (-> (app cons (app let->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'lambda (app cons (app cons ...) (app cons ...)))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'let (app cons (app cons ...) (app cons ...)))
    (-> (app cons 10 (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'x (app nil))
    (->
     (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons '$_ (app cons ...)) (app nil))
    (-> (app cons (app dummy-bind (app cdr ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons 'z (app cons ...)) (app nil))
    (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons name (app cons ...)) (app nil))
    (-> (app cons (app letrec1->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    name
    (-> (app cons (app cons (app Yn ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons 'z (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons (app cons name (app nil)) (-> (app cons arg (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app set! mutable-variables (-> (app cons symbol mutable-variables) <-)))
  (env ()))
	'((con
   cons
   (match
    (app <= n 0)
    ((#f)
     (->
      (app
       cons
       (app string->symbol (app string-append ...))
       (app xargs (app - ...)))
      <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? lst)
    (#f)
    (_ (-> (app cons (app f (app car ...)) (app map f (app cdr ...))) <-))))
  (env ()))
	'((con cons (app cons '$_ (-> (app cons (app car exps) (app nil)) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app cons ...))) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'x (-> (app cons 'z (app nil)) <-))) (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app cons 'z (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app nil)) <-))) (env ()))
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (app string->list (-> (app symbol->string symbol) <-)) (env ()))
clos/con: ⊥
literals: '(⊥ ⊥ ⊤ ⊥)

'(query: (app string-append "m_" (-> (app mangle exp) <-) ".value") (env ()))
clos/con: ⊥
literals: '(⊥ ⊥ ⊤ ⊥)

'(query: (app string-append "x" (-> (app number->string n) <-)) (env ()))
clos/con: ⊥
literals: '(⊥ ⊥ ⊤ ⊥)

'(query: (app string-length (-> s <-)) (env ()))
clos/con: ⊥
literals: '(⊥ ⊥ ⊤ ⊥)

'(query: (app string-ref (-> s <-) i) (env ()))
clos/con: ⊥
literals: '(⊥ ⊥ ⊤ ⊥)

'(query: (app string-ref s (-> i <-)) (env ()))
clos/con: ⊥
literals: '(0 ⊥ ⊥ ⊥)

'(query: (app symbol->string (-> symbol <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app symbol? (-> exp <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app tagged-list? 'begin (-> exp <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app tagged-list? 'if (-> exp <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app tagged-list? 'lambda (-> exp <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app tagged-list? 'let (-> exp <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app tagged-list? 'letrec (-> exp <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app tagged-list? 'set! (-> exp <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (app xargs (-> (app - n 1) <-)) (env ()))
clos/con: ⊥
literals: '(⊤ ⊥ ⊥ ⊥)

'(query: (app xargs (-> n <-)) (env ()))
clos/con: ⊥
literals: '(⊤ ⊥ ⊥ ⊥)

'(query: (app xargs (-> n <-)) (env ()))
clos/con: ⊥
literals: '(⊤ ⊥ ⊥ ⊥)

'(query: (app xargs (-> n <-)) (env ()))
clos/con: ⊥
literals: '(⊤ ⊥ ⊥ ⊥)

'(query: (app xargs (-> n <-)) (env ()))
clos/con: ⊥
literals: '(⊤ ⊥ ⊥ ⊥)

'(query: (let (_) (-> (app void) <-)) (env ()))
clos/con:
	'((con void) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (let (_) (-> (app void) <-)) (env ()))
clos/con:
	'((con void) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (let (_) (-> (let (_) ...) <-)) (env ()))
clos/con:
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con void) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (letrec* (car ... input-program) (-> (let (_) ...) <-)) (env ()))
clos/con:
	'((con void) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (letrec* (f) (-> (app f 0) <-)) (env ()))
clos/con:
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (letrec* (is-in?) (-> (app is-in? mutable-variables) <-)) (env ()))
clos/con:
	'((con #f) (env ()))
	'((con #t) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (match (-> (app < i (app string-length s)) <-) (#f) _) (env ()))
clos/con:
	'((con #f) (env ()))
	'((con #t) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (match (-> (app <= n 0) <-) (#f) _) (env ()))
clos/con:
	'((con #f) (env ()))
	'((con #t) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (match (-> (app = (app length (app cadr ...)) 1) <-) (#f) _) (env ()))
clos/con:
	'((con #f) (env ()))
	'((con #t) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (match (-> (app = (app length l) 1) <-) (#f) _) (env ()))
clos/con:
	'((con #f) (env ()))
	'((con #t) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (match (-> (app app? exp) <-) (#f) _) (env ()))
clos/con:
	'((con #f) (env ()))
	'((con #t) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (match (-> (app app? exp) <-) (#f) _) (env ()))
clos/con:
	'((con #f) (env ()))
	'((con #t) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (match (-> (app begin? exp) <-) (#f) _) (env ()))
clos/con:
	'((con #f) (env ()))
	'((con #t) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (match (-> (app begin? exp) <-) (#f) _) (env ()))
clos/con:
	'((con #f) (env ()))
	'((con #t) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (match (-> (app const? exp) <-) (#f) _) (env ()))
clos/con:
	'((con #f) (env ()))
	'((con #t) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (match (-> (app const? exp) <-) (#f) _) (env ()))
clos/con:
	'((con #f) (env ()))
	'((con #t) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (match (-> (app eq? '* p) <-) (#f) _) (env ()))
clos/con:
	'((con #f) (env ()))
	'((con #t) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (match (-> (app eq? '+ p) <-) (#f) _) (env ()))
clos/con:
	'((con #f) (env ()))
	'((con #t) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (match (-> (app eq? '- p) <-) (#f) _) (env ()))
clos/con:
	'((con #f) (env ()))
	'((con #t) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (match (-> (app eq? '= p) <-) (#f) _) (env ()))
clos/con:
	'((con #f) (env ()))
	'((con #t) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (match (-> (app eq? 'display p) <-) (#f) _) (env ()))
clos/con:
	'((con #f) (env ()))
	'((con #t) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (match (-> (app eq? (app car S) symbol) <-) (#f) _) (env ()))
clos/con:
	'((con #f) (env ()))
	'((con #t) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (match (-> (app eq? exp '*) <-) (#f) _) (env ()))
clos/con:
	'((con #f) (env ()))
	'((con #t) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (match (-> (app eq? exp '+) <-) (#f) _) (env ()))
clos/con:
	'((con #f) (env ()))
	'((con #t) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (match (-> (app eq? exp '-) <-) (#f) _) (env ()))
clos/con:
	'((con #f) (env ()))
	'((con #t) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (match (-> (app eq? exp '=) <-) (#f) _) (env ()))
clos/con:
	'((con #f) (env ()))
	'((con #t) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (match (-> (app eq? exp 'display) <-) (#f) _) (env ()))
clos/con:
	'((con #f) (env ()))
	'((con #t) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (match (-> (app eq? tag (app car l)) <-) (#f) _) (env ()))
clos/con:
	'((con #f) (env ()))
	'((con #t) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (match (-> (app if? exp) <-) (#f) _) (env ()))
clos/con:
	'((con #f) (env ()))
	'((con #t) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (match (-> (app if? exp) <-) (#f) _) (env ()))
clos/con:
	'((con #f) (env ()))
	'((con #t) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (match (-> (app integer? exp) <-) (#f) _) (env ()))
clos/con:
	'((con #f) (env ()))
	'((con #t) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (match (-> (app is-mutable? (app car vars)) <-) (#f) _) (env ()))
clos/con:
	'((con #f) (env ()))
	'((con #t) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (match (-> (app is-mutable? exp) <-) (#f) _) (env ()))
clos/con:
	'((con #f) (env ()))
	'((con #t) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (match (-> (app lambda? exp) <-) (#f) _) (env ()))
clos/con:
	'((con #f) (env ()))
	'((con #t) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (match (-> (app lambda? exp) <-) (#f) _) (env ()))
clos/con:
	'((con #f) (env ()))
	'((con #t) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (match (-> (app let? exp) <-) (#f) _) (env ()))
clos/con:
	'((con #f) (env ()))
	'((con #t) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (match (-> (app let? exp) <-) (#f) _) (env ()))
clos/con:
	'((con #f) (env ()))
	'((con #t) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (match (-> (app let? exp) <-) (#f) _) (env ()))
clos/con:
	'((con #f) (env ()))
	'((con #t) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (match (-> (app letrec1? exp) <-) (#f) _) (env ()))
clos/con:
	'((con #f) (env ()))
	'((con #t) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (match (-> (app letrec1? exp) <-) (#f) _) (env ()))
clos/con:
	'((con #f) (env ()))
	'((con #t) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (match (-> (app letrec1? exp) <-) (#f) _) (env ()))
clos/con:
	'((con #f) (env ()))
	'((con #t) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (match (-> (app list? l) <-) (#f) _) (env ()))
clos/con:
	'((con #f) (env ()))
	'((con #t) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (match (-> (app not (app pair? S)) <-) (#f) _) (env ()))
clos/con:
	'((con #f) (env ()))
	'((con #t) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (match (-> (app not (app pair? args)) <-) (#f) _) (env ()))
clos/con:
	'((con #f) (env ()))
	'((con #t) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (match (-> (app not (app pair? formals)) <-) (#f) _) (env ()))
clos/con:
	'((con #f) (env ()))
	'((con #t) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (match (-> (app not (app pair? lst1)) <-) (#f) _) (env ()))
clos/con:
	'((con #f) (env ()))
	'((con #t) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (match (-> (app not (app pair? vars)) <-) (#f) _) (env ()))
clos/con:
	'((con #f) (env ()))
	'((con #t) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (match (-> (app null? chars) <-) (#f) _) (env ()))
clos/con:
	'((con #t) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (match (-> (app pair? (app cdr args)) <-) (#f) _) (env ()))
clos/con:
	'((con #f) (env ()))
	'((con #t) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (match (-> (app pair? (app cdr formals)) <-) (#f) _) (env ()))
clos/con:
	'((con #f) (env ()))
	'((con #t) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (match (-> (app pair? exps) <-) (#f) _) (env ()))
clos/con:
	'((con #f) (env ()))
	'((con #t) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (match (-> (app pair? l) <-) (#f) _) (env ()))
clos/con:
	'((con #f) (env ()))
	'((con #t) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (match (-> (app pair? lst) <-) (#f) _) (env ()))
clos/con:
	'((con #f) (env ()))
	'((con #t) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (match (-> (app prim? exp) <-) (#f) _) (env ()))
clos/con:
	'((con #f) (env ()))
	'((con #t) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (match (-> (app prim? exp) <-) (#f) _) (env ()))
clos/con:
	'((con #f) (env ()))
	'((con #t) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (match (-> (app ref? exp) <-) (#f) _) (env ()))
clos/con:
	'((con #f) (env ()))
	'((con #t) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (match (-> (app ref? exp) <-) (#f) _) (env ()))
clos/con:
	'((con #f) (env ()))
	'((con #t) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (match (-> (app set!? exp) <-) (#f) _) (env ()))
clos/con:
	'((con #f) (env ()))
	'((con #t) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (match (-> (app set!? exp) <-) (#f) _) (env ()))
clos/con:
	'((con #f) (env ()))
	'((con #t) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (match (-> (app singlet? exps) <-) (#f) _) (env ()))
clos/con:
	'((con #f) (env ()))
	'((con #t) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (match (-> (app tagged-list? 'letrec exp) <-) (#f) _) (env ()))
clos/con:
	'((con #f) (env ()))
	'((con #t) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (match (-> car-v <-) (cons car-c car-d)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append vars (app nil ...))
      (app cons (app let->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'x (app nil ...))
      (app cons (app cons ...) (app cons ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app cons (app cons name (app nil ...)) (app cons arg (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app dummy-bind ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app letrec1->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app Yn num-args)
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append vars (app nil))
    (-> (app cons (app let->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'lambda (app cons (app cons ...) (app cons ...)))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'let (app cons (app cons ...) (app cons ...)))
    (-> (app cons 10 (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'x (app nil))
    (->
     (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons '$_ (app cons ...)) (app nil))
    (-> (app cons (app dummy-bind (app cdr ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons 'z (app cons ...)) (app nil))
    (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons name (app cons ...)) (app nil))
    (-> (app cons (app letrec1->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    name
    (-> (app cons (app cons (app Yn ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons 'z (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (app cons (app cons name (app nil)) (-> (app cons arg (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app set! mutable-variables (-> (app cons symbol mutable-variables) <-)))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app <= n 0)
    ((#f)
     (->
      (app
       cons
       (app string->symbol (app string-append ...))
       (app xargs (app - ...)))
      <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (match
    (app pair? lst)
    (#f)
    (_ (-> (app cons (app f (app car ...)) (app map f (app cdr ...))) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con cons (app cons '$_ (-> (app cons (app car exps) (app nil)) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app cons ...))) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'x (-> (app cons 'z (app nil)) <-))) (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app cons 'z (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app nil)) <-))) (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (match (-> cdr-v <-) (cons cdr-c cdr-d)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append vars (app nil ...))
      (app cons (app let->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'x (app nil ...))
      (app cons (app cons ...) (app cons ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app cons (app cons name (app nil ...)) (app cons arg (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app dummy-bind ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app letrec1->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app Yn num-args)
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append vars (app nil))
    (-> (app cons (app let->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'lambda (app cons (app cons ...) (app cons ...)))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'let (app cons (app cons ...) (app cons ...)))
    (-> (app cons 10 (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'x (app nil))
    (->
     (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons '$_ (app cons ...)) (app nil))
    (-> (app cons (app dummy-bind (app cdr ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons 'z (app cons ...)) (app nil))
    (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons name (app cons ...)) (app nil))
    (-> (app cons (app letrec1->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    name
    (-> (app cons (app cons (app Yn ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons 'z (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (app cons (app cons name (app nil)) (-> (app cons arg (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app set! mutable-variables (-> (app cons symbol mutable-variables) <-)))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app <= n 0)
    ((#f)
     (->
      (app
       cons
       (app string->symbol (app string-append ...))
       (app xargs (app - ...)))
      <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (match
    (app pair? lst)
    (#f)
    (_ (-> (app cons (app f (app car ...)) (app map f (app cdr ...))) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con cons (app cons '$_ (-> (app cons (app car exps) (app nil)) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app cons ...))) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'x (-> (app cons 'z (app nil)) <-))) (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app cons 'z (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app nil)) <-))) (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (match (-> length-l <-) (cons length-c length-d) (nil)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append vars (app nil ...))
      (app cons (app let->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'x (app nil ...))
      (app cons (app cons ...) (app cons ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app cons (app cons name (app nil ...)) (app cons arg (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app dummy-bind ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app letrec1->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app Yn num-args)
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append vars (app nil))
    (-> (app cons (app let->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'lambda (app cons (app cons ...) (app cons ...)))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'let (app cons (app cons ...) (app cons ...)))
    (-> (app cons 10 (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'x (app nil))
    (->
     (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons '$_ (app cons ...)) (app nil))
    (-> (app cons (app dummy-bind (app cdr ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons 'z (app cons ...)) (app nil))
    (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons name (app cons ...)) (app nil))
    (-> (app cons (app letrec1->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    name
    (-> (app cons (app cons (app Yn ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons 'z (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (app cons (app cons name (app nil)) (-> (app cons arg (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app set! mutable-variables (-> (app cons symbol mutable-variables) <-)))
  (env ()))
	'((con
   cons
   (match
    (app <= n 0)
    ((#f)
     (->
      (app
       cons
       (app string->symbol (app string-append ...))
       (app xargs (app - ...)))
      <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (match
    (app pair? lst)
    (#f)
    (_ (-> (app cons (app f (app car ...)) (app map f (app cdr ...))) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con cons (app cons '$_ (-> (app cons (app car exps) (app nil)) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app cons ...))) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'x (-> (app cons 'z (app nil)) <-))) (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app cons 'z (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app nil)) <-))) (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (match (-> null?-v <-) (nil) _) (env ()))
clos/con:
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (match (-> pair?-v <-) (cons pair?-c pair?-d) _) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append vars (app nil ...))
      (app cons (app let->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'x (app nil ...))
      (app cons (app cons ...) (app cons ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app cons (app cons name (app nil ...)) (app cons arg (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app dummy-bind ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app letrec1->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app Yn num-args)
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append vars (app nil))
    (-> (app cons (app let->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'lambda (app cons (app cons ...) (app cons ...)))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'let (app cons (app cons ...) (app cons ...)))
    (-> (app cons 10 (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'x (app nil))
    (->
     (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons '$_ (app cons ...)) (app nil))
    (-> (app cons (app dummy-bind (app cdr ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons 'z (app cons ...)) (app nil))
    (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons name (app cons ...)) (app nil))
    (-> (app cons (app letrec1->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    name
    (-> (app cons (app cons (app Yn ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons 'z (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (app cons (app cons name (app nil)) (-> (app cons arg (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app set! mutable-variables (-> (app cons symbol mutable-variables) <-)))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app <= n 0)
    ((#f)
     (->
      (app
       cons
       (app string->symbol (app string-append ...))
       (app xargs (app - ...)))
      <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (match
    (app pair? lst)
    (#f)
    (_ (-> (app cons (app f (app car ...)) (app map f (app cdr ...))) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con cons (app cons '$_ (-> (app cons (app car exps) (app nil)) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app cons ...))) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'x (-> (app cons 'z (app nil)) <-))) (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app cons 'z (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app nil)) <-))) (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (match (app <= n 0) (#f) (_ (-> (app nil) <-))) (env ()))
clos/con:
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (match (app = (app length l) 1) (#f) (_ (-> (app #t) <-))) (env ()))
clos/con:
	'((con #t) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (match (app = (app length l) 1) ((#f) (-> (app #f) <-)) _) (env ()))
clos/con:
	'((con #f) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (match (app app? exp) (#f) (_ (-> (let (_) ...) <-))) (env ()))
clos/con:
	'((con void) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (match (app begin? exp) (#f) (_ (-> (let (_) ...) <-))) (env ()))
clos/con:
	'((con void) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (match (app const? exp) (#f) (_ (-> (app void) <-))) (env ()))
clos/con:
	'((con void) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (match (app eq? exp '*) (#f) (_ (-> (app #t) <-))) (env ()))
clos/con:
	'((con #t) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (match (app eq? exp '+) (#f) (_ (-> (app #t) <-))) (env ()))
clos/con:
	'((con #t) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (match (app eq? exp '-) (#f) (_ (-> (app #t) <-))) (env ()))
clos/con:
	'((con #t) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (match (app eq? exp '=) (#f) (_ (-> (app #t) <-))) (env ()))
clos/con:
	'((con #t) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (match (app eq? exp 'display) (#f) (_ (-> (app #t) <-))) (env ()))
clos/con:
	'((con #t) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (match (app eq? exp 'display) ((#f) (-> (app #f) <-)) _) (env ()))
clos/con:
	'((con #f) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (match (app eq? tag (app car l)) (#f) (_ (-> (app #t) <-))) (env ()))
clos/con:
	'((con #t) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (match (app eq? tag (app car l)) ((#f) (-> (app #f) <-)) _) (env ()))
clos/con:
	'((con #f) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (match (app if? exp) (#f) (_ (-> (let (_) ...) <-))) (env ()))
clos/con:
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con void) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (match (app let? exp) (#f) (_ (-> (let (_) ...) <-))) (env ()))
clos/con:
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con void) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (match (app let? exp) ((#f) (-> exp <-)) _) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (match (app letrec1? exp) (#f) (_ (-> (let (_) ...) <-))) (env ()))
clos/con:
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con void) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (match (app letrec1? exp) ((#f) (-> exp <-)) _) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (match (app list? l) ((#f) (-> (app #f) <-)) _) (env ()))
clos/con:
	'((con #f) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (match (app not (app pair? S)) (#f) (_ (-> (app #f) <-))) (env ()))
clos/con:
	'((con #f) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (match (app not (app pair? lst1)) (#f) (_ (-> lst2 <-))) (env ()))
clos/con:
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (match (app null? chars) (#f) (_ (-> (app nil) <-))) (env ()))
clos/con:
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (match (app pair? l) ((#f) (-> (app #f) <-)) _) (env ()))
clos/con:
	'((con #f) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (match (app pair? lst) ((#f) (-> (app nil) <-)) _) (env ()))
clos/con:
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (match (app prim? exp) (#f) (_ (-> (app void) <-))) (env ()))
clos/con:
	'((con void) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (match (app ref? exp) (#f) (_ (-> (app void) <-))) (env ()))
clos/con:
	'((con void) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (match (app singlet? exps) (#f) (_ (-> (app car exps) <-))) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (match car-v ((cons car-c car-d) (-> car-c <-))) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (match cdr-v ((cons cdr-c cdr-d) (-> cdr-d <-))) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append vars (app nil ...))
      (app cons (app let->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'x (app nil ...))
      (app cons (app cons ...) (app cons ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app cons (app cons name (app nil ...)) (app cons arg (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app dummy-bind ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app letrec1->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app Yn num-args)
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append vars (app nil))
    (-> (app cons (app let->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'lambda (app cons (app cons ...) (app cons ...)))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'let (app cons (app cons ...) (app cons ...)))
    (-> (app cons 10 (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'x (app nil))
    (->
     (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons '$_ (app cons ...)) (app nil))
    (-> (app cons (app dummy-bind (app cdr ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons 'z (app cons ...)) (app nil))
    (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons name (app cons ...)) (app nil))
    (-> (app cons (app letrec1->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    name
    (-> (app cons (app cons (app Yn ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons 'z (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons (app cons name (app nil)) (-> (app cons arg (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app set! mutable-variables (-> (app cons symbol mutable-variables) <-)))
  (env ()))
	'((con
   cons
   (match
    (app <= n 0)
    ((#f)
     (->
      (app
       cons
       (app string->symbol (app string-append ...))
       (app xargs (app - ...)))
      <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? lst)
    (#f)
    (_ (-> (app cons (app f (app car ...)) (app map f (app cdr ...))) <-))))
  (env ()))
	'((con cons (app cons '$_ (-> (app cons (app car exps) (app nil)) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app cons ...))) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'x (-> (app cons 'z (app nil)) <-))) (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app cons 'z (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app nil)) <-))) (env ()))
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (match null?-v ((nil) (-> (app #t) <-)) _) (env ()))
clos/con:
	'((con #t) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (match pair?-v ((cons pair?-c pair?-d) (-> (app #t) <-)) _) (env ()))
clos/con:
	'((con #t) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (match pair?-v (cons pair?-c pair?-d) (_ (-> (app #f) <-))) (env ()))
clos/con:
	'((con #f) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (λ (S) (-> (match (app not (app pair? ...)) ...) <-)) (env ()))
clos/con:
	'((con #f) (env ()))
	'((con #t) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (λ (args) (-> (match (app not (app pair? ...)) ...) <-)) (env ()))
clos/con: ⊥
literals: '(⊥ ⊥ ⊤ ⊥)

'(query: (λ (car-v) (-> (match car-v ...) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (λ (cdr-v) (-> (match cdr-v ...) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append vars (app nil ...))
      (app cons (app let->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'x (app nil ...))
      (app cons (app cons ...) (app cons ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app cons (app cons name (app nil ...)) (app cons arg (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app dummy-bind ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app letrec1->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app Yn num-args)
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append vars (app nil))
    (-> (app cons (app let->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'lambda (app cons (app cons ...) (app cons ...)))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'let (app cons (app cons ...) (app cons ...)))
    (-> (app cons 10 (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'x (app nil))
    (->
     (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons '$_ (app cons ...)) (app nil))
    (-> (app cons (app dummy-bind (app cdr ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons 'z (app cons ...)) (app nil))
    (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons name (app cons ...)) (app nil))
    (-> (app cons (app letrec1->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    name
    (-> (app cons (app cons (app Yn ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons 'z (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons (app cons name (app nil)) (-> (app cons arg (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app set! mutable-variables (-> (app cons symbol mutable-variables) <-)))
  (env ()))
	'((con
   cons
   (match
    (app <= n 0)
    ((#f)
     (->
      (app
       cons
       (app string->symbol (app string-append ...))
       (app xargs (app - ...)))
      <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? lst)
    (#f)
    (_ (-> (app cons (app f (app car ...)) (app map f (app cdr ...))) <-))))
  (env ()))
	'((con cons (app cons '$_ (-> (app cons (app car exps) (app nil)) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app cons ...))) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'x (-> (app cons 'z (app nil)) <-))) (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app cons 'z (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app nil)) <-))) (env ()))
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (λ (chars) (-> (match (app null? chars) ...) <-)) (env ()))
clos/con:
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (λ (exp) (-> (app caadr exp) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (λ (exp) (-> (app cadddr exp) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (λ (exp) (-> (app caddr exp) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (λ (exp) (-> (app caddr exp) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (λ (exp) (-> (app caddr exp) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (λ (exp) (-> (app caddr exp) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (λ (exp) (-> (app caddr exp) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (λ (exp) (-> (app cadr exp) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (λ (exp) (-> (app cadr exp) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (λ (exp) (-> (app cadr exp) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (λ (exp) (-> (app cadr exp) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (λ (exp) (-> (app car exp) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (λ (exp) (-> (app cdr exp) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append vars (app nil ...))
      (app cons (app let->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'x (app nil ...))
      (app cons (app cons ...) (app cons ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app cons (app cons name (app nil ...)) (app cons arg (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app dummy-bind ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app letrec1->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app Yn num-args)
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append vars (app nil))
    (-> (app cons (app let->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'lambda (app cons (app cons ...) (app cons ...)))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'let (app cons (app cons ...) (app cons ...)))
    (-> (app cons 10 (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'x (app nil))
    (->
     (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons '$_ (app cons ...)) (app nil))
    (-> (app cons (app dummy-bind (app cdr ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons 'z (app cons ...)) (app nil))
    (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons name (app cons ...)) (app nil))
    (-> (app cons (app letrec1->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    name
    (-> (app cons (app cons (app Yn ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons 'z (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons (app cons name (app nil)) (-> (app cons arg (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app set! mutable-variables (-> (app cons symbol mutable-variables) <-)))
  (env ()))
	'((con
   cons
   (match
    (app <= n 0)
    ((#f)
     (->
      (app
       cons
       (app string->symbol (app string-append ...))
       (app xargs (app - ...)))
      <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? lst)
    (#f)
    (_ (-> (app cons (app f (app car ...)) (app map f (app cdr ...))) <-))))
  (env ()))
	'((con cons (app cons '$_ (-> (app cons (app car exps) (app nil)) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app cons ...))) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'x (-> (app cons 'z (app nil)) <-))) (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app cons 'z (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app nil)) <-))) (env ()))
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (λ (exp) (-> (app cdr exp) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append vars (app nil ...))
      (app cons (app let->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'x (app nil ...))
      (app cons (app cons ...) (app cons ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app cons (app cons name (app nil ...)) (app cons arg (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app dummy-bind ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app letrec1->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app Yn num-args)
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append vars (app nil))
    (-> (app cons (app let->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'lambda (app cons (app cons ...) (app cons ...)))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'let (app cons (app cons ...) (app cons ...)))
    (-> (app cons 10 (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'x (app nil))
    (->
     (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons '$_ (app cons ...)) (app nil))
    (-> (app cons (app dummy-bind (app cdr ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons 'z (app cons ...)) (app nil))
    (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons name (app cons ...)) (app nil))
    (-> (app cons (app letrec1->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    name
    (-> (app cons (app cons (app Yn ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons 'z (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons (app cons name (app nil)) (-> (app cons arg (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app set! mutable-variables (-> (app cons symbol mutable-variables) <-)))
  (env ()))
	'((con
   cons
   (match
    (app <= n 0)
    ((#f)
     (->
      (app
       cons
       (app string->symbol (app string-append ...))
       (app xargs (app - ...)))
      <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? lst)
    (#f)
    (_ (-> (app cons (app f (app car ...)) (app map f (app cdr ...))) <-))))
  (env ()))
	'((con cons (app cons '$_ (-> (app cons (app car exps) (app nil)) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app cons ...))) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'x (-> (app cons 'z (app nil)) <-))) (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app cons 'z (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app nil)) <-))) (env ()))
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (λ (exp) (-> (app integer? exp) <-)) (env ()))
clos/con:
	'((con #f) (env ()))
	'((con #t) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (λ (exp) (-> (app pair? exp) <-)) (env ()))
clos/con:
	'((con #f) (env ()))
	'((con #t) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (λ (exp) (-> (app symbol? exp) <-)) (env ()))
clos/con:
	'((con #f) (env ()))
	'((con #t) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (λ (exp) (-> (app tagged-list? 'begin exp) <-)) (env ()))
clos/con:
	'((con #f) (env ()))
	'((con #t) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (λ (exp) (-> (app tagged-list? 'if exp) <-)) (env ()))
clos/con:
	'((con #f) (env ()))
	'((con #t) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (λ (exp) (-> (app tagged-list? 'lambda exp) <-)) (env ()))
clos/con:
	'((con #f) (env ()))
	'((con #t) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (λ (exp) (-> (app tagged-list? 'let exp) <-)) (env ()))
clos/con:
	'((con #f) (env ()))
	'((con #t) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (λ (exp) (-> (app tagged-list? 'set! exp) <-)) (env ()))
clos/con:
	'((con #f) (env ()))
	'((con #t) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (λ (exp) (-> (let* (args ... num-args) ...) <-)) (env ()))
clos/con: ⊥
literals: '(⊥ ⊥ ⊤ ⊥)

'(query: (λ (exp) (-> (letrec* (java-wrap-mutables) ...) <-)) (env ()))
clos/con: ⊥
literals: '(⊥ ⊥ ⊤ ⊥)

'(query: (λ (exp) (-> (letrec* (singlet? ... dummy-bind) ...) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (λ (exp) (-> (match (app const? exp) ...) <-)) (env ()))
clos/con:
	'((con
   error
   (match
    (app eq? 'display p)
    ((#f) (-> (app error "unhandled primitive " p) <-))
    _))
  (env ()))
	'((con
   error
   (match
    (app integer? exp)
    ((#f) (-> (app error "unknown constant: " exp) <-))
    _))
  (env ()))
	'((con error (match (app app? exp) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
literals: '(⊥ ⊥ ⊤ ⊥)

'(query: (λ (exp) (-> (match (app const? exp) ...) <-)) (env ()))
clos/con:
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con void) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (λ (exp) (-> (match (app eq? exp '+) ...) <-)) (env ()))
clos/con:
	'((con #f) (env ()))
	'((con #t) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (λ (exp) (-> (match (app integer? exp) ...) <-)) (env ()))
clos/con:
	'((con
   error
   (match
    (app integer? exp)
    ((#f) (-> (app error "unknown constant: " exp) <-))
    _))
  (env ()))
literals: '(⊥ ⊥ ⊤ ⊥)

'(query: (λ (exp) (-> (match (app is-mutable? exp) ...) <-)) (env ()))
clos/con: ⊥
literals: '(⊥ ⊥ ⊤ ⊥)

'(query: (λ (exp) (-> (match (app let? exp) ...) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (λ (exp) (-> (match (app letrec1? exp) ...) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (λ (exp) (-> (match (app tagged-list? 'letrec exp) ...) <-)) (env ()))
clos/con:
	'((con #f) (env ()))
	'((con #t) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (λ (exps) (-> (match (app singlet? exps) ...) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (λ (f lst) (-> (match (app pair? lst) ...) <-)) (env ()))
clos/con:
	'((con
   cons
   (match
    (app pair? lst)
    (#f)
    (_ (-> (app cons (app f (app car ...)) (app map f (app cdr ...))) <-))))
  (env ()))
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (λ (formals) (-> (match (app not (app pair? ...)) ...) <-)) (env ()))
clos/con: ⊥
literals: '(⊥ ⊥ ⊤ ⊥)

'(query: (λ (l) (-> (match (app list? l) ...) <-)) (env ()))
clos/con:
	'((con #f) (env ()))
	'((con #t) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (λ (lam) (-> (app length (app lambda->formals lam)) <-)) (env ()))
clos/con: ⊥
literals: '(⊤ ⊥ ⊥ ⊥)

'(query: (λ (length-l) (-> (match length-l ...) <-)) (env ()))
clos/con: ⊥
literals: '(⊤ ⊥ ⊥ ⊥)

'(query: (λ (n) (-> (match (app <= n 0) ...) <-)) (env ()))
clos/con:
	'((con
   cons
   (match
    (app <= n 0)
    ((#f)
     (->
      (app
       cons
       (app string->symbol (app string-append ...))
       (app xargs (app - ...)))
      <-))
    _))
  (env ()))
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (λ (null?-v) (-> (match null?-v ...) <-)) (env ()))
clos/con:
	'((con #t) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (λ (p) (-> (app car (app car (app cdr ...))) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (λ (p) (-> (app car (app cdr (app cdr ...))) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (λ (p) (-> (app car (app cdr (app cdr ...))) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (λ (p) (-> (app car (app cdr p)) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(query: (λ (p) (-> (match (app eq? '+ p) ...) <-)) (env ()))
clos/con:
	'((con
   error
   (match
    (app eq? 'display p)
    ((#f) (-> (app error "unhandled primitive " p) <-))
    _))
  (env ()))
literals: '(⊥ ⊥ ⊤ ⊥)

'(query: (λ (pair?-v) (-> (match pair?-v ...) <-)) (env ()))
clos/con:
	'((con #f) (env ()))
	'((con #t) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (λ (s) (-> (letrec* (f) ...) <-)) (env ()))
clos/con:
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (λ (symbol) (-> (letrec* (is-in?) ...) <-)) (env ()))
clos/con:
	'((con #f) (env ()))
	'((con #t) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (λ (symbol) (-> (letrec* (m) ...) <-)) (env ()))
clos/con: ⊥
literals: '(⊥ ⊥ ⊤ ⊥)

'(query: (λ (tag l) (-> (match (app pair? l) ...) <-)) (env ()))
clos/con:
	'((con #f) (env ()))
	'((con #t) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(query: (λ (vars) (-> (match (app not (app pair? ...)) ...) <-)) (env ()))
clos/con: ⊥
literals: '(⊥ ⊥ ⊤ ⊥)

'(store:
  Yn
  (letrec* (... xargs (Yn (-> (λ (n) ...) <-)) letrec1=>Y ...) ...)
  (env ()))
clos/con:
	'((letrec* (... xargs (Yn (-> (λ (n) ...) <-)) letrec1=>Y ...) ...) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  _
  (let (...
        ()
        (_
         (->
          (app
           map
           analyze-mutable-variables
           (app map cadr (app let->bindings ...)))
          <-))
        ()
        ...)
    ...)
  (env ()))
clos/con:
	'((con
   cons
   (match
    (app pair? lst)
    (#f)
    (_ (-> (app cons (app f (app car ...)) (app map f (app cdr ...))) <-))))
  (env ()))
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  _
  (let (...
        ()
        (_
         (->
          (app analyze-mutable-variables (app cadr (app letrec1->binding ...)))
          <-))
        ()
        ...)
    ...)
  (env ()))
clos/con:
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con void) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  _
  (let (...
        ()
        (_ (-> (app analyze-mutable-variables (app if->condition exp)) <-))
        ()
        ...)
    ...)
  (env ()))
clos/con:
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con void) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  _
  (let (...
        ()
        (_ (-> (app analyze-mutable-variables (app if->then exp)) <-))
        ()
        ...)
    ...)
  (env ()))
clos/con:
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con void) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  _
  (let (...
        ()
        (_ (-> (app analyze-mutable-variables input-program) <-))
        ()
        ...)
    ...)
  (env ()))
clos/con:
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con void) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  _
  (let (...
        ()
        (_ (-> (app map analyze-mutable-variables (app begin->exps exp)) <-))
        ()
        ...)
    ...)
  (env ()))
clos/con:
	'((con
   cons
   (match
    (app pair? lst)
    (#f)
    (_ (-> (app cons (app f (app car ...)) (app map f (app cdr ...))) <-))))
  (env ()))
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  _
  (let (... () (_ (-> (app map analyze-mutable-variables exp) <-)) () ...) ...)
  (env ()))
clos/con:
	'((con
   cons
   (match
    (app pair? lst)
    (#f)
    (_ (-> (app cons (app f (app car ...)) (app map f (app cdr ...))) <-))))
  (env ()))
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  _
  (match pair?-v (cons pair?-c pair?-d) (_ (-> (app #f) <-)))
  (env ()))
clos/con: ⊥
literals: '(⊤ ⊥ ⊥ ⊤)

'(store:
  analyze-mutable-variables
  (letrec*
   (...
    is-mutable?
    (analyze-mutable-variables (-> (λ (exp) ...) <-))
    mangle
    ...)
   ...)
  (env ()))
clos/con:
	'((letrec*
   (...
    is-mutable?
    (analyze-mutable-variables (-> (λ (exp) ...) <-))
    mangle
    ...)
   ...)
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  app->args
  (letrec* (... app->fun (app->args (-> (λ (exp) ...) <-)) prim? ...) ...)
  (env ()))
clos/con:
	'((letrec* (... app->fun (app->args (-> (λ (exp) ...) <-)) prim? ...) ...)
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  app->fun
  (letrec* (... app? (app->fun (-> (λ (exp) ...) <-)) app->args ...) ...)
  (env ()))
clos/con:
	'((letrec* (... app? (app->fun (-> (λ (exp) ...) <-)) app->args ...) ...)
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  app?
  (letrec* (... if->else (app? (-> (λ (exp) ...) <-)) app->fun ...) ...)
  (env ()))
clos/con:
	'((letrec* (... if->else (app? (-> (λ (exp) ...) <-)) app->fun ...) ...)
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  append
  (letrec* (... map (append (-> (λ (lst1 lst2) ...) <-)) string->list ...) ...)
  (env ()))
clos/con:
	'((letrec* (... map (append (-> (λ (lst1 lst2) ...) <-)) string->list ...) ...)
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  arg
  (let* (... name (arg (-> (app cadr binding) <-)) num-args ...) ...)
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(store:
  args
  (let (... vars (args (-> (app map cadr (app let->bindings exp)) <-)) () ...)
    ...)
  (env ()))
clos/con:
	'((con
   cons
   (match
    (app pair? lst)
    (#f)
    (_ (-> (app cons (app f (app car ...)) (app map f (app cdr ...))) <-))))
  (env ()))
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  args
  (let* (... () (args (-> (app app->args exp) <-)) fun ...) ...)
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append vars (app nil ...))
      (app cons (app let->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'x (app nil ...))
      (app cons (app cons ...) (app cons ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app cons (app cons name (app nil ...)) (app cons arg (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app dummy-bind ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app letrec1->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app Yn num-args)
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append vars (app nil))
    (-> (app cons (app let->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'lambda (app cons (app cons ...) (app cons ...)))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'let (app cons (app cons ...) (app cons ...)))
    (-> (app cons 10 (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'x (app nil))
    (->
     (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons '$_ (app cons ...)) (app nil))
    (-> (app cons (app dummy-bind (app cdr ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons 'z (app cons ...)) (app nil))
    (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons name (app cons ...)) (app nil))
    (-> (app cons (app letrec1->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    name
    (-> (app cons (app cons (app Yn ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons 'z (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons (app cons name (app nil)) (-> (app cons arg (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app set! mutable-variables (-> (app cons symbol mutable-variables) <-)))
  (env ()))
	'((con
   cons
   (match
    (app <= n 0)
    ((#f)
     (->
      (app
       cons
       (app string->symbol (app string-append ...))
       (app xargs (app - ...)))
      <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? lst)
    (#f)
    (_ (-> (app cons (app f (app car ...)) (app map f (app cdr ...))) <-))))
  (env ()))
	'((con cons (app cons '$_ (-> (app cons (app car exps) (app nil)) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app cons ...))) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'x (-> (app cons 'z (app nil)) <-))) (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app cons 'z (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app nil)) <-))) (env ()))
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  args
  (λ (args) (-> (match (app not (app pair? ...)) ...) <-))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append vars (app nil ...))
      (app cons (app let->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'x (app nil ...))
      (app cons (app cons ...) (app cons ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app cons (app cons name (app nil ...)) (app cons arg (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app dummy-bind ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app letrec1->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app Yn num-args)
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append vars (app nil))
    (-> (app cons (app let->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'lambda (app cons (app cons ...) (app cons ...)))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'let (app cons (app cons ...) (app cons ...)))
    (-> (app cons 10 (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'x (app nil))
    (->
     (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons '$_ (app cons ...)) (app nil))
    (-> (app cons (app dummy-bind (app cdr ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons 'z (app cons ...)) (app nil))
    (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons name (app cons ...)) (app nil))
    (-> (app cons (app letrec1->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    name
    (-> (app cons (app cons (app Yn ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons 'z (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons (app cons name (app nil)) (-> (app cons arg (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app set! mutable-variables (-> (app cons symbol mutable-variables) <-)))
  (env ()))
	'((con
   cons
   (match
    (app <= n 0)
    ((#f)
     (->
      (app
       cons
       (app string->symbol (app string-append ...))
       (app xargs (app - ...)))
      <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? lst)
    (#f)
    (_ (-> (app cons (app f (app car ...)) (app map f (app cdr ...))) <-))))
  (env ()))
	'((con cons (app cons '$_ (-> (app cons (app car exps) (app nil)) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app cons ...))) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'x (-> (app cons 'z (app nil)) <-))) (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app cons 'z (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app nil)) <-))) (env ()))
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  arity
  (letrec* (... let=>lambda (arity (-> (λ (lam) ...) <-)) xargs ...) ...)
  (env ()))
clos/con:
	'((letrec* (... let=>lambda (arity (-> (λ (lam) ...) <-)) xargs ...) ...)
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  begin->exps
  (letrec* (... begin? (begin->exps (-> (λ (exp) ...) <-)) set!? ...) ...)
  (env ()))
clos/con:
	'((letrec* (... begin? (begin->exps (-> (λ (exp) ...) <-)) set!? ...) ...)
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  begin=>let
  (letrec*
   (... letrec1=>Y (begin=>let (-> (λ (exp) ...) <-)) mutable-variables ...)
   ...)
  (env ()))
clos/con:
	'((letrec*
   (... letrec1=>Y (begin=>let (-> (λ (exp) ...) <-)) mutable-variables ...)
   ...)
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  begin?
  (letrec* (... prim? (begin? (-> (λ (exp) ...) <-)) begin->exps ...) ...)
  (env ()))
clos/con:
	'((letrec* (... prim? (begin? (-> (λ (exp) ...) <-)) begin->exps ...) ...)
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  binding
  (let* (... () (binding (-> (app letrec1->binding exp) <-)) name ...) ...)
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(store:
  caadr
  (letrec* (... cadr (caadr (-> (λ (p) ...) <-)) caddr ...) ...)
  (env ()))
clos/con:
	'((letrec* (... cadr (caadr (-> (λ (p) ...) <-)) caddr ...) ...) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  cadddr
  (letrec* (... caddr (cadddr (-> (λ (p) ...) <-)) map ...) ...)
  (env ()))
clos/con:
	'((letrec* (... caddr (cadddr (-> (λ (p) ...) <-)) map ...) ...) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  caddr
  (letrec* (... caadr (caddr (-> (λ (p) ...) <-)) cadddr ...) ...)
  (env ()))
clos/con:
	'((letrec* (... caadr (caddr (-> (λ (p) ...) <-)) cadddr ...) ...) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  cadr
  (letrec* (... null? (cadr (-> (λ (p) ...) <-)) caadr ...) ...)
  (env ()))
clos/con:
	'((letrec* (... null? (cadr (-> (λ (p) ...) <-)) caadr ...) ...) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  car
  (letrec* (... () (car (-> (λ (car-v) ...) <-)) cdr ...) ...)
  (env ()))
clos/con:
	'((letrec* (... () (car (-> (λ (car-v) ...) <-)) cdr ...) ...) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  cdr
  (letrec* (... car (cdr (-> (λ (cdr-v) ...) <-)) length ...) ...)
  (env ()))
clos/con:
	'((letrec* (... car (cdr (-> (λ (cdr-v) ...) <-)) length ...) ...) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  char->natural
  (letrec*
   (...
    tagged-list?
    (char->natural (-> (λ (c) ...) <-))
    integer->char-list
    ...)
   ...)
  (env ()))
clos/con:
	'((letrec*
   (...
    tagged-list?
    (char->natural (-> (λ (c) ...) <-))
    integer->char-list
    ...)
   ...)
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  con
  (app
   cons
   'lambda
   (->
    (app
     cons
     (app append (app xargs ...) (app nil ...))
     (app cons (app cons ...) (app nil ...)))
    <-))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  con
  (app
   cons
   'lambda
   (->
    (app
     cons
     (app append (app xargs ...) (app nil ...))
     (app cons (app cons ...) (app nil ...)))
    <-))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  con
  (app
   cons
   'lambda
   (->
    (app
     cons
     (app append vars (app nil ...))
     (app cons (app let->exp ...) (app nil ...)))
    <-))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append vars (app nil ...))
      (app cons (app let->exp ...) (app nil ...)))
     <-)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  con
  (app
   cons
   'lambda
   (->
    (app
     cons
     (app cons 'F (app nil ...))
     (app cons (app cons ...) (app nil ...)))
    <-))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  con
  (app
   cons
   'lambda
   (->
    (app
     cons
     (app cons 'F (app nil ...))
     (app cons (app cons ...) (app nil ...)))
    <-))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  con
  (app
   cons
   'lambda
   (->
    (app
     cons
     (app cons 'h (app nil ...))
     (app cons (app cons ...) (app nil ...)))
    <-))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  con
  (app
   cons
   'lambda
   (->
    (app
     cons
     (app cons 'h (app nil ...))
     (app cons (app cons ...) (app nil ...)))
    <-))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  con
  (app
   cons
   'lambda
   (->
    (app
     cons
     (app cons 'x (app nil ...))
     (app cons (app cons ...) (app cons ...)))
    <-))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'x (app nil ...))
      (app cons (app cons ...) (app cons ...)))
     <-)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  con
  (app
   cons
   'lambda
   (->
    (app cons (app cons name (app nil ...)) (app cons arg (app nil ...)))
    <-))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app cons (app cons name (app nil ...)) (app cons arg (app nil ...)))
     <-)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  con
  (app
   cons
   'let
   (->
    (app
     cons
     (app cons (app cons ...) (app nil ...))
     (app cons (app cons ...) (app nil ...)))
    <-))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  con
  (app
   cons
   'let
   (->
    (app
     cons
     (app cons (app cons ...) (app nil ...))
     (app cons (app dummy-bind ...) (app nil ...)))
    <-))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app dummy-bind ...) (app nil ...)))
     <-)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  con
  (app
   cons
   'let
   (->
    (app
     cons
     (app cons (app cons ...) (app nil ...))
     (app cons (app letrec1->exp ...) (app nil ...)))
    <-))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app letrec1->exp ...) (app nil ...)))
     <-)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  con
  (app
   cons
   (->
    (app
     cons
     (app cons 'lambda (app cons ...))
     (app append args (app nil ...)))
    <-)
   (app nil))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  con
  (app
   cons
   (->
    (app
     cons
     (app cons 'lambda (app cons ...))
     (app cons (app cons ...) (app nil ...)))
    <-)
   (app nil))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  con
  (app
   cons
   (->
    (app
     cons
     (app cons (app cons ...) (app cons ...))
     (app append (app xargs ...) (app nil ...)))
    <-)
   (app nil))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  con
  (app
   cons
   (->
    (app
     cons
     (app cons (app cons ...) (app cons ...))
     (app append (app xargs ...) (app nil ...)))
    <-)
   (app nil))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  con
  (app
   cons
   (->
    (app string->symbol (app string-append "x" (app number->string ...)))
    <-)
   (app xargs (app - n 1)))
  (env ()))
clos/con: ⊥
literals: '(⊥ ⊥ ⊥ ⊤)

'(store:
  con
  (app
   cons
   (-> 'lambda <-)
   (app
    cons
    (app append (app xargs ...) (app nil ...))
    (app cons (app cons ...) (app nil ...))))
  (env ()))
clos/con: ⊥
literals: '(⊥ ⊥ ⊥ lambda)

'(store:
  con
  (app
   cons
   (-> 'lambda <-)
   (app
    cons
    (app append (app xargs ...) (app nil ...))
    (app cons (app cons ...) (app nil ...))))
  (env ()))
clos/con: ⊥
literals: '(⊥ ⊥ ⊥ lambda)

'(store:
  con
  (app
   cons
   (-> 'lambda <-)
   (app
    cons
    (app append vars (app nil ...))
    (app cons (app let->exp ...) (app nil ...))))
  (env ()))
clos/con: ⊥
literals: '(⊥ ⊥ ⊥ lambda)

'(store:
  con
  (app
   cons
   (-> 'lambda <-)
   (app
    cons
    (app cons 'F (app nil ...))
    (app cons (app cons ...) (app nil ...))))
  (env ()))
clos/con: ⊥
literals: '(⊥ ⊥ ⊥ lambda)

'(store:
  con
  (app
   cons
   (-> 'lambda <-)
   (app
    cons
    (app cons 'F (app nil ...))
    (app cons (app cons ...) (app nil ...))))
  (env ()))
clos/con: ⊥
literals: '(⊥ ⊥ ⊥ lambda)

'(store:
  con
  (app
   cons
   (-> 'lambda <-)
   (app
    cons
    (app cons 'h (app nil ...))
    (app cons (app cons ...) (app nil ...))))
  (env ()))
clos/con: ⊥
literals: '(⊥ ⊥ ⊥ lambda)

'(store:
  con
  (app
   cons
   (-> 'lambda <-)
   (app
    cons
    (app cons 'h (app nil ...))
    (app cons (app cons ...) (app nil ...))))
  (env ()))
clos/con: ⊥
literals: '(⊥ ⊥ ⊥ lambda)

'(store:
  con
  (app
   cons
   (-> 'lambda <-)
   (app
    cons
    (app cons 'x (app nil ...))
    (app cons (app cons ...) (app cons ...))))
  (env ()))
clos/con: ⊥
literals: '(⊥ ⊥ ⊥ lambda)

'(store:
  con
  (app
   cons
   (-> 'lambda <-)
   (app cons (app cons name (app nil ...)) (app cons arg (app nil ...))))
  (env ()))
clos/con: ⊥
literals: '(⊥ ⊥ ⊥ lambda)

'(store:
  con
  (app
   cons
   (-> 'let <-)
   (app
    cons
    (app cons (app cons ...) (app nil ...))
    (app cons (app cons ...) (app nil ...))))
  (env ()))
clos/con: ⊥
literals: '(⊥ ⊥ ⊥ let)

'(store:
  con
  (app
   cons
   (-> 'let <-)
   (app
    cons
    (app cons (app cons ...) (app nil ...))
    (app cons (app dummy-bind ...) (app nil ...))))
  (env ()))
clos/con: ⊥
literals: '(⊥ ⊥ ⊥ let)

'(store:
  con
  (app
   cons
   (-> 'let <-)
   (app
    cons
    (app cons (app cons ...) (app nil ...))
    (app cons (app letrec1->exp ...) (app nil ...))))
  (env ()))
clos/con: ⊥
literals: '(⊥ ⊥ ⊥ let)

'(store:
  con
  (app
   cons
   (-> (app Yn num-args) <-)
   (app cons (app cons 'lambda (app cons ...)) (app nil)))
  (env ()))
clos/con:
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  con
  (app
   cons
   (-> (app append (app xargs n) (app nil)) <-)
   (app cons (app cons (app cons ...) (app append ...)) (app nil)))
  (env ()))
clos/con:
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  con
  (app
   cons
   (-> (app append (app xargs n) (app nil)) <-)
   (app cons (app cons (app cons ...) (app append ...)) (app nil)))
  (env ()))
clos/con:
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  con
  (app
   cons
   (-> (app append vars (app nil)) <-)
   (app cons (app let->exp exp) (app nil)))
  (env ()))
clos/con:
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  con
  (app
   cons
   (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
   (app nil))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  con
  (app
   cons
   (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
   (app nil))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  con
  (app
   cons
   (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
   (app nil))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  con
  (app
   cons
   (-> (app cons 'F (app nil)) <-)
   (app cons (app cons 'F (app cons ...)) (app nil)))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  con
  (app
   cons
   (-> (app cons 'F (app nil)) <-)
   (app cons (app cons 'F (app cons ...)) (app nil)))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  con
  (app
   cons
   (-> (app cons 'h (app cons 'h (app nil ...))) <-)
   (app cons 'F (app nil)))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  con
  (app
   cons
   (-> (app cons 'h (app cons 'h (app nil ...))) <-)
   (app cons 'F (app nil)))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  con
  (app
   cons
   (-> (app cons 'h (app nil)) <-)
   (app cons (app cons 'lambda (app cons ...)) (app nil)))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  con
  (app
   cons
   (-> (app cons 'h (app nil)) <-)
   (app cons (app cons 'lambda (app cons ...)) (app nil)))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  con
  (app
   cons
   (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
   (app append args (app nil)))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  con
  (app
   cons
   (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
   (app nil))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  con
  (app
   cons
   (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
   (app nil))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  con
  (app
   cons
   (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
   (app cons (app cons 'lambda (app cons ...)) (app nil)))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  con
  (app
   cons
   (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
   (app nil))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  con
  (app
   cons
   (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
   (app nil))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  con
  (app
   cons
   (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
   (app nil))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  con
  (app
   cons
   (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
   (app nil))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  con
  (app
   cons
   (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
   (app nil))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  con
  (app
   cons
   (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
   (app cons 10 (app nil)))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  con
  (app
   cons
   (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
   (app nil))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  con
  (app
   cons
   (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
   (app nil))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  con
  (app
   cons
   (-> (app cons 'x (app nil)) <-)
   (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...))))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  con
  (app
   cons
   (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
   (app nil))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  con
  (app
   cons
   (-> (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...))) <-)
   (app nil))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  con
  (app
   cons
   (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
   (app cons (app dummy-bind (app cdr ...)) (app nil)))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  con
  (app
   cons
   (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
   (app append (app xargs n) (app nil)))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  con
  (app
   cons
   (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
   (app append (app xargs n) (app nil)))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  con
  (app
   cons
   (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
   (app cons (app cons '+ (app cons ...)) (app nil)))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  con
  (app
   cons
   (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
   (app cons (app letrec1->exp exp) (app nil)))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  con
  (app
   cons
   (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
   (app nil))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  con
  (app
   cons
   (-> name <-)
   (app cons (app cons (app Yn ...) (app cons ...)) (app nil)))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(store:
  con
  (app
   cons
   (app
    cons
    (app cons 'lambda (app cons ...))
    (app cons (app cons ...) (app nil ...)))
   (-> (app nil) <-))
  (env ()))
clos/con:
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  con
  (app
   cons
   (app
    cons
    (app cons (app cons ...) (app cons ...))
    (app append (app xargs ...) (app nil ...)))
   (-> (app nil) <-))
  (env ()))
clos/con:
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  con
  (app
   cons
   (app
    cons
    (app cons (app cons ...) (app cons ...))
    (app append (app xargs ...) (app nil ...)))
   (-> (app nil) <-))
  (env ()))
clos/con:
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  con
  (app
   cons
   (app Yn num-args)
   (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (app Yn num-args)
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  con
  (app
   cons
   (app append (app xargs n) (app nil))
   (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  con
  (app
   cons
   (app append (app xargs n) (app nil))
   (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  con
  (app
   cons
   (app append vars (app nil))
   (-> (app cons (app let->exp exp) (app nil)) <-))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (app append vars (app nil))
    (-> (app cons (app let->exp exp) (app nil)) <-)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  con
  (app
   cons
   (app cons '$_ (app cons (app car ...) (app nil ...)))
   (-> (app nil) <-))
  (env ()))
clos/con:
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  con
  (app
   cons
   (app cons 'F (app cons (app cons ...) (app nil ...)))
   (-> (app nil) <-))
  (env ()))
clos/con:
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  con
  (app
   cons
   (app cons 'F (app cons (app cons ...) (app nil ...)))
   (-> (app nil) <-))
  (env ()))
clos/con:
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  con
  (app
   cons
   (app cons 'F (app nil))
   (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  con
  (app
   cons
   (app cons 'F (app nil))
   (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  con
  (app
   cons
   (app cons 'h (app cons 'h (app nil ...)))
   (-> (app cons 'F (app nil)) <-))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  con
  (app
   cons
   (app cons 'h (app cons 'h (app nil ...)))
   (-> (app cons 'F (app nil)) <-))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  con
  (app
   cons
   (app cons 'h (app nil))
   (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  con
  (app
   cons
   (app cons 'h (app nil))
   (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  con
  (app
   cons
   (app cons 'lambda (app cons (app append ...) (app cons ...)))
   (-> (app append args (app nil)) <-))
  (env ()))
clos/con:
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  con
  (app
   cons
   (app cons 'lambda (app cons (app append ...) (app cons ...)))
   (-> (app nil) <-))
  (env ()))
clos/con:
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  con
  (app
   cons
   (app cons 'lambda (app cons (app append ...) (app cons ...)))
   (-> (app nil) <-))
  (env ()))
clos/con:
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  con
  (app
   cons
   (app cons 'lambda (app cons (app cons ...) (app cons ...)))
   (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (app cons 'lambda (app cons (app cons ...) (app cons ...)))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  con
  (app
   cons
   (app cons 'lambda (app cons (app cons ...) (app cons ...)))
   (-> (app nil) <-))
  (env ()))
clos/con:
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  con
  (app
   cons
   (app cons 'lambda (app cons (app cons ...) (app cons ...)))
   (-> (app nil) <-))
  (env ()))
clos/con:
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  con
  (app
   cons
   (app cons 'lambda (app cons (app cons ...) (app cons ...)))
   (-> (app nil) <-))
  (env ()))
clos/con:
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  con
  (app
   cons
   (app cons 'lambda (app cons (app cons ...) (app cons ...)))
   (-> (app nil) <-))
  (env ()))
clos/con:
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  con
  (app
   cons
   (app cons 'lambda (app cons (app cons ...) (app cons ...)))
   (-> (app nil) <-))
  (env ()))
clos/con:
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  con
  (app
   cons
   (app cons 'let (app cons (app cons ...) (app cons ...)))
   (-> (app cons 10 (app nil)) <-))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (app cons 'let (app cons (app cons ...) (app cons ...)))
    (-> (app cons 10 (app nil)) <-)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  con
  (app
   cons
   (app cons 'let (app cons (app cons ...) (app cons ...)))
   (-> (app nil) <-))
  (env ()))
clos/con:
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  con
  (app
   cons
   (app cons 'let (app cons (app cons ...) (app cons ...)))
   (-> (app nil) <-))
  (env ()))
clos/con:
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  con
  (app
   cons
   (app cons 'x (app nil))
   (->
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))
    <-))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (app cons 'x (app nil))
    (->
     (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))
     <-)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  con
  (app
   cons
   (app cons 'z (app cons (app cons ...) (app nil ...)))
   (-> (app nil) <-))
  (env ()))
clos/con:
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  con
  (app
   cons
   (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
   (-> (app nil) <-))
  (env ()))
clos/con:
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  con
  (app
   cons
   (app cons (app cons '$_ (app cons ...)) (app nil))
   (-> (app cons (app dummy-bind (app cdr ...)) (app nil)) <-))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (app cons (app cons '$_ (app cons ...)) (app nil))
    (-> (app cons (app dummy-bind (app cdr ...)) (app nil)) <-)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  con
  (app
   cons
   (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...)))
   (-> (app append (app xargs n) (app nil)) <-))
  (env ()))
clos/con:
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  con
  (app
   cons
   (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...)))
   (-> (app append (app xargs n) (app nil)) <-))
  (env ()))
clos/con:
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  con
  (app
   cons
   (app cons (app cons 'lambda (app cons ...)) (app append args (app nil ...)))
   (-> (app nil) <-))
  (env ()))
clos/con:
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  con
  (app
   cons
   (app cons (app cons 'z (app cons ...)) (app nil))
   (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (app cons (app cons 'z (app cons ...)) (app nil))
    (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  con
  (app
   cons
   (app cons (app cons name (app cons ...)) (app nil))
   (-> (app cons (app letrec1->exp exp) (app nil)) <-))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (app cons (app cons name (app cons ...)) (app nil))
    (-> (app cons (app letrec1->exp exp) (app nil)) <-)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  con
  (app
   cons
   (app cons name (app cons (app cons ...) (app nil ...)))
   (-> (app nil) <-))
  (env ()))
clos/con:
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  con
  (app
   cons
   (app string->symbol (app string-append "x" (app number->string ...)))
   (-> (app xargs (app - n 1)) <-))
  (env ()))
clos/con:
	'((con
   cons
   (match
    (app <= n 0)
    ((#f)
     (->
      (app
       cons
       (app string->symbol (app string-append ...))
       (app xargs (app - ...)))
      <-))
    _))
  (env ()))
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  con
  (app
   cons
   name
   (-> (app cons (app cons (app Yn ...) (app cons ...)) (app nil)) <-))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    name
    (-> (app cons (app cons (app Yn ...) (app cons ...)) (app nil)) <-)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  con
  (app cons '$_ (-> (app cons (app car exps) (app nil)) <-))
  (env ()))
clos/con:
	'((con cons (app cons '$_ (-> (app cons (app car exps) (app nil)) <-)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  con
  (app cons '+ (-> (app cons 3 (app cons 'x (app cons ...))) <-))
  (env ()))
clos/con:
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app cons ...))) <-)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  con
  (app cons '+ (-> (app cons 3 (app cons 'x (app nil ...))) <-))
  (env ()))
clos/con:
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app nil ...))) <-)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  con
  (app cons 'F (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  con
  (app cons 'F (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  con
  (app cons 'z (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-))
  (env ()))
clos/con:
	'((con
   cons
   (app cons 'z (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  con
  (app cons (-> '$_ <-) (app cons (app car exps) (app nil)))
  (env ()))
clos/con: ⊥
literals: '(⊥ ⊥ ⊥ $_)

'(store:
  con
  (app cons (-> '+ <-) (app cons 3 (app cons 'x (app cons ...))))
  (env ()))
clos/con: ⊥
literals: '(⊥ ⊥ ⊥ +)

'(store:
  con
  (app cons (-> '+ <-) (app cons 3 (app cons 'x (app nil ...))))
  (env ()))
clos/con: ⊥
literals: '(⊥ ⊥ ⊥ +)

'(store:
  con
  (app cons (-> 'F <-) (app cons (app cons 'lambda (app cons ...)) (app nil)))
  (env ()))
clos/con: ⊥
literals: '(⊥ ⊥ ⊥ F)

'(store:
  con
  (app cons (-> 'F <-) (app cons (app cons 'lambda (app cons ...)) (app nil)))
  (env ()))
clos/con: ⊥
literals: '(⊥ ⊥ ⊥ F)

'(store:
  con
  (app cons (-> 'z <-) (app cons (app cons '+ (app cons ...)) (app nil)))
  (env ()))
clos/con: ⊥
literals: '(⊥ ⊥ ⊥ z)

'(store:
  con
  (app cons (-> (app car lst1) <-) (app append (app cdr lst1) lst2))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(store:
  con
  (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil))
  (env ()))
clos/con:
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  con
  (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil))
  (env ()))
clos/con:
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  con
  (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil)))
  (env ()))
clos/con:
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  con
  (app cons (-> (app dummy-bind (app cdr exps)) <-) (app nil))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(store:
  con
  (app cons (-> (app f (app car lst)) <-) (app map f (app cdr lst)))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(store:
  con
  (app cons (-> 3 <-) (app cons 'x (app cons 'z (app nil ...))))
  (env ()))
clos/con: ⊥
literals: '(3 ⊥ ⊥ ⊥)

'(store:
  con
  (app cons (app car lst1) (-> (app append (app cdr lst1) lst2) <-))
  (env ()))
clos/con:
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  con
  (app cons (app cons '+ (app cons 3 (app cons ...))) (-> (app nil) <-))
  (env ()))
clos/con:
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  con
  (app cons (app cons '+ (app cons 3 (app cons ...))) (-> (app nil) <-))
  (env ()))
clos/con:
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  con
  (app cons (app cons name (app nil)) (-> (app cons arg (app nil)) <-))
  (env ()))
clos/con:
	'((con
   cons
   (app cons (app cons name (app nil)) (-> (app cons arg (app nil)) <-)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  con
  (app cons (app dummy-bind (app cdr exps)) (-> (app nil) <-))
  (env ()))
clos/con:
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  con
  (app cons (app f (app car lst)) (-> (app map f (app cdr lst)) <-))
  (env ()))
clos/con:
	'((con
   cons
   (match
    (app pair? lst)
    (#f)
    (_ (-> (app cons (app f (app car ...)) (app map f (app cdr ...))) <-))))
  (env ()))
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  con
  (app cons 3 (-> (app cons 'x (app cons 'z (app nil ...))) <-))
  (env ()))
clos/con:
	'((con cons (app cons 3 (-> (app cons 'x (app cons 'z (app nil ...))) <-)))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  const?
  (letrec*
   (... integer->char-list (const? (-> (λ (exp) ...) <-)) ref? ...)
   ...)
  (env ()))
clos/con:
	'((letrec*
   (... integer->char-list (const? (-> (λ (exp) ...) <-)) ref? ...)
   ...)
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  dummy-bind
  (letrec* (... singlet? (dummy-bind (-> (λ (exps) ...) <-)) () ...) ...)
  (env ()))
clos/con:
	'((letrec* (... singlet? (dummy-bind (-> (λ (exps) ...) <-)) () ...) ...)
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  exp
  (λ (exp)
    (->
     (app
      string-append
      "("
      (app java-compile-exp (app if->condition ...))
      ").toBoolean() ? ("
      (app java-compile-exp (app if->then ...))
      ") : ("
      (app java-compile-exp (app if->else ...))
      ")")
     <-))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(store:
  exp
  (λ (exp)
    (->
     (app
      string-append
      "VoidValue.Void(m_"
      (app mangle (app set!-var ...))
      ".value = "
      (app java-compile-exp (app set!-exp ...))
      ")")
     <-))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(store:
  exp
  (λ (exp)
    (->
     (app
      string-append
      "public class BOut extends RuntimeEnvironment {\n"
      " public static void main (String[] args) {\n"
      (app java-compile-exp exp)
      " ;\n"
      " }\n"
      "}\n")
     <-))
  (env ()))
clos/con:
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  exp
  (λ (exp) (-> (letrec* (singlet? ... dummy-bind) ...) <-))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(store:
  exp
  (λ (exp) (-> (match (app tagged-list? 'letrec exp) ...) <-))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(store:
  formals
  (let* (... () (formals (-> (app lambda->formals exp) <-)) num-args ...) ...)
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(store:
  formals
  (λ (formals) (-> (match (app not (app pair? ...)) ...) <-))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append vars (app nil ...))
      (app cons (app let->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'x (app nil ...))
      (app cons (app cons ...) (app cons ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app cons (app cons name (app nil ...)) (app cons arg (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app dummy-bind ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app letrec1->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app Yn num-args)
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append vars (app nil))
    (-> (app cons (app let->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'lambda (app cons (app cons ...) (app cons ...)))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'let (app cons (app cons ...) (app cons ...)))
    (-> (app cons 10 (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'x (app nil))
    (->
     (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons '$_ (app cons ...)) (app nil))
    (-> (app cons (app dummy-bind (app cdr ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons 'z (app cons ...)) (app nil))
    (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons name (app cons ...)) (app nil))
    (-> (app cons (app letrec1->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    name
    (-> (app cons (app cons (app Yn ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons 'z (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (app cons (app cons name (app nil)) (-> (app cons arg (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app set! mutable-variables (-> (app cons symbol mutable-variables) <-)))
  (env ()))
	'((con
   cons
   (match
    (app <= n 0)
    ((#f)
     (->
      (app
       cons
       (app string->symbol (app string-append ...))
       (app xargs (app - ...)))
      <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (match
    (app pair? lst)
    (#f)
    (_ (-> (app cons (app f (app car ...)) (app map f (app cdr ...))) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con cons (app cons '$_ (-> (app cons (app car exps) (app nil)) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app cons ...))) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'x (-> (app cons 'z (app nil)) <-))) (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app cons 'z (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app nil)) <-))) (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(store:
  fun
  (let* (... args (fun (-> (app app->fun exp) <-)) num-args ...) ...)
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(store:
  i
  (λ (i) (-> (match (app < i (app string-length ...)) ...) <-))
  (env ()))
clos/con: ⊥
literals: '(0 ⊥ ⊥ ⊥)

'(store:
  if->condition
  (letrec* (... if? (if->condition (-> (λ (exp) ...) <-)) if->then ...) ...)
  (env ()))
clos/con:
	'((letrec* (... if? (if->condition (-> (λ (exp) ...) <-)) if->then ...) ...)
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  if->else
  (letrec* (... if->then (if->else (-> (λ (exp) ...) <-)) app? ...) ...)
  (env ()))
clos/con:
	'((letrec* (... if->then (if->else (-> (λ (exp) ...) <-)) app? ...) ...)
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  if->then
  (letrec*
   (... if->condition (if->then (-> (λ (exp) ...) <-)) if->else ...)
   ...)
  (env ()))
clos/con:
	'((letrec*
   (... if->condition (if->then (-> (λ (exp) ...) <-)) if->else ...)
   ...)
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  if?
  (letrec* (... lambda->exp (if? (-> (λ (exp) ...) <-)) if->condition ...) ...)
  (env ()))
clos/con:
	'((letrec* (... lambda->exp (if? (-> (λ (exp) ...) <-)) if->condition ...) ...)
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  input-program
  (letrec*
   (...
    java-compile-if
    (input-program
     (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
    ()
    ...)
   ...)
  (env ()))
clos/con:
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  integer->char-list
  (letrec*
   (... char->natural (integer->char-list (-> (λ (n) ...) <-)) const? ...)
   ...)
  (env ()))
clos/con:
	'((letrec*
   (... char->natural (integer->char-list (-> (λ (n) ...) <-)) const? ...)
   ...)
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  is-in?
  (letrec* (... () (is-in? (-> (λ (S) ...) <-)) () ...) ...)
  (env ()))
clos/con:
	'((letrec* (... () (is-in? (-> (λ (S) ...) <-)) () ...) ...) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  is-mutable?
  (letrec*
   (...
    mark-mutable
    (is-mutable? (-> (λ (symbol) ...) <-))
    analyze-mutable-variables
    ...)
   ...)
  (env ()))
clos/con:
	'((letrec*
   (...
    mark-mutable
    (is-mutable? (-> (λ (symbol) ...) <-))
    analyze-mutable-variables
    ...)
   ...)
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  java-compile-app
  (letrec*
   (...
    java-compile-set!
    (java-compile-app (-> (λ (exp) ...) <-))
    java-compile-if
    ...)
   ...)
  (env ()))
clos/con:
	'((letrec*
   (...
    java-compile-set!
    (java-compile-app (-> (λ (exp) ...) <-))
    java-compile-if
    ...)
   ...)
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  java-compile-args
  (letrec*
   (...
    java-compile-lambda
    (java-compile-args (-> (λ (args) ...) <-))
    java-compile-set!
    ...)
   ...)
  (env ()))
clos/con:
	'((letrec*
   (...
    java-compile-lambda
    (java-compile-args (-> (λ (args) ...) <-))
    java-compile-set!
    ...)
   ...)
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  java-compile-const
  (letrec*
   (...
    java-compile-exp
    (java-compile-const (-> (λ (exp) ...) <-))
    java-compile-prim
    ...)
   ...)
  (env ()))
clos/con:
	'((letrec*
   (...
    java-compile-exp
    (java-compile-const (-> (λ (exp) ...) <-))
    java-compile-prim
    ...)
   ...)
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  java-compile-exp
  (letrec*
   (...
    java-compile-program
    (java-compile-exp (-> (λ (exp) ...) <-))
    java-compile-const
    ...)
   ...)
  (env ()))
clos/con:
	'((letrec*
   (...
    java-compile-program
    (java-compile-exp (-> (λ (exp) ...) <-))
    java-compile-const
    ...)
   ...)
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  java-compile-formals
  (letrec*
   (...
    java-compile-ref
    (java-compile-formals (-> (λ (formals) ...) <-))
    java-compile-lambda
    ...)
   ...)
  (env ()))
clos/con:
	'((letrec*
   (...
    java-compile-ref
    (java-compile-formals (-> (λ (formals) ...) <-))
    java-compile-lambda
    ...)
   ...)
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  java-compile-if
  (letrec*
   (...
    java-compile-app
    (java-compile-if (-> (λ (exp) ...) <-))
    input-program
    ...)
   ...)
  (env ()))
clos/con:
	'((letrec*
   (...
    java-compile-app
    (java-compile-if (-> (λ (exp) ...) <-))
    input-program
    ...)
   ...)
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  java-compile-lambda
  (letrec*
   (...
    java-compile-formals
    (java-compile-lambda (-> (λ (exp) ...) <-))
    java-compile-args
    ...)
   ...)
  (env ()))
clos/con:
	'((letrec*
   (...
    java-compile-formals
    (java-compile-lambda (-> (λ (exp) ...) <-))
    java-compile-args
    ...)
   ...)
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  java-compile-prim
  (letrec*
   (...
    java-compile-const
    (java-compile-prim (-> (λ (p) ...) <-))
    java-compile-ref
    ...)
   ...)
  (env ()))
clos/con:
	'((letrec*
   (...
    java-compile-const
    (java-compile-prim (-> (λ (p) ...) <-))
    java-compile-ref
    ...)
   ...)
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  java-compile-program
  (letrec*
   (...
    mangle
    (java-compile-program (-> (λ (exp) ...) <-))
    java-compile-exp
    ...)
   ...)
  (env ()))
clos/con:
	'((letrec*
   (...
    mangle
    (java-compile-program (-> (λ (exp) ...) <-))
    java-compile-exp
    ...)
   ...)
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  java-compile-ref
  (letrec*
   (...
    java-compile-prim
    (java-compile-ref (-> (λ (exp) ...) <-))
    java-compile-formals
    ...)
   ...)
  (env ()))
clos/con:
	'((letrec*
   (...
    java-compile-prim
    (java-compile-ref (-> (λ (exp) ...) <-))
    java-compile-formals
    ...)
   ...)
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  java-compile-set!
  (letrec*
   (...
    java-compile-args
    (java-compile-set! (-> (λ (exp) ...) <-))
    java-compile-app
    ...)
   ...)
  (env ()))
clos/con:
	'((letrec*
   (...
    java-compile-args
    (java-compile-set! (-> (λ (exp) ...) <-))
    java-compile-app
    ...)
   ...)
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  java-wrap-mutables
  (letrec* (... () (java-wrap-mutables (-> (λ (vars) ...) <-)) () ...) ...)
  (env ()))
clos/con:
	'((letrec* (... () (java-wrap-mutables (-> (λ (vars) ...) <-)) () ...) ...)
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  lambda->exp
  (letrec*
   (... lambda->formals (lambda->exp (-> (λ (exp) ...) <-)) if? ...)
   ...)
  (env ()))
clos/con:
	'((letrec*
   (... lambda->formals (lambda->exp (-> (λ (exp) ...) <-)) if? ...)
   ...)
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  lambda->formals
  (letrec*
   (... lambda? (lambda->formals (-> (λ (exp) ...) <-)) lambda->exp ...)
   ...)
  (env ()))
clos/con:
	'((letrec*
   (... lambda? (lambda->formals (-> (λ (exp) ...) <-)) lambda->exp ...)
   ...)
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  lambda?
  (letrec*
   (... letrec1->exp (lambda? (-> (λ (exp) ...) <-)) lambda->formals ...)
   ...)
  (env ()))
clos/con:
	'((letrec*
   (... letrec1->exp (lambda? (-> (λ (exp) ...) <-)) lambda->formals ...)
   ...)
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  length
  (letrec* (... cdr (length (-> (λ (length-l) ...) <-)) pair? ...) ...)
  (env ()))
clos/con:
	'((letrec* (... cdr (length (-> (λ (length-l) ...) <-)) pair? ...) ...)
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  length-c
  (match
   length-l
   ((cons length-c length-d) (-> (app + 1 (app length length-d)) <-))
   (nil))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(store:
  length-d
  (match
   length-l
   ((cons length-c length-d) (-> (app + 1 (app length length-d)) <-))
   (nil))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append vars (app nil ...))
      (app cons (app let->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'x (app nil ...))
      (app cons (app cons ...) (app cons ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app cons (app cons name (app nil ...)) (app cons arg (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app dummy-bind ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app letrec1->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app Yn num-args)
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append vars (app nil))
    (-> (app cons (app let->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'lambda (app cons (app cons ...) (app cons ...)))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'let (app cons (app cons ...) (app cons ...)))
    (-> (app cons 10 (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'x (app nil))
    (->
     (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons '$_ (app cons ...)) (app nil))
    (-> (app cons (app dummy-bind (app cdr ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons 'z (app cons ...)) (app nil))
    (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons name (app cons ...)) (app nil))
    (-> (app cons (app letrec1->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    name
    (-> (app cons (app cons (app Yn ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons 'z (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons (app cons name (app nil)) (-> (app cons arg (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app set! mutable-variables (-> (app cons symbol mutable-variables) <-)))
  (env ()))
	'((con
   cons
   (match
    (app <= n 0)
    ((#f)
     (->
      (app
       cons
       (app string->symbol (app string-append ...))
       (app xargs (app - ...)))
      <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? lst)
    (#f)
    (_ (-> (app cons (app f (app car ...)) (app map f (app cdr ...))) <-))))
  (env ()))
	'((con cons (app cons '$_ (-> (app cons (app car exps) (app nil)) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app cons ...))) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'x (-> (app cons 'z (app nil)) <-))) (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app cons 'z (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app nil)) <-))) (env ()))
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  let->bindings
  (letrec* (... let? (let->bindings (-> (λ (exp) ...) <-)) let->exp ...) ...)
  (env ()))
clos/con:
	'((letrec* (... let? (let->bindings (-> (λ (exp) ...) <-)) let->exp ...) ...)
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  let->exp
  (letrec*
   (... let->bindings (let->exp (-> (λ (exp) ...) <-)) letrec1? ...)
   ...)
  (env ()))
clos/con:
	'((letrec*
   (... let->bindings (let->exp (-> (λ (exp) ...) <-)) letrec1? ...)
   ...)
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  let=>lambda
  (letrec* (... set!-exp (let=>lambda (-> (λ (exp) ...) <-)) arity ...) ...)
  (env ()))
clos/con:
	'((letrec* (... set!-exp (let=>lambda (-> (λ (exp) ...) <-)) arity ...) ...)
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  let?
  (letrec* (... ref? (let? (-> (λ (exp) ...) <-)) let->bindings ...) ...)
  (env ()))
clos/con:
	'((letrec* (... ref? (let? (-> (λ (exp) ...) <-)) let->bindings ...) ...)
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  letrec1->binding
  (letrec*
   (... letrec1? (letrec1->binding (-> (λ (exp) ...) <-)) letrec1->exp ...)
   ...)
  (env ()))
clos/con:
	'((letrec*
   (... letrec1? (letrec1->binding (-> (λ (exp) ...) <-)) letrec1->exp ...)
   ...)
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  letrec1->exp
  (letrec*
   (... letrec1->binding (letrec1->exp (-> (λ (exp) ...) <-)) lambda? ...)
   ...)
  (env ()))
clos/con:
	'((letrec*
   (... letrec1->binding (letrec1->exp (-> (λ (exp) ...) <-)) lambda? ...)
   ...)
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  letrec1=>Y
  (letrec* (... Yn (letrec1=>Y (-> (λ (exp) ...) <-)) begin=>let ...) ...)
  (env ()))
clos/con:
	'((letrec* (... Yn (letrec1=>Y (-> (λ (exp) ...) <-)) begin=>let ...) ...)
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  letrec1?
  (letrec*
   (... let->exp (letrec1? (-> (λ (exp) ...) <-)) letrec1->binding ...)
   ...)
  (env ()))
clos/con:
	'((letrec*
   (... let->exp (letrec1? (-> (λ (exp) ...) <-)) letrec1->binding ...)
   ...)
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  lst1
  (λ (lst1 lst2) (-> (match (app not (app pair? ...)) ...) <-))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append vars (app nil ...))
      (app cons (app let->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'x (app nil ...))
      (app cons (app cons ...) (app cons ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app cons (app cons name (app nil ...)) (app cons arg (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app dummy-bind ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app letrec1->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app Yn num-args)
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append vars (app nil))
    (-> (app cons (app let->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'lambda (app cons (app cons ...) (app cons ...)))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'let (app cons (app cons ...) (app cons ...)))
    (-> (app cons 10 (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'x (app nil))
    (->
     (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons '$_ (app cons ...)) (app nil))
    (-> (app cons (app dummy-bind (app cdr ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons 'z (app cons ...)) (app nil))
    (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons name (app cons ...)) (app nil))
    (-> (app cons (app letrec1->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    name
    (-> (app cons (app cons (app Yn ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons 'z (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons (app cons name (app nil)) (-> (app cons arg (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app set! mutable-variables (-> (app cons symbol mutable-variables) <-)))
  (env ()))
	'((con
   cons
   (match
    (app <= n 0)
    ((#f)
     (->
      (app
       cons
       (app string->symbol (app string-append ...))
       (app xargs (app - ...)))
      <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? lst)
    (#f)
    (_ (-> (app cons (app f (app car ...)) (app map f (app cdr ...))) <-))))
  (env ()))
	'((con cons (app cons '$_ (-> (app cons (app car exps) (app nil)) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app cons ...))) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'x (-> (app cons 'z (app nil)) <-))) (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app cons 'z (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app nil)) <-))) (env ()))
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  lst2
  (λ (lst1 lst2) (-> (match (app not (app pair? ...)) ...) <-))
  (env ()))
clos/con:
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  mangle
  (letrec*
   (...
    analyze-mutable-variables
    (mangle (-> (λ (symbol) ...) <-))
    java-compile-program
    ...)
   ...)
  (env ()))
clos/con:
	'((letrec*
   (...
    analyze-mutable-variables
    (mangle (-> (λ (symbol) ...) <-))
    java-compile-program
    ...)
   ...)
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  map
  (letrec* (... cadddr (map (-> (λ (f lst) ...) <-)) append ...) ...)
  (env ()))
clos/con:
	'((letrec* (... cadddr (map (-> (λ (f lst) ...) <-)) append ...) ...) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  mark-mutable
  (letrec*
   (...
    mutable-variables
    (mark-mutable (-> (λ (symbol) ...) <-))
    is-mutable?
    ...)
   ...)
  (env ()))
clos/con:
	'((letrec*
   (...
    mutable-variables
    (mark-mutable (-> (λ (symbol) ...) <-))
    is-mutable?
    ...)
   ...)
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  mutable-variables
  (letrec*
   (... begin=>let (mutable-variables (-> (app nil) <-)) mark-mutable ...)
   ...)
  (env ()))
clos/con:
	'((con
   cons
   (app set! mutable-variables (-> (app cons symbol mutable-variables) <-)))
  (env ()))
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  n
  (λ (n) (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-))
  (env ()))
clos/con: ⊥
literals: '(⊤ ⊥ ⊥ ⊥)

'(store:
  name
  (let* (... binding (name (-> (app car binding) <-)) arg ...) ...)
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(store:
  null?
  (letrec* (... pair? (null? (-> (λ (null?-v) ...) <-)) cadr ...) ...)
  (env ()))
clos/con:
	'((letrec* (... pair? (null? (-> (λ (null?-v) ...) <-)) cadr ...) ...)
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  num-args
  (let* (... arg (num-args (-> (app arity arg) <-)) () ...) ...)
  (env ()))
clos/con: ⊥
literals: '(⊤ ⊥ ⊥ ⊥)

'(store:
  num-args
  (let* (... formals (num-args (-> (app length formals) <-)) () ...) ...)
  (env ()))
clos/con: ⊥
literals: '(⊤ ⊥ ⊥ ⊥)

'(store:
  num-args
  (let* (... fun (num-args (-> (app length args) <-)) () ...) ...)
  (env ()))
clos/con: ⊥
literals: '(⊤ ⊥ ⊥ ⊥)

'(store:
  pair?
  (letrec* (... length (pair? (-> (λ (pair?-v) ...) <-)) null? ...) ...)
  (env ()))
clos/con:
	'((letrec* (... length (pair? (-> (λ (pair?-v) ...) <-)) null? ...) ...)
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  pair?-c
  (match pair?-v ((cons pair?-c pair?-d) (-> (app #t) <-)) _)
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(store:
  pair?-d
  (match pair?-v ((cons pair?-c pair?-d) (-> (app #t) <-)) _)
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append vars (app nil ...))
      (app cons (app let->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'x (app nil ...))
      (app cons (app cons ...) (app cons ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app cons (app cons name (app nil ...)) (app cons arg (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app dummy-bind ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app letrec1->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app Yn num-args)
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append vars (app nil))
    (-> (app cons (app let->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'lambda (app cons (app cons ...) (app cons ...)))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'let (app cons (app cons ...) (app cons ...)))
    (-> (app cons 10 (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'x (app nil))
    (->
     (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons '$_ (app cons ...)) (app nil))
    (-> (app cons (app dummy-bind (app cdr ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons 'z (app cons ...)) (app nil))
    (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons name (app cons ...)) (app nil))
    (-> (app cons (app letrec1->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    name
    (-> (app cons (app cons (app Yn ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons 'z (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons (app cons name (app nil)) (-> (app cons arg (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app set! mutable-variables (-> (app cons symbol mutable-variables) <-)))
  (env ()))
	'((con
   cons
   (match
    (app <= n 0)
    ((#f)
     (->
      (app
       cons
       (app string->symbol (app string-append ...))
       (app xargs (app - ...)))
      <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? lst)
    (#f)
    (_ (-> (app cons (app f (app car ...)) (app map f (app cdr ...))) <-))))
  (env ()))
	'((con cons (app cons '$_ (-> (app cons (app car exps) (app nil)) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app cons ...))) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'x (-> (app cons 'z (app nil)) <-))) (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app cons 'z (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app nil)) <-))) (env ()))
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  prim?
  (letrec* (... app->args (prim? (-> (λ (exp) ...) <-)) begin? ...) ...)
  (env ()))
clos/con:
	'((letrec* (... app->args (prim? (-> (λ (exp) ...) <-)) begin? ...) ...)
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  ref?
  (letrec* (... const? (ref? (-> (λ (exp) ...) <-)) let? ...) ...)
  (env ()))
clos/con:
	'((letrec* (... const? (ref? (-> (λ (exp) ...) <-)) let? ...) ...) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  set!-exp
  (letrec* (... set!-var (set!-exp (-> (λ (exp) ...) <-)) let=>lambda ...) ...)
  (env ()))
clos/con:
	'((letrec* (... set!-var (set!-exp (-> (λ (exp) ...) <-)) let=>lambda ...) ...)
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  set!-var
  (letrec* (... set!? (set!-var (-> (λ (exp) ...) <-)) set!-exp ...) ...)
  (env ()))
clos/con:
	'((letrec* (... set!? (set!-var (-> (λ (exp) ...) <-)) set!-exp ...) ...)
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  set!?
  (letrec* (... begin->exps (set!? (-> (λ (exp) ...) <-)) set!-var ...) ...)
  (env ()))
clos/con:
	'((letrec* (... begin->exps (set!? (-> (λ (exp) ...) <-)) set!-var ...) ...)
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  singlet?
  (letrec* (... () (singlet? (-> (λ (l) ...) <-)) dummy-bind ...) ...)
  (env ()))
clos/con:
	'((letrec* (... () (singlet? (-> (λ (l) ...) <-)) dummy-bind ...) ...)
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  string->list
  (letrec*
   (... append (string->list (-> (λ (s) ...) <-)) tagged-list? ...)
   ...)
  (env ()))
clos/con:
	'((letrec*
   (... append (string->list (-> (λ (s) ...) <-)) tagged-list? ...)
   ...)
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  symbol
  (λ (symbol)
    (-> (app set! mutable-variables (app cons symbol mutable-variables)) <-))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(store:
  tagged-list?
  (letrec*
   (... string->list (tagged-list? (-> (λ (tag l) ...) <-)) char->natural ...)
   ...)
  (env ()))
clos/con:
	'((letrec*
   (... string->list (tagged-list? (-> (λ (tag l) ...) <-)) char->natural ...)
   ...)
  (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  vars
  (let (... () (vars (-> (app map car (app let->bindings exp)) <-)) args ...)
    ...)
  (env ()))
clos/con:
	'((con
   cons
   (match
    (app pair? lst)
    (#f)
    (_ (-> (app cons (app f (app car ...)) (app map f (app cdr ...))) <-))))
  (env ()))
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store:
  vars
  (λ (vars) (-> (match (app not (app pair? ...)) ...) <-))
  (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append vars (app nil ...))
      (app cons (app let->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'x (app nil ...))
      (app cons (app cons ...) (app cons ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app cons (app cons name (app nil ...)) (app cons arg (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app dummy-bind ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app letrec1->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app Yn num-args)
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append vars (app nil))
    (-> (app cons (app let->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'lambda (app cons (app cons ...) (app cons ...)))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'let (app cons (app cons ...) (app cons ...)))
    (-> (app cons 10 (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'x (app nil))
    (->
     (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons '$_ (app cons ...)) (app nil))
    (-> (app cons (app dummy-bind (app cdr ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons 'z (app cons ...)) (app nil))
    (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons name (app cons ...)) (app nil))
    (-> (app cons (app letrec1->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    name
    (-> (app cons (app cons (app Yn ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons 'z (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (app cons (app cons name (app nil)) (-> (app cons arg (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app set! mutable-variables (-> (app cons symbol mutable-variables) <-)))
  (env ()))
	'((con
   cons
   (match
    (app <= n 0)
    ((#f)
     (->
      (app
       cons
       (app string->symbol (app string-append ...))
       (app xargs (app - ...)))
      <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (match
    (app pair? lst)
    (#f)
    (_ (-> (app cons (app f (app car ...)) (app map f (app cdr ...))) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con cons (app cons '$_ (-> (app cons (app car exps) (app nil)) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app cons ...))) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'x (-> (app cons 'z (app nil)) <-))) (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app cons 'z (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app nil)) <-))) (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(store:
  xargs
  (letrec* (... arity (xargs (-> (λ (n) ...) <-)) Yn ...) ...)
  (env ()))
clos/con:
	'((letrec* (... arity (xargs (-> (λ (n) ...) <-)) Yn ...) ...) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store: S (λ (S) (-> (match (app not (app pair? ...)) ...) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append vars (app nil ...))
      (app cons (app let->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'x (app nil ...))
      (app cons (app cons ...) (app cons ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app cons (app cons name (app nil ...)) (app cons arg (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app dummy-bind ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app letrec1->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app Yn num-args)
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append vars (app nil))
    (-> (app cons (app let->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'lambda (app cons (app cons ...) (app cons ...)))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'let (app cons (app cons ...) (app cons ...)))
    (-> (app cons 10 (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'x (app nil))
    (->
     (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons '$_ (app cons ...)) (app nil))
    (-> (app cons (app dummy-bind (app cdr ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons 'z (app cons ...)) (app nil))
    (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons name (app cons ...)) (app nil))
    (-> (app cons (app letrec1->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    name
    (-> (app cons (app cons (app Yn ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons 'z (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons (app cons name (app nil)) (-> (app cons arg (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app set! mutable-variables (-> (app cons symbol mutable-variables) <-)))
  (env ()))
	'((con
   cons
   (match
    (app <= n 0)
    ((#f)
     (->
      (app
       cons
       (app string->symbol (app string-append ...))
       (app xargs (app - ...)))
      <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? lst)
    (#f)
    (_ (-> (app cons (app f (app car ...)) (app map f (app cdr ...))) <-))))
  (env ()))
	'((con cons (app cons '$_ (-> (app cons (app car exps) (app nil)) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app cons ...))) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'x (-> (app cons 'z (app nil)) <-))) (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app cons 'z (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app nil)) <-))) (env ()))
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store: car-c (match car-v ((cons car-c car-d) (-> car-c <-))) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(store: car-d (match car-v ((cons car-c car-d) (-> car-c <-))) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append vars (app nil ...))
      (app cons (app let->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'x (app nil ...))
      (app cons (app cons ...) (app cons ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app cons (app cons name (app nil ...)) (app cons arg (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app dummy-bind ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app letrec1->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app Yn num-args)
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append vars (app nil))
    (-> (app cons (app let->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'lambda (app cons (app cons ...) (app cons ...)))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'let (app cons (app cons ...) (app cons ...)))
    (-> (app cons 10 (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'x (app nil))
    (->
     (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons '$_ (app cons ...)) (app nil))
    (-> (app cons (app dummy-bind (app cdr ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons 'z (app cons ...)) (app nil))
    (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons name (app cons ...)) (app nil))
    (-> (app cons (app letrec1->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    name
    (-> (app cons (app cons (app Yn ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons 'z (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons (app cons name (app nil)) (-> (app cons arg (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app set! mutable-variables (-> (app cons symbol mutable-variables) <-)))
  (env ()))
	'((con
   cons
   (match
    (app <= n 0)
    ((#f)
     (->
      (app
       cons
       (app string->symbol (app string-append ...))
       (app xargs (app - ...)))
      <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? lst)
    (#f)
    (_ (-> (app cons (app f (app car ...)) (app map f (app cdr ...))) <-))))
  (env ()))
	'((con cons (app cons '$_ (-> (app cons (app car exps) (app nil)) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app cons ...))) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'x (-> (app cons 'z (app nil)) <-))) (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app cons 'z (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app nil)) <-))) (env ()))
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store: car-v (λ (car-v) (-> (match car-v ...) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append vars (app nil ...))
      (app cons (app let->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'x (app nil ...))
      (app cons (app cons ...) (app cons ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app cons (app cons name (app nil ...)) (app cons arg (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app dummy-bind ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app letrec1->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app Yn num-args)
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append vars (app nil))
    (-> (app cons (app let->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'lambda (app cons (app cons ...) (app cons ...)))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'let (app cons (app cons ...) (app cons ...)))
    (-> (app cons 10 (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'x (app nil))
    (->
     (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons '$_ (app cons ...)) (app nil))
    (-> (app cons (app dummy-bind (app cdr ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons 'z (app cons ...)) (app nil))
    (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons name (app cons ...)) (app nil))
    (-> (app cons (app letrec1->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    name
    (-> (app cons (app cons (app Yn ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons 'z (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (app cons (app cons name (app nil)) (-> (app cons arg (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app set! mutable-variables (-> (app cons symbol mutable-variables) <-)))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app <= n 0)
    ((#f)
     (->
      (app
       cons
       (app string->symbol (app string-append ...))
       (app xargs (app - ...)))
      <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (match
    (app pair? lst)
    (#f)
    (_ (-> (app cons (app f (app car ...)) (app map f (app cdr ...))) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con cons (app cons '$_ (-> (app cons (app car exps) (app nil)) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app cons ...))) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'x (-> (app cons 'z (app nil)) <-))) (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app cons 'z (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app nil)) <-))) (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(store: cdr-c (match cdr-v ((cons cdr-c cdr-d) (-> cdr-d <-))) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(store: cdr-d (match cdr-v ((cons cdr-c cdr-d) (-> cdr-d <-))) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append vars (app nil ...))
      (app cons (app let->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'x (app nil ...))
      (app cons (app cons ...) (app cons ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app cons (app cons name (app nil ...)) (app cons arg (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app dummy-bind ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app letrec1->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app Yn num-args)
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append vars (app nil))
    (-> (app cons (app let->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'lambda (app cons (app cons ...) (app cons ...)))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'let (app cons (app cons ...) (app cons ...)))
    (-> (app cons 10 (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'x (app nil))
    (->
     (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons '$_ (app cons ...)) (app nil))
    (-> (app cons (app dummy-bind (app cdr ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons 'z (app cons ...)) (app nil))
    (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons name (app cons ...)) (app nil))
    (-> (app cons (app letrec1->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    name
    (-> (app cons (app cons (app Yn ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons 'z (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons (app cons name (app nil)) (-> (app cons arg (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app set! mutable-variables (-> (app cons symbol mutable-variables) <-)))
  (env ()))
	'((con
   cons
   (match
    (app <= n 0)
    ((#f)
     (->
      (app
       cons
       (app string->symbol (app string-append ...))
       (app xargs (app - ...)))
      <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? lst)
    (#f)
    (_ (-> (app cons (app f (app car ...)) (app map f (app cdr ...))) <-))))
  (env ()))
	'((con cons (app cons '$_ (-> (app cons (app car exps) (app nil)) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app cons ...))) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'x (-> (app cons 'z (app nil)) <-))) (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app cons 'z (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app nil)) <-))) (env ()))
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store: cdr-v (λ (cdr-v) (-> (match cdr-v ...) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append vars (app nil ...))
      (app cons (app let->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'x (app nil ...))
      (app cons (app cons ...) (app cons ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app cons (app cons name (app nil ...)) (app cons arg (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app dummy-bind ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app letrec1->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app Yn num-args)
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append vars (app nil))
    (-> (app cons (app let->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'lambda (app cons (app cons ...) (app cons ...)))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'let (app cons (app cons ...) (app cons ...)))
    (-> (app cons 10 (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'x (app nil))
    (->
     (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons '$_ (app cons ...)) (app nil))
    (-> (app cons (app dummy-bind (app cdr ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons 'z (app cons ...)) (app nil))
    (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons name (app cons ...)) (app nil))
    (-> (app cons (app letrec1->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    name
    (-> (app cons (app cons (app Yn ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons 'z (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (app cons (app cons name (app nil)) (-> (app cons arg (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app set! mutable-variables (-> (app cons symbol mutable-variables) <-)))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app <= n 0)
    ((#f)
     (->
      (app
       cons
       (app string->symbol (app string-append ...))
       (app xargs (app - ...)))
      <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (match
    (app pair? lst)
    (#f)
    (_ (-> (app cons (app f (app car ...)) (app map f (app cdr ...))) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con cons (app cons '$_ (-> (app cons (app car exps) (app nil)) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app cons ...))) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'x (-> (app cons 'z (app nil)) <-))) (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app cons 'z (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app nil)) <-))) (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(store: chars (λ (chars) (-> (match (app null? chars) ...) <-)) (env ()))
clos/con:
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store: con (app cons 'F (-> (app nil) <-)) (env ()))
clos/con:
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store: con (app cons 'F (-> (app nil) <-)) (env ()))
clos/con:
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store: con (app cons 'F (-> (app nil) <-)) (env ()))
clos/con:
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store: con (app cons 'F (-> (app nil) <-)) (env ()))
clos/con:
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store: con (app cons 'h (-> (app cons 'h (app nil)) <-)) (env ()))
clos/con:
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store: con (app cons 'h (-> (app cons 'h (app nil)) <-)) (env ()))
clos/con:
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store: con (app cons 'h (-> (app nil) <-)) (env ()))
clos/con:
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store: con (app cons 'h (-> (app nil) <-)) (env ()))
clos/con:
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store: con (app cons 'h (-> (app nil) <-)) (env ()))
clos/con:
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store: con (app cons 'h (-> (app nil) <-)) (env ()))
clos/con:
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store: con (app cons 'x (-> (app cons 'z (app nil)) <-)) (env ()))
clos/con:
	'((con cons (app cons 'x (-> (app cons 'z (app nil)) <-))) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store: con (app cons 'x (-> (app nil) <-)) (env ()))
clos/con:
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store: con (app cons 'x (-> (app nil) <-)) (env ()))
clos/con:
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store: con (app cons 'z (-> (app nil) <-)) (env ()))
clos/con:
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store: con (app cons (-> 'F <-) (app nil)) (env ()))
clos/con: ⊥
literals: '(⊥ ⊥ ⊥ F)

'(store: con (app cons (-> 'F <-) (app nil)) (env ()))
clos/con: ⊥
literals: '(⊥ ⊥ ⊥ F)

'(store: con (app cons (-> 'F <-) (app nil)) (env ()))
clos/con: ⊥
literals: '(⊥ ⊥ ⊥ F)

'(store: con (app cons (-> 'F <-) (app nil)) (env ()))
clos/con: ⊥
literals: '(⊥ ⊥ ⊥ F)

'(store: con (app cons (-> 'h <-) (app cons 'h (app nil))) (env ()))
clos/con: ⊥
literals: '(⊥ ⊥ ⊥ h)

'(store: con (app cons (-> 'h <-) (app cons 'h (app nil))) (env ()))
clos/con: ⊥
literals: '(⊥ ⊥ ⊥ h)

'(store: con (app cons (-> 'h <-) (app nil)) (env ()))
clos/con: ⊥
literals: '(⊥ ⊥ ⊥ h)

'(store: con (app cons (-> 'h <-) (app nil)) (env ()))
clos/con: ⊥
literals: '(⊥ ⊥ ⊥ h)

'(store: con (app cons (-> 'h <-) (app nil)) (env ()))
clos/con: ⊥
literals: '(⊥ ⊥ ⊥ h)

'(store: con (app cons (-> 'h <-) (app nil)) (env ()))
clos/con: ⊥
literals: '(⊥ ⊥ ⊥ h)

'(store: con (app cons (-> 'x <-) (app cons 'z (app nil))) (env ()))
clos/con: ⊥
literals: '(⊥ ⊥ ⊥ x)

'(store: con (app cons (-> 'x <-) (app nil)) (env ()))
clos/con: ⊥
literals: '(⊥ ⊥ ⊥ x)

'(store: con (app cons (-> 'x <-) (app nil)) (env ()))
clos/con: ⊥
literals: '(⊥ ⊥ ⊥ x)

'(store: con (app cons (-> 'z <-) (app nil)) (env ()))
clos/con: ⊥
literals: '(⊥ ⊥ ⊥ z)

'(store: con (app cons (-> (app car exps) <-) (app nil)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(store: con (app cons (-> (app let->exp exp) <-) (app nil)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(store: con (app cons (-> (app letrec1->exp exp) <-) (app nil)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(store: con (app cons (-> 10 <-) (app nil)) (env ()))
clos/con: ⊥
literals: '(10 ⊥ ⊥ ⊥)

'(store: con (app cons (-> 3 <-) (app cons 'x (app nil))) (env ()))
clos/con: ⊥
literals: '(3 ⊥ ⊥ ⊥)

'(store: con (app cons (-> arg <-) (app nil)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(store: con (app cons (-> name <-) (app nil)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(store: con (app cons (-> symbol <-) mutable-variables) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(store: con (app cons (app car exps) (-> (app nil) <-)) (env ()))
clos/con:
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store: con (app cons (app let->exp exp) (-> (app nil) <-)) (env ()))
clos/con:
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store: con (app cons (app letrec1->exp exp) (-> (app nil) <-)) (env ()))
clos/con:
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store: con (app cons 10 (-> (app nil) <-)) (env ()))
clos/con:
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store: con (app cons 3 (-> (app cons 'x (app nil)) <-)) (env ()))
clos/con:
	'((con cons (app cons 3 (-> (app cons 'x (app nil)) <-))) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store: con (app cons arg (-> (app nil) <-)) (env ()))
clos/con:
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store: con (app cons name (-> (app nil) <-)) (env ()))
clos/con:
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store: con (app cons symbol (-> mutable-variables <-)) (env ()))
clos/con:
	'((con
   cons
   (app set! mutable-variables (-> (app cons symbol mutable-variables) <-)))
  (env ()))
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store: con (app error "unhandled primitive " (-> p <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(store: con (app error "unknown constant: " (-> exp <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(store: con (app error "unknown expression type: " (-> exp <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(store: con (app error (-> "no-match" <-)) (env ()))
clos/con: ⊥
literals: '(⊥ ⊥ "no-match" ⊥)

'(store: con (app error (-> "no-match" <-)) (env ()))
clos/con: ⊥
literals: '(⊥ ⊥ "no-match" ⊥)

'(store: con (app error (-> "unhandled primitive " <-) p) (env ()))
clos/con: ⊥
literals: '(⊥ ⊥ "unhandled primitive " ⊥)

'(store: con (app error (-> "unknown constant: " <-) exp) (env ()))
clos/con: ⊥
literals: '(⊥ ⊥ "unknown constant: " ⊥)

'(store: con (app error (-> "unknown expression type: " <-) exp) (env ()))
clos/con: ⊥
literals: '(⊥ ⊥ "unknown expression type: " ⊥)

'(store: exp (λ (exp) (-> (app caadr exp) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(store: exp (λ (exp) (-> (app cadddr exp) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(store: exp (λ (exp) (-> (app caddr exp) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(store: exp (λ (exp) (-> (app caddr exp) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(store: exp (λ (exp) (-> (app caddr exp) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(store: exp (λ (exp) (-> (app caddr exp) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(store: exp (λ (exp) (-> (app caddr exp) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(store: exp (λ (exp) (-> (app cadr exp) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(store: exp (λ (exp) (-> (app cadr exp) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(store: exp (λ (exp) (-> (app cadr exp) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(store: exp (λ (exp) (-> (app cadr exp) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(store: exp (λ (exp) (-> (app car exp) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(store: exp (λ (exp) (-> (app cdr exp) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(store: exp (λ (exp) (-> (app cdr exp) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(store: exp (λ (exp) (-> (app integer? exp) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(store: exp (λ (exp) (-> (app pair? exp) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(store: exp (λ (exp) (-> (app symbol? exp) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(store: exp (λ (exp) (-> (app tagged-list? 'begin exp) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(store: exp (λ (exp) (-> (app tagged-list? 'if exp) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(store: exp (λ (exp) (-> (app tagged-list? 'lambda exp) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(store: exp (λ (exp) (-> (app tagged-list? 'let exp) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(store: exp (λ (exp) (-> (app tagged-list? 'set! exp) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(store: exp (λ (exp) (-> (let* (args ... num-args) ...) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(store: exp (λ (exp) (-> (letrec* (java-wrap-mutables) ...) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(store: exp (λ (exp) (-> (match (app const? exp) ...) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(store: exp (λ (exp) (-> (match (app const? exp) ...) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(store: exp (λ (exp) (-> (match (app eq? exp '+) ...) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(store: exp (λ (exp) (-> (match (app integer? exp) ...) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(store: exp (λ (exp) (-> (match (app is-mutable? exp) ...) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(store: exp (λ (exp) (-> (match (app let? exp) ...) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(store: exp (λ (exp) (-> (match (app letrec1? exp) ...) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(store: exps (λ (exps) (-> (match (app singlet? exps) ...) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append vars (app nil ...))
      (app cons (app let->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'x (app nil ...))
      (app cons (app cons ...) (app cons ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app cons (app cons name (app nil ...)) (app cons arg (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app dummy-bind ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app letrec1->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app Yn num-args)
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append vars (app nil))
    (-> (app cons (app let->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'lambda (app cons (app cons ...) (app cons ...)))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'let (app cons (app cons ...) (app cons ...)))
    (-> (app cons 10 (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'x (app nil))
    (->
     (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons '$_ (app cons ...)) (app nil))
    (-> (app cons (app dummy-bind (app cdr ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons 'z (app cons ...)) (app nil))
    (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons name (app cons ...)) (app nil))
    (-> (app cons (app letrec1->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    name
    (-> (app cons (app cons (app Yn ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons 'z (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons (app cons name (app nil)) (-> (app cons arg (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app set! mutable-variables (-> (app cons symbol mutable-variables) <-)))
  (env ()))
	'((con
   cons
   (match
    (app <= n 0)
    ((#f)
     (->
      (app
       cons
       (app string->symbol (app string-append ...))
       (app xargs (app - ...)))
      <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? lst)
    (#f)
    (_ (-> (app cons (app f (app car ...)) (app map f (app cdr ...))) <-))))
  (env ()))
	'((con cons (app cons '$_ (-> (app cons (app car exps) (app nil)) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app cons ...))) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'x (-> (app cons 'z (app nil)) <-))) (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app cons 'z (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app nil)) <-))) (env ()))
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store: f (letrec* (... () (f (-> (λ (i) ...) <-)) () ...) ...) (env ()))
clos/con:
	'((letrec* (... () (f (-> (λ (i) ...) <-)) () ...) ...) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store: f (λ (f lst) (-> (match (app pair? lst) ...) <-)) (env ()))
clos/con:
	'((letrec*
   (...
    is-mutable?
    (analyze-mutable-variables (-> (λ (exp) ...) <-))
    mangle
    ...)
   ...)
  (env ()))
	'((letrec* (... () (car (-> (λ (car-v) ...) <-)) cdr ...) ...) (env ()))
	'((letrec* (... null? (cadr (-> (λ (p) ...) <-)) caadr ...) ...) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store: l (λ (l) (-> (match (app list? l) ...) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append vars (app nil ...))
      (app cons (app let->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'x (app nil ...))
      (app cons (app cons ...) (app cons ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app cons (app cons name (app nil ...)) (app cons arg (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app dummy-bind ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app letrec1->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app Yn num-args)
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append vars (app nil))
    (-> (app cons (app let->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'lambda (app cons (app cons ...) (app cons ...)))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'let (app cons (app cons ...) (app cons ...)))
    (-> (app cons 10 (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'x (app nil))
    (->
     (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons '$_ (app cons ...)) (app nil))
    (-> (app cons (app dummy-bind (app cdr ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons 'z (app cons ...)) (app nil))
    (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons name (app cons ...)) (app nil))
    (-> (app cons (app letrec1->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    name
    (-> (app cons (app cons (app Yn ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons 'z (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons (app cons name (app nil)) (-> (app cons arg (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app set! mutable-variables (-> (app cons symbol mutable-variables) <-)))
  (env ()))
	'((con
   cons
   (match
    (app <= n 0)
    ((#f)
     (->
      (app
       cons
       (app string->symbol (app string-append ...))
       (app xargs (app - ...)))
      <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? lst)
    (#f)
    (_ (-> (app cons (app f (app car ...)) (app map f (app cdr ...))) <-))))
  (env ()))
	'((con cons (app cons '$_ (-> (app cons (app car exps) (app nil)) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app cons ...))) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'x (-> (app cons 'z (app nil)) <-))) (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app cons 'z (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app nil)) <-))) (env ()))
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store: l (λ (tag l) (-> (match (app pair? l) ...) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(store: lam (λ (lam) (-> (app length (app lambda->formals lam)) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(store: length-l (λ (length-l) (-> (match length-l ...) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append vars (app nil ...))
      (app cons (app let->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'x (app nil ...))
      (app cons (app cons ...) (app cons ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app cons (app cons name (app nil ...)) (app cons arg (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app dummy-bind ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app letrec1->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app Yn num-args)
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append vars (app nil))
    (-> (app cons (app let->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'lambda (app cons (app cons ...) (app cons ...)))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'let (app cons (app cons ...) (app cons ...)))
    (-> (app cons 10 (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'x (app nil))
    (->
     (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons '$_ (app cons ...)) (app nil))
    (-> (app cons (app dummy-bind (app cdr ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons 'z (app cons ...)) (app nil))
    (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons name (app cons ...)) (app nil))
    (-> (app cons (app letrec1->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    name
    (-> (app cons (app cons (app Yn ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons 'z (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (app cons (app cons name (app nil)) (-> (app cons arg (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app set! mutable-variables (-> (app cons symbol mutable-variables) <-)))
  (env ()))
	'((con
   cons
   (match
    (app <= n 0)
    ((#f)
     (->
      (app
       cons
       (app string->symbol (app string-append ...))
       (app xargs (app - ...)))
      <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (match
    (app pair? lst)
    (#f)
    (_ (-> (app cons (app f (app car ...)) (app map f (app cdr ...))) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con cons (app cons '$_ (-> (app cons (app car exps) (app nil)) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app cons ...))) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'x (-> (app cons 'z (app nil)) <-))) (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app cons 'z (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app nil)) <-))) (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(store: lst (λ (f lst) (-> (match (app pair? lst) ...) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append vars (app nil ...))
      (app cons (app let->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'x (app nil ...))
      (app cons (app cons ...) (app cons ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app cons (app cons name (app nil ...)) (app cons arg (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app dummy-bind ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app letrec1->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app Yn num-args)
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append vars (app nil))
    (-> (app cons (app let->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'lambda (app cons (app cons ...) (app cons ...)))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'let (app cons (app cons ...) (app cons ...)))
    (-> (app cons 10 (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'x (app nil))
    (->
     (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons '$_ (app cons ...)) (app nil))
    (-> (app cons (app dummy-bind (app cdr ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons 'z (app cons ...)) (app nil))
    (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons name (app cons ...)) (app nil))
    (-> (app cons (app letrec1->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    name
    (-> (app cons (app cons (app Yn ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons 'z (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (app cons (app cons name (app nil)) (-> (app cons arg (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app set! mutable-variables (-> (app cons symbol mutable-variables) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app <= n 0)
    ((#f)
     (->
      (app
       cons
       (app string->symbol (app string-append ...))
       (app xargs (app - ...)))
      <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (match
    (app pair? lst)
    (#f)
    (_ (-> (app cons (app f (app car ...)) (app map f (app cdr ...))) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con cons (app cons '$_ (-> (app cons (app car exps) (app nil)) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app cons ...))) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'x (-> (app cons 'z (app nil)) <-))) (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app cons 'z (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app nil)) <-))) (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(store: m (letrec* (... () (m (-> (λ (chars) ...) <-)) () ...) ...) (env ()))
clos/con:
	'((letrec* (... () (m (-> (λ (chars) ...) <-)) () ...) ...) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store: n (λ (n) (-> (match (app <= n 0) ...) <-)) (env ()))
clos/con: ⊥
literals: '(⊤ ⊥ ⊥ ⊥)

'(store: null?-v (λ (null?-v) (-> (match null?-v ...) <-)) (env ()))
clos/con:
	'((con nil) (env ()))
literals: '(⊥ ⊥ ⊥ ⊥)

'(store: p (λ (p) (-> (app car (app car (app cdr ...))) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(store: p (λ (p) (-> (app car (app cdr (app cdr ...))) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(store: p (λ (p) (-> (app car (app cdr (app cdr ...))) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(store: p (λ (p) (-> (app car (app cdr p)) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(store: p (λ (p) (-> (match (app eq? '+ p) ...) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(store: pair?-v (λ (pair?-v) (-> (match pair?-v ...) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'F
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append (app xargs ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app append vars (app nil ...))
      (app cons (app let->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'F (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'h (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app
      cons
      (app cons 'x (app nil ...))
      (app cons (app cons ...) (app cons ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'lambda
    (->
     (app cons (app cons name (app nil ...)) (app cons arg (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app cons ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app dummy-bind ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    'let
    (->
     (app
      cons
      (app cons (app cons ...) (app nil ...))
      (app cons (app letrec1->exp ...) (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app Yn num-args)
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append (app xargs n) (app nil))
    (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app append vars (app nil))
    (-> (app cons (app let->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'F (app nil))
    (-> (app cons (app cons 'F (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app cons 'h (app nil ...)))
    (-> (app cons 'F (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'h (app nil))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'lambda (app cons (app cons ...) (app cons ...)))
    (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'let (app cons (app cons ...) (app cons ...)))
    (-> (app cons 10 (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons 'x (app nil))
    (->
     (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))
     <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons '$_ (app cons ...)) (app nil))
    (-> (app cons (app dummy-bind (app cdr ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons 'z (app cons ...)) (app nil))
    (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    (app cons (app cons name (app cons ...)) (app nil))
    (-> (app cons (app letrec1->exp exp) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app
    cons
    name
    (-> (app cons (app cons (app Yn ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons 'z (-> (app cons (app cons '+ (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (app cons (app cons name (app nil)) (-> (app cons arg (app nil)) <-)))
  (env ()))
	'((con
   cons
   (app set! mutable-variables (-> (app cons symbol mutable-variables) <-)))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app <= n 0)
    ((#f)
     (->
      (app
       cons
       (app string->symbol (app string-append ...))
       (app xargs (app - ...)))
      <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (match
    (app pair? lst)
    (#f)
    (_ (-> (app cons (app f (app car ...)) (app map f (app cdr ...))) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con cons (app cons '$_ (-> (app cons (app car exps) (app nil)) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app cons ...))) <-)))
  (env ()))
	'((con cons (app cons '+ (-> (app cons 3 (app cons 'x (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'h (-> (app cons 'h (app nil)) <-))) (env ()))
	'((con cons (app cons 'x (-> (app cons 'z (app nil)) <-))) (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app cons 'z (app nil ...))) <-)))
  (env ()))
	'((con cons (app cons 3 (-> (app cons 'x (app nil)) <-))) (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(store: s (λ (s) (-> (letrec* (f) ...) <-)) (env ()))
clos/con: ⊥
literals: '(⊥ ⊥ ⊤ ⊥)

'(store: symbol (λ (symbol) (-> (letrec* (is-in?) ...) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(store: symbol (λ (symbol) (-> (letrec* (m) ...) <-)) (env ()))
clos/con:
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app append args (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons 'lambda (app cons ...))
      (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app
      cons
      (app cons (app cons ...) (app cons ...))
      (app append (app xargs ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (->
     (app cons (app Yn num-args) (app cons (app cons ...) (app nil ...)))
     <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons '$_ (app cons (app car ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'F (app nil)) <-)
    (app cons (app cons 'F (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app cons 'h (app nil ...))) <-)
    (app cons 'F (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'h (app nil)) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app append args (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app append ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app cons (app cons 'lambda (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'lambda (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app cons 10 (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'let (app cons (app cons ...) (app cons ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'x (app nil)) <-)
    (app cons (app cons 'let (app cons ...)) (app cons 10 (app nil ...)))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons 'z (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons '$_ (app cons ...)) (app nil)) <-)
    (app cons (app dummy-bind (app cdr ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'h (app cons ...)) (app cons 'F (app nil ...))) <-)
    (app append (app xargs n) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons 'z (app cons ...)) (app nil)) <-)
    (app cons (app cons '+ (app cons ...)) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons (app cons name (app cons ...)) (app nil)) <-)
    (app cons (app letrec1->exp exp) (app nil))))
  (env ()))
	'((con
   cons
   (app
    cons
    (-> (app cons name (app cons (app cons ...) (app nil ...))) <-)
    (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons '+ (app cons 3 (app cons ...))) <-) (app nil)))
  (env ()))
	'((con
   cons
   (app cons (-> (app cons name (app nil)) <-) (app cons arg (app nil))))
  (env ()))
	'((con
   cons
   (let (vars ... args)
     (-> (app cons (app cons (app cons ...) (app append ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (let* (binding ... num-args)
     (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   cons
   (letrec*
    (...
     java-compile-if
     (input-program
      (-> (app cons (app cons 'lambda (app cons ...)) (app nil)) <-))
     ()
     ...)
    ...))
  (env ()))
	'((con
   cons
   (match
    (app not (app pair? lst1))
    ((#f) (-> (app cons (app car lst1) (app append (app cdr ...) lst2)) <-))
    _))
  (env ()))
	'((con
   cons
   (match
    (app pair? exps)
    (#f)
    (_ (-> (app cons (app cons 'let (app cons ...)) (app nil)) <-))))
  (env ()))
	'((con
   cons
   (λ (n)
     (-> (app cons (app cons (app cons ...) (app cons ...)) (app nil)) <-)))
  (env ()))
	'((con
   error
   (match
    (app app? exp)
    ((#f) (-> (app error "unknown expression type: " exp) <-))
    _))
  (env ()))
	'((con error (match (app pair? exps) ((#f) (-> (app error "no-match") <-)) _))
  (env ()))
	'((con nil) (env ()))
	'((con void) (env ()))
literals: '(⊤ ⊥ ⊥ ⊤)

'(store: tag (λ (tag l) (-> (match (app pair? l) ...) <-)) (env ()))
clos/con: ⊥
literals: '(⊥ ⊥ ⊥ ⊤)
