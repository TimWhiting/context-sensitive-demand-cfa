'(clean-cache mj09 0 20 33 let "'(eval ((top) let (h) ...) (env ()))" #f #f)
'(clean-cache
  mj09
  0
  20
  33
  lambda
  "'(eval (let (... () (h (-> (λ (b) ...) <-)) () ...) ...) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  mj09
  0
  20
  33
  let
  "'(eval (λ (b) (-> (let (g) ...) <-)) (env (())))"
  #f
  #f)
'(clean-cache
  mj09
  0
  20
  33
  lambda
  "'(eval (let (... () (g (-> (λ (z) ...) <-)) () ...) ...) (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  mj09
  0
  20
  33
  ref-or-constructor
  "'(eval (λ (z) (-> z <-)) (env (() ())))"
  #f
  #f)
'(clean-cache
  mj09
  0
  20
  33
  let
  "'(eval (let (g) (-> (let (f) ...) <-)) (env (())))"
  #f
  #f)
'(clean-cache
  mj09
  0
  20
  33
  lambda
  "'(eval (let (... () (f (-> (λ (k) ...) <-)) () ...) ...) (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  mj09
  0
  20
  33
  match
  "'(eval (λ (k) (-> (match b ...) <-)) (env (() ())))"
  #f
  #f)
'(clean-cache
  mj09
  0
  20
  33
  app
  "'(eval (match b (#f) (_ (-> (app k 1) <-))) (env (() ())))"
  #f
  15
  8
  5
  2
  8
  5
  13
  1
  1
  6
  #f
  5/4
  (0 0 0))
'(clean-cache
  mj09
  0
  20
  33
  number
  "'(eval (app k (-> 1 <-)) (env (() ())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  mj09
  0
  20
  33
  ref-or-constructor
  "'(eval (app (-> k <-) 1) (env (() ())))"
  #f
  4
  2
  2
  0
  2
  2
  4
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  mj09
  0
  20
  33
  app
  "'(eval (match b ((#f) (-> (app k 2) <-)) _) (env (() ())))"
  #f
  15
  8
  5
  2
  8
  5
  13
  1
  1
  6
  #f
  5/4
  (0 0 0))
'(clean-cache
  mj09
  0
  20
  33
  number
  "'(eval (app k (-> 2 <-)) (env (() ())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  mj09
  0
  20
  33
  ref-or-constructor
  "'(eval (app (-> k <-) 2) (env (() ())))"
  #f
  4
  2
  2
  0
  2
  2
  4
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  mj09
  0
  20
  33
  ref-or-constructor
  "'(eval (match (-> b <-) (#f) _) (env (() ())))"
  #f
  8
  5
  3
  0
  5
  3
  8
  1
  1
  4
  #f
  6/5
  (0 0 0))
'(clean-cache
  mj09
  0
  20
  33
  let
  "'(eval (let (f) (-> (let (y) ...) <-)) (env (())))"
  #f
  #f)
'(clean-cache
  mj09
  0
  20
  33
  app
  "'(eval (let (... () (y (-> (app f (λ (x) ...)) <-)) () ...) ...) (env (())))"
  #f
  #f)
'(clean-cache
  mj09
  0
  20
  33
  lambda
  "'(eval (app f (-> (λ (x) ...) <-)) (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  mj09
  0
  20
  33
  ref-or-constructor
  "'(eval (λ (x) (-> x <-)) (env (() ())))"
  #f
  9
  5
  3
  1
  5
  3
  8
  1
  1
  4
  #f
  6/5
  (0 0 0))
'(clean-cache
  mj09
  0
  20
  33
  ref-or-constructor
  "'(eval (app (-> f <-) (λ (x) ...)) (env (())))"
  #t
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  mj09
  0
  20
  33
  app
  "'(eval (let (y) (-> (app g y) <-)) (env (())))"
  #f
  #f)
'(clean-cache
  mj09
  0
  20
  33
  ref-or-constructor
  "'(eval (app g (-> y <-)) (env (())))"
  #f
  #f)
'(clean-cache
  mj09
  0
  20
  33
  ref-or-constructor
  "'(eval (app (-> g <-) y) (env (())))"
  #t
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  mj09
  0
  20
  33
  let
  "'(eval (let (h) (-> (let (x ... y) ...) <-)) (env ()))"
  #f
  #f)
'(clean-cache
  mj09
  0
  20
  33
  app
  "'(eval (let (... x (y (-> (app h (app #f)) <-)) () ...) ...) (env ()))"
  #f
  #f)
'(clean-cache
  mj09
  0
  20
  33
  app
  "'(eval (app h (-> (app #f) <-)) (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  mj09
  0
  20
  33
  constructor
  "'(eval (app (-> #f <-)) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  mj09
  0
  20
  33
  ref-or-constructor
  "'(eval (app (-> h <-) (app #f)) (env ()))"
  #t
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  mj09
  0
  20
  33
  app
  "'(eval (let (... () (x (-> (app h (app #t)) <-)) y ...) ...) (env ()))"
  #f
  #f)
'(clean-cache
  mj09
  0
  20
  33
  app
  "'(eval (app h (-> (app #t) <-)) (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  mj09
  0
  20
  33
  constructor
  "'(eval (app (-> #t <-)) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  mj09
  0
  20
  33
  ref-or-constructor
  "'(eval (app (-> h <-) (app #t)) (env ()))"
  #t
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  mj09
  0
  20
  33
  ref-or-constructor
  "'(eval (let (x ... y) (-> y <-)) (env ()))"
  #f
  #f)
