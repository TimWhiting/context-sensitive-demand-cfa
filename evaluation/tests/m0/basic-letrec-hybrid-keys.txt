'(expression:
  (letrec ((a
            (λ (y) (match (app equal? y 0) (#t (app a (app - y 1))) (#f y)))))
    (app a 2)))

(list 'query: '(top) (envenv '()))

(list
 (list 'eval '(app - (-> y <-) 1) (envenv '(())))
 (list 'eval '(app a (-> 2 <-)) (envenv '()))
 (list 'eval '(app a (-> (app - y 1) <-)) (envenv '(())))
 (list 'eval '(app equal? y (-> 0 <-)) (envenv '(!)))
 (list 'eval '(app equal? (-> y <-) 0) (envenv '(!)))
 (list 'eval '(app (-> - <-) y 1) (envenv '(())))
 (list 'eval '(app (-> a <-) (app - y 1)) (envenv '(!)))
 (list 'eval '(app (-> a <-) 2) (envenv '()))
 (list 'eval '(app (-> equal? <-) y 0) (envenv '(!)))
 (list 'eval '(letrec (a) (-> (app a 2) <-)) (envenv '()))
 (list
  'eval
  '(letrec ((->
             a
             =
             (λ (y) (match (app equal? y 0) (#t (app a (app - y 1))) (#f y)))
             <-))
     bod)
  (envenv '()))
 (list
  'eval
  '(match (-> (app equal? y 0) <-) (#t (app a (app - y 1))) (#f y))
  (envenv '(!)))
 (list
  'eval
  '(match (app equal? y 0) (#t (app a (app - y 1))) (-> #f y <-))
  (envenv '(!)))
 (list
  'eval
  '(match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
  (envenv '(!)))
 (list 'eval '(top) (envenv '()))
 (list
  'eval
  '(λ (y) (-> (match (app equal? y 0) (#t (app a (app - y 1))) (#f y)) <-))
  (envenv '(!)))
 (list 'expr '(app (-> a <-) 2) (envenv '()))
 (list 'expr '(app (-> a <-) (app - y 1)) (envenv '(())))
 (list
  'expr
  '(letrec ((->
             a
             =
             (λ (y) (match (app equal? y 0) (#t (app a (app - y 1))) (#f y)))
             <-))
     bod)
  (envenv '())))
19


(list
 'query:
 '(λ (y) (-> (match (app equal? y 0) (#t (app a (app - y 1))) (#f y)) <-))
 (envenv '(())))

(list
 (list 'eval '(app equal? (-> y <-) 0) (envenv '(())))
 (list 'eval '(app (-> equal? <-) y 0) (envenv '(())))
 (list
  'eval
  '(match (-> (app equal? y 0) <-) (#t (app a (app - y 1))) (#f y))
  (envenv '(())))
 (list
  'eval
  '(λ (y) (-> (match (app equal? y 0) (#t (app a (app - y 1))) (#f y)) <-))
  (envenv '(())))
 (list 'expr '(app (-> a <-) 2) (envenv '()))
 (list 'expr '(app (-> a <-) (app - y 1)) (envenv '(())))
 (list
  'expr
  '(letrec ((->
             a
             =
             (λ (y) (match (app equal? y 0) (#t (app a (app - y 1))) (#f y)))
             <-))
     bod)
  (envenv '())))
7


(list
 'query:
 '(match (app equal? y 0) (#t (app a (app - y 1))) (-> #f y <-))
 (envenv '(())))

(list
 (list
  'eval
  '(match (app equal? y 0) (#t (app a (app - y 1))) (-> #f y <-))
  (envenv '(())))
 (list 'expr '(app (-> a <-) 2) (envenv '()))
 (list 'expr '(app (-> a <-) (app - y 1)) (envenv '(())))
 (list
  'expr
  '(letrec ((->
             a
             =
             (λ (y) (match (app equal? y 0) (#t (app a (app - y 1))) (#f y)))
             <-))
     bod)
  (envenv '())))
4


(list
 'query:
 '(match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
 (envenv '(())))

(list
 (list 'eval '(app - (-> y <-) 1) (envenv '(())))
 (list 'eval '(app a (-> 2 <-)) (envenv '()))
 (list 'eval '(app a (-> (app - y 1) <-)) (envenv '(())))
 (list 'eval '(app equal? y (-> 0 <-)) (envenv '(!)))
 (list 'eval '(app equal? (-> y <-) 0) (envenv '(!)))
 (list 'eval '(app (-> - <-) y 1) (envenv '(())))
 (list 'eval '(app (-> a <-) (app - y 1)) (envenv '(!)))
 (list 'eval '(app (-> a <-) (app - y 1)) (envenv '(())))
 (list 'eval '(app (-> equal? <-) y 0) (envenv '(!)))
 (list
  'eval
  '(letrec ((->
             a
             =
             (λ (y) (match (app equal? y 0) (#t (app a (app - y 1))) (#f y)))
             <-))
     bod)
  (envenv '()))
 (list
  'eval
  '(match (-> (app equal? y 0) <-) (#t (app a (app - y 1))) (#f y))
  (envenv '(!)))
 (list
  'eval
  '(match (app equal? y 0) (#t (app a (app - y 1))) (-> #f y <-))
  (envenv '(!)))
 (list
  'eval
  '(match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
  (envenv '(!)))
 (list
  'eval
  '(match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
  (envenv '(())))
 (list
  'eval
  '(λ (y) (-> (match (app equal? y 0) (#t (app a (app - y 1))) (#f y)) <-))
  (envenv '(!)))
 (list 'expr '(app (-> a <-) (app - y 1)) (envenv '(())))
 (list 'expr '(app (-> a <-) 2) (envenv '()))
 (list
  'expr
  '(letrec ((->
             a
             =
             (λ (y) (match (app equal? y 0) (#t (app a (app - y 1))) (#f y)))
             <-))
     bod)
  (envenv '())))
18


(list 'query: '(app a (-> (app - y 1) <-)) (envenv '(())))

(list
 (list 'eval '(app - (-> y <-) 1) (envenv '(())))
 (list 'eval '(app a (-> (app - y 1) <-)) (envenv '(())))
 (list 'eval '(app (-> - <-) y 1) (envenv '(())))
 (list 'expr '(app (-> a <-) 2) (envenv '()))
 (list 'expr '(app (-> a <-) (app - y 1)) (envenv '(())))
 (list
  'expr
  '(letrec ((->
             a
             =
             (λ (y) (match (app equal? y 0) (#t (app a (app - y 1))) (#f y)))
             <-))
     bod)
  (envenv '())))
6


(list 'query: '(app - (-> y <-) 1) (envenv '(())))

(list
 (list 'eval '(app - (-> y <-) 1) (envenv '(())))
 (list 'expr '(app (-> a <-) 2) (envenv '()))
 (list 'expr '(app (-> a <-) (app - y 1)) (envenv '(())))
 (list
  'expr
  '(letrec ((->
             a
             =
             (λ (y) (match (app equal? y 0) (#t (app a (app - y 1))) (#f y)))
             <-))
     bod)
  (envenv '())))
4


(list
 'query:
 '(match (-> (app equal? y 0) <-) (#t (app a (app - y 1))) (#f y))
 (envenv '(())))

(list
 (list 'eval '(app equal? (-> y <-) 0) (envenv '(())))
 (list 'eval '(app (-> equal? <-) y 0) (envenv '(())))
 (list
  'eval
  '(match (-> (app equal? y 0) <-) (#t (app a (app - y 1))) (#f y))
  (envenv '(())))
 (list 'expr '(app (-> a <-) 2) (envenv '()))
 (list 'expr '(app (-> a <-) (app - y 1)) (envenv '(())))
 (list
  'expr
  '(letrec ((->
             a
             =
             (λ (y) (match (app equal? y 0) (#t (app a (app - y 1))) (#f y)))
             <-))
     bod)
  (envenv '())))
6


(list 'query: '(app equal? (-> y <-) 0) (envenv '(())))

(list
 (list 'eval '(app equal? (-> y <-) 0) (envenv '(())))
 (list 'expr '(app (-> a <-) 2) (envenv '()))
 (list 'expr '(app (-> a <-) (app - y 1)) (envenv '(())))
 (list
  'expr
  '(letrec ((->
             a
             =
             (λ (y) (match (app equal? y 0) (#t (app a (app - y 1))) (#f y)))
             <-))
     bod)
  (envenv '())))
4


(list 'query: '(letrec (a) (-> (app a 2) <-)) (envenv '()))

(list
 (list 'eval '(app - (-> y <-) 1) (envenv '(())))
 (list 'eval '(app a (-> 2 <-)) (envenv '()))
 (list 'eval '(app a (-> (app - y 1) <-)) (envenv '(())))
 (list 'eval '(app equal? y (-> 0 <-)) (envenv '(!)))
 (list 'eval '(app equal? (-> y <-) 0) (envenv '(!)))
 (list 'eval '(app (-> - <-) y 1) (envenv '(())))
 (list 'eval '(app (-> a <-) (app - y 1)) (envenv '(!)))
 (list 'eval '(app (-> a <-) 2) (envenv '()))
 (list 'eval '(app (-> equal? <-) y 0) (envenv '(!)))
 (list 'eval '(letrec (a) (-> (app a 2) <-)) (envenv '()))
 (list
  'eval
  '(letrec ((->
             a
             =
             (λ (y) (match (app equal? y 0) (#t (app a (app - y 1))) (#f y)))
             <-))
     bod)
  (envenv '()))
 (list
  'eval
  '(match (-> (app equal? y 0) <-) (#t (app a (app - y 1))) (#f y))
  (envenv '(!)))
 (list
  'eval
  '(match (app equal? y 0) (#t (app a (app - y 1))) (-> #f y <-))
  (envenv '(!)))
 (list
  'eval
  '(match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
  (envenv '(!)))
 (list
  'eval
  '(λ (y) (-> (match (app equal? y 0) (#t (app a (app - y 1))) (#f y)) <-))
  (envenv '(!)))
 (list 'expr '(app (-> a <-) 2) (envenv '()))
 (list 'expr '(app (-> a <-) (app - y 1)) (envenv '(())))
 (list
  'expr
  '(letrec ((->
             a
             =
             (λ (y) (match (app equal? y 0) (#t (app a (app - y 1))) (#f y)))
             <-))
     bod)
  (envenv '())))
18

