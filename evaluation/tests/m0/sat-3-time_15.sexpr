'(clean-cache
  sat-3
  0
  15
  59
  letrec*
  "\"'(eval ((top) letrec* (println ... sat-solve-7) ...) (env ()))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  15
  59
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env (())))\""
  112
  82
  19
  11
  82
  19
  101
  1
  1
  39
  #f
  463/82
  ((5 5 0) (5 5 0) (5 5 0)))
'(clean-cache
  sat-3
  0
  15
  59
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env (() ())))\""
  111
  81
  19
  11
  81
  19
  100
  1
  1
  39
  #f
  457/81
  ((5 5 0) (5 5 0) (5 5 0)))
'(clean-cache
  sat-3
  0
  15
  59
  app
  "\"'(eval (λ (n2) (-> (app try (λ (n3) ...)) <-)) (env (() () ())))\""
  111
  81
  19
  11
  81
  19
  100
  1
  1
  39
  #f
  457/81
  ((5 5 0) (5 5 0) (5 5 0)))
'(clean-cache
  sat-3
  0
  15
  59
  app
  "\"'(eval (λ (n3) (-> (app try (λ (n4) ...)) <-)) (env (() () () ())))\""
  111
  81
  19
  11
  81
  19
  100
  1
  1
  39
  #f
  457/81
  ((5 5 0) (5 5 0) (5 5 0)))
'(clean-cache
  sat-3
  0
  15
  59
  app
  "\"'(eval (λ (n4) (-> (app try (λ (n5) ...)) <-)) (env (() () () () ())))\""
  111
  81
  19
  11
  81
  19
  100
  1
  1
  39
  #f
  457/81
  ((5 5 0) (5 5 0) (5 5 0)))
'(clean-cache
  sat-3
  0
  15
  59
  app
  "\"'(eval (λ (n5) (-> (app try (λ (n6) ...)) <-)) (env (() () () () () ())))\""
  111
  81
  19
  11
  81
  19
  100
  1
  1
  39
  #f
  457/81
  ((5 5 0) (5 5 0) (5 5 0)))
'(clean-cache
  sat-3
  0
  15
  59
  app
  "\"'(eval (λ (n6) (-> (app try (λ (n7) ...)) <-)) (env (() () () () () () ())))\""
  111
  81
  19
  11
  81
  19
  100
  1
  1
  39
  #f
  457/81
  ((5 5 0) (5 5 0) (5 5 0)))
'(clean-cache
  sat-3
  0
  15
  59
  app
  "\"'(eval\n  (λ (n7) (-> (app p n1 n2 n3 n4 n5 n6 n7) <-))\n  (env (() () () () () () () ())))\""
  72
  58
  11
  3
  58
  11
  69
  1
  1
  28
  #f
  160/29
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 n4 n5 n6 (-> n7 <-)) (env (() () () () () () () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  6
  #f
  36/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 n4 n5 (-> n6 <-) n7) (env (() () () () () () () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  6
  #f
  36/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 n4 (-> n5 <-) n6 n7) (env (() () () () () () () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  6
  #f
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 (-> n4 <-) n5 n6 n7) (env (() () () () () () () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  6
  #f
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app p n1 n2 (-> n3 <-) n4 n5 n6 n7) (env (() () () () () () () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  6
  #f
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app p n1 (-> n2 <-) n3 n4 n5 n6 n7) (env (() () () () () () () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  6
  #f
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app p (-> n1 <-) n2 n3 n4 n5 n6 n7) (env (() () () () () () () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  6
  #f
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app (-> p <-) n1 n2 n3 n4 n5 n6 n7) (env (() () () () () () () ())))\""
  5
  3
  2
  0
  3
  2
  5
  1
  1
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  15
  59
  let
  "\"'(eval (λ (f) (-> (let (_) ...) <-)) (env (())))\""
  111
  81
  19
  11
  81
  19
  100
  1
  1
  39
  #f
  457/81
  ((5 5 0) (5 5 0) (5 5 0)))
'(clean-cache
  sat-3
  0
  15
  59
  app
  "\"'(eval (let (... () (_ (-> (app println \"trying\") <-)) () ...) ...) (env (())))\""
  7
  6
  0
  1
  6
  0
  6
  1
  1
  6
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  15
  59
  app
  "\"'(eval (let (_) (-> (app or (app f (app #t)) (app f (app #f))) <-)) (env (())))\""
  111
  81
  19
  11
  81
  19
  100
  1
  1
  39
  #f
  457/81
  ((5 5 0) (5 5 0) (5 5 0)))
'(clean-cache
  sat-3
  0
  15
  59
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env (())))\""
  111
  81
  19
  11
  81
  19
  100
  1
  1
  39
  #f
  457/81
  ((5 5 0) (5 5 0) (5 5 0)))
'(clean-cache
  sat-3
  0
  15
  59
  app
  "\"'(eval (app f (-> (app #f) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env (())))\""
  16
  8
  8
  0
  8
  8
  16
  1
  1
  7
  #f
  23/4
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  15
  59
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env (())))\""
  111
  81
  19
  11
  81
  19
  100
  1
  1
  39
  #f
  457/81
  ((5 5 0) (5 5 0) (5 5 0)))
'(clean-cache
  sat-3
  0
  15
  59
  app
  "\"'(eval (app f (-> (app #t) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env (())))\""
  16
  8
  8
  0
  8
  8
  16
  1
  1
  7
  #f
  23/4
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  15
  59
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4 x5 x6 x7)\n    (->\n     (app\n      and\n      (app or x1 x2)\n      (app or x1 (app not x2) (app not x3))\n      (app or x3 x4)\n      (app or (app not x4) x1)\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env (())))\""
  65
  54
  9
  2
  54
  9
  63
  1
  1
  25
  #f
  299/54
  ((3 3 0) (5/2 5/2 0) (3 3 0)))
'(clean-cache
  sat-3
  0
  15
  59
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env (())))\""
  26
  17
  7
  2
  17
  7
  24
  1
  1
  12
  #f
  90/17
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  8
  #f
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  8
  #f
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  15
  59
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env (())))\""
  30
  21
  7
  2
  21
  7
  28
  1
  1
  14
  #f
  16/3
  ((1 1 0) (1 1 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  15
  59
  app
  "\"'(eval (app or (app not x2) (-> (app not x3) <-)) (env (())))\""
  22
  14
  6
  2
  14
  6
  20
  1
  1
  11
  #f
  73/14
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  8
  #f
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  15
  59
  app
  "\"'(eval (app or (-> (app not x2) <-) (app not x3)) (env (())))\""
  22
  14
  6
  2
  14
  6
  20
  1
  1
  11
  #f
  73/14
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  8
  #f
  26/5
  ((0 0 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  15
  59
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (-> (app or (app not x4) x1) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  28
  19
  7
  2
  19
  7
  26
  1
  1
  13
  #f
  101/19
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app or (app not x4) (-> x1 <-)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  8
  #f
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  15
  59
  app
  "\"'(eval (app or (-> (app not x4) <-) x1) (env (())))\""
  22
  14
  6
  2
  14
  6
  20
  1
  1
  11
  #f
  73/14
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app not (-> x4 <-)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  8
  #f
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  15
  59
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or x3 x4) <-)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  26
  17
  7
  2
  17
  7
  24
  1
  1
  12
  #f
  90/17
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app or x3 (-> x4 <-)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  8
  #f
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app or (-> x3 <-) x4) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  8
  #f
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  15
  59
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  34
  24
  8
  2
  24
  8
  32
  1
  1
  15
  #f
  43/8
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-3
  0
  15
  59
  app
  "\"'(eval (app or x1 (app not x2) (-> (app not x3) <-)) (env (())))\""
  22
  14
  6
  2
  14
  6
  20
  1
  1
  11
  #f
  73/14
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  8
  #f
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  15
  59
  app
  "\"'(eval (app or x1 (-> (app not x2) <-) (app not x3)) (env (())))\""
  22
  14
  6
  2
  14
  6
  20
  1
  1
  11
  #f
  73/14
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  8
  #f
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) (app not x2) (app not x3)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  8
  #f
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  15
  59
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 x2) <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  26
  17
  7
  2
  17
  7
  24
  1
  1
  12
  #f
  90/17
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app or x1 (-> x2 <-)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  8
  #f
  26/5
  ((0 0 0) (0 0 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) x2) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  8
  #f
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  15
  59
  let
  "\"'(eval (λ (s) (-> (let (_) ...) <-)) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  15
  59
  app
  "\"'(eval (let (... () (_ (-> (app display s) <-)) () ...) ...) (env (())))\""
  6
  4
  2
  0
  4
  2
  6
  1
  1
  2
  #t
  9/2
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app display (-> s <-)) (env (())))\""
  4
  2
  2
  0
  2
  2
  4
  1
  1
  0
  #f
  4
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  15
  59
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  15
  59
  let
  "\"'(eval (letrec* (println ... sat-solve-7) (-> (let (_) ...) <-)) (env ()))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  15
  59
  app
  "\"'(eval\n  (let (... () (_ (-> (app display (app sat-solve-7 phi)) <-)) () ...) ...)\n  (env ()))\""
  116
  85
  19
  12
  85
  19
  104
  1
  1
  41
  #t
  479/85
  ((5 5 0) (5 5 0) (5 5 0)))
'(clean-cache
  sat-3
  0
  15
  59
  app
  "\"'(eval (app display (-> (app sat-solve-7 phi) <-)) (env ()))\""
  114
  83
  19
  12
  83
  19
  102
  1
  1
  39
  #f
  469/83
  ((5 5 0) (5 5 0) (5 5 0)))
'(clean-cache
  sat-3
  0
  15
  59
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  app
  "\"'(eval\n  (λ (n7) (-> (app p n1 n2 n3 n4 n5 n6 n7) <-))\n  (env (() () () () () () () ())))\""
  72
  58
  11
  3
  58
  11
  69
  1
  1
  28
  #f
  160/29
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app not (-> x4 <-)) (env (())))\""
  72
  58
  11
  3
  58
  11
  69
  1
  1
  28
  #f
  160/29
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  app
  "\"'(eval (let (... () (_ (-> (app println \"trying\") <-)) () ...) ...) (env (())))\""
  79
  64
  11
  4
  64
  11
  75
  1
  1
  34
  #t
  175/32
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env (())))\""
  118
  87
  19
  12
  87
  19
  106
  1
  1
  45
  #f
  487/87
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  app
  "\"'(eval (λ (n5) (-> (app try (λ (n6) ...)) <-)) (env (() () () () () ())))\""
  118
  87
  19
  12
  87
  19
  106
  1
  1
  45
  #f
  487/87
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or x3 x4) <-)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  118
  87
  19
  12
  87
  19
  106
  1
  1
  45
  #f
  487/87
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  app
  "\"'(eval (app or x1 (-> (app not x2) <-) (app not x3)) (env (())))\""
  118
  87
  19
  12
  87
  19
  106
  1
  1
  45
  #f
  487/87
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  let
  "\"'(eval (letrec* (println ... sat-solve-7) (-> (let (_) ...) <-)) (env ()))\""
  121
  90
  19
  12
  90
  19
  109
  1
  1
  48
  #t
  251/45
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 x2) <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  121
  90
  19
  12
  90
  19
  109
  1
  1
  48
  #f
  251/45
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 n4 n5 (-> n6 <-) n7) (env (() () () () () () () ())))\""
  123
  91
  20
  12
  91
  20
  111
  1
  1
  48
  #f
  508/91
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app p n1 n2 (-> n3 <-) n4 n5 n6 n7) (env (() () () () () () () ())))\""
  123
  91
  20
  12
  91
  20
  111
  1
  1
  48
  #f
  508/91
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  app
  "\"'(eval (app or (-> (app not x4) <-) x1) (env (())))\""
  123
  91
  20
  12
  91
  20
  111
  1
  1
  48
  #f
  508/91
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  app
  "\"'(eval (λ (n4) (-> (app try (λ (n5) ...)) <-)) (env (() () () () ())))\""
  123
  91
  20
  12
  91
  20
  111
  1
  1
  48
  #f
  508/91
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env (())))\""
  123
  91
  20
  12
  91
  20
  111
  1
  1
  48
  #f
  508/91
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env (())))\""
  123
  91
  20
  12
  91
  20
  111
  1
  1
  48
  #f
  508/91
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env (())))\""
  124
  92
  20
  12
  92
  20
  112
  1
  1
  48
  #f
  257/46
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app p n1 (-> n2 <-) n3 n4 n5 n6 n7) (env (() () () () () () () ())))\""
  124
  92
  20
  12
  92
  20
  112
  1
  1
  48
  #f
  257/46
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  app
  "\"'(eval (let (... () (_ (-> (app display s) <-)) () ...) ...) (env (())))\""
  130
  96
  22
  12
  96
  22
  118
  1
  1
  50
  #t
  133/24
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) (app not x2) (app not x3)) (env (())))\""
  130
  96
  22
  12
  96
  22
  118
  1
  1
  50
  #f
  133/24
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  app
  "\"'(eval (let (_) (-> (app or (app f (app #t)) (app f (app #f))) <-)) (env (())))\""
  130
  96
  22
  12
  96
  22
  118
  1
  1
  50
  #f
  133/24
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  app
  "\"'(eval (λ (n3) (-> (app try (λ (n4) ...)) <-)) (env (() () () ())))\""
  130
  96
  22
  12
  96
  22
  118
  1
  1
  50
  #f
  133/24
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  letrec*
  "\"'(eval ((top) letrec* (println ... sat-solve-7) ...) (env ()))\""
  131
  97
  22
  12
  97
  22
  119
  1
  1
  51
  #t
  537/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app or x1 (-> x2 <-)) (env (())))\""
  131
  97
  22
  12
  97
  22
  119
  1
  1
  51
  #f
  537/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app or (app not x4) (-> x1 <-)) (env (())))\""
  131
  97
  22
  12
  97
  22
  119
  1
  1
  51
  #f
  537/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  app
  "\"'(eval (λ (n6) (-> (app try (λ (n7) ...)) <-)) (env (() () () () () () ())))\""
  131
  97
  22
  12
  97
  22
  119
  1
  1
  51
  #f
  537/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (())))\""
  131
  97
  22
  12
  97
  22
  119
  1
  1
  51
  #f
  537/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  let
  "\"'(eval (λ (f) (-> (let (_) ...) <-)) (env (())))\""
  131
  97
  22
  12
  97
  22
  119
  1
  1
  51
  #f
  537/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env (())))\""
  131
  97
  22
  12
  97
  22
  119
  1
  1
  51
  #f
  537/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 (-> n4 <-) n5 n6 n7) (env (() () () () () () () ())))\""
  131
  97
  22
  12
  97
  22
  119
  1
  1
  51
  #f
  537/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env (())))\""
  131
  97
  22
  12
  97
  22
  119
  1
  1
  51
  #f
  537/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app display (-> s <-)) (env (())))\""
  131
  97
  22
  12
  97
  22
  119
  1
  1
  51
  #f
  537/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4 x5 x6 x7)\n    (->\n     (app\n      and\n      (app or x1 x2)\n      (app or x1 (app not x2) (app not x3))\n      (app or x3 x4)\n      (app or (app not x4) x1)\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env (())))\""
  131
  97
  22
  12
  97
  22
  119
  1
  1
  51
  #f
  537/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  131
  97
  22
  12
  97
  22
  119
  1
  1
  51
  #f
  537/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  131
  97
  22
  12
  97
  22
  119
  1
  1
  51
  #f
  537/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  app
  "\"'(eval (app or (app not x2) (-> (app not x3) <-)) (env (())))\""
  131
  97
  22
  12
  97
  22
  119
  1
  1
  51
  #f
  537/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  app
  "\"'(eval (app or (-> (app not x2) <-) (app not x3)) (env (())))\""
  131
  97
  22
  12
  97
  22
  119
  1
  1
  51
  #f
  537/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 n4 n5 n6 (-> n7 <-)) (env (() () () () () () () ())))\""
  133
  98
  23
  12
  98
  23
  121
  1
  1
  51
  #f
  543/98
  ((0 0 0) (0 0 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app p (-> n1 <-) n2 n3 n4 n5 n6 n7) (env (() () () () () () () ())))\""
  133
  98
  23
  12
  98
  23
  121
  1
  1
  51
  #f
  543/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env (())))\""
  133
  98
  23
  12
  98
  23
  121
  1
  1
  51
  #f
  543/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env (() ())))\""
  133
  98
  23
  12
  98
  23
  121
  1
  1
  51
  #f
  543/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  let
  "\"'(eval (λ (s) (-> (let (_) ...) <-)) (env (())))\""
  133
  98
  23
  12
  98
  23
  121
  1
  1
  51
  #t
  543/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  app
  "\"'(eval (λ (n2) (-> (app try (λ (n3) ...)) <-)) (env (() () ())))\""
  133
  98
  23
  12
  98
  23
  121
  1
  1
  51
  #f
  543/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  app
  "\"'(eval\n  (let (... () (_ (-> (app display (app sat-solve-7 phi)) <-)) () ...) ...)\n  (env ()))\""
  137
  101
  23
  13
  101
  23
  124
  1
  1
  53
  #t
  559/101
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app or (-> x3 <-) x4) (env (())))\""
  137
  101
  23
  13
  101
  23
  124
  1
  1
  53
  #f
  559/101
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  app
  "\"'(eval (app display (-> (app sat-solve-7 phi) <-)) (env ()))\""
  137
  101
  23
  13
  101
  23
  124
  1
  1
  53
  #f
  559/101
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env ()))\""
  137
  101
  23
  13
  101
  23
  124
  1
  1
  53
  #t
  559/101
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) x2) (env (())))\""
  137
  101
  23
  13
  101
  23
  124
  1
  1
  53
  #f
  559/101
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  app
  "\"'(eval (app f (-> (app #t) <-)) (env (())))\""
  137
  101
  23
  13
  101
  23
  124
  1
  1
  53
  #t
  559/101
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  app
  "\"'(eval (app or x1 (app not x2) (-> (app not x3) <-)) (env (())))\""
  137
  101
  23
  13
  101
  23
  124
  1
  1
  53
  #f
  559/101
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env (())))\""
  137
  101
  23
  13
  101
  23
  124
  1
  1
  53
  #f
  559/101
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  137
  101
  23
  13
  101
  23
  124
  1
  1
  53
  #f
  559/101
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app or x3 (-> x4 <-)) (env (())))\""
  137
  101
  23
  13
  101
  23
  124
  1
  1
  53
  #f
  559/101
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 n4 (-> n5 <-) n6 n7) (env (() () () () () () () ())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  53
  #f
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  53
  #f
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  app
  "\"'(eval (app f (-> (app #f) <-)) (env (())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  53
  #t
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env (())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  53
  #t
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (-> (app or (app not x4) x1) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  53
  #f
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app (-> p <-) n1 n2 n3 n4 n5 n6 n7) (env (() () () () () () () ())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  53
  #t
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env (())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  53
  #f
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  8
  #f
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env (())))\""
  30
  21
  7
  2
  21
  7
  28
  1
  1
  14
  #f
  16/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app display (-> s <-)) (env (())))\""
  34
  23
  9
  2
  23
  9
  32
  1
  1
  14
  #f
  120/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app p n1 (-> n2 <-) n3 n4 n5 n6 n7) (env (() () () () () () () ())))\""
  34
  23
  9
  2
  23
  9
  32
  1
  1
  14
  #f
  120/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app or x1 (-> x2 <-)) (env (())))\""
  35
  24
  9
  2
  24
  9
  33
  1
  1
  14
  #f
  21/4
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app p n1 n2 (-> n3 <-) n4 n5 n6 n7) (env (() () () () () () () ())))\""
  35
  24
  9
  2
  24
  9
  33
  1
  1
  14
  #f
  21/4
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (())))\""
  36
  25
  9
  2
  25
  9
  34
  1
  1
  14
  #f
  132/25
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  app
  "\"'(eval (app or x1 (-> (app not x2) <-) (app not x3)) (env (())))\""
  39
  28
  9
  2
  28
  9
  37
  1
  1
  15
  #f
  149/28
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env (())))\""
  40
  29
  9
  2
  29
  9
  38
  1
  1
  15
  #f
  155/29
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app or (-> x3 <-) x4) (env (())))\""
  41
  30
  9
  2
  30
  9
  39
  1
  1
  15
  #f
  161/30
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  app
  "\"'(eval (app or (-> (app not x2) <-) (app not x3)) (env (())))\""
  41
  30
  9
  2
  30
  9
  39
  1
  1
  15
  #f
  161/30
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  app
  "\"'(eval (λ (n4) (-> (app try (λ (n5) ...)) <-)) (env (() () () () ())))\""
  115
  83
  21
  11
  83
  21
  104
  1
  1
  39
  #f
  465/83
  ((4 4 0) (4 4 0) (4 4 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  115
  83
  21
  11
  83
  21
  104
  1
  1
  39
  #f
  465/83
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) x2) (env (())))\""
  115
  83
  21
  11
  83
  21
  104
  1
  1
  39
  #f
  465/83
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 n4 (-> n5 <-) n6 n7) (env (() () () () () () () ())))\""
  117
  84
  22
  11
  84
  22
  106
  1
  1
  39
  #f
  157/28
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app (-> p <-) n1 n2 n3 n4 n5 n6 n7) (env (() () () () () () () ())))\""
  117
  84
  22
  11
  84
  22
  106
  1
  1
  39
  #t
  157/28
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 x2) <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  117
  84
  22
  11
  84
  22
  106
  1
  1
  39
  #f
  157/28
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env (())))\""
  117
  84
  22
  11
  84
  22
  106
  1
  1
  39
  #f
  157/28
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  app
  "\"'(eval (λ (n3) (-> (app try (λ (n4) ...)) <-)) (env (() () () ())))\""
  117
  84
  22
  11
  84
  22
  106
  1
  1
  39
  #f
  157/28
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env (())))\""
  117
  84
  22
  11
  84
  22
  106
  1
  1
  39
  #f
  157/28
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  app
  "\"'(eval (app or x1 (app not x2) (-> (app not x3) <-)) (env (())))\""
  117
  84
  22
  11
  84
  22
  106
  1
  1
  39
  #f
  157/28
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app p (-> n1 <-) n2 n3 n4 n5 n6 n7) (env (() () () () () () () ())))\""
  117
  84
  22
  11
  84
  22
  106
  1
  1
  39
  #f
  157/28
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  app
  "\"'(eval (λ (n6) (-> (app try (λ (n7) ...)) <-)) (env (() () () () () () ())))\""
  117
  84
  22
  11
  84
  22
  106
  1
  1
  39
  #f
  157/28
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  117
  84
  22
  11
  84
  22
  106
  1
  1
  39
  #f
  157/28
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env (() ())))\""
  117
  84
  22
  11
  84
  22
  106
  1
  1
  39
  #f
  157/28
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  app
  "\"'(eval (λ (n2) (-> (app try (λ (n3) ...)) <-)) (env (() () ())))\""
  117
  84
  22
  11
  84
  22
  106
  1
  1
  39
  #f
  157/28
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 n4 n5 (-> n6 <-) n7) (env (() () () () () () () ())))\""
  119
  85
  23
  11
  85
  23
  108
  1
  1
  39
  #f
  477/85
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  app
  "\"'(eval (let (_) (-> (app or (app f (app #t)) (app f (app #f))) <-)) (env (())))\""
  119
  85
  23
  11
  85
  23
  108
  1
  1
  39
  #f
  477/85
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  app
  "\"'(eval (app or (-> (app not x4) <-) x1) (env (())))\""
  119
  85
  23
  11
  85
  23
  108
  1
  1
  39
  #f
  477/85
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  app
  "\"'(eval\n  (let (... () (_ (-> (app display (app sat-solve-7 phi)) <-)) () ...) ...)\n  (env ()))\""
  124
  89
  23
  12
  89
  23
  112
  1
  1
  41
  #t
  499/89
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app or (app not x4) (-> x1 <-)) (env (())))\""
  124
  89
  23
  12
  89
  23
  112
  1
  1
  41
  #f
  499/89
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  app
  "\"'(eval (app f (-> (app #t) <-)) (env (())))\""
  124
  89
  23
  12
  89
  23
  112
  1
  1
  41
  #t
  499/89
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  app
  "\"'(eval (app f (-> (app #f) <-)) (env (())))\""
  124
  89
  23
  12
  89
  23
  112
  1
  1
  41
  #t
  499/89
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (-> (app or (app not x4) x1) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  124
  89
  23
  12
  89
  23
  112
  1
  1
  41
  #f
  499/89
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  app
  "\"'(eval (app or (app not x2) (-> (app not x3) <-)) (env (())))\""
  124
  89
  23
  12
  89
  23
  112
  1
  1
  41
  #f
  499/89
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  app
  "\"'(eval (λ (n5) (-> (app try (λ (n6) ...)) <-)) (env (() () () () () ())))\""
  124
  89
  23
  12
  89
  23
  112
  1
  1
  41
  #f
  499/89
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  let
  "\"'(eval (letrec* (println ... sat-solve-7) (-> (let (_) ...) <-)) (env ()))\""
  127
  92
  23
  12
  92
  23
  115
  1
  1
  44
  #t
  257/46
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app not (-> x4 <-)) (env (())))\""
  127
  92
  23
  12
  92
  23
  115
  1
  1
  44
  #f
  257/46
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 (-> n4 <-) n5 n6 n7) (env (() () () () () () () ())))\""
  127
  92
  23
  12
  92
  23
  115
  1
  1
  44
  #f
  257/46
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  app
  "\"'(eval (let (... () (_ (-> (app println \"trying\") <-)) () ...) ...) (env (())))\""
  134
  98
  23
  13
  98
  23
  121
  1
  1
  50
  #t
  272/49
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  letrec*
  "\"'(eval ((top) letrec* (println ... sat-solve-7) ...) (env ()))\""
  135
  99
  23
  13
  99
  23
  122
  1
  1
  51
  #t
  61/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or x3 x4) <-)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  135
  99
  23
  13
  99
  23
  122
  1
  1
  51
  #f
  61/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env (())))\""
  135
  99
  23
  13
  99
  23
  122
  1
  1
  51
  #t
  61/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env (())))\""
  135
  99
  23
  13
  99
  23
  122
  1
  1
  51
  #f
  61/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  app
  "\"'(eval\n  (λ (n7) (-> (app p n1 n2 n3 n4 n5 n6 n7) <-))\n  (env (() () () () () () () ())))\""
  135
  99
  23
  13
  99
  23
  122
  1
  1
  51
  #f
  61/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env (())))\""
  135
  99
  23
  13
  99
  23
  122
  1
  1
  51
  #f
  61/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env (())))\""
  135
  99
  23
  13
  99
  23
  122
  1
  1
  51
  #f
  61/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  let
  "\"'(eval (λ (s) (-> (let (_) ...) <-)) (env (())))\""
  135
  99
  23
  13
  99
  23
  122
  1
  1
  51
  #t
  61/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env (())))\""
  135
  99
  23
  13
  99
  23
  122
  1
  1
  51
  #f
  61/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  app
  "\"'(eval (let (... () (_ (-> (app display s) <-)) () ...) ...) (env (())))\""
  137
  101
  23
  13
  101
  23
  124
  1
  1
  53
  #t
  559/101
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env (())))\""
  137
  101
  23
  13
  101
  23
  124
  1
  1
  53
  #f
  559/101
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) (app not x2) (app not x3)) (env (())))\""
  137
  101
  23
  13
  101
  23
  124
  1
  1
  53
  #f
  559/101
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app or x3 (-> x4 <-)) (env (())))\""
  137
  101
  23
  13
  101
  23
  124
  1
  1
  53
  #f
  559/101
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  137
  101
  23
  13
  101
  23
  124
  1
  1
  53
  #f
  559/101
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4 x5 x6 x7)\n    (->\n     (app\n      and\n      (app or x1 x2)\n      (app or x1 (app not x2) (app not x3))\n      (app or x3 x4)\n      (app or (app not x4) x1)\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env (())))\""
  137
  101
  23
  13
  101
  23
  124
  1
  1
  53
  #f
  559/101
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env ()))\""
  137
  101
  23
  13
  101
  23
  124
  1
  1
  53
  #t
  559/101
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  app
  "\"'(eval (app display (-> (app sat-solve-7 phi) <-)) (env ()))\""
  137
  101
  23
  13
  101
  23
  124
  1
  1
  53
  #f
  559/101
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 n4 n5 n6 (-> n7 <-)) (env (() () () () () () () ())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  53
  #f
  565/102
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  let
  "\"'(eval (λ (f) (-> (let (_) ...) <-)) (env (())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  53
  #f
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
