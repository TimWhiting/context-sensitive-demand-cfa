'(clean-cache
  sat-3
  0
  15
  163
  letrec*
  "'(eval ((top) letrec* (println ... sat-solve-7) ...) (env ()))"
  #f
  4
  4
  0
  0
  4
  0
  4
  1
  1
  4
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  lambda
  "'(eval\n  (letrec* (... try (sat-solve-7 (-> (λ (p) ...) <-)) () ...) ...)\n  (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  app
  "'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env (())))"
  #f
  175
  145
  19
  11
  145
  19
  164
  1
  1
  89
  #f
  211/145
  ((4 4 0)))
'(clean-cache
  sat-3
  0
  15
  163
  lambda
  "'(eval (app try (-> (λ (n1) ...) <-)) (env (())))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  app
  "'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env (() ())))"
  #f
  174
  144
  19
  11
  144
  19
  163
  1
  1
  89
  #f
  209/144
  ((4 4 0)))
'(clean-cache
  sat-3
  0
  15
  163
  lambda
  "'(eval (app try (-> (λ (n2) ...) <-)) (env (() ())))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  app
  "'(eval (λ (n2) (-> (app try (λ (n3) ...)) <-)) (env (() () ())))"
  #f
  174
  144
  19
  11
  144
  19
  163
  1
  1
  89
  #f
  209/144
  ((4 4 0)))
'(clean-cache
  sat-3
  0
  15
  163
  lambda
  "'(eval (app try (-> (λ (n3) ...) <-)) (env (() () ())))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  app
  "'(eval (λ (n3) (-> (app try (λ (n4) ...)) <-)) (env (() () () ())))"
  #f
  174
  144
  19
  11
  144
  19
  163
  1
  1
  89
  #f
  209/144
  ((4 4 0)))
'(clean-cache
  sat-3
  0
  15
  163
  lambda
  "'(eval (app try (-> (λ (n4) ...) <-)) (env (() () () ())))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  app
  "'(eval (λ (n4) (-> (app try (λ (n5) ...)) <-)) (env (() () () () ())))"
  #f
  174
  144
  19
  11
  144
  19
  163
  1
  1
  89
  #f
  209/144
  ((4 4 0)))
'(clean-cache
  sat-3
  0
  15
  163
  lambda
  "'(eval (app try (-> (λ (n5) ...) <-)) (env (() () () () ())))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  app
  "'(eval (λ (n5) (-> (app try (λ (n6) ...)) <-)) (env (() () () () () ())))"
  #f
  174
  144
  19
  11
  144
  19
  163
  1
  1
  89
  #f
  209/144
  ((4 4 0)))
'(clean-cache
  sat-3
  0
  15
  163
  lambda
  "'(eval (app try (-> (λ (n6) ...) <-)) (env (() () () () () ())))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  app
  "'(eval (λ (n6) (-> (app try (λ (n7) ...)) <-)) (env (() () () () () () ())))"
  #f
  174
  144
  19
  11
  144
  19
  163
  1
  1
  89
  #f
  209/144
  ((4 4 0)))
'(clean-cache
  sat-3
  0
  15
  163
  lambda
  "'(eval (app try (-> (λ (n7) ...) <-)) (env (() () () () () () ())))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  app
  "'(eval\n  (λ (n7) (-> (app p n1 n2 n3 n4 n5 n6 n7) <-))\n  (env (() () () () () () () ())))"
  #f
  129
  115
  11
  3
  115
  11
  126
  1
  1
  73
  #f
  157/115
  ((2 2 0)))
'(clean-cache
  sat-3
  0
  15
  163
  ref-or-constructor
  "'(eval (app p n1 n2 n3 n4 n5 n6 (-> n7 <-)) (env (() () () () () () () ())))"
  #f
  11
  7
  3
  1
  7
  3
  10
  1
  1
  6
  #f
  8/7
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  ref-or-constructor
  "'(eval (app p n1 n2 n3 n4 n5 (-> n6 <-) n7) (env (() () () () () () () ())))"
  #f
  11
  7
  3
  1
  7
  3
  10
  1
  1
  6
  #f
  8/7
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  ref-or-constructor
  "'(eval (app p n1 n2 n3 n4 (-> n5 <-) n6 n7) (env (() () () () () () () ())))"
  #f
  11
  7
  3
  1
  7
  3
  10
  1
  1
  6
  #f
  8/7
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  ref-or-constructor
  "'(eval (app p n1 n2 n3 (-> n4 <-) n5 n6 n7) (env (() () () () () () () ())))"
  #f
  11
  7
  3
  1
  7
  3
  10
  1
  1
  6
  #f
  8/7
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  ref-or-constructor
  "'(eval (app p n1 n2 (-> n3 <-) n4 n5 n6 n7) (env (() () () () () () () ())))"
  #f
  11
  7
  3
  1
  7
  3
  10
  1
  1
  6
  #f
  8/7
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  ref-or-constructor
  "'(eval (app p n1 (-> n2 <-) n3 n4 n5 n6 n7) (env (() () () () () () () ())))"
  #f
  11
  7
  3
  1
  7
  3
  10
  1
  1
  6
  #f
  8/7
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  ref-or-constructor
  "'(eval (app p (-> n1 <-) n2 n3 n4 n5 n6 n7) (env (() () () () () () () ())))"
  #f
  11
  7
  3
  1
  7
  3
  10
  1
  1
  6
  #f
  8/7
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  ref-or-constructor
  "'(eval (app (-> p <-) n1 n2 n3 n4 n5 n6 n7) (env (() () () () () () () ())))"
  #f
  5
  3
  2
  0
  3
  2
  5
  1
  1
  3
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  ref-or-constructor
  "'(eval (app (-> try <-) (λ (n7) ...)) (env (() () () () () () ())))"
  (lambda number char string quoted constructor)
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  ref-or-constructor
  "'(eval (app (-> try <-) (λ (n6) ...)) (env (() () () () () ())))"
  (lambda number char string quoted constructor)
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  ref-or-constructor
  "'(eval (app (-> try <-) (λ (n5) ...)) (env (() () () () ())))"
  (lambda number char string quoted constructor)
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  ref-or-constructor
  "'(eval (app (-> try <-) (λ (n4) ...)) (env (() () () ())))"
  (lambda number char string quoted constructor)
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  ref-or-constructor
  "'(eval (app (-> try <-) (λ (n3) ...)) (env (() () ())))"
  (lambda number char string quoted constructor)
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  ref-or-constructor
  "'(eval (app (-> try <-) (λ (n2) ...)) (env (() ())))"
  (lambda number char string quoted constructor)
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  ref-or-constructor
  "'(eval (app (-> try <-) (λ (n1) ...)) (env (())))"
  (lambda number char string quoted constructor)
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  lambda
  "'(eval\n  (letrec* (... phi (try (-> (λ (f) ...) <-)) sat-solve-7 ...) ...)\n  (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  let
  "'(eval (λ (f) (-> (let (_) ...) <-)) (env (())))"
  #f
  174
  144
  19
  11
  144
  19
  163
  1
  1
  89
  #f
  209/144
  ((4 4 0)))
'(clean-cache
  sat-3
  0
  15
  163
  app
  "'(eval (let (... () (_ (-> (app println \"trying\") <-)) () ...) ...) (env (())))"
  #f
  7
  6
  0
  1
  6
  0
  6
  1
  1
  6
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  string
  "'(eval (app println (-> \"trying\" <-)) (env (())))"
  (string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  ref-or-constructor
  "'(eval (app (-> println <-) \"trying\") (env (())))"
  (lambda number char string quoted constructor)
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  match
  "'(eval (let (_) (-> (match (app f (app #t ...)) ...) <-)) (env (())))"
  #f
  174
  144
  19
  11
  144
  19
  163
  1
  1
  89
  #f
  209/144
  ((4 4 0)))
'(clean-cache
  sat-3
  0
  15
  163
  app
  "'(eval (match (app f (app #t)) (#f) (_ (-> (app #t) <-))) (env (())))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  constructor
  "'(eval (app (-> #t <-)) (env (())))"
  (constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  match
  "'(eval\n  (match (app f (app #t)) ((#f) (-> (match (app f (app #f ...)) ...) <-)) _)\n  (env (())))"
  #f
  174
  144
  19
  11
  144
  19
  163
  1
  1
  89
  #f
  209/144
  ((4 4 0)))
'(clean-cache
  sat-3
  0
  15
  163
  app
  "'(eval (match (app f (app #f)) (#f) (_ (-> (app #t) <-))) (env (())))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  constructor
  "'(eval (app (-> #t <-)) (env (())))"
  (constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  app
  "'(eval (match (app f (app #f)) ((#f) (-> (app #f) <-)) _) (env (())))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  constructor
  "'(eval (app (-> #f <-)) (env (())))"
  (constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  app
  "'(eval (match (-> (app f (app #f)) <-) (#f) _) (env (())))"
  #f
  174
  144
  19
  11
  144
  19
  163
  1
  1
  89
  #f
  209/144
  ((4 4 0)))
'(clean-cache
  sat-3
  0
  15
  163
  app
  "'(eval (app f (-> (app #f) <-)) (env (())))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  constructor
  "'(eval (app (-> #f <-)) (env (())))"
  (constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  ref-or-constructor
  "'(eval (app (-> f <-) (app #f)) (env (())))"
  #f
  16
  8
  8
  0
  8
  8
  16
  1
  1
  7
  #f
  7/4
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  app
  "'(eval (match (-> (app f (app #t)) <-) (#f) _) (env (())))"
  #f
  174
  144
  19
  11
  144
  19
  163
  1
  1
  89
  #f
  209/144
  ((4 4 0)))
'(clean-cache
  sat-3
  0
  15
  163
  app
  "'(eval (app f (-> (app #t) <-)) (env (())))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  constructor
  "'(eval (app (-> #t <-)) (env (())))"
  (constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  ref-or-constructor
  "'(eval (app (-> f <-) (app #t)) (env (())))"
  #f
  16
  8
  8
  0
  8
  8
  16
  1
  1
  7
  #f
  7/4
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  lambda
  "'(eval\n  (letrec*\n   (... println (phi (-> (λ (x1 x2 x3 x4 x5 x6 x7) ...) <-)) try ...)\n   ...)\n  (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  match
  "'(eval\n  (λ (x1 x2 x3 x4 x5 x6 x7) (-> (match (match x1 ...) ...) <-))\n  (env (())))"
  #f
  122
  111
  9
  2
  111
  9
  120
  1
  1
  70
  #f
  152/111
  ((2 2 0)))
'(clean-cache
  sat-3
  0
  15
  163
  match
  "'(eval\n  (match (match x1 ...) (#f) (_ (-> (match (match x1 ...) ...) <-)))\n  (env (())))"
  #f
  109
  98
  9
  2
  98
  9
  107
  1
  1
  62
  #f
  67/49
  ((2 2 0)))
'(clean-cache
  sat-3
  0
  15
  163
  match
  "'(eval\n  (match (match x1 ...) (#f) (_ (-> (match (match x3 ...) ...) <-)))\n  (env (())))"
  #f
  88
  77
  9
  2
  77
  9
  86
  1
  1
  50
  #f
  104/77
  ((2 2 0)))
'(clean-cache
  sat-3
  0
  15
  163
  match
  "'(eval\n  (match (match x3 ...) (#f) (_ (-> (match (match (app not ...) ...) ...) <-)))\n  (env (())))"
  #f
  75
  64
  9
  2
  64
  9
  73
  1
  1
  42
  #f
  43/32
  ((1 1 0)))
'(clean-cache
  sat-3
  0
  15
  163
  match
  "'(eval\n  (match\n   (match (app not x4) ...)\n   (#f)\n   (_ (-> (match (match (app not ...) ...) ...) <-)))\n  (env (())))"
  #f
  57
  47
  8
  2
  47
  8
  55
  1
  1
  32
  #f
  62/47
  ((1 1 0)))
'(clean-cache
  sat-3
  0
  15
  163
  match
  "'(eval\n  (match (match (app not x2) ...) (#f) (_ (-> (match (match x4 ...) ...) <-)))\n  (env (())))"
  #f
  35
  26
  7
  2
  26
  7
  33
  1
  1
  19
  #f
  33/26
  ((1 1 0)))
'(clean-cache
  sat-3
  0
  15
  163
  app
  "'(eval (match (match x4 ...) (#f) (_ (-> (app #t) <-))) (env (())))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  constructor
  "'(eval (app (-> #t <-)) (env (())))"
  (constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  app
  "'(eval (match (match x4 ...) ((#f) (-> (app #f) <-)) _) (env (())))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  constructor
  "'(eval (app (-> #f <-)) (env (())))"
  (constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  match
  "'(eval (match (-> (match x4 ...) <-) (#f) _) (env (())))"
  #f
  30
  21
  7
  2
  21
  7
  28
  1
  1
  15
  #f
  9/7
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  app
  "'(eval (match x4 (#f) (_ (-> (app #t) <-))) (env (())))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  constructor
  "'(eval (app (-> #t <-)) (env (())))"
  (constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  match
  "'(eval (match x4 ((#f) (-> (match x2 ...) <-)) _) (env (())))"
  #f
  23
  15
  6
  2
  15
  6
  21
  1
  1
  12
  #f
  6/5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  app
  "'(eval (match x2 (#f) (_ (-> (app #t) <-))) (env (())))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  constructor
  "'(eval (app (-> #t <-)) (env (())))"
  (constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  app
  "'(eval (match x2 ((#f) (-> (app #f) <-)) _) (env (())))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  constructor
  "'(eval (app (-> #f <-)) (env (())))"
  (constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  ref-or-constructor
  "'(eval (match (-> x2 <-) (#f) _) (env (())))"
  #f
  18
  10
  6
  2
  10
  6
  16
  1
  1
  8
  #f
  6/5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  ref-or-constructor
  "'(eval (match (-> x4 <-) (#f) _) (env (())))"
  #f
  18
  10
  6
  2
  10
  6
  16
  1
  1
  8
  #f
  6/5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  app
  "'(eval (match (match (app not x2) ...) ((#f) (-> (app #f) <-)) _) (env (())))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  constructor
  "'(eval (app (-> #f <-)) (env (())))"
  (constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  match
  "'(eval (match (-> (match (app not x2) ...) <-) (#f) _) (env (())))"
  #f
  36
  27
  7
  2
  27
  7
  34
  1
  1
  19
  #f
  35/27
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  app
  "'(eval (match (app not x2) (#f) (_ (-> (app #t) <-))) (env (())))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  constructor
  "'(eval (app (-> #t <-)) (env (())))"
  (constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  match
  "'(eval\n  (match (app not x2) ((#f) (-> (match (app not x3) ...) <-)) _)\n  (env (())))"
  #f
  27
  19
  6
  2
  19
  6
  25
  1
  1
  15
  #f
  23/19
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  app
  "'(eval (match (app not x3) (#f) (_ (-> (app #t) <-))) (env (())))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  constructor
  "'(eval (app (-> #t <-)) (env (())))"
  (constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  app
  "'(eval (match (app not x3) ((#f) (-> (app #f) <-)) _) (env (())))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  constructor
  "'(eval (app (-> #f <-)) (env (())))"
  (constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  app
  "'(eval (match (-> (app not x3) <-) (#f) _) (env (())))"
  #f
  22
  14
  6
  2
  14
  6
  20
  1
  1
  11
  #f
  17/14
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  ref-or-constructor
  "'(eval (app not (-> x3 <-)) (env (())))"
  #f
  18
  10
  6
  2
  10
  6
  16
  1
  1
  8
  #f
  6/5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  ref-or-constructor
  "'(eval (app (-> not <-) x3) (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  app
  "'(eval (match (-> (app not x2) <-) (#f) _) (env (())))"
  #f
  22
  14
  6
  2
  14
  6
  20
  1
  1
  11
  #f
  17/14
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  ref-or-constructor
  "'(eval (app not (-> x2 <-)) (env (())))"
  #f
  18
  10
  6
  2
  10
  6
  16
  1
  1
  8
  #f
  6/5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  ref-or-constructor
  "'(eval (app (-> not <-) x2) (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  app
  "'(eval (match (match (app not x4) ...) ((#f) (-> (app #f) <-)) _) (env (())))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  constructor
  "'(eval (app (-> #f <-)) (env (())))"
  (constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  match
  "'(eval (match (-> (match (app not x4) ...) <-) (#f) _) (env (())))"
  #f
  34
  25
  7
  2
  25
  7
  32
  1
  1
  18
  #f
  32/25
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  app
  "'(eval (match (app not x4) (#f) (_ (-> (app #t) <-))) (env (())))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  constructor
  "'(eval (app (-> #t <-)) (env (())))"
  (constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  match
  "'(eval (match (app not x4) ((#f) (-> (match x1 ...) <-)) _) (env (())))"
  #f
  23
  15
  6
  2
  15
  6
  21
  1
  1
  12
  #f
  6/5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  app
  "'(eval (match x1 (#f) (_ (-> (app #t) <-))) (env (())))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  constructor
  "'(eval (app (-> #t <-)) (env (())))"
  (constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  app
  "'(eval (match x1 ((#f) (-> (app #f) <-)) _) (env (())))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  constructor
  "'(eval (app (-> #f <-)) (env (())))"
  (constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  ref-or-constructor
  "'(eval (match (-> x1 <-) (#f) _) (env (())))"
  #f
  18
  10
  6
  2
  10
  6
  16
  1
  1
  8
  #f
  6/5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  app
  "'(eval (match (-> (app not x4) <-) (#f) _) (env (())))"
  #f
  22
  14
  6
  2
  14
  6
  20
  1
  1
  11
  #f
  17/14
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  ref-or-constructor
  "'(eval (app not (-> x4 <-)) (env (())))"
  #f
  18
  10
  6
  2
  10
  6
  16
  1
  1
  8
  #f
  6/5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  ref-or-constructor
  "'(eval (app (-> not <-) x4) (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  app
  "'(eval (match (match x3 ...) ((#f) (-> (app #f) <-)) _) (env (())))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  constructor
  "'(eval (app (-> #f <-)) (env (())))"
  (constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  match
  "'(eval (match (-> (match x3 ...) <-) (#f) _) (env (())))"
  #f
  30
  21
  7
  2
  21
  7
  28
  1
  1
  15
  #f
  9/7
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  app
  "'(eval (match x3 (#f) (_ (-> (app #t) <-))) (env (())))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  constructor
  "'(eval (app (-> #t <-)) (env (())))"
  (constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  match
  "'(eval (match x3 ((#f) (-> (match x4 ...) <-)) _) (env (())))"
  #f
  23
  15
  6
  2
  15
  6
  21
  1
  1
  12
  #f
  6/5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  app
  "'(eval (match x4 (#f) (_ (-> (app #t) <-))) (env (())))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  constructor
  "'(eval (app (-> #t <-)) (env (())))"
  (constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  app
  "'(eval (match x4 ((#f) (-> (app #f) <-)) _) (env (())))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  constructor
  "'(eval (app (-> #f <-)) (env (())))"
  (constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  ref-or-constructor
  "'(eval (match (-> x4 <-) (#f) _) (env (())))"
  #f
  18
  10
  6
  2
  10
  6
  16
  1
  1
  8
  #f
  6/5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  ref-or-constructor
  "'(eval (match (-> x3 <-) (#f) _) (env (())))"
  #f
  18
  10
  6
  2
  10
  6
  16
  1
  1
  8
  #f
  6/5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  app
  "'(eval (match (match x1 ...) ((#f) (-> (app #f) <-)) _) (env (())))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  constructor
  "'(eval (app (-> #f <-)) (env (())))"
  (constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  match
  "'(eval (match (-> (match x1 ...) <-) (#f) _) (env (())))"
  #f
  43
  33
  8
  2
  33
  8
  41
  1
  1
  22
  #f
  4/3
  ((1 1 0)))
'(clean-cache
  sat-3
  0
  15
  163
  app
  "'(eval (match x1 (#f) (_ (-> (app #t) <-))) (env (())))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  constructor
  "'(eval (app (-> #t <-)) (env (())))"
  (constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  match
  "'(eval (match x1 ((#f) (-> (match (app not x2) ...) <-)) _) (env (())))"
  #f
  36
  27
  7
  2
  27
  7
  34
  1
  1
  19
  #f
  35/27
  ((1 1 0)))
'(clean-cache
  sat-3
  0
  15
  163
  app
  "'(eval (match (app not x2) (#f) (_ (-> (app #t) <-))) (env (())))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  constructor
  "'(eval (app (-> #t <-)) (env (())))"
  (constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  match
  "'(eval\n  (match (app not x2) ((#f) (-> (match (app not x3) ...) <-)) _)\n  (env (())))"
  #f
  27
  19
  6
  2
  19
  6
  25
  1
  1
  15
  #f
  23/19
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  app
  "'(eval (match (app not x3) (#f) (_ (-> (app #t) <-))) (env (())))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  constructor
  "'(eval (app (-> #t <-)) (env (())))"
  (constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  app
  "'(eval (match (app not x3) ((#f) (-> (app #f) <-)) _) (env (())))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  constructor
  "'(eval (app (-> #f <-)) (env (())))"
  (constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  app
  "'(eval (match (-> (app not x3) <-) (#f) _) (env (())))"
  #f
  22
  14
  6
  2
  14
  6
  20
  1
  1
  11
  #f
  17/14
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  ref-or-constructor
  "'(eval (app not (-> x3 <-)) (env (())))"
  #f
  18
  10
  6
  2
  10
  6
  16
  1
  1
  8
  #f
  6/5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  ref-or-constructor
  "'(eval (app (-> not <-) x3) (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  app
  "'(eval (match (-> (app not x2) <-) (#f) _) (env (())))"
  #f
  22
  14
  6
  2
  14
  6
  20
  1
  1
  11
  #f
  17/14
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  ref-or-constructor
  "'(eval (app not (-> x2 <-)) (env (())))"
  #f
  18
  10
  6
  2
  10
  6
  16
  1
  1
  8
  #f
  6/5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  ref-or-constructor
  "'(eval (app (-> not <-) x2) (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  ref-or-constructor
  "'(eval (match (-> x1 <-) (#f) _) (env (())))"
  #f
  18
  10
  6
  2
  10
  6
  16
  1
  1
  8
  #f
  6/5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  app
  "'(eval (match (match x1 ...) ((#f) (-> (app #f) <-)) _) (env (())))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  constructor
  "'(eval (app (-> #f <-)) (env (())))"
  (constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  match
  "'(eval (match (-> (match x1 ...) <-) (#f) _) (env (())))"
  #f
  30
  21
  7
  2
  21
  7
  28
  1
  1
  15
  #f
  9/7
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  app
  "'(eval (match x1 (#f) (_ (-> (app #t) <-))) (env (())))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  constructor
  "'(eval (app (-> #t <-)) (env (())))"
  (constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  match
  "'(eval (match x1 ((#f) (-> (match x2 ...) <-)) _) (env (())))"
  #f
  23
  15
  6
  2
  15
  6
  21
  1
  1
  12
  #f
  6/5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  app
  "'(eval (match x2 (#f) (_ (-> (app #t) <-))) (env (())))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  constructor
  "'(eval (app (-> #t <-)) (env (())))"
  (constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  app
  "'(eval (match x2 ((#f) (-> (app #f) <-)) _) (env (())))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  constructor
  "'(eval (app (-> #f <-)) (env (())))"
  (constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  ref-or-constructor
  "'(eval (match (-> x2 <-) (#f) _) (env (())))"
  #f
  18
  10
  6
  2
  10
  6
  16
  1
  1
  8
  #f
  6/5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  ref-or-constructor
  "'(eval (match (-> x1 <-) (#f) _) (env (())))"
  #f
  18
  10
  6
  2
  10
  6
  16
  1
  1
  8
  #f
  6/5
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  lambda
  "'(eval (letrec* (... () (println (-> (λ (s) ...) <-)) phi ...) ...) (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  let
  "'(eval (λ (s) (-> (let (_) ...) <-)) (env (())))"
  #f
  3
  3
  0
  0
  3
  0
  3
  1
  1
  3
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  app
  "'(eval (let (... () (_ (-> (app display s) <-)) () ...) ...) (env (())))"
  #f
  6
  4
  2
  0
  4
  2
  6
  1
  1
  4
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  ref-or-constructor
  "'(eval (app display (-> s <-)) (env (())))"
  #f
  4
  2
  2
  0
  2
  2
  4
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  ref-or-constructor
  "'(eval (app (-> display <-) s) (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  app
  "'(eval (let (_) (-> (app newline) <-)) (env (())))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  ref-or-constructor
  "'(eval (app (-> newline <-)) (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  let
  "'(eval (letrec* (println ... sat-solve-7) (-> (let (_) ...) <-)) (env ()))"
  #f
  3
  3
  0
  0
  3
  0
  3
  1
  1
  3
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  app
  "'(eval\n  (let (... () (_ (-> (app display (app sat-solve-7 phi)) <-)) () ...) ...)\n  (env ()))"
  #f
  179
  148
  19
  12
  148
  19
  167
  1
  1
  91
  #t
  215/148
  ((4 4 0)))
'(clean-cache
  sat-3
  0
  15
  163
  app
  "'(eval (app display (-> (app sat-solve-7 phi) <-)) (env ()))"
  #f
  177
  146
  19
  12
  146
  19
  165
  1
  1
  89
  #f
  213/146
  ((4 4 0)))
'(clean-cache
  sat-3
  0
  15
  163
  ref-or-constructor
  "'(eval (app sat-solve-7 (-> phi <-)) (env ()))"
  (lambda number char string quoted constructor)
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  ref-or-constructor
  "'(eval (app (-> sat-solve-7 <-) phi) (env ()))"
  (lambda number char string quoted constructor)
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  ref-or-constructor
  "'(eval (app (-> display <-) (app sat-solve-7 phi)) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  app
  "'(eval (let (_) (-> (app newline) <-)) (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  163
  ref-or-constructor
  "'(eval (app (-> newline <-)) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
