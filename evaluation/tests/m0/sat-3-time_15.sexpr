'(clean-cache
  sat-3
  0
  15
  100
  letrec*
  "'(eval ((top) letrec* (println ... sat-solve-7) ...) (env ()))"
  #f
  4
  4
  0
  0
  4
  0
  4
  1
  1
  4
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  100
  lambda
  "'(eval\n  (letrec* (... try (sat-solve-7 (-> (λ (p) ...) <-)) () ...) ...)\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  100
  app
  "'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env (())))"
  #f
  112
  82
  19
  11
  82
  19
  101
  1
  1
  39
  #f
  135/82
  ((14 15 0)))
'(clean-cache
  sat-3
  0
  15
  100
  lambda
  "'(eval (app try (-> (λ (n1) ...) <-)) (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  100
  app
  "'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env (() ())))"
  #f
  111
  81
  19
  11
  81
  19
  100
  1
  1
  39
  #f
  133/81
  ((14 15 0)))
'(clean-cache
  sat-3
  0
  15
  100
  lambda
  "'(eval (app try (-> (λ (n2) ...) <-)) (env (() ())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  100
  app
  "'(eval (λ (n2) (-> (app try (λ (n3) ...)) <-)) (env (() () ())))"
  #f
  #f)
'(clean-cache
  sat-3
  0
  15
  100
  lambda
  "'(eval (app try (-> (λ (n3) ...) <-)) (env (() () ())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  100
  app
  "'(eval (λ (n3) (-> (app try (λ (n4) ...)) <-)) (env (() () () ())))"
  #f
  111
  81
  19
  11
  81
  19
  100
  1
  1
  39
  #f
  133/81
  ((14 15 0)))
'(clean-cache
  sat-3
  0
  15
  100
  lambda
  "'(eval (app try (-> (λ (n4) ...) <-)) (env (() () () ())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  100
  app
  "'(eval (λ (n4) (-> (app try (λ (n5) ...)) <-)) (env (() () () () ())))"
  #f
  111
  81
  19
  11
  81
  19
  100
  1
  1
  39
  #f
  133/81
  ((14 14 0)))
'(clean-cache
  sat-3
  0
  15
  100
  lambda
  "'(eval (app try (-> (λ (n5) ...) <-)) (env (() () () () ())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  100
  app
  "'(eval (λ (n5) (-> (app try (λ (n6) ...)) <-)) (env (() () () () () ())))"
  #f
  111
  81
  19
  11
  81
  19
  100
  1
  1
  39
  #f
  133/81
  ((14 14 0)))
'(clean-cache
  sat-3
  0
  15
  100
  lambda
  "'(eval (app try (-> (λ (n6) ...) <-)) (env (() () () () () ())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  100
  app
  "'(eval (λ (n6) (-> (app try (λ (n7) ...)) <-)) (env (() () () () () () ())))"
  #f
  111
  81
  19
  11
  81
  19
  100
  1
  1
  39
  #f
  133/81
  ((14 14 0)))
'(clean-cache
  sat-3
  0
  15
  100
  lambda
  "'(eval (app try (-> (λ (n7) ...) <-)) (env (() () () () () () ())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  100
  app
  "'(eval\n  (λ (n7) (-> (app p n1 n2 n3 n4 n5 n6 n7) <-))\n  (env (() () () () () () () ())))"
  #f
  72
  58
  11
  3
  58
  11
  69
  1
  1
  28
  #f
  44/29
  ((9 10 0)))
'(clean-cache
  sat-3
  0
  15
  100
  ref-or-constructor
  "'(eval (app p n1 n2 n3 n4 n5 n6 (-> n7 <-)) (env (() () () () () () () ())))"
  #f
  11
  7
  3
  1
  7
  3
  10
  1
  1
  6
  #f
  8/7
  ((1 1 0)))
'(clean-cache
  sat-3
  0
  15
  100
  ref-or-constructor
  "'(eval (app p n1 n2 n3 n4 n5 (-> n6 <-) n7) (env (() () () () () () () ())))"
  #f
  11
  7
  3
  1
  7
  3
  10
  1
  1
  6
  #f
  8/7
  ((1 1 0)))
'(clean-cache
  sat-3
  0
  15
  100
  ref-or-constructor
  "'(eval (app p n1 n2 n3 n4 (-> n5 <-) n6 n7) (env (() () () () () () () ())))"
  #f
  11
  7
  3
  1
  7
  3
  10
  1
  1
  6
  #f
  8/7
  ((1 1 0)))
'(clean-cache
  sat-3
  0
  15
  100
  ref-or-constructor
  "'(eval (app p n1 n2 n3 (-> n4 <-) n5 n6 n7) (env (() () () () () () () ())))"
  #f
  11
  7
  3
  1
  7
  3
  10
  1
  1
  6
  #f
  8/7
  ((1 1 0)))
'(clean-cache
  sat-3
  0
  15
  100
  ref-or-constructor
  "'(eval (app p n1 n2 (-> n3 <-) n4 n5 n6 n7) (env (() () () () () () () ())))"
  #f
  11
  7
  3
  1
  7
  3
  10
  1
  1
  6
  #f
  8/7
  ((1 1 0)))
'(clean-cache
  sat-3
  0
  15
  100
  ref-or-constructor
  "'(eval (app p n1 (-> n2 <-) n3 n4 n5 n6 n7) (env (() () () () () () () ())))"
  #f
  11
  7
  3
  1
  7
  3
  10
  1
  1
  6
  #f
  8/7
  ((1 1 0)))
'(clean-cache
  sat-3
  0
  15
  100
  ref-or-constructor
  "'(eval (app p (-> n1 <-) n2 n3 n4 n5 n6 n7) (env (() () () () () () () ())))"
  #f
  11
  7
  3
  1
  7
  3
  10
  1
  1
  6
  #f
  8/7
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  100
  ref-or-constructor
  "'(eval (app (-> p <-) n1 n2 n3 n4 n5 n6 n7) (env (() () () () () () () ())))"
  #f
  5
  3
  2
  0
  3
  2
  5
  1
  1
  3
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  100
  ref-or-constructor
  "'(eval (app (-> try <-) (λ (n7) ...)) (env (() () () () () () ())))"
  #t
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  100
  ref-or-constructor
  "'(eval (app (-> try <-) (λ (n6) ...)) (env (() () () () () ())))"
  #t
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  100
  ref-or-constructor
  "'(eval (app (-> try <-) (λ (n5) ...)) (env (() () () () ())))"
  #t
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  100
  ref-or-constructor
  "'(eval (app (-> try <-) (λ (n4) ...)) (env (() () () ())))"
  #t
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  100
  ref-or-constructor
  "'(eval (app (-> try <-) (λ (n3) ...)) (env (() () ())))"
  #t
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  100
  ref-or-constructor
  "'(eval (app (-> try <-) (λ (n2) ...)) (env (() ())))"
  #t
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  100
  ref-or-constructor
  "'(eval (app (-> try <-) (λ (n1) ...)) (env (())))"
  #t
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  100
  lambda
  "'(eval\n  (letrec* (... phi (try (-> (λ (f) ...) <-)) sat-solve-7 ...) ...)\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  100
  let
  "'(eval (λ (f) (-> (let (_) ...) <-)) (env (())))"
  #f
  111
  81
  19
  11
  81
  19
  100
  1
  1
  39
  #f
  133/81
  ((14 14 0)))
'(clean-cache
  sat-3
  0
  15
  100
  app
  "'(eval (let (... () (_ (-> (app println \"trying\") <-)) () ...) ...) (env (())))"
  #f
  7
  6
  0
  1
  6
  0
  6
  1
  1
  6
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  100
  string
  "'(eval (app println (-> \"trying\" <-)) (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  100
  ref-or-constructor
  "'(eval (app (-> println <-) \"trying\") (env (())))"
  #t
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  100
  app
  "'(eval (let (_) (-> (app or (app f (app #t)) (app f (app #f))) <-)) (env (())))"
  #f
  #f)
'(clean-cache
  sat-3
  0
  15
  100
  app
  "'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env (())))"
  #f
  #f)
'(clean-cache
  sat-3
  0
  15
  100
  app
  "'(eval (app f (-> (app #f) <-)) (env (())))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  100
  constructor
  "'(eval (app (-> #f <-)) (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  100
  ref-or-constructor
  "'(eval (app (-> f <-) (app #f)) (env (())))"
  #f
  16
  8
  8
  0
  8
  8
  16
  1
  1
  7
  #f
  7/4
  ((1 1 0)))
'(clean-cache
  sat-3
  0
  15
  100
  app
  "'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env (())))"
  #f
  111
  81
  19
  11
  81
  19
  100
  1
  1
  39
  #f
  133/81
  ((14 14 0)))
'(clean-cache
  sat-3
  0
  15
  100
  app
  "'(eval (app f (-> (app #t) <-)) (env (())))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  100
  constructor
  "'(eval (app (-> #t <-)) (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  100
  ref-or-constructor
  "'(eval (app (-> f <-) (app #t)) (env (())))"
  #f
  16
  8
  8
  0
  8
  8
  16
  1
  1
  7
  #f
  7/4
  ((1 1 0)))
'(clean-cache
  sat-3
  0
  15
  100
  ref-or-constructor
  "'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  100
  lambda
  "'(eval\n  (letrec*\n   (... println (phi (-> (λ (x1 x2 x3 x4 x5 x6 x7) ...) <-)) try ...)\n   ...)\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  100
  app
  "'(eval\n  (λ (x1 x2 x3 x4 x5 x6 x7)\n    (->\n     (app\n      and\n      (app or x1 x2)\n      (app or x1 (app not x2) (app not x3))\n      (app or x3 x4)\n      (app or (app not x4) x1)\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env (())))"
  #f
  65
  54
  9
  2
  54
  9
  63
  1
  1
  25
  #f
  83/54
  ((8 8 0)))
'(clean-cache
  sat-3
  0
  15
  100
  app
  "'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env (())))"
  #f
  26
  17
  7
  2
  17
  7
  24
  1
  1
  12
  #f
  22/17
  ((2 2 0)))
'(clean-cache
  sat-3
  0
  15
  100
  ref-or-constructor
  "'(eval (app or x4 (-> x2 <-)) (env (())))"
  #f
  18
  10
  6
  2
  10
  6
  16
  1
  1
  8
  #f
  6/5
  ((1 1 0)))
'(clean-cache
  sat-3
  0
  15
  100
  ref-or-constructor
  "'(eval (app or (-> x4 <-) x2) (env (())))"
  #f
  18
  10
  6
  2
  10
  6
  16
  1
  1
  8
  #f
  6/5
  ((1 1 0)))
'(clean-cache
  sat-3
  0
  15
  100
  ref-or-constructor
  "'(eval (app (-> or <-) x4 x2) (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  100
  app
  "'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env (())))"
  #f
  30
  21
  7
  2
  21
  7
  28
  1
  1
  14
  #f
  4/3
  ((2 2 0)))
'(clean-cache
  sat-3
  0
  15
  100
  app
  "'(eval (app or (app not x2) (-> (app not x3) <-)) (env (())))"
  #f
  22
  14
  6
  2
  14
  6
  20
  1
  1
  11
  #f
  17/14
  ((1 1 0)))
'(clean-cache
  sat-3
  0
  15
  100
  ref-or-constructor
  "'(eval (app not (-> x3 <-)) (env (())))"
  #f
  18
  10
  6
  2
  10
  6
  16
  1
  1
  8
  #f
  6/5
  ((1 1 0)))
'(clean-cache
  sat-3
  0
  15
  100
  ref-or-constructor
  "'(eval (app (-> not <-) x3) (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  100
  app
  "'(eval (app or (-> (app not x2) <-) (app not x3)) (env (())))"
  #f
  22
  14
  6
  2
  14
  6
  20
  1
  1
  11
  #f
  17/14
  ((1 1 0)))
'(clean-cache
  sat-3
  0
  15
  100
  ref-or-constructor
  "'(eval (app not (-> x2 <-)) (env (())))"
  #f
  18
  10
  6
  2
  10
  6
  16
  1
  1
  8
  #f
  6/5
  ((1 1 0)))
'(clean-cache
  sat-3
  0
  15
  100
  ref-or-constructor
  "'(eval (app (-> not <-) x2) (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  100
  ref-or-constructor
  "'(eval (app (-> or <-) (app not x2) (app not x3)) (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  100
  app
  "'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (-> (app or (app not x4) x1) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))"
  #f
  28
  19
  7
  2
  19
  7
  26
  1
  1
  13
  #f
  25/19
  ((2 3 0)))
'(clean-cache
  sat-3
  0
  15
  100
  ref-or-constructor
  "'(eval (app or (app not x4) (-> x1 <-)) (env (())))"
  #f
  18
  10
  6
  2
  10
  6
  16
  1
  1
  8
  #f
  6/5
  ((1 1 0)))
'(clean-cache
  sat-3
  0
  15
  100
  app
  "'(eval (app or (-> (app not x4) <-) x1) (env (())))"
  #f
  22
  14
  6
  2
  14
  6
  20
  1
  1
  11
  #f
  17/14
  ((1 1 0)))
'(clean-cache
  sat-3
  0
  15
  100
  ref-or-constructor
  "'(eval (app not (-> x4 <-)) (env (())))"
  #f
  18
  10
  6
  2
  10
  6
  16
  1
  1
  8
  #f
  6/5
  ((1 1 0)))
'(clean-cache
  sat-3
  0
  15
  100
  ref-or-constructor
  "'(eval (app (-> not <-) x4) (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  100
  ref-or-constructor
  "'(eval (app (-> or <-) (app not x4) x1) (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  100
  app
  "'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or x3 x4) <-)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))"
  #f
  26
  17
  7
  2
  17
  7
  24
  1
  1
  12
  #f
  22/17
  ((2 2 0)))
'(clean-cache
  sat-3
  0
  15
  100
  ref-or-constructor
  "'(eval (app or x3 (-> x4 <-)) (env (())))"
  #f
  18
  10
  6
  2
  10
  6
  16
  1
  1
  8
  #f
  6/5
  ((1 1 0)))
'(clean-cache
  sat-3
  0
  15
  100
  ref-or-constructor
  "'(eval (app or (-> x3 <-) x4) (env (())))"
  #f
  18
  10
  6
  2
  10
  6
  16
  1
  1
  8
  #f
  6/5
  ((1 1 0)))
'(clean-cache
  sat-3
  0
  15
  100
  ref-or-constructor
  "'(eval (app (-> or <-) x3 x4) (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  100
  app
  "'(eval\n  (app\n   and\n   (app or x1 x2)\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))"
  #f
  34
  24
  8
  2
  24
  8
  32
  1
  1
  15
  #f
  11/8
  ((3 3 0)))
'(clean-cache
  sat-3
  0
  15
  100
  app
  "'(eval (app or x1 (app not x2) (-> (app not x3) <-)) (env (())))"
  #f
  22
  14
  6
  2
  14
  6
  20
  1
  1
  11
  #f
  17/14
  ((1 1 0)))
'(clean-cache
  sat-3
  0
  15
  100
  ref-or-constructor
  "'(eval (app not (-> x3 <-)) (env (())))"
  #f
  18
  10
  6
  2
  10
  6
  16
  1
  1
  8
  #f
  6/5
  ((1 1 0)))
'(clean-cache
  sat-3
  0
  15
  100
  ref-or-constructor
  "'(eval (app (-> not <-) x3) (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  100
  app
  "'(eval (app or x1 (-> (app not x2) <-) (app not x3)) (env (())))"
  #f
  22
  14
  6
  2
  14
  6
  20
  1
  1
  11
  #f
  17/14
  ((1 1 0)))
'(clean-cache
  sat-3
  0
  15
  100
  ref-or-constructor
  "'(eval (app not (-> x2 <-)) (env (())))"
  #f
  18
  10
  6
  2
  10
  6
  16
  1
  1
  8
  #f
  6/5
  ((1 1 0)))
'(clean-cache
  sat-3
  0
  15
  100
  ref-or-constructor
  "'(eval (app (-> not <-) x2) (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  100
  ref-or-constructor
  "'(eval (app or (-> x1 <-) (app not x2) (app not x3)) (env (())))"
  #f
  18
  10
  6
  2
  10
  6
  16
  1
  1
  8
  #f
  6/5
  ((1 1 0)))
'(clean-cache
  sat-3
  0
  15
  100
  ref-or-constructor
  "'(eval (app (-> or <-) x1 (app not x2) (app not x3)) (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  100
  app
  "'(eval\n  (app\n   and\n   (-> (app or x1 x2) <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))"
  #f
  26
  17
  7
  2
  17
  7
  24
  1
  1
  12
  #f
  22/17
  ((2 2 0)))
'(clean-cache
  sat-3
  0
  15
  100
  ref-or-constructor
  "'(eval (app or x1 (-> x2 <-)) (env (())))"
  #f
  18
  10
  6
  2
  10
  6
  16
  1
  1
  8
  #f
  6/5
  ((1 1 0)))
'(clean-cache
  sat-3
  0
  15
  100
  ref-or-constructor
  "'(eval (app or (-> x1 <-) x2) (env (())))"
  #f
  18
  10
  6
  2
  10
  6
  16
  1
  1
  8
  #f
  6/5
  ((1 1 0)))
'(clean-cache
  sat-3
  0
  15
  100
  ref-or-constructor
  "'(eval (app (-> or <-) x1 x2) (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  100
  ref-or-constructor
  "'(eval\n  (app\n   (-> and <-)\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  100
  lambda
  "'(eval (letrec* (... () (println (-> (λ (s) ...) <-)) phi ...) ...) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  100
  let
  "'(eval (λ (s) (-> (let (_) ...) <-)) (env (())))"
  #f
  3
  3
  0
  0
  3
  0
  3
  1
  1
  3
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  100
  app
  "'(eval (let (... () (_ (-> (app display s) <-)) () ...) ...) (env (())))"
  #f
  6
  4
  2
  0
  4
  2
  6
  1
  1
  4
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  100
  ref-or-constructor
  "'(eval (app display (-> s <-)) (env (())))"
  #f
  4
  2
  2
  0
  2
  2
  4
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  100
  ref-or-constructor
  "'(eval (app (-> display <-) s) (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  100
  app
  "'(eval (let (_) (-> (app newline) <-)) (env (())))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  100
  ref-or-constructor
  "'(eval (app (-> newline <-)) (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  100
  let
  "'(eval (letrec* (println ... sat-solve-7) (-> (let (_) ...) <-)) (env ()))"
  #f
  3
  3
  0
  0
  3
  0
  3
  1
  1
  3
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  100
  app
  "'(eval\n  (let (... () (_ (-> (app display (app sat-solve-7 phi)) <-)) () ...) ...)\n  (env ()))"
  #f
  #f)
'(clean-cache
  sat-3
  0
  15
  100
  app
  "'(eval (app display (-> (app sat-solve-7 phi) <-)) (env ()))"
  #f
  114
  83
  19
  12
  83
  19
  102
  1
  1
  39
  #f
  137/83
  ((15 15 0)))
'(clean-cache
  sat-3
  0
  15
  100
  ref-or-constructor
  "'(eval (app sat-solve-7 (-> phi <-)) (env ()))"
  #t
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  100
  ref-or-constructor
  "'(eval (app (-> sat-solve-7 <-) phi) (env ()))"
  #t
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  100
  ref-or-constructor
  "'(eval (app (-> display <-) (app sat-solve-7 phi)) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  100
  app
  "'(eval (let (_) (-> (app newline) <-)) (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-3
  0
  15
  100
  ref-or-constructor
  "'(eval (app (-> newline <-)) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
