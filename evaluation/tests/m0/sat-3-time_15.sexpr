'(clean-cache
  sat-3
  0
  15
  59
  letrec*
  "\"'(eval ((top) letrec* (println ... sat-solve-7) ...) (env ()))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  59
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env (())))\""
  #f)
'(clean-cache
  sat-3
  0
  59
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env (() ())))\""
  #f)
'(clean-cache
  sat-3
  0
  59
  app
  "\"'(eval (λ (n2) (-> (app try (λ (n3) ...)) <-)) (env (() () ())))\""
  #f)
'(clean-cache
  sat-3
  0
  59
  app
  "\"'(eval (λ (n3) (-> (app try (λ (n4) ...)) <-)) (env (() () () ())))\""
  #f)
'(clean-cache
  sat-3
  0
  59
  app
  "\"'(eval (λ (n4) (-> (app try (λ (n5) ...)) <-)) (env (() () () () ())))\""
  #f)
'(clean-cache
  sat-3
  0
  59
  app
  "\"'(eval (λ (n5) (-> (app try (λ (n6) ...)) <-)) (env (() () () () () ())))\""
  #f)
'(clean-cache
  sat-3
  0
  59
  app
  "\"'(eval (λ (n6) (-> (app try (λ (n7) ...)) <-)) (env (() () () () () () ())))\""
  #f)
'(clean-cache
  sat-3
  0
  15
  59
  app
  "\"'(eval\n  (λ (n7) (-> (app p n1 n2 n3 n4 n5 n6 n7) <-))\n  (env (() () () () () () () ())))\""
  72
  58
  11
  3
  58
  11
  69
  1
  1
  28
  #f
  160/29
  ((19/2 10 0) (19/2 10 0) (19/2 19/2 0)))
'(clean-cache
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 n4 n5 n6 (-> n7 <-)) (env (() () () () () () () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  6
  #f
  36/7
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 n4 n5 (-> n6 <-) n7) (env (() () () () () () () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  6
  #f
  36/7
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 n4 (-> n5 <-) n6 n7) (env (() () () () () () () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  6
  #f
  36/7
  ((1 1 0) (1 1 0) (1 3/2 0)))
'(clean-cache
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 (-> n4 <-) n5 n6 n7) (env (() () () () () () () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  6
  #f
  36/7
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app p n1 n2 (-> n3 <-) n4 n5 n6 n7) (env (() () () () () () () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  6
  #f
  36/7
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app p n1 (-> n2 <-) n3 n4 n5 n6 n7) (env (() () () () () () () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  6
  #f
  36/7
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app p (-> n1 <-) n2 n3 n4 n5 n6 n7) (env (() () () () () () () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  6
  #f
  36/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app (-> p <-) n1 n2 n3 n4 n5 n6 n7) (env (() () () () () () () ())))\""
  5
  3
  2
  0
  3
  2
  5
  1
  1
  3
  #t
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  15
  59
  let
  "\"'(eval (λ (f) (-> (let (_) ...) <-)) (env (())))\""
  111
  81
  19
  11
  81
  19
  100
  1
  1
  39
  #f
  457/81
  ((14 14 0) (27/2 14 0) (14 14 0)))
'(clean-cache
  sat-3
  0
  15
  59
  app
  "\"'(eval (let (... () (_ (-> (app println \"trying\") <-)) () ...) ...) (env (())))\""
  7
  6
  0
  1
  6
  0
  6
  1
  1
  6
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  15
  59
  app
  "\"'(eval (let (_) (-> (app or (app f (app #t)) (app f (app #f))) <-)) (env (())))\""
  111
  81
  19
  11
  81
  19
  100
  1
  1
  39
  #f
  457/81
  ((27/2 14 0) (27/2 14 0) (27/2 14 0)))
'(clean-cache
  sat-3
  0
  15
  59
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env (())))\""
  111
  81
  19
  11
  81
  19
  100
  1
  1
  39
  #f
  457/81
  ((27/2 27/2 0) (27/2 14 0) (27/2 14 0)))
'(clean-cache
  sat-3
  0
  15
  59
  app
  "\"'(eval (app f (-> (app #f) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env (())))\""
  16
  8
  8
  0
  8
  8
  16
  1
  1
  7
  #f
  23/4
  ((1 1 0) (3/2 3/2 0) (1 1 0)))
'(clean-cache
  sat-3
  0
  59
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env (())))\""
  #f)
'(clean-cache
  sat-3
  0
  15
  59
  app
  "\"'(eval (app f (-> (app #t) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env (())))\""
  16
  8
  8
  0
  8
  8
  16
  1
  1
  7
  #f
  23/4
  ((3/2 3/2 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-3
  0
  15
  59
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4 x5 x6 x7)\n    (->\n     (app\n      and\n      (app or x1 x2)\n      (app or x1 (app not x2) (app not x3))\n      (app or x3 x4)\n      (app or (app not x4) x1)\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env (())))\""
  65
  54
  9
  2
  54
  9
  63
  1
  1
  25
  #f
  299/54
  ((17/2 9 0) (17/2 9 0) (17/2 9 0)))
'(clean-cache
  sat-3
  0
  15
  59
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env (())))\""
  26
  17
  7
  2
  17
  7
  24
  1
  1
  12
  #f
  90/17
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  8
  #f
  26/5
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  8
  #f
  26/5
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  0
  15
  59
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env (())))\""
  30
  21
  7
  2
  21
  7
  28
  1
  1
  14
  #f
  16/3
  ((5/2 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  sat-3
  0
  15
  59
  app
  "\"'(eval (app or (app not x2) (-> (app not x3) <-)) (env (())))\""
  22
  14
  6
  2
  14
  6
  20
  1
  1
  11
  #f
  73/14
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  8
  #f
  26/5
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  0
  15
  59
  app
  "\"'(eval (app or (-> (app not x2) <-) (app not x3)) (env (())))\""
  22
  14
  6
  2
  14
  6
  20
  1
  1
  11
  #f
  73/14
  ((3/2 3/2 0) (1 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  8
  #f
  26/5
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-3
  0
  15
  59
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (-> (app or (app not x4) x1) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  28
  19
  7
  2
  19
  7
  26
  1
  1
  13
  #f
  101/19
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app or (app not x4) (-> x1 <-)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  8
  #f
  26/5
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-3
  0
  15
  59
  app
  "\"'(eval (app or (-> (app not x4) <-) x1) (env (())))\""
  22
  14
  6
  2
  14
  6
  20
  1
  1
  11
  #f
  73/14
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app not (-> x4 <-)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  8
  #f
  26/5
  ((3/2 3/2 0) (2 2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  0
  15
  59
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or x3 x4) <-)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  26
  17
  7
  2
  17
  7
  24
  1
  1
  12
  #f
  90/17
  ((3 3 0) (5/2 3 0) (5/2 5/2 0)))
'(clean-cache
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app or x3 (-> x4 <-)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  8
  #f
  26/5
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app or (-> x3 <-) x4) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  8
  #f
  26/5
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  0
  15
  59
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  34
  24
  8
  2
  24
  8
  32
  1
  1
  15
  #f
  43/8
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(clean-cache
  sat-3
  0
  15
  59
  app
  "\"'(eval (app or x1 (app not x2) (-> (app not x3) <-)) (env (())))\""
  22
  14
  6
  2
  14
  6
  20
  1
  1
  11
  #f
  73/14
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  8
  #f
  26/5
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-3
  0
  15
  59
  app
  "\"'(eval (app or x1 (-> (app not x2) <-) (app not x3)) (env (())))\""
  22
  14
  6
  2
  14
  6
  20
  1
  1
  11
  #f
  73/14
  ((1 1 0) (3/2 3/2 0) (1 1 0)))
'(clean-cache
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  8
  #f
  26/5
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) (app not x2) (app not x3)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  8
  #f
  26/5
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-3
  0
  15
  59
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 x2) <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  26
  17
  7
  2
  17
  7
  24
  1
  1
  12
  #f
  90/17
  ((2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app or x1 (-> x2 <-)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  8
  #f
  26/5
  ((3/2 3/2 0) (1 1 0) (1 3/2 0)))
'(clean-cache
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) x2) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  8
  #f
  26/5
  ((3/2 3/2 0) (1 1 0) (1 3/2 0)))
'(clean-cache
  sat-3
  0
  15
  59
  let
  "\"'(eval (λ (s) (-> (let (_) ...) <-)) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  15
  59
  app
  "\"'(eval (let (... () (_ (-> (app display s) <-)) () ...) ...) (env (())))\""
  6
  4
  2
  0
  4
  2
  6
  1
  1
  2
  #t
  9/2
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app display (-> s <-)) (env (())))\""
  4
  2
  2
  0
  2
  2
  4
  1
  1
  0
  #f
  4
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  15
  59
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  15
  59
  let
  "\"'(eval (letrec* (println ... sat-solve-7) (-> (let (_) ...) <-)) (env ()))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  59
  app
  "\"'(eval\n  (let (... () (_ (-> (app display (app sat-solve-7 phi)) <-)) () ...) ...)\n  (env ()))\""
  #f)
'(clean-cache
  sat-3
  0
  15
  59
  app
  "\"'(eval (app display (-> (app sat-solve-7 phi) <-)) (env ()))\""
  114
  83
  19
  12
  83
  19
  102
  1
  1
  39
  #f
  469/83
  ((29/2 29/2 0) (29/2 15 0) (29/2 29/2 0)))
'(clean-cache
  sat-3
  0
  15
  59
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app or (-> x3 <-) x4) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  8
  #f
  26/5
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  app
  "\"'(eval (let (... () (_ (-> (app println \"trying\") <-)) () ...) ...) (env (())))\""
  25
  16
  6
  3
  16
  6
  22
  1
  1
  14
  #t
  41/8
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env (())))\""
  41
  24
  14
  3
  24
  14
  38
  1
  1
  21
  #f
  16/3
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (())))\""
  42
  25
  14
  3
  25
  14
  39
  1
  1
  21
  #f
  134/25
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env (())))\""
  42
  25
  14
  3
  25
  14
  39
  1
  1
  21
  #t
  134/25
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) x2) (env (())))\""
  46
  28
  15
  3
  28
  15
  43
  1
  1
  22
  #f
  151/28
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env (())))\""
  119
  88
  19
  12
  88
  19
  107
  1
  1
  45
  #f
  493/88
  ((21/2 11 0) (21/2 21/2 0) (11 11 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env (())))\""
  119
  88
  19
  12
  88
  19
  107
  1
  1
  45
  #f
  493/88
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  let
  "\"'(eval (letrec* (println ... sat-solve-7) (-> (let (_) ...) <-)) (env ()))\""
  122
  91
  19
  12
  91
  19
  110
  1
  1
  48
  #t
  508/91
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  app
  "\"'(eval\n  (λ (n7) (-> (app p n1 n2 n3 n4 n5 n6 n7) <-))\n  (env (() () () () () () () ())))\""
  122
  91
  19
  12
  91
  19
  110
  1
  1
  48
  #f
  508/91
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (-> (app or (app not x4) x1) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  122
  91
  19
  12
  91
  19
  110
  1
  1
  48
  #f
  508/91
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 n4 (-> n5 <-) n6 n7) (env (() () () () () () () ())))\""
  124
  92
  20
  12
  92
  20
  112
  1
  1
  48
  #f
  257/46
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app not (-> x4 <-)) (env (())))\""
  124
  92
  20
  12
  92
  20
  112
  1
  1
  48
  #f
  257/46
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env (())))\""
  124
  92
  20
  12
  92
  20
  112
  1
  1
  48
  #f
  257/46
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 x2) <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  124
  92
  20
  12
  92
  20
  112
  1
  1
  48
  #f
  257/46
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  app
  "\"'(eval (let (... () (_ (-> (app display s) <-)) () ...) ...) (env (())))\""
  130
  96
  22
  12
  96
  22
  118
  1
  1
  50
  #t
  133/24
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  let
  "\"'(eval (λ (s) (-> (let (_) ...) <-)) (env (())))\""
  130
  96
  22
  12
  96
  22
  118
  1
  1
  50
  #t
  133/24
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env (())))\""
  130
  96
  22
  12
  96
  22
  118
  1
  1
  50
  #f
  133/24
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  app
  "\"'(eval (λ (n2) (-> (app try (λ (n3) ...)) <-)) (env (() () ())))\""
  130
  96
  22
  12
  96
  22
  118
  1
  1
  50
  #f
  133/24
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  app
  "\"'(eval (let (_) (-> (app or (app f (app #t)) (app f (app #f))) <-)) (env (())))\""
  130
  96
  22
  12
  96
  22
  118
  1
  1
  50
  #f
  133/24
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  app
  "\"'(eval (app display (-> (app sat-solve-7 phi) <-)) (env ()))\""
  132
  97
  22
  13
  97
  22
  119
  1
  1
  50
  #f
  538/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  app
  "\"'(eval (app or (-> (app not x2) <-) (app not x3)) (env (())))\""
  132
  97
  22
  13
  97
  22
  119
  1
  1
  50
  #f
  538/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  app
  "\"'(eval\n  (let (... () (_ (-> (app display (app sat-solve-7 phi)) <-)) () ...) ...)\n  (env ()))\""
  134
  99
  22
  13
  99
  22
  121
  1
  1
  52
  #t
  548/99
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  app
  "\"'(eval (λ (n5) (-> (app try (λ (n6) ...)) <-)) (env (() () () () () ())))\""
  134
  99
  22
  13
  99
  22
  121
  1
  1
  52
  #f
  548/99
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  134
  99
  22
  13
  99
  22
  121
  1
  1
  52
  #f
  548/99
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env (() ())))\""
  134
  99
  22
  13
  99
  22
  121
  1
  1
  52
  #f
  548/99
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env (())))\""
  134
  99
  22
  13
  99
  22
  121
  1
  1
  52
  #f
  548/99
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app p n1 n2 (-> n3 <-) n4 n5 n6 n7) (env (() () () () () () () ())))\""
  134
  99
  22
  13
  99
  22
  121
  1
  1
  52
  #f
  548/99
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app display (-> s <-)) (env (())))\""
  134
  99
  22
  13
  99
  22
  121
  1
  1
  52
  #f
  548/99
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env (())))\""
  134
  99
  22
  13
  99
  22
  121
  1
  1
  52
  #f
  548/99
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 (-> n4 <-) n5 n6 n7) (env (() () () () () () () ())))\""
  134
  99
  22
  13
  99
  22
  121
  1
  1
  52
  #f
  548/99
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (())))\""
  134
  99
  22
  13
  99
  22
  121
  1
  1
  52
  #f
  548/99
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  134
  99
  22
  13
  99
  22
  121
  1
  1
  52
  #f
  548/99
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  app
  "\"'(eval (λ (n3) (-> (app try (λ (n4) ...)) <-)) (env (() () () ())))\""
  134
  99
  22
  13
  99
  22
  121
  1
  1
  52
  #f
  548/99
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app (-> p <-) n1 n2 n3 n4 n5 n6 n7) (env (() () () () () () () ())))\""
  134
  99
  22
  13
  99
  22
  121
  1
  1
  52
  #t
  548/99
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  app
  "\"'(eval (app f (-> (app #t) <-)) (env (())))\""
  134
  99
  22
  13
  99
  22
  121
  1
  1
  52
  #t
  548/99
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app or x3 (-> x4 <-)) (env (())))\""
  134
  99
  22
  13
  99
  22
  121
  1
  1
  52
  #f
  548/99
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app or x1 (-> x2 <-)) (env (())))\""
  134
  99
  22
  13
  99
  22
  121
  1
  1
  52
  #f
  548/99
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app p n1 (-> n2 <-) n3 n4 n5 n6 n7) (env (() () () () () () () ())))\""
  134
  99
  22
  13
  99
  22
  121
  1
  1
  52
  #f
  548/99
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 n4 n5 (-> n6 <-) n7) (env (() () () () () () () ())))\""
  136
  100
  23
  13
  100
  23
  123
  1
  1
  52
  #f
  277/50
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  let
  "\"'(eval (λ (f) (-> (let (_) ...) <-)) (env (())))\""
  136
  100
  23
  13
  100
  23
  123
  1
  1
  52
  #f
  277/50
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or x3 x4) <-)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  136
  100
  23
  13
  100
  23
  123
  1
  1
  52
  #f
  277/50
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4 x5 x6 x7)\n    (->\n     (app\n      and\n      (app or x1 x2)\n      (app or x1 (app not x2) (app not x3))\n      (app or x3 x4)\n      (app or (app not x4) x1)\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env (())))\""
  136
  100
  23
  13
  100
  23
  123
  1
  1
  52
  #f
  277/50
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  app
  "\"'(eval (app or x1 (app not x2) (-> (app not x3) <-)) (env (())))\""
  136
  100
  23
  13
  100
  23
  123
  1
  1
  52
  #f
  277/50
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  app
  "\"'(eval (λ (n4) (-> (app try (λ (n5) ...)) <-)) (env (() () () () ())))\""
  136
  100
  23
  13
  100
  23
  123
  1
  1
  52
  #f
  277/50
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  app
  "\"'(eval (λ (n6) (-> (app try (λ (n7) ...)) <-)) (env (() () () () () () ())))\""
  136
  100
  23
  13
  100
  23
  123
  1
  1
  52
  #f
  277/50
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env ()))\""
  136
  100
  23
  13
  100
  23
  123
  1
  1
  52
  #t
  277/50
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  app
  "\"'(eval (app f (-> (app #f) <-)) (env (())))\""
  136
  100
  23
  13
  100
  23
  123
  1
  1
  52
  #t
  277/50
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) (app not x2) (app not x3)) (env (())))\""
  136
  100
  23
  13
  100
  23
  123
  1
  1
  52
  #f
  277/50
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  app
  "\"'(eval (app or x1 (-> (app not x2) <-) (app not x3)) (env (())))\""
  136
  100
  23
  13
  100
  23
  123
  1
  1
  52
  #f
  277/50
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  letrec*
  "\"'(eval ((top) letrec* (println ... sat-solve-7) ...) (env ()))\""
  137
  101
  23
  13
  101
  23
  124
  1
  1
  53
  #t
  559/101
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app p (-> n1 <-) n2 n3 n4 n5 n6 n7) (env (() () () () () () () ())))\""
  137
  101
  23
  13
  101
  23
  124
  1
  1
  53
  #f
  559/101
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env (())))\""
  137
  101
  23
  13
  101
  23
  124
  1
  1
  53
  #f
  559/101
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env (())))\""
  137
  101
  23
  13
  101
  23
  124
  1
  1
  53
  #f
  559/101
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  137
  101
  23
  13
  101
  23
  124
  1
  1
  53
  #f
  559/101
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app or (app not x4) (-> x1 <-)) (env (())))\""
  137
  101
  23
  13
  101
  23
  124
  1
  1
  53
  #f
  559/101
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 n4 n5 n6 (-> n7 <-)) (env (() () () () () () () ())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  53
  #f
  565/102
  ((1 1 0) (1 1 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  app
  "\"'(eval (app or (-> (app not x4) <-) x1) (env (())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  53
  #f
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  15
  59
  app
  "\"'(eval (app or (app not x2) (-> (app not x3) <-)) (env (())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  53
  #f
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  8
  #f
  26/5
  ((3/2 3/2 0) (3/2 3/2 0) (1 1 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env (() ())))\""
  111
  81
  19
  11
  81
  19
  100
  1
  1
  39
  #f
  457/81
  ((27/2 14 0) (27/2 27/2 0) (27/2 14 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env (())))\""
  111
  81
  19
  11
  81
  19
  100
  1
  1
  39
  #f
  457/81
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env (())))\""
  111
  81
  19
  11
  81
  19
  100
  1
  1
  39
  #f
  457/81
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or x3 x4) <-)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  111
  81
  19
  11
  81
  19
  100
  1
  1
  39
  #f
  457/81
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  app
  "\"'(eval (λ (n3) (-> (app try (λ (n4) ...)) <-)) (env (() () () ())))\""
  111
  81
  19
  11
  81
  19
  100
  1
  1
  39
  #f
  457/81
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 x2) <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  111
  81
  19
  11
  81
  19
  100
  1
  1
  39
  #f
  457/81
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env (())))\""
  111
  81
  19
  11
  81
  19
  100
  1
  1
  39
  #f
  457/81
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  app
  "\"'(eval (app or (app not x2) (-> (app not x3) <-)) (env (())))\""
  111
  81
  19
  11
  81
  19
  100
  1
  1
  39
  #f
  457/81
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  app
  "\"'(eval (let (... () (_ (-> (app println \"trying\") <-)) () ...) ...) (env (())))\""
  118
  87
  19
  12
  87
  19
  106
  1
  1
  45
  #t
  487/87
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  app
  "\"'(eval (let (... () (_ (-> (app display s) <-)) () ...) ...) (env (())))\""
  124
  91
  21
  12
  91
  21
  112
  1
  1
  47
  #t
  505/91
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app (-> p <-) n1 n2 n3 n4 n5 n6 n7) (env (() () () () () () () ())))\""
  124
  91
  21
  12
  91
  21
  112
  1
  1
  47
  #t
  505/91
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  let
  "\"'(eval (letrec* (println ... sat-solve-7) (-> (let (_) ...) <-)) (env ()))\""
  127
  94
  21
  12
  94
  21
  115
  1
  1
  50
  #t
  260/47
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 n4 (-> n5 <-) n6 n7) (env (() () () () () () () ())))\""
  129
  95
  22
  12
  95
  22
  117
  1
  1
  50
  #f
  526/95
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env (())))\""
  129
  95
  22
  12
  95
  22
  117
  1
  1
  50
  #f
  526/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  app
  "\"'(eval (app f (-> (app #f) <-)) (env (())))\""
  129
  95
  22
  12
  95
  22
  117
  1
  1
  50
  #t
  526/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app or x3 (-> x4 <-)) (env (())))\""
  129
  95
  22
  12
  95
  22
  117
  1
  1
  50
  #f
  526/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  app
  "\"'(eval (λ (n5) (-> (app try (λ (n6) ...)) <-)) (env (() () () () () ())))\""
  129
  95
  22
  12
  95
  22
  117
  1
  1
  50
  #f
  526/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 n4 n5 n6 (-> n7 <-)) (env (() () () () () () () ())))\""
  131
  96
  23
  12
  96
  23
  119
  1
  1
  50
  #f
  133/24
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app p n1 n2 (-> n3 <-) n4 n5 n6 n7) (env (() () () () () () () ())))\""
  131
  96
  23
  12
  96
  23
  119
  1
  1
  50
  #f
  133/24
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app p (-> n1 <-) n2 n3 n4 n5 n6 n7) (env (() () () () () () () ())))\""
  131
  96
  23
  12
  96
  23
  119
  1
  1
  50
  #f
  133/24
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  app
  "\"'(eval (app or (-> (app not x2) <-) (app not x3)) (env (())))\""
  131
  96
  23
  12
  96
  23
  119
  1
  1
  50
  #f
  133/24
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app or x1 (-> x2 <-)) (env (())))\""
  131
  96
  23
  12
  96
  23
  119
  1
  1
  50
  #f
  133/24
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (())))\""
  131
  96
  23
  12
  96
  23
  119
  1
  1
  50
  #f
  133/24
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  letrec*
  "\"'(eval ((top) letrec* (println ... sat-solve-7) ...) (env ()))\""
  132
  97
  23
  12
  97
  23
  120
  1
  1
  51
  #t
  537/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  app
  "\"'(eval\n  (λ (n7) (-> (app p n1 n2 n3 n4 n5 n6 n7) <-))\n  (env (() () () () () () () ())))\""
  132
  97
  23
  12
  97
  23
  120
  1
  1
  51
  #f
  537/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app not (-> x4 <-)) (env (())))\""
  132
  97
  23
  12
  97
  23
  120
  1
  1
  51
  #f
  537/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app or (app not x4) (-> x1 <-)) (env (())))\""
  132
  97
  23
  12
  97
  23
  120
  1
  1
  51
  #f
  537/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env (())))\""
  132
  97
  23
  12
  97
  23
  120
  1
  1
  51
  #f
  537/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  132
  97
  23
  12
  97
  23
  120
  1
  1
  51
  #f
  537/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  app
  "\"'(eval (λ (n4) (-> (app try (λ (n5) ...)) <-)) (env (() () () () ())))\""
  132
  97
  23
  12
  97
  23
  120
  1
  1
  51
  #f
  537/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  app
  "\"'(eval (app or x1 (-> (app not x2) <-) (app not x3)) (env (())))\""
  132
  97
  23
  12
  97
  23
  120
  1
  1
  51
  #f
  537/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  let
  "\"'(eval (λ (f) (-> (let (_) ...) <-)) (env (())))\""
  132
  97
  23
  12
  97
  23
  120
  1
  1
  51
  #f
  537/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  132
  97
  23
  12
  97
  23
  120
  1
  1
  51
  #f
  537/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) (app not x2) (app not x3)) (env (())))\""
  132
  97
  23
  12
  97
  23
  120
  1
  1
  51
  #f
  537/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app p n1 (-> n2 <-) n3 n4 n5 n6 n7) (env (() () () () () () () ())))\""
  132
  97
  23
  12
  97
  23
  120
  1
  1
  51
  #f
  537/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env (())))\""
  132
  97
  23
  12
  97
  23
  120
  1
  1
  51
  #t
  537/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 n4 n5 (-> n6 <-) n7) (env (() () () () () () () ())))\""
  134
  98
  24
  12
  98
  24
  122
  1
  1
  51
  #f
  543/98
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env ()))\""
  134
  98
  24
  12
  98
  24
  122
  1
  1
  51
  #t
  543/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  let
  "\"'(eval (λ (s) (-> (let (_) ...) <-)) (env (())))\""
  134
  98
  24
  12
  98
  24
  122
  1
  1
  51
  #t
  543/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) x2) (env (())))\""
  134
  98
  24
  12
  98
  24
  122
  1
  1
  51
  #f
  543/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env (())))\""
  135
  99
  24
  12
  99
  24
  123
  1
  1
  51
  #f
  61/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (-> (app or (app not x4) x1) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  135
  99
  24
  12
  99
  24
  123
  1
  1
  51
  #f
  61/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (())))\""
  135
  99
  24
  12
  99
  24
  123
  1
  1
  51
  #f
  61/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  app
  "\"'(eval (λ (n6) (-> (app try (λ (n7) ...)) <-)) (env (() () () () () () ())))\""
  135
  99
  24
  12
  99
  24
  123
  1
  1
  51
  #f
  61/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  app
  "\"'(eval (let (_) (-> (app or (app f (app #t)) (app f (app #f))) <-)) (env (())))\""
  135
  99
  24
  12
  99
  24
  123
  1
  1
  51
  #f
  61/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  app
  "\"'(eval (app or (-> (app not x4) <-) x1) (env (())))\""
  135
  99
  24
  12
  99
  24
  123
  1
  1
  51
  #f
  61/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  app
  "\"'(eval (app display (-> (app sat-solve-7 phi) <-)) (env ()))\""
  137
  100
  24
  13
  100
  24
  124
  1
  1
  51
  #f
  111/20
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  app
  "\"'(eval (λ (n2) (-> (app try (λ (n3) ...)) <-)) (env (() () ())))\""
  137
  100
  24
  13
  100
  24
  124
  1
  1
  51
  #f
  111/20
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  app
  "\"'(eval (app or x1 (app not x2) (-> (app not x3) <-)) (env (())))\""
  137
  100
  24
  13
  100
  24
  124
  1
  1
  51
  #f
  111/20
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  app
  "\"'(eval (app f (-> (app #t) <-)) (env (())))\""
  137
  100
  24
  13
  100
  24
  124
  1
  1
  51
  #t
  111/20
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app or (-> x3 <-) x4) (env (())))\""
  137
  100
  24
  13
  100
  24
  124
  1
  1
  51
  #f
  111/20
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4 x5 x6 x7)\n    (->\n     (app\n      and\n      (app or x1 x2)\n      (app or x1 (app not x2) (app not x3))\n      (app or x3 x4)\n      (app or (app not x4) x1)\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env (())))\""
  137
  100
  24
  13
  100
  24
  124
  1
  1
  51
  #f
  111/20
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app display (-> s <-)) (env (())))\""
  137
  100
  24
  13
  100
  24
  124
  1
  1
  51
  #f
  111/20
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 (-> n4 <-) n5 n6 n7) (env (() () () () () () () ())))\""
  137
  100
  24
  13
  100
  24
  124
  1
  1
  51
  #f
  111/20
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env (())))\""
  137
  100
  24
  13
  100
  24
  124
  1
  1
  51
  #f
  111/20
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env (())))\""
  137
  100
  24
  13
  100
  24
  124
  1
  1
  51
  #f
  111/20
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env (())))\""
  137
  100
  24
  13
  100
  24
  124
  1
  1
  51
  #f
  111/20
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  15
  59
  app
  "\"'(eval\n  (let (... () (_ (-> (app display (app sat-solve-7 phi)) <-)) () ...) ...)\n  (env ()))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  53
  #t
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
