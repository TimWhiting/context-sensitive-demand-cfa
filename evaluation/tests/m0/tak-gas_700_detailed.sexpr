'(clean-cache
  tak
  0
  700
  41
  letrec*
  "'(eval ((top) letrec* (tak) ...) (env ()))"
  #f
  49
  43
  6
  0
  43
  6
  49
  1
  1
  19
  #f
  67/43
  (1 1 0))
'(clean-cache
  tak
  0
  700
  41
  lambda
  "'(eval (letrec* (... () (tak (-> (λ (x y z) ...) <-)) () ...) ...) (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  tak
  0
  700
  41
  match
  "'(eval (λ (x y z) (-> (match (app not (app < ...)) ...) <-)) (env (())))"
  #f
  46
  40
  6
  0
  40
  6
  46
  1
  1
  18
  #f
  31/20
  (1 1 0))
'(clean-cache
  tak
  0
  700
  41
  ref-or-constructor
  "'(eval (match (app not (app < y x)) (#f) (_ (-> z <-))) (env (())))"
  #f
  46
  40
  6
  0
  40
  6
  46
  1
  1
  18
  #f
  31/20
  (1 1 0))
'(clean-cache
  tak
  0
  700
  41
  app
  "'(eval\n  (match\n   (app not (app < y x))\n   ((#f)\n    (->\n     (app\n      tak\n      (app tak (app - ...) y z)\n      (app tak (app - ...) z x)\n      (app tak (app - ...) x y))\n     <-))\n   _)\n  (env (())))"
  #f
  46
  40
  6
  0
  40
  6
  46
  1
  1
  18
  #f
  31/20
  (1 1 0))
'(clean-cache
  tak
  0
  700
  41
  app
  "'(eval\n  (app\n   tak\n   (app tak (app - x 1) y z)\n   (app tak (app - y 1) z x)\n   (-> (app tak (app - z 1) x y) <-))\n  (env (())))"
  #f
  46
  40
  6
  0
  40
  6
  46
  1
  1
  18
  #f
  31/20
  (1 1 0))
'(clean-cache
  tak
  0
  700
  41
  ref-or-constructor
  "'(eval (app tak (app - z 1) x (-> y <-)) (env (())))"
  #f
  46
  40
  6
  0
  40
  6
  46
  1
  1
  18
  #f
  31/20
  (1 1 0))
'(clean-cache
  tak
  0
  700
  41
  ref-or-constructor
  "'(eval (app tak (app - z 1) (-> x <-) y) (env (())))"
  #f
  46
  40
  6
  0
  40
  6
  46
  1
  1
  18
  #f
  31/20
  (1 1 0))
'(clean-cache
  tak
  0
  700
  41
  app
  "'(eval (app tak (-> (app - z 1) <-) x y) (env (())))"
  #f
  46
  40
  6
  0
  40
  6
  46
  1
  1
  18
  #f
  31/20
  (1 1 0))
'(clean-cache
  tak
  0
  700
  41
  number
  "'(eval (app - z (-> 1 <-)) (env (())))"
  (number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  tak
  0
  700
  41
  ref-or-constructor
  "'(eval (app - (-> z <-) 1) (env (())))"
  #f
  46
  40
  6
  0
  40
  6
  46
  1
  1
  18
  #f
  31/20
  (1 1 0))
'(clean-cache
  tak
  0
  700
  41
  ref-or-constructor
  "'(eval (app (-> - <-) z 1) (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  tak
  0
  700
  41
  ref-or-constructor
  "'(eval (app (-> tak <-) (app - z 1) x y) (env (())))"
  (lambda number char string quoted constructor)
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  tak
  0
  700
  41
  app
  "'(eval\n  (app\n   tak\n   (app tak (app - x 1) y z)\n   (-> (app tak (app - y 1) z x) <-)\n   (app tak (app - z 1) x y))\n  (env (())))"
  #f
  46
  40
  6
  0
  40
  6
  46
  1
  1
  18
  #f
  31/20
  (1 1 0))
'(clean-cache
  tak
  0
  700
  41
  ref-or-constructor
  "'(eval (app tak (app - y 1) z (-> x <-)) (env (())))"
  #f
  46
  40
  6
  0
  40
  6
  46
  1
  1
  18
  #f
  31/20
  (1 1 0))
'(clean-cache
  tak
  0
  700
  41
  ref-or-constructor
  "'(eval (app tak (app - y 1) (-> z <-) x) (env (())))"
  #f
  46
  40
  6
  0
  40
  6
  46
  1
  1
  18
  #f
  31/20
  (1 1 0))
'(clean-cache
  tak
  0
  700
  41
  app
  "'(eval (app tak (-> (app - y 1) <-) z x) (env (())))"
  #f
  46
  40
  6
  0
  40
  6
  46
  1
  1
  18
  #f
  31/20
  (1 1 0))
'(clean-cache
  tak
  0
  700
  41
  number
  "'(eval (app - y (-> 1 <-)) (env (())))"
  (number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  tak
  0
  700
  41
  ref-or-constructor
  "'(eval (app - (-> y <-) 1) (env (())))"
  #f
  46
  40
  6
  0
  40
  6
  46
  1
  1
  18
  #f
  31/20
  (1 1 0))
'(clean-cache
  tak
  0
  700
  41
  ref-or-constructor
  "'(eval (app (-> - <-) y 1) (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  tak
  0
  700
  41
  ref-or-constructor
  "'(eval (app (-> tak <-) (app - y 1) z x) (env (())))"
  (lambda number char string quoted constructor)
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  tak
  0
  700
  41
  app
  "'(eval\n  (app\n   tak\n   (-> (app tak (app - x 1) y z) <-)\n   (app tak (app - y 1) z x)\n   (app tak (app - z 1) x y))\n  (env (())))"
  #f
  46
  40
  6
  0
  40
  6
  46
  1
  1
  18
  #f
  31/20
  (1 1 0))
'(clean-cache
  tak
  0
  700
  41
  ref-or-constructor
  "'(eval (app tak (app - x 1) y (-> z <-)) (env (())))"
  #f
  46
  40
  6
  0
  40
  6
  46
  1
  1
  18
  #f
  31/20
  (1 1 0))
'(clean-cache
  tak
  0
  700
  41
  ref-or-constructor
  "'(eval (app tak (app - x 1) (-> y <-) z) (env (())))"
  #f
  46
  40
  6
  0
  40
  6
  46
  1
  1
  18
  #f
  31/20
  (1 1 0))
'(clean-cache
  tak
  0
  700
  41
  app
  "'(eval (app tak (-> (app - x 1) <-) y z) (env (())))"
  #f
  46
  40
  6
  0
  40
  6
  46
  1
  1
  18
  #f
  31/20
  (1 1 0))
'(clean-cache
  tak
  0
  700
  41
  number
  "'(eval (app - x (-> 1 <-)) (env (())))"
  (number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  tak
  0
  700
  41
  ref-or-constructor
  "'(eval (app - (-> x <-) 1) (env (())))"
  #f
  46
  40
  6
  0
  40
  6
  46
  1
  1
  18
  #f
  31/20
  (1 1 0))
'(clean-cache
  tak
  0
  700
  41
  ref-or-constructor
  "'(eval (app (-> - <-) x 1) (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  tak
  0
  700
  41
  ref-or-constructor
  "'(eval (app (-> tak <-) (app - x 1) y z) (env (())))"
  (lambda number char string quoted constructor)
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  tak
  0
  700
  41
  ref-or-constructor
  "'(eval\n  (app\n   (-> tak <-)\n   (app tak (app - x 1) y z)\n   (app tak (app - y 1) z x)\n   (app tak (app - z 1) x y))\n  (env (())))"
  (lambda number char string quoted constructor)
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  tak
  0
  700
  41
  app
  "'(eval (match (-> (app not (app < y x)) <-) (#f) _) (env (())))"
  #f
  46
  40
  6
  0
  40
  6
  46
  1
  1
  18
  #f
  31/20
  (1 1 0))
'(clean-cache
  tak
  0
  700
  41
  app
  "'(eval (app not (-> (app < y x) <-)) (env (())))"
  #f
  46
  40
  6
  0
  40
  6
  46
  1
  1
  18
  #f
  31/20
  (1 1 0))
'(clean-cache
  tak
  0
  700
  41
  ref-or-constructor
  "'(eval (app < y (-> x <-)) (env (())))"
  #f
  46
  40
  6
  0
  40
  6
  46
  1
  1
  18
  #f
  31/20
  (1 1 0))
'(clean-cache
  tak
  0
  700
  41
  ref-or-constructor
  "'(eval (app < (-> y <-) x) (env (())))"
  #f
  46
  40
  6
  0
  40
  6
  46
  1
  1
  18
  #f
  31/20
  (1 1 0))
'(clean-cache
  tak
  0
  700
  41
  ref-or-constructor
  "'(eval (app (-> < <-) y x) (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  tak
  0
  700
  41
  ref-or-constructor
  "'(eval (app (-> not <-) (app < y x)) (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  tak
  0
  700
  41
  app
  "'(eval (letrec* (tak) (-> (app tak 32 15 8) <-)) (env ()))"
  #f
  48
  42
  6
  0
  42
  6
  48
  1
  1
  19
  #f
  65/42
  (1 1 0))
'(clean-cache
  tak
  0
  700
  41
  number
  "'(eval (app tak 32 15 (-> 8 <-)) (env ()))"
  (number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  tak
  0
  700
  41
  number
  "'(eval (app tak 32 (-> 15 <-) 8) (env ()))"
  (number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  tak
  0
  700
  41
  number
  "'(eval (app tak (-> 32 <-) 15 8) (env ()))"
  (number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  tak
  0
  700
  41
  ref-or-constructor
  "'(eval (app (-> tak <-) 32 15 8) (env ()))"
  (lambda number char string quoted constructor)
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
