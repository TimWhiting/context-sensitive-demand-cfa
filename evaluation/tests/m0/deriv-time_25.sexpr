'(clean-cache
  deriv
  0
  130
  lettypes
  "\"'(eval ((top) lettypes (cons ... nil) ...) (env ()))\""
  #f)
'(clean-cache
  deriv
  0
  130
  letrec*
  "\"'(eval (lettypes cons ... nil (letrec* (car ... deriv) ...)) (env ()))\""
  #f)
'(clean-cache
  deriv
  0
  130
  match
  "\"'(eval (λ (a) (-> (match (app not (app pair? a)) ...) <-)) (env (())))\""
  #f)
'(clean-cache
  deriv
  0
  25
  130
  match
  "\"'(eval\n  (match (app not (app pair? a)) (#f) (_ (-> (match (app eq? a 'x) ...) <-)))\n  (env (())))\""
  156
  114
  37
  5
  114
  37
  151
  1
  1
  76
  #f
  329/57
  ((20 20 0) (20 20 0) (20 20 0)))
'(clean-cache
  deriv
  0
  25
  130
  app
  "\"'(eval (match (-> (app eq? a 'x) <-) (#f) _) (env (())))\""
  153
  111
  37
  5
  111
  37
  148
  1
  1
  74
  #f
  218/37
  ((41/2 41/2 0) (41/2 41/2 0) (20 20 0)))
'(clean-cache
  deriv
  0
  25
  130
  ref-or-constructor
  "\"'(eval (app eq? (-> a <-) 'x) (env (())))\""
  150
  108
  37
  5
  108
  37
  145
  1
  1
  72
  #f
  325/54
  ((20 20 0) (20 20 0) (41/2 41/2 0)))
'(clean-cache
  deriv
  0
  25
  130
  match
  "\"'(eval\n  (match\n   (app not (app pair? a))\n   ((#f) (-> (match (app eq? (app car a) '+) ...) <-))\n   _)\n  (env (())))\""
  183
  141
  37
  5
  141
  37
  178
  1
  1
  94
  #f
  247/47
  ((22 22 0) (22 22 0) (45/2 45/2 0)))
'(clean-cache
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (match\n   (app eq? (app car a) '+)\n   (#f)\n   (_ (-> (app cons '+ (app map deriv (app cdr a))) <-)))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  deriv
  0
  25
  130
  app
  "\"'(eval (app cons '+ (-> (app map deriv (app cdr a)) <-)) (env (())))\""
  156
  113
  37
  6
  113
  37
  150
  1
  1
  76
  #f
  641/113
  ((21 21 0) (21 21 0) (43/2 43/2 0)))
'(clean-cache
  deriv
  0
  25
  130
  app
  "\"'(eval (app map deriv (-> (app cdr a) <-)) (env (())))\""
  149
  107
  37
  5
  107
  37
  144
  1
  1
  72
  #f
  633/107
  ((20 20 0) (20 20 0) (20 20 0)))
'(clean-cache
  deriv
  0
  25
  130
  ref-or-constructor
  "\"'(eval (app cdr (-> a <-)) (env (())))\""
  149
  107
  37
  5
  107
  37
  144
  1
  1
  72
  #f
  633/107
  ((39/2 39/2 0) (20 20 0) (20 20 0)))
'(clean-cache
  deriv
  0
  25
  130
  match
  "\"'(eval\n  (match\n   (app eq? (app car a) '+)\n   ((#f) (-> (match (app eq? (app car a) '-) ...) <-))\n   _)\n  (env (())))\""
  175
  133
  37
  5
  133
  37
  170
  1
  1
  89
  #f
  713/133
  ((22 22 0) (21 21 0) (21 21 0)))
'(clean-cache
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (match\n   (app eq? (app car a) '-)\n   (#f)\n   (_ (-> (app cons '- (app map deriv (app cdr a))) <-)))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  deriv
  0
  25
  130
  app
  "\"'(eval (app cons '- (-> (app map deriv (app cdr a)) <-)) (env (())))\""
  156
  113
  37
  6
  113
  37
  150
  1
  1
  76
  #f
  641/113
  ((21 21 0) (21 21 0) (21 21 0)))
'(clean-cache
  deriv
  0
  25
  130
  app
  "\"'(eval (app map deriv (-> (app cdr a) <-)) (env (())))\""
  149
  107
  37
  5
  107
  37
  144
  1
  1
  72
  #f
  633/107
  ((39/2 39/2 0) (39/2 39/2 0) (39/2 39/2 0)))
'(clean-cache
  deriv
  0
  25
  130
  ref-or-constructor
  "\"'(eval (app cdr (-> a <-)) (env (())))\""
  149
  107
  37
  5
  107
  37
  144
  1
  1
  72
  #f
  633/107
  ((39/2 39/2 0) (39/2 39/2 0) (39/2 39/2 0)))
'(clean-cache
  deriv
  0
  25
  130
  match
  "\"'(eval\n  (match\n   (app eq? (app car a) '-)\n   ((#f) (-> (match (app eq? (app car a) '*) ...) <-))\n   _)\n  (env (())))\""
  167
  125
  37
  5
  125
  37
  162
  1
  1
  84
  #f
  686/125
  ((41/2 41/2 0) (41/2 41/2 0) (21 21 0)))
'(clean-cache
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (match\n   (app eq? (app car a) '*)\n   (#f)\n   (_\n    (->\n     (app\n      cons\n      '*\n      (app\n       cons\n       a\n       (app cons (app cons '+ (app map (λ (a) ...) (app cdr a))) (app nil))))\n     <-)))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (app\n   cons\n   '*\n   (->\n    (app\n     cons\n     a\n     (app cons (app cons '+ (app map (λ (a) ...) (app cdr a))) (app nil)))\n    <-))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (app\n   cons\n   a\n   (->\n    (app cons (app cons '+ (app map (λ (a) ...) (app cdr a))) (app nil))\n    <-))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (app cons (app cons '+ (app map (λ (a) ...) (app cdr a))) (-> (app nil) <-))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (app cons (-> (app cons '+ (app map (λ (a) ...) (app cdr a))) <-) (app nil))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  deriv
  0
  25
  130
  app
  "\"'(eval (app cons '+ (-> (app map (λ (a) ...) (app cdr a)) <-)) (env (())))\""
  156
  113
  37
  6
  113
  37
  150
  1
  1
  76
  #f
  641/113
  ((43/2 43/2 0) (21 21 0) (21 21 0)))
'(clean-cache
  deriv
  0
  25
  130
  app
  "\"'(eval (app map (λ (a) ...) (-> (app cdr a) <-)) (env (())))\""
  149
  107
  37
  5
  107
  37
  144
  1
  1
  72
  #f
  633/107
  ((20 20 0) (20 20 0) (41/2 41/2 0)))
'(clean-cache
  deriv
  0
  25
  130
  ref-or-constructor
  "\"'(eval (app cdr (-> a <-)) (env (())))\""
  149
  107
  37
  5
  107
  37
  144
  1
  1
  72
  #f
  633/107
  ((39/2 39/2 0) (20 20 0) (20 20 0)))
'(clean-cache
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (λ (a) (-> (app cons '/ (app cons (app deriv a) (app cons a (app nil)))) <-))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (app cons '/ (-> (app cons (app deriv a) (app cons a (app nil))) <-))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  deriv
  0
  25
  130
  app
  "\"'(eval (app cons (app deriv a) (-> (app cons a (app nil)) <-)) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  deriv
  0
  25
  130
  app
  "\"'(eval (app cons a (-> (app nil) <-)) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  deriv
  0
  25
  130
  ref-or-constructor
  "\"'(eval (app cons (-> a <-) (app nil)) (env (() ())))\""
  150
  108
  37
  5
  108
  37
  145
  1
  1
  72
  #f
  215/36
  ((41/2 41/2 0) (20 20 0) (41/2 41/2 0)))
'(clean-cache
  deriv
  0
  130
  app
  "\"'(eval (app cons (-> (app deriv a) <-) (app cons a (app nil))) (env (() ())))\""
  #f)
'(clean-cache
  deriv
  0
  25
  130
  ref-or-constructor
  "\"'(eval (app deriv (-> a <-)) (env (() ())))\""
  149
  107
  37
  5
  107
  37
  144
  1
  1
  72
  #f
  633/107
  ((20 20 0) (20 20 0) (20 20 0)))
'(clean-cache
  deriv
  0
  25
  130
  ref-or-constructor
  "\"'(eval\n  (app\n   cons\n   (-> a <-)\n   (app cons (app cons '+ (app map (λ (a) ...) (app cdr a))) (app nil)))\n  (env (())))\""
  150
  108
  37
  5
  108
  37
  145
  1
  1
  72
  #f
  325/54
  ((20 20 0) (20 20 0) (20 20 0)))
'(clean-cache
  deriv
  0
  25
  130
  match
  "\"'(eval\n  (match\n   (app eq? (app car a) '*)\n   ((#f) (-> (match (app eq? (app car a) '/) ...) <-))\n   _)\n  (env (())))\""
  159
  117
  37
  5
  117
  37
  154
  1
  1
  79
  #f
  220/39
  ((41/2 41/2 0) (20 20 0) (20 20 0)))
'(clean-cache
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (match\n   (app eq? (app car a) '/)\n   (#f)\n   (_\n    (->\n     (app\n      cons\n      '-\n      (app\n       cons\n       (app\n        cons\n        '/\n        (app cons (app deriv (app cadr a)) (app cons (app caddr a) (app nil))))\n       (app\n        cons\n        (app\n         cons\n         '/\n         (app\n          cons\n          (app cadr a)\n          (app\n           cons\n           (app\n            cons\n            '*\n            (app\n             cons\n             (app caddr a)\n             (app\n              cons\n              (app caddr a)\n              (app cons (app deriv (app caddr a)) (app nil)))))\n           (app nil))))\n        (app nil))))\n     <-)))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (app\n   cons\n   '-\n   (->\n    (app\n     cons\n     (app\n      cons\n      '/\n      (app cons (app deriv (app cadr a)) (app cons (app caddr a) (app nil))))\n     (app\n      cons\n      (app\n       cons\n       '/\n       (app\n        cons\n        (app cadr a)\n        (app\n         cons\n         (app\n          cons\n          '*\n          (app\n           cons\n           (app caddr a)\n           (app\n            cons\n            (app caddr a)\n            (app cons (app deriv (app caddr a)) (app nil)))))\n         (app nil))))\n      (app nil)))\n    <-))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (app\n   cons\n   (app\n    cons\n    '/\n    (app cons (app deriv (app cadr a)) (app cons (app caddr a) (app nil))))\n   (->\n    (app\n     cons\n     (app\n      cons\n      '/\n      (app\n       cons\n       (app cadr a)\n       (app\n        cons\n        (app\n         cons\n         '*\n         (app\n          cons\n          (app caddr a)\n          (app\n           cons\n           (app caddr a)\n           (app cons (app deriv (app caddr a)) (app nil)))))\n        (app nil))))\n     (app nil))\n    <-))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (app\n   cons\n   (app\n    cons\n    '/\n    (app\n     cons\n     (app cadr a)\n     (app\n      cons\n      (app\n       cons\n       '*\n       (app\n        cons\n        (app caddr a)\n        (app\n         cons\n         (app caddr a)\n         (app cons (app deriv (app caddr a)) (app nil)))))\n      (app nil))))\n   (-> (app nil) <-))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (app\n   cons\n   (->\n    (app\n     cons\n     '/\n     (app\n      cons\n      (app cadr a)\n      (app\n       cons\n       (app\n        cons\n        '*\n        (app\n         cons\n         (app caddr a)\n         (app\n          cons\n          (app caddr a)\n          (app cons (app deriv (app caddr a)) (app nil)))))\n       (app nil))))\n    <-)\n   (app nil))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (app\n   cons\n   '/\n   (->\n    (app\n     cons\n     (app cadr a)\n     (app\n      cons\n      (app\n       cons\n       '*\n       (app\n        cons\n        (app caddr a)\n        (app\n         cons\n         (app caddr a)\n         (app cons (app deriv (app caddr a)) (app nil)))))\n      (app nil)))\n    <-))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (app\n   cons\n   (app cadr a)\n   (->\n    (app\n     cons\n     (app\n      cons\n      '*\n      (app\n       cons\n       (app caddr a)\n       (app\n        cons\n        (app caddr a)\n        (app cons (app deriv (app caddr a)) (app nil)))))\n     (app nil))\n    <-))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (app\n   cons\n   (app\n    cons\n    '*\n    (app\n     cons\n     (app caddr a)\n     (app cons (app caddr a) (app cons (app deriv (app caddr a)) (app nil)))))\n   (-> (app nil) <-))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (app\n   cons\n   (->\n    (app\n     cons\n     '*\n     (app\n      cons\n      (app caddr a)\n      (app cons (app caddr a) (app cons (app deriv (app caddr a)) (app nil)))))\n    <-)\n   (app nil))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (app\n   cons\n   '*\n   (->\n    (app\n     cons\n     (app caddr a)\n     (app cons (app caddr a) (app cons (app deriv (app caddr a)) (app nil))))\n    <-))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (app\n   cons\n   (app caddr a)\n   (->\n    (app cons (app caddr a) (app cons (app deriv (app caddr a)) (app nil)))\n    <-))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (app\n   cons\n   (app caddr a)\n   (-> (app cons (app deriv (app caddr a)) (app nil)) <-))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  deriv
  0
  25
  130
  app
  "\"'(eval (app cons (app deriv (app caddr a)) (-> (app nil) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  deriv
  0
  130
  app
  "\"'(eval (app cons (-> (app deriv (app caddr a)) <-) (app nil)) (env (())))\""
  #f)
'(clean-cache
  deriv
  0
  25
  130
  app
  "\"'(eval (app deriv (-> (app caddr a) <-)) (env (())))\""
  149
  107
  37
  5
  107
  37
  144
  1
  1
  72
  #f
  633/107
  ((20 20 0) (39/2 39/2 0) (20 39/2 0)))
'(clean-cache
  deriv
  0
  25
  130
  ref-or-constructor
  "\"'(eval (app caddr (-> a <-)) (env (())))\""
  149
  107
  37
  5
  107
  37
  144
  1
  1
  72
  #f
  633/107
  ((39/2 39/2 0) (39/2 39/2 0) (19 19 0)))
'(clean-cache
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (app\n   cons\n   (-> (app caddr a) <-)\n   (app cons (app deriv (app caddr a)) (app nil)))\n  (env (())))\""
  151
  109
  37
  5
  109
  37
  146
  1
  1
  73
  #f
  650/109
  ((20 20 0) (20 20 0) (39/2 39/2 0)))
'(clean-cache
  deriv
  0
  25
  130
  ref-or-constructor
  "\"'(eval (app caddr (-> a <-)) (env (())))\""
  149
  107
  37
  5
  107
  37
  144
  1
  1
  72
  #f
  633/107
  ((20 20 0) (39/2 39/2 0) (20 20 0)))
'(clean-cache
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (app\n   cons\n   (-> (app caddr a) <-)\n   (app cons (app caddr a) (app cons (app deriv (app caddr a)) (app nil))))\n  (env (())))\""
  151
  109
  37
  5
  109
  37
  146
  1
  1
  73
  #f
  650/109
  ((39/2 39/2 0) (39/2 39/2 0) (20 20 0)))
'(clean-cache
  deriv
  0
  25
  130
  ref-or-constructor
  "\"'(eval (app caddr (-> a <-)) (env (())))\""
  149
  107
  37
  5
  107
  37
  144
  1
  1
  72
  #f
  633/107
  ((20 20 0) (20 20 0) (20 39/2 0)))
'(clean-cache
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (app\n   cons\n   (-> (app cadr a) <-)\n   (app\n    cons\n    (app\n     cons\n     '*\n     (app\n      cons\n      (app caddr a)\n      (app cons (app caddr a) (app cons (app deriv (app caddr a)) (app nil)))))\n    (app nil)))\n  (env (())))\""
  151
  109
  37
  5
  109
  37
  146
  1
  1
  73
  #f
  650/109
  ((20 20 0) (20 20 0) (20 20 0)))
'(clean-cache
  deriv
  0
  25
  130
  ref-or-constructor
  "\"'(eval (app cadr (-> a <-)) (env (())))\""
  149
  107
  37
  5
  107
  37
  144
  1
  1
  72
  #f
  633/107
  ((39/2 39/2 0) (39/2 39/2 0) (20 20 0)))
'(clean-cache
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (app\n   cons\n   (->\n    (app\n     cons\n     '/\n     (app cons (app deriv (app cadr a)) (app cons (app caddr a) (app nil))))\n    <-)\n   (app\n    cons\n    (app\n     cons\n     '/\n     (app\n      cons\n      (app cadr a)\n      (app\n       cons\n       (app\n        cons\n        '*\n        (app\n         cons\n         (app caddr a)\n         (app\n          cons\n          (app caddr a)\n          (app cons (app deriv (app caddr a)) (app nil)))))\n       (app nil))))\n    (app nil)))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (app\n   cons\n   '/\n   (->\n    (app cons (app deriv (app cadr a)) (app cons (app caddr a) (app nil)))\n    <-))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (app\n   cons\n   (app deriv (app cadr a))\n   (-> (app cons (app caddr a) (app nil)) <-))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  deriv
  0
  25
  130
  app
  "\"'(eval (app cons (app caddr a) (-> (app nil) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  deriv
  0
  25
  130
  app
  "\"'(eval (app cons (-> (app caddr a) <-) (app nil)) (env (())))\""
  151
  109
  37
  5
  109
  37
  146
  1
  1
  73
  #f
  650/109
  ((20 20 0) (20 20 0) (41/2 41/2 0)))
'(clean-cache
  deriv
  0
  25
  130
  ref-or-constructor
  "\"'(eval (app caddr (-> a <-)) (env (())))\""
  149
  107
  37
  5
  107
  37
  144
  1
  1
  72
  #f
  633/107
  ((39/2 39/2 0) (39/2 39/2 0) (39/2 39/2 0)))
'(clean-cache
  deriv
  0
  130
  app
  "\"'(eval\n  (app\n   cons\n   (-> (app deriv (app cadr a)) <-)\n   (app cons (app caddr a) (app nil)))\n  (env (())))\""
  #f)
'(clean-cache
  deriv
  0
  25
  130
  app
  "\"'(eval (app deriv (-> (app cadr a) <-)) (env (())))\""
  149
  107
  37
  5
  107
  37
  144
  1
  1
  72
  #f
  633/107
  ((39/2 39/2 0) (20 20 0) (39/2 39/2 0)))
'(clean-cache
  deriv
  0
  25
  130
  ref-or-constructor
  "\"'(eval (app cadr (-> a <-)) (env (())))\""
  149
  107
  37
  5
  107
  37
  144
  1
  1
  72
  #f
  633/107
  ((39/2 39/2 0) (39/2 39/2 0) (39/2 39/2 0)))
'(clean-cache
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (match\n   (app eq? (app car a) '/)\n   ((#f) (-> (app error (app #f) \"No derivation method available\") <-))\n   _)\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (app error (-> (app #f) <-) \"No derivation method available\")\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  deriv
  0
  25
  130
  app
  "\"'(eval (match (-> (app eq? (app car a) '/) <-) (#f) _) (env (())))\""
  154
  112
  37
  5
  112
  37
  149
  1
  1
  75
  #f
  327/56
  ((21 21 0) (20 20 0) (41/2 41/2 0)))
'(clean-cache
  deriv
  0
  25
  130
  app
  "\"'(eval (app eq? (-> (app car a) <-) '/) (env (())))\""
  151
  109
  37
  5
  109
  37
  146
  1
  1
  73
  #f
  650/109
  ((20 20 0) (20 20 0) (21 21 0)))
'(clean-cache
  deriv
  0
  25
  130
  ref-or-constructor
  "\"'(eval (app car (-> a <-)) (env (())))\""
  149
  107
  37
  5
  107
  37
  144
  1
  1
  72
  #f
  633/107
  ((39/2 39/2 0) (39/2 39/2 0) (39/2 39/2 0)))
'(clean-cache
  deriv
  0
  25
  130
  app
  "\"'(eval (match (-> (app eq? (app car a) '*) <-) (#f) _) (env (())))\""
  154
  112
  37
  5
  112
  37
  149
  1
  1
  75
  #f
  327/56
  ((20 20 0) (20 20 0) (20 20 0)))
'(clean-cache
  deriv
  0
  25
  130
  app
  "\"'(eval (app eq? (-> (app car a) <-) '*) (env (())))\""
  151
  109
  37
  5
  109
  37
  146
  1
  1
  73
  #f
  650/109
  ((20 20 0) (20 20 0) (39/2 39/2 0)))
'(clean-cache
  deriv
  0
  25
  130
  ref-or-constructor
  "\"'(eval (app car (-> a <-)) (env (())))\""
  149
  107
  37
  5
  107
  37
  144
  1
  1
  72
  #f
  633/107
  ((39/2 39/2 0) (20 20 0) (39/2 39/2 0)))
'(clean-cache
  deriv
  0
  25
  130
  app
  "\"'(eval (match (-> (app eq? (app car a) '-) <-) (#f) _) (env (())))\""
  154
  112
  37
  5
  112
  37
  149
  1
  1
  75
  #f
  327/56
  ((20 20 0) (21 21 0) (41/2 41/2 0)))
'(clean-cache
  deriv
  0
  25
  130
  app
  "\"'(eval (app eq? (-> (app car a) <-) '-) (env (())))\""
  151
  109
  37
  5
  109
  37
  146
  1
  1
  73
  #f
  650/109
  ((20 20 0) (41/2 41/2 0) (41/2 41/2 0)))
'(clean-cache
  deriv
  0
  25
  130
  ref-or-constructor
  "\"'(eval (app car (-> a <-)) (env (())))\""
  149
  107
  37
  5
  107
  37
  144
  1
  1
  72
  #f
  633/107
  ((41/2 41/2 0) (20 20 0) (41/2 41/2 0)))
'(clean-cache
  deriv
  0
  25
  130
  app
  "\"'(eval (match (-> (app eq? (app car a) '+) <-) (#f) _) (env (())))\""
  154
  112
  37
  5
  112
  37
  149
  1
  1
  75
  #f
  327/56
  ((41/2 41/2 0) (41/2 41/2 0) (21 21 0)))
'(clean-cache
  deriv
  0
  25
  130
  app
  "\"'(eval (app eq? (-> (app car a) <-) '+) (env (())))\""
  151
  109
  37
  5
  109
  37
  146
  1
  1
  73
  #f
  650/109
  ((41/2 41/2 0) (41/2 41/2 0) (41/2 41/2 0)))
'(clean-cache
  deriv
  0
  25
  130
  ref-or-constructor
  "\"'(eval (app car (-> a <-)) (env (())))\""
  149
  107
  37
  5
  107
  37
  144
  1
  1
  72
  #f
  633/107
  ((20 20 0) (20 20 0) (20 20 0)))
'(clean-cache
  deriv
  0
  25
  130
  app
  "\"'(eval (match (-> (app not (app pair? a)) <-) (#f) _) (env (())))\""
  166
  121
  39
  6
  121
  39
  160
  1
  1
  81
  #f
  62/11
  ((23 23 0) (23 23 0) (23 23 0)))
'(clean-cache
  deriv
  0
  25
  130
  app
  "\"'(eval (app not (-> (app pair? a) <-)) (env (())))\""
  162
  117
  39
  6
  117
  39
  156
  1
  1
  78
  #f
  677/117
  ((47/2 47/2 0) (47/2 47/2 0) (23 23 0)))
'(clean-cache
  deriv
  0
  25
  130
  ref-or-constructor
  "\"'(eval (app pair? (-> a <-)) (env (())))\""
  150
  108
  37
  5
  108
  37
  145
  1
  1
  72
  #f
  325/54
  ((41/2 41/2 0) (21 41/2 0) (41/2 41/2 0)))
'(clean-cache
  deriv
  0
  25
  130
  match
  "\"'(eval (λ (pair?-v) (-> (match pair?-v ...) <-)) (env (())))\""
  158
  114
  39
  5
  114
  39
  153
  1
  1
  76
  #f
  673/114
  ((47/2 47/2 0) (47/2 47/2 0) (47/2 47/2 0)))
'(clean-cache
  deriv
  0
  25
  130
  app
  "\"'(eval (match pair?-v (cons pair?-c pair?-d) (_ (-> (app #f) <-))) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  deriv
  0
  25
  130
  app
  "\"'(eval (match pair?-v ((cons pair?-c pair?-d) (-> (app #t) <-)) _) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  deriv
  0
  25
  130
  ref-or-constructor
  "\"'(eval (match (-> pair?-v <-) (cons pair?-c pair?-d) _) (env (())))\""
  153
  109
  39
  5
  109
  39
  148
  1
  1
  72
  #f
  667/109
  ((39/2 39/2 0) (39/2 39/2 0) (21 21 0)))
'(clean-cache
  deriv
  0
  25
  130
  match
  "\"'(eval (λ (map-f map-l) (-> (match map-l ...) <-)) (env (())))\""
  154
  112
  37
  5
  112
  37
  149
  1
  1
  76
  #f
  639/112
  ((21 21 0) (43/2 43/2 0) (43/2 43/2 0)))
'(clean-cache
  deriv
  0
  25
  130
  app
  "\"'(eval (match map-l (cons map-c map-d) ((nil) (-> (app nil) <-))) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (match\n   map-l\n   ((cons map-c map-d)\n    (-> (app cons (app map-f map-c) (app map map-f map-d)) <-))\n   (nil))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  deriv
  0
  25
  130
  app
  "\"'(eval (app cons (app map-f map-c) (-> (app map map-f map-d) <-)) (env (())))\""
  156
  113
  37
  6
  113
  37
  150
  1
  1
  76
  #f
  641/113
  ((21 21 0) (43/2 43/2 0) (21 21 0)))
'(clean-cache
  deriv
  0
  25
  130
  ref-or-constructor
  "\"'(eval (app map map-f (-> map-d <-)) (env (())))\""
  149
  107
  37
  5
  107
  37
  144
  1
  1
  72
  #f
  633/107
  ((39/2 39/2 0) (39/2 39/2 0) (20 20 0)))
'(clean-cache
  deriv
  0
  25
  130
  ref-or-constructor
  "\"'(eval (app map (-> map-f <-) map-d) (env (())))\""
  10
  5
  5
  0
  5
  5
  10
  1
  1
  4
  #f
  6/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  deriv
  0
  130
  app
  "\"'(eval (app cons (-> (app map-f map-c) <-) (app map map-f map-d)) (env (())))\""
  #f)
'(clean-cache
  deriv
  0
  25
  130
  ref-or-constructor
  "\"'(eval (app map-f (-> map-c <-)) (env (())))\""
  149
  107
  37
  5
  107
  37
  144
  1
  1
  72
  #f
  633/107
  ((20 20 0) (20 20 0) (39/2 39/2 0)))
'(clean-cache
  deriv
  0
  25
  130
  ref-or-constructor
  "\"'(eval (app (-> map-f <-) map-c) (env (())))\""
  11
  6
  5
  0
  6
  5
  11
  1
  1
  4
  #f
  4/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  deriv
  0
  25
  130
  ref-or-constructor
  "\"'(eval (match (-> map-l <-) (cons map-c map-d) (nil)) (env (())))\""
  149
  107
  37
  5
  107
  37
  144
  1
  1
  72
  #f
  633/107
  ((39/2 39/2 0) (39/2 39/2 0) (39/2 39/2 0)))
'(clean-cache
  deriv
  0
  25
  130
  app
  "\"'(eval (λ (cadr-v) (-> (app car (app cdr (app cdr cadr-v))) <-)) (env (())))\""
  149
  107
  37
  5
  107
  37
  144
  1
  1
  72
  #f
  633/107
  ((39/2 39/2 0) (39/2 39/2 0) (39/2 39/2 0)))
'(clean-cache
  deriv
  0
  25
  130
  app
  "\"'(eval (app car (-> (app cdr (app cdr cadr-v)) <-)) (env (())))\""
  149
  107
  37
  5
  107
  37
  144
  1
  1
  72
  #f
  633/107
  ((20 20 0) (39/2 39/2 0) (39/2 39/2 0)))
'(clean-cache
  deriv
  0
  25
  130
  app
  "\"'(eval (app cdr (-> (app cdr cadr-v) <-)) (env (())))\""
  149
  107
  37
  5
  107
  37
  144
  1
  1
  72
  #f
  633/107
  ((39/2 39/2 0) (20 20 0) (39/2 39/2 0)))
'(clean-cache
  deriv
  0
  25
  130
  ref-or-constructor
  "\"'(eval (app cdr (-> cadr-v <-)) (env (())))\""
  149
  107
  37
  5
  107
  37
  144
  1
  1
  72
  #f
  633/107
  ((20 20 0) (20 20 0) (39/2 39/2 0)))
'(clean-cache
  deriv
  0
  25
  130
  app
  "\"'(eval (λ (cadr-v) (-> (app car (app cdr cadr-v)) <-)) (env (())))\""
  149
  107
  37
  5
  107
  37
  144
  1
  1
  72
  #f
  633/107
  ((20 20 0) (20 20 0) (20 20 0)))
'(clean-cache
  deriv
  0
  25
  130
  app
  "\"'(eval (app car (-> (app cdr cadr-v) <-)) (env (())))\""
  149
  107
  37
  5
  107
  37
  144
  1
  1
  72
  #f
  633/107
  ((41/2 41/2 0) (20 20 0) (20 20 0)))
'(clean-cache
  deriv
  0
  25
  130
  ref-or-constructor
  "\"'(eval (app cdr (-> cadr-v <-)) (env (())))\""
  149
  107
  37
  5
  107
  37
  144
  1
  1
  72
  #f
  633/107
  ((20 20 0) (39/2 39/2 0) (20 20 0)))
'(clean-cache
  deriv
  0
  25
  130
  match
  "\"'(eval (λ (cdr-v) (-> (match cdr-v ...) <-)) (env (())))\""
  149
  107
  37
  5
  107
  37
  144
  1
  1
  72
  #f
  633/107
  ((20 20 0) (20 20 0) (20 20 0)))
'(clean-cache
  deriv
  0
  25
  130
  ref-or-constructor
  "\"'(eval (match cdr-v ((cons cdr-c cdr-d) (-> cdr-d <-))) (env (())))\""
  149
  107
  37
  5
  107
  37
  144
  1
  1
  72
  #f
  633/107
  ((20 20 0) (20 20 0) (20 20 0)))
'(clean-cache
  deriv
  0
  25
  130
  ref-or-constructor
  "\"'(eval (match (-> cdr-v <-) (cons cdr-c cdr-d)) (env (())))\""
  149
  107
  37
  5
  107
  37
  144
  1
  1
  72
  #f
  633/107
  ((41/2 41/2 0) (39/2 39/2 0) (39/2 39/2 0)))
'(clean-cache
  deriv
  0
  25
  130
  match
  "\"'(eval (λ (car-v) (-> (match car-v ...) <-)) (env (())))\""
  149
  107
  37
  5
  107
  37
  144
  1
  1
  72
  #f
  633/107
  ((20 20 0) (20 20 0) (41/2 41/2 0)))
'(clean-cache
  deriv
  0
  25
  130
  ref-or-constructor
  "\"'(eval (match car-v ((cons car-c car-d) (-> car-c <-))) (env (())))\""
  149
  107
  37
  5
  107
  37
  144
  1
  1
  72
  #f
  633/107
  ((20 20 0) (20 20 0) (20 20 0)))
'(clean-cache
  deriv
  0
  25
  130
  ref-or-constructor
  "\"'(eval (match (-> car-v <-) (cons car-c car-d)) (env (())))\""
  149
  107
  37
  5
  107
  37
  144
  1
  1
  72
  #f
  633/107
  ((41/2 41/2 0) (20 20 0) (20 20 0)))
'(clean-cache
  deriv
  0
  130
  app
  "\"'(eval\n  (letrec*\n   (car ... deriv)\n   (->\n    (app\n     deriv\n     (app\n      cons\n      '+\n      (app\n       cons\n       (app cons '* (app cons 3 (app cons 'x (app cons 'x (app nil)))))\n       (app\n        cons\n        (app cons '* (app cons 'a (app cons 'x (app cons 'x (app nil)))))\n        (app\n         cons\n         (app cons '* (app cons 'b (app cons 'x (app nil))))\n         (app cons 5 (app nil)))))))\n    <-))\n  (env ()))\""
  #f)
'(clean-cache
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (app\n   deriv\n   (->\n    (app\n     cons\n     '+\n     (app\n      cons\n      (app cons '* (app cons 3 (app cons 'x (app cons 'x (app nil)))))\n      (app\n       cons\n       (app cons '* (app cons 'a (app cons 'x (app cons 'x (app nil)))))\n       (app\n        cons\n        (app cons '* (app cons 'b (app cons 'x (app nil))))\n        (app cons 5 (app nil))))))\n    <-))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (app\n   cons\n   '+\n   (->\n    (app\n     cons\n     (app cons '* (app cons 3 (app cons 'x (app cons 'x (app nil)))))\n     (app\n      cons\n      (app cons '* (app cons 'a (app cons 'x (app cons 'x (app nil)))))\n      (app\n       cons\n       (app cons '* (app cons 'b (app cons 'x (app nil))))\n       (app cons 5 (app nil)))))\n    <-))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (app\n   cons\n   (app cons '* (app cons 3 (app cons 'x (app cons 'x (app nil)))))\n   (->\n    (app\n     cons\n     (app cons '* (app cons 'a (app cons 'x (app cons 'x (app nil)))))\n     (app\n      cons\n      (app cons '* (app cons 'b (app cons 'x (app nil))))\n      (app cons 5 (app nil))))\n    <-))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (app\n   cons\n   (app cons '* (app cons 'a (app cons 'x (app cons 'x (app nil)))))\n   (->\n    (app\n     cons\n     (app cons '* (app cons 'b (app cons 'x (app nil))))\n     (app cons 5 (app nil)))\n    <-))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (app\n   cons\n   (app cons '* (app cons 'b (app cons 'x (app nil))))\n   (-> (app cons 5 (app nil)) <-))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  deriv
  0
  25
  130
  app
  "\"'(eval (app cons 5 (-> (app nil) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (app\n   cons\n   (-> (app cons '* (app cons 'b (app cons 'x (app nil)))) <-)\n   (app cons 5 (app nil)))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  deriv
  0
  25
  130
  app
  "\"'(eval (app cons '* (-> (app cons 'b (app cons 'x (app nil))) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  deriv
  0
  25
  130
  app
  "\"'(eval (app cons 'b (-> (app cons 'x (app nil)) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  deriv
  0
  25
  130
  app
  "\"'(eval (app cons 'x (-> (app nil) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (app\n   cons\n   (-> (app cons '* (app cons 'a (app cons 'x (app cons 'x (app nil))))) <-)\n   (app\n    cons\n    (app cons '* (app cons 'b (app cons 'x (app nil))))\n    (app cons 5 (app nil))))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (app cons '* (-> (app cons 'a (app cons 'x (app cons 'x (app nil)))) <-))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  deriv
  0
  25
  130
  app
  "\"'(eval (app cons 'a (-> (app cons 'x (app cons 'x (app nil))) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  deriv
  0
  25
  130
  app
  "\"'(eval (app cons 'x (-> (app cons 'x (app nil)) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  deriv
  0
  25
  130
  app
  "\"'(eval (app cons 'x (-> (app nil) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (app\n   cons\n   (-> (app cons '* (app cons 3 (app cons 'x (app cons 'x (app nil))))) <-)\n   (app\n    cons\n    (app cons '* (app cons 'a (app cons 'x (app cons 'x (app nil)))))\n    (app\n     cons\n     (app cons '* (app cons 'b (app cons 'x (app nil))))\n     (app cons 5 (app nil)))))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (app cons '* (-> (app cons 3 (app cons 'x (app cons 'x (app nil)))) <-))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  deriv
  0
  25
  130
  app
  "\"'(eval (app cons 3 (-> (app cons 'x (app cons 'x (app nil))) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  deriv
  0
  25
  130
  app
  "\"'(eval (app cons 'x (-> (app cons 'x (app nil)) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  deriv
  0
  25
  130
  app
  "\"'(eval (app cons 'x (-> (app nil) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  app
  "\"'(eval (app cons 3 (-> (app cons 'x (app cons 'x (app nil))) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (app\n   cons\n   (app cadr a)\n   (->\n    (app\n     cons\n     (app\n      cons\n      '*\n      (app\n       cons\n       (app caddr a)\n       (app\n        cons\n        (app caddr a)\n        (app cons (app deriv (app caddr a)) (app nil)))))\n     (app nil))\n    <-))\n  (env (())))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  4
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  ref-or-constructor
  "\"'(eval (app map-f (-> map-c <-)) (env (())))\""
  151
  109
  37
  5
  109
  37
  146
  1
  1
  74
  #f
  635/109
  ((39/2 39/2 0) (39/2 39/2 0) (39/2 39/2 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  app
  "\"'(eval (app car (-> (app cdr (app cdr cadr-v)) <-)) (env (())))\""
  151
  109
  37
  5
  109
  37
  146
  1
  1
  74
  #f
  635/109
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (app\n   cons\n   '-\n   (->\n    (app\n     cons\n     (app\n      cons\n      '/\n      (app cons (app deriv (app cadr a)) (app cons (app caddr a) (app nil))))\n     (app\n      cons\n      (app\n       cons\n       '/\n       (app\n        cons\n        (app cadr a)\n        (app\n         cons\n         (app\n          cons\n          '*\n          (app\n           cons\n           (app caddr a)\n           (app\n            cons\n            (app caddr a)\n            (app cons (app deriv (app caddr a)) (app nil)))))\n         (app nil))))\n      (app nil)))\n    <-))\n  (env (())))\""
  153
  111
  37
  5
  111
  37
  148
  1
  1
  76
  #t
  637/111
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  app
  "\"'(eval (match (-> (app eq? (app car a) '/) <-) (#f) _) (env (())))\""
  158
  116
  37
  5
  116
  37
  153
  1
  1
  79
  #f
  329/58
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  ref-or-constructor
  "\"'(eval (match (-> pair?-v <-) (cons pair?-c pair?-d) _) (env (())))\""
  162
  118
  39
  5
  118
  39
  157
  1
  1
  79
  #f
  346/59
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (app\n   cons\n   (-> (app cons '* (app cons 'b (app cons 'x (app nil)))) <-)\n   (app cons 5 (app nil)))\n  (env ()))\""
  162
  118
  39
  5
  118
  39
  157
  1
  1
  79
  #t
  346/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (match\n   (app eq? (app car a) '/)\n   (#f)\n   (_\n    (->\n     (app\n      cons\n      '-\n      (app\n       cons\n       (app\n        cons\n        '/\n        (app cons (app deriv (app cadr a)) (app cons (app caddr a) (app nil))))\n       (app\n        cons\n        (app\n         cons\n         '/\n         (app\n          cons\n          (app cadr a)\n          (app\n           cons\n           (app\n            cons\n            '*\n            (app\n             cons\n             (app caddr a)\n             (app\n              cons\n              (app caddr a)\n              (app cons (app deriv (app caddr a)) (app nil)))))\n           (app nil))))\n        (app nil))))\n     <-)))\n  (env (())))\""
  164
  120
  39
  5
  120
  39
  159
  1
  1
  81
  #t
  347/60
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (app\n   cons\n   (app cons '* (app cons 'b (app cons 'x (app nil))))\n   (-> (app cons 5 (app nil)) <-))\n  (env ()))\""
  164
  120
  39
  5
  120
  39
  159
  1
  1
  81
  #t
  347/60
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  ref-or-constructor
  "\"'(eval (app map map-f (-> map-d <-)) (env (())))\""
  164
  120
  39
  5
  120
  39
  159
  1
  1
  81
  #f
  347/60
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  app
  "\"'(eval (match map-l (cons map-c map-d) ((nil) (-> (app nil) <-))) (env (())))\""
  166
  122
  39
  5
  122
  39
  161
  1
  1
  83
  #t
  348/61
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  ref-or-constructor
  "\"'(eval (app caddr (-> a <-)) (env (())))\""
  166
  122
  39
  5
  122
  39
  161
  1
  1
  83
  #f
  348/61
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (app cons '* (-> (app cons 'a (app cons 'x (app cons 'x (app nil)))) <-))\n  (env ()))\""
  166
  122
  39
  5
  122
  39
  161
  1
  1
  83
  #t
  348/61
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (app\n   cons\n   (->\n    (app\n     cons\n     '/\n     (app cons (app deriv (app cadr a)) (app cons (app caddr a) (app nil))))\n    <-)\n   (app\n    cons\n    (app\n     cons\n     '/\n     (app\n      cons\n      (app cadr a)\n      (app\n       cons\n       (app\n        cons\n        '*\n        (app\n         cons\n         (app caddr a)\n         (app\n          cons\n          (app caddr a)\n          (app cons (app deriv (app caddr a)) (app nil)))))\n       (app nil))))\n    (app nil)))\n  (env (())))\""
  168
  124
  39
  5
  124
  39
  163
  1
  1
  85
  #t
  349/62
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  lettypes
  "\"'(eval ((top) lettypes (cons ... nil) ...) (env ()))\""
  222
  176
  39
  7
  176
  39
  215
  1
  1
  117
  #f
  853/176
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (app\n   cons\n   (-> (app deriv (app cadr a)) <-)\n   (app cons (app caddr a) (app nil)))\n  (env (())))\""
  224
  178
  39
  7
  178
  39
  217
  1
  1
  118
  #f
  861/178
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (app\n   cons\n   '*\n   (->\n    (app\n     cons\n     a\n     (app cons (app cons '+ (app map (λ (a) ...) (app cdr a))) (app nil)))\n    <-))\n  (env (())))\""
  226
  180
  39
  7
  180
  39
  219
  1
  1
  120
  #t
  863/180
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  ref-or-constructor
  "\"'(eval (app deriv (-> a <-)) (env (() ())))\""
  226
  180
  39
  7
  180
  39
  219
  1
  1
  120
  #f
  863/180
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (match\n   (app eq? (app car a) '*)\n   (#f)\n   (_\n    (->\n     (app\n      cons\n      '*\n      (app\n       cons\n       a\n       (app cons (app cons '+ (app map (λ (a) ...) (app cdr a))) (app nil))))\n     <-)))\n  (env (())))\""
  226
  180
  39
  7
  180
  39
  219
  1
  1
  120
  #t
  863/180
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  app
  "\"'(eval (match (-> (app not (app pair? a)) <-) (#f) _) (env (())))\""
  226
  180
  39
  7
  180
  39
  219
  1
  1
  120
  #f
  863/180
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  app
  "\"'(eval (app cons 'b (-> (app cons 'x (app nil)) <-)) (env ()))\""
  226
  180
  39
  7
  180
  39
  219
  1
  1
  120
  #t
  863/180
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (app error (-> (app #f) <-) \"No derivation method available\")\n  (env (())))\""
  228
  182
  39
  7
  182
  39
  221
  1
  1
  122
  #t
  865/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  ref-or-constructor
  "\"'(eval (app cdr (-> a <-)) (env (())))\""
  228
  182
  39
  7
  182
  39
  221
  1
  1
  122
  #f
  865/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (app cons (app cons '+ (app map (λ (a) ...) (app cdr a))) (-> (app nil) <-))\n  (env (())))\""
  230
  184
  39
  7
  184
  39
  223
  1
  1
  124
  #t
  867/184
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  app
  "\"'(eval (app cons '+ (-> (app map (λ (a) ...) (app cdr a)) <-)) (env (())))\""
  235
  188
  39
  8
  188
  39
  227
  1
  1
  126
  #f
  873/188
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  app
  "\"'(eval (app cons (app caddr a) (-> (app nil) <-)) (env (())))\""
  237
  190
  39
  8
  190
  39
  229
  1
  1
  128
  #t
  175/38
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  match
  "\"'(eval (λ (car-v) (-> (match car-v ...) <-)) (env (())))\""
  237
  190
  39
  8
  190
  39
  229
  1
  1
  128
  #f
  175/38
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (app\n   cons\n   (-> (app caddr a) <-)\n   (app cons (app deriv (app caddr a)) (app nil)))\n  (env (())))\""
  239
  192
  39
  8
  192
  39
  231
  1
  1
  129
  #f
  223/48
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  ref-or-constructor
  "\"'(eval (app eq? (-> a <-) 'x) (env (())))\""
  239
  192
  39
  8
  192
  39
  231
  1
  1
  129
  #f
  223/48
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  ref-or-constructor
  "\"'(eval (app car (-> a <-)) (env (())))\""
  239
  192
  39
  8
  192
  39
  231
  1
  1
  129
  #f
  223/48
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  app
  "\"'(eval (app map deriv (-> (app cdr a) <-)) (env (())))\""
  239
  192
  39
  8
  192
  39
  231
  1
  1
  129
  #f
  223/48
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  app
  "\"'(eval (app not (-> (app pair? a) <-)) (env (())))\""
  239
  192
  39
  8
  192
  39
  231
  1
  1
  129
  #f
  223/48
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  ref-or-constructor
  "\"'(eval (match (-> car-v <-) (cons car-c car-d)) (env (())))\""
  239
  192
  39
  8
  192
  39
  231
  1
  1
  129
  #f
  223/48
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (app cons '* (-> (app cons 3 (app cons 'x (app cons 'x (app nil)))) <-))\n  (env ()))\""
  239
  192
  39
  8
  192
  39
  231
  1
  1
  129
  #t
  223/48
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  app
  "\"'(eval (app cons (app deriv a) (-> (app cons a (app nil)) <-)) (env (() ())))\""
  241
  194
  39
  8
  194
  39
  233
  1
  1
  131
  #t
  447/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (app\n   cons\n   (app caddr a)\n   (->\n    (app cons (app caddr a) (app cons (app deriv (app caddr a)) (app nil)))\n    <-))\n  (env (())))\""
  243
  196
  39
  8
  196
  39
  235
  1
  1
  133
  #t
  32/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  ref-or-constructor
  "\"'(eval (app map (-> map-f <-) map-d) (env (())))\""
  247
  200
  39
  8
  200
  39
  239
  1
  1
  136
  #f
  901/200
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  app
  "\"'(eval (app cons (-> (app caddr a) <-) (app nil)) (env (())))\""
  249
  202
  39
  8
  202
  39
  241
  1
  1
  137
  #f
  459/101
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  ref-or-constructor
  "\"'(eval (match (-> map-l <-) (cons map-c map-d) (nil)) (env (())))\""
  249
  202
  39
  8
  202
  39
  241
  1
  1
  137
  #f
  459/101
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (app\n   cons\n   (-> (app caddr a) <-)\n   (app cons (app caddr a) (app cons (app deriv (app caddr a)) (app nil))))\n  (env (())))\""
  251
  204
  39
  8
  204
  39
  243
  1
  1
  138
  #f
  55/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  ref-or-constructor
  "\"'(eval (app cdr (-> cadr-v <-)) (env (())))\""
  251
  204
  39
  8
  204
  39
  243
  1
  1
  138
  #f
  55/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (app\n   cons\n   '/\n   (->\n    (app cons (app deriv (app cadr a)) (app cons (app caddr a) (app nil)))\n    <-))\n  (env (())))\""
  253
  206
  39
  8
  206
  39
  245
  1
  1
  140
  #t
  937/206
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  app
  "\"'(eval (match (-> (app eq? (app car a) '+) <-) (#f) _) (env (())))\""
  253
  206
  39
  8
  206
  39
  245
  1
  1
  140
  #f
  937/206
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  ref-or-constructor
  "\"'(eval (app (-> map-f <-) map-c) (env (())))\""
  254
  207
  39
  8
  207
  39
  246
  1
  1
  140
  #f
  313/69
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  ref-or-constructor
  "\"'(eval (app cdr (-> a <-)) (env (())))\""
  254
  207
  39
  8
  207
  39
  246
  1
  1
  140
  #f
  313/69
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (app\n   cons\n   (->\n    (app\n     cons\n     '*\n     (app\n      cons\n      (app caddr a)\n      (app cons (app caddr a) (app cons (app deriv (app caddr a)) (app nil)))))\n    <-)\n   (app nil))\n  (env (())))\""
  256
  209
  39
  8
  209
  39
  248
  1
  1
  142
  #t
  941/209
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  match
  "\"'(eval\n  (match (app not (app pair? a)) (#f) (_ (-> (match (app eq? a 'x) ...) <-)))\n  (env (())))\""
  256
  209
  39
  8
  209
  39
  248
  1
  1
  142
  #f
  941/209
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (app\n   cons\n   (app caddr a)\n   (-> (app cons (app deriv (app caddr a)) (app nil)) <-))\n  (env (())))\""
  258
  211
  39
  8
  211
  39
  250
  1
  1
  144
  #t
  943/211
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  app
  "\"'(eval (app eq? (-> (app car a) <-) '+) (env (())))\""
  258
  211
  39
  8
  211
  39
  250
  1
  1
  144
  #f
  943/211
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  ref-or-constructor
  "\"'(eval\n  (app\n   cons\n   (-> a <-)\n   (app cons (app cons '+ (app map (λ (a) ...) (app cdr a))) (app nil)))\n  (env (())))\""
  259
  212
  39
  8
  212
  39
  251
  1
  1
  144
  #f
  240/53
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  app
  "\"'(eval (app car (-> (app cdr cadr-v) <-)) (env (())))\""
  259
  212
  39
  8
  212
  39
  251
  1
  1
  144
  #f
  240/53
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (app\n   cons\n   (app\n    cons\n    '/\n    (app\n     cons\n     (app cadr a)\n     (app\n      cons\n      (app\n       cons\n       '*\n       (app\n        cons\n        (app caddr a)\n        (app\n         cons\n         (app caddr a)\n         (app cons (app deriv (app caddr a)) (app nil)))))\n      (app nil))))\n   (-> (app nil) <-))\n  (env (())))\""
  261
  214
  39
  8
  214
  39
  253
  1
  1
  146
  #t
  481/107
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (λ (a) (-> (app cons '/ (app cons (app deriv a) (app cons a (app nil)))) <-))\n  (env (() ())))\""
  263
  216
  39
  8
  216
  39
  255
  1
  1
  148
  #t
  241/54
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  match
  "\"'(eval (λ (cdr-v) (-> (match cdr-v ...) <-)) (env (())))\""
  263
  216
  39
  8
  216
  39
  255
  1
  1
  148
  #f
  241/54
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  app
  "\"'(eval (app cons 5 (-> (app nil) <-)) (env ()))\""
  263
  216
  39
  8
  216
  39
  255
  1
  1
  148
  #t
  241/54
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  ref-or-constructor
  "\"'(eval (app caddr (-> a <-)) (env (())))\""
  263
  216
  39
  8
  216
  39
  255
  1
  1
  148
  #f
  241/54
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  ref-or-constructor
  "\"'(eval (app cdr (-> a <-)) (env (())))\""
  263
  216
  39
  8
  216
  39
  255
  1
  1
  148
  #f
  241/54
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  ref-or-constructor
  "\"'(eval (app car (-> a <-)) (env (())))\""
  263
  216
  39
  8
  216
  39
  255
  1
  1
  148
  #f
  241/54
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  app
  "\"'(eval (app deriv (-> (app caddr a) <-)) (env (())))\""
  263
  216
  39
  8
  216
  39
  255
  1
  1
  148
  #f
  241/54
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (app\n   cons\n   (app\n    cons\n    '/\n    (app cons (app deriv (app cadr a)) (app cons (app caddr a) (app nil))))\n   (->\n    (app\n     cons\n     (app\n      cons\n      '/\n      (app\n       cons\n       (app cadr a)\n       (app\n        cons\n        (app\n         cons\n         '*\n         (app\n          cons\n          (app caddr a)\n          (app\n           cons\n           (app caddr a)\n           (app cons (app deriv (app caddr a)) (app nil)))))\n        (app nil))))\n     (app nil))\n    <-))\n  (env (())))\""
  265
  218
  39
  8
  218
  39
  257
  1
  1
  150
  #t
  483/109
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  app
  "\"'(eval (app cons (-> (app map-f map-c) <-) (app map map-f map-d)) (env (())))\""
  267
  219
  39
  9
  219
  39
  258
  1
  1
  150
  #f
  974/219
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (match\n   (app eq? (app car a) '+)\n   (#f)\n   (_ (-> (app cons '+ (app map deriv (app cdr a))) <-)))\n  (env (())))\""
  267
  219
  39
  9
  219
  39
  258
  1
  1
  150
  #t
  974/219
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  app
  "\"'(eval (app cdr (-> (app cdr cadr-v) <-)) (env (())))\""
  267
  219
  39
  9
  219
  39
  258
  1
  1
  150
  #f
  974/219
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (app\n   cons\n   (->\n    (app\n     cons\n     '/\n     (app\n      cons\n      (app cadr a)\n      (app\n       cons\n       (app\n        cons\n        '*\n        (app\n         cons\n         (app caddr a)\n         (app\n          cons\n          (app caddr a)\n          (app cons (app deriv (app caddr a)) (app nil)))))\n       (app nil))))\n    <-)\n   (app nil))\n  (env (())))\""
  269
  221
  39
  9
  221
  39
  260
  1
  1
  152
  #t
  976/221
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  app
  "\"'(eval (app cons '- (-> (app map deriv (app cdr a)) <-)) (env (())))\""
  270
  222
  39
  9
  222
  39
  261
  1
  1
  152
  #f
  163/37
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  app
  "\"'(eval (match (-> (app eq? (app car a) '-) <-) (#f) _) (env (())))\""
  270
  222
  39
  9
  222
  39
  261
  1
  1
  152
  #f
  163/37
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  ref-or-constructor
  "\"'(eval (match (-> cdr-v <-) (cons cdr-c cdr-d)) (env (())))\""
  270
  222
  39
  9
  222
  39
  261
  1
  1
  152
  #f
  163/37
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (app\n   cons\n   (app deriv (app cadr a))\n   (-> (app cons (app caddr a) (app nil)) <-))\n  (env (())))\""
  272
  224
  39
  9
  224
  39
  263
  1
  1
  154
  #t
  35/8
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (app\n   cons\n   (-> (app cons '* (app cons 'a (app cons 'x (app cons 'x (app nil))))) <-)\n   (app\n    cons\n    (app cons '* (app cons 'b (app cons 'x (app nil))))\n    (app cons 5 (app nil))))\n  (env ()))\""
  272
  224
  39
  9
  224
  39
  263
  1
  1
  154
  #t
  35/8
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (app\n   cons\n   (-> (app cadr a) <-)\n   (app\n    cons\n    (app\n     cons\n     '*\n     (app\n      cons\n      (app caddr a)\n      (app cons (app caddr a) (app cons (app deriv (app caddr a)) (app nil)))))\n    (app nil)))\n  (env (())))\""
  274
  226
  39
  9
  226
  39
  265
  1
  1
  155
  #f
  997/226
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  app
  "\"'(eval (app cons 'x (-> (app nil) <-)) (env ()))\""
  274
  226
  39
  9
  226
  39
  265
  1
  1
  155
  #t
  997/226
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  ref-or-constructor
  "\"'(eval (app caddr (-> a <-)) (env (())))\""
  274
  226
  39
  9
  226
  39
  265
  1
  1
  155
  #f
  997/226
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  app
  "\"'(eval (app cons 'x (-> (app cons 'x (app nil)) <-)) (env ()))\""
  274
  226
  39
  9
  226
  39
  265
  1
  1
  155
  #t
  997/226
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (app\n   cons\n   (app cons '* (app cons 3 (app cons 'x (app cons 'x (app nil)))))\n   (->\n    (app\n     cons\n     (app cons '* (app cons 'a (app cons 'x (app cons 'x (app nil)))))\n     (app\n      cons\n      (app cons '* (app cons 'b (app cons 'x (app nil))))\n      (app cons 5 (app nil))))\n    <-))\n  (env ()))\""
  274
  226
  39
  9
  226
  39
  265
  1
  1
  155
  #t
  997/226
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  app
  "\"'(eval (app cons (-> (app deriv a) <-) (app cons a (app nil))) (env (() ())))\""
  276
  228
  39
  9
  228
  39
  267
  1
  1
  156
  #f
  335/76
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (match\n   (app eq? (app car a) '/)\n   ((#f) (-> (app error (app #f) \"No derivation method available\") <-))\n   _)\n  (env (())))\""
  276
  228
  39
  9
  228
  39
  267
  1
  1
  156
  #t
  335/76
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  match
  "\"'(eval (λ (pair?-v) (-> (match pair?-v ...) <-)) (env (())))\""
  276
  228
  39
  9
  228
  39
  267
  1
  1
  156
  #f
  335/76
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  app
  "\"'(eval (app cons (app deriv (app caddr a)) (-> (app nil) <-)) (env (())))\""
  278
  230
  39
  9
  230
  39
  269
  1
  1
  158
  #t
  1007/230
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (match\n   map-l\n   ((cons map-c map-d)\n    (-> (app cons (app map-f map-c) (app map map-f map-d)) <-))\n   (nil))\n  (env (())))\""
  278
  230
  39
  9
  230
  39
  269
  1
  1
  158
  #t
  1007/230
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  ref-or-constructor
  "\"'(eval (match cdr-v ((cons cdr-c cdr-d) (-> cdr-d <-))) (env (())))\""
  278
  230
  39
  9
  230
  39
  269
  1
  1
  158
  #f
  1007/230
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (app\n   cons\n   (app\n    cons\n    '*\n    (app\n     cons\n     (app caddr a)\n     (app cons (app caddr a) (app cons (app deriv (app caddr a)) (app nil)))))\n   (-> (app nil) <-))\n  (env (())))\""
  280
  232
  39
  9
  232
  39
  271
  1
  1
  160
  #t
  1009/232
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (letrec*\n   (car ... deriv)\n   (->\n    (app\n     deriv\n     (app\n      cons\n      '+\n      (app\n       cons\n       (app cons '* (app cons 3 (app cons 'x (app cons 'x (app nil)))))\n       (app\n        cons\n        (app cons '* (app cons 'a (app cons 'x (app cons 'x (app nil)))))\n        (app\n         cons\n         (app cons '* (app cons 'b (app cons 'x (app nil))))\n         (app cons 5 (app nil)))))))\n    <-))\n  (env ()))\""
  280
  232
  39
  9
  232
  39
  271
  1
  1
  160
  #f
  1009/232
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  app
  "\"'(eval (app cons '* (-> (app cons 'b (app cons 'x (app nil))) <-)) (env ()))\""
  280
  232
  39
  9
  232
  39
  271
  1
  1
  160
  #t
  1009/232
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  match
  "\"'(eval (λ (map-f map-l) (-> (match map-l ...) <-)) (env (())))\""
  280
  232
  39
  9
  232
  39
  271
  1
  1
  160
  #f
  1009/232
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  ref-or-constructor
  "\"'(eval (app car (-> a <-)) (env (())))\""
  280
  232
  39
  9
  232
  39
  271
  1
  1
  160
  #f
  1009/232
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  match
  "\"'(eval\n  (match\n   (app not (app pair? a))\n   ((#f) (-> (match (app eq? (app car a) '+) ...) <-))\n   _)\n  (env (())))\""
  280
  232
  39
  9
  232
  39
  271
  1
  1
  160
  #f
  1009/232
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  ref-or-constructor
  "\"'(eval (match car-v ((cons car-c car-d) (-> car-c <-))) (env (())))\""
  280
  232
  39
  9
  232
  39
  271
  1
  1
  160
  #f
  1009/232
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (app\n   cons\n   a\n   (->\n    (app cons (app cons '+ (app map (λ (a) ...) (app cdr a))) (app nil))\n    <-))\n  (env (())))\""
  282
  234
  39
  9
  234
  39
  273
  1
  1
  162
  #t
  337/78
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  app
  "\"'(eval (app cons 'x (-> (app cons 'x (app nil)) <-)) (env ()))\""
  282
  234
  39
  9
  234
  39
  273
  1
  1
  162
  #t
  337/78
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  app
  "\"'(eval (λ (cadr-v) (-> (app car (app cdr (app cdr cadr-v))) <-)) (env (())))\""
  282
  234
  39
  9
  234
  39
  273
  1
  1
  162
  #f
  337/78
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  app
  "\"'(eval (app eq? (-> (app car a) <-) '/) (env (())))\""
  282
  234
  39
  9
  234
  39
  273
  1
  1
  162
  #f
  337/78
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  app
  "\"'(eval (match (-> (app eq? a 'x) <-) (#f) _) (env (())))\""
  282
  234
  39
  9
  234
  39
  273
  1
  1
  162
  #f
  337/78
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  ref-or-constructor
  "\"'(eval (app pair? (-> a <-)) (env (())))\""
  282
  234
  39
  9
  234
  39
  273
  1
  1
  162
  #f
  337/78
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  app
  "\"'(eval (λ (cadr-v) (-> (app car (app cdr cadr-v)) <-)) (env (())))\""
  282
  234
  39
  9
  234
  39
  273
  1
  1
  162
  #f
  337/78
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (app\n   cons\n   '/\n   (->\n    (app\n     cons\n     (app cadr a)\n     (app\n      cons\n      (app\n       cons\n       '*\n       (app\n        cons\n        (app caddr a)\n        (app\n         cons\n         (app caddr a)\n         (app cons (app deriv (app caddr a)) (app nil)))))\n      (app nil)))\n    <-))\n  (env (())))\""
  284
  236
  39
  9
  236
  39
  275
  1
  1
  164
  #t
  1013/236
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  app
  "\"'(eval (app cons 'x (-> (app nil) <-)) (env ()))\""
  284
  236
  39
  9
  236
  39
  275
  1
  1
  164
  #t
  1013/236
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  app
  "\"'(eval (app deriv (-> (app cadr a) <-)) (env (())))\""
  284
  236
  39
  9
  236
  39
  275
  1
  1
  164
  #f
  1013/236
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (match\n   (app eq? (app car a) '-)\n   (#f)\n   (_ (-> (app cons '- (app map deriv (app cdr a))) <-)))\n  (env (())))\""
  284
  236
  39
  9
  236
  39
  275
  1
  1
  164
  #t
  1013/236
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  app
  "\"'(eval (app eq? (-> (app car a) <-) '-) (env (())))\""
  284
  236
  39
  9
  236
  39
  275
  1
  1
  164
  #f
  1013/236
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  match
  "\"'(eval\n  (match\n   (app eq? (app car a) '-)\n   ((#f) (-> (match (app eq? (app car a) '*) ...) <-))\n   _)\n  (env (())))\""
  284
  236
  39
  9
  236
  39
  275
  1
  1
  164
  #f
  1013/236
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  app
  "\"'(eval (app cons a (-> (app nil) <-)) (env (() ())))\""
  286
  238
  39
  9
  238
  39
  277
  1
  1
  166
  #t
  145/34
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  match
  "\"'(eval\n  (match\n   (app eq? (app car a) '*)\n   ((#f) (-> (match (app eq? (app car a) '/) ...) <-))\n   _)\n  (env (())))\""
  286
  238
  39
  9
  238
  39
  277
  1
  1
  166
  #f
  145/34
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (app\n   cons\n   '*\n   (->\n    (app\n     cons\n     (app caddr a)\n     (app cons (app caddr a) (app cons (app deriv (app caddr a)) (app nil))))\n    <-))\n  (env (())))\""
  288
  240
  39
  9
  240
  39
  279
  1
  1
  168
  #t
  339/80
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  ref-or-constructor
  "\"'(eval (app cadr (-> a <-)) (env (())))\""
  288
  240
  39
  9
  240
  39
  279
  1
  1
  168
  #f
  339/80
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (app\n   deriv\n   (->\n    (app\n     cons\n     '+\n     (app\n      cons\n      (app cons '* (app cons 3 (app cons 'x (app cons 'x (app nil)))))\n      (app\n       cons\n       (app cons '* (app cons 'a (app cons 'x (app cons 'x (app nil)))))\n       (app\n        cons\n        (app cons '* (app cons 'b (app cons 'x (app nil))))\n        (app cons 5 (app nil))))))\n    <-))\n  (env ()))\""
  288
  240
  39
  9
  240
  39
  279
  1
  1
  168
  #t
  339/80
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  app
  "\"'(eval (match pair?-v ((cons pair?-c pair?-d) (-> (app #t) <-)) _) (env (())))\""
  288
  240
  39
  9
  240
  39
  279
  1
  1
  168
  #t
  339/80
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (app\n   cons\n   (-> (app cons '* (app cons 3 (app cons 'x (app cons 'x (app nil))))) <-)\n   (app\n    cons\n    (app cons '* (app cons 'a (app cons 'x (app cons 'x (app nil)))))\n    (app\n     cons\n     (app cons '* (app cons 'b (app cons 'x (app nil))))\n     (app cons 5 (app nil)))))\n  (env ()))\""
  288
  240
  39
  9
  240
  39
  279
  1
  1
  168
  #t
  339/80
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  letrec*
  "\"'(eval (lettypes cons ... nil (letrec* (car ... deriv) ...)) (env ()))\""
  288
  240
  39
  9
  240
  39
  279
  1
  1
  168
  #f
  339/80
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  ref-or-constructor
  "\"'(eval (app cdr (-> cadr-v <-)) (env (())))\""
  288
  240
  39
  9
  240
  39
  279
  1
  1
  168
  #f
  339/80
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (app\n   cons\n   (app cons '* (app cons 'a (app cons 'x (app cons 'x (app nil)))))\n   (->\n    (app\n     cons\n     (app cons '* (app cons 'b (app cons 'x (app nil))))\n     (app cons 5 (app nil)))\n    <-))\n  (env ()))\""
  288
  240
  39
  9
  240
  39
  279
  1
  1
  168
  #t
  339/80
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  ref-or-constructor
  "\"'(eval (app car (-> a <-)) (env (())))\""
  288
  240
  39
  9
  240
  39
  279
  1
  1
  168
  #f
  339/80
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  app
  "\"'(eval (app cons (-> (app deriv (app caddr a)) <-) (app nil)) (env (())))\""
  290
  242
  39
  9
  242
  39
  281
  1
  1
  169
  #f
  1025/242
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  match
  "\"'(eval\n  (match\n   (app eq? (app car a) '+)\n   ((#f) (-> (match (app eq? (app car a) '-) ...) <-))\n   _)\n  (env (())))\""
  290
  242
  39
  9
  242
  39
  281
  1
  1
  169
  #f
  1025/242
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  app
  "\"'(eval (app map (λ (a) ...) (-> (app cdr a) <-)) (env (())))\""
  290
  242
  39
  9
  242
  39
  281
  1
  1
  169
  #f
  1025/242
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  app
  "\"'(eval (match (-> (app eq? (app car a) '*) <-) (#f) _) (env (())))\""
  290
  242
  39
  9
  242
  39
  281
  1
  1
  169
  #f
  1025/242
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (app cons '/ (-> (app cons (app deriv a) (app cons a (app nil))) <-))\n  (env (() ())))\""
  292
  244
  39
  9
  244
  39
  283
  1
  1
  171
  #t
  1027/244
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  app
  "\"'(eval (app cons (app map-f map-c) (-> (app map map-f map-d) <-)) (env (())))\""
  293
  245
  39
  9
  245
  39
  284
  1
  1
  171
  #f
  21/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  match
  "\"'(eval (λ (a) (-> (match (app not (app pair? a)) ...) <-)) (env (())))\""
  293
  245
  39
  9
  245
  39
  284
  1
  1
  171
  #f
  21/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  app
  "\"'(eval (app cons 'x (-> (app nil) <-)) (env ()))\""
  293
  245
  39
  9
  245
  39
  284
  1
  1
  171
  #t
  21/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  app
  "\"'(eval (app map deriv (-> (app cdr a) <-)) (env (())))\""
  293
  245
  39
  9
  245
  39
  284
  1
  1
  171
  #f
  21/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  ref-or-constructor
  "\"'(eval (app caddr (-> a <-)) (env (())))\""
  293
  245
  39
  9
  245
  39
  284
  1
  1
  171
  #f
  21/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  app
  "\"'(eval (app cons 'a (-> (app cons 'x (app cons 'x (app nil))) <-)) (env ()))\""
  293
  245
  39
  9
  245
  39
  284
  1
  1
  171
  #t
  21/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (app\n   cons\n   '+\n   (->\n    (app\n     cons\n     (app cons '* (app cons 3 (app cons 'x (app cons 'x (app nil)))))\n     (app\n      cons\n      (app cons '* (app cons 'a (app cons 'x (app cons 'x (app nil)))))\n      (app\n       cons\n       (app cons '* (app cons 'b (app cons 'x (app nil))))\n       (app cons 5 (app nil)))))\n    <-))\n  (env ()))\""
  293
  245
  39
  9
  245
  39
  284
  1
  1
  171
  #t
  21/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  ref-or-constructor
  "\"'(eval (app cadr (-> a <-)) (env (())))\""
  293
  245
  39
  9
  245
  39
  284
  1
  1
  171
  #f
  21/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  app
  "\"'(eval (app eq? (-> (app car a) <-) '*) (env (())))\""
  293
  245
  39
  9
  245
  39
  284
  1
  1
  171
  #f
  21/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  app
  "\"'(eval (match pair?-v (cons pair?-c pair?-d) (_ (-> (app #f) <-))) (env (())))\""
  293
  245
  39
  9
  245
  39
  284
  1
  1
  171
  #t
  21/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  ref-or-constructor
  "\"'(eval (app cons (-> a <-) (app nil)) (env (() ())))\""
  294
  246
  39
  9
  246
  39
  285
  1
  1
  171
  #f
  347/82
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (app cons (-> (app cons '+ (app map (λ (a) ...) (app cdr a))) <-) (app nil))\n  (env (())))\""
  296
  248
  39
  9
  248
  39
  287
  1
  1
  173
  #t
  1043/248
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  deriv
  0
  25
  130
  app
  "\"'(eval (app cons '+ (-> (app map deriv (app cdr a)) <-)) (env (())))\""
  297
  249
  39
  9
  249
  39
  288
  1
  1
  173
  #f
  1045/249
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  app
  "\"'(eval (match (-> (app not (app pair? a)) <-) (#f) _) (env (())))\""
  166
  121
  39
  6
  121
  39
  160
  1
  1
  81
  #f
  62/11
  ((23 23 0) (45/2 45/2 0) (45/2 45/2 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  ref-or-constructor
  "\"'(eval (app (-> map-f <-) map-c) (env (())))\""
  172
  127
  39
  6
  127
  39
  166
  1
  1
  85
  #f
  690/127
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  ref-or-constructor
  "\"'(eval (app car (-> a <-)) (env (())))\""
  172
  127
  39
  6
  127
  39
  166
  1
  1
  85
  #f
  690/127
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (app\n   cons\n   (app\n    cons\n    '/\n    (app cons (app deriv (app cadr a)) (app cons (app caddr a) (app nil))))\n   (->\n    (app\n     cons\n     (app\n      cons\n      '/\n      (app\n       cons\n       (app cadr a)\n       (app\n        cons\n        (app\n         cons\n         '*\n         (app\n          cons\n          (app caddr a)\n          (app\n           cons\n           (app caddr a)\n           (app cons (app deriv (app caddr a)) (app nil)))))\n        (app nil))))\n     (app nil))\n    <-))\n  (env (())))\""
  174
  129
  39
  6
  129
  39
  168
  1
  1
  87
  #t
  692/129
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  match
  "\"'(eval (λ (a) (-> (match (app not (app pair? a)) ...) <-)) (env (())))\""
  216
  171
  39
  6
  171
  39
  210
  1
  1
  113
  #f
  832/171
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (app\n   cons\n   (->\n    (app\n     cons\n     '*\n     (app\n      cons\n      (app caddr a)\n      (app cons (app caddr a) (app cons (app deriv (app caddr a)) (app nil)))))\n    <-)\n   (app nil))\n  (env (())))\""
  218
  173
  39
  6
  173
  39
  212
  1
  1
  115
  #t
  834/173
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (app\n   cons\n   (app cons '* (app cons 'a (app cons 'x (app cons 'x (app nil)))))\n   (->\n    (app\n     cons\n     (app cons '* (app cons 'b (app cons 'x (app nil))))\n     (app cons 5 (app nil)))\n    <-))\n  (env ()))\""
  218
  173
  39
  6
  173
  39
  212
  1
  1
  115
  #t
  834/173
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  app
  "\"'(eval (app cons 'b (-> (app cons 'x (app nil)) <-)) (env ()))\""
  218
  173
  39
  6
  173
  39
  212
  1
  1
  115
  #t
  834/173
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (app\n   cons\n   (-> (app cadr a) <-)\n   (app\n    cons\n    (app\n     cons\n     '*\n     (app\n      cons\n      (app caddr a)\n      (app cons (app caddr a) (app cons (app deriv (app caddr a)) (app nil)))))\n    (app nil)))\n  (env (())))\""
  220
  175
  39
  6
  175
  39
  214
  1
  1
  116
  #f
  851/175
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  app
  "\"'(eval (app cons 'x (-> (app nil) <-)) (env ()))\""
  220
  175
  39
  6
  175
  39
  214
  1
  1
  116
  #t
  851/175
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  match
  "\"'(eval\n  (match\n   (app eq? (app car a) '-)\n   ((#f) (-> (match (app eq? (app car a) '*) ...) <-))\n   _)\n  (env (())))\""
  220
  175
  39
  6
  175
  39
  214
  1
  1
  116
  #f
  851/175
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (app\n   cons\n   (-> (app caddr a) <-)\n   (app cons (app caddr a) (app cons (app deriv (app caddr a)) (app nil))))\n  (env (())))\""
  222
  177
  39
  6
  177
  39
  216
  1
  1
  117
  #f
  868/177
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  app
  "\"'(eval (app cons (app map-f map-c) (-> (app map map-f map-d) <-)) (env (())))\""
  229
  183
  39
  7
  183
  39
  222
  1
  1
  121
  #f
  292/61
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (app\n   cons\n   (-> (app cons '* (app cons 'a (app cons 'x (app cons 'x (app nil))))) <-)\n   (app\n    cons\n    (app cons '* (app cons 'b (app cons 'x (app nil))))\n    (app cons 5 (app nil))))\n  (env ()))\""
  229
  183
  39
  7
  183
  39
  222
  1
  1
  121
  #t
  292/61
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  app
  "\"'(eval (app cons (app deriv (app caddr a)) (-> (app nil) <-)) (env (())))\""
  231
  185
  39
  7
  185
  39
  224
  1
  1
  123
  #t
  878/185
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (app\n   cons\n   '/\n   (->\n    (app\n     cons\n     (app cadr a)\n     (app\n      cons\n      (app\n       cons\n       '*\n       (app\n        cons\n        (app caddr a)\n        (app\n         cons\n         (app caddr a)\n         (app cons (app deriv (app caddr a)) (app nil)))))\n      (app nil)))\n    <-))\n  (env (())))\""
  233
  187
  39
  7
  187
  39
  226
  1
  1
  125
  #t
  80/17
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  app
  "\"'(eval (match (-> (app eq? (app car a) '*) <-) (#f) _) (env (())))\""
  233
  187
  39
  7
  187
  39
  226
  1
  1
  125
  #f
  80/17
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (app\n   cons\n   (app caddr a)\n   (-> (app cons (app deriv (app caddr a)) (app nil)) <-))\n  (env (())))\""
  235
  189
  39
  7
  189
  39
  228
  1
  1
  127
  #t
  14/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  ref-or-constructor
  "\"'(eval (app caddr (-> a <-)) (env (())))\""
  235
  189
  39
  7
  189
  39
  228
  1
  1
  127
  #f
  14/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  app
  "\"'(eval (λ (cadr-v) (-> (app car (app cdr (app cdr cadr-v))) <-)) (env (())))\""
  235
  189
  39
  7
  189
  39
  228
  1
  1
  127
  #f
  14/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (app\n   cons\n   '+\n   (->\n    (app\n     cons\n     (app cons '* (app cons 3 (app cons 'x (app cons 'x (app nil)))))\n     (app\n      cons\n      (app cons '* (app cons 'a (app cons 'x (app cons 'x (app nil)))))\n      (app\n       cons\n       (app cons '* (app cons 'b (app cons 'x (app nil))))\n       (app cons 5 (app nil)))))\n    <-))\n  (env ()))\""
  235
  189
  39
  7
  189
  39
  228
  1
  1
  127
  #t
  14/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  app
  "\"'(eval (app eq? (-> (app car a) <-) '-) (env (())))\""
  235
  189
  39
  7
  189
  39
  228
  1
  1
  127
  #f
  14/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  app
  "\"'(eval (app cons (-> (app map-f map-c) <-) (app map map-f map-d)) (env (())))\""
  240
  192
  39
  9
  192
  39
  231
  1
  1
  129
  #f
  223/48
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  app
  "\"'(eval (app cons (-> (app deriv a) <-) (app cons a (app nil))) (env (() ())))\""
  242
  194
  39
  9
  194
  39
  233
  1
  1
  130
  #f
  450/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  ref-or-constructor
  "\"'(eval (app map (-> map-f <-) map-d) (env (())))\""
  242
  194
  39
  9
  194
  39
  233
  1
  1
  130
  #f
  450/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (λ (a) (-> (app cons '/ (app cons (app deriv a) (app cons a (app nil)))) <-))\n  (env (() ())))\""
  242
  194
  39
  9
  194
  39
  233
  1
  1
  130
  #t
  450/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  app
  "\"'(eval (app cons a (-> (app nil) <-)) (env (() ())))\""
  244
  196
  39
  9
  196
  39
  235
  1
  1
  132
  #t
  451/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (app\n   cons\n   a\n   (->\n    (app cons (app cons '+ (app map (λ (a) ...) (app cdr a))) (app nil))\n    <-))\n  (env (())))\""
  246
  198
  39
  9
  198
  39
  237
  1
  1
  134
  #t
  452/99
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  app
  "\"'(eval (app cons '- (-> (app map deriv (app cdr a)) <-)) (env (())))\""
  247
  199
  39
  9
  199
  39
  238
  1
  1
  134
  #f
  906/199
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  ref-or-constructor
  "\"'(eval (match (-> map-l <-) (cons map-c map-d) (nil)) (env (())))\""
  247
  199
  39
  9
  199
  39
  238
  1
  1
  134
  #f
  906/199
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (match\n   (app eq? (app car a) '+)\n   (#f)\n   (_ (-> (app cons '+ (app map deriv (app cdr a))) <-)))\n  (env (())))\""
  247
  199
  39
  9
  199
  39
  238
  1
  1
  134
  #t
  906/199
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  app
  "\"'(eval (match map-l (cons map-c map-d) ((nil) (-> (app nil) <-))) (env (())))\""
  247
  199
  39
  9
  199
  39
  238
  1
  1
  134
  #t
  906/199
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  app
  "\"'(eval (app cons (-> (app deriv (app caddr a)) <-) (app nil)) (env (())))\""
  249
  201
  39
  9
  201
  39
  240
  1
  1
  135
  #f
  914/201
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (match\n   (app eq? (app car a) '*)\n   (#f)\n   (_\n    (->\n     (app\n      cons\n      '*\n      (app\n       cons\n       a\n       (app cons (app cons '+ (app map (λ (a) ...) (app cdr a))) (app nil))))\n     <-)))\n  (env (())))\""
  249
  201
  39
  9
  201
  39
  240
  1
  1
  135
  #t
  914/201
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  app
  "\"'(eval (app cons 'x (-> (app nil) <-)) (env ()))\""
  249
  201
  39
  9
  201
  39
  240
  1
  1
  135
  #t
  914/201
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  ref-or-constructor
  "\"'(eval (app cadr (-> a <-)) (env (())))\""
  249
  201
  39
  9
  201
  39
  240
  1
  1
  135
  #f
  914/201
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  app
  "\"'(eval (match pair?-v (cons pair?-c pair?-d) (_ (-> (app #f) <-))) (env (())))\""
  249
  201
  39
  9
  201
  39
  240
  1
  1
  135
  #t
  914/201
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  lettypes
  "\"'(eval ((top) lettypes (cons ... nil) ...) (env ()))\""
  253
  205
  39
  9
  205
  39
  244
  1
  1
  136
  #f
  936/205
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (match\n   map-l\n   ((cons map-c map-d)\n    (-> (app cons (app map-f map-c) (app map map-f map-d)) <-))\n   (nil))\n  (env (())))\""
  253
  205
  39
  9
  205
  39
  244
  1
  1
  136
  #t
  936/205
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  app
  "\"'(eval (app cons '+ (-> (app map (λ (a) ...) (app cdr a)) <-)) (env (())))\""
  254
  206
  39
  9
  206
  39
  245
  1
  1
  136
  #f
  469/103
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  ref-or-constructor
  "\"'(eval (match cdr-v ((cons cdr-c cdr-d) (-> cdr-d <-))) (env (())))\""
  254
  206
  39
  9
  206
  39
  245
  1
  1
  136
  #f
  469/103
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  ref-or-constructor
  "\"'(eval (app caddr (-> a <-)) (env (())))\""
  254
  206
  39
  9
  206
  39
  245
  1
  1
  136
  #f
  469/103
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (app cons (-> (app cons '+ (app map (λ (a) ...) (app cdr a))) <-) (app nil))\n  (env (())))\""
  256
  208
  39
  9
  208
  39
  247
  1
  1
  138
  #t
  235/52
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  ref-or-constructor
  "\"'(eval (app caddr (-> a <-)) (env (())))\""
  256
  208
  39
  9
  208
  39
  247
  1
  1
  138
  #f
  235/52
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  ref-or-constructor
  "\"'(eval\n  (app\n   cons\n   (-> a <-)\n   (app cons (app cons '+ (app map (λ (a) ...) (app cdr a))) (app nil)))\n  (env (())))\""
  257
  209
  39
  9
  209
  39
  248
  1
  1
  138
  #f
  87/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (app error (-> (app #f) <-) \"No derivation method available\")\n  (env (())))\""
  259
  211
  39
  9
  211
  39
  250
  1
  1
  140
  #t
  959/211
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  ref-or-constructor
  "\"'(eval (app car (-> a <-)) (env (())))\""
  259
  211
  39
  9
  211
  39
  250
  1
  1
  140
  #f
  959/211
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (app\n   cons\n   (app\n    cons\n    '*\n    (app\n     cons\n     (app caddr a)\n     (app cons (app caddr a) (app cons (app deriv (app caddr a)) (app nil)))))\n   (-> (app nil) <-))\n  (env (())))\""
  261
  213
  39
  9
  213
  39
  252
  1
  1
  142
  #t
  961/213
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  app
  "\"'(eval (app eq? (-> (app car a) <-) '+) (env (())))\""
  261
  213
  39
  9
  213
  39
  252
  1
  1
  142
  #f
  961/213
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  app
  "\"'(eval (match pair?-v ((cons pair?-c pair?-d) (-> (app #t) <-)) _) (env (())))\""
  261
  213
  39
  9
  213
  39
  252
  1
  1
  142
  #t
  961/213
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (match\n   (app eq? (app car a) '-)\n   (#f)\n   (_ (-> (app cons '- (app map deriv (app cdr a))) <-)))\n  (env (())))\""
  261
  213
  39
  9
  213
  39
  252
  1
  1
  142
  #t
  961/213
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  ref-or-constructor
  "\"'(eval (app cdr (-> a <-)) (env (())))\""
  261
  213
  39
  9
  213
  39
  252
  1
  1
  142
  #f
  961/213
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  app
  "\"'(eval (app cdr (-> (app cdr cadr-v) <-)) (env (())))\""
  261
  213
  39
  9
  213
  39
  252
  1
  1
  142
  #f
  961/213
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  app
  "\"'(eval (match (-> (app eq? (app car a) '-) <-) (#f) _) (env (())))\""
  261
  213
  39
  9
  213
  39
  252
  1
  1
  142
  #f
  961/213
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  ref-or-constructor
  "\"'(eval (app cdr (-> cadr-v <-)) (env (())))\""
  261
  213
  39
  9
  213
  39
  252
  1
  1
  142
  #f
  961/213
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  app
  "\"'(eval (λ (cadr-v) (-> (app car (app cdr cadr-v)) <-)) (env (())))\""
  261
  213
  39
  9
  213
  39
  252
  1
  1
  142
  #f
  961/213
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  match
  "\"'(eval (λ (cdr-v) (-> (match cdr-v ...) <-)) (env (())))\""
  261
  213
  39
  9
  213
  39
  252
  1
  1
  142
  #f
  961/213
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  app
  "\"'(eval (match (-> (app eq? a 'x) <-) (#f) _) (env (())))\""
  261
  213
  39
  9
  213
  39
  252
  1
  1
  142
  #f
  961/213
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  ref-or-constructor
  "\"'(eval (app caddr (-> a <-)) (env (())))\""
  261
  213
  39
  9
  213
  39
  252
  1
  1
  142
  #f
  961/213
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (app\n   cons\n   (->\n    (app\n     cons\n     '/\n     (app\n      cons\n      (app cadr a)\n      (app\n       cons\n       (app\n        cons\n        '*\n        (app\n         cons\n         (app caddr a)\n         (app\n          cons\n          (app caddr a)\n          (app cons (app deriv (app caddr a)) (app nil)))))\n       (app nil))))\n    <-)\n   (app nil))\n  (env (())))\""
  263
  215
  39
  9
  215
  39
  254
  1
  1
  144
  #t
  963/215
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  match
  "\"'(eval (λ (pair?-v) (-> (match pair?-v ...) <-)) (env (())))\""
  263
  215
  39
  9
  215
  39
  254
  1
  1
  144
  #f
  963/215
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  app
  "\"'(eval (match (-> (app eq? (app car a) '/) <-) (#f) _) (env (())))\""
  263
  215
  39
  9
  215
  39
  254
  1
  1
  144
  #f
  963/215
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (app\n   cons\n   (app deriv (app cadr a))\n   (-> (app cons (app caddr a) (app nil)) <-))\n  (env (())))\""
  265
  217
  39
  9
  217
  39
  256
  1
  1
  146
  #t
  965/217
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (app\n   cons\n   (app cons '* (app cons 'b (app cons 'x (app nil))))\n   (-> (app cons 5 (app nil)) <-))\n  (env ()))\""
  265
  217
  39
  9
  217
  39
  256
  1
  1
  146
  #t
  965/217
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  app
  "\"'(eval (app cons (app deriv a) (-> (app cons a (app nil)) <-)) (env (() ())))\""
  267
  219
  39
  9
  219
  39
  258
  1
  1
  148
  #t
  967/219
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (app cons (app cons '+ (app map (λ (a) ...) (app cdr a))) (-> (app nil) <-))\n  (env (())))\""
  269
  221
  39
  9
  221
  39
  260
  1
  1
  150
  #t
  57/13
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (app\n   cons\n   (-> (app cons '* (app cons 'b (app cons 'x (app nil)))) <-)\n   (app cons 5 (app nil)))\n  (env ()))\""
  269
  221
  39
  9
  221
  39
  260
  1
  1
  150
  #t
  57/13
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  app
  "\"'(eval (app cons '+ (-> (app map deriv (app cdr a)) <-)) (env (())))\""
  270
  222
  39
  9
  222
  39
  261
  1
  1
  150
  #f
  971/222
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  app
  "\"'(eval (app deriv (-> (app cadr a) <-)) (env (())))\""
  270
  222
  39
  9
  222
  39
  261
  1
  1
  150
  #f
  971/222
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  app
  "\"'(eval (match (-> (app eq? (app car a) '+) <-) (#f) _) (env (())))\""
  270
  222
  39
  9
  222
  39
  261
  1
  1
  150
  #f
  971/222
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (app\n   cons\n   (->\n    (app\n     cons\n     '/\n     (app cons (app deriv (app cadr a)) (app cons (app caddr a) (app nil))))\n    <-)\n   (app\n    cons\n    (app\n     cons\n     '/\n     (app\n      cons\n      (app cadr a)\n      (app\n       cons\n       (app\n        cons\n        '*\n        (app\n         cons\n         (app caddr a)\n         (app\n          cons\n          (app caddr a)\n          (app cons (app deriv (app caddr a)) (app nil)))))\n       (app nil))))\n    (app nil)))\n  (env (())))\""
  272
  224
  39
  9
  224
  39
  263
  1
  1
  152
  #t
  139/32
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  ref-or-constructor
  "\"'(eval (app eq? (-> a <-) 'x) (env (())))\""
  272
  224
  39
  9
  224
  39
  263
  1
  1
  152
  #f
  139/32
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (app\n   cons\n   '/\n   (->\n    (app cons (app deriv (app cadr a)) (app cons (app caddr a) (app nil)))\n    <-))\n  (env (())))\""
  274
  226
  39
  9
  226
  39
  265
  1
  1
  154
  #t
  975/226
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  app
  "\"'(eval (app not (-> (app pair? a) <-)) (env (())))\""
  274
  226
  39
  9
  226
  39
  265
  1
  1
  154
  #f
  975/226
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  ref-or-constructor
  "\"'(eval (app cdr (-> cadr-v <-)) (env (())))\""
  274
  226
  39
  9
  226
  39
  265
  1
  1
  154
  #f
  975/226
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (app\n   cons\n   (-> (app caddr a) <-)\n   (app cons (app deriv (app caddr a)) (app nil)))\n  (env (())))\""
  276
  228
  39
  9
  228
  39
  267
  1
  1
  155
  #f
  248/57
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  letrec*
  "\"'(eval (lettypes cons ... nil (letrec* (car ... deriv) ...)) (env ()))\""
  276
  228
  39
  9
  228
  39
  267
  1
  1
  155
  #f
  248/57
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  app
  "\"'(eval (app cons 5 (-> (app nil) <-)) (env ()))\""
  276
  228
  39
  9
  228
  39
  267
  1
  1
  155
  #t
  248/57
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  ref-or-constructor
  "\"'(eval (app map map-f (-> map-d <-)) (env (())))\""
  276
  228
  39
  9
  228
  39
  267
  1
  1
  155
  #f
  248/57
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (app cons '/ (-> (app cons (app deriv a) (app cons a (app nil))) <-))\n  (env (() ())))\""
  278
  230
  39
  9
  230
  39
  269
  1
  1
  157
  #t
  497/115
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (app\n   cons\n   '*\n   (->\n    (app\n     cons\n     a\n     (app cons (app cons '+ (app map (λ (a) ...) (app cdr a))) (app nil)))\n    <-))\n  (env (())))\""
  280
  232
  39
  9
  232
  39
  271
  1
  1
  159
  #t
  249/58
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  app
  "\"'(eval (app map (λ (a) ...) (-> (app cdr a) <-)) (env (())))\""
  280
  232
  39
  9
  232
  39
  271
  1
  1
  159
  #f
  249/58
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  app
  "\"'(eval (app cons 'a (-> (app cons 'x (app cons 'x (app nil))) <-)) (env ()))\""
  280
  232
  39
  9
  232
  39
  271
  1
  1
  159
  #t
  249/58
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  app
  "\"'(eval (app cons 'x (-> (app cons 'x (app nil)) <-)) (env ()))\""
  280
  232
  39
  9
  232
  39
  271
  1
  1
  159
  #t
  249/58
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  app
  "\"'(eval (app car (-> (app cdr cadr-v) <-)) (env (())))\""
  280
  232
  39
  9
  232
  39
  271
  1
  1
  159
  #f
  249/58
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (match\n   (app eq? (app car a) '/)\n   ((#f) (-> (app error (app #f) \"No derivation method available\") <-))\n   _)\n  (env (())))\""
  280
  232
  39
  9
  232
  39
  271
  1
  1
  159
  #t
  249/58
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  match
  "\"'(eval\n  (match\n   (app not (app pair? a))\n   ((#f) (-> (match (app eq? (app car a) '+) ...) <-))\n   _)\n  (env (())))\""
  280
  232
  39
  9
  232
  39
  271
  1
  1
  159
  #f
  249/58
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  ref-or-constructor
  "\"'(eval (app car (-> a <-)) (env (())))\""
  280
  232
  39
  9
  232
  39
  271
  1
  1
  159
  #f
  249/58
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  app
  "\"'(eval (app cons (-> (app caddr a) <-) (app nil)) (env (())))\""
  282
  234
  39
  9
  234
  39
  273
  1
  1
  160
  #f
  1013/234
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  ref-or-constructor
  "\"'(eval (match (-> car-v <-) (cons car-c car-d)) (env (())))\""
  282
  234
  39
  9
  234
  39
  273
  1
  1
  160
  #f
  1013/234
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  app
  "\"'(eval (app cons 3 (-> (app cons 'x (app cons 'x (app nil))) <-)) (env ()))\""
  282
  234
  39
  9
  234
  39
  273
  1
  1
  160
  #t
  1013/234
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (app cons '* (-> (app cons 'a (app cons 'x (app cons 'x (app nil)))) <-))\n  (env ()))\""
  282
  234
  39
  9
  234
  39
  273
  1
  1
  160
  #t
  1013/234
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (app\n   deriv\n   (->\n    (app\n     cons\n     '+\n     (app\n      cons\n      (app cons '* (app cons 3 (app cons 'x (app cons 'x (app nil)))))\n      (app\n       cons\n       (app cons '* (app cons 'a (app cons 'x (app cons 'x (app nil)))))\n       (app\n        cons\n        (app cons '* (app cons 'b (app cons 'x (app nil))))\n        (app cons 5 (app nil))))))\n    <-))\n  (env ()))\""
  282
  234
  39
  9
  234
  39
  273
  1
  1
  160
  #t
  1013/234
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  match
  "\"'(eval\n  (match\n   (app eq? (app car a) '*)\n   ((#f) (-> (match (app eq? (app car a) '/) ...) <-))\n   _)\n  (env (())))\""
  282
  234
  39
  9
  234
  39
  273
  1
  1
  160
  #f
  1013/234
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  match
  "\"'(eval (λ (car-v) (-> (match car-v ...) <-)) (env (())))\""
  282
  234
  39
  9
  234
  39
  273
  1
  1
  160
  #f
  1013/234
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  match
  "\"'(eval (λ (map-f map-l) (-> (match map-l ...) <-)) (env (())))\""
  282
  234
  39
  9
  234
  39
  273
  1
  1
  160
  #f
  1013/234
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  match
  "\"'(eval\n  (match\n   (app eq? (app car a) '+)\n   ((#f) (-> (match (app eq? (app car a) '-) ...) <-))\n   _)\n  (env (())))\""
  282
  234
  39
  9
  234
  39
  273
  1
  1
  160
  #f
  1013/234
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  app
  "\"'(eval (app cons 'x (-> (app nil) <-)) (env ()))\""
  282
  234
  39
  9
  234
  39
  273
  1
  1
  160
  #t
  1013/234
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  ref-or-constructor
  "\"'(eval (app pair? (-> a <-)) (env (())))\""
  282
  234
  39
  9
  234
  39
  273
  1
  1
  160
  #f
  1013/234
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (app\n   cons\n   (-> (app cons '* (app cons 3 (app cons 'x (app cons 'x (app nil))))) <-)\n   (app\n    cons\n    (app cons '* (app cons 'a (app cons 'x (app cons 'x (app nil)))))\n    (app\n     cons\n     (app cons '* (app cons 'b (app cons 'x (app nil))))\n     (app cons 5 (app nil)))))\n  (env ()))\""
  282
  234
  39
  9
  234
  39
  273
  1
  1
  160
  #t
  1013/234
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  app
  "\"'(eval (app deriv (-> (app caddr a) <-)) (env (())))\""
  282
  234
  39
  9
  234
  39
  273
  1
  1
  160
  #f
  1013/234
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (app\n   cons\n   '*\n   (->\n    (app\n     cons\n     (app caddr a)\n     (app cons (app caddr a) (app cons (app deriv (app caddr a)) (app nil))))\n    <-))\n  (env (())))\""
  284
  236
  39
  9
  236
  39
  275
  1
  1
  162
  #t
  1015/236
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  ref-or-constructor
  "\"'(eval (app cons (-> a <-) (app nil)) (env (() ())))\""
  285
  237
  39
  9
  237
  39
  276
  1
  1
  162
  #f
  13/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  ref-or-constructor
  "\"'(eval (app car (-> a <-)) (env (())))\""
  285
  237
  39
  9
  237
  39
  276
  1
  1
  162
  #f
  13/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  ref-or-constructor
  "\"'(eval (app map-f (-> map-c <-)) (env (())))\""
  285
  237
  39
  9
  237
  39
  276
  1
  1
  162
  #f
  13/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (app\n   cons\n   (app\n    cons\n    '/\n    (app\n     cons\n     (app cadr a)\n     (app\n      cons\n      (app\n       cons\n       '*\n       (app\n        cons\n        (app caddr a)\n        (app\n         cons\n         (app caddr a)\n         (app cons (app deriv (app caddr a)) (app nil)))))\n      (app nil))))\n   (-> (app nil) <-))\n  (env (())))\""
  287
  239
  39
  9
  239
  39
  278
  1
  1
  164
  #t
  1029/239
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (letrec*\n   (car ... deriv)\n   (->\n    (app\n     deriv\n     (app\n      cons\n      '+\n      (app\n       cons\n       (app cons '* (app cons 3 (app cons 'x (app cons 'x (app nil)))))\n       (app\n        cons\n        (app cons '* (app cons 'a (app cons 'x (app cons 'x (app nil)))))\n        (app\n         cons\n         (app cons '* (app cons 'b (app cons 'x (app nil))))\n         (app cons 5 (app nil)))))))\n    <-))\n  (env ()))\""
  287
  239
  39
  9
  239
  39
  278
  1
  1
  164
  #f
  1029/239
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  ref-or-constructor
  "\"'(eval (app deriv (-> a <-)) (env (() ())))\""
  287
  239
  39
  9
  239
  39
  278
  1
  1
  164
  #f
  1029/239
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (app\n   cons\n   (app cadr a)\n   (->\n    (app\n     cons\n     (app\n      cons\n      '*\n      (app\n       cons\n       (app caddr a)\n       (app\n        cons\n        (app caddr a)\n        (app cons (app deriv (app caddr a)) (app nil)))))\n     (app nil))\n    <-))\n  (env (())))\""
  289
  241
  39
  9
  241
  39
  280
  1
  1
  166
  #t
  1031/241
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (app\n   cons\n   (app cons '* (app cons 3 (app cons 'x (app cons 'x (app nil)))))\n   (->\n    (app\n     cons\n     (app cons '* (app cons 'a (app cons 'x (app cons 'x (app nil)))))\n     (app\n      cons\n      (app cons '* (app cons 'b (app cons 'x (app nil))))\n      (app cons 5 (app nil))))\n    <-))\n  (env ()))\""
  289
  241
  39
  9
  241
  39
  280
  1
  1
  166
  #t
  1031/241
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  app
  "\"'(eval (app map deriv (-> (app cdr a) <-)) (env (())))\""
  289
  241
  39
  9
  241
  39
  280
  1
  1
  166
  #f
  1031/241
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (app\n   cons\n   (app caddr a)\n   (->\n    (app cons (app caddr a) (app cons (app deriv (app caddr a)) (app nil)))\n    <-))\n  (env (())))\""
  291
  243
  39
  9
  243
  39
  282
  1
  1
  168
  #t
  1033/243
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (app\n   cons\n   '-\n   (->\n    (app\n     cons\n     (app\n      cons\n      '/\n      (app cons (app deriv (app cadr a)) (app cons (app caddr a) (app nil))))\n     (app\n      cons\n      (app\n       cons\n       '/\n       (app\n        cons\n        (app cadr a)\n        (app\n         cons\n         (app\n          cons\n          '*\n          (app\n           cons\n           (app caddr a)\n           (app\n            cons\n            (app caddr a)\n            (app cons (app deriv (app caddr a)) (app nil)))))\n         (app nil))))\n      (app nil)))\n    <-))\n  (env (())))\""
  293
  245
  39
  9
  245
  39
  284
  1
  1
  170
  #t
  207/49
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (app\n   cons\n   (-> (app deriv (app cadr a)) <-)\n   (app cons (app caddr a) (app nil)))\n  (env (())))\""
  295
  247
  39
  9
  247
  39
  286
  1
  1
  171
  #f
  1043/247
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  ref-or-constructor
  "\"'(eval (match car-v ((cons car-c car-d) (-> car-c <-))) (env (())))\""
  295
  247
  39
  9
  247
  39
  286
  1
  1
  171
  #f
  1043/247
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  match
  "\"'(eval\n  (match (app not (app pair? a)) (#f) (_ (-> (match (app eq? a 'x) ...) <-)))\n  (env (())))\""
  295
  247
  39
  9
  247
  39
  286
  1
  1
  171
  #f
  1043/247
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  app
  "\"'(eval (app cons (app caddr a) (-> (app nil) <-)) (env (())))\""
  297
  249
  39
  9
  249
  39
  288
  1
  1
  173
  #t
  1045/249
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  ref-or-constructor
  "\"'(eval (app cdr (-> a <-)) (env (())))\""
  297
  249
  39
  9
  249
  39
  288
  1
  1
  173
  #f
  1045/249
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  ref-or-constructor
  "\"'(eval (app cdr (-> a <-)) (env (())))\""
  297
  249
  39
  9
  249
  39
  288
  1
  1
  173
  #f
  1045/249
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  app
  "\"'(eval (app eq? (-> (app car a) <-) '*) (env (())))\""
  297
  249
  39
  9
  249
  39
  288
  1
  1
  173
  #f
  1045/249
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (app cons '* (-> (app cons 3 (app cons 'x (app cons 'x (app nil)))) <-))\n  (env ()))\""
  297
  249
  39
  9
  249
  39
  288
  1
  1
  173
  #t
  1045/249
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  ref-or-constructor
  "\"'(eval (match (-> cdr-v <-) (cons cdr-c cdr-d)) (env (())))\""
  297
  249
  39
  9
  249
  39
  288
  1
  1
  173
  #f
  1045/249
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  app
  "\"'(eval (app cons '* (-> (app cons 'b (app cons 'x (app nil))) <-)) (env ()))\""
  297
  249
  39
  9
  249
  39
  288
  1
  1
  173
  #t
  1045/249
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  app
  "\"'(eval\n  (match\n   (app eq? (app car a) '/)\n   (#f)\n   (_\n    (->\n     (app\n      cons\n      '-\n      (app\n       cons\n       (app\n        cons\n        '/\n        (app cons (app deriv (app cadr a)) (app cons (app caddr a) (app nil))))\n       (app\n        cons\n        (app\n         cons\n         '/\n         (app\n          cons\n          (app cadr a)\n          (app\n           cons\n           (app\n            cons\n            '*\n            (app\n             cons\n             (app caddr a)\n             (app\n              cons\n              (app caddr a)\n              (app cons (app deriv (app caddr a)) (app nil)))))\n           (app nil))))\n        (app nil))))\n     <-)))\n  (env (())))\""
  297
  249
  39
  9
  249
  39
  288
  1
  1
  173
  #t
  1045/249
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  app
  "\"'(eval (app cons 'x (-> (app cons 'x (app nil)) <-)) (env ()))\""
  297
  249
  39
  9
  249
  39
  288
  1
  1
  173
  #t
  1045/249
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  ref-or-constructor
  "\"'(eval (app cadr (-> a <-)) (env (())))\""
  297
  249
  39
  9
  249
  39
  288
  1
  1
  173
  #f
  1045/249
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  ref-or-constructor
  "\"'(eval (match (-> pair?-v <-) (cons pair?-c pair?-d) _) (env (())))\""
  297
  249
  39
  9
  249
  39
  288
  1
  1
  173
  #f
  1045/249
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  app
  "\"'(eval (app map deriv (-> (app cdr a) <-)) (env (())))\""
  297
  249
  39
  9
  249
  39
  288
  1
  1
  173
  #f
  1045/249
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  app
  "\"'(eval (app eq? (-> (app car a) <-) '/) (env (())))\""
  297
  249
  39
  9
  249
  39
  288
  1
  1
  173
  #f
  1045/249
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  deriv
  0
  25
  130
  app
  "\"'(eval (app car (-> (app cdr (app cdr cadr-v)) <-)) (env (())))\""
  297
  249
  39
  9
  249
  39
  288
  1
  1
  173
  #f
  1045/249
  ((0 0 0) (0 0 0) (0 0 0)))
