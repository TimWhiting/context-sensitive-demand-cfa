'(clean-cache
  mj09
  0
  15
  21
  let
  "\"'(eval ((top) let (h) ...) (env ()))\""
  46
  31
  10
  5
  31
  10
  41
  1
  1
  15
  #f
  47/31
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  0
  15
  21
  let
  "\"'(eval (λ (b) (-> (let (g) ...) <-)) (env (())))\""
  39
  25
  10
  4
  25
  10
  35
  1
  1
  13
  #f
  37/25
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  0
  15
  21
  ref-or-constructor
  "\"'(eval (λ (z) (-> z <-)) (env (() ())))\""
  32
  19
  10
  3
  19
  10
  29
  1
  1
  11
  #f
  27/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  0
  15
  21
  let
  "\"'(eval (let (g) (-> (let (f) ...) <-)) (env (())))\""
  38
  24
  10
  4
  24
  10
  34
  1
  1
  13
  #f
  35/24
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  0
  15
  21
  match
  "\"'(eval (λ (k) (-> (match b ...) <-)) (env (() ())))\""
  26
  16
  8
  2
  16
  8
  24
  1
  1
  11
  #f
  21/16
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  0
  15
  21
  app
  "\"'(eval (match b (#f) (_ (-> (app k 1) <-))) (env (() ())))\""
  15
  8
  5
  2
  8
  5
  13
  1
  1
  6
  #f
  5/4
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  0
  15
  21
  ref-or-constructor
  "\"'(eval (app (-> k <-) 1) (env (() ())))\""
  4
  2
  2
  0
  2
  2
  4
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  0
  15
  21
  app
  "\"'(eval (match b ((#f) (-> (app k 2) <-)) _) (env (() ())))\""
  15
  8
  5
  2
  8
  5
  13
  1
  1
  6
  #f
  5/4
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  0
  15
  21
  ref-or-constructor
  "\"'(eval (app (-> k <-) 2) (env (() ())))\""
  4
  2
  2
  0
  2
  2
  4
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  0
  15
  21
  ref-or-constructor
  "\"'(eval (match (-> b <-) (#f) _) (env (() ())))\""
  8
  5
  3
  0
  5
  3
  8
  1
  1
  4
  #f
  6/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  0
  15
  21
  let
  "\"'(eval (let (f) (-> (let (y) ...) <-)) (env (())))\""
  37
  23
  10
  4
  23
  10
  33
  1
  1
  13
  #f
  33/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  0
  15
  21
  app
  "\"'(eval (let (... () (y (-> (app f (λ (x) ...)) <-)) () ...) ...) (env (())))\""
  28
  17
  8
  3
  17
  8
  25
  1
  1
  11
  #f
  23/17
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  0
  15
  21
  ref-or-constructor
  "\"'(eval (λ (x) (-> x <-)) (env (() ())))\""
  9
  5
  3
  1
  5
  3
  8
  1
  1
  4
  #f
  6/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  0
  15
  21
  app
  "\"'(eval (let (y) (-> (app g y) <-)) (env (())))\""
  36
  22
  10
  4
  22
  10
  32
  1
  1
  13
  #f
  31/22
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  0
  15
  21
  ref-or-constructor
  "\"'(eval (app g (-> y <-)) (env (())))\""
  29
  18
  8
  3
  18
  8
  26
  1
  1
  11
  #f
  25/18
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  0
  15
  21
  let
  "\"'(eval (let (h) (-> (let (x ... y) ...) <-)) (env ()))\""
  45
  30
  10
  5
  30
  10
  40
  1
  1
  15
  #f
  3/2
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  0
  15
  21
  app
  "\"'(eval (let (... x (y (-> (app h (app #f)) <-)) () ...) ...) (env ()))\""
  43
  28
  10
  5
  28
  10
  38
  1
  1
  15
  #f
  41/28
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  0
  15
  21
  app
  "\"'(eval (app h (-> (app #f) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  0
  15
  21
  app
  "\"'(eval (let (... () (x (-> (app h (app #t)) <-)) y ...) ...) (env ()))\""
  43
  28
  10
  5
  28
  10
  38
  1
  1
  15
  #f
  41/28
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  0
  15
  21
  app
  "\"'(eval (app h (-> (app #t) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  0
  15
  21
  ref-or-constructor
  "\"'(eval (let (x ... y) (-> y <-)) (env ()))\""
  44
  29
  10
  5
  29
  10
  39
  1
  1
  15
  #f
  43/29
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  0
  15
  21
  ref-or-constructor
  "\"'(eval (let (x ... y) (-> y <-)) (env ()))\""
  44
  29
  10
  5
  29
  10
  39
  1
  1
  15
  #f
  43/29
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  0
  15
  21
  ref-or-constructor
  "\"'(eval (λ (z) (-> z <-)) (env (() ())))\""
  44
  29
  10
  5
  29
  10
  39
  1
  1
  15
  #f
  43/29
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  0
  15
  21
  app
  "\"'(eval (let (y) (-> (app g y) <-)) (env (())))\""
  44
  29
  10
  5
  29
  10
  39
  1
  1
  15
  #f
  43/29
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  0
  15
  21
  app
  "\"'(eval (let (... x (y (-> (app h (app #f)) <-)) () ...) ...) (env ()))\""
  44
  29
  10
  5
  29
  10
  39
  1
  1
  15
  #f
  43/29
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  0
  15
  21
  ref-or-constructor
  "\"'(eval (app (-> k <-) 2) (env (() ())))\""
  44
  29
  10
  5
  29
  10
  39
  1
  1
  15
  #t
  43/29
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  0
  15
  21
  ref-or-constructor
  "\"'(eval (app g (-> y <-)) (env (())))\""
  44
  29
  10
  5
  29
  10
  39
  1
  1
  15
  #f
  43/29
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  0
  15
  21
  let
  "\"'(eval (λ (b) (-> (let (g) ...) <-)) (env (())))\""
  44
  29
  10
  5
  29
  10
  39
  1
  1
  15
  #f
  43/29
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  0
  15
  21
  let
  "\"'(eval (let (g) (-> (let (f) ...) <-)) (env (())))\""
  44
  29
  10
  5
  29
  10
  39
  1
  1
  15
  #f
  43/29
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  0
  15
  21
  ref-or-constructor
  "\"'(eval (λ (x) (-> x <-)) (env (() ())))\""
  44
  29
  10
  5
  29
  10
  39
  1
  1
  15
  #f
  43/29
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  0
  15
  21
  ref-or-constructor
  "\"'(eval (app (-> k <-) 1) (env (() ())))\""
  44
  29
  10
  5
  29
  10
  39
  1
  1
  15
  #t
  43/29
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  0
  15
  21
  app
  "\"'(eval (match b ((#f) (-> (app k 2) <-)) _) (env (() ())))\""
  44
  29
  10
  5
  29
  10
  39
  1
  1
  15
  #f
  43/29
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  0
  15
  21
  app
  "\"'(eval (match b (#f) (_ (-> (app k 1) <-))) (env (() ())))\""
  44
  29
  10
  5
  29
  10
  39
  1
  1
  15
  #f
  43/29
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  0
  15
  21
  app
  "\"'(eval (app h (-> (app #f) <-)) (env ()))\""
  44
  29
  10
  5
  29
  10
  39
  1
  1
  15
  #t
  43/29
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  0
  15
  21
  app
  "\"'(eval (let (... () (y (-> (app f (λ (x) ...)) <-)) () ...) ...) (env (())))\""
  44
  29
  10
  5
  29
  10
  39
  1
  1
  15
  #f
  43/29
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  0
  15
  21
  app
  "\"'(eval (app h (-> (app #t) <-)) (env ()))\""
  44
  29
  10
  5
  29
  10
  39
  1
  1
  15
  #t
  43/29
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  0
  15
  21
  let
  "\"'(eval ((top) let (h) ...) (env ()))\""
  46
  31
  10
  5
  31
  10
  41
  1
  1
  15
  #f
  47/31
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  0
  15
  21
  match
  "\"'(eval (λ (k) (-> (match b ...) <-)) (env (() ())))\""
  46
  31
  10
  5
  31
  10
  41
  1
  1
  15
  #f
  47/31
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  0
  15
  21
  ref-or-constructor
  "\"'(eval (match (-> b <-) (#f) _) (env (() ())))\""
  46
  31
  10
  5
  31
  10
  41
  1
  1
  15
  #f
  47/31
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  0
  15
  21
  let
  "\"'(eval (let (h) (-> (let (x ... y) ...) <-)) (env ()))\""
  46
  31
  10
  5
  31
  10
  41
  1
  1
  15
  #f
  47/31
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  0
  15
  21
  let
  "\"'(eval (let (f) (-> (let (y) ...) <-)) (env (())))\""
  46
  31
  10
  5
  31
  10
  41
  1
  1
  15
  #f
  47/31
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  0
  15
  21
  app
  "\"'(eval (let (... () (x (-> (app h (app #t)) <-)) y ...) ...) (env ()))\""
  48
  33
  10
  5
  33
  10
  43
  1
  1
  16
  #f
  50/33
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  0
  15
  21
  let
  "\"'(eval (let (f) (-> (let (y) ...) <-)) (env (())))\""
  37
  23
  10
  4
  23
  10
  33
  1
  1
  13
  #f
  33/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  0
  15
  21
  ref-or-constructor
  "\"'(eval (app (-> k <-) 1) (env (() ())))\""
  37
  23
  10
  4
  23
  10
  33
  1
  1
  13
  #t
  33/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  0
  15
  21
  app
  "\"'(eval (match b ((#f) (-> (app k 2) <-)) _) (env (() ())))\""
  37
  23
  10
  4
  23
  10
  33
  1
  1
  13
  #f
  33/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  0
  15
  21
  app
  "\"'(eval (match b (#f) (_ (-> (app k 1) <-))) (env (() ())))\""
  37
  23
  10
  4
  23
  10
  33
  1
  1
  13
  #f
  33/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  0
  15
  21
  app
  "\"'(eval (app h (-> (app #t) <-)) (env ()))\""
  37
  23
  10
  4
  23
  10
  33
  1
  1
  13
  #t
  33/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  0
  15
  21
  app
  "\"'(eval (let (y) (-> (app g y) <-)) (env (())))\""
  37
  23
  10
  4
  23
  10
  33
  1
  1
  13
  #f
  33/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  0
  15
  21
  ref-or-constructor
  "\"'(eval (app g (-> y <-)) (env (())))\""
  37
  23
  10
  4
  23
  10
  33
  1
  1
  13
  #f
  33/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  0
  15
  21
  let
  "\"'(eval (λ (b) (-> (let (g) ...) <-)) (env (())))\""
  39
  25
  10
  4
  25
  10
  35
  1
  1
  13
  #f
  37/25
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  0
  15
  21
  let
  "\"'(eval ((top) let (h) ...) (env ()))\""
  46
  31
  10
  5
  31
  10
  41
  1
  1
  15
  #f
  47/31
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  0
  15
  21
  app
  "\"'(eval (let (... () (y (-> (app f (λ (x) ...)) <-)) () ...) ...) (env (())))\""
  46
  31
  10
  5
  31
  10
  41
  1
  1
  15
  #f
  47/31
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  0
  15
  21
  ref-or-constructor
  "\"'(eval (λ (z) (-> z <-)) (env (() ())))\""
  46
  31
  10
  5
  31
  10
  41
  1
  1
  15
  #f
  47/31
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  0
  15
  21
  app
  "\"'(eval (let (... x (y (-> (app h (app #f)) <-)) () ...) ...) (env ()))\""
  46
  31
  10
  5
  31
  10
  41
  1
  1
  15
  #f
  47/31
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  0
  15
  21
  ref-or-constructor
  "\"'(eval (λ (x) (-> x <-)) (env (() ())))\""
  46
  31
  10
  5
  31
  10
  41
  1
  1
  15
  #f
  47/31
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  0
  15
  21
  let
  "\"'(eval (let (g) (-> (let (f) ...) <-)) (env (())))\""
  46
  31
  10
  5
  31
  10
  41
  1
  1
  15
  #f
  47/31
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  0
  15
  21
  ref-or-constructor
  "\"'(eval (match (-> b <-) (#f) _) (env (() ())))\""
  46
  31
  10
  5
  31
  10
  41
  1
  1
  15
  #f
  47/31
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  0
  15
  21
  match
  "\"'(eval (λ (k) (-> (match b ...) <-)) (env (() ())))\""
  46
  31
  10
  5
  31
  10
  41
  1
  1
  15
  #f
  47/31
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  0
  15
  21
  ref-or-constructor
  "\"'(eval (app (-> k <-) 2) (env (() ())))\""
  46
  31
  10
  5
  31
  10
  41
  1
  1
  15
  #t
  47/31
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  0
  15
  21
  app
  "\"'(eval (let (... () (x (-> (app h (app #t)) <-)) y ...) ...) (env ()))\""
  48
  33
  10
  5
  33
  10
  43
  1
  1
  16
  #f
  50/33
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  0
  15
  21
  ref-or-constructor
  "\"'(eval (let (x ... y) (-> y <-)) (env ()))\""
  48
  33
  10
  5
  33
  10
  43
  1
  1
  16
  #f
  50/33
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  0
  15
  21
  let
  "\"'(eval (let (h) (-> (let (x ... y) ...) <-)) (env ()))\""
  48
  33
  10
  5
  33
  10
  43
  1
  1
  16
  #f
  50/33
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  0
  15
  21
  app
  "\"'(eval (app h (-> (app #f) <-)) (env ()))\""
  48
  33
  10
  5
  33
  10
  43
  1
  1
  16
  #t
  50/33
  ((0 0 0) (0 0 0) (0 0 0)))
