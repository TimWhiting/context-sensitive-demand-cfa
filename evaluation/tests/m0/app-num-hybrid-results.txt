'(expression: (let ((x (λ (y) y))) (let ((_ (app x 1))) (app x 2))))
(list 'query: '(top) (envenv '()))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list 'query: '(let ((-> x = (λ (y) y) <-)) bod) (envenv '()))
'(clos/con: ((λ (y) y)))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(λ (y) (-> y <-)) (envenv '(())))
'(clos/con: ⊥)
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(let (x) (-> (let ((_ (app x 1))) (app x 2)) <-)) (envenv '()))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list 'query: '(let ((-> _ = (app x 1) <-)) bod) (envenv '()))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list 'query: '(app x (-> 1 <-)) (envenv '()))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list 'query: '(app (-> x <-) 1) (envenv '()))
'(clos/con: ((λ (y) y)))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(let (_) (-> (app x 2) <-)) (envenv '()))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list 'query: '(app x (-> 2 <-)) (envenv '()))
'(clos/con: ⊥)
'(literals: (2 ⊥ ⊥ ⊥))
(list 'query: '(app (-> x <-) 2) (envenv '()))
'(clos/con: ((λ (y) y)))
'(literals: (⊥ ⊥ ⊥ ⊥))
