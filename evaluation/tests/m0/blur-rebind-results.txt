'(expression:
  (letrec ((id (λ (x) x))
           (blur (λ (y) y))
           (lp
            (λ (a n)
              (match
               (app <= n 1)
               (#t (app id a))
               (#f
                (let* ((r (app (app blur id) #t)) (s (app (app blur id) #f)))
                  (app not (app (app blur lp) s (app - n 1)))))))))
    (app lp #f 2)))
(list 'query: '(app (-> (app blur lp) <-) s (app - n 1)) (flatenv '()))
(list
 'clos/con:
 (list
  (list '(λ (x) x) (flatenv '()))
  (list
   '(λ (a n)
      (match
       (app <= n 1)
       (#t (app id a))
       (#f
        (let* ((r (app (app blur id) #t)) (s (app (app blur id) #f)))
          (app not (app (app blur lp) s (app - n 1)))))))
   (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(top) (flatenv '()))
(list
 'clos/con:
 (list
  (list #f (flatenv '()))
  (list #f (flatenv '()))
  (list #t (flatenv '()))
  (list #t (flatenv '()))
  (list #f (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app lp #f (-> 2 <-)) (flatenv '()))
'(clos/con: ⊥)
'(literals: (2 ⊥ ⊥ ⊥))
(list
 'query:
 '(app not (-> (app (app blur lp) s (app - n 1)) <-))
 (flatenv '()))
(list
 'clos/con:
 (list
  (list #f (flatenv '()))
  (list #f (flatenv '()))
  (list #t (flatenv '()))
  (list #t (flatenv '()))
  (list #f (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(letrec (id
           blur
           (->
            lp
            =
            (λ (a n)
              (match
               (app <= n 1)
               (#t (app id a))
               (#f
                (let* ((r (app (app blur id) #t)) (s (app (app blur id) #f)))
                  (app not (app (app blur lp) s (app - n 1)))))))
            <-))
    bod)
 (flatenv '()))
(list
 'clos/con:
 (list
  (list
   '(λ (a n)
      (match
       (app <= n 1)
       (#t (app id a))
       (#f
        (let* ((r (app (app blur id) #t)) (s (app (app blur id) #f)))
          (app not (app (app blur lp) s (app - n 1)))))))
   (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (a n)
    (->
     (match
      (app <= n 1)
      (#t (app id a))
      (#f
       (let* ((r (app (app blur id) #t)) (s (app (app blur id) #f)))
         (app not (app (app blur lp) s (app - n 1))))))
     <-))
 (flatenv '()))
(list
 'clos/con:
 (list
  (list #f (flatenv '()))
  (list #f (flatenv '()))
  (list #t (flatenv '()))
  (list #t (flatenv '()))
  (list #f (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app blur (-> lp <-)) (flatenv '()))
(list
 'clos/con:
 (list
  (list
   '(λ (a n)
      (match
       (app <= n 1)
       (#t (app id a))
       (#f
        (let* ((r (app (app blur id) #t)) (s (app (app blur id) #f)))
          (app not (app (app blur lp) s (app - n 1)))))))
   (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app (-> blur <-) id) (flatenv '()))
(list 'clos/con: (list (list '(λ (y) y) (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app (-> <= <-) n 1) (flatenv '()))
'(clos/con: (#<procedure:do-lte>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app (-> id <-) a) (flatenv '()))
(list 'clos/con: (list (list '(λ (x) x) (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app (-> blur <-) lp) (flatenv '()))
(list 'clos/con: (list (list '(λ (y) y) (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app <= n 1)
   (-> #t (app id a) <-)
   (#f
    (let* ((r (app (app blur id) #t)) (s (app (app blur id) #f)))
      (app not (app (app blur lp) s (app - n 1))))))
 (flatenv '()))
(list
 'clos/con:
 (list
  (list #f (flatenv '()))
  (list #t (flatenv '()))
  (list #f (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(let* (r (-> s = (app (app blur id) #f) <-)) bod) (flatenv '()))
(list
 'clos/con:
 (list
  (list #f (flatenv '()))
  (list #t (flatenv '()))
  (list #f (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app blur (-> id <-)) (flatenv '()))
(list 'clos/con: (list (list '(λ (x) x) (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app <= n 1) <-)
   (#t (app id a))
   (#f
    (let* ((r (app (app blur id) #t)) (s (app (app blur id) #f)))
      (app not (app (app blur lp) s (app - n 1))))))
 (flatenv '()))
(list 'clos/con: (list (list #t (flatenv '())) (list #f (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app - (-> n <-) 1) (flatenv '()))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list 'query: '(app - n (-> 1 <-)) (flatenv '()))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list 'query: '(let* ((-> r = (app (app blur id) #t) <-) s) bod) (flatenv '()))
(list
 'clos/con:
 (list
  (list #f (flatenv '()))
  (list #t (flatenv '()))
  (list #f (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app (-> - <-) n 1) (flatenv '()))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(λ (y) (-> y <-)) (flatenv '()))
(list
 'clos/con:
 (list
  (list '(λ (x) x) (flatenv '()))
  (list
   '(λ (a n)
      (match
       (app <= n 1)
       (#t (app id a))
       (#f
        (let* ((r (app (app blur id) #t)) (s (app (app blur id) #f)))
          (app not (app (app blur lp) s (app - n 1)))))))
   (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(let* (r s) (-> (app not (app (app blur lp) s (app - n 1))) <-))
 (flatenv '()))
(list 'clos/con: (list (list #f (flatenv '())) (list #t (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(letrec ((-> id = (λ (x) x) <-) blur lp) bod) (flatenv '()))
(list 'clos/con: (list (list '(λ (x) x) (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app (app blur id) (-> #t <-)) (flatenv '()))
(list 'clos/con: (list (list #t (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app id (-> a <-)) (flatenv '()))
(list
 'clos/con:
 (list
  (list #f (flatenv '()))
  (list #t (flatenv '()))
  (list #f (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> not <-) (app (app blur lp) s (app - n 1)))
 (flatenv '()))
'(clos/con: (#<procedure:do-not>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(λ (x) (-> x <-)) (flatenv '()))
(list
 'clos/con:
 (list
  (list #f (flatenv '()))
  (list #t (flatenv '()))
  (list #f (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(letrec (id blur lp) (-> (app lp #f 2) <-)) (flatenv '()))
(list
 'clos/con:
 (list
  (list #f (flatenv '()))
  (list #f (flatenv '()))
  (list #t (flatenv '()))
  (list #t (flatenv '()))
  (list #f (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app (-> blur <-) id) (flatenv '()))
(list 'clos/con: (list (list '(λ (y) y) (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app (app blur lp) (-> s <-) (app - n 1)) (flatenv '()))
(list
 'clos/con:
 (list
  (list #f (flatenv '()))
  (list #t (flatenv '()))
  (list #f (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app (-> (app blur id) <-) #t) (flatenv '()))
(list
 'clos/con:
 (list
  (list '(λ (x) x) (flatenv '()))
  (list
   '(λ (a n)
      (match
       (app <= n 1)
       (#t (app id a))
       (#f
        (let* ((r (app (app blur id) #t)) (s (app (app blur id) #f)))
          (app not (app (app blur lp) s (app - n 1)))))))
   (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app blur (-> id <-)) (flatenv '()))
(list 'clos/con: (list (list '(λ (x) x) (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app <= (-> n <-) 1) (flatenv '()))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list 'query: '(letrec (id (-> blur = (λ (y) y) <-) lp) bod) (flatenv '()))
(list 'clos/con: (list (list '(λ (y) y) (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app (app blur lp) s (-> (app - n 1) <-)) (flatenv '()))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list 'query: '(app (app blur id) (-> #f <-)) (flatenv '()))
(list 'clos/con: (list (list #f (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app lp (-> #f <-) 2) (flatenv '()))
(list 'clos/con: (list (list #f (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app (-> lp <-) #f 2) (flatenv '()))
(list
 'clos/con:
 (list
  (list
   '(λ (a n)
      (match
       (app <= n 1)
       (#t (app id a))
       (#f
        (let* ((r (app (app blur id) #t)) (s (app (app blur id) #f)))
          (app not (app (app blur lp) s (app - n 1)))))))
   (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app <= n 1)
   (#t (app id a))
   (->
    #f
    (let* ((r (app (app blur id) #t)) (s (app (app blur id) #f)))
      (app not (app (app blur lp) s (app - n 1))))
    <-))
 (flatenv '()))
(list 'clos/con: (list (list #f (flatenv '())) (list #t (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app (-> (app blur id) <-) #f) (flatenv '()))
(list
 'clos/con:
 (list
  (list '(λ (x) x) (flatenv '()))
  (list
   '(λ (a n)
      (match
       (app <= n 1)
       (#t (app id a))
       (#f
        (let* ((r (app (app blur id) #t)) (s (app (app blur id) #f)))
          (app not (app (app blur lp) s (app - n 1)))))))
   (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app <= n (-> 1 <-)) (flatenv '()))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
