'(clean-cache
  eta
  0
  5
  23
  letrec*
  "'(eval ((top) letrec* (do-something ... id) ...) (env ()))"
  #f
  30
  17
  9
  4
  17
  9
  26
  1
  1
  9
  #f
  25/17
  ((0 0 0)))
'(clean-cache
  eta
  0
  5
  23
  lambda
  "'(eval\n  (letrec* (... do-something (id (-> (λ (y) ...) <-)) () ...) ...)\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  eta
  0
  5
  23
  let
  "'(eval (λ (y) (-> (let (_) ...) <-)) (env (())))"
  #f
  7
  4
  3
  0
  4
  3
  7
  1
  1
  2
  #f
  3/2
  ((0 0 0)))
'(clean-cache
  eta
  0
  5
  23
  app
  "'(eval (let (... () (_ (-> (app do-something) <-)) () ...) ...) (env (())))"
  #f
  5
  4
  0
  1
  4
  0
  4
  1
  1
  4
  #t
  1
  ((0 0 0)))
'(clean-cache
  eta
  0
  5
  23
  ref-or-constructor
  "'(eval (app (-> do-something <-)) (env (())))"
  #t
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  eta
  0
  5
  23
  ref-or-constructor
  "'(eval (let (_) (-> y <-)) (env (())))"
  #f
  6
  3
  3
  0
  3
  3
  6
  1
  1
  2
  #f
  4/3
  ((0 0 0)))
'(clean-cache
  eta
  0
  5
  23
  lambda
  "'(eval\n  (letrec* (... () (do-something (-> (λ () ...) <-)) id ...) ...)\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  eta
  0
  5
  23
  number
  "'(eval (λ () (-> 10 <-)) (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  eta
  0
  5
  23
  let
  "'(eval (letrec* (do-something ... id) (-> (let (_) ...) <-)) (env ()))"
  #f
  29
  16
  9
  4
  16
  9
  25
  1
  1
  9
  #f
  23/16
  ((0 0 0)))
'(clean-cache
  eta
  0
  5
  23
  app
  "'(eval\n  (let (... () (_ (-> (app (app id (λ (a) ...)) (app #t)) <-)) () ...) ...)\n  (env ()))"
  #f
  28
  15
  9
  4
  15
  9
  24
  1
  1
  9
  #f
  7/5
  ((0 0 0)))
'(clean-cache
  eta
  0
  5
  23
  app
  "'(eval (app (app id (λ (a) ...)) (-> (app #t) <-)) (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  eta
  0
  5
  23
  constructor
  "'(eval (app (-> #t <-)) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  eta
  0
  5
  23
  app
  "'(eval (app (-> (app id (λ (a) ...)) <-) (app #t)) (env ()))"
  #f
  11
  7
  3
  1
  7
  3
  10
  1
  1
  4
  #f
  10/7
  ((0 0 0)))
'(clean-cache
  eta
  0
  5
  23
  lambda
  "'(eval (app id (-> (λ (a) ...) <-)) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  eta
  0
  5
  23
  ref-or-constructor
  "'(eval (λ (a) (-> a <-)) (env (())))"
  #f
  16
  7
  8
  1
  7
  8
  15
  1
  1
  6
  #f
  8/7
  ((0 0 0)))
'(clean-cache
  eta
  0
  5
  23
  ref-or-constructor
  "'(eval (app (-> id <-) (λ (a) ...)) (env ()))"
  #t
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  eta
  0
  5
  23
  app
  "'(eval (let (_) (-> (app (app id (λ (b) ...)) (app #f)) <-)) (env ()))"
  #f
  28
  15
  9
  4
  15
  9
  24
  1
  1
  9
  #f
  7/5
  ((0 0 0)))
'(clean-cache
  eta
  0
  5
  23
  app
  "'(eval (app (app id (λ (b) ...)) (-> (app #f) <-)) (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  eta
  0
  5
  23
  constructor
  "'(eval (app (-> #f <-)) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  eta
  0
  5
  23
  app
  "'(eval (app (-> (app id (λ (b) ...)) <-) (app #f)) (env ()))"
  #f
  11
  7
  3
  1
  7
  3
  10
  1
  1
  4
  #f
  10/7
  ((0 0 0)))
'(clean-cache
  eta
  0
  5
  23
  lambda
  "'(eval (app id (-> (λ (b) ...) <-)) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  eta
  0
  5
  23
  ref-or-constructor
  "'(eval (λ (b) (-> b <-)) (env (())))"
  #f
  16
  7
  8
  1
  7
  8
  15
  1
  1
  6
  #f
  8/7
  ((0 0 0)))
'(clean-cache
  eta
  0
  5
  23
  ref-or-constructor
  "'(eval (app (-> id <-) (λ (b) ...)) (env ()))"
  #t
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
