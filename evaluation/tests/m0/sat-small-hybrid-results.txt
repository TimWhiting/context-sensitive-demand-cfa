'(expression:
  (let ((phi (λ (x1 x2) (app or x1 (app not x2))))
        (try (λ (f) (app or (app f #t) (app f #f))))
        (sat-solve-2
         (λ (p) (app try (λ (n1) (app try (λ (n2) (app p n1 n2))))))))
    (app sat-solve-2 phi)))
'(query: (top) ())
'(clos/con: (#f #t))
'(literals: (⊥ ⊥ ⊥ ⊥))
'(query:
  (let (phi
        try
        (->
         sat-solve-2
         =
         (λ (p) (app try (λ (n1) (app try (λ (n2) (app p n1 n2))))))
         <-))
    bod)
  ())
'(clos/con: ((λ (p) (app try (λ (n1) (app try (λ (n2) (app p n1 n2))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
'(query:
  (λ (p) (-> (app try (λ (n1) (app try (λ (n2) (app p n1 n2))))) <-))
  (?))
'(clos/con: (#f #t))
'(literals: (⊥ ⊥ ⊥ ⊥))
'(query: (app try (-> (λ (n1) (app try (λ (n2) (app p n1 n2)))) <-)) (?))
'(clos/con: ((λ (n1) (app try (λ (n2) (app p n1 n2))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
'(query: (λ (n1) (-> (app try (λ (n2) (app p n1 n2))) <-)) (? ?))
'(clos/con: (#f #t))
'(literals: (⊥ ⊥ ⊥ ⊥))
'(query: (app try (-> (λ (n2) (app p n1 n2)) <-)) (? ?))
'(clos/con: ((λ (n2) (app p n1 n2))))
'(literals: (⊥ ⊥ ⊥ ⊥))
'(query: (λ (n2) (-> (app p n1 n2) <-)) (? ? ?))
'(clos/con: (#t #f))
'(literals: (⊥ ⊥ ⊥ ⊥))
'(query: (app p n1 (-> n2 <-)) (? ? ?))
'(clos/con: (#f #t))
'(literals: (⊥ ⊥ ⊥ ⊥))
'(query: (app p (-> n1 <-) n2) (? ? ?))
'(clos/con: (#f #t))
'(literals: (⊥ ⊥ ⊥ ⊥))
'(query: (app (-> p <-) n1 n2) (? ? ?))
'(clos/con: ((λ (x1 x2) (app or x1 (app not x2)))))
'(literals: (⊥ ⊥ ⊥ ⊥))
'(query: (app (-> try <-) (λ (n2) (app p n1 n2))) (? ?))
'(clos/con: ((λ (f) (app or (app f #t) (app f #f)))))
'(literals: (⊥ ⊥ ⊥ ⊥))
'(query: (app (-> try <-) (λ (n1) (app try (λ (n2) (app p n1 n2))))) (?))
'(clos/con: ((λ (f) (app or (app f #t) (app f #f)))))
'(literals: (⊥ ⊥ ⊥ ⊥))
'(query:
  (let (phi (-> try = (λ (f) (app or (app f #t) (app f #f))) <-) sat-solve-2)
    bod)
  ())
'(clos/con: ((λ (f) (app or (app f #t) (app f #f)))))
'(literals: (⊥ ⊥ ⊥ ⊥))
'(query: (λ (f) (-> (app or (app f #t) (app f #f)) <-)) (?))
'(clos/con: (#f #t))
'(literals: (⊥ ⊥ ⊥ ⊥))
'(query: (app or (app f #t) (-> (app f #f) <-)) (?))
'(clos/con: (#f #t #t #f))
'(literals: (⊥ ⊥ ⊥ ⊥))
'(query: (app f (-> #f <-)) (?))
'(clos/con: (#f))
'(literals: (⊥ ⊥ ⊥ ⊥))
'(query: (app (-> f <-) #f) (?))
'(clos/con: ((λ (n1) (app try (λ (n2) (app p n1 n2)))) (λ (n2) (app p n1 n2))))
'(literals: (⊥ ⊥ ⊥ ⊥))
'(query: (app or (-> (app f #t) <-) (app f #f)) (?))
'(clos/con: (#f #t #t #f))
'(literals: (⊥ ⊥ ⊥ ⊥))
'(query: (app f (-> #t <-)) (?))
'(clos/con: (#t))
'(literals: (⊥ ⊥ ⊥ ⊥))
'(query: (app (-> f <-) #t) (?))
'(clos/con: ((λ (n1) (app try (λ (n2) (app p n1 n2)))) (λ (n2) (app p n1 n2))))
'(literals: (⊥ ⊥ ⊥ ⊥))
'(query: (app (-> or <-) (app f #t) (app f #f)) (?))
'(clos/con: (#<procedure:do-or>))
'(literals: (⊥ ⊥ ⊥ ⊥))
'(query:
  (let ((-> phi = (λ (x1 x2) (app or x1 (app not x2))) <-) try sat-solve-2)
    bod)
  ())
'(clos/con: ((λ (x1 x2) (app or x1 (app not x2)))))
'(literals: (⊥ ⊥ ⊥ ⊥))
'(query: (λ (x1 x2) (-> (app or x1 (app not x2)) <-)) (?))
'(clos/con: (#f #t))
'(literals: (⊥ ⊥ ⊥ ⊥))
'(query: (app or x1 (-> (app not x2) <-)) (?))
'(clos/con: (#t #f))
'(literals: (⊥ ⊥ ⊥ ⊥))
'(query: (app not (-> x2 <-)) (?))
'(clos/con: (#f #t))
'(literals: (⊥ ⊥ ⊥ ⊥))
'(query: (app (-> not <-) x2) (?))
'(clos/con: (#<procedure:do-not>))
'(literals: (⊥ ⊥ ⊥ ⊥))
'(query: (app or (-> x1 <-) (app not x2)) (?))
'(clos/con: (#f #t))
'(literals: (⊥ ⊥ ⊥ ⊥))
'(query: (app (-> or <-) x1 (app not x2)) (?))
'(clos/con: (#<procedure:do-or>))
'(literals: (⊥ ⊥ ⊥ ⊥))
'(query: (let (phi try sat-solve-2) (-> (app sat-solve-2 phi) <-)) ())
'(clos/con: (#f #t))
'(literals: (⊥ ⊥ ⊥ ⊥))
'(query: (app sat-solve-2 (-> phi <-)) ())
'(clos/con: ((λ (x1 x2) (app or x1 (app not x2)))))
'(literals: (⊥ ⊥ ⊥ ⊥))
'(query: (app (-> sat-solve-2 <-) phi) ())
'(clos/con: ((λ (p) (app try (λ (n1) (app try (λ (n2) (app p n1 n2))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
