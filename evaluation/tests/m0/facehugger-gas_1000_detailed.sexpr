'(clean-cache
  facehugger
  0
  1000
  47
  letrec*
  "'(eval ((top) letrec* (id ... g) ...) (env ()))"
  #f
  59
  47
  12
  0
  47
  12
  59
  1
  1
  24
  #f
  70/47
  (2 2 0))
'(clean-cache
  facehugger
  0
  1000
  47
  lambda
  "'(eval (letrec* (... f (g (-> (λ (n) ...) <-)) () ...) ...) (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  facehugger
  0
  1000
  47
  match
  "'(eval (λ (n) (-> (match (app <= n 1) ...) <-)) (env (())))"
  #f
  29
  20
  9
  0
  20
  9
  29
  1
  1
  12
  #f
  7/5
  (2 2 0))
'(clean-cache
  facehugger
  0
  1000
  47
  number
  "'(eval (match (app <= n 1) (#f) (_ (-> 1 <-))) (env (())))"
  (number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  facehugger
  0
  1000
  47
  app
  "'(eval\n  (match (app <= n 1) ((#f) (-> (app * n (app g (app - ...))) <-)) _)\n  (env (())))"
  #f
  29
  20
  9
  0
  20
  9
  29
  1
  1
  12
  #f
  7/5
  (1 1 0))
'(clean-cache
  facehugger
  0
  1000
  47
  app
  "'(eval (app * n (-> (app g (app - n 1)) <-)) (env (())))"
  #f
  29
  20
  9
  0
  20
  9
  29
  1
  1
  12
  #f
  7/5
  (1 1 0))
'(clean-cache
  facehugger
  0
  1000
  47
  app
  "'(eval (app g (-> (app - n 1) <-)) (env (())))"
  #f
  17
  8
  9
  0
  8
  9
  17
  1
  1
  6
  #f
  5/4
  (0 0 0))
'(clean-cache
  facehugger
  0
  1000
  47
  number
  "'(eval (app - n (-> 1 <-)) (env (())))"
  (number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  facehugger
  0
  1000
  47
  ref-or-constructor
  "'(eval (app - (-> n <-) 1) (env (())))"
  #f
  17
  8
  9
  0
  8
  9
  17
  1
  1
  6
  #f
  5/4
  (0 0 0))
'(clean-cache
  facehugger
  0
  1000
  47
  ref-or-constructor
  "'(eval (app (-> - <-) n 1) (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  facehugger
  0
  1000
  47
  ref-or-constructor
  "'(eval (app (-> g <-) (app - n 1)) (env (())))"
  (lambda number char string quoted constructor)
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  facehugger
  0
  1000
  47
  ref-or-constructor
  "'(eval (app * (-> n <-) (app g (app - n 1))) (env (())))"
  #f
  18
  9
  9
  0
  9
  9
  18
  1
  1
  6
  #f
  4/3
  (0 0 0))
'(clean-cache
  facehugger
  0
  1000
  47
  ref-or-constructor
  "'(eval (app (-> * <-) n (app g (app - n 1))) (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  facehugger
  0
  1000
  47
  app
  "'(eval (match (-> (app <= n 1) <-) (#f) _) (env (())))"
  #f
  21
  12
  9
  0
  12
  9
  21
  1
  1
  8
  #f
  4/3
  (1 1 0))
'(clean-cache
  facehugger
  0
  1000
  47
  number
  "'(eval (app <= n (-> 1 <-)) (env (())))"
  (number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  facehugger
  0
  1000
  47
  ref-or-constructor
  "'(eval (app <= (-> n <-) 1) (env (())))"
  #f
  18
  9
  9
  0
  9
  9
  18
  1
  1
  6
  #f
  4/3
  (0 0 0))
'(clean-cache
  facehugger
  0
  1000
  47
  ref-or-constructor
  "'(eval (app (-> <= <-) n 1) (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  facehugger
  0
  1000
  47
  lambda
  "'(eval (letrec* (... id (f (-> (λ (n) ...) <-)) g ...) ...) (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  facehugger
  0
  1000
  47
  match
  "'(eval (λ (n) (-> (match (app <= n 1) ...) <-)) (env (())))"
  #f
  29
  20
  9
  0
  20
  9
  29
  1
  1
  12
  #f
  7/5
  (1 1 0))
'(clean-cache
  facehugger
  0
  1000
  47
  number
  "'(eval (match (app <= n 1) (#f) (_ (-> 1 <-))) (env (())))"
  (number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  facehugger
  0
  1000
  47
  app
  "'(eval\n  (match (app <= n 1) ((#f) (-> (app * n (app f (app - ...))) <-)) _)\n  (env (())))"
  #f
  29
  20
  9
  0
  20
  9
  29
  1
  1
  12
  #f
  7/5
  (1 1 0))
'(clean-cache
  facehugger
  0
  1000
  47
  app
  "'(eval (app * n (-> (app f (app - n 1)) <-)) (env (())))"
  #f
  29
  20
  9
  0
  20
  9
  29
  1
  1
  12
  #f
  7/5
  (1 1 0))
'(clean-cache
  facehugger
  0
  1000
  47
  app
  "'(eval (app f (-> (app - n 1) <-)) (env (())))"
  #f
  17
  8
  9
  0
  8
  9
  17
  1
  1
  6
  #f
  5/4
  (0 0 0))
'(clean-cache
  facehugger
  0
  1000
  47
  number
  "'(eval (app - n (-> 1 <-)) (env (())))"
  (number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  facehugger
  0
  1000
  47
  ref-or-constructor
  "'(eval (app - (-> n <-) 1) (env (())))"
  #f
  17
  8
  9
  0
  8
  9
  17
  1
  1
  6
  #f
  5/4
  (0 0 0))
'(clean-cache
  facehugger
  0
  1000
  47
  ref-or-constructor
  "'(eval (app (-> - <-) n 1) (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  facehugger
  0
  1000
  47
  ref-or-constructor
  "'(eval (app (-> f <-) (app - n 1)) (env (())))"
  (lambda number char string quoted constructor)
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  facehugger
  0
  1000
  47
  ref-or-constructor
  "'(eval (app * (-> n <-) (app f (app - n 1))) (env (())))"
  #f
  18
  9
  9
  0
  9
  9
  18
  1
  1
  6
  #f
  4/3
  (0 0 0))
'(clean-cache
  facehugger
  0
  1000
  47
  ref-or-constructor
  "'(eval (app (-> * <-) n (app f (app - n 1))) (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  facehugger
  0
  1000
  47
  app
  "'(eval (match (-> (app <= n 1) <-) (#f) _) (env (())))"
  #f
  21
  12
  9
  0
  12
  9
  21
  1
  1
  8
  #f
  4/3
  (0 0 0))
'(clean-cache
  facehugger
  0
  1000
  47
  number
  "'(eval (app <= n (-> 1 <-)) (env (())))"
  (number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  facehugger
  0
  1000
  47
  ref-or-constructor
  "'(eval (app <= (-> n <-) 1) (env (())))"
  #f
  18
  9
  9
  0
  9
  9
  18
  1
  1
  6
  #f
  4/3
  (0 1 0))
'(clean-cache
  facehugger
  0
  1000
  47
  ref-or-constructor
  "'(eval (app (-> <= <-) n 1) (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  facehugger
  0
  1000
  47
  lambda
  "'(eval (letrec* (... () (id (-> (λ (x) ...) <-)) f ...) ...) (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  facehugger
  0
  1000
  47
  ref-or-constructor
  "'(eval (λ (x) (-> x <-)) (env (())))"
  #f
  8
  5
  3
  0
  5
  3
  8
  1
  1
  4
  #f
  6/5
  (0 0 0))
'(clean-cache
  facehugger
  0
  1000
  47
  app
  "'(eval\n  (letrec*\n   (id ... g)\n   (-> (app + (app (app id ...) 3) (app (app id ...) 4)) <-))\n  (env ()))"
  #f
  58
  46
  12
  0
  46
  12
  58
  1
  1
  24
  #f
  34/23
  (2 3 0))
'(clean-cache
  facehugger
  0
  1000
  47
  app
  "'(eval (app + (app (app id f) 3) (-> (app (app id g) 4) <-)) (env ()))"
  #f
  54
  42
  12
  0
  42
  12
  54
  1
  1
  23
  #f
  61/42
  (2 2 0))
'(clean-cache
  facehugger
  0
  1000
  47
  number
  "'(eval (app (app id g) (-> 4 <-)) (env ()))"
  (number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  facehugger
  0
  1000
  47
  app
  "'(eval (app (-> (app id g) <-) 4) (env ()))"
  #f
  11
  8
  3
  0
  8
  3
  11
  1
  1
  6
  #f
  5/4
  (0 0 0))
'(clean-cache
  facehugger
  0
  1000
  47
  ref-or-constructor
  "'(eval (app id (-> g <-)) (env ()))"
  (lambda number char string quoted constructor)
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  facehugger
  0
  1000
  47
  ref-or-constructor
  "'(eval (app (-> id <-) g) (env ()))"
  (lambda number char string quoted constructor)
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  facehugger
  0
  1000
  47
  app
  "'(eval (app + (-> (app (app id f) 3) <-) (app (app id g) 4)) (env ()))"
  #f
  54
  42
  12
  0
  42
  12
  54
  1
  1
  23
  #f
  61/42
  (2 2 0))
'(clean-cache
  facehugger
  0
  1000
  47
  number
  "'(eval (app (app id f) (-> 3 <-)) (env ()))"
  (number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  facehugger
  0
  1000
  47
  app
  "'(eval (app (-> (app id f) <-) 3) (env ()))"
  #f
  11
  8
  3
  0
  8
  3
  11
  1
  1
  6
  #f
  5/4
  (0 0 0))
'(clean-cache
  facehugger
  0
  1000
  47
  ref-or-constructor
  "'(eval (app id (-> f <-)) (env ()))"
  (lambda number char string quoted constructor)
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  facehugger
  0
  1000
  47
  ref-or-constructor
  "'(eval (app (-> id <-) f) (env ()))"
  (lambda number char string quoted constructor)
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  facehugger
  0
  1000
  47
  ref-or-constructor
  "'(eval (app (-> + <-) (app (app id f) 3) (app (app id g) 4)) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
