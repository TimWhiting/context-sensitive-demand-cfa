'(clean-cache
  eta
  0
  15
  13
  letrec*
  "\"'(eval ((top) letrec* (do-something ... id) ...) (env ()))\""
  30
  17
  9
  4
  17
  9
  26
  1
  1
  9
  #f
  93/17
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  eta
  0
  15
  13
  let
  "\"'(eval (λ (y) (-> (let (_) ...) <-)) (env (())))\""
  7
  4
  3
  0
  4
  3
  7
  1
  1
  2
  #f
  11/2
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  eta
  0
  15
  13
  app
  "\"'(eval (let (... () (_ (-> (app do-something) <-)) () ...) ...) (env (())))\""
  5
  4
  0
  1
  4
  0
  4
  1
  1
  2
  #f
  9/2
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  eta
  0
  15
  13
  ref-or-constructor
  "\"'(eval (let (_) (-> y <-)) (env (())))\""
  6
  3
  3
  0
  3
  3
  6
  1
  1
  2
  #f
  16/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  eta
  0
  15
  13
  let
  "\"'(eval (letrec* (do-something ... id) (-> (let (_) ...) <-)) (env ()))\""
  29
  16
  9
  4
  16
  9
  25
  1
  1
  9
  #f
  87/16
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  eta
  0
  15
  13
  app
  "\"'(eval\n  (let (... () (_ (-> (app (app id (λ (a) ...)) (app #t)) <-)) () ...) ...)\n  (env ()))\""
  28
  15
  9
  4
  15
  9
  24
  1
  1
  9
  #f
  27/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  eta
  0
  15
  13
  app
  "\"'(eval (app (app id (λ (a) ...)) (-> (app #t) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  eta
  0
  15
  13
  app
  "\"'(eval (app (-> (app id (λ (a) ...)) <-) (app #t)) (env ()))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  4
  #f
  38/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  eta
  0
  15
  13
  ref-or-constructor
  "\"'(eval (λ (a) (-> a <-)) (env (())))\""
  16
  7
  8
  1
  7
  8
  15
  1
  1
  6
  #f
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  eta
  0
  15
  13
  app
  "\"'(eval (let (_) (-> (app (app id (λ (b) ...)) (app #f)) <-)) (env ()))\""
  28
  15
  9
  4
  15
  9
  24
  1
  1
  9
  #f
  27/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  eta
  0
  15
  13
  app
  "\"'(eval (app (app id (λ (b) ...)) (-> (app #f) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  eta
  0
  15
  13
  app
  "\"'(eval (app (-> (app id (λ (b) ...)) <-) (app #f)) (env ()))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  4
  #f
  38/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  eta
  0
  15
  13
  ref-or-constructor
  "\"'(eval (λ (b) (-> b <-)) (env (())))\""
  16
  7
  8
  1
  7
  8
  15
  1
  1
  6
  #f
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  eta
  0
  15
  13
  app
  "\"'(eval (let (_) (-> (app (app id (λ (b) ...)) (app #f)) <-)) (env ()))\""
  28
  15
  9
  4
  15
  9
  24
  1
  1
  9
  #f
  27/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  eta
  0
  15
  13
  app
  "\"'(eval (let (... () (_ (-> (app do-something) <-)) () ...) ...) (env (())))\""
  33
  19
  9
  5
  19
  9
  28
  1
  1
  11
  #f
  99/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  eta
  0
  15
  13
  ref-or-constructor
  "\"'(eval (let (_) (-> y <-)) (env (())))\""
  33
  19
  9
  5
  19
  9
  28
  1
  1
  11
  #f
  99/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  eta
  0
  15
  13
  let
  "\"'(eval (letrec* (do-something ... id) (-> (let (_) ...) <-)) (env ()))\""
  34
  20
  9
  5
  20
  9
  29
  1
  1
  11
  #f
  21/4
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  eta
  0
  15
  13
  app
  "\"'(eval (app (app id (λ (a) ...)) (-> (app #t) <-)) (env ()))\""
  34
  20
  9
  5
  20
  9
  29
  1
  1
  11
  #t
  21/4
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  eta
  0
  15
  13
  letrec*
  "\"'(eval ((top) letrec* (do-something ... id) ...) (env ()))\""
  35
  21
  9
  5
  21
  9
  30
  1
  1
  11
  #f
  37/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  eta
  0
  15
  13
  app
  "\"'(eval\n  (let (... () (_ (-> (app (app id (λ (a) ...)) (app #t)) <-)) () ...) ...)\n  (env ()))\""
  37
  23
  9
  5
  23
  9
  32
  1
  1
  11
  #f
  123/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  eta
  0
  15
  13
  ref-or-constructor
  "\"'(eval (λ (a) (-> a <-)) (env (())))\""
  37
  23
  9
  5
  23
  9
  32
  1
  1
  11
  #f
  123/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  eta
  0
  15
  13
  ref-or-constructor
  "\"'(eval (λ (b) (-> b <-)) (env (())))\""
  37
  23
  9
  5
  23
  9
  32
  1
  1
  11
  #f
  123/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  eta
  0
  15
  13
  app
  "\"'(eval (app (-> (app id (λ (b) ...)) <-) (app #f)) (env ()))\""
  37
  23
  9
  5
  23
  9
  32
  1
  1
  11
  #f
  123/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  eta
  0
  15
  13
  app
  "\"'(eval (app (app id (λ (b) ...)) (-> (app #f) <-)) (env ()))\""
  37
  23
  9
  5
  23
  9
  32
  1
  1
  11
  #t
  123/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  eta
  0
  15
  13
  app
  "\"'(eval (app (-> (app id (λ (a) ...)) <-) (app #t)) (env ()))\""
  37
  23
  9
  5
  23
  9
  32
  1
  1
  11
  #f
  123/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  eta
  0
  15
  13
  let
  "\"'(eval (λ (y) (-> (let (_) ...) <-)) (env (())))\""
  37
  23
  9
  5
  23
  9
  32
  1
  1
  11
  #f
  123/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  eta
  0
  15
  13
  ref-or-constructor
  "\"'(eval (let (_) (-> y <-)) (env (())))\""
  6
  3
  3
  0
  3
  3
  6
  1
  1
  2
  #f
  16/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  eta
  0
  15
  13
  app
  "\"'(eval (app (app id (λ (b) ...)) (-> (app #f) <-)) (env ()))\""
  8
  5
  3
  0
  5
  3
  8
  1
  1
  4
  #t
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  eta
  0
  15
  13
  app
  "\"'(eval (app (-> (app id (λ (a) ...)) <-) (app #t)) (env ()))\""
  13
  9
  3
  1
  9
  3
  12
  1
  1
  6
  #f
  16/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  eta
  0
  15
  13
  app
  "\"'(eval (let (_) (-> (app (app id (λ (b) ...)) (app #f)) <-)) (env ()))\""
  29
  16
  9
  4
  16
  9
  25
  1
  1
  9
  #f
  87/16
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  eta
  0
  15
  13
  app
  "\"'(eval (app (app id (λ (a) ...)) (-> (app #t) <-)) (env ()))\""
  29
  16
  9
  4
  16
  9
  25
  1
  1
  9
  #t
  87/16
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  eta
  0
  15
  13
  ref-or-constructor
  "\"'(eval (λ (b) (-> b <-)) (env (())))\""
  29
  16
  9
  4
  16
  9
  25
  1
  1
  9
  #f
  87/16
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  eta
  0
  15
  13
  ref-or-constructor
  "\"'(eval (λ (a) (-> a <-)) (env (())))\""
  29
  16
  9
  4
  16
  9
  25
  1
  1
  9
  #f
  87/16
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  eta
  0
  15
  13
  let
  "\"'(eval (letrec* (do-something ... id) (-> (let (_) ...) <-)) (env ()))\""
  30
  17
  9
  4
  17
  9
  26
  1
  1
  9
  #f
  93/17
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  eta
  0
  15
  13
  let
  "\"'(eval (λ (y) (-> (let (_) ...) <-)) (env (())))\""
  30
  17
  9
  4
  17
  9
  26
  1
  1
  9
  #f
  93/17
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  eta
  0
  15
  13
  app
  "\"'(eval (let (... () (_ (-> (app do-something) <-)) () ...) ...) (env (())))\""
  35
  21
  9
  5
  21
  9
  30
  1
  1
  11
  #f
  37/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  eta
  0
  15
  13
  app
  "\"'(eval (app (-> (app id (λ (b) ...)) <-) (app #f)) (env ()))\""
  35
  21
  9
  5
  21
  9
  30
  1
  1
  11
  #f
  37/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  eta
  0
  15
  13
  app
  "\"'(eval\n  (let (... () (_ (-> (app (app id (λ (a) ...)) (app #t)) <-)) () ...) ...)\n  (env ()))\""
  36
  22
  9
  5
  22
  9
  31
  1
  1
  11
  #f
  117/22
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  eta
  0
  15
  13
  letrec*
  "\"'(eval ((top) letrec* (do-something ... id) ...) (env ()))\""
  37
  23
  9
  5
  23
  9
  32
  1
  1
  11
  #f
  123/23
  ((0 0 0) (0 0 0) (0 0 0)))
