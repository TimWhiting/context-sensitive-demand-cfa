'(expression: (let ((x (app cons 1 nil))) x))
'(query: (top) ())
'(clos/con: (cons))
'(literals: (⊥ ⊥ ⊥ ⊥))
'(query: (let ((-> x = (app cons 1 nil) <-)) bod) ())
'(clos/con: (cons))
'(literals: (⊥ ⊥ ⊥ ⊥))
'(query: (app cons 1 (-> nil <-)) ())
'(clos/con: (nil))
'(literals: (⊥ ⊥ ⊥ ⊥))
'(query: (app cons (-> 1 <-) nil) ())
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
'(query: (app (-> cons <-) 1 nil) ())
'(clos/con: (cons))
'(literals: (⊥ ⊥ ⊥ ⊥))
'(query: (let (x) (-> x <-)) ())
'(clos/con: (cons))
'(literals: (⊥ ⊥ ⊥ ⊥))
