'(expression:
  (let ((x (app cons 1 (app nil)))) (match x ((cons 1 n) n) ((_) x))))
(list 'query: '(match x (-> (cons 1 n) n <-) ((_) x)) (menv '()))
(list 'clos/con: (list (list '(app nil) (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app cons 1 (-> (app nil) <-)) (menv '()))
(list 'clos/con: (list (list '(app nil) (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app (-> cons <-) 1 (app nil)) (menv '()))
(list 'clos/con: (list (list 'cons (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(let ((-> x = (app cons 1 (app nil)) <-)) bod) (menv '()))
(list 'clos/con: (list (list '(app cons 1 (app nil)) (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(top) (menv '()))
(list 'clos/con: (list (list '(app nil) (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app cons (-> 1 <-) (app nil)) (menv '()))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list 'query: '(let (x) (-> (match x ((cons 1 n) n) ((_) x)) <-)) (menv '()))
(list 'clos/con: (list (list '(app nil) (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(match (-> x <-) ((cons 1 n) n) ((_) x)) (menv '()))
(list 'clos/con: (list (list '(app cons 1 (app nil)) (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app (-> nil <-)) (menv '()))
(list 'clos/con: (list (list 'nil (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(match x ((cons 1 n) n) (-> (_) x <-)) (menv '()))
(list 'clos/con: (list (list '(app cons 1 (app nil)) (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
