'(clean-cache
  ack
  0
  1000
  40
  letrec*
  "'(eval ((top) letrec* (ack) ...) (env ()))"
  #f
  45
  40
  5
  0
  40
  5
  45
  1
  1
  20
  #f
  3/2
  (1 1 0))
'(clean-cache
  ack
  0
  1000
  40
  lambda
  "'(eval (letrec* (... () (ack (-> (λ (m n) ...) <-)) () ...) ...) (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  ack
  0
  1000
  40
  match
  "'(eval (λ (m n) (-> (match (app = m 0) ...) <-)) (env (())))"
  #f
  42
  37
  5
  0
  37
  5
  42
  1
  1
  19
  #f
  55/37
  (1 1 0))
'(clean-cache
  ack
  0
  1000
  40
  app
  "'(eval (match (app = m 0) (#f) (_ (-> (app + n 1) <-))) (env (())))"
  #f
  42
  37
  5
  0
  37
  5
  42
  1
  1
  19
  #f
  55/37
  (1 1 0))
'(clean-cache
  ack
  0
  1000
  40
  number
  "'(eval (app + n (-> 1 <-)) (env (())))"
  (number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  ack
  0
  1000
  40
  ref-or-constructor
  "'(eval (app + (-> n <-) 1) (env (())))"
  #f
  42
  37
  5
  0
  37
  5
  42
  1
  1
  19
  #f
  55/37
  (1 1 0))
'(clean-cache
  ack
  0
  1000
  40
  ref-or-constructor
  "'(eval (app (-> + <-) n 1) (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  ack
  0
  1000
  40
  match
  "'(eval (match (app = m 0) ((#f) (-> (match (app = n 0) ...) <-)) _) (env (())))"
  #f
  42
  37
  5
  0
  37
  5
  42
  1
  1
  19
  #f
  55/37
  (2 2 0))
'(clean-cache
  ack
  0
  1000
  40
  app
  "'(eval (match (app = n 0) (#f) (_ (-> (app ack (app - m 1) 1) <-))) (env (())))"
  #f
  42
  37
  5
  0
  37
  5
  42
  1
  1
  19
  #f
  55/37
  (1 1 0))
'(clean-cache
  ack
  0
  1000
  40
  number
  "'(eval (app ack (app - m 1) (-> 1 <-)) (env (())))"
  (number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  ack
  0
  1000
  40
  app
  "'(eval (app ack (-> (app - m 1) <-) 1) (env (())))"
  #f
  15
  10
  5
  0
  10
  5
  15
  1
  1
  5
  #f
  3/2
  (0 0 0))
'(clean-cache
  ack
  0
  1000
  40
  number
  "'(eval (app - m (-> 1 <-)) (env (())))"
  (number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  ack
  0
  1000
  40
  ref-or-constructor
  "'(eval (app - (-> m <-) 1) (env (())))"
  #f
  15
  10
  5
  0
  10
  5
  15
  1
  1
  5
  #f
  3/2
  (0 0 0))
'(clean-cache
  ack
  0
  1000
  40
  ref-or-constructor
  "'(eval (app (-> - <-) m 1) (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  ack
  0
  1000
  40
  ref-or-constructor
  "'(eval (app (-> ack <-) (app - m 1) 1) (env (())))"
  (lambda number char string quoted constructor)
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  ack
  0
  1000
  40
  app
  "'(eval\n  (match\n   (app = n 0)\n   ((#f) (-> (app ack (app - m 1) (app ack m (app - ...))) <-))\n   _)\n  (env (())))"
  #f
  42
  37
  5
  0
  37
  5
  42
  1
  1
  19
  #f
  55/37
  (1 1 0))
'(clean-cache
  ack
  0
  1000
  40
  app
  "'(eval (app ack (app - m 1) (-> (app ack m (app - n 1)) <-)) (env (())))"
  #f
  42
  37
  5
  0
  37
  5
  42
  1
  1
  19
  #f
  55/37
  (1 1 0))
'(clean-cache
  ack
  0
  1000
  40
  app
  "'(eval (app ack m (-> (app - n 1) <-)) (env (())))"
  #f
  42
  37
  5
  0
  37
  5
  42
  1
  1
  19
  #f
  55/37
  (1 1 0))
'(clean-cache
  ack
  0
  1000
  40
  number
  "'(eval (app - n (-> 1 <-)) (env (())))"
  (number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  ack
  0
  1000
  40
  ref-or-constructor
  "'(eval (app - (-> n <-) 1) (env (())))"
  #f
  42
  37
  5
  0
  37
  5
  42
  1
  1
  19
  #f
  55/37
  (1 1 0))
'(clean-cache
  ack
  0
  1000
  40
  ref-or-constructor
  "'(eval (app (-> - <-) n 1) (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  ack
  0
  1000
  40
  ref-or-constructor
  "'(eval (app ack (-> m <-) (app - n 1)) (env (())))"
  #f
  15
  10
  5
  0
  10
  5
  15
  1
  1
  5
  #f
  3/2
  (0 0 0))
'(clean-cache
  ack
  0
  1000
  40
  ref-or-constructor
  "'(eval (app (-> ack <-) m (app - n 1)) (env (())))"
  (lambda number char string quoted constructor)
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  ack
  0
  1000
  40
  app
  "'(eval (app ack (-> (app - m 1) <-) (app ack m (app - n 1))) (env (())))"
  #f
  15
  10
  5
  0
  10
  5
  15
  1
  1
  5
  #f
  3/2
  (0 0 0))
'(clean-cache
  ack
  0
  1000
  40
  number
  "'(eval (app - m (-> 1 <-)) (env (())))"
  (number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  ack
  0
  1000
  40
  ref-or-constructor
  "'(eval (app - (-> m <-) 1) (env (())))"
  #f
  15
  10
  5
  0
  10
  5
  15
  1
  1
  5
  #f
  3/2
  (0 0 0))
'(clean-cache
  ack
  0
  1000
  40
  ref-or-constructor
  "'(eval (app (-> - <-) m 1) (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  ack
  0
  1000
  40
  ref-or-constructor
  "'(eval (app (-> ack <-) (app - m 1) (app ack m (app - n 1))) (env (())))"
  (lambda number char string quoted constructor)
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  ack
  0
  1000
  40
  app
  "'(eval (match (-> (app = n 0) <-) (#f) _) (env (())))"
  #f
  42
  37
  5
  0
  37
  5
  42
  1
  1
  19
  #f
  55/37
  (1 1 0))
'(clean-cache
  ack
  0
  1000
  40
  number
  "'(eval (app = n (-> 0 <-)) (env (())))"
  (number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  ack
  0
  1000
  40
  ref-or-constructor
  "'(eval (app = (-> n <-) 0) (env (())))"
  #f
  42
  37
  5
  0
  37
  5
  42
  1
  1
  19
  #f
  55/37
  (1 1 0))
'(clean-cache
  ack
  0
  1000
  40
  ref-or-constructor
  "'(eval (app (-> = <-) n 0) (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  ack
  0
  1000
  40
  app
  "'(eval (match (-> (app = m 0) <-) (#f) _) (env (())))"
  #f
  19
  14
  5
  0
  14
  5
  19
  1
  1
  7
  #f
  3/2
  (0 0 0))
'(clean-cache
  ack
  0
  1000
  40
  number
  "'(eval (app = m (-> 0 <-)) (env (())))"
  (number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  ack
  0
  1000
  40
  ref-or-constructor
  "'(eval (app = (-> m <-) 0) (env (())))"
  #f
  16
  11
  5
  0
  11
  5
  16
  1
  1
  5
  #f
  17/11
  (0 0 0))
'(clean-cache
  ack
  0
  1000
  40
  ref-or-constructor
  "'(eval (app (-> = <-) m 0) (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  ack
  0
  1000
  40
  app
  "'(eval (letrec* (ack) (-> (app ack 3 12) <-)) (env ()))"
  #f
  44
  39
  5
  0
  39
  5
  44
  1
  1
  20
  #f
  58/39
  (1 1 0))
'(clean-cache
  ack
  0
  1000
  40
  number
  "'(eval (app ack 3 (-> 12 <-)) (env ()))"
  (number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  ack
  0
  1000
  40
  number
  "'(eval (app ack (-> 3 <-) 12) (env ()))"
  (number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  ack
  0
  1000
  40
  ref-or-constructor
  "'(eval (app (-> ack <-) 3 12) (env ()))"
  (lambda number char string quoted constructor)
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
