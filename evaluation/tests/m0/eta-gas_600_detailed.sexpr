'(clean-cache
  eta
  0
  600
  14
  let
  "'(eval ((top) let (id) ...) (env ()))"
  #f
  14
  11
  3
  0
  11
  3
  14
  1
  1
  6
  #f
  16/11
  (0 0 0))
'(clean-cache
  eta
  0
  600
  14
  lambda
  "'(eval (let (... () (id (-> (λ (x) ...) <-)) () ...) ...) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  eta
  0
  600
  14
  let
  "'(eval (λ (x) (-> (let (y) ...) <-)) (env (())))"
  #f
  9
  6
  3
  0
  6
  3
  9
  1
  1
  4
  #f
  4/3
  (0 0 0))
'(clean-cache
  eta
  0
  600
  14
  number
  "'(eval (let (... () (y (-> 10 <-)) () ...) ...) (env (())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  eta
  0
  600
  14
  ref-or-constructor
  "'(eval (let (y) (-> x <-)) (env (())))"
  #f
  8
  5
  3
  0
  5
  3
  8
  1
  1
  4
  #f
  6/5
  (0 0 0))
'(clean-cache
  eta
  0
  600
  14
  let
  "'(eval (let (id) (-> (let (z) ...) <-)) (env ()))"
  #f
  13
  10
  3
  0
  10
  3
  13
  1
  1
  6
  #f
  7/5
  (0 0 0))
'(clean-cache
  eta
  0
  600
  14
  app
  "'(eval (let (... () (z (-> (app id (app #t)) <-)) () ...) ...) (env ()))"
  #f
  12
  9
  3
  0
  9
  3
  12
  1
  1
  6
  #f
  4/3
  (0 0 0))
'(clean-cache
  eta
  0
  600
  14
  app
  "'(eval (app id (-> (app #t) <-)) (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  eta
  0
  600
  14
  constructor
  "'(eval (app (-> #t <-)) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  eta
  0
  600
  14
  ref-or-constructor
  "'(eval (app (-> id <-) (app #t)) (env ()))"
  #t
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  eta
  0
  600
  14
  app
  "'(eval (let (z) (-> (app id (app #f)) <-)) (env ()))"
  #f
  12
  9
  3
  0
  9
  3
  12
  1
  1
  6
  #f
  4/3
  (0 0 0))
'(clean-cache
  eta
  0
  600
  14
  app
  "'(eval (app id (-> (app #f) <-)) (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  eta
  0
  600
  14
  constructor
  "'(eval (app (-> #f <-)) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  eta
  0
  600
  14
  ref-or-constructor
  "'(eval (app (-> id <-) (app #f)) (env ()))"
  #t
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
