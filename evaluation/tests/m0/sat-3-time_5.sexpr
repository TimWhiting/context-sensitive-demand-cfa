'(clean-cache
  sat-3
  0
  5
  59
  letrec*
  "\"'(eval ((top) letrec* (println ... sat-solve-7) ...) (env ()))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  59
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env (())))\""
  #f)
'(clean-cache
  sat-3
  0
  5
  59
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env (() ())))\""
  111
  81
  19
  11
  81
  19
  100
  1
  1
  39
  #f
  457/81
  ((5 5 0) (5 5 0) (5 5 0)))
'(clean-cache
  sat-3
  0
  59
  app
  "\"'(eval (λ (n2) (-> (app try (λ (n3) ...)) <-)) (env (() () ())))\""
  #f)
'(clean-cache
  sat-3
  0
  59
  app
  "\"'(eval (λ (n3) (-> (app try (λ (n4) ...)) <-)) (env (() () () ())))\""
  #f)
'(clean-cache
  sat-3
  0
  59
  app
  "\"'(eval (λ (n4) (-> (app try (λ (n5) ...)) <-)) (env (() () () () ())))\""
  #f)
'(clean-cache
  sat-3
  0
  59
  app
  "\"'(eval (λ (n5) (-> (app try (λ (n6) ...)) <-)) (env (() () () () () ())))\""
  #f)
'(clean-cache
  sat-3
  0
  59
  app
  "\"'(eval (λ (n6) (-> (app try (λ (n7) ...)) <-)) (env (() () () () () () ())))\""
  #f)
'(clean-cache
  sat-3
  0
  5
  59
  app
  "\"'(eval\n  (λ (n7) (-> (app p n1 n2 n3 n4 n5 n6 n7) <-))\n  (env (() () () () () () () ())))\""
  72
  58
  11
  3
  58
  11
  69
  1
  1
  28
  #f
  160/29
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 n4 n5 n6 (-> n7 <-)) (env (() () () () () () () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  6
  #f
  36/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 n4 n5 (-> n6 <-) n7) (env (() () () () () () () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  6
  #f
  36/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 n4 (-> n5 <-) n6 n7) (env (() () () () () () () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  6
  #f
  36/7
  ((0 0 0) (0 0 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 (-> n4 <-) n5 n6 n7) (env (() () () () () () () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  6
  #f
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app p n1 n2 (-> n3 <-) n4 n5 n6 n7) (env (() () () () () () () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  6
  #f
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app p n1 (-> n2 <-) n3 n4 n5 n6 n7) (env (() () () () () () () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  6
  #f
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app p (-> n1 <-) n2 n3 n4 n5 n6 n7) (env (() () () () () () () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  6
  #f
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app (-> p <-) n1 n2 n3 n4 n5 n6 n7) (env (() () () () () () () ())))\""
  5
  3
  2
  0
  3
  2
  5
  1
  1
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  59
  let
  "\"'(eval (λ (f) (-> (let (_) ...) <-)) (env (())))\""
  #f)
'(clean-cache
  sat-3
  0
  5
  59
  app
  "\"'(eval (let (... () (_ (-> (app println \"trying\") <-)) () ...) ...) (env (())))\""
  7
  6
  0
  1
  6
  0
  6
  1
  1
  6
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  59
  app
  "\"'(eval (let (_) (-> (app or (app f (app #t)) (app f (app #f))) <-)) (env (())))\""
  #f)
'(clean-cache
  sat-3
  0
  59
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env (())))\""
  #f)
'(clean-cache
  sat-3
  0
  5
  59
  app
  "\"'(eval (app f (-> (app #f) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env (())))\""
  16
  8
  8
  0
  8
  8
  16
  1
  1
  7
  #f
  23/4
  ((0 0 0) (0 0 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  59
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env (())))\""
  #f)
'(clean-cache
  sat-3
  0
  5
  59
  app
  "\"'(eval (app f (-> (app #t) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env (())))\""
  16
  8
  8
  0
  8
  8
  16
  1
  1
  7
  #f
  23/4
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  5
  59
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4 x5 x6 x7)\n    (->\n     (app\n      and\n      (app or x1 x2)\n      (app or x1 (app not x2) (app not x3))\n      (app or x3 x4)\n      (app or (app not x4) x1)\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env (())))\""
  65
  54
  9
  2
  54
  9
  63
  1
  1
  25
  #f
  299/54
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  sat-3
  0
  5
  59
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env (())))\""
  26
  17
  7
  2
  17
  7
  24
  1
  1
  12
  #f
  90/17
  ((1/2 1/2 0) (1 1 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  8
  #f
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  8
  #f
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  5
  59
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env (())))\""
  30
  21
  7
  2
  21
  7
  28
  1
  1
  14
  #f
  16/3
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  5
  59
  app
  "\"'(eval (app or (app not x2) (-> (app not x3) <-)) (env (())))\""
  22
  14
  6
  2
  14
  6
  20
  1
  1
  11
  #f
  73/14
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  8
  #f
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  5
  59
  app
  "\"'(eval (app or (-> (app not x2) <-) (app not x3)) (env (())))\""
  22
  14
  6
  2
  14
  6
  20
  1
  1
  11
  #f
  73/14
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  8
  #f
  26/5
  ((0 0 0) (0 0 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  5
  59
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (-> (app or (app not x4) x1) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  28
  19
  7
  2
  19
  7
  26
  1
  1
  13
  #f
  101/19
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app or (app not x4) (-> x1 <-)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  8
  #f
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  5
  59
  app
  "\"'(eval (app or (-> (app not x4) <-) x1) (env (())))\""
  22
  14
  6
  2
  14
  6
  20
  1
  1
  11
  #f
  73/14
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app not (-> x4 <-)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  8
  #f
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  5
  59
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or x3 x4) <-)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  26
  17
  7
  2
  17
  7
  24
  1
  1
  12
  #f
  90/17
  ((1 1 0) (1/2 1/2 0) (1 1 0)))
'(clean-cache
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app or x3 (-> x4 <-)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  8
  #f
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app or (-> x3 <-) x4) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  8
  #f
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  5
  59
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  34
  24
  8
  2
  24
  8
  32
  1
  1
  15
  #f
  43/8
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-3
  0
  5
  59
  app
  "\"'(eval (app or x1 (app not x2) (-> (app not x3) <-)) (env (())))\""
  22
  14
  6
  2
  14
  6
  20
  1
  1
  11
  #f
  73/14
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  8
  #f
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  5
  59
  app
  "\"'(eval (app or x1 (-> (app not x2) <-) (app not x3)) (env (())))\""
  22
  14
  6
  2
  14
  6
  20
  1
  1
  11
  #f
  73/14
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  8
  #f
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) (app not x2) (app not x3)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  8
  #f
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  5
  59
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 x2) <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  26
  17
  7
  2
  17
  7
  24
  1
  1
  12
  #f
  90/17
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app or x1 (-> x2 <-)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  8
  #f
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) x2) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  8
  #f
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  5
  59
  let
  "\"'(eval (λ (s) (-> (let (_) ...) <-)) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  5
  59
  app
  "\"'(eval (let (... () (_ (-> (app display s) <-)) () ...) ...) (env (())))\""
  6
  4
  2
  0
  4
  2
  6
  1
  1
  2
  #t
  9/2
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app display (-> s <-)) (env (())))\""
  4
  2
  2
  0
  2
  2
  4
  1
  1
  0
  #f
  4
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  5
  59
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  5
  59
  let
  "\"'(eval (letrec* (println ... sat-solve-7) (-> (let (_) ...) <-)) (env ()))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  5
  59
  app
  "\"'(eval\n  (let (... () (_ (-> (app display (app sat-solve-7 phi)) <-)) () ...) ...)\n  (env ()))\""
  116
  85
  19
  12
  85
  19
  104
  1
  1
  41
  #t
  479/85
  ((5 5 0) (9/2 9/2 0) (5 5 0)))
'(clean-cache
  sat-3
  0
  59
  app
  "\"'(eval (app display (-> (app sat-solve-7 phi) <-)) (env ()))\""
  #f)
'(clean-cache
  sat-3
  0
  5
  59
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) (app not x2) (app not x3)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  8
  #f
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  app
  "\"'(eval (app f (-> (app #f) <-)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  8
  #t
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env (())))\""
  34
  24
  8
  2
  24
  8
  32
  1
  1
  15
  #f
  43/8
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env ()))\""
  36
  26
  8
  2
  26
  8
  34
  1
  1
  17
  #t
  139/26
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app or (-> x3 <-) x4) (env (())))\""
  37
  27
  8
  2
  27
  8
  35
  1
  1
  17
  #f
  145/27
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  app
  "\"'(eval (let (... () (_ (-> (app println \"trying\") <-)) () ...) ...) (env (())))\""
  44
  33
  8
  3
  33
  8
  41
  1
  1
  23
  #t
  175/33
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  app
  "\"'(eval (λ (n3) (-> (app try (λ (n4) ...)) <-)) (env (() () () ())))\""
  120
  89
  19
  12
  89
  19
  108
  1
  1
  47
  #f
  497/89
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 (-> n4 <-) n5 n6 n7) (env (() () () () () () () ())))\""
  120
  89
  19
  12
  89
  19
  108
  1
  1
  47
  #f
  497/89
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  app
  "\"'(eval (λ (n6) (-> (app try (λ (n7) ...)) <-)) (env (() () () () () () ())))\""
  120
  89
  19
  12
  89
  19
  108
  1
  1
  47
  #f
  497/89
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env (())))\""
  120
  89
  19
  12
  89
  19
  108
  1
  1
  47
  #f
  497/89
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  app
  "\"'(eval\n  (let (... () (_ (-> (app display (app sat-solve-7 phi)) <-)) () ...) ...)\n  (env ()))\""
  125
  93
  19
  13
  93
  19
  112
  1
  1
  49
  #t
  173/31
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  let
  "\"'(eval (λ (f) (-> (let (_) ...) <-)) (env (())))\""
  125
  93
  19
  13
  93
  19
  112
  1
  1
  49
  #f
  173/31
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env (())))\""
  125
  93
  19
  13
  93
  19
  112
  1
  1
  49
  #f
  173/31
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  app
  "\"'(eval (λ (n5) (-> (app try (λ (n6) ...)) <-)) (env (() () () () () ())))\""
  125
  93
  19
  13
  93
  19
  112
  1
  1
  49
  #f
  173/31
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (())))\""
  125
  93
  19
  13
  93
  19
  112
  1
  1
  49
  #f
  173/31
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app or (app not x4) (-> x1 <-)) (env (())))\""
  125
  93
  19
  13
  93
  19
  112
  1
  1
  49
  #f
  173/31
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) x2) (env (())))\""
  125
  93
  19
  13
  93
  19
  112
  1
  1
  49
  #f
  173/31
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  app
  "\"'(eval (λ (n4) (-> (app try (λ (n5) ...)) <-)) (env (() () () () ())))\""
  125
  93
  19
  13
  93
  19
  112
  1
  1
  49
  #f
  173/31
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app display (-> s <-)) (env (())))\""
  129
  95
  21
  13
  95
  21
  116
  1
  1
  49
  #f
  527/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4 x5 x6 x7)\n    (->\n     (app\n      and\n      (app or x1 x2)\n      (app or x1 (app not x2) (app not x3))\n      (app or x3 x4)\n      (app or (app not x4) x1)\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env (())))\""
  129
  95
  21
  13
  95
  21
  116
  1
  1
  49
  #f
  527/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env (() ())))\""
  129
  95
  21
  13
  95
  21
  116
  1
  1
  49
  #f
  527/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  app
  "\"'(eval (let (_) (-> (app or (app f (app #t)) (app f (app #f))) <-)) (env (())))\""
  129
  95
  21
  13
  95
  21
  116
  1
  1
  49
  #f
  527/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env (())))\""
  129
  95
  21
  13
  95
  21
  116
  1
  1
  49
  #f
  527/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  app
  "\"'(eval\n  (λ (n7) (-> (app p n1 n2 n3 n4 n5 n6 n7) <-))\n  (env (() () () () () () () ())))\""
  129
  95
  21
  13
  95
  21
  116
  1
  1
  49
  #f
  527/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  app
  "\"'(eval (app display (-> (app sat-solve-7 phi) <-)) (env ()))\""
  129
  95
  21
  13
  95
  21
  116
  1
  1
  49
  #f
  527/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app not (-> x4 <-)) (env (())))\""
  129
  95
  21
  13
  95
  21
  116
  1
  1
  49
  #f
  527/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env (())))\""
  129
  95
  21
  13
  95
  21
  116
  1
  1
  49
  #f
  527/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app or x3 (-> x4 <-)) (env (())))\""
  129
  95
  21
  13
  95
  21
  116
  1
  1
  49
  #f
  527/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app p n1 n2 (-> n3 <-) n4 n5 n6 n7) (env (() () () () () () () ())))\""
  129
  95
  21
  13
  95
  21
  116
  1
  1
  49
  #f
  527/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env (())))\""
  129
  95
  21
  13
  95
  21
  116
  1
  1
  49
  #f
  527/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 n4 (-> n5 <-) n6 n7) (env (() () () () () () () ())))\""
  131
  96
  22
  13
  96
  22
  118
  1
  1
  49
  #f
  533/96
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 n4 n5 n6 (-> n7 <-)) (env (() () () () () () () ())))\""
  133
  97
  23
  13
  97
  23
  120
  1
  1
  49
  #f
  539/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  app
  "\"'(eval (λ (n2) (-> (app try (λ (n3) ...)) <-)) (env (() () ())))\""
  133
  97
  23
  13
  97
  23
  120
  1
  1
  49
  #f
  539/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app p (-> n1 <-) n2 n3 n4 n5 n6 n7) (env (() () () () () () () ())))\""
  133
  97
  23
  13
  97
  23
  120
  1
  1
  49
  #f
  539/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  let
  "\"'(eval (λ (s) (-> (let (_) ...) <-)) (env (())))\""
  133
  97
  23
  13
  97
  23
  120
  1
  1
  49
  #t
  539/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 n4 n5 (-> n6 <-) n7) (env (() () () () () () () ())))\""
  135
  98
  24
  13
  98
  24
  122
  1
  1
  49
  #f
  545/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 x2) <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  135
  98
  24
  13
  98
  24
  122
  1
  1
  49
  #f
  545/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app p n1 (-> n2 <-) n3 n4 n5 n6 n7) (env (() () () () () () () ())))\""
  135
  98
  24
  13
  98
  24
  122
  1
  1
  49
  #f
  545/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env (())))\""
  135
  98
  24
  13
  98
  24
  122
  1
  1
  49
  #f
  545/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env (())))\""
  135
  98
  24
  13
  98
  24
  122
  1
  1
  49
  #f
  545/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  135
  98
  24
  13
  98
  24
  122
  1
  1
  49
  #f
  545/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  letrec*
  "\"'(eval ((top) letrec* (println ... sat-solve-7) ...) (env ()))\""
  137
  100
  24
  13
  100
  24
  124
  1
  1
  51
  #t
  111/20
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (-> (app or (app not x4) x1) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  137
  100
  24
  13
  100
  24
  124
  1
  1
  51
  #f
  111/20
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  let
  "\"'(eval (letrec* (println ... sat-solve-7) (-> (let (_) ...) <-)) (env ()))\""
  137
  100
  24
  13
  100
  24
  124
  1
  1
  51
  #t
  111/20
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  app
  "\"'(eval (let (... () (_ (-> (app display s) <-)) () ...) ...) (env (())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  53
  #t
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  app
  "\"'(eval (app or (-> (app not x4) <-) x1) (env (())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  53
  #f
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app (-> p <-) n1 n2 n3 n4 n5 n6 n7) (env (() () () () () () () ())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  53
  #t
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or x3 x4) <-)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  53
  #f
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  53
  #f
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  app
  "\"'(eval (app f (-> (app #t) <-)) (env (())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  53
  #t
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env (())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  53
  #f
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  app
  "\"'(eval (app or (-> (app not x2) <-) (app not x3)) (env (())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  53
  #f
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  53
  #f
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  app
  "\"'(eval (app or x1 (app not x2) (-> (app not x3) <-)) (env (())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  53
  #f
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  53
  #f
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env (())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  53
  #t
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  app
  "\"'(eval (app or (app not x2) (-> (app not x3) <-)) (env (())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  53
  #f
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  app
  "\"'(eval (app or x1 (-> (app not x2) <-) (app not x3)) (env (())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  53
  #f
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app or x1 (-> x2 <-)) (env (())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  53
  #f
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app or (app not x4) (-> x1 <-)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  8
  #f
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  app
  "\"'(eval (app or (-> (app not x4) <-) x1) (env (())))\""
  26
  17
  7
  2
  17
  7
  24
  1
  1
  12
  #f
  90/17
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  app
  "\"'(eval\n  (let (... () (_ (-> (app display (app sat-solve-7 phi)) <-)) () ...) ...)\n  (env ()))\""
  116
  85
  19
  12
  85
  19
  104
  1
  1
  41
  #t
  479/85
  ((4 4 0) (4 4 0) (4 4 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  app
  "\"'(eval (app or x1 (-> (app not x2) <-) (app not x3)) (env (())))\""
  116
  85
  19
  12
  85
  19
  104
  1
  1
  41
  #f
  479/85
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app p n1 (-> n2 <-) n3 n4 n5 n6 n7) (env (() () () () () () () ())))\""
  116
  85
  19
  12
  85
  19
  104
  1
  1
  41
  #f
  479/85
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4 x5 x6 x7)\n    (->\n     (app\n      and\n      (app or x1 x2)\n      (app or x1 (app not x2) (app not x3))\n      (app or x3 x4)\n      (app or (app not x4) x1)\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env (())))\""
  116
  85
  19
  12
  85
  19
  104
  1
  1
  41
  #f
  479/85
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env ()))\""
  118
  87
  19
  12
  87
  19
  106
  1
  1
  43
  #t
  163/29
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  app
  "\"'(eval (app display (-> (app sat-solve-7 phi) <-)) (env ()))\""
  118
  87
  19
  12
  87
  19
  106
  1
  1
  43
  #f
  163/29
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  app
  "\"'(eval (app f (-> (app #f) <-)) (env (())))\""
  118
  87
  19
  12
  87
  19
  106
  1
  1
  43
  #t
  163/29
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  app
  "\"'(eval\n  (λ (n7) (-> (app p n1 n2 n3 n4 n5 n6 n7) <-))\n  (env (() () () () () () () ())))\""
  118
  87
  19
  12
  87
  19
  106
  1
  1
  43
  #f
  163/29
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  app
  "\"'(eval (let (... () (_ (-> (app display s) <-)) () ...) ...) (env (())))\""
  124
  91
  21
  12
  91
  21
  112
  1
  1
  45
  #t
  39/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 x2) <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  124
  91
  21
  12
  91
  21
  112
  1
  1
  45
  #f
  39/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env (())))\""
  124
  91
  21
  12
  91
  21
  112
  1
  1
  45
  #f
  39/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app p n1 n2 (-> n3 <-) n4 n5 n6 n7) (env (() () () () () () () ())))\""
  124
  91
  21
  12
  91
  21
  112
  1
  1
  45
  #f
  39/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env (())))\""
  124
  91
  21
  12
  91
  21
  112
  1
  1
  45
  #f
  39/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (())))\""
  124
  91
  21
  12
  91
  21
  112
  1
  1
  45
  #f
  39/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  let
  "\"'(eval (λ (f) (-> (let (_) ...) <-)) (env (())))\""
  124
  91
  21
  12
  91
  21
  112
  1
  1
  45
  #f
  39/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app (-> p <-) n1 n2 n3 n4 n5 n6 n7) (env (() () () () () () () ())))\""
  124
  91
  21
  12
  91
  21
  112
  1
  1
  45
  #t
  39/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app or x3 (-> x4 <-)) (env (())))\""
  124
  91
  21
  12
  91
  21
  112
  1
  1
  45
  #f
  39/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  app
  "\"'(eval (λ (n4) (-> (app try (λ (n5) ...)) <-)) (env (() () () () ())))\""
  124
  91
  21
  12
  91
  21
  112
  1
  1
  45
  #f
  39/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  app
  "\"'(eval (λ (n3) (-> (app try (λ (n4) ...)) <-)) (env (() () () ())))\""
  124
  91
  21
  12
  91
  21
  112
  1
  1
  45
  #f
  39/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 n4 n5 n6 (-> n7 <-)) (env (() () () () () () () ())))\""
  126
  92
  22
  12
  92
  22
  114
  1
  1
  45
  #f
  513/92
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env (())))\""
  126
  92
  22
  12
  92
  22
  114
  1
  1
  45
  #f
  513/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  app
  "\"'(eval (let (... () (_ (-> (app println \"trying\") <-)) () ...) ...) (env (())))\""
  133
  98
  22
  13
  98
  22
  120
  1
  1
  51
  #t
  543/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  let
  "\"'(eval (λ (s) (-> (let (_) ...) <-)) (env (())))\""
  133
  98
  22
  13
  98
  22
  120
  1
  1
  51
  #t
  543/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 n4 n5 (-> n6 <-) n7) (env (() () () () () () () ())))\""
  135
  99
  23
  13
  99
  23
  122
  1
  1
  51
  #f
  61/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  app
  "\"'(eval (app or (-> (app not x2) <-) (app not x3)) (env (())))\""
  135
  99
  23
  13
  99
  23
  122
  1
  1
  51
  #f
  61/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  135
  99
  23
  13
  99
  23
  122
  1
  1
  51
  #f
  61/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  app
  "\"'(eval (λ (n6) (-> (app try (λ (n7) ...)) <-)) (env (() () () () () () ())))\""
  135
  99
  23
  13
  99
  23
  122
  1
  1
  51
  #f
  61/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) x2) (env (())))\""
  135
  99
  23
  13
  99
  23
  122
  1
  1
  51
  #f
  61/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env (())))\""
  135
  99
  23
  13
  99
  23
  122
  1
  1
  51
  #f
  61/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env (())))\""
  135
  99
  23
  13
  99
  23
  122
  1
  1
  51
  #f
  61/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (-> (app or (app not x4) x1) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  135
  99
  23
  13
  99
  23
  122
  1
  1
  51
  #f
  61/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  app
  "\"'(eval (app or (app not x2) (-> (app not x3) <-)) (env (())))\""
  135
  99
  23
  13
  99
  23
  122
  1
  1
  51
  #f
  61/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env (() ())))\""
  135
  99
  23
  13
  99
  23
  122
  1
  1
  51
  #f
  61/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or x3 x4) <-)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  135
  99
  23
  13
  99
  23
  122
  1
  1
  51
  #f
  61/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app or (-> x3 <-) x4) (env (())))\""
  135
  99
  23
  13
  99
  23
  122
  1
  1
  51
  #f
  61/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) (app not x2) (app not x3)) (env (())))\""
  135
  99
  23
  13
  99
  23
  122
  1
  1
  51
  #f
  61/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  app
  "\"'(eval (λ (n5) (-> (app try (λ (n6) ...)) <-)) (env (() () () () () ())))\""
  135
  99
  23
  13
  99
  23
  122
  1
  1
  51
  #f
  61/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  app
  "\"'(eval (let (_) (-> (app or (app f (app #t)) (app f (app #f))) <-)) (env (())))\""
  135
  99
  23
  13
  99
  23
  122
  1
  1
  51
  #f
  61/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  135
  99
  23
  13
  99
  23
  122
  1
  1
  51
  #f
  61/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  app
  "\"'(eval (app f (-> (app #t) <-)) (env (())))\""
  135
  99
  23
  13
  99
  23
  122
  1
  1
  51
  #t
  61/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app or x1 (-> x2 <-)) (env (())))\""
  135
  99
  23
  13
  99
  23
  122
  1
  1
  51
  #f
  61/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  let
  "\"'(eval (letrec* (println ... sat-solve-7) (-> (let (_) ...) <-)) (env ()))\""
  136
  100
  23
  13
  100
  23
  123
  1
  1
  52
  #t
  277/50
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 (-> n4 <-) n5 n6 n7) (env (() () () () () () () ())))\""
  136
  100
  23
  13
  100
  23
  123
  1
  1
  52
  #f
  277/50
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env (())))\""
  136
  100
  23
  13
  100
  23
  123
  1
  1
  52
  #t
  277/50
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app display (-> s <-)) (env (())))\""
  136
  100
  23
  13
  100
  23
  123
  1
  1
  52
  #f
  277/50
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  app
  "\"'(eval (app or x1 (app not x2) (-> (app not x3) <-)) (env (())))\""
  136
  100
  23
  13
  100
  23
  123
  1
  1
  52
  #f
  277/50
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env (())))\""
  136
  100
  23
  13
  100
  23
  123
  1
  1
  52
  #f
  277/50
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  app
  "\"'(eval (λ (n2) (-> (app try (λ (n3) ...)) <-)) (env (() () ())))\""
  136
  100
  23
  13
  100
  23
  123
  1
  1
  52
  #f
  277/50
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env (())))\""
  136
  100
  23
  13
  100
  23
  123
  1
  1
  52
  #f
  277/50
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (())))\""
  136
  100
  23
  13
  100
  23
  123
  1
  1
  52
  #f
  277/50
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  136
  100
  23
  13
  100
  23
  123
  1
  1
  52
  #f
  277/50
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env (())))\""
  136
  100
  23
  13
  100
  23
  123
  1
  1
  52
  #f
  277/50
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app p (-> n1 <-) n2 n3 n4 n5 n6 n7) (env (() () () () () () () ())))\""
  136
  100
  23
  13
  100
  23
  123
  1
  1
  52
  #f
  277/50
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  letrec*
  "\"'(eval ((top) letrec* (println ... sat-solve-7) ...) (env ()))\""
  137
  101
  23
  13
  101
  23
  124
  1
  1
  53
  #t
  559/101
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 n4 (-> n5 <-) n6 n7) (env (() () () () () () () ())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  53
  #f
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env (())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  53
  #f
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app not (-> x4 <-)) (env (())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  53
  #f
  565/102
  ((0 0 0) (0 0 0) (0 0 0)))
