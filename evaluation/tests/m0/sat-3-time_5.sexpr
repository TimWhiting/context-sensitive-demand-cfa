'(clean-cache
  sat-3
  0
  5
  59
  letrec*
  "\"'(eval ((top) letrec* (println ... sat-solve-7) ...) (env ()))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  4
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  59
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env (())))\""
  #f)
'(clean-cache
  sat-3
  0
  59
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env (() ())))\""
  #f)
'(clean-cache
  sat-3
  0
  59
  app
  "\"'(eval (λ (n2) (-> (app try (λ (n3) ...)) <-)) (env (() () ())))\""
  #f)
'(clean-cache
  sat-3
  0
  59
  app
  "\"'(eval (λ (n3) (-> (app try (λ (n4) ...)) <-)) (env (() () () ())))\""
  #f)
'(clean-cache
  sat-3
  0
  59
  app
  "\"'(eval (λ (n4) (-> (app try (λ (n5) ...)) <-)) (env (() () () () ())))\""
  #f)
'(clean-cache
  sat-3
  0
  59
  app
  "\"'(eval (λ (n5) (-> (app try (λ (n6) ...)) <-)) (env (() () () () () ())))\""
  #f)
'(clean-cache
  sat-3
  0
  59
  app
  "\"'(eval (λ (n6) (-> (app try (λ (n7) ...)) <-)) (env (() () () () () () ())))\""
  #f)
'(clean-cache
  sat-3
  0
  5
  59
  app
  "\"'(eval\n  (λ (n7) (-> (app p n1 n2 n3 n4 n5 n6 n7) <-))\n  (env (() () () () () () () ())))\""
  72
  58
  11
  3
  58
  11
  69
  1
  1
  28
  #f
  44/29
  ((3 3 0) (7/2 7/2 0) (3 3 0)))
'(clean-cache
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 n4 n5 n6 (-> n7 <-)) (env (() () () () () () () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  6
  #f
  8/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 n4 n5 (-> n6 <-) n7) (env (() () () () () () () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  6
  #f
  8/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 n4 (-> n5 <-) n6 n7) (env (() () () () () () () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  6
  #f
  8/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 (-> n4 <-) n5 n6 n7) (env (() () () () () () () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  6
  #f
  8/7
  ((0 0 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app p n1 n2 (-> n3 <-) n4 n5 n6 n7) (env (() () () () () () () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  6
  #f
  8/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app p n1 (-> n2 <-) n3 n4 n5 n6 n7) (env (() () () () () () () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  6
  #f
  8/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app p (-> n1 <-) n2 n3 n4 n5 n6 n7) (env (() () () () () () () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  6
  #f
  8/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app (-> p <-) n1 n2 n3 n4 n5 n6 n7) (env (() () () () () () () ())))\""
  5
  3
  2
  0
  3
  2
  5
  1
  1
  3
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  59
  let
  "\"'(eval (λ (f) (-> (let (_) ...) <-)) (env (())))\""
  #f)
'(clean-cache
  sat-3
  0
  5
  59
  app
  "\"'(eval (let (... () (_ (-> (app println \"trying\") <-)) () ...) ...) (env (())))\""
  7
  6
  0
  1
  6
  0
  6
  1
  1
  6
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  59
  app
  "\"'(eval (let (_) (-> (app or (app f (app #t)) (app f (app #f))) <-)) (env (())))\""
  #f)
'(clean-cache
  sat-3
  0
  59
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env (())))\""
  #f)
'(clean-cache
  sat-3
  0
  5
  59
  app
  "\"'(eval (app f (-> (app #f) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env (())))\""
  16
  8
  8
  0
  8
  8
  16
  1
  1
  7
  #f
  7/4
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  5
  59
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env (())))\""
  111
  81
  19
  11
  81
  19
  100
  1
  1
  39
  #f
  133/81
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  sat-3
  0
  5
  59
  app
  "\"'(eval (app f (-> (app #t) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env (())))\""
  16
  8
  8
  0
  8
  8
  16
  1
  1
  7
  #f
  7/4
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  5
  59
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4 x5 x6 x7)\n    (->\n     (app\n      and\n      (app or x1 x2)\n      (app or x1 (app not x2) (app not x3))\n      (app or x3 x4)\n      (app or (app not x4) x1)\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env (())))\""
  65
  54
  9
  2
  54
  9
  63
  1
  1
  25
  #f
  83/54
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  sat-3
  0
  5
  59
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env (())))\""
  26
  17
  7
  2
  17
  7
  24
  1
  1
  12
  #f
  22/17
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  8
  #f
  6/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  8
  #f
  6/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  5
  59
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env (())))\""
  30
  21
  7
  2
  21
  7
  28
  1
  1
  14
  #f
  4/3
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  5
  59
  app
  "\"'(eval (app or (app not x2) (-> (app not x3) <-)) (env (())))\""
  22
  14
  6
  2
  14
  6
  20
  1
  1
  11
  #f
  17/14
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  8
  #f
  6/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  5
  59
  app
  "\"'(eval (app or (-> (app not x2) <-) (app not x3)) (env (())))\""
  22
  14
  6
  2
  14
  6
  20
  1
  1
  11
  #f
  17/14
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  8
  #f
  6/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  5
  59
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (-> (app or (app not x4) x1) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  28
  19
  7
  2
  19
  7
  26
  1
  1
  13
  #f
  25/19
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app or (app not x4) (-> x1 <-)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  8
  #f
  6/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  5
  59
  app
  "\"'(eval (app or (-> (app not x4) <-) x1) (env (())))\""
  22
  14
  6
  2
  14
  6
  20
  1
  1
  11
  #f
  17/14
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app not (-> x4 <-)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  8
  #f
  6/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  5
  59
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or x3 x4) <-)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  26
  17
  7
  2
  17
  7
  24
  1
  1
  12
  #f
  22/17
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app or x3 (-> x4 <-)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  8
  #f
  6/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app or (-> x3 <-) x4) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  8
  #f
  6/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  5
  59
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  34
  24
  8
  2
  24
  8
  32
  1
  1
  15
  #f
  11/8
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-3
  0
  5
  59
  app
  "\"'(eval (app or x1 (app not x2) (-> (app not x3) <-)) (env (())))\""
  22
  14
  6
  2
  14
  6
  20
  1
  1
  11
  #f
  17/14
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  8
  #f
  6/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  5
  59
  app
  "\"'(eval (app or x1 (-> (app not x2) <-) (app not x3)) (env (())))\""
  22
  14
  6
  2
  14
  6
  20
  1
  1
  11
  #f
  17/14
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  8
  #f
  6/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) (app not x2) (app not x3)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  8
  #f
  6/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  5
  59
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 x2) <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  26
  17
  7
  2
  17
  7
  24
  1
  1
  12
  #f
  22/17
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app or x1 (-> x2 <-)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  8
  #f
  6/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) x2) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  8
  #f
  6/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  5
  59
  let
  "\"'(eval (λ (s) (-> (let (_) ...) <-)) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  3
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  5
  59
  app
  "\"'(eval (let (... () (_ (-> (app display s) <-)) () ...) ...) (env (())))\""
  6
  4
  2
  0
  4
  2
  6
  1
  1
  4
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app display (-> s <-)) (env (())))\""
  4
  2
  2
  0
  2
  2
  4
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  5
  59
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  5
  59
  let
  "\"'(eval (letrec* (println ... sat-solve-7) (-> (let (_) ...) <-)) (env ()))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  3
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  0
  59
  app
  "\"'(eval\n  (let (... () (_ (-> (app display (app sat-solve-7 phi)) <-)) () ...) ...)\n  (env ()))\""
  #f)
'(clean-cache
  sat-3
  0
  59
  app
  "\"'(eval (app display (-> (app sat-solve-7 phi) <-)) (env ()))\""
  #f)
'(clean-cache
  sat-3
  0
  5
  59
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env (())))\""
  30
  21
  7
  2
  21
  7
  28
  1
  1
  14
  #f
  4/3
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  app
  "\"'(eval (app or x1 (-> (app not x2) <-) (app not x3)) (env (())))\""
  33
  24
  7
  2
  24
  7
  31
  1
  1
  15
  #f
  11/8
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app p (-> n1 <-) n2 n3 n4 n5 n6 n7) (env (() () () () () () () ())))\""
  36
  26
  8
  2
  26
  8
  34
  1
  1
  16
  #f
  18/13
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app or x1 (-> x2 <-)) (env (())))\""
  37
  27
  8
  2
  27
  8
  35
  1
  1
  16
  #f
  38/27
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 (-> n4 <-) n5 n6 n7) (env (() () () () () () () ())))\""
  40
  29
  9
  2
  29
  9
  38
  1
  1
  17
  #f
  41/29
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  app
  "\"'(eval (app or x1 (app not x2) (-> (app not x3) <-)) (env (())))\""
  43
  32
  9
  2
  32
  9
  41
  1
  1
  18
  #f
  23/16
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  app
  "\"'(eval (app or (-> (app not x2) <-) (app not x3)) (env (())))\""
  43
  32
  9
  2
  32
  9
  41
  1
  1
  18
  #f
  23/16
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app not (-> x4 <-)) (env (())))\""
  44
  33
  9
  2
  33
  9
  42
  1
  1
  18
  #f
  16/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 n4 (-> n5 <-) n6 n7) (env (() () () () () () () ())))\""
  47
  35
  10
  2
  35
  10
  45
  1
  1
  19
  #f
  51/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (())))\""
  47
  35
  10
  2
  35
  10
  45
  1
  1
  19
  #f
  51/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env (())))\""
  113
  82
  20
  11
  82
  20
  102
  1
  1
  39
  #f
  135/82
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env (())))\""
  113
  82
  20
  11
  82
  20
  102
  1
  1
  39
  #f
  135/82
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app (-> p <-) n1 n2 n3 n4 n5 n6 n7) (env (() () () () () () () ())))\""
  113
  82
  20
  11
  82
  20
  102
  1
  1
  39
  #t
  135/82
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 n4 n5 n6 (-> n7 <-)) (env (() () () () () () () ())))\""
  115
  83
  21
  11
  83
  21
  104
  1
  1
  39
  #f
  137/83
  ((0 0 0) (0 0 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env (())))\""
  117
  85
  21
  11
  85
  21
  106
  1
  1
  41
  #t
  139/85
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  app
  "\"'(eval (app f (-> (app #t) <-)) (env (())))\""
  117
  85
  21
  11
  85
  21
  106
  1
  1
  41
  #t
  139/85
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) x2) (env (())))\""
  117
  85
  21
  11
  85
  21
  106
  1
  1
  41
  #f
  139/85
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or x3 x4) <-)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  117
  85
  21
  11
  85
  21
  106
  1
  1
  41
  #f
  139/85
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 n4 n5 (-> n6 <-) n7) (env (() () () () () () () ())))\""
  119
  86
  22
  11
  86
  22
  108
  1
  1
  41
  #f
  141/86
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env ()))\""
  121
  88
  22
  11
  88
  22
  110
  1
  1
  43
  #t
  13/8
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  let
  "\"'(eval (letrec* (println ... sat-solve-7) (-> (let (_) ...) <-)) (env ()))\""
  122
  89
  22
  11
  89
  22
  111
  1
  1
  44
  #t
  144/89
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  app
  "\"'(eval (let (... () (_ (-> (app display s) <-)) () ...) ...) (env (())))\""
  128
  93
  24
  11
  93
  24
  117
  1
  1
  48
  #t
  148/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) (app not x2) (app not x3)) (env (())))\""
  128
  93
  24
  11
  93
  24
  117
  1
  1
  48
  #f
  148/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env (() ())))\""
  128
  93
  24
  11
  93
  24
  117
  1
  1
  48
  #f
  148/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  128
  93
  24
  11
  93
  24
  117
  1
  1
  48
  #f
  148/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app display (-> s <-)) (env (())))\""
  128
  93
  24
  11
  93
  24
  117
  1
  1
  48
  #t
  148/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  let
  "\"'(eval (λ (s) (-> (let (_) ...) <-)) (env (())))\""
  129
  94
  24
  11
  94
  24
  118
  1
  1
  49
  #t
  149/94
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4 x5 x6 x7)\n    (->\n     (app\n      and\n      (app or x1 x2)\n      (app or x1 (app not x2) (app not x3))\n      (app or x3 x4)\n      (app or (app not x4) x1)\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env (())))\""
  129
  94
  24
  11
  94
  24
  118
  1
  1
  49
  #f
  149/94
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  let
  "\"'(eval (λ (f) (-> (let (_) ...) <-)) (env (())))\""
  129
  94
  24
  11
  94
  24
  118
  1
  1
  49
  #f
  149/94
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  app
  "\"'(eval (app f (-> (app #f) <-)) (env (())))\""
  129
  94
  24
  11
  94
  24
  118
  1
  1
  49
  #t
  149/94
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  app
  "\"'(eval (λ (n2) (-> (app try (λ (n3) ...)) <-)) (env (() () ())))\""
  129
  94
  24
  11
  94
  24
  118
  1
  1
  49
  #f
  149/94
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app p n1 (-> n2 <-) n3 n4 n5 n6 n7) (env (() () () () () () () ())))\""
  129
  94
  24
  11
  94
  24
  118
  1
  1
  49
  #f
  149/94
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env (())))\""
  129
  94
  24
  11
  94
  24
  118
  1
  1
  49
  #f
  149/94
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  app
  "\"'(eval (λ (n5) (-> (app try (λ (n6) ...)) <-)) (env (() () () () () ())))\""
  129
  94
  24
  11
  94
  24
  118
  1
  1
  49
  #f
  149/94
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app or x3 (-> x4 <-)) (env (())))\""
  129
  94
  24
  11
  94
  24
  118
  1
  1
  49
  #f
  149/94
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env (())))\""
  129
  94
  24
  11
  94
  24
  118
  1
  1
  49
  #f
  149/94
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app p n1 n2 (-> n3 <-) n4 n5 n6 n7) (env (() () () () () () () ())))\""
  129
  94
  24
  11
  94
  24
  118
  1
  1
  49
  #f
  149/94
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  app
  "\"'(eval\n  (λ (n7) (-> (app p n1 n2 n3 n4 n5 n6 n7) <-))\n  (env (() () () () () () () ())))\""
  129
  94
  24
  11
  94
  24
  118
  1
  1
  49
  #f
  149/94
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  app
  "\"'(eval (app or (-> (app not x4) <-) x1) (env (())))\""
  129
  94
  24
  11
  94
  24
  118
  1
  1
  49
  #f
  149/94
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  letrec*
  "\"'(eval ((top) letrec* (println ... sat-solve-7) ...) (env ()))\""
  130
  95
  24
  11
  95
  24
  119
  1
  1
  50
  #t
  30/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (-> (app or (app not x4) x1) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  130
  95
  24
  11
  95
  24
  119
  1
  1
  50
  #f
  30/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 x2) <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  130
  95
  24
  11
  95
  24
  119
  1
  1
  50
  #f
  30/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  app
  "\"'(eval (let (_) (-> (app or (app f (app #t)) (app f (app #f))) <-)) (env (())))\""
  130
  95
  24
  11
  95
  24
  119
  1
  1
  50
  #f
  30/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  app
  "\"'(eval\n  (let (... () (_ (-> (app display (app sat-solve-7 phi)) <-)) () ...) ...)\n  (env ()))\""
  135
  99
  24
  12
  99
  24
  123
  1
  1
  52
  #t
  52/33
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  app
  "\"'(eval (let (... () (_ (-> (app println \"trying\") <-)) () ...) ...) (env (())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  55
  #t
  53/34
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  55
  #f
  53/34
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  app
  "\"'(eval (λ (n3) (-> (app try (λ (n4) ...)) <-)) (env (() () () ())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  55
  #f
  53/34
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env (())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  55
  #f
  53/34
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  app
  "\"'(eval (λ (n6) (-> (app try (λ (n7) ...)) <-)) (env (() () () () () () ())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  55
  #f
  53/34
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  app
  "\"'(eval (app or (app not x2) (-> (app not x3) <-)) (env (())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  55
  #f
  53/34
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  55
  #f
  53/34
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app or (app not x4) (-> x1 <-)) (env (())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  55
  #f
  53/34
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  55
  #f
  53/34
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app or (-> x3 <-) x4) (env (())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  55
  #f
  53/34
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env (())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  55
  #f
  53/34
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  app
  "\"'(eval (λ (n4) (-> (app try (λ (n5) ...)) <-)) (env (() () () () ())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  55
  #f
  53/34
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env (())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  55
  #f
  53/34
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env (())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  55
  #f
  53/34
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  5
  59
  app
  "\"'(eval (app display (-> (app sat-solve-7 phi) <-)) (env ()))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  55
  #f
  53/34
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4 x5 x6 x7)\n    (->\n     (app\n      and\n      (app or x1 x2)\n      (app or x1 (app not x2) (app not x3))\n      (app or x3 x4)\n      (app or (app not x4) x1)\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env (())))\""
  65
  54
  9
  2
  54
  9
  63
  1
  1
  25
  #f
  83/54
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  app
  "\"'(eval (app f (-> (app #t) <-)) (env (())))\""
  65
  54
  9
  2
  54
  9
  63
  1
  1
  25
  #t
  83/54
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app display (-> s <-)) (env (())))\""
  69
  56
  11
  2
  56
  11
  67
  1
  1
  27
  #t
  85/56
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) x2) (env (())))\""
  69
  56
  11
  2
  56
  11
  67
  1
  1
  27
  #f
  85/56
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  app
  "\"'(eval (λ (n2) (-> (app try (λ (n3) ...)) <-)) (env (() () ())))\""
  115
  83
  21
  11
  83
  21
  104
  1
  1
  41
  #f
  135/83
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  app
  "\"'(eval (app f (-> (app #f) <-)) (env (())))\""
  115
  83
  21
  11
  83
  21
  104
  1
  1
  41
  #t
  135/83
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  115
  83
  21
  11
  83
  21
  104
  1
  1
  41
  #f
  135/83
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  app
  "\"'(eval (let (_) (-> (app or (app f (app #t)) (app f (app #f))) <-)) (env (())))\""
  115
  83
  21
  11
  83
  21
  104
  1
  1
  41
  #f
  135/83
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 n4 (-> n5 <-) n6 n7) (env (() () () () () () () ())))\""
  117
  84
  22
  11
  84
  22
  106
  1
  1
  41
  #f
  137/84
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  let
  "\"'(eval (λ (f) (-> (let (_) ...) <-)) (env (())))\""
  117
  84
  22
  11
  84
  22
  106
  1
  1
  41
  #f
  137/84
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app or x3 (-> x4 <-)) (env (())))\""
  117
  84
  22
  11
  84
  22
  106
  1
  1
  41
  #f
  137/84
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (())))\""
  117
  84
  22
  11
  84
  22
  106
  1
  1
  41
  #f
  137/84
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  app
  "\"'(eval (app or (app not x2) (-> (app not x3) <-)) (env (())))\""
  117
  84
  22
  11
  84
  22
  106
  1
  1
  41
  #f
  137/84
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 n4 n5 n6 (-> n7 <-)) (env (() () () () () () () ())))\""
  119
  85
  23
  11
  85
  23
  108
  1
  1
  41
  #f
  139/85
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env (())))\""
  119
  85
  23
  11
  85
  23
  108
  1
  1
  41
  #f
  139/85
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or x3 x4) <-)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  119
  85
  23
  11
  85
  23
  108
  1
  1
  41
  #f
  139/85
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env (())))\""
  119
  85
  23
  11
  85
  23
  108
  1
  1
  41
  #f
  139/85
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  app
  "\"'(eval (λ (n4) (-> (app try (λ (n5) ...)) <-)) (env (() () () () ())))\""
  119
  85
  23
  11
  85
  23
  108
  1
  1
  41
  #f
  139/85
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app not (-> x4 <-)) (env (())))\""
  119
  85
  23
  11
  85
  23
  108
  1
  1
  41
  #f
  139/85
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env (())))\""
  119
  85
  23
  11
  85
  23
  108
  1
  1
  41
  #f
  139/85
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env (())))\""
  119
  85
  23
  11
  85
  23
  108
  1
  1
  41
  #f
  139/85
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env ()))\""
  121
  87
  23
  11
  87
  23
  110
  1
  1
  43
  #t
  47/29
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  app
  "\"'(eval (app or (-> (app not x2) <-) (app not x3)) (env (())))\""
  121
  87
  23
  11
  87
  23
  110
  1
  1
  43
  #f
  47/29
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  let
  "\"'(eval (λ (s) (-> (let (_) ...) <-)) (env (())))\""
  124
  90
  23
  11
  90
  23
  113
  1
  1
  46
  #t
  8/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  app
  "\"'(eval (app display (-> (app sat-solve-7 phi) <-)) (env ()))\""
  127
  92
  23
  12
  92
  23
  115
  1
  1
  46
  #f
  37/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (())))\""
  127
  92
  23
  12
  92
  23
  115
  1
  1
  46
  #f
  37/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app (-> p <-) n1 n2 n3 n4 n5 n6 n7) (env (() () () () () () () ())))\""
  127
  92
  23
  12
  92
  23
  115
  1
  1
  46
  #t
  37/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  app
  "\"'(eval (let (... () (_ (-> (app display s) <-)) () ...) ...) (env (())))\""
  129
  94
  23
  12
  94
  23
  117
  1
  1
  48
  #t
  75/47
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  let
  "\"'(eval (letrec* (println ... sat-solve-7) (-> (let (_) ...) <-)) (env ()))\""
  130
  95
  23
  12
  95
  23
  118
  1
  1
  49
  #t
  151/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app or (app not x4) (-> x1 <-)) (env (())))\""
  130
  95
  23
  12
  95
  23
  118
  1
  1
  49
  #f
  151/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env (())))\""
  130
  95
  23
  12
  95
  23
  118
  1
  1
  49
  #f
  151/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  app
  "\"'(eval\n  (let (... () (_ (-> (app display (app sat-solve-7 phi)) <-)) () ...) ...)\n  (env ()))\""
  132
  97
  23
  12
  97
  23
  120
  1
  1
  51
  #t
  153/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  app
  "\"'(eval (app or x1 (-> (app not x2) <-) (app not x3)) (env (())))\""
  132
  97
  23
  12
  97
  23
  120
  1
  1
  51
  #f
  153/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env (() ())))\""
  132
  97
  23
  12
  97
  23
  120
  1
  1
  51
  #f
  153/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  app
  "\"'(eval (let (... () (_ (-> (app println \"trying\") <-)) () ...) ...) (env (())))\""
  136
  100
  23
  13
  100
  23
  123
  1
  1
  54
  #t
  39/25
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app p n1 (-> n2 <-) n3 n4 n5 n6 n7) (env (() () () () () () () ())))\""
  136
  100
  23
  13
  100
  23
  123
  1
  1
  54
  #f
  39/25
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 x2) <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  136
  100
  23
  13
  100
  23
  123
  1
  1
  54
  #f
  39/25
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env (())))\""
  136
  100
  23
  13
  100
  23
  123
  1
  1
  54
  #f
  39/25
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env (())))\""
  136
  100
  23
  13
  100
  23
  123
  1
  1
  54
  #f
  39/25
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  app
  "\"'(eval (λ (n5) (-> (app try (λ (n6) ...)) <-)) (env (() () () () () ())))\""
  136
  100
  23
  13
  100
  23
  123
  1
  1
  54
  #f
  39/25
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env (())))\""
  136
  100
  23
  13
  100
  23
  123
  1
  1
  54
  #f
  39/25
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  app
  "\"'(eval (app or (-> (app not x4) <-) x1) (env (())))\""
  136
  100
  23
  13
  100
  23
  123
  1
  1
  54
  #f
  39/25
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app or (-> x3 <-) x4) (env (())))\""
  136
  100
  23
  13
  100
  23
  123
  1
  1
  54
  #f
  39/25
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app p (-> n1 <-) n2 n3 n4 n5 n6 n7) (env (() () () () () () () ())))\""
  136
  100
  23
  13
  100
  23
  123
  1
  1
  54
  #f
  39/25
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env (())))\""
  136
  100
  23
  13
  100
  23
  123
  1
  1
  54
  #t
  39/25
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  app
  "\"'(eval\n  (λ (n7) (-> (app p n1 n2 n3 n4 n5 n6 n7) <-))\n  (env (() () () () () () () ())))\""
  136
  100
  23
  13
  100
  23
  123
  1
  1
  54
  #f
  39/25
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  app
  "\"'(eval (app or x1 (app not x2) (-> (app not x3) <-)) (env (())))\""
  136
  100
  23
  13
  100
  23
  123
  1
  1
  54
  #f
  39/25
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env (())))\""
  136
  100
  23
  13
  100
  23
  123
  1
  1
  54
  #f
  39/25
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  136
  100
  23
  13
  100
  23
  123
  1
  1
  54
  #f
  39/25
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  app
  "\"'(eval (λ (n6) (-> (app try (λ (n7) ...)) <-)) (env (() () () () () () ())))\""
  136
  100
  23
  13
  100
  23
  123
  1
  1
  54
  #f
  39/25
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 (-> n4 <-) n5 n6 n7) (env (() () () () () () () ())))\""
  136
  100
  23
  13
  100
  23
  123
  1
  1
  54
  #f
  39/25
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app or x1 (-> x2 <-)) (env (())))\""
  136
  100
  23
  13
  100
  23
  123
  1
  1
  54
  #f
  39/25
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  app
  "\"'(eval (λ (n3) (-> (app try (λ (n4) ...)) <-)) (env (() () () ())))\""
  136
  100
  23
  13
  100
  23
  123
  1
  1
  54
  #f
  39/25
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app p n1 n2 (-> n3 <-) n4 n5 n6 n7) (env (() () () () () () () ())))\""
  136
  100
  23
  13
  100
  23
  123
  1
  1
  54
  #f
  39/25
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) (app not x2) (app not x3)) (env (())))\""
  136
  100
  23
  13
  100
  23
  123
  1
  1
  54
  #f
  39/25
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (-> (app or (app not x4) x1) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  136
  100
  23
  13
  100
  23
  123
  1
  1
  54
  #f
  39/25
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  letrec*
  "\"'(eval ((top) letrec* (println ... sat-solve-7) ...) (env ()))\""
  137
  101
  23
  13
  101
  23
  124
  1
  1
  55
  #t
  157/101
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 n4 n5 (-> n6 <-) n7) (env (() () () () () () () ())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  55
  #f
  53/34
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  5
  59
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  139
  102
  24
  13
  102
  24
  126
  1
  1
  55
  #f
  53/34
  ((0 0 0) (0 0 0) (0 0 0)))
