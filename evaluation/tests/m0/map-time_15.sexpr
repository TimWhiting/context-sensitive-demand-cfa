'(clean-cache
  map
  0
  15
  52
  lettypes
  "\"'(eval ((top) lettypes (cons ... nil) ...) (env ()))\""
  74
  60
  10
  4
  60
  10
  70
  1
  1
  35
  #f
  57/10
  ((13/2 13/2 0) (6 6 0) (11/2 11/2 0)))
'(clean-cache
  map
  0
  15
  52
  letrec*
  "\"'(eval (lettypes cons ... nil (letrec* (car ... my-map) ...)) (env ()))\""
  73
  59
  10
  4
  59
  10
  69
  1
  1
  35
  #f
  336/59
  ((11/2 6 0) (6 6 0) (13/2 13/2 0)))
'(clean-cache
  map
  0
  15
  52
  let
  "\"'(eval (λ (f l) (-> (let (_) ...) <-)) (env (())))\""
  67
  54
  10
  3
  54
  10
  64
  1
  1
  33
  #f
  154/27
  ((6 6 0) (6 13/2 0) (11/2 11/2 0)))
'(clean-cache
  map
  0
  15
  52
  app
  "\"'(eval (let (... () (_ (-> (app debug-trace) <-)) () ...) ...) (env (())))\""
  6
  5
  0
  1
  5
  0
  5
  1
  1
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  0
  15
  52
  letrec
  "\"'(eval (let (_) (-> (letrec (lp) ...) <-)) (env (())))\""
  66
  53
  10
  3
  53
  10
  63
  1
  1
  33
  #f
  302/53
  ((11/2 11/2 0) (11/2 11/2 0) (11/2 11/2 0)))
'(clean-cache
  map
  0
  15
  52
  match
  "\"'(eval (λ (lst) (-> (match (app not (app pair? lst)) ...) <-)) (env (() ())))\""
  61
  49
  10
  2
  49
  10
  59
  1
  1
  31
  #f
  40/7
  ((5 11/2 0) (5 11/2 0) (11/2 11/2 0)))
'(clean-cache
  map
  0
  15
  52
  app
  "\"'(eval\n  (match (app not (app pair? lst)) (#f) (_ (-> (app nil) <-)))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  0
  15
  52
  app
  "\"'(eval\n  (match\n   (app not (app pair? lst))\n   ((#f)\n    (-> (app cons (app (app id f) (app car lst)) (app lp (app cdr lst))) <-))\n   _)\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  0
  15
  52
  app
  "\"'(eval\n  (app cons (app (app id f) (app car lst)) (-> (app lp (app cdr lst)) <-))\n  (env (() ())))\""
  65
  52
  10
  3
  52
  10
  62
  1
  1
  33
  #f
  74/13
  ((11/2 6 0) (11/2 11/2 0) (11/2 11/2 0)))
'(clean-cache
  map
  0
  15
  52
  app
  "\"'(eval (app lp (-> (app cdr lst) <-)) (env (() ())))\""
  39
  30
  8
  1
  30
  8
  38
  1
  1
  18
  #f
  169/30
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  map
  0
  15
  52
  ref-or-constructor
  "\"'(eval (app cdr (-> lst <-)) (env (() ())))\""
  39
  30
  8
  1
  30
  8
  38
  1
  1
  18
  #f
  169/30
  ((3 3 0) (7/2 7/2 0) (7/2 7/2 0)))
'(clean-cache
  map
  0
  15
  52
  app
  "\"'(eval\n  (app cons (-> (app (app id f) (app car lst)) <-) (app lp (app cdr lst)))\n  (env (() ())))\""
  90
  61
  22
  7
  61
  22
  83
  1
  1
  31
  #f
  332/61
  ((15/2 15/2 0) (7 7 0) (7 15/2 0)))
'(clean-cache
  map
  0
  15
  52
  app
  "\"'(eval (app (app id f) (-> (app car lst) <-)) (env (() ())))\""
  49
  37
  10
  2
  37
  10
  47
  1
  1
  20
  #f
  213/37
  ((5 5 0) (5 11/2 0) (11/2 11/2 0)))
'(clean-cache
  map
  0
  15
  52
  ref-or-constructor
  "\"'(eval (app car (-> lst <-)) (env (() ())))\""
  40
  31
  8
  1
  31
  8
  39
  1
  1
  18
  #f
  180/31
  ((3 7/2 0) (3 3 0) (7/2 7/2 0)))
'(clean-cache
  map
  0
  15
  52
  app
  "\"'(eval (app (-> (app id f) <-) (app car lst)) (env (() ())))\""
  20
  12
  7
  1
  12
  7
  19
  1
  1
  6
  #f
  11/2
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  map
  0
  15
  52
  ref-or-constructor
  "\"'(eval (app id (-> f <-)) (env (() ())))\""
  18
  10
  7
  1
  10
  7
  17
  1
  1
  5
  #f
  11/2
  ((1/2 1 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  map
  0
  15
  52
  app
  "\"'(eval (match (-> (app not (app pair? lst)) <-) (#f) _) (env (() ())))\""
  56
  44
  10
  2
  44
  10
  54
  1
  1
  27
  #f
  127/22
  ((5 5 0) (5 5 0) (5 5 0)))
'(clean-cache
  map
  0
  15
  52
  app
  "\"'(eval (app not (-> (app pair? lst) <-)) (env (() ())))\""
  52
  40
  10
  2
  40
  10
  50
  1
  1
  24
  #f
  233/40
  ((5 5 0) (9/2 5 0) (5 5 0)))
'(clean-cache
  map
  0
  15
  52
  ref-or-constructor
  "\"'(eval (app pair? (-> lst <-)) (env (() ())))\""
  40
  31
  8
  1
  31
  8
  39
  1
  1
  18
  #f
  180/31
  ((3 3 0) (3 7/2 0) (3 3 0)))
'(clean-cache
  map
  0
  15
  52
  app
  "\"'(eval (letrec (lp) (-> (app lp l) <-)) (env (())))\""
  65
  52
  10
  3
  52
  10
  62
  1
  1
  33
  #f
  74/13
  ((11/2 11/2 0) (6 6 0) (11/2 11/2 0)))
'(clean-cache
  map
  0
  15
  52
  ref-or-constructor
  "\"'(eval (app lp (-> l <-)) (env (())))\""
  8
  5
  3
  0
  5
  3
  8
  1
  1
  4
  #f
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  0
  15
  52
  let
  "\"'(eval (λ (xx) (-> (let (_) ...) <-)) (env (())))\""
  18
  10
  7
  1
  10
  7
  17
  1
  1
  5
  #f
  11/2
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  map
  0
  15
  52
  app
  "\"'(eval (let (... () (_ (-> (app debug-trace) <-)) () ...) ...) (env (())))\""
  6
  5
  0
  1
  5
  0
  5
  1
  1
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  0
  15
  52
  ref-or-constructor
  "\"'(eval (let (_) (-> xx <-)) (env (())))\""
  18
  10
  7
  1
  10
  7
  17
  1
  1
  5
  #f
  11/2
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  map
  0
  15
  52
  app
  "\"'(eval (λ () (-> (app #f) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  0
  15
  52
  match
  "\"'(eval (λ (pair?-v) (-> (match pair?-v ...) <-)) (env (())))\""
  48
  37
  10
  1
  37
  10
  47
  1
  1
  22
  #f
  217/37
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  map
  0
  15
  52
  app
  "\"'(eval (match pair?-v (cons pair?-c pair?-d) (_ (-> (app #f) <-))) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  0
  15
  52
  app
  "\"'(eval (match pair?-v ((cons pair?-c pair?-d) (-> (app #t) <-)) _) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  0
  15
  52
  ref-or-constructor
  "\"'(eval (match (-> pair?-v <-) (cons pair?-c pair?-d) _) (env (())))\""
  43
  32
  10
  1
  32
  10
  42
  1
  1
  18
  #f
  191/32
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(clean-cache
  map
  0
  15
  52
  match
  "\"'(eval (λ (cdr-v) (-> (match cdr-v ...) <-)) (env (())))\""
  39
  30
  8
  1
  30
  8
  38
  1
  1
  18
  #f
  169/30
  ((7/2 7/2 0) (3 3 0) (3 3 0)))
'(clean-cache
  map
  0
  15
  52
  ref-or-constructor
  "\"'(eval (match cdr-v ((cons cdr-c cdr-d) (-> cdr-d <-))) (env (())))\""
  39
  30
  8
  1
  30
  8
  38
  1
  1
  18
  #f
  169/30
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  map
  0
  15
  52
  ref-or-constructor
  "\"'(eval (match (-> cdr-v <-) (cons cdr-c cdr-d)) (env (())))\""
  39
  30
  8
  1
  30
  8
  38
  1
  1
  18
  #f
  169/30
  ((3 7/2 0) (3 7/2 0) (3 3 0)))
'(clean-cache
  map
  0
  15
  52
  match
  "\"'(eval (λ (car-v) (-> (match car-v ...) <-)) (env (())))\""
  45
  34
  10
  1
  34
  10
  44
  1
  1
  18
  #f
  199/34
  ((9/2 5 0) (5 5 0) (5 5 0)))
'(clean-cache
  map
  0
  15
  52
  ref-or-constructor
  "\"'(eval (match car-v ((cons car-c car-d) (-> car-c <-))) (env (())))\""
  44
  33
  10
  1
  33
  10
  43
  1
  1
  18
  #f
  65/11
  ((4 4 0) (7/2 4 0) (7/2 4 0)))
'(clean-cache
  map
  0
  15
  52
  ref-or-constructor
  "\"'(eval (match (-> car-v <-) (cons car-c car-d)) (env (())))\""
  43
  32
  10
  1
  32
  10
  42
  1
  1
  18
  #f
  191/32
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(clean-cache
  map
  0
  15
  52
  let
  "\"'(eval (letrec* (car ... my-map) (-> (let (_) ...) <-)) (env ()))\""
  72
  58
  10
  4
  58
  10
  68
  1
  1
  35
  #f
  165/29
  ((6 6 0) (11/2 6 0) (11/2 11/2 0)))
'(clean-cache
  map
  0
  15
  52
  app
  "\"'(eval\n  (let (...\n        ()\n        (_\n         (->\n          (app\n           my-map\n           (app id (λ (a) ...))\n           (app cons 1 (app cons 2 (app cons 3 (app nil)))))\n          <-))\n        ()\n        ...)\n    ...)\n  (env ()))\""
  71
  57
  10
  4
  57
  10
  67
  1
  1
  35
  #f
  108/19
  ((11/2 11/2 0) (6 6 0) (11/2 11/2 0)))
'(clean-cache
  map
  0
  15
  52
  app
  "\"'(eval\n  (app\n   my-map\n   (app id (λ (a) ...))\n   (-> (app cons 1 (app cons 2 (app cons 3 (app nil)))) <-))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  0
  15
  52
  app
  "\"'(eval (app cons 1 (-> (app cons 2 (app cons 3 (app nil))) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  0
  15
  52
  app
  "\"'(eval (app cons 2 (-> (app cons 3 (app nil)) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  0
  15
  52
  app
  "\"'(eval (app cons 3 (-> (app nil) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  0
  15
  52
  app
  "\"'(eval\n  (app\n   my-map\n   (-> (app id (λ (a) ...)) <-)\n   (app cons 1 (app cons 2 (app cons 3 (app nil)))))\n  (env ()))\""
  18
  10
  7
  1
  10
  7
  17
  1
  1
  5
  #f
  11/2
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  map
  0
  15
  52
  app
  "\"'(eval (λ (a) (-> (app + 1 a) <-)) (env (())))\""
  72
  47
  21
  4
  47
  21
  68
  1
  1
  27
  #f
  260/47
  ((6 6 0) (6 6 0) (6 6 0)))
'(clean-cache
  map
  0
  15
  52
  ref-or-constructor
  "\"'(eval (app + 1 (-> a <-)) (env (())))\""
  69
  44
  21
  4
  44
  21
  65
  1
  1
  26
  #f
  247/44
  ((6 6 0) (11/2 11/2 0) (11/2 6 0)))
'(clean-cache
  map
  0
  15
  52
  app
  "\"'(eval\n  (let (_)\n    (->\n     (app\n      my-map\n      (app id (λ (b) ...))\n      (app cons 7 (app cons 8 (app cons 9 (app nil)))))\n     <-))\n  (env ()))\""
  71
  57
  10
  4
  57
  10
  67
  1
  1
  35
  #f
  108/19
  ((6 6 0) (6 6 0) (6 6 0)))
'(clean-cache
  map
  0
  15
  52
  app
  "\"'(eval\n  (app\n   my-map\n   (app id (λ (b) ...))\n   (-> (app cons 7 (app cons 8 (app cons 9 (app nil)))) <-))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  0
  15
  52
  app
  "\"'(eval (app cons 7 (-> (app cons 8 (app cons 9 (app nil))) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  0
  15
  52
  app
  "\"'(eval (app cons 8 (-> (app cons 9 (app nil)) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  0
  15
  52
  app
  "\"'(eval (app cons 9 (-> (app nil) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  0
  15
  52
  app
  "\"'(eval\n  (app\n   my-map\n   (-> (app id (λ (b) ...)) <-)\n   (app cons 7 (app cons 8 (app cons 9 (app nil)))))\n  (env ()))\""
  18
  10
  7
  1
  10
  7
  17
  1
  1
  5
  #f
  11/2
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  map
  0
  15
  52
  app
  "\"'(eval (λ (b) (-> (app + 1 b) <-)) (env (())))\""
  72
  47
  21
  4
  47
  21
  68
  1
  1
  27
  #f
  260/47
  ((6 6 0) (6 6 0) (6 6 0)))
'(clean-cache
  map
  0
  15
  52
  ref-or-constructor
  "\"'(eval (app + 1 (-> b <-)) (env (())))\""
  69
  44
  21
  4
  44
  21
  65
  1
  1
  26
  #f
  247/44
  ((15/2 15/2 0) (6 6 0) (6 6 0)))
'(shuffled-cache
  0
  map
  0
  15
  52
  app
  "\"'(eval (λ (a) (-> (app + 1 a) <-)) (env (())))\""
  72
  47
  21
  4
  47
  21
  68
  1
  1
  27
  #f
  260/47
  ((6 6 0) (6 6 0) (6 6 0)))
'(shuffled-cache
  0
  map
  0
  15
  52
  letrec
  "\"'(eval (let (_) (-> (letrec (lp) ...) <-)) (env (())))\""
  99
  70
  23
  6
  70
  23
  93
  1
  1
  42
  #f
  393/70
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  map
  0
  15
  52
  ref-or-constructor
  "\"'(eval (app + 1 (-> a <-)) (env (())))\""
  99
  70
  23
  6
  70
  23
  93
  1
  1
  42
  #f
  393/70
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  0
  15
  52
  app
  "\"'(eval (app cons 3 (-> (app nil) <-)) (env ()))\""
  99
  70
  23
  6
  70
  23
  93
  1
  1
  42
  #t
  393/70
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  0
  15
  52
  app
  "\"'(eval (λ () (-> (app #f) <-)) (env (())))\""
  101
  72
  23
  6
  72
  23
  95
  1
  1
  44
  #t
  403/72
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  0
  15
  52
  app
  "\"'(eval (match pair?-v (cons pair?-c pair?-d) (_ (-> (app #f) <-))) (env (())))\""
  101
  72
  23
  6
  72
  23
  95
  1
  1
  44
  #t
  403/72
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  0
  15
  52
  match
  "\"'(eval (λ (car-v) (-> (match car-v ...) <-)) (env (())))\""
  101
  72
  23
  6
  72
  23
  95
  1
  1
  44
  #f
  403/72
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  0
  15
  52
  ref-or-constructor
  "\"'(eval (app pair? (-> lst <-)) (env (() ())))\""
  101
  72
  23
  6
  72
  23
  95
  1
  1
  44
  #f
  403/72
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  0
  15
  52
  ref-or-constructor
  "\"'(eval (app cdr (-> lst <-)) (env (() ())))\""
  101
  72
  23
  6
  72
  23
  95
  1
  1
  44
  #f
  403/72
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  0
  15
  52
  let
  "\"'(eval (λ (f l) (-> (let (_) ...) <-)) (env (())))\""
  102
  73
  23
  6
  73
  23
  96
  1
  1
  44
  #f
  409/73
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  0
  15
  52
  ref-or-constructor
  "\"'(eval (match (-> pair?-v <-) (cons pair?-c pair?-d) _) (env (())))\""
  102
  73
  23
  6
  73
  23
  96
  1
  1
  44
  #f
  409/73
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  0
  15
  52
  app
  "\"'(eval (let (... () (_ (-> (app debug-trace) <-)) () ...) ...) (env (())))\""
  106
  76
  23
  7
  76
  23
  99
  1
  1
  47
  #t
  106/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  0
  15
  52
  app
  "\"'(eval (λ (b) (-> (app + 1 b) <-)) (env (())))\""
  112
  81
  24
  7
  81
  24
  105
  1
  1
  49
  #f
  446/81
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  0
  15
  52
  app
  "\"'(eval\n  (app\n   my-map\n   (app id (λ (a) ...))\n   (-> (app cons 1 (app cons 2 (app cons 3 (app nil)))) <-))\n  (env ()))\""
  112
  81
  24
  7
  81
  24
  105
  1
  1
  49
  #t
  446/81
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  0
  15
  52
  app
  "\"'(eval (match pair?-v ((cons pair?-c pair?-d) (-> (app #t) <-)) _) (env (())))\""
  112
  81
  24
  7
  81
  24
  105
  1
  1
  49
  #t
  446/81
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  0
  15
  52
  app
  "\"'(eval\n  (match\n   (app not (app pair? lst))\n   ((#f)\n    (-> (app cons (app (app id f) (app car lst)) (app lp (app cdr lst))) <-))\n   _)\n  (env (() ())))\""
  112
  81
  24
  7
  81
  24
  105
  1
  1
  49
  #t
  446/81
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  0
  15
  52
  app
  "\"'(eval\n  (let (...\n        ()\n        (_\n         (->\n          (app\n           my-map\n           (app id (λ (a) ...))\n           (app cons 1 (app cons 2 (app cons 3 (app nil)))))\n          <-))\n        ()\n        ...)\n    ...)\n  (env ()))\""
  114
  82
  24
  8
  82
  24
  106
  1
  1
  49
  #f
  226/41
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  0
  15
  52
  app
  "\"'(eval (match (-> (app not (app pair? lst)) <-) (#f) _) (env (() ())))\""
  114
  82
  24
  8
  82
  24
  106
  1
  1
  49
  #f
  226/41
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  0
  15
  52
  app
  "\"'(eval (let (... () (_ (-> (app debug-trace) <-)) () ...) ...) (env (())))\""
  116
  84
  24
  8
  84
  24
  108
  1
  1
  51
  #t
  11/2
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  0
  15
  52
  app
  "\"'(eval (app (app id f) (-> (app car lst) <-)) (env (() ())))\""
  116
  84
  24
  8
  84
  24
  108
  1
  1
  51
  #f
  11/2
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  0
  15
  52
  ref-or-constructor
  "\"'(eval (match car-v ((cons car-c car-d) (-> car-c <-))) (env (())))\""
  116
  84
  24
  8
  84
  24
  108
  1
  1
  51
  #f
  11/2
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  0
  15
  52
  match
  "\"'(eval (λ (cdr-v) (-> (match cdr-v ...) <-)) (env (())))\""
  116
  84
  24
  8
  84
  24
  108
  1
  1
  51
  #f
  11/2
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  0
  15
  52
  app
  "\"'(eval (app lp (-> (app cdr lst) <-)) (env (() ())))\""
  116
  84
  24
  8
  84
  24
  108
  1
  1
  51
  #f
  11/2
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  0
  15
  52
  match
  "\"'(eval (λ (pair?-v) (-> (match pair?-v ...) <-)) (env (())))\""
  116
  84
  24
  8
  84
  24
  108
  1
  1
  51
  #f
  11/2
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  0
  15
  52
  ref-or-constructor
  "\"'(eval (match (-> cdr-v <-) (cons cdr-c cdr-d)) (env (())))\""
  116
  84
  24
  8
  84
  24
  108
  1
  1
  51
  #f
  11/2
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  0
  15
  52
  app
  "\"'(eval (app cons 8 (-> (app cons 9 (app nil)) <-)) (env ()))\""
  116
  84
  24
  8
  84
  24
  108
  1
  1
  51
  #t
  11/2
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  0
  15
  52
  app
  "\"'(eval (app not (-> (app pair? lst) <-)) (env (() ())))\""
  116
  84
  24
  8
  84
  24
  108
  1
  1
  51
  #f
  11/2
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  0
  15
  52
  match
  "\"'(eval (λ (lst) (-> (match (app not (app pair? lst)) ...) <-)) (env (() ())))\""
  116
  84
  24
  8
  84
  24
  108
  1
  1
  51
  #f
  11/2
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  0
  15
  52
  letrec*
  "\"'(eval (lettypes cons ... nil (letrec* (car ... my-map) ...)) (env ()))\""
  119
  87
  24
  8
  87
  24
  111
  1
  1
  51
  #f
  160/29
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  0
  15
  52
  let
  "\"'(eval (letrec* (car ... my-map) (-> (let (_) ...) <-)) (env ()))\""
  119
  87
  24
  8
  87
  24
  111
  1
  1
  51
  #f
  160/29
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  0
  15
  52
  ref-or-constructor
  "\"'(eval (match (-> car-v <-) (cons car-c car-d)) (env (())))\""
  119
  87
  24
  8
  87
  24
  111
  1
  1
  51
  #f
  160/29
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  0
  15
  52
  app
  "\"'(eval\n  (let (_)\n    (->\n     (app\n      my-map\n      (app id (λ (b) ...))\n      (app cons 7 (app cons 8 (app cons 9 (app nil)))))\n     <-))\n  (env ()))\""
  119
  87
  24
  8
  87
  24
  111
  1
  1
  51
  #f
  160/29
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  0
  15
  52
  app
  "\"'(eval\n  (app\n   my-map\n   (-> (app id (λ (a) ...)) <-)\n   (app cons 1 (app cons 2 (app cons 3 (app nil)))))\n  (env ()))\""
  127
  94
  24
  9
  94
  24
  118
  1
  1
  53
  #f
  260/47
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  map
  0
  15
  52
  app
  "\"'(eval (app cons 9 (-> (app nil) <-)) (env ()))\""
  127
  94
  24
  9
  94
  24
  118
  1
  1
  53
  #t
  260/47
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  0
  15
  52
  ref-or-constructor
  "\"'(eval (app id (-> f <-)) (env (() ())))\""
  127
  94
  24
  9
  94
  24
  118
  1
  1
  53
  #f
  260/47
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  0
  15
  52
  ref-or-constructor
  "\"'(eval (match cdr-v ((cons cdr-c cdr-d) (-> cdr-d <-))) (env (())))\""
  127
  94
  24
  9
  94
  24
  118
  1
  1
  53
  #f
  260/47
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  0
  15
  52
  app
  "\"'(eval (app (-> (app id f) <-) (app car lst)) (env (() ())))\""
  128
  95
  24
  9
  95
  24
  119
  1
  1
  53
  #f
  526/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  0
  15
  52
  app
  "\"'(eval\n  (app cons (-> (app (app id f) (app car lst)) <-) (app lp (app cdr lst)))\n  (env (() ())))\""
  131
  96
  24
  11
  96
  24
  120
  1
  1
  53
  #f
  265/48
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  0
  15
  52
  app
  "\"'(eval (app cons 2 (-> (app cons 3 (app nil)) <-)) (env ()))\""
  131
  96
  24
  11
  96
  24
  120
  1
  1
  53
  #t
  265/48
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  0
  15
  52
  app
  "\"'(eval\n  (app\n   my-map\n   (app id (λ (b) ...))\n   (-> (app cons 7 (app cons 8 (app cons 9 (app nil)))) <-))\n  (env ()))\""
  131
  96
  24
  11
  96
  24
  120
  1
  1
  53
  #t
  265/48
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  0
  15
  52
  app
  "\"'(eval\n  (match (app not (app pair? lst)) (#f) (_ (-> (app nil) <-)))\n  (env (() ())))\""
  131
  96
  24
  11
  96
  24
  120
  1
  1
  53
  #t
  265/48
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  0
  15
  52
  app
  "\"'(eval (app cons 1 (-> (app cons 2 (app cons 3 (app nil))) <-)) (env ()))\""
  131
  96
  24
  11
  96
  24
  120
  1
  1
  53
  #t
  265/48
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  0
  15
  52
  app
  "\"'(eval (letrec (lp) (-> (app lp l) <-)) (env (())))\""
  131
  96
  24
  11
  96
  24
  120
  1
  1
  53
  #f
  265/48
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  0
  15
  52
  app
  "\"'(eval (app cons 7 (-> (app cons 8 (app cons 9 (app nil))) <-)) (env ()))\""
  131
  96
  24
  11
  96
  24
  120
  1
  1
  53
  #t
  265/48
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  0
  15
  52
  ref-or-constructor
  "\"'(eval (let (_) (-> xx <-)) (env (())))\""
  131
  96
  24
  11
  96
  24
  120
  1
  1
  53
  #f
  265/48
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  0
  15
  52
  ref-or-constructor
  "\"'(eval (app + 1 (-> b <-)) (env (())))\""
  131
  96
  24
  11
  96
  24
  120
  1
  1
  53
  #f
  265/48
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  0
  15
  52
  let
  "\"'(eval (λ (xx) (-> (let (_) ...) <-)) (env (())))\""
  131
  96
  24
  11
  96
  24
  120
  1
  1
  53
  #f
  265/48
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  0
  15
  52
  lettypes
  "\"'(eval ((top) lettypes (cons ... nil) ...) (env ()))\""
  132
  97
  24
  11
  97
  24
  121
  1
  1
  53
  #f
  536/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  0
  15
  52
  app
  "\"'(eval\n  (app\n   my-map\n   (-> (app id (λ (b) ...)) <-)\n   (app cons 7 (app cons 8 (app cons 9 (app nil)))))\n  (env ()))\""
  132
  97
  24
  11
  97
  24
  121
  1
  1
  53
  #f
  536/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  0
  15
  52
  ref-or-constructor
  "\"'(eval (app lp (-> l <-)) (env (())))\""
  132
  97
  24
  11
  97
  24
  121
  1
  1
  53
  #f
  536/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  0
  15
  52
  app
  "\"'(eval\n  (app cons (app (app id f) (app car lst)) (-> (app lp (app cdr lst)) <-))\n  (env (() ())))\""
  134
  99
  24
  11
  99
  24
  123
  1
  1
  54
  #f
  547/99
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  0
  15
  52
  ref-or-constructor
  "\"'(eval (app car (-> lst <-)) (env (() ())))\""
  134
  99
  24
  11
  99
  24
  123
  1
  1
  54
  #f
  547/99
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  0
  15
  52
  app
  "\"'(eval\n  (app\n   my-map\n   (app id (λ (a) ...))\n   (-> (app cons 1 (app cons 2 (app cons 3 (app nil)))) <-))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  0
  15
  52
  app
  "\"'(eval (let (... () (_ (-> (app debug-trace) <-)) () ...) ...) (env (())))\""
  8
  7
  0
  1
  7
  0
  7
  1
  1
  7
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  0
  15
  52
  ref-or-constructor
  "\"'(eval (let (_) (-> xx <-)) (env (())))\""
  26
  17
  7
  2
  17
  7
  24
  1
  1
  12
  #f
  90/17
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  map
  0
  15
  52
  match
  "\"'(eval (λ (lst) (-> (match (app not (app pair? lst)) ...) <-)) (env (() ())))\""
  82
  64
  14
  4
  64
  14
  78
  1
  1
  41
  #f
  45/8
  ((11/2 11/2 0) (5 11/2 0) (5 11/2 0)))
'(shuffled-cache
  1
  map
  0
  15
  52
  app
  "\"'(eval (app cons 1 (-> (app cons 2 (app cons 3 (app nil))) <-)) (env ()))\""
  82
  64
  14
  4
  64
  14
  78
  1
  1
  41
  #t
  45/8
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  0
  15
  52
  app
  "\"'(eval (match pair?-v (cons pair?-c pair?-d) (_ (-> (app #f) <-))) (env (())))\""
  82
  64
  14
  4
  64
  14
  78
  1
  1
  41
  #t
  45/8
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  0
  15
  52
  match
  "\"'(eval (λ (cdr-v) (-> (match cdr-v ...) <-)) (env (())))\""
  82
  64
  14
  4
  64
  14
  78
  1
  1
  41
  #f
  45/8
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  0
  15
  52
  letrec*
  "\"'(eval (lettypes cons ... nil (letrec* (car ... my-map) ...)) (env ()))\""
  94
  74
  14
  6
  74
  14
  88
  1
  1
  45
  #f
  208/37
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  0
  15
  52
  ref-or-constructor
  "\"'(eval (app pair? (-> lst <-)) (env (() ())))\""
  94
  74
  14
  6
  74
  14
  88
  1
  1
  45
  #f
  208/37
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  0
  15
  52
  ref-or-constructor
  "\"'(eval (match cdr-v ((cons cdr-c cdr-d) (-> cdr-d <-))) (env (())))\""
  94
  74
  14
  6
  74
  14
  88
  1
  1
  45
  #f
  208/37
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  0
  15
  52
  app
  "\"'(eval\n  (let (...\n        ()\n        (_\n         (->\n          (app\n           my-map\n           (app id (λ (a) ...))\n           (app cons 1 (app cons 2 (app cons 3 (app nil)))))\n          <-))\n        ()\n        ...)\n    ...)\n  (env ()))\""
  96
  76
  14
  6
  76
  14
  90
  1
  1
  46
  #f
  427/76
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  0
  15
  52
  app
  "\"'(eval (λ (b) (-> (app + 1 b) <-)) (env (())))\""
  120
  88
  23
  9
  88
  23
  111
  1
  1
  50
  #f
  493/88
  ((3 3 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  map
  0
  15
  52
  let
  "\"'(eval (letrec* (car ... my-map) (-> (let (_) ...) <-)) (env ()))\""
  120
  88
  23
  9
  88
  23
  111
  1
  1
  50
  #f
  493/88
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  0
  15
  52
  app
  "\"'(eval (λ (a) (-> (app + 1 a) <-)) (env (())))\""
  125
  92
  24
  9
  92
  24
  116
  1
  1
  51
  #f
  255/46
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  0
  15
  52
  app
  "\"'(eval (app cons 3 (-> (app nil) <-)) (env ()))\""
  125
  92
  24
  9
  92
  24
  116
  1
  1
  51
  #t
  255/46
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  0
  15
  52
  ref-or-constructor
  "\"'(eval (app id (-> f <-)) (env (() ())))\""
  125
  92
  24
  9
  92
  24
  116
  1
  1
  51
  #f
  255/46
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  0
  15
  52
  app
  "\"'(eval\n  (app cons (-> (app (app id f) (app car lst)) <-) (app lp (app cdr lst)))\n  (env (() ())))\""
  129
  94
  24
  11
  94
  24
  118
  1
  1
  51
  #f
  260/47
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  0
  15
  52
  ref-or-constructor
  "\"'(eval (match (-> car-v <-) (cons car-c car-d)) (env (())))\""
  129
  94
  24
  11
  94
  24
  118
  1
  1
  51
  #f
  260/47
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  0
  15
  52
  ref-or-constructor
  "\"'(eval (app + 1 (-> b <-)) (env (())))\""
  129
  94
  24
  11
  94
  24
  118
  1
  1
  51
  #f
  260/47
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  0
  15
  52
  ref-or-constructor
  "\"'(eval (match (-> cdr-v <-) (cons cdr-c cdr-d)) (env (())))\""
  129
  94
  24
  11
  94
  24
  118
  1
  1
  51
  #f
  260/47
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  0
  15
  52
  app
  "\"'(eval (app cons 9 (-> (app nil) <-)) (env ()))\""
  129
  94
  24
  11
  94
  24
  118
  1
  1
  51
  #t
  260/47
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  0
  15
  52
  app
  "\"'(eval (app not (-> (app pair? lst) <-)) (env (() ())))\""
  129
  94
  24
  11
  94
  24
  118
  1
  1
  51
  #f
  260/47
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  0
  15
  52
  match
  "\"'(eval (λ (pair?-v) (-> (match pair?-v ...) <-)) (env (())))\""
  129
  94
  24
  11
  94
  24
  118
  1
  1
  51
  #f
  260/47
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  0
  15
  52
  app
  "\"'(eval\n  (match (app not (app pair? lst)) (#f) (_ (-> (app nil) <-)))\n  (env (() ())))\""
  129
  94
  24
  11
  94
  24
  118
  1
  1
  51
  #t
  260/47
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  0
  15
  52
  app
  "\"'(eval (app cons 2 (-> (app cons 3 (app nil)) <-)) (env ()))\""
  129
  94
  24
  11
  94
  24
  118
  1
  1
  51
  #t
  260/47
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  0
  15
  52
  ref-or-constructor
  "\"'(eval (app car (-> lst <-)) (env (() ())))\""
  129
  94
  24
  11
  94
  24
  118
  1
  1
  51
  #f
  260/47
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  0
  15
  52
  app
  "\"'(eval (app cons 8 (-> (app cons 9 (app nil)) <-)) (env ()))\""
  129
  94
  24
  11
  94
  24
  118
  1
  1
  51
  #t
  260/47
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  0
  15
  52
  app
  "\"'(eval\n  (let (_)\n    (->\n     (app\n      my-map\n      (app id (λ (b) ...))\n      (app cons 7 (app cons 8 (app cons 9 (app nil)))))\n     <-))\n  (env ()))\""
  129
  94
  24
  11
  94
  24
  118
  1
  1
  51
  #f
  260/47
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  0
  15
  52
  app
  "\"'(eval (match pair?-v ((cons pair?-c pair?-d) (-> (app #t) <-)) _) (env (())))\""
  129
  94
  24
  11
  94
  24
  118
  1
  1
  51
  #t
  260/47
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  0
  15
  52
  app
  "\"'(eval\n  (app\n   my-map\n   (-> (app id (λ (b) ...)) <-)\n   (app cons 7 (app cons 8 (app cons 9 (app nil)))))\n  (env ()))\""
  129
  94
  24
  11
  94
  24
  118
  1
  1
  51
  #f
  260/47
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  0
  15
  52
  ref-or-constructor
  "\"'(eval (match car-v ((cons car-c car-d) (-> car-c <-))) (env (())))\""
  129
  94
  24
  11
  94
  24
  118
  1
  1
  51
  #f
  260/47
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  0
  15
  52
  ref-or-constructor
  "\"'(eval (app + 1 (-> a <-)) (env (())))\""
  129
  94
  24
  11
  94
  24
  118
  1
  1
  51
  #f
  260/47
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  0
  15
  52
  letrec
  "\"'(eval (let (_) (-> (letrec (lp) ...) <-)) (env (())))\""
  129
  94
  24
  11
  94
  24
  118
  1
  1
  51
  #f
  260/47
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  0
  15
  52
  app
  "\"'(eval\n  (app\n   my-map\n   (-> (app id (λ (a) ...)) <-)\n   (app cons 1 (app cons 2 (app cons 3 (app nil)))))\n  (env ()))\""
  129
  94
  24
  11
  94
  24
  118
  1
  1
  51
  #f
  260/47
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  0
  15
  52
  ref-or-constructor
  "\"'(eval (app cdr (-> lst <-)) (env (() ())))\""
  129
  94
  24
  11
  94
  24
  118
  1
  1
  51
  #f
  260/47
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  0
  15
  52
  app
  "\"'(eval (λ () (-> (app #f) <-)) (env (())))\""
  129
  94
  24
  11
  94
  24
  118
  1
  1
  51
  #t
  260/47
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  0
  15
  52
  app
  "\"'(eval (match (-> (app not (app pair? lst)) <-) (#f) _) (env (() ())))\""
  129
  94
  24
  11
  94
  24
  118
  1
  1
  51
  #f
  260/47
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  0
  15
  52
  ref-or-constructor
  "\"'(eval (match (-> pair?-v <-) (cons pair?-c pair?-d) _) (env (())))\""
  129
  94
  24
  11
  94
  24
  118
  1
  1
  51
  #f
  260/47
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  0
  15
  52
  match
  "\"'(eval (λ (car-v) (-> (match car-v ...) <-)) (env (())))\""
  129
  94
  24
  11
  94
  24
  118
  1
  1
  51
  #f
  260/47
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  0
  15
  52
  app
  "\"'(eval (app (-> (app id f) <-) (app car lst)) (env (() ())))\""
  129
  94
  24
  11
  94
  24
  118
  1
  1
  51
  #f
  260/47
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  0
  15
  52
  app
  "\"'(eval (app (app id f) (-> (app car lst) <-)) (env (() ())))\""
  129
  94
  24
  11
  94
  24
  118
  1
  1
  51
  #f
  260/47
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  0
  15
  52
  app
  "\"'(eval (app cons 7 (-> (app cons 8 (app cons 9 (app nil))) <-)) (env ()))\""
  129
  94
  24
  11
  94
  24
  118
  1
  1
  51
  #t
  260/47
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  0
  15
  52
  app
  "\"'(eval (letrec (lp) (-> (app lp l) <-)) (env (())))\""
  129
  94
  24
  11
  94
  24
  118
  1
  1
  51
  #f
  260/47
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  0
  15
  52
  app
  "\"'(eval\n  (app cons (app (app id f) (app car lst)) (-> (app lp (app cdr lst)) <-))\n  (env (() ())))\""
  131
  96
  24
  11
  96
  24
  120
  1
  1
  52
  #f
  177/32
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  0
  15
  52
  let
  "\"'(eval (λ (xx) (-> (let (_) ...) <-)) (env (())))\""
  131
  96
  24
  11
  96
  24
  120
  1
  1
  52
  #f
  177/32
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  0
  15
  52
  let
  "\"'(eval (λ (f l) (-> (let (_) ...) <-)) (env (())))\""
  131
  96
  24
  11
  96
  24
  120
  1
  1
  52
  #f
  177/32
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  0
  15
  52
  app
  "\"'(eval (let (... () (_ (-> (app debug-trace) <-)) () ...) ...) (env (())))\""
  133
  98
  24
  11
  98
  24
  122
  1
  1
  54
  #t
  541/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  0
  15
  52
  lettypes
  "\"'(eval ((top) lettypes (cons ... nil) ...) (env ()))\""
  134
  99
  24
  11
  99
  24
  123
  1
  1
  54
  #f
  547/99
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  0
  15
  52
  app
  "\"'(eval\n  (app\n   my-map\n   (app id (λ (b) ...))\n   (-> (app cons 7 (app cons 8 (app cons 9 (app nil)))) <-))\n  (env ()))\""
  134
  99
  24
  11
  99
  24
  123
  1
  1
  54
  #t
  547/99
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  0
  15
  52
  app
  "\"'(eval\n  (match\n   (app not (app pair? lst))\n   ((#f)\n    (-> (app cons (app (app id f) (app car lst)) (app lp (app cdr lst))) <-))\n   _)\n  (env (() ())))\""
  134
  99
  24
  11
  99
  24
  123
  1
  1
  54
  #t
  547/99
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  0
  15
  52
  app
  "\"'(eval (app lp (-> (app cdr lst) <-)) (env (() ())))\""
  134
  99
  24
  11
  99
  24
  123
  1
  1
  54
  #f
  547/99
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  0
  15
  52
  ref-or-constructor
  "\"'(eval (app lp (-> l <-)) (env (())))\""
  134
  99
  24
  11
  99
  24
  123
  1
  1
  54
  #f
  547/99
  ((0 0 0) (0 0 0) (0 0 0)))
