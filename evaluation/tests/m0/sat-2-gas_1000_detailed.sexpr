'(clean-cache
  sat-2
  0
  1000
  159
  letrec*
  "'(eval ((top) letrec* (phi ... sat-solve-7) ...) (env ()))"
  #f
  183
  158
  25
  0
  158
  25
  183
  1
  1
  101
  #f
  225/158
  (55 132 0))
'(clean-cache
  sat-2
  0
  1000
  159
  lambda
  "'(eval\n  (letrec* (... try (sat-solve-7 (-> (λ (p) ...) <-)) () ...) ...)\n  (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-2
  0
  1000
  159
  app
  "'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env (())))"
  #f
  181
  156
  25
  0
  156
  25
  181
  1
  1
  101
  #f
  17/12
  (50 57 0))
'(clean-cache
  sat-2
  0
  1000
  159
  lambda
  "'(eval (app try (-> (λ (n1) ...) <-)) (env (())))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-2
  0
  1000
  159
  app
  "'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env (() ())))"
  #f
  180
  155
  25
  0
  155
  25
  180
  1
  1
  101
  #f
  219/155
  (41 43 1))
'(clean-cache
  sat-2
  0
  1000
  159
  lambda
  "'(eval (app try (-> (λ (n2) ...) <-)) (env (() ())))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-2
  0
  1000
  159
  app
  "'(eval (λ (n2) (-> (app try (λ (n3) ...)) <-)) (env (() () ())))"
  #f
  180
  155
  25
  0
  155
  25
  180
  1
  1
  101
  #f
  219/155
  (43 45 1))
'(clean-cache
  sat-2
  0
  1000
  159
  lambda
  "'(eval (app try (-> (λ (n3) ...) <-)) (env (() () ())))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-2
  0
  1000
  159
  app
  "'(eval (λ (n3) (-> (app try (λ (n4) ...)) <-)) (env (() () () ())))"
  #f
  180
  155
  25
  0
  155
  25
  180
  1
  1
  101
  #f
  219/155
  (41 43 1))
'(clean-cache
  sat-2
  0
  1000
  159
  lambda
  "'(eval (app try (-> (λ (n4) ...) <-)) (env (() () () ())))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-2
  0
  1000
  159
  app
  "'(eval (λ (n4) (-> (app try (λ (n5) ...)) <-)) (env (() () () () ())))"
  #f
  180
  155
  25
  0
  155
  25
  180
  1
  1
  101
  #f
  219/155
  (40 41 0))
'(clean-cache
  sat-2
  0
  1000
  159
  lambda
  "'(eval (app try (-> (λ (n5) ...) <-)) (env (() () () () ())))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-2
  0
  1000
  159
  app
  "'(eval (λ (n5) (-> (app try (λ (n6) ...)) <-)) (env (() () () () () ())))"
  #f
  180
  155
  25
  0
  155
  25
  180
  1
  1
  101
  #f
  219/155
  (41 42 1))
'(clean-cache
  sat-2
  0
  1000
  159
  lambda
  "'(eval (app try (-> (λ (n6) ...) <-)) (env (() () () () () ())))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-2
  0
  1000
  159
  app
  "'(eval (λ (n6) (-> (app try (λ (n7) ...)) <-)) (env (() () () () () () ())))"
  #f
  180
  155
  25
  0
  155
  25
  180
  1
  1
  101
  #f
  219/155
  (42 44 1))
'(clean-cache
  sat-2
  0
  1000
  159
  lambda
  "'(eval (app try (-> (λ (n7) ...) <-)) (env (() () () () () () ())))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-2
  0
  1000
  159
  app
  "'(eval\n  (λ (n7) (-> (app (app (app (...) ...) n6) n7) <-))\n  (env (() () () () () () () ())))"
  #f
  144
  127
  17
  0
  127
  17
  144
  1
  1
  85
  #f
  169/127
  (36 37 1))
'(clean-cache
  sat-2
  0
  1000
  159
  ref-or-constructor
  "'(eval\n  (app (app (app (app (...) ...) n5) n6) (-> n7 <-))\n  (env (() () () () () () () ())))"
  #f
  10
  7
  3
  0
  7
  3
  10
  1
  1
  6
  #f
  8/7
  (1 1 0))
'(clean-cache
  sat-2
  0
  1000
  159
  app
  "'(eval\n  (app (-> (app (app (app (...) ...) n5) n6) <-) n7)\n  (env (() () () () () () () ())))"
  #f
  17
  15
  2
  0
  15
  2
  17
  1
  1
  15
  #t
  1
  (3 3 0))
'(clean-cache
  sat-2
  0
  1000
  159
  ref-or-constructor
  "'(eval\n  (app (app (app (app (...) ...) n4) n5) (-> n6 <-))\n  (env (() () () () () () () ())))"
  #f
  10
  7
  3
  0
  7
  3
  10
  1
  1
  6
  #f
  8/7
  (1 1 0))
'(clean-cache
  sat-2
  0
  1000
  159
  app
  "'(eval\n  (app (-> (app (app (app (...) ...) n4) n5) <-) n6)\n  (env (() () () () () () () ())))"
  #f
  15
  13
  2
  0
  13
  2
  15
  1
  1
  13
  #t
  1
  (2 3 0))
'(clean-cache
  sat-2
  0
  1000
  159
  ref-or-constructor
  "'(eval\n  (app (app (app (app (...) ...) n3) n4) (-> n5 <-))\n  (env (() () () () () () () ())))"
  #f
  10
  7
  3
  0
  7
  3
  10
  1
  1
  6
  #f
  8/7
  (1 1 0))
'(clean-cache
  sat-2
  0
  1000
  159
  app
  "'(eval\n  (app (-> (app (app (app (...) ...) n3) n4) <-) n5)\n  (env (() () () () () () () ())))"
  #f
  13
  11
  2
  0
  11
  2
  13
  1
  1
  11
  #t
  1
  (3 3 0))
'(clean-cache
  sat-2
  0
  1000
  159
  ref-or-constructor
  "'(eval\n  (app (app (app (app p ...) n2) n3) (-> n4 <-))\n  (env (() () () () () () () ())))"
  #f
  10
  7
  3
  0
  7
  3
  10
  1
  1
  6
  #f
  8/7
  (2 2 0))
'(clean-cache
  sat-2
  0
  1000
  159
  app
  "'(eval\n  (app (-> (app (app (app p ...) n2) n3) <-) n4)\n  (env (() () () () () () () ())))"
  #f
  11
  9
  2
  0
  9
  2
  11
  1
  1
  9
  #t
  1
  (3 3 0))
'(clean-cache
  sat-2
  0
  1000
  159
  ref-or-constructor
  "'(eval (app (app (app p n1) n2) (-> n3 <-)) (env (() () () () () () () ())))"
  #f
  10
  7
  3
  0
  7
  3
  10
  1
  1
  6
  #f
  8/7
  (2 2 0))
'(clean-cache
  sat-2
  0
  1000
  159
  app
  "'(eval (app (-> (app (app p n1) n2) <-) n3) (env (() () () () () () () ())))"
  #f
  9
  7
  2
  0
  7
  2
  9
  1
  1
  7
  #t
  1
  (2 2 0))
'(clean-cache
  sat-2
  0
  1000
  159
  ref-or-constructor
  "'(eval (app (app p n1) (-> n2 <-)) (env (() () () () () () () ())))"
  #f
  10
  7
  3
  0
  7
  3
  10
  1
  1
  6
  #f
  8/7
  (1 1 0))
'(clean-cache
  sat-2
  0
  1000
  159
  app
  "'(eval (app (-> (app p n1) <-) n2) (env (() () () () () () () ())))"
  #f
  7
  5
  2
  0
  5
  2
  7
  1
  1
  5
  #t
  1
  (1 2 0))
'(clean-cache
  sat-2
  0
  1000
  159
  ref-or-constructor
  "'(eval (app p (-> n1 <-)) (env (() () () () () () () ())))"
  #f
  10
  7
  3
  0
  7
  3
  10
  1
  1
  6
  #f
  8/7
  (1 1 0))
'(clean-cache
  sat-2
  0
  1000
  159
  ref-or-constructor
  "'(eval (app (-> p <-) n1) (env (() () () () () () () ())))"
  #f
  5
  3
  2
  0
  3
  2
  5
  1
  1
  3
  #t
  1
  (1 1 0))
'(clean-cache
  sat-2
  0
  1000
  159
  ref-or-constructor
  "'(eval (app (-> try <-) (λ (n7) ...)) (env (() () () () () () ())))"
  (lambda number char string quoted constructor)
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  sat-2
  0
  1000
  159
  ref-or-constructor
  "'(eval (app (-> try <-) (λ (n6) ...)) (env (() () () () () ())))"
  (lambda number char string quoted constructor)
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  sat-2
  0
  1000
  159
  ref-or-constructor
  "'(eval (app (-> try <-) (λ (n5) ...)) (env (() () () () ())))"
  (lambda number char string quoted constructor)
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  sat-2
  0
  1000
  159
  ref-or-constructor
  "'(eval (app (-> try <-) (λ (n4) ...)) (env (() () () ())))"
  (lambda number char string quoted constructor)
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  sat-2
  0
  1000
  159
  ref-or-constructor
  "'(eval (app (-> try <-) (λ (n3) ...)) (env (() () ())))"
  (lambda number char string quoted constructor)
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  sat-2
  0
  1000
  159
  ref-or-constructor
  "'(eval (app (-> try <-) (λ (n2) ...)) (env (() ())))"
  (lambda number char string quoted constructor)
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  sat-2
  0
  1000
  159
  ref-or-constructor
  "'(eval (app (-> try <-) (λ (n1) ...)) (env (())))"
  (lambda number char string quoted constructor)
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  sat-2
  0
  1000
  159
  lambda
  "'(eval\n  (letrec* (... phi (try (-> (λ (f) ...) <-)) sat-solve-7 ...) ...)\n  (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-2
  0
  1000
  159
  match
  "'(eval (λ (f) (-> (match (app f (app #t ...)) ...) <-)) (env (())))"
  #f
  180
  155
  25
  0
  155
  25
  180
  1
  1
  101
  #f
  219/155
  (45 46 0))
'(clean-cache
  sat-2
  0
  1000
  159
  app
  "'(eval (match (app f (app #t)) (#f) (_ (-> (app #t) <-))) (env (())))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  sat-2
  0
  1000
  159
  constructor
  "'(eval (app (-> #t <-)) (env (())))"
  (constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-2
  0
  1000
  159
  match
  "'(eval\n  (match (app f (app #t)) ((#f) (-> (match (app f (app #f ...)) ...) <-)) _)\n  (env (())))"
  #f
  180
  155
  25
  0
  155
  25
  180
  1
  1
  101
  #f
  219/155
  (40 41 1))
'(clean-cache
  sat-2
  0
  1000
  159
  app
  "'(eval (match (app f (app #f)) (#f) (_ (-> (app #t) <-))) (env (())))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  sat-2
  0
  1000
  159
  constructor
  "'(eval (app (-> #t <-)) (env (())))"
  (constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-2
  0
  1000
  159
  app
  "'(eval (match (app f (app #f)) ((#f) (-> (app #f) <-)) _) (env (())))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  sat-2
  0
  1000
  159
  constructor
  "'(eval (app (-> #f <-)) (env (())))"
  (constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-2
  0
  1000
  159
  app
  "'(eval (match (-> (app f (app #f)) <-) (#f) _) (env (())))"
  #f
  180
  155
  25
  0
  155
  25
  180
  1
  1
  101
  #f
  219/155
  (42 44 1))
'(clean-cache
  sat-2
  0
  1000
  159
  app
  "'(eval (app f (-> (app #f) <-)) (env (())))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  sat-2
  0
  1000
  159
  constructor
  "'(eval (app (-> #f <-)) (env (())))"
  (constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-2
  0
  1000
  159
  ref-or-constructor
  "'(eval (app (-> f <-) (app #f)) (env (())))"
  #f
  16
  8
  8
  0
  8
  8
  16
  1
  1
  7
  #f
  7/4
  (1 1 0))
'(clean-cache
  sat-2
  0
  1000
  159
  app
  "'(eval (match (-> (app f (app #t)) <-) (#f) _) (env (())))"
  #f
  180
  155
  25
  0
  155
  25
  180
  1
  1
  101
  #f
  219/155
  (42 44 1))
'(clean-cache
  sat-2
  0
  1000
  159
  app
  "'(eval (app f (-> (app #t) <-)) (env (())))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  sat-2
  0
  1000
  159
  constructor
  "'(eval (app (-> #t <-)) (env (())))"
  (constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-2
  0
  1000
  159
  ref-or-constructor
  "'(eval (app (-> f <-) (app #t)) (env (())))"
  #f
  16
  8
  8
  0
  8
  8
  16
  1
  1
  7
  #f
  7/4
  (1 1 0))
'(clean-cache
  sat-2
  0
  1000
  159
  lambda
  "'(eval (letrec* (... () (phi (-> (λ (x1) ...) <-)) try ...) ...) (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-2
  0
  1000
  159
  lambda
  "'(eval (λ (x1) (-> (λ (x2) ...) <-)) (env (())))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-2
  0
  1000
  159
  lambda
  "'(eval (λ (x2) (-> (λ (x3) ...) <-)) (env (() ())))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-2
  0
  1000
  159
  lambda
  "'(eval (λ (x3) (-> (λ (x4) ...) <-)) (env (() () ())))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-2
  0
  1000
  159
  lambda
  "'(eval (λ (x4) (-> (λ (x5) ...) <-)) (env (() () () ())))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-2
  0
  1000
  159
  lambda
  "'(eval (λ (x5) (-> (λ (x6) ...) <-)) (env (() () () () ())))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-2
  0
  1000
  159
  lambda
  "'(eval (λ (x6) (-> (λ (x7) ...) <-)) (env (() () () () () ())))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-2
  0
  1000
  159
  match
  "'(eval\n  (λ (x7) (-> (match (match x1 ...) ...) <-))\n  (env (() () () () () () ())))"
  #f
  126
  111
  15
  0
  111
  15
  126
  1
  1
  70
  #f
  152/111
  (33 34 1))
'(clean-cache
  sat-2
  0
  1000
  159
  match
  "'(eval\n  (match (match x1 ...) (#f) (_ (-> (match (match x1 ...) ...) <-)))\n  (env (() () () () () () ())))"
  #f
  113
  98
  15
  0
  98
  15
  113
  1
  1
  62
  #f
  67/49
  (29 30 0))
'(clean-cache
  sat-2
  0
  1000
  159
  match
  "'(eval\n  (match (match x1 ...) (#f) (_ (-> (match (match x3 ...) ...) <-)))\n  (env (() () () () () () ())))"
  #f
  92
  77
  15
  0
  77
  15
  92
  1
  1
  50
  #f
  104/77
  (22 23 0))
'(clean-cache
  sat-2
  0
  1000
  159
  match
  "'(eval\n  (match (match x3 ...) (#f) (_ (-> (match (match (app not ...) ...) ...) <-)))\n  (env (() () () () () () ())))"
  #f
  79
  64
  15
  0
  64
  15
  79
  1
  1
  42
  #f
  43/32
  (18 19 0))
'(clean-cache
  sat-2
  0
  1000
  159
  match
  "'(eval\n  (match\n   (match (app not x4) ...)\n   (#f)\n   (_ (-> (match (match (app not ...) ...) ...) <-)))\n  (env (() () () () () () ())))"
  #f
  61
  47
  14
  0
  47
  14
  61
  1
  1
  32
  #f
  62/47
  (13 13 0))
'(clean-cache
  sat-2
  0
  1000
  159
  match
  "'(eval\n  (match (match (app not x2) ...) (#f) (_ (-> (match (match x4 ...) ...) <-)))\n  (env (() () () () () () ())))"
  #f
  39
  26
  13
  0
  26
  13
  39
  1
  1
  19
  #f
  33/26
  (7 7 0))
'(clean-cache
  sat-2
  0
  1000
  159
  app
  "'(eval\n  (match (match x4 ...) (#f) (_ (-> (app #t) <-)))\n  (env (() () () () () () ())))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  sat-2
  0
  1000
  159
  constructor
  "'(eval (app (-> #t <-)) (env (() () () () () () ())))"
  (constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-2
  0
  1000
  159
  app
  "'(eval\n  (match (match x4 ...) ((#f) (-> (app #f) <-)) _)\n  (env (() () () () () () ())))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  sat-2
  0
  1000
  159
  constructor
  "'(eval (app (-> #f <-)) (env (() () () () () () ())))"
  (constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-2
  0
  1000
  159
  match
  "'(eval (match (-> (match x4 ...) <-) (#f) _) (env (() () () () () () ())))"
  #f
  34
  21
  13
  0
  21
  13
  34
  1
  1
  15
  #f
  9/7
  (6 6 0))
'(clean-cache
  sat-2
  0
  1000
  159
  app
  "'(eval (match x4 (#f) (_ (-> (app #t) <-))) (env (() () () () () () ())))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  sat-2
  0
  1000
  159
  constructor
  "'(eval (app (-> #t <-)) (env (() () () () () () ())))"
  (constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-2
  0
  1000
  159
  match
  "'(eval (match x4 ((#f) (-> (match x2 ...) <-)) _) (env (() () () () () () ())))"
  #f
  23
  15
  8
  0
  15
  8
  23
  1
  1
  12
  #f
  6/5
  (2 3 0))
'(clean-cache
  sat-2
  0
  1000
  159
  app
  "'(eval (match x2 (#f) (_ (-> (app #t) <-))) (env (() () () () () () ())))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  sat-2
  0
  1000
  159
  constructor
  "'(eval (app (-> #t <-)) (env (() () () () () () ())))"
  (constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-2
  0
  1000
  159
  app
  "'(eval (match x2 ((#f) (-> (app #f) <-)) _) (env (() () () () () () ())))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  sat-2
  0
  1000
  159
  constructor
  "'(eval (app (-> #f <-)) (env (() () () () () () ())))"
  (constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-2
  0
  1000
  159
  ref-or-constructor
  "'(eval (match (-> x2 <-) (#f) _) (env (() () () () () () ())))"
  #f
  18
  10
  8
  0
  10
  8
  18
  1
  1
  8
  #f
  6/5
  (2 2 0))
'(clean-cache
  sat-2
  0
  1000
  159
  ref-or-constructor
  "'(eval (match (-> x4 <-) (#f) _) (env (() () () () () () ())))"
  #f
  22
  10
  12
  0
  10
  12
  22
  1
  1
  8
  #f
  6/5
  (3 4 0))
'(clean-cache
  sat-2
  0
  1000
  159
  app
  "'(eval\n  (match (match (app not x2) ...) ((#f) (-> (app #f) <-)) _)\n  (env (() () () () () () ())))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  sat-2
  0
  1000
  159
  constructor
  "'(eval (app (-> #f <-)) (env (() () () () () () ())))"
  (constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-2
  0
  1000
  159
  match
  "'(eval\n  (match (-> (match (app not x2) ...) <-) (#f) _)\n  (env (() () () () () () ())))"
  #f
  38
  27
  11
  0
  27
  11
  38
  1
  1
  19
  #f
  35/27
  (6 6 0))
'(clean-cache
  sat-2
  0
  1000
  159
  app
  "'(eval\n  (match (app not x2) (#f) (_ (-> (app #t) <-)))\n  (env (() () () () () () ())))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  sat-2
  0
  1000
  159
  constructor
  "'(eval (app (-> #t <-)) (env (() () () () () () ())))"
  (constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-2
  0
  1000
  159
  match
  "'(eval\n  (match (app not x2) ((#f) (-> (match (app not x3) ...) <-)) _)\n  (env (() () () () () () ())))"
  #f
  29
  19
  10
  0
  19
  10
  29
  1
  1
  15
  #f
  23/19
  (4 4 0))
'(clean-cache
  sat-2
  0
  1000
  159
  app
  "'(eval\n  (match (app not x3) (#f) (_ (-> (app #t) <-)))\n  (env (() () () () () () ())))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  sat-2
  0
  1000
  159
  constructor
  "'(eval (app (-> #t <-)) (env (() () () () () () ())))"
  (constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-2
  0
  1000
  159
  app
  "'(eval\n  (match (app not x3) ((#f) (-> (app #f) <-)) _)\n  (env (() () () () () () ())))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  sat-2
  0
  1000
  159
  constructor
  "'(eval (app (-> #f <-)) (env (() () () () () () ())))"
  (constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-2
  0
  1000
  159
  app
  "'(eval (match (-> (app not x3) <-) (#f) _) (env (() () () () () () ())))"
  #f
  24
  14
  10
  0
  14
  10
  24
  1
  1
  11
  #f
  17/14
  (2 3 0))
'(clean-cache
  sat-2
  0
  1000
  159
  ref-or-constructor
  "'(eval (app not (-> x3 <-)) (env (() () () () () () ())))"
  #f
  20
  10
  10
  0
  10
  10
  20
  1
  1
  8
  #f
  6/5
  (3 3 0))
'(clean-cache
  sat-2
  0
  1000
  159
  ref-or-constructor
  "'(eval (app (-> not <-) x3) (env (() () () () () () ())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-2
  0
  1000
  159
  app
  "'(eval (match (-> (app not x2) <-) (#f) _) (env (() () () () () () ())))"
  #f
  22
  14
  8
  0
  14
  8
  22
  1
  1
  11
  #f
  17/14
  (2 2 0))
'(clean-cache
  sat-2
  0
  1000
  159
  ref-or-constructor
  "'(eval (app not (-> x2 <-)) (env (() () () () () () ())))"
  #f
  18
  10
  8
  0
  10
  8
  18
  1
  1
  8
  #f
  6/5
  (2 2 0))
'(clean-cache
  sat-2
  0
  1000
  159
  ref-or-constructor
  "'(eval (app (-> not <-) x2) (env (() () () () () () ())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-2
  0
  1000
  159
  app
  "'(eval\n  (match (match (app not x4) ...) ((#f) (-> (app #f) <-)) _)\n  (env (() () () () () () ())))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  sat-2
  0
  1000
  159
  constructor
  "'(eval (app (-> #f <-)) (env (() () () () () () ())))"
  (constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-2
  0
  1000
  159
  match
  "'(eval\n  (match (-> (match (app not x4) ...) <-) (#f) _)\n  (env (() () () () () () ())))"
  #f
  38
  25
  13
  0
  25
  13
  38
  1
  1
  18
  #f
  32/25
  (6 6 0))
'(clean-cache
  sat-2
  0
  1000
  159
  app
  "'(eval\n  (match (app not x4) (#f) (_ (-> (app #t) <-)))\n  (env (() () () () () () ())))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  sat-2
  0
  1000
  159
  constructor
  "'(eval (app (-> #t <-)) (env (() () () () () () ())))"
  (constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-2
  0
  1000
  159
  match
  "'(eval\n  (match (app not x4) ((#f) (-> (match x1 ...) <-)) _)\n  (env (() () () () () () ())))"
  #f
  21
  15
  6
  0
  15
  6
  21
  1
  1
  12
  #f
  6/5
  (2 3 0))
'(clean-cache
  sat-2
  0
  1000
  159
  app
  "'(eval (match x1 (#f) (_ (-> (app #t) <-))) (env (() () () () () () ())))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  sat-2
  0
  1000
  159
  constructor
  "'(eval (app (-> #t <-)) (env (() () () () () () ())))"
  (constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-2
  0
  1000
  159
  app
  "'(eval (match x1 ((#f) (-> (app #f) <-)) _) (env (() () () () () () ())))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  sat-2
  0
  1000
  159
  constructor
  "'(eval (app (-> #f <-)) (env (() () () () () () ())))"
  (constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-2
  0
  1000
  159
  ref-or-constructor
  "'(eval (match (-> x1 <-) (#f) _) (env (() () () () () () ())))"
  #f
  16
  10
  6
  0
  10
  6
  16
  1
  1
  8
  #f
  6/5
  (1 1 0))
'(clean-cache
  sat-2
  0
  1000
  159
  app
  "'(eval (match (-> (app not x4) <-) (#f) _) (env (() () () () () () ())))"
  #f
  26
  14
  12
  0
  14
  12
  26
  1
  1
  11
  #f
  17/14
  (3 3 0))
'(clean-cache
  sat-2
  0
  1000
  159
  ref-or-constructor
  "'(eval (app not (-> x4 <-)) (env (() () () () () () ())))"
  #f
  22
  10
  12
  0
  10
  12
  22
  1
  1
  8
  #f
  6/5
  (2 2 0))
'(clean-cache
  sat-2
  0
  1000
  159
  ref-or-constructor
  "'(eval (app (-> not <-) x4) (env (() () () () () () ())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-2
  0
  1000
  159
  app
  "'(eval\n  (match (match x3 ...) ((#f) (-> (app #f) <-)) _)\n  (env (() () () () () () ())))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  sat-2
  0
  1000
  159
  constructor
  "'(eval (app (-> #f <-)) (env (() () () () () () ())))"
  (constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-2
  0
  1000
  159
  match
  "'(eval (match (-> (match x3 ...) <-) (#f) _) (env (() () () () () () ())))"
  #f
  34
  21
  13
  0
  21
  13
  34
  1
  1
  15
  #f
  9/7
  (6 6 0))
'(clean-cache
  sat-2
  0
  1000
  159
  app
  "'(eval (match x3 (#f) (_ (-> (app #t) <-))) (env (() () () () () () ())))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  sat-2
  0
  1000
  159
  constructor
  "'(eval (app (-> #t <-)) (env (() () () () () () ())))"
  (constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-2
  0
  1000
  159
  match
  "'(eval (match x3 ((#f) (-> (match x4 ...) <-)) _) (env (() () () () () () ())))"
  #f
  27
  15
  12
  0
  15
  12
  27
  1
  1
  12
  #f
  6/5
  (4 4 0))
'(clean-cache
  sat-2
  0
  1000
  159
  app
  "'(eval (match x4 (#f) (_ (-> (app #t) <-))) (env (() () () () () () ())))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  sat-2
  0
  1000
  159
  constructor
  "'(eval (app (-> #t <-)) (env (() () () () () () ())))"
  (constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-2
  0
  1000
  159
  app
  "'(eval (match x4 ((#f) (-> (app #f) <-)) _) (env (() () () () () () ())))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  sat-2
  0
  1000
  159
  constructor
  "'(eval (app (-> #f <-)) (env (() () () () () () ())))"
  (constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-2
  0
  1000
  159
  ref-or-constructor
  "'(eval (match (-> x4 <-) (#f) _) (env (() () () () () () ())))"
  #f
  22
  10
  12
  0
  10
  12
  22
  1
  1
  8
  #f
  6/5
  (2 2 0))
'(clean-cache
  sat-2
  0
  1000
  159
  ref-or-constructor
  "'(eval (match (-> x3 <-) (#f) _) (env (() () () () () () ())))"
  #f
  20
  10
  10
  0
  10
  10
  20
  1
  1
  8
  #f
  6/5
  (2 2 0))
'(clean-cache
  sat-2
  0
  1000
  159
  app
  "'(eval\n  (match (match x1 ...) ((#f) (-> (app #f) <-)) _)\n  (env (() () () () () () ())))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  sat-2
  0
  1000
  159
  constructor
  "'(eval (app (-> #f <-)) (env (() () () () () () ())))"
  (constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-2
  0
  1000
  159
  match
  "'(eval (match (-> (match x1 ...) <-) (#f) _) (env (() () () () () () ())))"
  #f
  45
  33
  12
  0
  33
  12
  45
  1
  1
  22
  #f
  4/3
  (9 9 0))
'(clean-cache
  sat-2
  0
  1000
  159
  app
  "'(eval (match x1 (#f) (_ (-> (app #t) <-))) (env (() () () () () () ())))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  sat-2
  0
  1000
  159
  constructor
  "'(eval (app (-> #t <-)) (env (() () () () () () ())))"
  (constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-2
  0
  1000
  159
  match
  "'(eval\n  (match x1 ((#f) (-> (match (app not x2) ...) <-)) _)\n  (env (() () () () () () ())))"
  #f
  38
  27
  11
  0
  27
  11
  38
  1
  1
  19
  #f
  35/27
  (6 7 0))
'(clean-cache
  sat-2
  0
  1000
  159
  app
  "'(eval\n  (match (app not x2) (#f) (_ (-> (app #t) <-)))\n  (env (() () () () () () ())))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  sat-2
  0
  1000
  159
  constructor
  "'(eval (app (-> #t <-)) (env (() () () () () () ())))"
  (constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-2
  0
  1000
  159
  match
  "'(eval\n  (match (app not x2) ((#f) (-> (match (app not x3) ...) <-)) _)\n  (env (() () () () () () ())))"
  #f
  29
  19
  10
  0
  19
  10
  29
  1
  1
  15
  #f
  23/19
  (3 3 0))
'(clean-cache
  sat-2
  0
  1000
  159
  app
  "'(eval\n  (match (app not x3) (#f) (_ (-> (app #t) <-)))\n  (env (() () () () () () ())))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  sat-2
  0
  1000
  159
  constructor
  "'(eval (app (-> #t <-)) (env (() () () () () () ())))"
  (constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-2
  0
  1000
  159
  app
  "'(eval\n  (match (app not x3) ((#f) (-> (app #f) <-)) _)\n  (env (() () () () () () ())))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  sat-2
  0
  1000
  159
  constructor
  "'(eval (app (-> #f <-)) (env (() () () () () () ())))"
  (constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-2
  0
  1000
  159
  app
  "'(eval (match (-> (app not x3) <-) (#f) _) (env (() () () () () () ())))"
  #f
  24
  14
  10
  0
  14
  10
  24
  1
  1
  11
  #f
  17/14
  (2 2 0))
'(clean-cache
  sat-2
  0
  1000
  159
  ref-or-constructor
  "'(eval (app not (-> x3 <-)) (env (() () () () () () ())))"
  #f
  20
  10
  10
  0
  10
  10
  20
  1
  1
  8
  #f
  6/5
  (3 3 0))
'(clean-cache
  sat-2
  0
  1000
  159
  ref-or-constructor
  "'(eval (app (-> not <-) x3) (env (() () () () () () ())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-2
  0
  1000
  159
  app
  "'(eval (match (-> (app not x2) <-) (#f) _) (env (() () () () () () ())))"
  #f
  22
  14
  8
  0
  14
  8
  22
  1
  1
  11
  #f
  17/14
  (2 2 0))
'(clean-cache
  sat-2
  0
  1000
  159
  ref-or-constructor
  "'(eval (app not (-> x2 <-)) (env (() () () () () () ())))"
  #f
  18
  10
  8
  0
  10
  8
  18
  1
  1
  8
  #f
  6/5
  (1 1 0))
'(clean-cache
  sat-2
  0
  1000
  159
  ref-or-constructor
  "'(eval (app (-> not <-) x2) (env (() () () () () () ())))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-2
  0
  1000
  159
  ref-or-constructor
  "'(eval (match (-> x1 <-) (#f) _) (env (() () () () () () ())))"
  #f
  16
  10
  6
  0
  10
  6
  16
  1
  1
  8
  #f
  6/5
  (1 1 0))
'(clean-cache
  sat-2
  0
  1000
  159
  app
  "'(eval\n  (match (match x1 ...) ((#f) (-> (app #f) <-)) _)\n  (env (() () () () () () ())))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  sat-2
  0
  1000
  159
  constructor
  "'(eval (app (-> #f <-)) (env (() () () () () () ())))"
  (constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-2
  0
  1000
  159
  match
  "'(eval (match (-> (match x1 ...) <-) (#f) _) (env (() () () () () () ())))"
  #f
  30
  21
  9
  0
  21
  9
  30
  1
  1
  15
  #f
  9/7
  (5 5 0))
'(clean-cache
  sat-2
  0
  1000
  159
  app
  "'(eval (match x1 (#f) (_ (-> (app #t) <-))) (env (() () () () () () ())))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  sat-2
  0
  1000
  159
  constructor
  "'(eval (app (-> #t <-)) (env (() () () () () () ())))"
  (constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-2
  0
  1000
  159
  match
  "'(eval (match x1 ((#f) (-> (match x2 ...) <-)) _) (env (() () () () () () ())))"
  #f
  23
  15
  8
  0
  15
  8
  23
  1
  1
  12
  #f
  6/5
  (2 2 0))
'(clean-cache
  sat-2
  0
  1000
  159
  app
  "'(eval (match x2 (#f) (_ (-> (app #t) <-))) (env (() () () () () () ())))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  sat-2
  0
  1000
  159
  constructor
  "'(eval (app (-> #t <-)) (env (() () () () () () ())))"
  (constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-2
  0
  1000
  159
  app
  "'(eval (match x2 ((#f) (-> (app #f) <-)) _) (env (() () () () () () ())))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  sat-2
  0
  1000
  159
  constructor
  "'(eval (app (-> #f <-)) (env (() () () () () () ())))"
  (constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-2
  0
  1000
  159
  ref-or-constructor
  "'(eval (match (-> x2 <-) (#f) _) (env (() () () () () () ())))"
  #f
  18
  10
  8
  0
  10
  8
  18
  1
  1
  8
  #f
  6/5
  (1 1 0))
'(clean-cache
  sat-2
  0
  1000
  159
  ref-or-constructor
  "'(eval (match (-> x1 <-) (#f) _) (env (() () () () () () ())))"
  #f
  16
  10
  6
  0
  10
  6
  16
  1
  1
  8
  #f
  6/5
  (1 1 0))
'(clean-cache
  sat-2
  0
  1000
  159
  app
  "'(eval (letrec* (phi ... sat-solve-7) (-> (app sat-solve-7 phi) <-)) (env ()))"
  #f
  182
  157
  25
  0
  157
  25
  182
  1
  1
  101
  #f
  223/157
  (43 44 0))
'(clean-cache
  sat-2
  0
  1000
  159
  ref-or-constructor
  "'(eval (app sat-solve-7 (-> phi <-)) (env ()))"
  (lambda number char string quoted constructor)
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  sat-2
  0
  1000
  159
  ref-or-constructor
  "'(eval (app (-> sat-solve-7 <-) phi) (env ()))"
  (lambda number char string quoted constructor)
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
