'(clean-cache
  primtest
  0
  94
  letrec*
  "\"'(eval ((top) letrec* (square ... byte-size) ...) (env ()))\""
  #f)
'(clean-cache
  primtest
  0
  94
  let
  "\"'(eval (λ (byte-size iterations) (-> (let (n) ...) <-)) (env (())))\""
  #f)
'(clean-cache
  primtest
  0
  5
  94
  app
  "\"'(eval (let (... () (n (-> (app random byte-size) <-)) () ...) ...) (env (())))\""
  9
  6
  3
  0
  6
  3
  9
  1
  1
  1
  #f
  25/6
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval (app random (-> byte-size <-)) (env (())))\""
  7
  4
  3
  0
  4
  3
  7
  1
  1
  0
  #f
  4
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  primtest
  0
  94
  match
  "\"'(eval\n  (let (n)\n    (->\n     (match\n      (app\n       and\n       (app not (app is-trivial-composite? n))\n       (app is-fermat-prime? n iterations))\n      ...)\n     <-))\n  (env (())))\""
  #f)
'(clean-cache
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval\n  (match\n   (app\n    and\n    (app not (app is-trivial-composite? n))\n    (app is-fermat-prime? n iterations))\n   (#f)\n   (_ (-> n <-)))\n  (env (())))\""
  10
  7
  3
  0
  7
  3
  10
  1
  1
  1
  #f
  29/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  primtest
  0
  94
  app
  "\"'(eval\n  (match\n   (app\n    and\n    (app not (app is-trivial-composite? n))\n    (app is-fermat-prime? n iterations))\n   ((#f) (-> (app generate-fermat-prime byte-size iterations) <-))\n   _)\n  (env (())))\""
  #f)
'(clean-cache
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval (app generate-fermat-prime byte-size (-> iterations <-)) (env (())))\""
  6
  3
  3
  0
  3
  3
  6
  1
  1
  0
  #f
  4
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval (app generate-fermat-prime (-> byte-size <-) iterations) (env (())))\""
  6
  3
  3
  0
  3
  3
  6
  1
  1
  0
  #f
  4
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  primtest
  0
  94
  app
  "\"'(eval\n  (match\n   (->\n    (app\n     and\n     (app not (app is-trivial-composite? n))\n     (app is-fermat-prime? n iterations))\n    <-)\n   (#f)\n   _)\n  (env (())))\""
  #f)
'(clean-cache
  primtest
  0
  94
  app
  "\"'(eval\n  (app\n   and\n   (app not (app is-trivial-composite? n))\n   (-> (app is-fermat-prime? n iterations) <-))\n  (env (())))\""
  #f)
'(clean-cache
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval (app is-fermat-prime? n (-> iterations <-)) (env (())))\""
  7
  4
  3
  0
  4
  3
  7
  1
  1
  0
  #f
  4
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval (app is-fermat-prime? (-> n <-) iterations) (env (())))\""
  10
  7
  3
  0
  7
  3
  10
  1
  1
  1
  #f
  29/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  primtest
  0
  94
  app
  "\"'(eval\n  (app\n   and\n   (-> (app not (app is-trivial-composite? n)) <-)\n   (app is-fermat-prime? n iterations))\n  (env (())))\""
  #f)
'(clean-cache
  primtest
  0
  94
  app
  "\"'(eval (app not (-> (app is-trivial-composite? n) <-)) (env (())))\""
  #f)
'(clean-cache
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval (app is-trivial-composite? (-> n <-)) (env (())))\""
  10
  7
  3
  0
  7
  3
  10
  1
  1
  1
  #f
  29/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  primtest
  0
  94
  app
  "\"'(eval\n  (λ (n iterations)\n    (-> (app or (app <= iterations 0) (let* (byte-size ... a) ...)) <-))\n  (env (())))\""
  #f)
'(clean-cache
  primtest
  0
  94
  let*
  "\"'(eval\n  (app or (app <= iterations 0) (-> (let* (byte-size ... a) ...) <-))\n  (env (())))\""
  #f)
'(clean-cache
  primtest
  0
  5
  94
  app
  "\"'(eval\n  (let* (... byte-size (a (-> (app random byte-size) <-)) () ...) ...)\n  (env (())))\""
  27
  21
  6
  0
  21
  6
  27
  1
  1
  6
  #f
  30/7
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval (app random (-> byte-size <-)) (env (())))\""
  25
  19
  6
  0
  19
  6
  25
  1
  1
  5
  #f
  81/19
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  primtest
  0
  5
  94
  app
  "\"'(eval\n  (let* (...\n         ()\n         (byte-size (-> (app ceiling (app / (app log n) (app log 2))) <-))\n         a\n         ...)\n    ...)\n  (env (())))\""
  24
  18
  6
  0
  18
  6
  24
  1
  1
  5
  #f
  77/18
  ((1 3/2 0) (1 1 0) (1 1 0)))
'(clean-cache
  primtest
  0
  5
  94
  app
  "\"'(eval (app ceiling (-> (app / (app log n) (app log 2)) <-)) (env (())))\""
  22
  16
  6
  0
  16
  6
  22
  1
  1
  4
  #f
  17/4
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  primtest
  0
  5
  94
  app
  "\"'(eval (app / (app log n) (-> (app log 2) <-)) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  1
  #f
  13/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  primtest
  0
  5
  94
  app
  "\"'(eval (app / (-> (app log n) <-) (app log 2)) (env (())))\""
  17
  11
  6
  0
  11
  6
  17
  1
  1
  2
  #f
  46/11
  ((1 1 0) (1/2 1 0) (1/2 1/2 0)))
'(clean-cache
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval (app log (-> n <-)) (env (())))\""
  15
  9
  6
  0
  9
  6
  15
  1
  1
  1
  #f
  37/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  primtest
  0
  94
  match
  "\"'(eval\n  (let* (byte-size ... a)\n    (-> (match (app = (app modulo-power a (app - n 1) n) 1) ...) <-))\n  (env (())))\""
  #f)
'(clean-cache
  primtest
  0
  94
  app
  "\"'(eval\n  (match\n   (app = (app modulo-power a (app - n 1) n) 1)\n   (#f)\n   (_ (-> (app is-fermat-prime? n (app - iterations 1)) <-)))\n  (env (())))\""
  #f)
'(clean-cache
  primtest
  0
  5
  94
  app
  "\"'(eval (app is-fermat-prime? n (-> (app - iterations 1) <-)) (env (())))\""
  14
  8
  6
  0
  8
  6
  14
  1
  1
  1
  #f
  33/8
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval (app - (-> iterations <-) 1) (env (())))\""
  14
  8
  6
  0
  8
  6
  14
  1
  1
  1
  #f
  33/8
  ((1/2 1/2 0) (1/2 1 0) (1/2 1 0)))
'(clean-cache
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval (app is-fermat-prime? (-> n <-) (app - iterations 1)) (env (())))\""
  14
  8
  6
  0
  8
  6
  14
  1
  1
  1
  #f
  33/8
  ((1/2 1/2 0) (1/2 1/2 0) (1 1 0)))
'(clean-cache
  primtest
  0
  5
  94
  app
  "\"'(eval\n  (match\n   (app = (app modulo-power a (app - n 1) n) 1)\n   ((#f) (-> (app #f) <-))\n   _)\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  primtest
  0
  94
  app
  "\"'(eval\n  (match (-> (app = (app modulo-power a (app - n 1) n) 1) <-) (#f) _)\n  (env (())))\""
  #f)
'(clean-cache
  primtest
  0
  94
  app
  "\"'(eval (app = (-> (app modulo-power a (app - n 1) n) <-) 1) (env (())))\""
  #f)
'(clean-cache
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval (app modulo-power a (app - n 1) (-> n <-)) (env (())))\""
  15
  9
  6
  0
  9
  6
  15
  1
  1
  1
  #f
  37/9
  ((1/2 1/2 0) (1 2 0) (1/2 1 0)))
'(clean-cache
  primtest
  0
  5
  94
  app
  "\"'(eval (app modulo-power a (-> (app - n 1) <-) n) (env (())))\""
  18
  12
  6
  0
  12
  6
  18
  1
  1
  2
  #f
  25/6
  ((1/2 1 0) (1/2 1/2 0) (1 1 0)))
'(clean-cache
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval (app - (-> n <-) 1) (env (())))\""
  15
  9
  6
  0
  9
  6
  15
  1
  1
  1
  #f
  37/9
  ((1 1 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval (app modulo-power (-> a <-) (app - n 1) n) (env (())))\""
  28
  22
  6
  0
  22
  6
  28
  1
  1
  6
  #f
  47/11
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  primtest
  0
  5
  94
  app
  "\"'(eval\n  (app or (-> (app <= iterations 0) <-) (let* (byte-size ... a) ...))\n  (env (())))\""
  18
  12
  6
  0
  12
  6
  18
  1
  1
  2
  #f
  13/3
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval (app <= (-> iterations <-) 0) (env (())))\""
  15
  9
  6
  0
  9
  6
  15
  1
  1
  1
  #f
  37/9
  ((1/2 1/2 0) (1 1 0) (1/2 1/2 0)))
'(clean-cache
  primtest
  0
  94
  app
  "\"'(eval\n  (λ (n)\n    (->\n     (app\n      or\n      (app = (app modulo n 2) 0)\n      (app = (app modulo n 3) 0)\n      (app = (app modulo n 5) 0)\n      (app = (app modulo n 7) 0)\n      (app = (app modulo n 11) 0)\n      (app = (app modulo n 13) 0)\n      (app = (app modulo n 17) 0)\n      (app = (app modulo n 19) 0)\n      (app = (app modulo n 23) 0))\n     <-))\n  (env (())))\""
  #f)
'(clean-cache
  primtest
  0
  5
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (-> (app = (app modulo n 23) 0) <-))\n  (env (())))\""
  19
  14
  5
  0
  14
  5
  19
  1
  1
  3
  #f
  61/14
  ((1/2 1/2 0) (1/2 1 0) (1/2 1/2 0)))
'(clean-cache
  primtest
  0
  5
  94
  app
  "\"'(eval (app = (-> (app modulo n 23) <-) 0) (env (())))\""
  16
  11
  5
  0
  11
  5
  16
  1
  1
  2
  #f
  46/11
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 23) (env (())))\""
  13
  8
  5
  0
  8
  5
  13
  1
  1
  1
  #f
  33/8
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  primtest
  0
  5
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (-> (app = (app modulo n 19) 0) <-)\n   (app = (app modulo n 23) 0))\n  (env (())))\""
  19
  14
  5
  0
  14
  5
  19
  1
  1
  3
  #f
  61/14
  ((1/2 1/2 0) (1/2 1/2 0) (1 3/2 0)))
'(clean-cache
  primtest
  0
  5
  94
  app
  "\"'(eval (app = (-> (app modulo n 19) <-) 0) (env (())))\""
  16
  11
  5
  0
  11
  5
  16
  1
  1
  2
  #f
  46/11
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 19) (env (())))\""
  13
  8
  5
  0
  8
  5
  13
  1
  1
  1
  #f
  33/8
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  primtest
  0
  5
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (-> (app = (app modulo n 17) 0) <-)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env (())))\""
  19
  14
  5
  0
  14
  5
  19
  1
  1
  3
  #f
  61/14
  ((1/2 1/2 0) (1 1 0) (1/2 1/2 0)))
'(clean-cache
  primtest
  0
  5
  94
  app
  "\"'(eval (app = (-> (app modulo n 17) <-) 0) (env (())))\""
  16
  11
  5
  0
  11
  5
  16
  1
  1
  2
  #f
  46/11
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1 0)))
'(clean-cache
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 17) (env (())))\""
  13
  8
  5
  0
  8
  5
  13
  1
  1
  1
  #f
  33/8
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1 0)))
'(clean-cache
  primtest
  0
  5
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (-> (app = (app modulo n 13) 0) <-)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env (())))\""
  19
  14
  5
  0
  14
  5
  19
  1
  1
  3
  #f
  61/14
  ((1/2 1/2 0) (1 1 0) (1/2 1/2 0)))
'(clean-cache
  primtest
  0
  5
  94
  app
  "\"'(eval (app = (-> (app modulo n 13) <-) 0) (env (())))\""
  16
  11
  5
  0
  11
  5
  16
  1
  1
  2
  #f
  46/11
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 13) (env (())))\""
  13
  8
  5
  0
  8
  5
  13
  1
  1
  1
  #f
  33/8
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  primtest
  0
  5
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (-> (app = (app modulo n 11) 0) <-)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env (())))\""
  19
  14
  5
  0
  14
  5
  19
  1
  1
  3
  #f
  61/14
  ((1/2 1 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  primtest
  0
  5
  94
  app
  "\"'(eval (app = (-> (app modulo n 11) <-) 0) (env (())))\""
  16
  11
  5
  0
  11
  5
  16
  1
  1
  2
  #f
  46/11
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 11) (env (())))\""
  13
  8
  5
  0
  8
  5
  13
  1
  1
  1
  #f
  33/8
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  primtest
  0
  5
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (-> (app = (app modulo n 7) 0) <-)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env (())))\""
  19
  14
  5
  0
  14
  5
  19
  1
  1
  3
  #f
  61/14
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  primtest
  0
  5
  94
  app
  "\"'(eval (app = (-> (app modulo n 7) <-) 0) (env (())))\""
  16
  11
  5
  0
  11
  5
  16
  1
  1
  2
  #f
  46/11
  ((1/2 1/2 0) (1/2 3/2 0) (1/2 1/2 0)))
'(clean-cache
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 7) (env (())))\""
  13
  8
  5
  0
  8
  5
  13
  1
  1
  1
  #f
  33/8
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  primtest
  0
  5
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (-> (app = (app modulo n 5) 0) <-)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env (())))\""
  19
  14
  5
  0
  14
  5
  19
  1
  1
  3
  #f
  61/14
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  primtest
  0
  5
  94
  app
  "\"'(eval (app = (-> (app modulo n 5) <-) 0) (env (())))\""
  16
  11
  5
  0
  11
  5
  16
  1
  1
  2
  #f
  46/11
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 5) (env (())))\""
  13
  8
  5
  0
  8
  5
  13
  1
  1
  1
  #f
  33/8
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  primtest
  0
  5
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (-> (app = (app modulo n 3) 0) <-)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env (())))\""
  19
  14
  5
  0
  14
  5
  19
  1
  1
  3
  #f
  61/14
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  primtest
  0
  5
  94
  app
  "\"'(eval (app = (-> (app modulo n 3) <-) 0) (env (())))\""
  16
  11
  5
  0
  11
  5
  16
  1
  1
  2
  #f
  46/11
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 3) (env (())))\""
  13
  8
  5
  0
  8
  5
  13
  1
  1
  1
  #f
  33/8
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  primtest
  0
  5
  94
  app
  "\"'(eval\n  (app\n   or\n   (-> (app = (app modulo n 2) 0) <-)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env (())))\""
  19
  14
  5
  0
  14
  5
  19
  1
  1
  3
  #f
  61/14
  ((1/2 1/2 0) (1/2 1/2 0) (1 1 0)))
'(clean-cache
  primtest
  0
  5
  94
  app
  "\"'(eval (app = (-> (app modulo n 2) <-) 0) (env (())))\""
  16
  11
  5
  0
  11
  5
  16
  1
  1
  2
  #f
  46/11
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 2) (env (())))\""
  13
  8
  5
  0
  8
  5
  13
  1
  1
  1
  #f
  33/8
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  primtest
  0
  5
  94
  match
  "\"'(eval (λ (base exp n) (-> (match (app = exp 0) ...) <-)) (env (())))\""
  84
  70
  12
  2
  70
  12
  82
  1
  1
  20
  #f
  152/35
  ((5 5 0) (5 5 0) (5 5 0)))
'(clean-cache
  primtest
  0
  94
  match
  "\"'(eval\n  (match (app = exp 0) ((#f) (-> (match (app odd? exp) ...) <-)) _)\n  (env (())))\""
  #f)
'(clean-cache
  primtest
  0
  94
  app
  "\"'(eval\n  (match\n   (app odd? exp)\n   (#f)\n   (_\n    (->\n     (app modulo (app * base (app modulo-power base (app - exp 1) n)) n)\n     <-)))\n  (env (())))\""
  #f)
'(clean-cache
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval\n  (app modulo (app * base (app modulo-power base (app - exp 1) n)) (-> n <-))\n  (env (())))\""
  22
  12
  10
  0
  12
  10
  22
  1
  1
  1
  #f
  49/12
  ((1 1 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  primtest
  0
  94
  app
  "\"'(eval\n  (app modulo (-> (app * base (app modulo-power base (app - exp 1) n)) <-) n)\n  (env (())))\""
  #f)
'(clean-cache
  primtest
  0
  94
  app
  "\"'(eval (app * base (-> (app modulo-power base (app - exp 1) n) <-)) (env (())))\""
  #f)
'(clean-cache
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval (app modulo-power base (app - exp 1) (-> n <-)) (env (())))\""
  21
  11
  10
  0
  11
  10
  21
  1
  1
  1
  #f
  45/11
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  primtest
  0
  5
  94
  app
  "\"'(eval (app modulo-power base (-> (app - exp 1) <-) n) (env (())))\""
  30
  20
  10
  0
  20
  10
  30
  1
  1
  4
  #f
  21/5
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval (app - (-> exp <-) 1) (env (())))\""
  30
  20
  10
  0
  20
  10
  30
  1
  1
  4
  #f
  21/5
  ((3/2 3/2 0) (3/2 2 0) (3/2 3/2 0)))
'(clean-cache
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval (app modulo-power (-> base <-) (app - exp 1) n) (env (())))\""
  34
  24
  10
  0
  24
  10
  34
  1
  1
  6
  #f
  17/4
  ((3/2 3/2 0) (2 5/2 0) (3/2 2 0)))
'(clean-cache
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval (app * (-> base <-) (app modulo-power base (app - exp 1) n)) (env (())))\""
  35
  25
  10
  0
  25
  10
  35
  1
  1
  6
  #f
  106/25
  ((3/2 3/2 0) (2 2 0) (2 2 0)))
'(clean-cache
  primtest
  0
  94
  app
  "\"'(eval\n  (match\n   (app odd? exp)\n   ((#f)\n    (->\n     (app modulo (app square (app modulo-power base (app / exp 2) n)) n)\n     <-))\n   _)\n  (env (())))\""
  #f)
'(clean-cache
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval\n  (app modulo (app square (app modulo-power base (app / exp 2) n)) (-> n <-))\n  (env (())))\""
  22
  12
  10
  0
  12
  10
  22
  1
  1
  1
  #f
  49/12
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  primtest
  0
  94
  app
  "\"'(eval\n  (app modulo (-> (app square (app modulo-power base (app / exp 2) n)) <-) n)\n  (env (())))\""
  #f)
'(clean-cache
  primtest
  0
  94
  app
  "\"'(eval (app square (-> (app modulo-power base (app / exp 2) n) <-)) (env (())))\""
  #f)
'(clean-cache
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval (app modulo-power base (app / exp 2) (-> n <-)) (env (())))\""
  21
  11
  10
  0
  11
  10
  21
  1
  1
  1
  #f
  45/11
  ((1 1 0) (1 1 0) (3/2 3/2 0)))
'(clean-cache
  primtest
  0
  5
  94
  app
  "\"'(eval (app modulo-power base (-> (app / exp 2) <-) n) (env (())))\""
  30
  20
  10
  0
  20
  10
  30
  1
  1
  4
  #f
  21/5
  ((3/2 3/2 0) (2 2 0) (3/2 3/2 0)))
'(clean-cache
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval (app / (-> exp <-) 2) (env (())))\""
  30
  20
  10
  0
  20
  10
  30
  1
  1
  4
  #f
  21/5
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval (app modulo-power (-> base <-) (app / exp 2) n) (env (())))\""
  34
  24
  10
  0
  24
  10
  34
  1
  1
  6
  #f
  17/4
  ((3/2 2 0) (3/2 3/2 0) (3/2 2 0)))
'(clean-cache
  primtest
  0
  5
  94
  app
  "\"'(eval (match (-> (app odd? exp) <-) (#f) _) (env (())))\""
  33
  23
  10
  0
  23
  10
  33
  1
  1
  5
  #f
  99/23
  ((2 2 0) (2 2 0) (3/2 3/2 0)))
'(clean-cache
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval (app odd? (-> exp <-)) (env (())))\""
  31
  21
  10
  0
  21
  10
  31
  1
  1
  4
  #f
  88/21
  ((2 2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  primtest
  0
  5
  94
  app
  "\"'(eval (match (-> (app = exp 0) <-) (#f) _) (env (())))\""
  34
  24
  10
  0
  24
  10
  34
  1
  1
  5
  #f
  103/24
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval (app = (-> exp <-) 0) (env (())))\""
  31
  21
  10
  0
  21
  10
  31
  1
  1
  4
  #f
  88/21
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  primtest
  0
  94
  app
  "\"'(eval (λ (x) (-> (app * x x) <-)) (env (())))\""
  #f)
'(clean-cache
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval (app * x (-> x <-)) (env (())))\""
  84
  70
  12
  2
  70
  12
  82
  1
  1
  20
  #f
  152/35
  ((5 5 0) (5 5 0) (5 5 0)))
'(clean-cache
  primtest
  0
  94
  ref-or-constructor
  "\"'(eval (app * (-> x <-) x) (env (())))\""
  #f)
'(clean-cache
  primtest
  0
  94
  app
  "\"'(eval\n  (letrec*\n   (square ... byte-size)\n   (-> (app generate-fermat-prime byte-size iterations) <-))\n  (env ()))\""
  #f)
'(shuffled-cache
  0
  primtest
  0
  5
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (-> (app = (app modulo n 11) 0) <-)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env (())))\""
  19
  14
  5
  0
  14
  5
  19
  1
  1
  3
  #f
  61/14
  ((1/2 1/2 0) (1 1 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  primtest
  0
  5
  94
  app
  "\"'(eval (match (-> (app = exp 0) <-) (#f) _) (env (())))\""
  44
  32
  12
  0
  32
  12
  44
  1
  1
  7
  #f
  139/32
  ((3/2 3/2 0) (3/2 3/2 0) (2 2 0)))
'(shuffled-cache
  0
  primtest
  0
  5
  94
  app
  "\"'(eval (app = (-> (app modulo n 2) <-) 0) (env (())))\""
  48
  36
  12
  0
  36
  12
  48
  1
  1
  8
  #f
  13/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  5
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (-> (app = (app modulo n 19) 0) <-)\n   (app = (app modulo n 23) 0))\n  (env (())))\""
  55
  43
  12
  0
  43
  12
  55
  1
  1
  10
  #f
  188/43
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  5
  94
  match
  "\"'(eval (λ (base exp n) (-> (match (app = exp 0) ...) <-)) (env (())))\""
  61
  49
  12
  0
  49
  12
  61
  1
  1
  11
  #f
  213/49
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval (app modulo-power (-> a <-) (app - n 1) n) (env (())))\""
  75
  63
  12
  0
  63
  12
  75
  1
  1
  16
  #f
  274/63
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  primtest
  0
  5
  94
  match
  "\"'(eval\n  (let* (byte-size ... a)\n    (-> (match (app = (app modulo-power a (app - n 1) n) 1) ...) <-))\n  (env (())))\""
  102
  88
  12
  2
  88
  12
  100
  1
  1
  25
  #f
  35/8
  ((1 3/2 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  primtest
  0
  5
  94
  match
  "\"'(eval\n  (match (app = exp 0) ((#f) (-> (match (app odd? exp) ...) <-)) _)\n  (env (())))\""
  102
  88
  12
  2
  88
  12
  100
  1
  1
  25
  #f
  35/8
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval (app log (-> n <-)) (env (())))\""
  102
  88
  12
  2
  88
  12
  100
  1
  1
  25
  #f
  35/8
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  5
  94
  app
  "\"'(eval (app = (-> (app modulo n 3) <-) 0) (env (())))\""
  106
  92
  12
  2
  92
  12
  104
  1
  1
  26
  #f
  201/46
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  5
  94
  app
  "\"'(eval (app = (-> (app modulo-power a (app - n 1) n) <-) 1) (env (())))\""
  106
  92
  12
  2
  92
  12
  104
  1
  1
  26
  #f
  201/46
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  5
  94
  app
  "\"'(eval\n  (λ (n iterations)\n    (-> (app or (app <= iterations 0) (let* (byte-size ... a) ...)) <-))\n  (env (())))\""
  106
  92
  12
  2
  92
  12
  104
  1
  1
  26
  #f
  201/46
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval (app odd? (-> exp <-)) (env (())))\""
  106
  92
  12
  2
  92
  12
  104
  1
  1
  26
  #f
  201/46
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  5
  94
  app
  "\"'(eval (app = (-> (app modulo n 17) <-) 0) (env (())))\""
  110
  96
  12
  2
  96
  12
  108
  1
  1
  27
  #f
  419/96
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  5
  94
  app
  "\"'(eval\n  (match\n   (app odd? exp)\n   (#f)\n   (_\n    (->\n     (app modulo (app * base (app modulo-power base (app - exp 1) n)) n)\n     <-)))\n  (env (())))\""
  123
  109
  12
  2
  109
  12
  121
  1
  1
  30
  #f
  474/109
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  primtest
  0
  94
  let
  "\"'(eval (λ (byte-size iterations) (-> (let (n) ...) <-)) (env (())))\""
  #f)
'(shuffled-cache
  0
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 7) (env (())))\""
  13
  8
  5
  0
  8
  5
  13
  1
  1
  1
  #f
  33/8
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  primtest
  0
  94
  app
  "\"'(eval (λ (x) (-> (app * x x) <-)) (env (())))\""
  #f)
'(shuffled-cache
  0
  primtest
  0
  94
  app
  "\"'(eval\n  (app\n   and\n   (-> (app not (app is-trivial-composite? n)) <-)\n   (app is-fermat-prime? n iterations))\n  (env (())))\""
  #f)
'(shuffled-cache
  0
  primtest
  0
  94
  let*
  "\"'(eval\n  (app or (app <= iterations 0) (-> (let* (byte-size ... a) ...) <-))\n  (env (())))\""
  #f)
'(shuffled-cache
  0
  primtest
  0
  5
  94
  app
  "\"'(eval (app modulo-power base (-> (app / exp 2) <-) n) (env (())))\""
  30
  20
  10
  0
  20
  10
  30
  1
  1
  4
  #f
  21/5
  ((3/2 3/2 0) (3/2 3/2 0) (2 5/2 0)))
'(shuffled-cache
  0
  primtest
  0
  5
  94
  app
  "\"'(eval (app modulo-power base (-> (app - exp 1) <-) n) (env (())))\""
  30
  20
  10
  0
  20
  10
  30
  1
  1
  4
  #f
  21/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  94
  app
  "\"'(eval (app not (-> (app is-trivial-composite? n) <-)) (env (())))\""
  #f)
'(shuffled-cache
  0
  primtest
  0
  5
  94
  app
  "\"'(eval (app / (-> (app log n) <-) (app log 2)) (env (())))\""
  17
  11
  6
  0
  11
  6
  17
  1
  1
  2
  #f
  46/11
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 23) (env (())))\""
  21
  13
  8
  0
  13
  8
  21
  1
  1
  2
  #f
  54/13
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval (app is-fermat-prime? n (-> iterations <-)) (env (())))\""
  25
  17
  8
  0
  17
  8
  25
  1
  1
  2
  #f
  70/17
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  5
  94
  app
  "\"'(eval (app = (-> (app modulo n 5) <-) 0) (env (())))\""
  29
  21
  8
  0
  21
  8
  29
  1
  1
  3
  #f
  29/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  5
  94
  app
  "\"'(eval (app is-fermat-prime? n (-> (app - iterations 1) <-)) (env (())))\""
  33
  25
  8
  0
  25
  8
  33
  1
  1
  4
  #f
  104/25
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  5
  94
  app
  "\"'(eval (app square (-> (app modulo-power base (app / exp 2) n) <-)) (env (())))\""
  100
  84
  14
  2
  84
  14
  98
  1
  1
  22
  #f
  181/42
  ((4 4 0) (4 4 0) (4 9/2 0)))
'(shuffled-cache
  0
  primtest
  0
  5
  94
  app
  "\"'(eval (app = (-> (app modulo n 19) <-) 0) (env (())))\""
  104
  88
  14
  2
  88
  14
  102
  1
  1
  23
  #f
  379/88
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  94
  app
  "\"'(eval\n  (match\n   (app\n    and\n    (app not (app is-trivial-composite? n))\n    (app is-fermat-prime? n iterations))\n   ((#f) (-> (app generate-fermat-prime byte-size iterations) <-))\n   _)\n  (env (())))\""
  #f)
'(shuffled-cache
  0
  primtest
  0
  5
  94
  app
  "\"'(eval (let (... () (n (-> (app random byte-size) <-)) () ...) ...) (env (())))\""
  9
  6
  3
  0
  6
  3
  9
  1
  1
  1
  #f
  25/6
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval (app / (-> exp <-) 2) (env (())))\""
  30
  20
  10
  0
  20
  10
  30
  1
  1
  4
  #f
  21/5
  ((3/2 3/2 0) (1 1 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval (app generate-fermat-prime (-> byte-size <-) iterations) (env (())))\""
  30
  20
  10
  0
  20
  10
  30
  1
  1
  4
  #f
  21/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval (app * x (-> x <-)) (env (())))\""
  47
  34
  12
  1
  34
  12
  46
  1
  1
  8
  #f
  73/17
  ((1/2 1/2 0) (1 1 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 11) (env (())))\""
  51
  36
  14
  1
  36
  14
  50
  1
  1
  8
  #f
  77/18
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval (app is-fermat-prime? (-> n <-) (app - iterations 1)) (env (())))\""
  51
  36
  14
  1
  36
  14
  50
  1
  1
  8
  #f
  77/18
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  5
  94
  app
  "\"'(eval (app = (-> (app modulo n 13) <-) 0) (env (())))\""
  55
  40
  14
  1
  40
  14
  54
  1
  1
  9
  #f
  171/40
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval (app = (-> exp <-) 0) (env (())))\""
  55
  40
  14
  1
  40
  14
  54
  1
  1
  9
  #f
  171/40
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval (app * (-> base <-) (app modulo-power base (app - exp 1) n)) (env (())))\""
  72
  57
  14
  1
  57
  14
  71
  1
  1
  14
  #f
  244/57
  ((1 1 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval (app generate-fermat-prime byte-size (-> iterations <-)) (env (())))\""
  75
  60
  14
  1
  60
  14
  74
  1
  1
  14
  #f
  64/15
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  5
  94
  app
  "\"'(eval\n  (app\n   or\n   (-> (app = (app modulo n 2) 0) <-)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env (())))\""
  82
  67
  14
  1
  67
  14
  81
  1
  1
  16
  #f
  288/67
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  5
  94
  app
  "\"'(eval (app * base (-> (app modulo-power base (app - exp 1) n) <-)) (env (())))\""
  84
  69
  14
  1
  69
  14
  83
  1
  1
  17
  #f
  99/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval (app - (-> exp <-) 1) (env (())))\""
  84
  69
  14
  1
  69
  14
  83
  1
  1
  17
  #f
  99/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  94
  app
  "\"'(eval\n  (letrec*\n   (square ... byte-size)\n   (-> (app generate-fermat-prime byte-size iterations) <-))\n  (env ()))\""
  #f)
'(shuffled-cache
  0
  primtest
  0
  5
  94
  app
  "\"'(eval (app ceiling (-> (app / (app log n) (app log 2)) <-)) (env (())))\""
  22
  16
  6
  0
  16
  6
  22
  1
  1
  4
  #f
  17/4
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  primtest
  0
  5
  94
  app
  "\"'(eval (app modulo-power a (-> (app - n 1) <-) n) (env (())))\""
  26
  20
  6
  0
  20
  6
  26
  1
  1
  5
  #f
  17/4
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  5
  94
  app
  "\"'(eval\n  (app modulo (-> (app square (app modulo-power base (app / exp 2) n)) <-) n)\n  (env (())))\""
  84
  70
  12
  2
  70
  12
  82
  1
  1
  20
  #f
  152/35
  ((4 4 0) (7/2 4 0) (4 4 0)))
'(shuffled-cache
  0
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval (app modulo-power (-> base <-) (app / exp 2) n) (env (())))\""
  84
  70
  12
  2
  70
  12
  82
  1
  1
  20
  #f
  152/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  5
  94
  app
  "\"'(eval\n  (app\n   and\n   (app not (app is-trivial-composite? n))\n   (-> (app is-fermat-prime? n iterations) <-))\n  (env (())))\""
  115
  100
  12
  3
  100
  12
  112
  1
  1
  32
  #f
  9/2
  ((3/2 3/2 0) (2 2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval (app is-trivial-composite? (-> n <-)) (env (())))\""
  116
  101
  12
  3
  101
  12
  113
  1
  1
  32
  #f
  454/101
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  5
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (-> (app = (app modulo n 13) 0) <-)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env (())))\""
  125
  108
  14
  3
  108
  14
  122
  1
  1
  34
  #f
  9/2
  ((1/2 1/2 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  5
  94
  app
  "\"'(eval\n  (match (-> (app = (app modulo-power a (app - n 1) n) 1) <-) (#f) _)\n  (env (())))\""
  125
  108
  14
  3
  108
  14
  122
  1
  1
  34
  #f
  9/2
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval (app random (-> byte-size <-)) (env (())))\""
  125
  108
  14
  3
  108
  14
  122
  1
  1
  34
  #f
  9/2
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  5
  94
  app
  "\"'(eval (app = (-> (app modulo n 7) <-) 0) (env (())))\""
  129
  112
  14
  3
  112
  14
  126
  1
  1
  35
  #f
  503/112
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  5
  94
  app
  "\"'(eval\n  (app or (-> (app <= iterations 0) <-) (let* (byte-size ... a) ...))\n  (env (())))\""
  129
  112
  14
  3
  112
  14
  126
  1
  1
  35
  #f
  503/112
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 19) (env (())))\""
  130
  113
  14
  3
  113
  14
  127
  1
  1
  35
  #f
  507/113
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  5
  94
  app
  "\"'(eval\n  (app modulo (-> (app * base (app modulo-power base (app - exp 1) n)) <-) n)\n  (env (())))\""
  130
  113
  14
  3
  113
  14
  127
  1
  1
  35
  #f
  507/113
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  5
  94
  app
  "\"'(eval\n  (let* (...\n         ()\n         (byte-size (-> (app ceiling (app / (app log n) (app log 2))) <-))\n         a\n         ...)\n    ...)\n  (env (())))\""
  130
  113
  14
  3
  113
  14
  127
  1
  1
  35
  #f
  507/113
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval\n  (app modulo (app square (app modulo-power base (app / exp 2) n)) (-> n <-))\n  (env (())))\""
  130
  113
  14
  3
  113
  14
  127
  1
  1
  35
  #f
  507/113
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval (app modulo-power (-> base <-) (app - exp 1) n) (env (())))\""
  130
  113
  14
  3
  113
  14
  127
  1
  1
  35
  #f
  507/113
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval (app - (-> iterations <-) 1) (env (())))\""
  130
  113
  14
  3
  113
  14
  127
  1
  1
  35
  #f
  507/113
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 3) (env (())))\""
  131
  114
  14
  3
  114
  14
  128
  1
  1
  35
  #f
  511/114
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  94
  app
  "\"'(eval\n  (match\n   (->\n    (app\n     and\n     (app not (app is-trivial-composite? n))\n     (app is-fermat-prime? n iterations))\n    <-)\n   (#f)\n   _)\n  (env (())))\""
  #f)
'(shuffled-cache
  0
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval (app random (-> byte-size <-)) (env (())))\""
  25
  19
  6
  0
  19
  6
  25
  1
  1
  5
  #f
  81/19
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  primtest
  0
  94
  app
  "\"'(eval\n  (match\n   (app = (app modulo-power a (app - n 1) n) 1)\n   (#f)\n   (_ (-> (app is-fermat-prime? n (app - iterations 1)) <-)))\n  (env (())))\""
  #f)
'(shuffled-cache
  0
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval (app <= (-> iterations <-) 0) (env (())))\""
  15
  9
  6
  0
  9
  6
  15
  1
  1
  1
  #f
  37/9
  ((1 1 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval\n  (match\n   (app\n    and\n    (app not (app is-trivial-composite? n))\n    (app is-fermat-prime? n iterations))\n   (#f)\n   (_ (-> n <-)))\n  (env (())))\""
  22
  16
  6
  0
  16
  6
  22
  1
  1
  2
  #f
  33/8
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  5
  94
  app
  "\"'(eval\n  (match\n   (app odd? exp)\n   ((#f)\n    (->\n     (app modulo (app square (app modulo-power base (app / exp 2) n)) n)\n     <-))\n   _)\n  (env (())))\""
  94
  80
  12
  2
  80
  12
  92
  1
  1
  21
  #f
  69/16
  ((4 9/2 0) (9/2 9/2 0) (9/2 5 0)))
'(shuffled-cache
  0
  primtest
  0
  5
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (-> (app = (app modulo n 5) 0) <-)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env (())))\""
  104
  88
  14
  2
  88
  14
  102
  1
  1
  23
  #f
  381/88
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  94
  letrec*
  "\"'(eval ((top) letrec* (square ... byte-size) ...) (env ()))\""
  #f)
'(shuffled-cache
  0
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval (app - (-> n <-) 1) (env (())))\""
  15
  9
  6
  0
  9
  6
  15
  1
  1
  1
  #f
  37/9
  ((1/2 1/2 0) (1/2 1 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  primtest
  0
  5
  94
  app
  "\"'(eval (app / (app log n) (-> (app log 2) <-)) (env (())))\""
  18
  12
  6
  0
  12
  6
  18
  1
  1
  2
  #f
  25/6
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval (app modulo-power base (app / exp 2) (-> n <-)) (env (())))\""
  25
  15
  10
  0
  15
  10
  25
  1
  1
  2
  #f
  62/15
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  primtest
  0
  94
  app
  "\"'(eval\n  (λ (n)\n    (->\n     (app\n      or\n      (app = (app modulo n 2) 0)\n      (app = (app modulo n 3) 0)\n      (app = (app modulo n 5) 0)\n      (app = (app modulo n 7) 0)\n      (app = (app modulo n 11) 0)\n      (app = (app modulo n 13) 0)\n      (app = (app modulo n 17) 0)\n      (app = (app modulo n 19) 0)\n      (app = (app modulo n 23) 0))\n     <-))\n  (env (())))\""
  #f)
'(shuffled-cache
  0
  primtest
  0
  5
  94
  app
  "\"'(eval\n  (let* (... byte-size (a (-> (app random byte-size) <-)) () ...) ...)\n  (env (())))\""
  27
  21
  6
  0
  21
  6
  27
  1
  1
  6
  #f
  30/7
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  primtest
  0
  5
  94
  app
  "\"'(eval (app = (-> (app modulo n 11) <-) 0) (env (())))\""
  34
  26
  8
  0
  26
  8
  34
  1
  1
  7
  #f
  111/26
  ((0 0 0) (1/2 1/2 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  5
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (-> (app = (app modulo n 7) 0) <-)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env (())))\""
  41
  33
  8
  0
  33
  8
  41
  1
  1
  9
  #f
  13/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 2) (env (())))\""
  42
  34
  8
  0
  34
  8
  42
  1
  1
  9
  #f
  147/34
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval\n  (app modulo (app * base (app modulo-power base (app - exp 1) n)) (-> n <-))\n  (env (())))\""
  50
  38
  12
  0
  38
  12
  50
  1
  1
  9
  #f
  163/38
  ((1 1 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  primtest
  0
  5
  94
  app
  "\"'(eval\n  (match\n   (app = (app modulo-power a (app - n 1) n) 1)\n   ((#f) (-> (app #f) <-))\n   _)\n  (env (())))\""
  52
  40
  12
  0
  40
  12
  52
  1
  1
  11
  #t
  173/40
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  5
  94
  app
  "\"'(eval (match (-> (app odd? exp) <-) (#f) _) (env (())))\""
  67
  55
  12
  0
  55
  12
  67
  1
  1
  15
  #f
  239/55
  ((1 1 0) (1 1 0) (1/2 1 0)))
'(shuffled-cache
  0
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval (app modulo-power a (app - n 1) (-> n <-)) (env (())))\""
  67
  55
  12
  0
  55
  12
  67
  1
  1
  15
  #f
  239/55
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  5
  94
  app
  "\"'(eval (app = (-> (app modulo n 23) <-) 0) (env (())))\""
  71
  59
  12
  0
  59
  12
  71
  1
  1
  16
  #f
  256/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  5
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (-> (app = (app modulo n 17) 0) <-)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env (())))\""
  78
  66
  12
  0
  66
  12
  78
  1
  1
  18
  #f
  48/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval (app modulo-power base (app - exp 1) (-> n <-)) (env (())))\""
  78
  66
  12
  0
  66
  12
  78
  1
  1
  18
  #f
  48/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval (app is-fermat-prime? (-> n <-) iterations) (env (())))\""
  78
  66
  12
  0
  66
  12
  78
  1
  1
  18
  #f
  48/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 5) (env (())))\""
  79
  67
  12
  0
  67
  12
  79
  1
  1
  18
  #f
  292/67
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  94
  match
  "\"'(eval\n  (let (n)\n    (->\n     (match\n      (app\n       and\n       (app not (app is-trivial-composite? n))\n       (app is-fermat-prime? n iterations))\n      ...)\n     <-))\n  (env (())))\""
  #f)
'(shuffled-cache
  0
  primtest
  0
  5
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (-> (app = (app modulo n 23) 0) <-))\n  (env (())))\""
  19
  14
  5
  0
  14
  5
  19
  1
  1
  3
  #f
  61/14
  ((1/2 1/2 0) (1 1 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 13) (env (())))\""
  20
  15
  5
  0
  15
  5
  20
  1
  1
  3
  #f
  13/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 17) (env (())))\""
  21
  16
  5
  0
  16
  5
  21
  1
  1
  3
  #f
  69/16
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  94
  ref-or-constructor
  "\"'(eval (app * (-> x <-) x) (env (())))\""
  #f)
'(shuffled-cache
  0
  primtest
  0
  5
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (-> (app = (app modulo n 3) 0) <-)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env (())))\""
  103
  87
  14
  2
  87
  14
  101
  1
  1
  24
  #f
  380/87
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  5
  94
  app
  "\"'(eval (app = (-> (app modulo n 11) <-) 0) (env (())))\""
  16
  11
  5
  0
  11
  5
  16
  1
  1
  2
  #f
  46/11
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  primtest
  0
  94
  app
  "\"'(eval (λ (x) (-> (app * x x) <-)) (env (())))\""
  #f)
'(shuffled-cache
  1
  primtest
  0
  5
  94
  app
  "\"'(eval (app = (-> (app modulo n 17) <-) 0) (env (())))\""
  95
  79
  14
  2
  79
  14
  93
  1
  1
  22
  #f
  342/79
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval (app modulo-power (-> base <-) (app / exp 2) n) (env (())))\""
  95
  79
  14
  2
  79
  14
  93
  1
  1
  22
  #f
  342/79
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  5
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (-> (app = (app modulo n 11) 0) <-)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env (())))\""
  98
  82
  14
  2
  82
  14
  96
  1
  1
  23
  #f
  357/82
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  5
  94
  app
  "\"'(eval (app ceiling (-> (app / (app log n) (app log 2)) <-)) (env (())))\""
  98
  82
  14
  2
  82
  14
  96
  1
  1
  23
  #f
  357/82
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 11) (env (())))\""
  98
  82
  14
  2
  82
  14
  96
  1
  1
  23
  #f
  357/82
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  5
  94
  app
  "\"'(eval\n  (app modulo (-> (app square (app modulo-power base (app / exp 2) n)) <-) n)\n  (env (())))\""
  98
  82
  14
  2
  82
  14
  96
  1
  1
  23
  #f
  357/82
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval (app modulo-power (-> a <-) (app - n 1) n) (env (())))\""
  98
  82
  14
  2
  82
  14
  96
  1
  1
  23
  #f
  357/82
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  5
  94
  app
  "\"'(eval\n  (match\n   (app odd? exp)\n   ((#f)\n    (->\n     (app modulo (app square (app modulo-power base (app / exp 2) n)) n)\n     <-))\n   _)\n  (env (())))\""
  98
  82
  14
  2
  82
  14
  96
  1
  1
  23
  #f
  357/82
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval (app random (-> byte-size <-)) (env (())))\""
  98
  82
  14
  2
  82
  14
  96
  1
  1
  23
  #f
  357/82
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  5
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (-> (app = (app modulo n 23) 0) <-))\n  (env (())))\""
  105
  89
  14
  2
  89
  14
  103
  1
  1
  25
  #f
  389/89
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  94
  app
  "\"'(eval\n  (app\n   and\n   (-> (app not (app is-trivial-composite? n)) <-)\n   (app is-fermat-prime? n iterations))\n  (env (())))\""
  #f)
'(shuffled-cache
  1
  primtest
  0
  5
  94
  app
  "\"'(eval (app is-fermat-prime? n (-> (app - iterations 1) <-)) (env (())))\""
  14
  8
  6
  0
  8
  6
  14
  1
  1
  1
  #f
  33/8
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval (app - (-> iterations <-) 1) (env (())))\""
  14
  8
  6
  0
  8
  6
  14
  1
  1
  1
  #f
  33/8
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  94
  match
  "\"'(eval\n  (match (app = exp 0) ((#f) (-> (match (app odd? exp) ...) <-)) _)\n  (env (())))\""
  #f)
'(shuffled-cache
  1
  primtest
  0
  5
  94
  app
  "\"'(eval (app = (-> (app modulo n 13) <-) 0) (env (())))\""
  99
  83
  14
  2
  83
  14
  97
  1
  1
  22
  #f
  358/83
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  5
  94
  app
  "\"'(eval (app = (-> (app modulo-power a (app - n 1) n) <-) 1) (env (())))\""
  101
  85
  14
  2
  85
  14
  99
  1
  1
  23
  #f
  367/85
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  5
  94
  app
  "\"'(eval (app * base (-> (app modulo-power base (app - exp 1) n) <-)) (env (())))\""
  101
  85
  14
  2
  85
  14
  99
  1
  1
  23
  #f
  367/85
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  5
  94
  app
  "\"'(eval\n  (app\n   and\n   (app not (app is-trivial-composite? n))\n   (-> (app is-fermat-prime? n iterations) <-))\n  (env (())))\""
  122
  105
  14
  3
  105
  14
  119
  1
  1
  33
  #f
  157/35
  ((1/2 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval (app log (-> n <-)) (env (())))\""
  122
  105
  14
  3
  105
  14
  119
  1
  1
  33
  #f
  157/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  5
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (-> (app = (app modulo n 5) 0) <-)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env (())))\""
  129
  112
  14
  3
  112
  14
  126
  1
  1
  35
  #f
  503/112
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  5
  94
  match
  "\"'(eval\n  (let* (byte-size ... a)\n    (-> (match (app = (app modulo-power a (app - n 1) n) 1) ...) <-))\n  (env (())))\""
  129
  112
  14
  3
  112
  14
  126
  1
  1
  35
  #f
  503/112
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval (app generate-fermat-prime (-> byte-size <-) iterations) (env (())))\""
  129
  112
  14
  3
  112
  14
  126
  1
  1
  35
  #f
  503/112
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval (app is-fermat-prime? n (-> iterations <-)) (env (())))\""
  129
  112
  14
  3
  112
  14
  126
  1
  1
  35
  #f
  503/112
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval (app generate-fermat-prime byte-size (-> iterations <-)) (env (())))\""
  129
  112
  14
  3
  112
  14
  126
  1
  1
  35
  #f
  503/112
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval\n  (app modulo (app square (app modulo-power base (app / exp 2) n)) (-> n <-))\n  (env (())))\""
  129
  112
  14
  3
  112
  14
  126
  1
  1
  35
  #f
  503/112
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval (app - (-> n <-) 1) (env (())))\""
  129
  112
  14
  3
  112
  14
  126
  1
  1
  35
  #f
  503/112
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  5
  94
  app
  "\"'(eval\n  (match\n   (app odd? exp)\n   (#f)\n   (_\n    (->\n     (app modulo (app * base (app modulo-power base (app - exp 1) n)) n)\n     <-)))\n  (env (())))\""
  129
  112
  14
  3
  112
  14
  126
  1
  1
  35
  #f
  503/112
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  5
  94
  app
  "\"'(eval (app = (-> (app modulo n 5) <-) 0) (env (())))\""
  129
  112
  14
  3
  112
  14
  126
  1
  1
  35
  #f
  503/112
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  5
  94
  app
  "\"'(eval (match (-> (app odd? exp) <-) (#f) _) (env (())))\""
  129
  112
  14
  3
  112
  14
  126
  1
  1
  35
  #f
  503/112
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  5
  94
  app
  "\"'(eval (app modulo-power base (-> (app / exp 2) <-) n) (env (())))\""
  129
  112
  14
  3
  112
  14
  126
  1
  1
  35
  #f
  503/112
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  94
  app
  "\"'(eval (app not (-> (app is-trivial-composite? n) <-)) (env (())))\""
  #f)
'(shuffled-cache
  1
  primtest
  0
  5
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (-> (app = (app modulo n 3) 0) <-)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env (())))\""
  19
  14
  5
  0
  14
  5
  19
  1
  1
  3
  #f
  61/14
  ((1/2 1/2 0) (1 1 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 19) (env (())))\""
  20
  15
  5
  0
  15
  5
  20
  1
  1
  3
  #f
  13/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  94
  app
  "\"'(eval\n  (match\n   (->\n    (app\n     and\n     (app not (app is-trivial-composite? n))\n     (app is-fermat-prime? n iterations))\n    <-)\n   (#f)\n   _)\n  (env (())))\""
  #f)
'(shuffled-cache
  1
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval (app <= (-> iterations <-) 0) (env (())))\""
  15
  9
  6
  0
  9
  6
  15
  1
  1
  1
  #f
  37/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  primtest
  0
  5
  94
  app
  "\"'(eval (app = (-> (app modulo n 23) <-) 0) (env (())))\""
  28
  20
  8
  0
  20
  8
  28
  1
  1
  3
  #f
  83/20
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  primtest
  0
  5
  94
  app
  "\"'(eval (let (... () (n (-> (app random byte-size) <-)) () ...) ...) (env (())))\""
  28
  20
  8
  0
  20
  8
  28
  1
  1
  3
  #f
  83/20
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval (app - (-> exp <-) 1) (env (())))\""
  46
  34
  12
  0
  34
  12
  46
  1
  1
  6
  #f
  71/17
  ((3/2 3/2 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 23) (env (())))\""
  46
  34
  12
  0
  34
  12
  46
  1
  1
  6
  #f
  71/17
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval (app * (-> base <-) (app modulo-power base (app - exp 1) n)) (env (())))\""
  63
  51
  12
  0
  51
  12
  63
  1
  1
  11
  #f
  215/51
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1 0)))
'(shuffled-cache
  1
  primtest
  0
  5
  94
  app
  "\"'(eval (app = (-> (app modulo n 2) <-) 0) (env (())))\""
  67
  55
  12
  0
  55
  12
  67
  1
  1
  12
  #f
  232/55
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval (app modulo-power base (app / exp 2) (-> n <-)) (env (())))\""
  70
  58
  12
  0
  58
  12
  70
  1
  1
  12
  #f
  122/29
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  94
  app
  "\"'(eval\n  (match\n   (app\n    and\n    (app not (app is-trivial-composite? n))\n    (app is-fermat-prime? n iterations))\n   ((#f) (-> (app generate-fermat-prime byte-size iterations) <-))\n   _)\n  (env (())))\""
  #f)
'(shuffled-cache
  1
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 7) (env (())))\""
  13
  8
  5
  0
  8
  5
  13
  1
  1
  1
  #f
  33/8
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  primtest
  0
  94
  let
  "\"'(eval (λ (byte-size iterations) (-> (let (n) ...) <-)) (env (())))\""
  #f)
'(shuffled-cache
  1
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval (app is-fermat-prime? (-> n <-) (app - iterations 1)) (env (())))\""
  14
  8
  6
  0
  8
  6
  14
  1
  1
  1
  #f
  33/8
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  primtest
  0
  5
  94
  app
  "\"'(eval (match (-> (app = exp 0) <-) (#f) _) (env (())))\""
  34
  24
  10
  0
  24
  10
  34
  1
  1
  5
  #f
  103/24
  ((1 1 0) (3/2 3/2 0) (1 1 0)))
'(shuffled-cache
  1
  primtest
  0
  5
  94
  app
  "\"'(eval\n  (app or (-> (app <= iterations 0) <-) (let* (byte-size ... a) ...))\n  (env (())))\""
  46
  36
  10
  0
  36
  10
  46
  1
  1
  7
  #f
  155/36
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  primtest
  0
  5
  94
  app
  "\"'(eval\n  (let* (...\n         ()\n         (byte-size (-> (app ceiling (app / (app log n) (app log 2))) <-))\n         a\n         ...)\n    ...)\n  (env (())))\""
  56
  46
  10
  0
  46
  10
  56
  1
  1
  11
  #f
  199/46
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  5
  94
  app
  "\"'(eval\n  (match\n   (app = (app modulo-power a (app - n 1) n) 1)\n   ((#f) (-> (app #f) <-))\n   _)\n  (env (())))\""
  58
  48
  10
  0
  48
  10
  58
  1
  1
  13
  #t
  209/48
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval (app * x (-> x <-)) (env (())))\""
  71
  58
  12
  1
  58
  12
  70
  1
  1
  16
  #f
  126/29
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  primtest
  0
  5
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (-> (app = (app modulo n 17) 0) <-)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env (())))\""
  81
  66
  14
  1
  66
  14
  80
  1
  1
  18
  #f
  48/11
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  primtest
  0
  5
  94
  app
  "\"'(eval (app = (-> (app modulo n 19) <-) 0) (env (())))\""
  85
  70
  14
  1
  70
  14
  84
  1
  1
  19
  #f
  61/14
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval (app * (-> x <-) x) (env (())))\""
  86
  71
  14
  1
  71
  14
  85
  1
  1
  19
  #f
  309/71
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  5
  94
  app
  "\"'(eval (app = (-> (app modulo n 7) <-) 0) (env (())))\""
  90
  75
  14
  1
  75
  14
  89
  1
  1
  20
  #f
  326/75
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  5
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (-> (app = (app modulo n 7) 0) <-)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env (())))\""
  93
  78
  14
  1
  78
  14
  92
  1
  1
  21
  #f
  341/78
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  5
  94
  app
  "\"'(eval\n  (match\n   (app = (app modulo-power a (app - n 1) n) 1)\n   (#f)\n   (_ (-> (app is-fermat-prime? n (app - iterations 1)) <-)))\n  (env (())))\""
  106
  90
  14
  2
  90
  14
  104
  1
  1
  27
  #f
  79/18
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  primtest
  0
  5
  94
  app
  "\"'(eval (app modulo-power a (-> (app - n 1) <-) n) (env (())))\""
  106
  90
  14
  2
  90
  14
  104
  1
  1
  27
  #f
  79/18
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval (app / (-> exp <-) 2) (env (())))\""
  106
  90
  14
  2
  90
  14
  104
  1
  1
  27
  #f
  79/18
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval\n  (match\n   (app\n    and\n    (app not (app is-trivial-composite? n))\n    (app is-fermat-prime? n iterations))\n   (#f)\n   (_ (-> n <-)))\n  (env (())))\""
  107
  91
  14
  2
  91
  14
  105
  1
  1
  27
  #f
  57/13
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  5
  94
  app
  "\"'(eval (app / (app log n) (-> (app log 2) <-)) (env (())))\""
  107
  91
  14
  2
  91
  14
  105
  1
  1
  27
  #f
  57/13
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  94
  app
  "\"'(eval\n  (letrec*\n   (square ... byte-size)\n   (-> (app generate-fermat-prime byte-size iterations) <-))\n  (env ()))\""
  #f)
'(shuffled-cache
  1
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval (app modulo-power (-> base <-) (app - exp 1) n) (env (())))\""
  34
  24
  10
  0
  24
  10
  34
  1
  1
  6
  #f
  17/4
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 2 0)))
'(shuffled-cache
  1
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval (app modulo-power a (app - n 1) (-> n <-)) (env (())))\""
  35
  25
  10
  0
  25
  10
  35
  1
  1
  6
  #f
  106/25
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  5
  94
  app
  "\"'(eval (app / (-> (app log n) <-) (app log 2)) (env (())))\""
  35
  25
  10
  0
  25
  10
  35
  1
  1
  6
  #f
  106/25
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 5) (env (())))\""
  39
  27
  12
  0
  27
  12
  39
  1
  1
  6
  #f
  38/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  5
  94
  app
  "\"'(eval\n  (let* (... byte-size (a (-> (app random byte-size) <-)) () ...) ...)\n  (env (())))\""
  39
  27
  12
  0
  27
  12
  39
  1
  1
  6
  #f
  38/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  5
  94
  app
  "\"'(eval (app square (-> (app modulo-power base (app / exp 2) n) <-)) (env (())))\""
  88
  72
  14
  2
  72
  14
  86
  1
  1
  20
  #f
  13/3
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  1
  primtest
  0
  5
  94
  app
  "\"'(eval\n  (app\n   or\n   (-> (app = (app modulo n 2) 0) <-)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env (())))\""
  95
  79
  14
  2
  79
  14
  93
  1
  1
  22
  #f
  344/79
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  94
  match
  "\"'(eval\n  (let (n)\n    (->\n     (match\n      (app\n       and\n       (app not (app is-trivial-composite? n))\n       (app is-fermat-prime? n iterations))\n      ...)\n     <-))\n  (env (())))\""
  #f)
'(shuffled-cache
  1
  primtest
  0
  5
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (-> (app = (app modulo n 13) 0) <-)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env (())))\""
  19
  14
  5
  0
  14
  5
  19
  1
  1
  3
  #f
  61/14
  ((1/2 1/2 0) (1/2 1/2 0) (1 1 0)))
'(shuffled-cache
  1
  primtest
  0
  94
  letrec*
  "\"'(eval ((top) letrec* (square ... byte-size) ...) (env ()))\""
  #f)
'(shuffled-cache
  1
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 2) (env (())))\""
  13
  8
  5
  0
  8
  5
  13
  1
  1
  1
  #f
  33/8
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval (app is-fermat-prime? (-> n <-) iterations) (env (())))\""
  14
  9
  5
  0
  9
  5
  14
  1
  1
  1
  #f
  37/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 17) (env (())))\""
  15
  10
  5
  0
  10
  5
  15
  1
  1
  1
  #f
  41/10
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval (app = (-> exp <-) 0) (env (())))\""
  36
  24
  12
  0
  24
  12
  36
  1
  1
  4
  #f
  25/6
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  primtest
  0
  5
  94
  app
  "\"'(eval (app = (-> (app modulo n 3) <-) 0) (env (())))\""
  40
  28
  12
  0
  28
  12
  40
  1
  1
  5
  #f
  117/28
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval\n  (app modulo (app * base (app modulo-power base (app - exp 1) n)) (-> n <-))\n  (env (())))\""
  44
  32
  12
  0
  32
  12
  44
  1
  1
  5
  #f
  133/32
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 13) (env (())))\""
  45
  33
  12
  0
  33
  12
  45
  1
  1
  5
  #f
  137/33
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  5
  94
  app
  "\"'(eval\n  (λ (n iterations)\n    (-> (app or (app <= iterations 0) (let* (byte-size ... a) ...)) <-))\n  (env (())))\""
  81
  67
  12
  2
  67
  12
  79
  1
  1
  16
  #f
  288/67
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval (app odd? (-> exp <-)) (env (())))\""
  81
  67
  12
  2
  67
  12
  79
  1
  1
  16
  #f
  288/67
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 3) (env (())))\""
  81
  67
  12
  2
  67
  12
  79
  1
  1
  16
  #f
  288/67
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  5
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (-> (app = (app modulo n 19) 0) <-)\n   (app = (app modulo n 23) 0))\n  (env (())))\""
  88
  74
  12
  2
  74
  12
  86
  1
  1
  18
  #f
  160/37
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  5
  94
  app
  "\"'(eval (app modulo-power base (-> (app - exp 1) <-) n) (env (())))\""
  88
  74
  12
  2
  74
  12
  86
  1
  1
  18
  #f
  160/37
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval (app modulo-power base (app - exp 1) (-> n <-)) (env (())))\""
  88
  74
  12
  2
  74
  12
  86
  1
  1
  18
  #f
  160/37
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval (app random (-> byte-size <-)) (env (())))\""
  88
  74
  12
  2
  74
  12
  86
  1
  1
  18
  #f
  160/37
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  5
  94
  ref-or-constructor
  "\"'(eval (app is-trivial-composite? (-> n <-)) (env (())))\""
  88
  74
  12
  2
  74
  12
  86
  1
  1
  18
  #f
  160/37
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  5
  94
  let*
  "\"'(eval\n  (app or (app <= iterations 0) (-> (let* (byte-size ... a) ...) <-))\n  (env (())))\""
  88
  74
  12
  2
  74
  12
  86
  1
  1
  18
  #f
  160/37
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  5
  94
  match
  "\"'(eval (λ (base exp n) (-> (match (app = exp 0) ...) <-)) (env (())))\""
  88
  74
  12
  2
  74
  12
  86
  1
  1
  18
  #f
  160/37
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  5
  94
  app
  "\"'(eval\n  (match (-> (app = (app modulo-power a (app - n 1) n) 1) <-) (#f) _)\n  (env (())))\""
  88
  74
  12
  2
  74
  12
  86
  1
  1
  18
  #t
  160/37
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  94
  app
  "\"'(eval\n  (λ (n)\n    (->\n     (app\n      or\n      (app = (app modulo n 2) 0)\n      (app = (app modulo n 3) 0)\n      (app = (app modulo n 5) 0)\n      (app = (app modulo n 7) 0)\n      (app = (app modulo n 11) 0)\n      (app = (app modulo n 13) 0)\n      (app = (app modulo n 17) 0)\n      (app = (app modulo n 19) 0)\n      (app = (app modulo n 23) 0))\n     <-))\n  (env (())))\""
  #f)
'(shuffled-cache
  1
  primtest
  0
  5
  94
  app
  "\"'(eval\n  (app modulo (-> (app * base (app modulo-power base (app - exp 1) n)) <-) n)\n  (env (())))\""
  84
  70
  12
  2
  70
  12
  82
  1
  1
  20
  #f
  152/35
  ((9/2 9/2 0) (9/2 5 0) (9/2 9/2 0)))
