'(clean-cache
  primtest
  0
  15
  94
  letrec*
  "\"'(eval ((top) letrec* (square ... byte-size) ...) (env ()))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((10 10 0) (10 10 0) (10 10 0)))
'(clean-cache
  primtest
  0
  15
  94
  let
  "\"'(eval (λ (byte-size iterations) (-> (let (n) ...) <-)) (env (())))\""
  198
  179
  14
  5
  179
  14
  193
  1
  1
  92
  #f
  280/179
  ((10 10 0) (10 10 0) (21/2 21/2 0)))
'(clean-cache
  primtest
  0
  15
  94
  app
  "\"'(eval (let (... () (n (-> (app random byte-size) <-)) () ...) ...) (env (())))\""
  9
  6
  3
  0
  6
  3
  9
  1
  1
  5
  #f
  7/6
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval (app random (-> byte-size <-)) (env (())))\""
  7
  4
  3
  0
  4
  3
  7
  1
  1
  4
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  primtest
  0
  15
  94
  match
  "\"'(eval\n  (let (n)\n    (->\n     (match\n      (app\n       and\n       (app not (app is-trivial-composite? n))\n       (app is-fermat-prime? n iterations))\n      ...)\n     <-))\n  (env (())))\""
  198
  179
  14
  5
  179
  14
  193
  1
  1
  92
  #f
  280/179
  ((21/2 21/2 0) (21/2 21/2 0) (10 10 0)))
'(clean-cache
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval\n  (match\n   (app\n    and\n    (app not (app is-trivial-composite? n))\n    (app is-fermat-prime? n iterations))\n   (#f)\n   (_ (-> n <-)))\n  (env (())))\""
  10
  7
  3
  0
  7
  3
  10
  1
  1
  5
  #f
  9/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  primtest
  0
  15
  94
  app
  "\"'(eval\n  (match\n   (app\n    and\n    (app not (app is-trivial-composite? n))\n    (app is-fermat-prime? n iterations))\n   ((#f) (-> (app generate-fermat-prime byte-size iterations) <-))\n   _)\n  (env (())))\""
  198
  179
  14
  5
  179
  14
  193
  1
  1
  92
  #f
  280/179
  ((10 10 0) (10 10 0) (10 10 0)))
'(clean-cache
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval (app generate-fermat-prime byte-size (-> iterations <-)) (env (())))\""
  6
  3
  3
  0
  3
  3
  6
  1
  1
  3
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval (app generate-fermat-prime (-> byte-size <-) iterations) (env (())))\""
  6
  3
  3
  0
  3
  3
  6
  1
  1
  3
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  primtest
  0
  15
  94
  app
  "\"'(eval\n  (match\n   (->\n    (app\n     and\n     (app not (app is-trivial-composite? n))\n     (app is-fermat-prime? n iterations))\n    <-)\n   (#f)\n   _)\n  (env (())))\""
  191
  173
  14
  4
  173
  14
  187
  1
  1
  90
  #f
  270/173
  ((10 10 0) (10 10 0) (10 10 0)))
'(clean-cache
  primtest
  0
  15
  94
  app
  "\"'(eval\n  (app\n   and\n   (app not (app is-trivial-composite? n))\n   (-> (app is-fermat-prime? n iterations) <-))\n  (env (())))\""
  115
  100
  12
  3
  100
  12
  112
  1
  1
  49
  #f
  33/20
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval (app is-fermat-prime? n (-> iterations <-)) (env (())))\""
  7
  4
  3
  0
  4
  3
  7
  1
  1
  4
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval (app is-fermat-prime? (-> n <-) iterations) (env (())))\""
  10
  7
  3
  0
  7
  3
  10
  1
  1
  5
  #f
  9/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  primtest
  0
  15
  94
  app
  "\"'(eval\n  (app\n   and\n   (-> (app not (app is-trivial-composite? n)) <-)\n   (app is-fermat-prime? n iterations))\n  (env (())))\""
  85
  79
  5
  1
  79
  5
  84
  1
  1
  47
  #f
  111/79
  ((15/2 15/2 0) (15/2 15/2 0) (15/2 15/2 0)))
'(clean-cache
  primtest
  0
  15
  94
  app
  "\"'(eval (app not (-> (app is-trivial-composite? n) <-)) (env (())))\""
  83
  77
  5
  1
  77
  5
  82
  1
  1
  46
  #f
  108/77
  ((15/2 15/2 0) (15/2 15/2 0) (15/2 15/2 0)))
'(clean-cache
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval (app is-trivial-composite? (-> n <-)) (env (())))\""
  10
  7
  3
  0
  7
  3
  10
  1
  1
  5
  #f
  9/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  primtest
  0
  15
  94
  app
  "\"'(eval\n  (λ (n iterations)\n    (-> (app or (app <= iterations 0) (let* (byte-size ... a) ...)) <-))\n  (env (())))\""
  113
  98
  12
  3
  98
  12
  110
  1
  1
  48
  #f
  81/49
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  primtest
  0
  15
  94
  let*
  "\"'(eval\n  (app or (app <= iterations 0) (-> (let* (byte-size ... a) ...) <-))\n  (env (())))\""
  113
  98
  12
  3
  98
  12
  110
  1
  1
  48
  #f
  81/49
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  primtest
  0
  15
  94
  app
  "\"'(eval\n  (let* (... byte-size (a (-> (app random byte-size) <-)) () ...) ...)\n  (env (())))\""
  27
  21
  6
  0
  21
  6
  27
  1
  1
  11
  #f
  11/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval (app random (-> byte-size <-)) (env (())))\""
  25
  19
  6
  0
  19
  6
  25
  1
  1
  10
  #f
  30/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  primtest
  0
  15
  94
  app
  "\"'(eval\n  (let* (...\n         ()\n         (byte-size (-> (app ceiling (app / (app log n) (app log 2))) <-))\n         a\n         ...)\n    ...)\n  (env (())))\""
  24
  18
  6
  0
  18
  6
  24
  1
  1
  10
  #f
  14/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  primtest
  0
  15
  94
  app
  "\"'(eval (app ceiling (-> (app / (app log n) (app log 2)) <-)) (env (())))\""
  22
  16
  6
  0
  16
  6
  22
  1
  1
  9
  #f
  25/16
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  primtest
  0
  15
  94
  app
  "\"'(eval (app / (app log n) (-> (app log 2) <-)) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  2
  #f
  4/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  primtest
  0
  15
  94
  app
  "\"'(eval (app / (-> (app log n) <-) (app log 2)) (env (())))\""
  17
  11
  6
  0
  11
  6
  17
  1
  1
  6
  #f
  16/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval (app log (-> n <-)) (env (())))\""
  15
  9
  6
  0
  9
  6
  15
  1
  1
  5
  #f
  13/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  primtest
  0
  15
  94
  match
  "\"'(eval\n  (let* (byte-size ... a)\n    (-> (match (app = (app modulo-power a (app - n 1) n) 1) ...) <-))\n  (env (())))\""
  113
  98
  12
  3
  98
  12
  110
  1
  1
  48
  #f
  81/49
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  primtest
  0
  15
  94
  app
  "\"'(eval\n  (match\n   (app = (app modulo-power a (app - n 1) n) 1)\n   (#f)\n   (_ (-> (app is-fermat-prime? n (app - iterations 1)) <-)))\n  (env (())))\""
  113
  98
  12
  3
  98
  12
  110
  1
  1
  48
  #f
  81/49
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  primtest
  0
  15
  94
  app
  "\"'(eval (app is-fermat-prime? n (-> (app - iterations 1) <-)) (env (())))\""
  14
  8
  6
  0
  8
  6
  14
  1
  1
  6
  #f
  5/4
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval (app - (-> iterations <-) 1) (env (())))\""
  14
  8
  6
  0
  8
  6
  14
  1
  1
  6
  #f
  5/4
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval (app is-fermat-prime? (-> n <-) (app - iterations 1)) (env (())))\""
  14
  8
  6
  0
  8
  6
  14
  1
  1
  5
  #f
  11/8
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  primtest
  0
  15
  94
  app
  "\"'(eval\n  (match\n   (app = (app modulo-power a (app - n 1) n) 1)\n   ((#f) (-> (app #f) <-))\n   _)\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  primtest
  0
  15
  94
  app
  "\"'(eval\n  (match (-> (app = (app modulo-power a (app - n 1) n) 1) <-) (#f) _)\n  (env (())))\""
  89
  75
  12
  2
  75
  12
  87
  1
  1
  33
  #f
  131/75
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  primtest
  0
  15
  94
  app
  "\"'(eval (app = (-> (app modulo-power a (app - n 1) n) <-) 1) (env (())))\""
  86
  72
  12
  2
  72
  12
  84
  1
  1
  31
  #f
  127/72
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval (app modulo-power a (app - n 1) (-> n <-)) (env (())))\""
  15
  9
  6
  0
  9
  6
  15
  1
  1
  5
  #f
  13/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  primtest
  0
  15
  94
  app
  "\"'(eval (app modulo-power a (-> (app - n 1) <-) n) (env (())))\""
  18
  12
  6
  0
  12
  6
  18
  1
  1
  7
  #f
  17/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval (app - (-> n <-) 1) (env (())))\""
  15
  9
  6
  0
  9
  6
  15
  1
  1
  5
  #f
  13/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval (app modulo-power (-> a <-) (app - n 1) n) (env (())))\""
  28
  22
  6
  0
  22
  6
  28
  1
  1
  11
  #f
  35/22
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  primtest
  0
  15
  94
  app
  "\"'(eval\n  (app or (-> (app <= iterations 0) <-) (let* (byte-size ... a) ...))\n  (env (())))\""
  18
  12
  6
  0
  12
  6
  18
  1
  1
  8
  #f
  4/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval (app <= (-> iterations <-) 0) (env (())))\""
  15
  9
  6
  0
  9
  6
  15
  1
  1
  6
  #f
  4/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  primtest
  0
  15
  94
  app
  "\"'(eval\n  (λ (n)\n    (->\n     (app\n      or\n      (app = (app modulo n 2) 0)\n      (app = (app modulo n 3) 0)\n      (app = (app modulo n 5) 0)\n      (app = (app modulo n 7) 0)\n      (app = (app modulo n 11) 0)\n      (app = (app modulo n 13) 0)\n      (app = (app modulo n 17) 0)\n      (app = (app modulo n 19) 0)\n      (app = (app modulo n 23) 0))\n     <-))\n  (env (())))\""
  79
  74
  5
  0
  74
  5
  79
  1
  1
  44
  #f
  52/37
  ((15/2 15/2 0) (15/2 15/2 0) (15/2 15/2 0)))
'(clean-cache
  primtest
  0
  15
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (-> (app = (app modulo n 23) 0) <-))\n  (env (())))\""
  19
  14
  5
  0
  14
  5
  19
  1
  1
  9
  #f
  19/14
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  primtest
  0
  15
  94
  app
  "\"'(eval (app = (-> (app modulo n 23) <-) 0) (env (())))\""
  16
  11
  5
  0
  11
  5
  16
  1
  1
  7
  #f
  15/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 23) (env (())))\""
  13
  8
  5
  0
  8
  5
  13
  1
  1
  5
  #f
  11/8
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  primtest
  0
  15
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (-> (app = (app modulo n 19) 0) <-)\n   (app = (app modulo n 23) 0))\n  (env (())))\""
  19
  14
  5
  0
  14
  5
  19
  1
  1
  9
  #f
  19/14
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  primtest
  0
  15
  94
  app
  "\"'(eval (app = (-> (app modulo n 19) <-) 0) (env (())))\""
  16
  11
  5
  0
  11
  5
  16
  1
  1
  7
  #f
  15/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 19) (env (())))\""
  13
  8
  5
  0
  8
  5
  13
  1
  1
  5
  #f
  11/8
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  primtest
  0
  15
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (-> (app = (app modulo n 17) 0) <-)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env (())))\""
  19
  14
  5
  0
  14
  5
  19
  1
  1
  9
  #f
  19/14
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  primtest
  0
  15
  94
  app
  "\"'(eval (app = (-> (app modulo n 17) <-) 0) (env (())))\""
  16
  11
  5
  0
  11
  5
  16
  1
  1
  7
  #f
  15/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 17) (env (())))\""
  13
  8
  5
  0
  8
  5
  13
  1
  1
  5
  #f
  11/8
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  primtest
  0
  15
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (-> (app = (app modulo n 13) 0) <-)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env (())))\""
  19
  14
  5
  0
  14
  5
  19
  1
  1
  9
  #f
  19/14
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  primtest
  0
  15
  94
  app
  "\"'(eval (app = (-> (app modulo n 13) <-) 0) (env (())))\""
  16
  11
  5
  0
  11
  5
  16
  1
  1
  7
  #f
  15/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 13) (env (())))\""
  13
  8
  5
  0
  8
  5
  13
  1
  1
  5
  #f
  11/8
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  primtest
  0
  15
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (-> (app = (app modulo n 11) 0) <-)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env (())))\""
  19
  14
  5
  0
  14
  5
  19
  1
  1
  9
  #f
  19/14
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  primtest
  0
  15
  94
  app
  "\"'(eval (app = (-> (app modulo n 11) <-) 0) (env (())))\""
  16
  11
  5
  0
  11
  5
  16
  1
  1
  7
  #f
  15/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 11) (env (())))\""
  13
  8
  5
  0
  8
  5
  13
  1
  1
  5
  #f
  11/8
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  primtest
  0
  15
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (-> (app = (app modulo n 7) 0) <-)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env (())))\""
  19
  14
  5
  0
  14
  5
  19
  1
  1
  9
  #f
  19/14
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  primtest
  0
  15
  94
  app
  "\"'(eval (app = (-> (app modulo n 7) <-) 0) (env (())))\""
  16
  11
  5
  0
  11
  5
  16
  1
  1
  7
  #f
  15/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 7) (env (())))\""
  13
  8
  5
  0
  8
  5
  13
  1
  1
  5
  #f
  11/8
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  primtest
  0
  15
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (-> (app = (app modulo n 5) 0) <-)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env (())))\""
  19
  14
  5
  0
  14
  5
  19
  1
  1
  9
  #f
  19/14
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  primtest
  0
  15
  94
  app
  "\"'(eval (app = (-> (app modulo n 5) <-) 0) (env (())))\""
  16
  11
  5
  0
  11
  5
  16
  1
  1
  7
  #f
  15/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 5) (env (())))\""
  13
  8
  5
  0
  8
  5
  13
  1
  1
  5
  #f
  11/8
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  primtest
  0
  15
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (-> (app = (app modulo n 3) 0) <-)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env (())))\""
  19
  14
  5
  0
  14
  5
  19
  1
  1
  9
  #f
  19/14
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  primtest
  0
  15
  94
  app
  "\"'(eval (app = (-> (app modulo n 3) <-) 0) (env (())))\""
  16
  11
  5
  0
  11
  5
  16
  1
  1
  7
  #f
  15/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 3) (env (())))\""
  13
  8
  5
  0
  8
  5
  13
  1
  1
  5
  #f
  11/8
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  primtest
  0
  15
  94
  app
  "\"'(eval\n  (app\n   or\n   (-> (app = (app modulo n 2) 0) <-)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env (())))\""
  19
  14
  5
  0
  14
  5
  19
  1
  1
  9
  #f
  19/14
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  primtest
  0
  15
  94
  app
  "\"'(eval (app = (-> (app modulo n 2) <-) 0) (env (())))\""
  16
  11
  5
  0
  11
  5
  16
  1
  1
  7
  #f
  15/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 2) (env (())))\""
  13
  8
  5
  0
  8
  5
  13
  1
  1
  5
  #f
  11/8
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  primtest
  0
  15
  94
  match
  "\"'(eval (λ (base exp n) (-> (match (app = exp 0) ...) <-)) (env (())))\""
  84
  70
  12
  2
  70
  12
  82
  1
  1
  30
  #f
  62/35
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  primtest
  0
  15
  94
  match
  "\"'(eval\n  (match (app = exp 0) ((#f) (-> (match (app odd? exp) ...) <-)) _)\n  (env (())))\""
  84
  70
  12
  2
  70
  12
  82
  1
  1
  30
  #f
  62/35
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  primtest
  0
  15
  94
  app
  "\"'(eval\n  (match\n   (app odd? exp)\n   (#f)\n   (_\n    (->\n     (app modulo (app * base (app modulo-power base (app - exp 1) n)) n)\n     <-)))\n  (env (())))\""
  84
  70
  12
  2
  70
  12
  82
  1
  1
  30
  #f
  62/35
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval\n  (app modulo (app * base (app modulo-power base (app - exp 1) n)) (-> n <-))\n  (env (())))\""
  22
  12
  10
  0
  12
  10
  22
  1
  1
  5
  #f
  19/12
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  primtest
  0
  15
  94
  app
  "\"'(eval\n  (app modulo (-> (app * base (app modulo-power base (app - exp 1) n)) <-) n)\n  (env (())))\""
  84
  70
  12
  2
  70
  12
  82
  1
  1
  30
  #f
  62/35
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  primtest
  0
  15
  94
  app
  "\"'(eval (app * base (-> (app modulo-power base (app - exp 1) n) <-)) (env (())))\""
  84
  70
  12
  2
  70
  12
  82
  1
  1
  30
  #f
  62/35
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval (app modulo-power base (app - exp 1) (-> n <-)) (env (())))\""
  21
  11
  10
  0
  11
  10
  21
  1
  1
  5
  #f
  17/11
  ((0 0 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  primtest
  0
  15
  94
  app
  "\"'(eval (app modulo-power base (-> (app - exp 1) <-) n) (env (())))\""
  30
  20
  10
  0
  20
  10
  30
  1
  1
  11
  #f
  37/20
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval (app - (-> exp <-) 1) (env (())))\""
  30
  20
  10
  0
  20
  10
  30
  1
  1
  11
  #f
  37/20
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval (app modulo-power (-> base <-) (app - exp 1) n) (env (())))\""
  34
  24
  10
  0
  24
  10
  34
  1
  1
  11
  #f
  13/8
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval (app * (-> base <-) (app modulo-power base (app - exp 1) n)) (env (())))\""
  35
  25
  10
  0
  25
  10
  35
  1
  1
  11
  #f
  41/25
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  primtest
  0
  15
  94
  app
  "\"'(eval\n  (match\n   (app odd? exp)\n   ((#f)\n    (->\n     (app modulo (app square (app modulo-power base (app / exp 2) n)) n)\n     <-))\n   _)\n  (env (())))\""
  84
  70
  12
  2
  70
  12
  82
  1
  1
  30
  #f
  62/35
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval\n  (app modulo (app square (app modulo-power base (app / exp 2) n)) (-> n <-))\n  (env (())))\""
  22
  12
  10
  0
  12
  10
  22
  1
  1
  5
  #f
  19/12
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  primtest
  0
  15
  94
  app
  "\"'(eval\n  (app modulo (-> (app square (app modulo-power base (app / exp 2) n)) <-) n)\n  (env (())))\""
  84
  70
  12
  2
  70
  12
  82
  1
  1
  30
  #f
  62/35
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  primtest
  0
  15
  94
  app
  "\"'(eval (app square (-> (app modulo-power base (app / exp 2) n) <-)) (env (())))\""
  84
  70
  12
  2
  70
  12
  82
  1
  1
  30
  #f
  62/35
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval (app modulo-power base (app / exp 2) (-> n <-)) (env (())))\""
  21
  11
  10
  0
  11
  10
  21
  1
  1
  5
  #f
  17/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  primtest
  0
  15
  94
  app
  "\"'(eval (app modulo-power base (-> (app / exp 2) <-) n) (env (())))\""
  30
  20
  10
  0
  20
  10
  30
  1
  1
  11
  #f
  37/20
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval (app / (-> exp <-) 2) (env (())))\""
  30
  20
  10
  0
  20
  10
  30
  1
  1
  11
  #f
  37/20
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval (app modulo-power (-> base <-) (app / exp 2) n) (env (())))\""
  34
  24
  10
  0
  24
  10
  34
  1
  1
  11
  #f
  13/8
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  primtest
  0
  15
  94
  app
  "\"'(eval (match (-> (app odd? exp) <-) (#f) _) (env (())))\""
  33
  23
  10
  0
  23
  10
  33
  1
  1
  12
  #f
  44/23
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval (app odd? (-> exp <-)) (env (())))\""
  31
  21
  10
  0
  21
  10
  31
  1
  1
  11
  #f
  41/21
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  primtest
  0
  15
  94
  app
  "\"'(eval (match (-> (app = exp 0) <-) (#f) _) (env (())))\""
  34
  24
  10
  0
  24
  10
  34
  1
  1
  13
  #f
  15/8
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval (app = (-> exp <-) 0) (env (())))\""
  31
  21
  10
  0
  21
  10
  31
  1
  1
  11
  #f
  41/21
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  primtest
  0
  15
  94
  app
  "\"'(eval (λ (x) (-> (app * x x) <-)) (env (())))\""
  84
  70
  12
  2
  70
  12
  82
  1
  1
  30
  #f
  62/35
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval (app * x (-> x <-)) (env (())))\""
  84
  70
  12
  2
  70
  12
  82
  1
  1
  30
  #f
  62/35
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval (app * (-> x <-) x) (env (())))\""
  84
  70
  12
  2
  70
  12
  82
  1
  1
  30
  #f
  62/35
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  primtest
  0
  15
  94
  app
  "\"'(eval\n  (letrec*\n   (square ... byte-size)\n   (-> (app generate-fermat-prime byte-size iterations) <-))\n  (env ()))\""
  200
  181
  14
  5
  181
  14
  195
  1
  1
  93
  #f
  283/181
  ((19/2 19/2 0) (10 10 0) (10 10 0)))
'(shuffled-cache
  0
  primtest
  0
  15
  94
  match
  "\"'(eval (λ (base exp n) (-> (match (app = exp 0) ...) <-)) (env (())))\""
  84
  70
  12
  2
  70
  12
  82
  1
  1
  30
  #f
  62/35
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 11) (env (())))\""
  88
  72
  14
  2
  72
  14
  86
  1
  1
  30
  #f
  16/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 13) (env (())))\""
  89
  73
  14
  2
  73
  14
  87
  1
  1
  30
  #f
  130/73
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  15
  94
  app
  "\"'(eval (app / (-> (app log n) <-) (app log 2)) (env (())))\""
  89
  73
  14
  2
  73
  14
  87
  1
  1
  30
  #f
  130/73
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 23) (env (())))\""
  90
  74
  14
  2
  74
  14
  88
  1
  1
  30
  #f
  66/37
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 3) (env (())))\""
  91
  75
  14
  2
  75
  14
  89
  1
  1
  30
  #f
  134/75
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval (app modulo-power base (app / exp 2) (-> n <-)) (env (())))\""
  91
  75
  14
  2
  75
  14
  89
  1
  1
  30
  #f
  134/75
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval\n  (app modulo (app * base (app modulo-power base (app - exp 1) n)) (-> n <-))\n  (env (())))\""
  91
  75
  14
  2
  75
  14
  89
  1
  1
  30
  #f
  134/75
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  15
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (-> (app = (app modulo n 23) 0) <-))\n  (env (())))\""
  97
  81
  14
  2
  81
  14
  95
  1
  1
  34
  #f
  142/81
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  15
  94
  app
  "\"'(eval\n  (letrec*\n   (square ... byte-size)\n   (-> (app generate-fermat-prime byte-size iterations) <-))\n  (env ()))\""
  200
  181
  14
  5
  181
  14
  195
  1
  1
  93
  #f
  283/181
  ((8 8 0) (8 8 0) (8 8 0)))
'(shuffled-cache
  0
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval (app modulo-power (-> base <-) (app - exp 1) n) (env (())))\""
  200
  181
  14
  5
  181
  14
  195
  1
  1
  93
  #f
  283/181
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  15
  94
  app
  "\"'(eval (app = (-> (app modulo n 11) <-) 0) (env (())))\""
  200
  181
  14
  5
  181
  14
  195
  1
  1
  93
  #f
  283/181
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval (app is-fermat-prime? (-> n <-) iterations) (env (())))\""
  200
  181
  14
  5
  181
  14
  195
  1
  1
  93
  #f
  283/181
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  15
  94
  match
  "\"'(eval\n  (match (app = exp 0) ((#f) (-> (match (app odd? exp) ...) <-)) _)\n  (env (())))\""
  200
  181
  14
  5
  181
  14
  195
  1
  1
  93
  #f
  283/181
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval (app modulo-power base (app - exp 1) (-> n <-)) (env (())))\""
  200
  181
  14
  5
  181
  14
  195
  1
  1
  93
  #f
  283/181
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  15
  94
  app
  "\"'(eval\n  (match\n   (app\n    and\n    (app not (app is-trivial-composite? n))\n    (app is-fermat-prime? n iterations))\n   ((#f) (-> (app generate-fermat-prime byte-size iterations) <-))\n   _)\n  (env (())))\""
  200
  181
  14
  5
  181
  14
  195
  1
  1
  93
  #f
  283/181
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  15
  94
  app
  "\"'(eval\n  (match\n   (app odd? exp)\n   ((#f)\n    (->\n     (app modulo (app square (app modulo-power base (app / exp 2) n)) n)\n     <-))\n   _)\n  (env (())))\""
  200
  181
  14
  5
  181
  14
  195
  1
  1
  93
  #f
  283/181
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  15
  94
  letrec*
  "\"'(eval ((top) letrec* (square ... byte-size) ...) (env ()))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  15
  94
  app
  "\"'(eval\n  (λ (n)\n    (->\n     (app\n      or\n      (app = (app modulo n 2) 0)\n      (app = (app modulo n 3) 0)\n      (app = (app modulo n 5) 0)\n      (app = (app modulo n 7) 0)\n      (app = (app modulo n 11) 0)\n      (app = (app modulo n 13) 0)\n      (app = (app modulo n 17) 0)\n      (app = (app modulo n 19) 0)\n      (app = (app modulo n 23) 0))\n     <-))\n  (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  15
  94
  app
  "\"'(eval\n  (match\n   (app = (app modulo-power a (app - n 1) n) 1)\n   ((#f) (-> (app #f) <-))\n   _)\n  (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #t
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  15
  94
  app
  "\"'(eval\n  (match\n   (->\n    (app\n     and\n     (app not (app is-trivial-composite? n))\n     (app is-fermat-prime? n iterations))\n    <-)\n   (#f)\n   _)\n  (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  15
  94
  app
  "\"'(eval (app square (-> (app modulo-power base (app / exp 2) n) <-)) (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  15
  94
  app
  "\"'(eval (app modulo-power base (-> (app / exp 2) <-) n) (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval (app generate-fermat-prime byte-size (-> iterations <-)) (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #t
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval (app * (-> base <-) (app modulo-power base (app - exp 1) n)) (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval (app - (-> iterations <-) 1) (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval (app <= (-> iterations <-) 0) (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  15
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (-> (app = (app modulo n 13) 0) <-)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  15
  94
  app
  "\"'(eval\n  (match\n   (app = (app modulo-power a (app - n 1) n) 1)\n   (#f)\n   (_ (-> (app is-fermat-prime? n (app - iterations 1)) <-)))\n  (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  15
  94
  app
  "\"'(eval\n  (app modulo (-> (app * base (app modulo-power base (app - exp 1) n)) <-) n)\n  (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  15
  94
  app
  "\"'(eval (app = (-> (app modulo n 3) <-) 0) (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval (app * (-> x <-) x) (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  15
  94
  app
  "\"'(eval\n  (match\n   (app odd? exp)\n   (#f)\n   (_\n    (->\n     (app modulo (app * base (app modulo-power base (app - exp 1) n)) n)\n     <-)))\n  (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  15
  94
  app
  "\"'(eval (app modulo-power base (-> (app - exp 1) <-) n) (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  15
  94
  app
  "\"'(eval (app = (-> (app modulo n 7) <-) 0) (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  15
  94
  app
  "\"'(eval (app = (-> (app modulo n 19) <-) 0) (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 2) (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval (app = (-> exp <-) 0) (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  15
  94
  app
  "\"'(eval\n  (app\n   and\n   (-> (app not (app is-trivial-composite? n)) <-)\n   (app is-fermat-prime? n iterations))\n  (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval (app - (-> n <-) 1) (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  15
  94
  app
  "\"'(eval (app = (-> (app modulo n 2) <-) 0) (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  15
  94
  app
  "\"'(eval\n  (λ (n iterations)\n    (-> (app or (app <= iterations 0) (let* (byte-size ... a) ...)) <-))\n  (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  15
  94
  app
  "\"'(eval (app = (-> (app modulo n 13) <-) 0) (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval (app * x (-> x <-)) (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  15
  94
  app
  "\"'(eval\n  (app modulo (-> (app square (app modulo-power base (app / exp 2) n)) <-) n)\n  (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  15
  94
  app
  "\"'(eval\n  (match (-> (app = (app modulo-power a (app - n 1) n) 1) <-) (#f) _)\n  (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  15
  94
  app
  "\"'(eval (match (-> (app = exp 0) <-) (#f) _) (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  15
  94
  app
  "\"'(eval (app not (-> (app is-trivial-composite? n) <-)) (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  15
  94
  match
  "\"'(eval\n  (let (n)\n    (->\n     (match\n      (app\n       and\n       (app not (app is-trivial-composite? n))\n       (app is-fermat-prime? n iterations))\n      ...)\n     <-))\n  (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  15
  94
  let
  "\"'(eval (λ (byte-size iterations) (-> (let (n) ...) <-)) (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval (app is-trivial-composite? (-> n <-)) (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  15
  94
  app
  "\"'(eval (match (-> (app odd? exp) <-) (#f) _) (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 17) (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval (app log (-> n <-)) (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  15
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (-> (app = (app modulo n 17) 0) <-)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval (app modulo-power (-> base <-) (app / exp 2) n) (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval (app random (-> byte-size <-)) (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval (app / (-> exp <-) 2) (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval\n  (match\n   (app\n    and\n    (app not (app is-trivial-composite? n))\n    (app is-fermat-prime? n iterations))\n   (#f)\n   (_ (-> n <-)))\n  (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval (app odd? (-> exp <-)) (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  15
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (-> (app = (app modulo n 5) 0) <-)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval (app generate-fermat-prime (-> byte-size <-) iterations) (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #t
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  15
  94
  app
  "\"'(eval\n  (app\n   or\n   (-> (app = (app modulo n 2) 0) <-)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 7) (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  15
  94
  app
  "\"'(eval\n  (let* (...\n         ()\n         (byte-size (-> (app ceiling (app / (app log n) (app log 2))) <-))\n         a\n         ...)\n    ...)\n  (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  15
  94
  app
  "\"'(eval (app = (-> (app modulo n 5) <-) 0) (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval (app modulo-power (-> a <-) (app - n 1) n) (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  15
  94
  app
  "\"'(eval\n  (app or (-> (app <= iterations 0) <-) (let* (byte-size ... a) ...))\n  (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  15
  94
  app
  "\"'(eval (λ (x) (-> (app * x x) <-)) (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  15
  94
  match
  "\"'(eval\n  (let* (byte-size ... a)\n    (-> (match (app = (app modulo-power a (app - n 1) n) 1) ...) <-))\n  (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 19) (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  15
  94
  app
  "\"'(eval (app = (-> (app modulo n 17) <-) 0) (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  15
  94
  app
  "\"'(eval (app * base (-> (app modulo-power base (app - exp 1) n) <-)) (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  15
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (-> (app = (app modulo n 7) 0) <-)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  15
  94
  app
  "\"'(eval (app is-fermat-prime? n (-> (app - iterations 1) <-)) (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  15
  94
  app
  "\"'(eval (let (... () (n (-> (app random byte-size) <-)) () ...) ...) (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval (app - (-> exp <-) 1) (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  15
  94
  app
  "\"'(eval (app = (-> (app modulo n 23) <-) 0) (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  15
  94
  app
  "\"'(eval (app modulo-power a (-> (app - n 1) <-) n) (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval (app is-fermat-prime? (-> n <-) (app - iterations 1)) (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  15
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (-> (app = (app modulo n 11) 0) <-)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  15
  94
  app
  "\"'(eval\n  (app\n   and\n   (app not (app is-trivial-composite? n))\n   (-> (app is-fermat-prime? n iterations) <-))\n  (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  15
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (-> (app = (app modulo n 19) 0) <-)\n   (app = (app modulo n 23) 0))\n  (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  15
  94
  app
  "\"'(eval (app = (-> (app modulo-power a (app - n 1) n) <-) 1) (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 5) (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval\n  (app modulo (app square (app modulo-power base (app / exp 2) n)) (-> n <-))\n  (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval (app random (-> byte-size <-)) (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #t
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  15
  94
  app
  "\"'(eval (app / (app log n) (-> (app log 2) <-)) (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval (app is-fermat-prime? n (-> iterations <-)) (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #t
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval (app modulo-power a (app - n 1) (-> n <-)) (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  15
  94
  let*
  "\"'(eval\n  (app or (app <= iterations 0) (-> (let* (byte-size ... a) ...) <-))\n  (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  15
  94
  app
  "\"'(eval (app ceiling (-> (app / (app log n) (app log 2)) <-)) (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  15
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (-> (app = (app modulo n 3) 0) <-)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  0
  15
  94
  app
  "\"'(eval\n  (let* (... byte-size (a (-> (app random byte-size) <-)) () ...) ...)\n  (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 3) (env (())))\""
  13
  8
  5
  0
  8
  5
  13
  1
  1
  5
  #f
  11/8
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  15
  94
  app
  "\"'(eval\n  (match\n   (->\n    (app\n     and\n     (app not (app is-trivial-composite? n))\n     (app is-fermat-prime? n iterations))\n    <-)\n   (#f)\n   _)\n  (env (())))\""
  191
  173
  14
  4
  173
  14
  187
  1
  1
  90
  #f
  270/173
  ((19/2 19/2 0) (10 10 0) (19/2 19/2 0)))
'(shuffled-cache
  1
  primtest
  0
  15
  94
  app
  "\"'(eval (app * base (-> (app modulo-power base (app - exp 1) n) <-)) (env (())))\""
  191
  173
  14
  4
  173
  14
  187
  1
  1
  90
  #f
  270/173
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  15
  94
  app
  "\"'(eval\n  (let* (...\n         ()\n         (byte-size (-> (app ceiling (app / (app log n) (app log 2))) <-))\n         a\n         ...)\n    ...)\n  (env (())))\""
  191
  173
  14
  4
  173
  14
  187
  1
  1
  90
  #f
  270/173
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 2) (env (())))\""
  191
  173
  14
  4
  173
  14
  187
  1
  1
  90
  #f
  270/173
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  15
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (-> (app = (app modulo n 5) 0) <-)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env (())))\""
  191
  173
  14
  4
  173
  14
  187
  1
  1
  90
  #f
  270/173
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval (app modulo-power (-> base <-) (app - exp 1) n) (env (())))\""
  191
  173
  14
  4
  173
  14
  187
  1
  1
  90
  #f
  270/173
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  15
  94
  app
  "\"'(eval (app modulo-power base (-> (app / exp 2) <-) n) (env (())))\""
  191
  173
  14
  4
  173
  14
  187
  1
  1
  90
  #f
  270/173
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 13) (env (())))\""
  191
  173
  14
  4
  173
  14
  187
  1
  1
  90
  #f
  270/173
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 17) (env (())))\""
  191
  173
  14
  4
  173
  14
  187
  1
  1
  90
  #f
  270/173
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval (app random (-> byte-size <-)) (env (())))\""
  191
  173
  14
  4
  173
  14
  187
  1
  1
  90
  #t
  270/173
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  15
  94
  app
  "\"'(eval\n  (letrec*\n   (square ... byte-size)\n   (-> (app generate-fermat-prime byte-size iterations) <-))\n  (env ()))\""
  200
  181
  14
  5
  181
  14
  195
  1
  1
  93
  #f
  283/181
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  15
  94
  match
  "\"'(eval\n  (let (n)\n    (->\n     (match\n      (app\n       and\n       (app not (app is-trivial-composite? n))\n       (app is-fermat-prime? n iterations))\n      ...)\n     <-))\n  (env (())))\""
  200
  181
  14
  5
  181
  14
  195
  1
  1
  93
  #f
  283/181
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  15
  94
  app
  "\"'(eval (app modulo-power base (-> (app - exp 1) <-) n) (env (())))\""
  200
  181
  14
  5
  181
  14
  195
  1
  1
  93
  #f
  283/181
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  15
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (-> (app = (app modulo n 17) 0) <-)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env (())))\""
  200
  181
  14
  5
  181
  14
  195
  1
  1
  93
  #f
  283/181
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  15
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (-> (app = (app modulo n 13) 0) <-)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env (())))\""
  200
  181
  14
  5
  181
  14
  195
  1
  1
  93
  #f
  283/181
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  15
  94
  app
  "\"'(eval (match (-> (app = exp 0) <-) (#f) _) (env (())))\""
  200
  181
  14
  5
  181
  14
  195
  1
  1
  93
  #f
  283/181
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  15
  94
  app
  "\"'(eval\n  (match\n   (app\n    and\n    (app not (app is-trivial-composite? n))\n    (app is-fermat-prime? n iterations))\n   ((#f) (-> (app generate-fermat-prime byte-size iterations) <-))\n   _)\n  (env (())))\""
  200
  181
  14
  5
  181
  14
  195
  1
  1
  93
  #f
  283/181
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  15
  94
  app
  "\"'(eval\n  (app\n   and\n   (app not (app is-trivial-composite? n))\n   (-> (app is-fermat-prime? n iterations) <-))\n  (env (())))\""
  200
  181
  14
  5
  181
  14
  195
  1
  1
  93
  #f
  283/181
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  15
  94
  match
  "\"'(eval (λ (base exp n) (-> (match (app = exp 0) ...) <-)) (env (())))\""
  200
  181
  14
  5
  181
  14
  195
  1
  1
  93
  #f
  283/181
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  15
  94
  app
  "\"'(eval (λ (x) (-> (app * x x) <-)) (env (())))\""
  200
  181
  14
  5
  181
  14
  195
  1
  1
  93
  #f
  283/181
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval\n  (app modulo (app * base (app modulo-power base (app - exp 1) n)) (-> n <-))\n  (env (())))\""
  200
  181
  14
  5
  181
  14
  195
  1
  1
  93
  #f
  283/181
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  15
  94
  app
  "\"'(eval (app modulo-power a (-> (app - n 1) <-) n) (env (())))\""
  200
  181
  14
  5
  181
  14
  195
  1
  1
  93
  #f
  283/181
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 19) (env (())))\""
  200
  181
  14
  5
  181
  14
  195
  1
  1
  93
  #f
  283/181
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval (app generate-fermat-prime (-> byte-size <-) iterations) (env (())))\""
  200
  181
  14
  5
  181
  14
  195
  1
  1
  93
  #t
  283/181
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  15
  94
  app
  "\"'(eval (app is-fermat-prime? n (-> (app - iterations 1) <-)) (env (())))\""
  200
  181
  14
  5
  181
  14
  195
  1
  1
  93
  #f
  283/181
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval (app modulo-power (-> a <-) (app - n 1) n) (env (())))\""
  200
  181
  14
  5
  181
  14
  195
  1
  1
  93
  #f
  283/181
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  15
  94
  let*
  "\"'(eval\n  (app or (app <= iterations 0) (-> (let* (byte-size ... a) ...) <-))\n  (env (())))\""
  200
  181
  14
  5
  181
  14
  195
  1
  1
  93
  #f
  283/181
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 11) (env (())))\""
  200
  181
  14
  5
  181
  14
  195
  1
  1
  93
  #f
  283/181
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval (app * (-> base <-) (app modulo-power base (app - exp 1) n)) (env (())))\""
  200
  181
  14
  5
  181
  14
  195
  1
  1
  93
  #f
  283/181
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  15
  94
  app
  "\"'(eval (app = (-> (app modulo n 17) <-) 0) (env (())))\""
  200
  181
  14
  5
  181
  14
  195
  1
  1
  93
  #f
  283/181
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  15
  94
  app
  "\"'(eval (app = (-> (app modulo n 11) <-) 0) (env (())))\""
  200
  181
  14
  5
  181
  14
  195
  1
  1
  93
  #f
  283/181
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval (app - (-> exp <-) 1) (env (())))\""
  200
  181
  14
  5
  181
  14
  195
  1
  1
  93
  #f
  283/181
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  15
  94
  app
  "\"'(eval (match (-> (app odd? exp) <-) (#f) _) (env (())))\""
  200
  181
  14
  5
  181
  14
  195
  1
  1
  93
  #f
  283/181
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  15
  94
  app
  "\"'(eval\n  (let* (... byte-size (a (-> (app random byte-size) <-)) () ...) ...)\n  (env (())))\""
  200
  181
  14
  5
  181
  14
  195
  1
  1
  93
  #f
  283/181
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  15
  94
  letrec*
  "\"'(eval ((top) letrec* (square ... byte-size) ...) (env ()))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  15
  94
  app
  "\"'(eval (app = (-> (app modulo n 5) <-) 0) (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  15
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (-> (app = (app modulo n 3) 0) <-)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval (app modulo-power base (app - exp 1) (-> n <-)) (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  15
  94
  app
  "\"'(eval (app / (app log n) (-> (app log 2) <-)) (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval (app random (-> byte-size <-)) (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval (app is-fermat-prime? (-> n <-) (app - iterations 1)) (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval (app generate-fermat-prime byte-size (-> iterations <-)) (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #t
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  15
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (-> (app = (app modulo n 19) 0) <-)\n   (app = (app modulo n 23) 0))\n  (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval (app * x (-> x <-)) (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval (app <= (-> iterations <-) 0) (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  15
  94
  app
  "\"'(eval (app square (-> (app modulo-power base (app / exp 2) n) <-)) (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 7) (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval (app is-trivial-composite? (-> n <-)) (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  15
  94
  let
  "\"'(eval (λ (byte-size iterations) (-> (let (n) ...) <-)) (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  15
  94
  app
  "\"'(eval\n  (app\n   and\n   (-> (app not (app is-trivial-composite? n)) <-)\n   (app is-fermat-prime? n iterations))\n  (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  15
  94
  app
  "\"'(eval\n  (app modulo (-> (app * base (app modulo-power base (app - exp 1) n)) <-) n)\n  (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  15
  94
  app
  "\"'(eval\n  (λ (n iterations)\n    (-> (app or (app <= iterations 0) (let* (byte-size ... a) ...)) <-))\n  (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  15
  94
  app
  "\"'(eval (app = (-> (app modulo-power a (app - n 1) n) <-) 1) (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval\n  (match\n   (app\n    and\n    (app not (app is-trivial-composite? n))\n    (app is-fermat-prime? n iterations))\n   (#f)\n   (_ (-> n <-)))\n  (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval (app - (-> iterations <-) 1) (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval (app modulo-power base (app / exp 2) (-> n <-)) (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  15
  94
  app
  "\"'(eval (app = (-> (app modulo n 7) <-) 0) (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval (app - (-> n <-) 1) (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  15
  94
  app
  "\"'(eval (app = (-> (app modulo n 19) <-) 0) (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval (app * (-> x <-) x) (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  15
  94
  app
  "\"'(eval\n  (app\n   or\n   (-> (app = (app modulo n 2) 0) <-)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  15
  94
  app
  "\"'(eval (let (... () (n (-> (app random byte-size) <-)) () ...) ...) (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  15
  94
  app
  "\"'(eval\n  (match\n   (app odd? exp)\n   (#f)\n   (_\n    (->\n     (app modulo (app * base (app modulo-power base (app - exp 1) n)) n)\n     <-)))\n  (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  15
  94
  app
  "\"'(eval\n  (match\n   (app = (app modulo-power a (app - n 1) n) 1)\n   (#f)\n   (_ (-> (app is-fermat-prime? n (app - iterations 1)) <-)))\n  (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 23) (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval (app / (-> exp <-) 2) (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval (app log (-> n <-)) (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  15
  94
  app
  "\"'(eval (app / (-> (app log n) <-) (app log 2)) (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  15
  94
  app
  "\"'(eval\n  (app modulo (-> (app square (app modulo-power base (app / exp 2) n)) <-) n)\n  (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  15
  94
  match
  "\"'(eval\n  (match (app = exp 0) ((#f) (-> (match (app odd? exp) ...) <-)) _)\n  (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  15
  94
  app
  "\"'(eval (app not (-> (app is-trivial-composite? n) <-)) (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval (app odd? (-> exp <-)) (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval (app modulo-power (-> base <-) (app / exp 2) n) (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  15
  94
  match
  "\"'(eval\n  (let* (byte-size ... a)\n    (-> (match (app = (app modulo-power a (app - n 1) n) 1) ...) <-))\n  (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  15
  94
  app
  "\"'(eval\n  (match\n   (app = (app modulo-power a (app - n 1) n) 1)\n   ((#f) (-> (app #f) <-))\n   _)\n  (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #t
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  15
  94
  app
  "\"'(eval (app ceiling (-> (app / (app log n) (app log 2)) <-)) (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  15
  94
  app
  "\"'(eval\n  (match (-> (app = (app modulo-power a (app - n 1) n) 1) <-) (#f) _)\n  (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  15
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (-> (app = (app modulo n 23) 0) <-))\n  (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval\n  (app modulo (app square (app modulo-power base (app / exp 2) n)) (-> n <-))\n  (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  15
  94
  app
  "\"'(eval (app = (-> (app modulo n 23) <-) 0) (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  15
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (-> (app = (app modulo n 11) 0) <-)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  15
  94
  app
  "\"'(eval (app = (-> (app modulo n 3) <-) 0) (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval (app is-fermat-prime? n (-> iterations <-)) (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #t
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  15
  94
  app
  "\"'(eval (app = (-> (app modulo n 2) <-) 0) (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  15
  94
  app
  "\"'(eval\n  (app or (-> (app <= iterations 0) <-) (let* (byte-size ... a) ...))\n  (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 5) (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  15
  94
  app
  "\"'(eval\n  (match\n   (app odd? exp)\n   ((#f)\n    (->\n     (app modulo (app square (app modulo-power base (app / exp 2) n)) n)\n     <-))\n   _)\n  (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval (app is-fermat-prime? (-> n <-) iterations) (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  15
  94
  app
  "\"'(eval\n  (λ (n)\n    (->\n     (app\n      or\n      (app = (app modulo n 2) 0)\n      (app = (app modulo n 3) 0)\n      (app = (app modulo n 5) 0)\n      (app = (app modulo n 7) 0)\n      (app = (app modulo n 11) 0)\n      (app = (app modulo n 13) 0)\n      (app = (app modulo n 17) 0)\n      (app = (app modulo n 19) 0)\n      (app = (app modulo n 23) 0))\n     <-))\n  (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval (app modulo-power a (app - n 1) (-> n <-)) (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  15
  94
  ref-or-constructor
  "\"'(eval (app = (-> exp <-) 0) (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  15
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (-> (app = (app modulo n 7) 0) <-)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  0
  15
  94
  app
  "\"'(eval (app = (-> (app modulo n 13) <-) 0) (env (())))\""
  201
  182
  14
  5
  182
  14
  196
  1
  1
  93
  #f
  285/182
  ((0 0 0) (0 0 0) (0 0 0)))
