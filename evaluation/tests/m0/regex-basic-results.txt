'(expression:
  (letrec ((debug-trace (λ () (app quote do-nothing)))
           (cadr (λ (p) (app car (app cdr p))))
           (caddr (λ (p) (app car (app cdr (app cdr p)))))
           (regex-NULL #f)
           (regex-BLANK #t)
           (regex-alt?
            (λ (re)
              (app and (app pair? re) (app eq? (app car re) (app quote alt)))))
           (regex-seq?
            (λ (re)
              (app and (app pair? re) (app eq? (app car re) (app quote seq)))))
           (regex-rep?
            (λ (re)
              (app and (app pair? re) (app eq? (app car re) (app quote rep)))))
           (regex-null? (λ (re) (app eq? re (app #f))))
           (regex-empty? (λ (re) (app eq? re (app #t))))
           (regex-atom? (λ (re) (app or (app char? re) (app symbol? re))))
           (match-seq
            (λ (re f)
              (app
               and
               (app regex-seq? re)
               (app f (app cadr re) (app caddr re)))))
           (match-alt
            (λ (re f)
              (app
               and
               (app regex-alt? re)
               (app f (app cadr re) (app caddr re)))))
           (match-rep
            (λ (re f) (app and (app regex-rep? re) (app f (app cadr re)))))
           (seq
            (λ (pat1 pat2)
              (match
               (app regex-null? pat1)
               ((#f)
                (match
                 (app regex-null? pat2)
                 ((#f)
                  (match
                   (app regex-empty? pat1)
                   ((#f)
                    (match
                     (app regex-empty? pat2)
                     ((#f)
                      (app
                       cons
                       (app quote seq)
                       (app cons pat1 (app cons pat2 (app quote (app))))))
                     (_ pat1)))
                   (_ pat2)))
                 (_ regex-NULL)))
               (_ regex-NULL))))
           (alt
            (λ (pat1 pat2)
              (match
               (app regex-null? pat1)
               ((#f)
                (match
                 (app regex-null? pat2)
                 ((#f)
                  (app
                   cons
                   (app quote alt)
                   (app cons pat1 (app cons pat2 (app quote (app))))))
                 (_ pat1)))
               (_ pat2))))
           (rep
            (λ (pat)
              (match
               (app regex-null? pat)
               ((#f)
                (match
                 (app regex-empty? pat)
                 ((#f)
                  (app cons (app quote rep) (app cons pat (app quote (app)))))
                 (_ regex-BLANK)))
               (_ regex-BLANK))))
           (regex-empty
            (λ (re)
              (match
               (app regex-empty? re)
               ((#f)
                (match
                 (app regex-null? re)
                 ((#f)
                  (match
                   (app regex-atom? re)
                   ((#f)
                    (match
                     (app
                      match-seq
                      re
                      (λ (pat1 pat2)
                        (app
                         seq
                         (app regex-empty pat1)
                         (app regex-empty pat2))))
                     ((#f)
                      (match
                       (app
                        match-alt
                        re
                        (λ (pat1 pat2)
                          (app
                           alt
                           (app regex-empty pat1)
                           (app regex-empty pat2))))
                       ((#f) (match (app regex-rep? re) ((#f) #f) (_ #t)))
                       (_ ())))
                     (_ ())))
                   (_ #f)))
                 (_ #f)))
               (_ #t))))
           (regex-derivative
            (λ (re c)
              (let ((_ debug-trace))
                (match
                 (app regex-empty? re)
                 ((#f)
                  (match
                   (app regex-null? re)
                   ((#f)
                    (match
                     (app eq? c re)
                     ((#f)
                      (match
                       (app regex-atom? re)
                       ((#f)
                        (match
                         (app
                          match-seq
                          re
                          (λ (pat1 pat2)
                            (app
                             alt
                             (app seq (app regex-derivative pat1 c) pat2)
                             (app
                              seq
                              (app regex-empty pat1)
                              (app regex-derivative pat2 c)))))
                         ((#f)
                          (match
                           (app
                            match-alt
                            re
                            (λ (pat1 pat2)
                              (app
                               alt
                               (app regex-derivative pat1 c)
                               (app regex-derivative pat2 c))))
                           ((#f)
                            (match
                             (app
                              match-rep
                              re
                              (λ (pat)
                                (app
                                 seq
                                 (app regex-derivative pat c)
                                 (app rep pat))))
                             ((#f) regex-NULL)
                             (_ ())))
                           (_ ())))
                         (_ ())))
                       (_ regex-NULL)))
                     (_ regex-BLANK)))
                   (_ regex-NULL)))
                 (_ regex-NULL)))))
           (regex-match
            (λ (pattern data)
              (match
               (app null? data)
               ((#t) (app regex-empty? (app regex-empty pattern)))
               ((#f)
                (app
                 regex-match
                 (app regex-derivative pattern (app car data))
                 (app cdr data))))))
           (check-expect (λ (check expect) (app equal? check expect))))
    (app
     check-expect
     (app
      regex-match
      (app quote (app seq foo (app rep bar)))
      (app quote (app foo bar)))
     (app #f))))
(list 'query: '(app regex-empty (-> pat1 <-)) (menv '(() ())))
(list
 'query:
 '(app (-> cons <-) pat1 (app cons pat2 (app quote (app))))
 (menv '(())))
(list 'clos/con: (list (list 'cons (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (pat1 pat2)
    (->
     (app
      alt
      (app seq (app regex-derivative pat1 c) pat2)
      (app seq (app regex-empty pat1) (app regex-derivative pat2 c)))
     <-))
 (menv '(() ())))
(list
 'query:
 '(match
   (app regex-null? pat1)
   ((#f)
    (match
     (app regex-null? pat2)
     ((#f)
      (app
       cons
       (app quote alt)
       (app cons pat1 (app cons pat2 (app quote (app))))))
     (_ pat1)))
   (-> _ pat2 <-))
 (menv '(())))
(list
 'query:
 '(letrec (debug-trace
           cadr
           caddr
           regex-NULL
           regex-BLANK
           (->
            regex-alt?
            =
            (λ (re)
              (app and (app pair? re) (app eq? (app car re) (app quote alt))))
            <-)
           regex-seq?
           regex-rep?
           regex-null?
           regex-empty?
           regex-atom?
           match-seq
           match-alt
           match-rep
           seq
           alt
           rep
           regex-empty
           regex-derivative
           regex-match
           check-expect)
    bod)
 (menv '()))
(list
 'clos/con:
 (list
  (list
   '(λ (re) (app and (app pair? re) (app eq? (app car re) (app quote alt))))
   (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app regex-null? re) <-)
   ((#f)
    (match
     (app regex-atom? re)
     ((#f)
      (match
       (app
        match-seq
        re
        (λ (pat1 pat2)
          (app seq (app regex-empty pat1) (app regex-empty pat2))))
       ((#f)
        (match
         (app
          match-alt
          re
          (λ (pat1 pat2)
            (app alt (app regex-empty pat1) (app regex-empty pat2))))
         ((#f) (match (app regex-rep? re) ((#f) #f) (_ #t)))
         (_ ())))
       (_ ())))
     (_ #f)))
   (_ #f))
 (menv '(())))
(list 'query: '(app cons pat (-> (app quote (app)) <-)) (menv '(())))
(list 'query: '(app (-> cadr <-) re) (menv '(())))
(list 'clos/con: (list (list '(λ (p) (app car (app cdr p))) (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app (-> symbol? <-) re) (menv '(())))
(list
 'query:
 '(app
   check-expect
   (->
    (app
     regex-match
     (app quote (app seq foo (app rep bar)))
     (app quote (app foo bar)))
    <-)
   (app #f))
 (menv '()))
(list 'query: '(app f (app cadr re) (-> (app caddr re) <-)) (menv '(())))
(list 'query: '(app (-> #t <-)) (menv '(())))
(list 'clos/con: (list (list #t (menv '(())))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app regex-null? (-> pat <-)) (menv '(())))
(list
 'query:
 '(app
   match-alt
   re
   (->
    (λ (pat1 pat2) (app alt (app regex-empty pat1) (app regex-empty pat2)))
    <-))
 (menv '(())))
(list
 'clos/con:
 (list
  (list
   '(λ (pat1 pat2) (app alt (app regex-empty pat1) (app regex-empty pat2)))
   (menv '(())))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> alt <-) (app regex-derivative pat1 c) (app regex-derivative pat2 c))
 (menv '(() ())))
(list
 'clos/con:
 (list
  (list
   '(λ (pat1 pat2)
      (match
       (app regex-null? pat1)
       ((#f)
        (match
         (app regex-null? pat2)
         ((#f)
          (app
           cons
           (app quote alt)
           (app cons pat1 (app cons pat2 (app quote (app))))))
         (_ pat1)))
       (_ pat2)))
   (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> seq <-) (app regex-derivative pat1 c) pat2)
 (menv '(() ())))
(list
 'clos/con:
 (list
  (list
   '(λ (pat1 pat2)
      (match
       (app regex-null? pat1)
       ((#f)
        (match
         (app regex-null? pat2)
         ((#f)
          (match
           (app regex-empty? pat1)
           ((#f)
            (match
             (app regex-empty? pat2)
             ((#f)
              (app
               cons
               (app quote seq)
               (app cons pat1 (app cons pat2 (app quote (app))))))
             (_ pat1)))
           (_ pat2)))
         (_ regex-NULL)))
       (_ regex-NULL)))
   (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (pat1 pat2)
    (-> (app alt (app regex-empty pat1) (app regex-empty pat2)) <-))
 (menv '(() ())))
(list
 'query:
 '(match
   (app regex-empty? pat2)
   ((#f)
    (app
     cons
     (app quote seq)
     (app cons pat1 (app cons pat2 (app quote (app))))))
   (-> _ pat1 <-))
 (menv '(())))
(list 'query: '(top) (menv '()))
(list 'query: '(λ (p) (-> (app car (app cdr p)) <-)) (menv '(())))
(list
 'query:
 '(match
   (app
    match-seq
    re
    (λ (pat1 pat2)
      (app
       alt
       (app seq (app regex-derivative pat1 c) pat2)
       (app seq (app regex-empty pat1) (app regex-derivative pat2 c)))))
   (->
    (#f)
    (match
     (app
      match-alt
      re
      (λ (pat1 pat2)
        (app alt (app regex-derivative pat1 c) (app regex-derivative pat2 c))))
     ((#f)
      (match
       (app
        match-rep
        re
        (λ (pat) (app seq (app regex-derivative pat c) (app rep pat))))
       ((#f) regex-NULL)
       (_ ())))
     (_ ()))
    <-)
   (_ ()))
 (menv '(())))
(list 'query: '(app quote (-> rep <-)) (menv '(())))
(list
 'clos/con:
 (list
  (list
   '(λ (pat)
      (match
       (app regex-null? pat)
       ((#f)
        (match
         (app regex-empty? pat)
         ((#f) (app cons (app quote rep) (app cons pat (app quote (app)))))
         (_ regex-BLANK)))
       (_ regex-BLANK)))
   (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app (-> quote <-) (app)) (menv '(())))
(list
 'query:
 '(match
   (-> (app regex-empty? re) <-)
   ((#f)
    (match
     (app regex-null? re)
     ((#f)
      (match
       (app regex-atom? re)
       ((#f)
        (match
         (app
          match-seq
          re
          (λ (pat1 pat2)
            (app seq (app regex-empty pat1) (app regex-empty pat2))))
         ((#f)
          (match
           (app
            match-alt
            re
            (λ (pat1 pat2)
              (app alt (app regex-empty pat1) (app regex-empty pat2))))
           ((#f) (match (app regex-rep? re) ((#f) #f) (_ #t)))
           (_ ())))
         (_ ())))
       (_ #f)))
     (_ #f)))
   (_ #t))
 (menv '(())))
(list 'query: '(app equal? (-> check <-) expect) (menv '(())))
(list
 'query:
 '(match
   (app regex-empty? pat)
   (-> (#f) (app cons (app quote rep) (app cons pat (app quote (app)))) <-)
   (_ regex-BLANK))
 (menv '(())))
(list
 'clos/con:
 (list
  (list
   '(app cons (app quote rep) (app cons pat (app quote (app))))
   (menv '(())))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app (-> car <-) (app cdr p)) (menv '(())))
(list 'query: '(app rep (-> bar <-)) (menv '()))
(list 'query: '(app (-> regex-empty? <-) pat) (menv '(())))
(list 'clos/con: (list (list '(λ (re) (app eq? re (app #t))) (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app f (app cadr re) (-> (app caddr re) <-)) (menv '(())))
(list
 'query:
 '(letrec (debug-trace
           cadr
           (-> caddr = (λ (p) (app car (app cdr (app cdr p)))) <-)
           regex-NULL
           regex-BLANK
           regex-alt?
           regex-seq?
           regex-rep?
           regex-null?
           regex-empty?
           regex-atom?
           match-seq
           match-alt
           match-rep
           seq
           alt
           rep
           regex-empty
           regex-derivative
           regex-match
           check-expect)
    bod)
 (menv '()))
(list
 'clos/con:
 (list (list '(λ (p) (app car (app cdr (app cdr p)))) (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> and <-) (app pair? re) (app eq? (app car re) (app quote rep)))
 (menv '(())))
'(clos/con: (#<procedure:do-demand-and>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app eq? c re)
   ((#f)
    (match
     (app regex-atom? re)
     ((#f)
      (match
       (app
        match-seq
        re
        (λ (pat1 pat2)
          (app
           alt
           (app seq (app regex-derivative pat1 c) pat2)
           (app seq (app regex-empty pat1) (app regex-derivative pat2 c)))))
       ((#f)
        (match
         (app
          match-alt
          re
          (λ (pat1 pat2)
            (app
             alt
             (app regex-derivative pat1 c)
             (app regex-derivative pat2 c))))
         ((#f)
          (match
           (app
            match-rep
            re
            (λ (pat) (app seq (app regex-derivative pat c) (app rep pat))))
           ((#f) regex-NULL)
           (_ ())))
         (_ ())))
       (_ ())))
     (_ regex-NULL)))
   (-> _ regex-BLANK <-))
 (menv '(())))
(list 'clos/con: (list (list #t (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app regex-empty (-> pat1 <-)) (menv '(() ())))
(list 'query: '(app quote (-> (app foo bar) <-)) (menv '()))
(list 'query: '(app (-> regex-derivative <-) pat2 c) (menv '(() ())))
(list
 'clos/con:
 (list
  (list
   '(λ (re c)
      (let ((_ debug-trace))
        (match
         (app regex-empty? re)
         ((#f)
          (match
           (app regex-null? re)
           ((#f)
            (match
             (app eq? c re)
             ((#f)
              (match
               (app regex-atom? re)
               ((#f)
                (match
                 (app
                  match-seq
                  re
                  (λ (pat1 pat2)
                    (app
                     alt
                     (app seq (app regex-derivative pat1 c) pat2)
                     (app
                      seq
                      (app regex-empty pat1)
                      (app regex-derivative pat2 c)))))
                 ((#f)
                  (match
                   (app
                    match-alt
                    re
                    (λ (pat1 pat2)
                      (app
                       alt
                       (app regex-derivative pat1 c)
                       (app regex-derivative pat2 c))))
                   ((#f)
                    (match
                     (app
                      match-rep
                      re
                      (λ (pat)
                        (app seq (app regex-derivative pat c) (app rep pat))))
                     ((#f) regex-NULL)
                     (_ ())))
                   (_ ())))
                 (_ ())))
               (_ regex-NULL)))
             (_ regex-BLANK)))
           (_ regex-NULL)))
         (_ regex-NULL))))
   (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> and <-) (app regex-seq? re) (app f (app cadr re) (app caddr re)))
 (menv '(())))
'(clos/con: (#<procedure:do-demand-and>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app (-> regex-rep? <-) re) (menv '(())))
(list
 'clos/con:
 (list
  (list
   '(λ (re) (app and (app pair? re) (app eq? (app car re) (app quote rep))))
   (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app quote (-> rep <-)) (menv '(())))
(list
 'clos/con:
 (list
  (list
   '(λ (pat)
      (match
       (app regex-null? pat)
       ((#f)
        (match
         (app regex-empty? pat)
         ((#f) (app cons (app quote rep) (app cons pat (app quote (app)))))
         (_ regex-BLANK)))
       (_ regex-BLANK)))
   (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(letrec (debug-trace
           cadr
           caddr
           regex-NULL
           (-> regex-BLANK = #t <-)
           regex-alt?
           regex-seq?
           regex-rep?
           regex-null?
           regex-empty?
           regex-atom?
           match-seq
           match-alt
           match-rep
           seq
           alt
           rep
           regex-empty
           regex-derivative
           regex-match
           check-expect)
    bod)
 (menv '()))
(list 'clos/con: (list (list #t (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (->
    (app
     match-seq
     re
     (λ (pat1 pat2) (app seq (app regex-empty pat1) (app regex-empty pat2))))
    <-)
   ((#f)
    (match
     (app
      match-alt
      re
      (λ (pat1 pat2) (app alt (app regex-empty pat1) (app regex-empty pat2))))
     ((#f) (match (app regex-rep? re) ((#f) #f) (_ #t)))
     (_ ())))
   (_ ()))
 (menv '(())))
(list 'query: '(app caddr (-> re <-)) (menv '(())))
(list 'query: '(app (-> car <-) data) (menv '(())))
(list 'query: '(app regex-empty? (-> pat1 <-)) (menv '(())))
(list
 'query:
 '(match (-> (app regex-rep? re) <-) ((#f) #f) (_ #t))
 (menv '(())))
(list
 'query:
 '(match
   (app regex-atom? re)
   (->
    (#f)
    (match
     (app
      match-seq
      re
      (λ (pat1 pat2)
        (app
         alt
         (app seq (app regex-derivative pat1 c) pat2)
         (app seq (app regex-empty pat1) (app regex-derivative pat2 c)))))
     ((#f)
      (match
       (app
        match-alt
        re
        (λ (pat1 pat2)
          (app
           alt
           (app regex-derivative pat1 c)
           (app regex-derivative pat2 c))))
       ((#f)
        (match
         (app
          match-rep
          re
          (λ (pat) (app seq (app regex-derivative pat c) (app rep pat))))
         ((#f) regex-NULL)
         (_ ())))
       (_ ())))
     (_ ()))
    <-)
   (_ regex-NULL))
 (menv '(())))
(list
 'query:
 '(app cons pat1 (-> (app cons pat2 (app quote (app))) <-))
 (menv '(())))
(list 'clos/con: (list (list '(app cons pat2 (app quote (app))) (menv '(())))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app regex-rep? (-> re <-)) (menv '(())))
(list
 'query:
 '(app (-> and <-) (app regex-rep? re) (app f (app cadr re)))
 (menv '(())))
'(clos/con: (#<procedure:do-demand-and>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app and (app regex-seq? re) (-> (app f (app cadr re) (app caddr re)) <-))
 (menv '(())))
(list
 'query:
 '(app cons (-> (app quote rep) <-) (app cons pat (app quote (app))))
 (menv '(())))
(list
 'query:
 '(app
   match-seq
   (-> re <-)
   (λ (pat1 pat2)
     (app
      alt
      (app seq (app regex-derivative pat1 c) pat2)
      (app seq (app regex-empty pat1) (app regex-derivative pat2 c)))))
 (menv '(())))
(list
 'query:
 '(app and (-> (app pair? re) <-) (app eq? (app car re) (app quote rep)))
 (menv '(())))
(list
 'query:
 '(app
   regex-match
   (-> (app quote (app seq foo (app rep bar))) <-)
   (app quote (app foo bar)))
 (menv '()))
(list 'query: '(app cons (-> pat <-) (app quote (app))) (menv '(())))
(list 'query: '(match (app regex-rep? re) (-> (#f) #f <-) (_ #t)) (menv '(())))
(list 'clos/con: (list (list #f (menv '(())))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app (-> quote <-) (app seq foo (app rep bar))) (menv '()))
(list
 'query:
 '(match
   (app regex-null? re)
   ((#f)
    (match
     (app regex-atom? re)
     ((#f)
      (match
       (app
        match-seq
        re
        (λ (pat1 pat2)
          (app seq (app regex-empty pat1) (app regex-empty pat2))))
       ((#f)
        (match
         (app
          match-alt
          re
          (λ (pat1 pat2)
            (app alt (app regex-empty pat1) (app regex-empty pat2))))
         ((#f) (match (app regex-rep? re) ((#f) #f) (_ #t)))
         (_ ())))
       (_ ())))
     (_ #f)))
   (-> _ #f <-))
 (menv '(())))
(list 'clos/con: (list (list #f (menv '(())))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> and <-) (app pair? re) (app eq? (app car re) (app quote alt)))
 (menv '(())))
'(clos/con: (#<procedure:do-demand-and>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app regex-derivative (-> pat1 <-) c) (menv '(() ())))
(list 'query: '(app regex-derivative (-> pat2 <-) c) (menv '(() ())))
(list
 'query:
 '(match
   (-> (app regex-atom? re) <-)
   ((#f)
    (match
     (app
      match-seq
      re
      (λ (pat1 pat2)
        (app
         alt
         (app seq (app regex-derivative pat1 c) pat2)
         (app seq (app regex-empty pat1) (app regex-derivative pat2 c)))))
     ((#f)
      (match
       (app
        match-alt
        re
        (λ (pat1 pat2)
          (app
           alt
           (app regex-derivative pat1 c)
           (app regex-derivative pat2 c))))
       ((#f)
        (match
         (app
          match-rep
          re
          (λ (pat) (app seq (app regex-derivative pat c) (app rep pat))))
         ((#f) regex-NULL)
         (_ ())))
       (_ ())))
     (_ ())))
   (_ regex-NULL))
 (menv '(())))
(list 'query: '(app (-> quote <-) do-nothing) (menv '(())))
(list 'query: '(app (-> equal? <-) check expect) (menv '(())))
'(clos/con: (#<procedure:do-demand-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> seq <-) (app regex-empty pat1) (app regex-derivative pat2 c))
 (menv '(() ())))
(list
 'clos/con:
 (list
  (list
   '(λ (pat1 pat2)
      (match
       (app regex-null? pat1)
       ((#f)
        (match
         (app regex-null? pat2)
         ((#f)
          (match
           (app regex-empty? pat1)
           ((#f)
            (match
             (app regex-empty? pat2)
             ((#f)
              (app
               cons
               (app quote seq)
               (app cons pat1 (app cons pat2 (app quote (app))))))
             (_ pat1)))
           (_ pat2)))
         (_ regex-NULL)))
       (_ regex-NULL)))
   (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app (-> cadr <-) re) (menv '(())))
(list 'clos/con: (list (list '(λ (p) (app car (app cdr p))) (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app alt (app regex-empty pat1) (-> (app regex-empty pat2) <-))
 (menv '(() ())))
(list 'query: '(app (-> regex-empty? <-) pat2) (menv '(())))
(list 'clos/con: (list (list '(λ (re) (app eq? re (app #t))) (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app quote (-> seq <-)) (menv '(())))
(list
 'clos/con:
 (list
  (list
   '(λ (pat1 pat2)
      (match
       (app regex-null? pat1)
       ((#f)
        (match
         (app regex-null? pat2)
         ((#f)
          (match
           (app regex-empty? pat1)
           ((#f)
            (match
             (app regex-empty? pat2)
             ((#f)
              (app
               cons
               (app quote seq)
               (app cons pat1 (app cons pat2 (app quote (app))))))
             (_ pat1)))
           (_ pat2)))
         (_ regex-NULL)))
       (_ regex-NULL)))
   (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app and (app regex-rep? re) (-> (app f (app cadr re)) <-))
 (menv '(())))
(list
 'query:
 '(λ (re c)
    (->
     (let ((_ debug-trace))
       (match
        (app regex-empty? re)
        ((#f)
         (match
          (app regex-null? re)
          ((#f)
           (match
            (app eq? c re)
            ((#f)
             (match
              (app regex-atom? re)
              ((#f)
               (match
                (app
                 match-seq
                 re
                 (λ (pat1 pat2)
                   (app
                    alt
                    (app seq (app regex-derivative pat1 c) pat2)
                    (app
                     seq
                     (app regex-empty pat1)
                     (app regex-derivative pat2 c)))))
                ((#f)
                 (match
                  (app
                   match-alt
                   re
                   (λ (pat1 pat2)
                     (app
                      alt
                      (app regex-derivative pat1 c)
                      (app regex-derivative pat2 c))))
                  ((#f)
                   (match
                    (app
                     match-rep
                     re
                     (λ (pat)
                       (app seq (app regex-derivative pat c) (app rep pat))))
                    ((#f) regex-NULL)
                    (_ ())))
                  (_ ())))
                (_ ())))
              (_ regex-NULL)))
            (_ regex-BLANK)))
          (_ regex-NULL)))
        (_ regex-NULL)))
     <-))
 (menv '(())))
(list
 'query:
 '(app cons (-> pat1 <-) (app cons pat2 (app quote (app))))
 (menv '(())))
(list
 'query:
 '(λ (re)
    (-> (app and (app pair? re) (app eq? (app car re) (app quote rep))) <-))
 (menv '(())))
(list
 'query:
 '(app
   alt
   (-> (app seq (app regex-derivative pat1 c) pat2) <-)
   (app seq (app regex-empty pat1) (app regex-derivative pat2 c)))
 (menv '(() ())))
(list 'query: '(app eq? (-> (app car re) <-) (app quote seq)) (menv '(())))
(list
 'query:
 '(λ (re f)
    (-> (app and (app regex-seq? re) (app f (app cadr re) (app caddr re))) <-))
 (menv '(())))
(list
 'query:
 '(match
   (app regex-empty? pat1)
   ((#f)
    (match
     (app regex-empty? pat2)
     ((#f)
      (app
       cons
       (app quote seq)
       (app cons pat1 (app cons pat2 (app quote (app))))))
     (_ pat1)))
   (-> _ pat2 <-))
 (menv '(())))
(list 'query: '(app regex-null? (-> pat2 <-)) (menv '(())))
(list 'query: '(app (-> f <-) (app cadr re)) (menv '(())))
(list 'query: '(app (-> regex-empty <-) pat2) (menv '(() ())))
(list
 'clos/con:
 (list
  (list
   '(λ (re)
      (match
       (app regex-empty? re)
       ((#f)
        (match
         (app regex-null? re)
         ((#f)
          (match
           (app regex-atom? re)
           ((#f)
            (match
             (app
              match-seq
              re
              (λ (pat1 pat2)
                (app seq (app regex-empty pat1) (app regex-empty pat2))))
             ((#f)
              (match
               (app
                match-alt
                re
                (λ (pat1 pat2)
                  (app alt (app regex-empty pat1) (app regex-empty pat2))))
               ((#f) (match (app regex-rep? re) ((#f) #f) (_ #t)))
               (_ ())))
             (_ ())))
           (_ #f)))
         (_ #f)))
       (_ #t)))
   (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app regex-null? pat2) <-)
   ((#f)
    (match
     (app regex-empty? pat1)
     ((#f)
      (match
       (app regex-empty? pat2)
       ((#f)
        (app
         cons
         (app quote seq)
         (app cons pat1 (app cons pat2 (app quote (app))))))
       (_ pat1)))
     (_ pat2)))
   (_ regex-NULL))
 (menv '(())))
(list 'query: '(λ (re) (-> (app eq? re (app #t)) <-)) (menv '(())))
(list
 'query:
 '(letrec (debug-trace
           cadr
           caddr
           regex-NULL
           regex-BLANK
           regex-alt?
           regex-seq?
           regex-rep?
           regex-null?
           regex-empty?
           (->
            regex-atom?
            =
            (λ (re) (app or (app char? re) (app symbol? re)))
            <-)
           match-seq
           match-alt
           match-rep
           seq
           alt
           rep
           regex-empty
           regex-derivative
           regex-match
           check-expect)
    bod)
 (menv '()))
(list
 'clos/con:
 (list (list '(λ (re) (app or (app char? re) (app symbol? re))) (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app (-> regex-empty? <-) pat1) (menv '(())))
(list 'clos/con: (list (list '(λ (re) (app eq? re (app #t))) (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app car (-> re <-)) (menv '(())))
(list
 'query:
 '(match
   (app regex-empty? pat2)
   (->
    (#f)
    (app
     cons
     (app quote seq)
     (app cons pat1 (app cons pat2 (app quote (app)))))
    <-)
   (_ pat1))
 (menv '(())))
(list
 'clos/con:
 (list
  (list
   '(app
     cons
     (app quote seq)
     (app cons pat1 (app cons pat2 (app quote (app)))))
   (menv '(())))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app (-> cons <-) pat (app quote (app))) (menv '(())))
(list 'clos/con: (list (list 'cons (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app eq? (-> (app car re) <-) (app quote alt)) (menv '(())))
(list
 'query:
 '(app regex-derivative pattern (-> (app car data) <-))
 (menv '(())))
(list 'query: '(app foo (-> bar <-)) (menv '()))
(list
 'query:
 '(app and (-> (app pair? re) <-) (app eq? (app car re) (app quote alt)))
 (menv '(())))
(list 'query: '(app pair? (-> re <-)) (menv '(())))
(list
 'query:
 '(app cons pat1 (-> (app cons pat2 (app quote (app))) <-))
 (menv '(())))
(list 'clos/con: (list (list '(app cons pat2 (app quote (app))) (menv '(())))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app regex-derivative pat2 (-> c <-)) (menv '(() ())))
(list
 'query:
 '(match
   (app
    match-alt
    re
    (λ (pat1 pat2) (app alt (app regex-empty pat1) (app regex-empty pat2))))
   ((#f) (match (app regex-rep? re) ((#f) #f) (_ #t)))
   (-> _ () <-))
 (menv '(())))
(list
 'query:
 '(match
   (app regex-null? re)
   ((#f)
    (match
     (app eq? c re)
     ((#f)
      (match
       (app regex-atom? re)
       ((#f)
        (match
         (app
          match-seq
          re
          (λ (pat1 pat2)
            (app
             alt
             (app seq (app regex-derivative pat1 c) pat2)
             (app seq (app regex-empty pat1) (app regex-derivative pat2 c)))))
         ((#f)
          (match
           (app
            match-alt
            re
            (λ (pat1 pat2)
              (app
               alt
               (app regex-derivative pat1 c)
               (app regex-derivative pat2 c))))
           ((#f)
            (match
             (app
              match-rep
              re
              (λ (pat) (app seq (app regex-derivative pat c) (app rep pat))))
             ((#f) regex-NULL)
             (_ ())))
           (_ ())))
         (_ ())))
       (_ regex-NULL)))
     (_ regex-BLANK)))
   (-> _ regex-NULL <-))
 (menv '(())))
(list 'clos/con: (list (list #f (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(letrec (debug-trace
           cadr
           caddr
           regex-NULL
           regex-BLANK
           regex-alt?
           regex-seq?
           regex-rep?
           regex-null?
           regex-empty?
           regex-atom?
           match-seq
           match-alt
           match-rep
           seq
           alt
           rep
           regex-empty
           regex-derivative
           regex-match
           check-expect)
    (->
     (app
      check-expect
      (app
       regex-match
       (app quote (app seq foo (app rep bar)))
       (app quote (app foo bar)))
      (app #f))
     <-))
 (menv '()))
(list 'query: '(app eq? (-> re <-) (app #t)) (menv '(())))
(list 'query: '(app (-> quote <-) rep) (menv '(())))
(list 'query: '(app (-> cdr <-) p) (menv '(())))
(list 'query: '(app (-> regex-null? <-) pat) (menv '(())))
(list 'clos/con: (list (list '(λ (re) (app eq? re (app #f))) (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app (-> f <-) (app cadr re) (app caddr re)) (menv '(())))
(list 'query: '(app (-> regex-empty <-) pattern) (menv '(())))
(list
 'clos/con:
 (list
  (list
   '(λ (re)
      (match
       (app regex-empty? re)
       ((#f)
        (match
         (app regex-null? re)
         ((#f)
          (match
           (app regex-atom? re)
           ((#f)
            (match
             (app
              match-seq
              re
              (λ (pat1 pat2)
                (app seq (app regex-empty pat1) (app regex-empty pat2))))
             ((#f)
              (match
               (app
                match-alt
                re
                (λ (pat1 pat2)
                  (app alt (app regex-empty pat1) (app regex-empty pat2))))
               ((#f) (match (app regex-rep? re) ((#f) #f) (_ #t)))
               (_ ())))
             (_ ())))
           (_ #f)))
         (_ #f)))
       (_ #t)))
   (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app
    match-rep
    re
    (λ (pat) (app seq (app regex-derivative pat c) (app rep pat))))
   ((#f) regex-NULL)
   (-> _ () <-))
 (menv '(())))
(list
 'query:
 '(λ (pat1 pat2)
    (->
     (match
      (app regex-null? pat1)
      ((#f)
       (match
        (app regex-null? pat2)
        ((#f)
         (app
          cons
          (app quote alt)
          (app cons pat1 (app cons pat2 (app quote (app))))))
        (_ pat1)))
      (_ pat2))
     <-))
 (menv '(())))
(list 'query: '(app char? (-> re <-)) (menv '(())))
(list
 'query:
 '(app
   cons
   (-> (app quote alt) <-)
   (app cons pat1 (app cons pat2 (app quote (app)))))
 (menv '(())))
(list
 'query:
 '(letrec (debug-trace
           cadr
           caddr
           regex-NULL
           regex-BLANK
           regex-alt?
           regex-seq?
           regex-rep?
           regex-null?
           regex-empty?
           regex-atom?
           match-seq
           match-alt
           match-rep
           (->
            seq
            =
            (λ (pat1 pat2)
              (match
               (app regex-null? pat1)
               ((#f)
                (match
                 (app regex-null? pat2)
                 ((#f)
                  (match
                   (app regex-empty? pat1)
                   ((#f)
                    (match
                     (app regex-empty? pat2)
                     ((#f)
                      (app
                       cons
                       (app quote seq)
                       (app cons pat1 (app cons pat2 (app quote (app))))))
                     (_ pat1)))
                   (_ pat2)))
                 (_ regex-NULL)))
               (_ regex-NULL)))
            <-)
           alt
           rep
           regex-empty
           regex-derivative
           regex-match
           check-expect)
    bod)
 (menv '()))
(list
 'clos/con:
 (list
  (list
   '(λ (pat1 pat2)
      (match
       (app regex-null? pat1)
       ((#f)
        (match
         (app regex-null? pat2)
         ((#f)
          (match
           (app regex-empty? pat1)
           ((#f)
            (match
             (app regex-empty? pat2)
             ((#f)
              (app
               cons
               (app quote seq)
               (app cons pat1 (app cons pat2 (app quote (app))))))
             (_ pat1)))
           (_ pat2)))
         (_ regex-NULL)))
       (_ regex-NULL)))
   (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app alt (-> (app regex-derivative pat1 c) <-) (app regex-derivative pat2 c))
 (menv '(() ())))
(list 'query: '(app regex-empty (-> pat2 <-)) (menv '(() ())))
(list
 'query:
 '(match
   (-> (app regex-empty? pat) <-)
   ((#f) (app cons (app quote rep) (app cons pat (app quote (app)))))
   (_ regex-BLANK))
 (menv '(())))
(list
 'query:
 '(match
   (app regex-null? pat1)
   (->
    (#f)
    (match
     (app regex-null? pat2)
     ((#f)
      (match
       (app regex-empty? pat1)
       ((#f)
        (match
         (app regex-empty? pat2)
         ((#f)
          (app
           cons
           (app quote seq)
           (app cons pat1 (app cons pat2 (app quote (app))))))
         (_ pat1)))
       (_ pat2)))
     (_ regex-NULL))
    <-)
   (_ regex-NULL))
 (menv '(())))
(list 'query: '(app (-> regex-derivative <-) pat1 c) (menv '(() ())))
(list
 'clos/con:
 (list
  (list
   '(λ (re c)
      (let ((_ debug-trace))
        (match
         (app regex-empty? re)
         ((#f)
          (match
           (app regex-null? re)
           ((#f)
            (match
             (app eq? c re)
             ((#f)
              (match
               (app regex-atom? re)
               ((#f)
                (match
                 (app
                  match-seq
                  re
                  (λ (pat1 pat2)
                    (app
                     alt
                     (app seq (app regex-derivative pat1 c) pat2)
                     (app
                      seq
                      (app regex-empty pat1)
                      (app regex-derivative pat2 c)))))
                 ((#f)
                  (match
                   (app
                    match-alt
                    re
                    (λ (pat1 pat2)
                      (app
                       alt
                       (app regex-derivative pat1 c)
                       (app regex-derivative pat2 c))))
                   ((#f)
                    (match
                     (app
                      match-rep
                      re
                      (λ (pat)
                        (app seq (app regex-derivative pat c) (app rep pat))))
                     ((#f) regex-NULL)
                     (_ ())))
                   (_ ())))
                 (_ ())))
               (_ regex-NULL)))
             (_ regex-BLANK)))
           (_ regex-NULL)))
         (_ regex-NULL))))
   (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app eq? (-> (app car re) <-) (app quote rep)) (menv '(())))
(list 'query: '(app symbol? (-> re <-)) (menv '(())))
(list 'query: '(app (-> regex-atom? <-) re) (menv '(())))
(list
 'clos/con:
 (list (list '(λ (re) (app or (app char? re) (app symbol? re))) (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app regex-derivative pat2 (-> c <-)) (menv '(() ())))
(list 'query: '(app regex-null? (-> pat2 <-)) (menv '(())))
(list 'query: '(app quote (-> (app) <-)) (menv '(())))
(list 'query: '(app (-> regex-empty <-) pat1) (menv '(() ())))
(list
 'clos/con:
 (list
  (list
   '(λ (re)
      (match
       (app regex-empty? re)
       ((#f)
        (match
         (app regex-null? re)
         ((#f)
          (match
           (app regex-atom? re)
           ((#f)
            (match
             (app
              match-seq
              re
              (λ (pat1 pat2)
                (app seq (app regex-empty pat1) (app regex-empty pat2))))
             ((#f)
              (match
               (app
                match-alt
                re
                (λ (pat1 pat2)
                  (app alt (app regex-empty pat1) (app regex-empty pat2))))
               ((#f) (match (app regex-rep? re) ((#f) #f) (_ #t)))
               (_ ())))
             (_ ())))
           (_ #f)))
         (_ #f)))
       (_ #t)))
   (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   (-> cons <-)
   (app quote alt)
   (app cons pat1 (app cons pat2 (app quote (app)))))
 (menv '(())))
(list 'clos/con: (list (list 'cons (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app eq? (app car re) (-> (app quote alt) <-)) (menv '(())))
(list
 'query:
 '(app
   check-expect
   (app
    regex-match
    (app quote (app seq foo (app rep bar)))
    (app quote (app foo bar)))
   (-> (app #f) <-))
 (menv '()))
(list 'clos/con: (list (list '(app #f) (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app regex-atom? re) <-)
   ((#f)
    (match
     (app
      match-seq
      re
      (λ (pat1 pat2) (app seq (app regex-empty pat1) (app regex-empty pat2))))
     ((#f)
      (match
       (app
        match-alt
        re
        (λ (pat1 pat2)
          (app alt (app regex-empty pat1) (app regex-empty pat2))))
       ((#f) (match (app regex-rep? re) ((#f) #f) (_ #t)))
       (_ ())))
     (_ ())))
   (_ #f))
 (menv '(())))
(list 'query: '(app regex-null? (-> pat1 <-)) (menv '(())))
(list 'query: '(app rep (-> pat <-)) (menv '(() ())))
(list 'query: '(app cadr (-> re <-)) (menv '(())))
(list 'query: '(app regex-derivative (-> pat1 <-) c) (menv '(() ())))
(list
 'query:
 '(match
   (app null? data)
   (-> (#t) (app regex-empty? (app regex-empty pattern)) <-)
   ((#f)
    (app
     regex-match
     (app regex-derivative pattern (app car data))
     (app cdr data))))
 (menv '(())))
(list
 'query:
 '(letrec ((-> debug-trace = (λ () (app quote do-nothing)) <-)
           cadr
           caddr
           regex-NULL
           regex-BLANK
           regex-alt?
           regex-seq?
           regex-rep?
           regex-null?
           regex-empty?
           regex-atom?
           match-seq
           match-alt
           match-rep
           seq
           alt
           rep
           regex-empty
           regex-derivative
           regex-match
           check-expect)
    bod)
 (menv '()))
(list 'clos/con: (list (list '(λ () (app quote do-nothing)) (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app (-> car <-) (app cdr (app cdr p))) (menv '(())))
(list
 'query:
 '(app seq (-> (app regex-empty pat1) <-) (app regex-derivative pat2 c))
 (menv '(() ())))
(list
 'query:
 '(match
   (app regex-atom? re)
   (->
    (#f)
    (match
     (app
      match-seq
      re
      (λ (pat1 pat2) (app seq (app regex-empty pat1) (app regex-empty pat2))))
     ((#f)
      (match
       (app
        match-alt
        re
        (λ (pat1 pat2)
          (app alt (app regex-empty pat1) (app regex-empty pat2))))
       ((#f) (match (app regex-rep? re) ((#f) #f) (_ #t)))
       (_ ())))
     (_ ()))
    <-)
   (_ #f))
 (menv '(())))
(list
 'query:
 '(app seq (app regex-empty pat1) (-> (app regex-empty pat2) <-))
 (menv '(() ())))
(list
 'query:
 '(λ (pat1 pat2)
    (->
     (app alt (app regex-derivative pat1 c) (app regex-derivative pat2 c))
     <-))
 (menv '(() ())))
(list
 'query:
 '(app (-> regex-empty? <-) (app regex-empty pattern))
 (menv '(())))
(list 'clos/con: (list (list '(λ (re) (app eq? re (app #t))) (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app eq? (-> c <-) re) (menv '(())))
(list 'query: '(app (-> regex-derivative <-) pat c) (menv '(() ())))
(list
 'clos/con:
 (list
  (list
   '(λ (re c)
      (let ((_ debug-trace))
        (match
         (app regex-empty? re)
         ((#f)
          (match
           (app regex-null? re)
           ((#f)
            (match
             (app eq? c re)
             ((#f)
              (match
               (app regex-atom? re)
               ((#f)
                (match
                 (app
                  match-seq
                  re
                  (λ (pat1 pat2)
                    (app
                     alt
                     (app seq (app regex-derivative pat1 c) pat2)
                     (app
                      seq
                      (app regex-empty pat1)
                      (app regex-derivative pat2 c)))))
                 ((#f)
                  (match
                   (app
                    match-alt
                    re
                    (λ (pat1 pat2)
                      (app
                       alt
                       (app regex-derivative pat1 c)
                       (app regex-derivative pat2 c))))
                   ((#f)
                    (match
                     (app
                      match-rep
                      re
                      (λ (pat)
                        (app seq (app regex-derivative pat c) (app rep pat))))
                     ((#f) regex-NULL)
                     (_ ())))
                   (_ ())))
                 (_ ())))
               (_ regex-NULL)))
             (_ regex-BLANK)))
           (_ regex-NULL)))
         (_ regex-NULL))))
   (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app regex-empty? (-> re <-)) (menv '(())))
(list
 'query:
 '(app
   (-> match-alt <-)
   re
   (λ (pat1 pat2)
     (app alt (app regex-derivative pat1 c) (app regex-derivative pat2 c))))
 (menv '(())))
(list
 'clos/con:
 (list
  (list
   '(λ (re f)
      (app and (app regex-alt? re) (app f (app cadr re) (app caddr re))))
   (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app (-> regex-null? <-) pat1) (menv '(())))
(list 'clos/con: (list (list '(λ (re) (app eq? re (app #f))) (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (re)
    (-> (app and (app pair? re) (app eq? (app car re) (app quote seq))) <-))
 (menv '(())))
(list 'query: '(app regex-atom? (-> re <-)) (menv '(())))
(list 'query: '(app quote (-> seq <-)) (menv '(())))
(list
 'clos/con:
 (list
  (list
   '(λ (pat1 pat2)
      (match
       (app regex-null? pat1)
       ((#f)
        (match
         (app regex-null? pat2)
         ((#f)
          (match
           (app regex-empty? pat1)
           ((#f)
            (match
             (app regex-empty? pat2)
             ((#f)
              (app
               cons
               (app quote seq)
               (app cons pat1 (app cons pat2 (app quote (app))))))
             (_ pat1)))
           (_ pat2)))
         (_ regex-NULL)))
       (_ regex-NULL)))
   (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app regex-empty? (-> pat2 <-)) (menv '(())))
(list 'query: '(λ (re) (-> (app eq? re (app #f)) <-)) (menv '(())))
(list
 'query:
 '(app
   (-> match-rep <-)
   re
   (λ (pat) (app seq (app regex-derivative pat c) (app rep pat))))
 (menv '(())))
(list
 'clos/con:
 (list
  (list
   '(λ (re f) (app and (app regex-rep? re) (app f (app cadr re))))
   (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app regex-atom? re)
   ((#f)
    (match
     (app
      match-seq
      re
      (λ (pat1 pat2) (app seq (app regex-empty pat1) (app regex-empty pat2))))
     ((#f)
      (match
       (app
        match-alt
        re
        (λ (pat1 pat2)
          (app alt (app regex-empty pat1) (app regex-empty pat2))))
       ((#f) (match (app regex-rep? re) ((#f) #f) (_ #t)))
       (_ ())))
     (_ ())))
   (-> _ #f <-))
 (menv '(())))
(list 'clos/con: (list (list #f (menv '(())))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app (-> regex-atom? <-) re) (menv '(())))
(list
 'clos/con:
 (list (list '(λ (re) (app or (app char? re) (app symbol? re))) (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app (-> cdr <-) (app cdr p)) (menv '(())))
(list
 'query:
 '(app
   (-> cons <-)
   (app quote seq)
   (app cons pat1 (app cons pat2 (app quote (app)))))
 (menv '(())))
(list 'clos/con: (list (list 'cons (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app f (-> (app cadr re) <-) (app caddr re)) (menv '(())))
(list
 'query:
 '(app
   regex-match
   (-> (app regex-derivative pattern (app car data)) <-)
   (app cdr data))
 (menv '(())))
(list
 'query:
 '(app seq (-> (app regex-derivative pat1 c) <-) pat2)
 (menv '(() ())))
(list
 'query:
 '(app alt (app regex-derivative pat1 c) (-> (app regex-derivative pat2 c) <-))
 (menv '(() ())))
(list 'query: '(app regex-derivative pat (-> c <-)) (menv '(() ())))
(list
 'query:
 '(app (-> cons <-) (app quote rep) (app cons pat (app quote (app))))
 (menv '(())))
(list 'clos/con: (list (list 'cons (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app (-> #f <-)) (menv '(())))
(list 'clos/con: (list (list #f (menv '(())))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(letrec (debug-trace
           (-> cadr = (λ (p) (app car (app cdr p))) <-)
           caddr
           regex-NULL
           regex-BLANK
           regex-alt?
           regex-seq?
           regex-rep?
           regex-null?
           regex-empty?
           regex-atom?
           match-seq
           match-alt
           match-rep
           seq
           alt
           rep
           regex-empty
           regex-derivative
           regex-match
           check-expect)
    bod)
 (menv '()))
(list 'clos/con: (list (list '(λ (p) (app car (app cdr p))) (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app cadr (-> re <-)) (menv '(())))
(list
 'query:
 '(match
   (app
    match-alt
    re
    (λ (pat1 pat2)
      (app alt (app regex-derivative pat1 c) (app regex-derivative pat2 c))))
   (->
    (#f)
    (match
     (app
      match-rep
      re
      (λ (pat) (app seq (app regex-derivative pat c) (app rep pat))))
     ((#f) regex-NULL)
     (_ ()))
    <-)
   (_ ()))
 (menv '(())))
(list
 'query:
 '(letrec (debug-trace
           cadr
           caddr
           regex-NULL
           regex-BLANK
           regex-alt?
           regex-seq?
           regex-rep?
           regex-null?
           regex-empty?
           regex-atom?
           match-seq
           match-alt
           match-rep
           seq
           alt
           rep
           regex-empty
           regex-derivative
           regex-match
           (-> check-expect = (λ (check expect) (app equal? check expect)) <-))
    bod)
 (menv '()))
(list
 'clos/con:
 (list (list '(λ (check expect) (app equal? check expect)) (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app (-> pair? <-) re) (menv '(())))
(list
 'query:
 '(app alt (-> (app regex-empty pat1) <-) (app regex-empty pat2))
 (menv '(() ())))
(list 'query: '(app quote (-> alt <-)) (menv '(())))
(list
 'clos/con:
 (list
  (list
   '(λ (pat1 pat2)
      (match
       (app regex-null? pat1)
       ((#f)
        (match
         (app regex-null? pat2)
         ((#f)
          (app
           cons
           (app quote alt)
           (app cons pat1 (app cons pat2 (app quote (app))))))
         (_ pat1)))
       (_ pat2)))
   (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app (-> #f <-)) (menv '()))
(list 'clos/con: (list (list #f (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app (-> quote <-) (app foo bar)) (menv '()))
(list
 'query:
 '(letrec (debug-trace
           cadr
           caddr
           regex-NULL
           regex-BLANK
           regex-alt?
           regex-seq?
           regex-rep?
           regex-null?
           regex-empty?
           regex-atom?
           match-seq
           match-alt
           match-rep
           seq
           alt
           (->
            rep
            =
            (λ (pat)
              (match
               (app regex-null? pat)
               ((#f)
                (match
                 (app regex-empty? pat)
                 ((#f)
                  (app cons (app quote rep) (app cons pat (app quote (app)))))
                 (_ regex-BLANK)))
               (_ regex-BLANK)))
            <-)
           regex-empty
           regex-derivative
           regex-match
           check-expect)
    bod)
 (menv '()))
(list
 'clos/con:
 (list
  (list
   '(λ (pat)
      (match
       (app regex-null? pat)
       ((#f)
        (match
         (app regex-empty? pat)
         ((#f) (app cons (app quote rep) (app cons pat (app quote (app)))))
         (_ regex-BLANK)))
       (_ regex-BLANK)))
   (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app cons pat2 (-> (app quote (app)) <-)) (menv '(())))
(list 'query: '(app regex-derivative pat1 (-> c <-)) (menv '(() ())))
(list 'query: '(app (-> pair? <-) re) (menv '(())))
(list
 'query:
 '(match
   (app
    match-seq
    re
    (λ (pat1 pat2) (app seq (app regex-empty pat1) (app regex-empty pat2))))
   (->
    (#f)
    (match
     (app
      match-alt
      re
      (λ (pat1 pat2) (app alt (app regex-empty pat1) (app regex-empty pat2))))
     ((#f) (match (app regex-rep? re) ((#f) #f) (_ #t)))
     (_ ()))
    <-)
   (_ ()))
 (menv '(())))
(list 'query: '(app regex-seq? (-> re <-)) (menv '(())))
(list
 'query:
 '(match
   (app
    match-seq
    re
    (λ (pat1 pat2)
      (app
       alt
       (app seq (app regex-derivative pat1 c) pat2)
       (app seq (app regex-empty pat1) (app regex-derivative pat2 c)))))
   ((#f)
    (match
     (app
      match-alt
      re
      (λ (pat1 pat2)
        (app alt (app regex-derivative pat1 c) (app regex-derivative pat2 c))))
     ((#f)
      (match
       (app
        match-rep
        re
        (λ (pat) (app seq (app regex-derivative pat c) (app rep pat))))
       ((#f) regex-NULL)
       (_ ())))
     (_ ())))
   (-> _ () <-))
 (menv '(())))
(list
 'query:
 '(let (_)
    (->
     (match
      (app regex-empty? re)
      ((#f)
       (match
        (app regex-null? re)
        ((#f)
         (match
          (app eq? c re)
          ((#f)
           (match
            (app regex-atom? re)
            ((#f)
             (match
              (app
               match-seq
               re
               (λ (pat1 pat2)
                 (app
                  alt
                  (app seq (app regex-derivative pat1 c) pat2)
                  (app
                   seq
                   (app regex-empty pat1)
                   (app regex-derivative pat2 c)))))
              ((#f)
               (match
                (app
                 match-alt
                 re
                 (λ (pat1 pat2)
                   (app
                    alt
                    (app regex-derivative pat1 c)
                    (app regex-derivative pat2 c))))
                ((#f)
                 (match
                  (app
                   match-rep
                   re
                   (λ (pat)
                     (app seq (app regex-derivative pat c) (app rep pat))))
                  ((#f) regex-NULL)
                  (_ ())))
                (_ ())))
              (_ ())))
            (_ regex-NULL)))
          (_ regex-BLANK)))
        (_ regex-NULL)))
      (_ regex-NULL))
     <-))
 (menv '(())))
(list 'query: '(app (-> car <-) re) (menv '(())))
(list
 'query:
 '(match
   (->
    (app
     match-seq
     re
     (λ (pat1 pat2)
       (app
        alt
        (app seq (app regex-derivative pat1 c) pat2)
        (app seq (app regex-empty pat1) (app regex-derivative pat2 c)))))
    <-)
   ((#f)
    (match
     (app
      match-alt
      re
      (λ (pat1 pat2)
        (app alt (app regex-derivative pat1 c) (app regex-derivative pat2 c))))
     ((#f)
      (match
       (app
        match-rep
        re
        (λ (pat) (app seq (app regex-derivative pat c) (app rep pat))))
       ((#f) regex-NULL)
       (_ ())))
     (_ ())))
   (_ ()))
 (menv '(())))
(list 'query: '(app (-> quote <-) alt) (menv '(())))
(list 'query: '(app (-> regex-null? <-) pat2) (menv '(())))
(list 'clos/con: (list (list '(λ (re) (app eq? re (app #f))) (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app
    match-seq
    re
    (λ (pat1 pat2) (app seq (app regex-empty pat1) (app regex-empty pat2))))
   ((#f)
    (match
     (app
      match-alt
      re
      (λ (pat1 pat2) (app alt (app regex-empty pat1) (app regex-empty pat2))))
     ((#f) (match (app regex-rep? re) ((#f) #f) (_ #t)))
     (_ ())))
   (-> _ () <-))
 (menv '(())))
(list 'query: '(app (-> quote <-) rep) (menv '(())))
(list 'query: '(app seq (-> foo <-) (app rep bar)) (menv '()))
(list
 'query:
 '(match
   (-> (app regex-empty? pat2) <-)
   ((#f)
    (app
     cons
     (app quote seq)
     (app cons pat1 (app cons pat2 (app quote (app))))))
   (_ pat1))
 (menv '(())))
(list
 'query:
 '(app
   match-rep
   re
   (-> (λ (pat) (app seq (app regex-derivative pat c) (app rep pat))) <-))
 (menv '(())))
(list
 'clos/con:
 (list
  (list
   '(λ (pat) (app seq (app regex-derivative pat c) (app rep pat)))
   (menv '(())))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app (-> char? <-) re) (menv '(())))
(list 'query: '(app (-> regex-empty <-) pat1) (menv '(() ())))
(list
 'clos/con:
 (list
  (list
   '(λ (re)
      (match
       (app regex-empty? re)
       ((#f)
        (match
         (app regex-null? re)
         ((#f)
          (match
           (app regex-atom? re)
           ((#f)
            (match
             (app
              match-seq
              re
              (λ (pat1 pat2)
                (app seq (app regex-empty pat1) (app regex-empty pat2))))
             ((#f)
              (match
               (app
                match-alt
                re
                (λ (pat1 pat2)
                  (app alt (app regex-empty pat1) (app regex-empty pat2))))
               ((#f) (match (app regex-rep? re) ((#f) #f) (_ #t)))
               (_ ())))
             (_ ())))
           (_ #f)))
         (_ #f)))
       (_ #t)))
   (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   cons
   (app quote alt)
   (-> (app cons pat1 (app cons pat2 (app quote (app)))) <-))
 (menv '(())))
(list
 'clos/con:
 (list (list '(app cons pat1 (app cons pat2 (app quote (app)))) (menv '(())))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app (-> eq? <-) re (app #f)) (menv '(())))
(list 'query: '(app quote (-> do-nothing <-)) (menv '(())))
(list
 'query:
 '(app (-> cons <-) pat1 (app cons pat2 (app quote (app))))
 (menv '(())))
(list 'clos/con: (list (list 'cons (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app (-> regex-empty <-) pat2) (menv '(() ())))
(list
 'clos/con:
 (list
  (list
   '(λ (re)
      (match
       (app regex-empty? re)
       ((#f)
        (match
         (app regex-null? re)
         ((#f)
          (match
           (app regex-atom? re)
           ((#f)
            (match
             (app
              match-seq
              re
              (λ (pat1 pat2)
                (app seq (app regex-empty pat1) (app regex-empty pat2))))
             ((#f)
              (match
               (app
                match-alt
                re
                (λ (pat1 pat2)
                  (app alt (app regex-empty pat1) (app regex-empty pat2))))
               ((#f) (match (app regex-rep? re) ((#f) #f) (_ #t)))
               (_ ())))
             (_ ())))
           (_ #f)))
         (_ #f)))
       (_ #t)))
   (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app (-> regex-empty <-) pat1) (menv '(() ())))
(list
 'clos/con:
 (list
  (list
   '(λ (re)
      (match
       (app regex-empty? re)
       ((#f)
        (match
         (app regex-null? re)
         ((#f)
          (match
           (app regex-atom? re)
           ((#f)
            (match
             (app
              match-seq
              re
              (λ (pat1 pat2)
                (app seq (app regex-empty pat1) (app regex-empty pat2))))
             ((#f)
              (match
               (app
                match-alt
                re
                (λ (pat1 pat2)
                  (app alt (app regex-empty pat1) (app regex-empty pat2))))
               ((#f) (match (app regex-rep? re) ((#f) #f) (_ #t)))
               (_ ())))
             (_ ())))
           (_ #f)))
         (_ #f)))
       (_ #t)))
   (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app regex-alt? (-> re <-)) (menv '(())))
(list 'query: '(app (-> regex-derivative <-) pat2 c) (menv '(() ())))
(list
 'clos/con:
 (list
  (list
   '(λ (re c)
      (let ((_ debug-trace))
        (match
         (app regex-empty? re)
         ((#f)
          (match
           (app regex-null? re)
           ((#f)
            (match
             (app eq? c re)
             ((#f)
              (match
               (app regex-atom? re)
               ((#f)
                (match
                 (app
                  match-seq
                  re
                  (λ (pat1 pat2)
                    (app
                     alt
                     (app seq (app regex-derivative pat1 c) pat2)
                     (app
                      seq
                      (app regex-empty pat1)
                      (app regex-derivative pat2 c)))))
                 ((#f)
                  (match
                   (app
                    match-alt
                    re
                    (λ (pat1 pat2)
                      (app
                       alt
                       (app regex-derivative pat1 c)
                       (app regex-derivative pat2 c))))
                   ((#f)
                    (match
                     (app
                      match-rep
                      re
                      (λ (pat)
                        (app seq (app regex-derivative pat c) (app rep pat))))
                     ((#f) regex-NULL)
                     (_ ())))
                   (_ ())))
                 (_ ())))
               (_ regex-NULL)))
             (_ regex-BLANK)))
           (_ regex-NULL)))
         (_ regex-NULL))))
   (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app (-> cons <-) pat2 (app quote (app))) (menv '(())))
(list 'clos/con: (list (list 'cons (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(letrec (debug-trace
           cadr
           caddr
           regex-NULL
           regex-BLANK
           regex-alt?
           regex-seq?
           regex-rep?
           (-> regex-null? = (λ (re) (app eq? re (app #f))) <-)
           regex-empty?
           regex-atom?
           match-seq
           match-alt
           match-rep
           seq
           alt
           rep
           regex-empty
           regex-derivative
           regex-match
           check-expect)
    bod)
 (menv '()))
(list 'clos/con: (list (list '(λ (re) (app eq? re (app #f))) (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app and (-> (app regex-rep? re) <-) (app f (app cadr re)))
 (menv '(())))
(list 'query: '(app car (-> re <-)) (menv '(())))
(list
 'query:
 '(match
   (app regex-null? pat2)
   ((#f)
    (app
     cons
     (app quote alt)
     (app cons pat1 (app cons pat2 (app quote (app))))))
   (-> _ pat1 <-))
 (menv '(())))
(list 'query: '(app (-> caddr <-) re) (menv '(())))
(list
 'clos/con:
 (list (list '(λ (p) (app car (app cdr (app cdr p)))) (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app (-> quote <-) alt) (menv '(())))
(list
 'query:
 '(app
   alt
   (app seq (app regex-derivative pat1 c) pat2)
   (-> (app seq (app regex-empty pat1) (app regex-derivative pat2 c)) <-))
 (menv '(() ())))
(list 'query: '(app (-> rep <-) pat) (menv '(() ())))
(list
 'clos/con:
 (list
  (list
   '(λ (pat)
      (match
       (app regex-null? pat)
       ((#f)
        (match
         (app regex-empty? pat)
         ((#f) (app cons (app quote rep) (app cons pat (app quote (app)))))
         (_ regex-BLANK)))
       (_ regex-BLANK)))
   (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app (-> seq <-) foo (app rep bar)) (menv '()))
(list
 'clos/con:
 (list
  (list
   '(λ (pat1 pat2)
      (match
       (app regex-null? pat1)
       ((#f)
        (match
         (app regex-null? pat2)
         ((#f)
          (match
           (app regex-empty? pat1)
           ((#f)
            (match
             (app regex-empty? pat2)
             ((#f)
              (app
               cons
               (app quote seq)
               (app cons pat1 (app cons pat2 (app quote (app))))))
             (_ pat1)))
           (_ pat2)))
         (_ regex-NULL)))
       (_ regex-NULL)))
   (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app regex-derivative (-> pat <-) c) (menv '(() ())))
(list 'query: '(app cdr (-> p <-)) (menv '(())))
(list
 'query:
 '(match
   (app regex-empty? re)
   (->
    (#f)
    (match
     (app regex-null? re)
     ((#f)
      (match
       (app regex-atom? re)
       ((#f)
        (match
         (app
          match-seq
          re
          (λ (pat1 pat2)
            (app seq (app regex-empty pat1) (app regex-empty pat2))))
         ((#f)
          (match
           (app
            match-alt
            re
            (λ (pat1 pat2)
              (app alt (app regex-empty pat1) (app regex-empty pat2))))
           ((#f) (match (app regex-rep? re) ((#f) #f) (_ #t)))
           (_ ())))
         (_ ())))
       (_ #f)))
     (_ #f))
    <-)
   (_ #t))
 (menv '(())))
(list
 'query:
 '(app
   (-> alt <-)
   (app seq (app regex-derivative pat1 c) pat2)
   (app seq (app regex-empty pat1) (app regex-derivative pat2 c)))
 (menv '(() ())))
(list
 'clos/con:
 (list
  (list
   '(λ (pat1 pat2)
      (match
       (app regex-null? pat1)
       ((#f)
        (match
         (app regex-null? pat2)
         ((#f)
          (app
           cons
           (app quote alt)
           (app cons pat1 (app cons pat2 (app quote (app))))))
         (_ pat1)))
       (_ pat2)))
   (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app regex-null? re)
   (->
    (#f)
    (match
     (app eq? c re)
     ((#f)
      (match
       (app regex-atom? re)
       ((#f)
        (match
         (app
          match-seq
          re
          (λ (pat1 pat2)
            (app
             alt
             (app seq (app regex-derivative pat1 c) pat2)
             (app seq (app regex-empty pat1) (app regex-derivative pat2 c)))))
         ((#f)
          (match
           (app
            match-alt
            re
            (λ (pat1 pat2)
              (app
               alt
               (app regex-derivative pat1 c)
               (app regex-derivative pat2 c))))
           ((#f)
            (match
             (app
              match-rep
              re
              (λ (pat) (app seq (app regex-derivative pat c) (app rep pat))))
             ((#f) regex-NULL)
             (_ ())))
           (_ ())))
         (_ ())))
       (_ regex-NULL)))
     (_ regex-BLANK))
    <-)
   (_ regex-NULL))
 (menv '(())))
(list 'query: '(app eq? (-> re <-) (app #f)) (menv '(())))
(list
 'query:
 '(app (-> and <-) (app regex-alt? re) (app f (app cadr re) (app caddr re)))
 (menv '(())))
'(clos/con: (#<procedure:do-demand-and>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app car (-> data <-)) (menv '(())))
(list 'query: '(app eq? re (-> (app #f) <-)) (menv '(())))
(list 'clos/con: (list (list '(app #f) (menv '(())))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app cdr (-> p <-)) (menv '(())))
(list
 'query:
 '(letrec (debug-trace
           cadr
           caddr
           regex-NULL
           regex-BLANK
           regex-alt?
           (->
            regex-seq?
            =
            (λ (re)
              (app and (app pair? re) (app eq? (app car re) (app quote seq))))
            <-)
           regex-rep?
           regex-null?
           regex-empty?
           regex-atom?
           match-seq
           match-alt
           match-rep
           seq
           alt
           rep
           regex-empty
           regex-derivative
           regex-match
           check-expect)
    bod)
 (menv '()))
(list
 'clos/con:
 (list
  (list
   '(λ (re) (app and (app pair? re) (app eq? (app car re) (app quote seq))))
   (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app (-> quote <-) (app)) (menv '(())))
(list 'query: '(app null? (-> data <-)) (menv '(())))
(list 'query: '(app regex-empty (-> pat2 <-)) (menv '(() ())))
(list
 'query:
 '(app cons (app quote rep) (-> (app cons pat (app quote (app))) <-))
 (menv '(())))
(list 'clos/con: (list (list '(app cons pat (app quote (app))) (menv '(())))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   match-alt
   (-> re <-)
   (λ (pat1 pat2) (app alt (app regex-empty pat1) (app regex-empty pat2))))
 (menv '(())))
(list
 'query:
 '(letrec (debug-trace
           cadr
           caddr
           regex-NULL
           regex-BLANK
           regex-alt?
           regex-seq?
           regex-rep?
           regex-null?
           regex-empty?
           regex-atom?
           (->
            match-seq
            =
            (λ (re f)
              (app
               and
               (app regex-seq? re)
               (app f (app cadr re) (app caddr re))))
            <-)
           match-alt
           match-rep
           seq
           alt
           rep
           regex-empty
           regex-derivative
           regex-match
           check-expect)
    bod)
 (menv '()))
(list
 'clos/con:
 (list
  (list
   '(λ (re f)
      (app and (app regex-seq? re) (app f (app cadr re) (app caddr re))))
   (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app (-> caddr <-) re) (menv '(())))
(list
 'clos/con:
 (list (list '(λ (p) (app car (app cdr (app cdr p)))) (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(letrec (debug-trace
           cadr
           caddr
           regex-NULL
           regex-BLANK
           regex-alt?
           regex-seq?
           regex-rep?
           regex-null?
           regex-empty?
           regex-atom?
           match-seq
           match-alt
           (->
            match-rep
            =
            (λ (re f) (app and (app regex-rep? re) (app f (app cadr re))))
            <-)
           seq
           alt
           rep
           regex-empty
           regex-derivative
           regex-match
           check-expect)
    bod)
 (menv '()))
(list
 'clos/con:
 (list
  (list
   '(λ (re f) (app and (app regex-rep? re) (app f (app cadr re))))
   (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app regex-empty? re) <-)
   ((#f)
    (match
     (app regex-null? re)
     ((#f)
      (match
       (app eq? c re)
       ((#f)
        (match
         (app regex-atom? re)
         ((#f)
          (match
           (app
            match-seq
            re
            (λ (pat1 pat2)
              (app
               alt
               (app seq (app regex-derivative pat1 c) pat2)
               (app
                seq
                (app regex-empty pat1)
                (app regex-derivative pat2 c)))))
           ((#f)
            (match
             (app
              match-alt
              re
              (λ (pat1 pat2)
                (app
                 alt
                 (app regex-derivative pat1 c)
                 (app regex-derivative pat2 c))))
             ((#f)
              (match
               (app
                match-rep
                re
                (λ (pat) (app seq (app regex-derivative pat c) (app rep pat))))
               ((#f) regex-NULL)
               (_ ())))
             (_ ())))
           (_ ())))
         (_ regex-NULL)))
       (_ regex-BLANK)))
     (_ regex-NULL)))
   (_ regex-NULL))
 (menv '(())))
(list
 'query:
 '(match
   (app eq? c re)
   (->
    (#f)
    (match
     (app regex-atom? re)
     ((#f)
      (match
       (app
        match-seq
        re
        (λ (pat1 pat2)
          (app
           alt
           (app seq (app regex-derivative pat1 c) pat2)
           (app seq (app regex-empty pat1) (app regex-derivative pat2 c)))))
       ((#f)
        (match
         (app
          match-alt
          re
          (λ (pat1 pat2)
            (app
             alt
             (app regex-derivative pat1 c)
             (app regex-derivative pat2 c))))
         ((#f)
          (match
           (app
            match-rep
            re
            (λ (pat) (app seq (app regex-derivative pat c) (app rep pat))))
           ((#f) regex-NULL)
           (_ ())))
         (_ ())))
       (_ ())))
     (_ regex-NULL))
    <-)
   (_ regex-BLANK))
 (menv '(())))
(list
 'query:
 '(letrec (debug-trace
           cadr
           caddr
           regex-NULL
           regex-BLANK
           regex-alt?
           regex-seq?
           regex-rep?
           regex-null?
           regex-empty?
           regex-atom?
           match-seq
           match-alt
           match-rep
           seq
           alt
           rep
           regex-empty
           regex-derivative
           (->
            regex-match
            =
            (λ (pattern data)
              (match
               (app null? data)
               ((#t) (app regex-empty? (app regex-empty pattern)))
               ((#f)
                (app
                 regex-match
                 (app regex-derivative pattern (app car data))
                 (app cdr data)))))
            <-)
           check-expect)
    bod)
 (menv '()))
(list
 'clos/con:
 (list
  (list
   '(λ (pattern data)
      (match
       (app null? data)
       ((#t) (app regex-empty? (app regex-empty pattern)))
       ((#f)
        (app
         regex-match
         (app regex-derivative pattern (app car data))
         (app cdr data)))))
   (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app and (-> (app regex-alt? re) <-) (app f (app cadr re) (app caddr re)))
 (menv '(())))
(list 'query: '(app regex-derivative (-> pat2 <-) c) (menv '(() ())))
(list
 'query:
 '(λ (pat1 pat2)
    (->
     (match
      (app regex-null? pat1)
      ((#f)
       (match
        (app regex-null? pat2)
        ((#f)
         (match
          (app regex-empty? pat1)
          ((#f)
           (match
            (app regex-empty? pat2)
            ((#f)
             (app
              cons
              (app quote seq)
              (app cons pat1 (app cons pat2 (app quote (app))))))
            (_ pat1)))
          (_ pat2)))
        (_ regex-NULL)))
      (_ regex-NULL))
     <-))
 (menv '(())))
(list 'query: '(app (-> quote <-) (app)) (menv '(())))
(list
 'query:
 '(app
   cons
   (-> (app quote seq) <-)
   (app cons pat1 (app cons pat2 (app quote (app)))))
 (menv '(())))
(list
 'query:
 '(match
   (app regex-null? pat)
   (->
    (#f)
    (match
     (app regex-empty? pat)
     ((#f) (app cons (app quote rep) (app cons pat (app quote (app)))))
     (_ regex-BLANK))
    <-)
   (_ regex-BLANK))
 (menv '(())))
(list 'query: '(app eq? (app car re) (-> (app quote seq) <-)) (menv '(())))
(list 'query: '(app equal? check (-> expect <-)) (menv '(())))
(list
 'query:
 '(λ (pat) (-> (app seq (app regex-derivative pat c) (app rep pat)) <-))
 (menv '(() ())))
(list
 'query:
 '(λ (pat)
    (->
     (match
      (app regex-null? pat)
      ((#f)
       (match
        (app regex-empty? pat)
        ((#f) (app cons (app quote rep) (app cons pat (app quote (app)))))
        (_ regex-BLANK)))
      (_ regex-BLANK))
     <-))
 (menv '(())))
(list
 'query:
 '(app
   (-> match-seq <-)
   re
   (λ (pat1 pat2) (app seq (app regex-empty pat1) (app regex-empty pat2))))
 (menv '(())))
(list
 'clos/con:
 (list
  (list
   '(λ (re f)
      (app and (app regex-seq? re) (app f (app cadr re) (app caddr re))))
   (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app null? data) <-)
   ((#t) (app regex-empty? (app regex-empty pattern)))
   ((#f)
    (app
     regex-match
     (app regex-derivative pattern (app car data))
     (app cdr data))))
 (menv '(())))
(list
 'query:
 '(λ (re)
    (->
     (match
      (app regex-empty? re)
      ((#f)
       (match
        (app regex-null? re)
        ((#f)
         (match
          (app regex-atom? re)
          ((#f)
           (match
            (app
             match-seq
             re
             (λ (pat1 pat2)
               (app seq (app regex-empty pat1) (app regex-empty pat2))))
            ((#f)
             (match
              (app
               match-alt
               re
               (λ (pat1 pat2)
                 (app alt (app regex-empty pat1) (app regex-empty pat2))))
              ((#f) (match (app regex-rep? re) ((#f) #f) (_ #t)))
              (_ ())))
            (_ ())))
          (_ #f)))
        (_ #f)))
      (_ #t))
     <-))
 (menv '(())))
(list
 'query:
 '(app
   regex-match
   (app regex-derivative pattern (app car data))
   (-> (app cdr data) <-))
 (menv '(())))
(list
 'query:
 '(app and (-> (app pair? re) <-) (app eq? (app car re) (app quote seq)))
 (menv '(())))
(list
 'query:
 '(match
   (-> (app eq? c re) <-)
   ((#f)
    (match
     (app regex-atom? re)
     ((#f)
      (match
       (app
        match-seq
        re
        (λ (pat1 pat2)
          (app
           alt
           (app seq (app regex-derivative pat1 c) pat2)
           (app seq (app regex-empty pat1) (app regex-derivative pat2 c)))))
       ((#f)
        (match
         (app
          match-alt
          re
          (λ (pat1 pat2)
            (app
             alt
             (app regex-derivative pat1 c)
             (app regex-derivative pat2 c))))
         ((#f)
          (match
           (app
            match-rep
            re
            (λ (pat) (app seq (app regex-derivative pat c) (app rep pat))))
           ((#f) regex-NULL)
           (_ ())))
         (_ ())))
       (_ ())))
     (_ regex-NULL)))
   (_ regex-BLANK))
 (menv '(())))
(list 'query: '(app (-> cdr <-) p) (menv '(())))
(list
 'query:
 '(match
   (app regex-atom? re)
   ((#f)
    (match
     (app
      match-seq
      re
      (λ (pat1 pat2)
        (app
         alt
         (app seq (app regex-derivative pat1 c) pat2)
         (app seq (app regex-empty pat1) (app regex-derivative pat2 c)))))
     ((#f)
      (match
       (app
        match-alt
        re
        (λ (pat1 pat2)
          (app
           alt
           (app regex-derivative pat1 c)
           (app regex-derivative pat2 c))))
       ((#f)
        (match
         (app
          match-rep
          re
          (λ (pat) (app seq (app regex-derivative pat c) (app rep pat))))
         ((#f) regex-NULL)
         (_ ())))
       (_ ())))
     (_ ())))
   (-> _ regex-NULL <-))
 (menv '(())))
(list 'clos/con: (list (list #f (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app regex-null? pat)
   ((#f)
    (match
     (app regex-empty? pat)
     ((#f) (app cons (app quote rep) (app cons pat (app quote (app)))))
     (_ regex-BLANK)))
   (-> _ regex-BLANK <-))
 (menv '(())))
(list 'clos/con: (list (list #t (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app regex-null? pat1)
   (->
    (#f)
    (match
     (app regex-null? pat2)
     ((#f)
      (app
       cons
       (app quote alt)
       (app cons pat1 (app cons pat2 (app quote (app))))))
     (_ pat1))
    <-)
   (_ pat2))
 (menv '(())))
(list 'query: '(app or (app char? re) (-> (app symbol? re) <-)) (menv '(())))
(list
 'query:
 '(app seq (app regex-derivative pat1 c) (-> pat2 <-))
 (menv '(() ())))
(list 'query: '(λ (p) (-> (app car (app cdr (app cdr p))) <-)) (menv '(())))
(list 'query: '(app regex-rep? (-> re <-)) (menv '(())))
(list 'query: '(app f (-> (app cadr re) <-) (app caddr re)) (menv '(())))
(list 'query: '(app (-> regex-null? <-) pat2) (menv '(())))
(list 'clos/con: (list (list '(λ (re) (app eq? re (app #f))) (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (check expect) (-> (app equal? check expect) <-))
 (menv '(())))
(list
 'query:
 '(app
   (-> match-seq <-)
   re
   (λ (pat1 pat2)
     (app
      alt
      (app seq (app regex-derivative pat1 c) pat2)
      (app seq (app regex-empty pat1) (app regex-derivative pat2 c)))))
 (menv '(())))
(list
 'clos/con:
 (list
  (list
   '(λ (re f)
      (app and (app regex-seq? re) (app f (app cadr re) (app caddr re))))
   (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app regex-empty? re)
   (->
    (#f)
    (match
     (app regex-null? re)
     ((#f)
      (match
       (app eq? c re)
       ((#f)
        (match
         (app regex-atom? re)
         ((#f)
          (match
           (app
            match-seq
            re
            (λ (pat1 pat2)
              (app
               alt
               (app seq (app regex-derivative pat1 c) pat2)
               (app
                seq
                (app regex-empty pat1)
                (app regex-derivative pat2 c)))))
           ((#f)
            (match
             (app
              match-alt
              re
              (λ (pat1 pat2)
                (app
                 alt
                 (app regex-derivative pat1 c)
                 (app regex-derivative pat2 c))))
             ((#f)
              (match
               (app
                match-rep
                re
                (λ (pat) (app seq (app regex-derivative pat c) (app rep pat))))
               ((#f) regex-NULL)
               (_ ())))
             (_ ())))
           (_ ())))
         (_ regex-NULL)))
       (_ regex-BLANK)))
     (_ regex-NULL))
    <-)
   (_ regex-NULL))
 (menv '(())))
(list
 'query:
 '(app
   match-rep
   (-> re <-)
   (λ (pat) (app seq (app regex-derivative pat c) (app rep pat))))
 (menv '(())))
(list 'query: '(λ () (-> (app quote do-nothing) <-)) (menv '(())))
(list
 'query:
 '(letrec (debug-trace
           cadr
           caddr
           (-> regex-NULL = #f <-)
           regex-BLANK
           regex-alt?
           regex-seq?
           regex-rep?
           regex-null?
           regex-empty?
           regex-atom?
           match-seq
           match-alt
           match-rep
           seq
           alt
           rep
           regex-empty
           regex-derivative
           regex-match
           check-expect)
    bod)
 (menv '()))
(list 'clos/con: (list (list #f (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app eq? c (-> re <-)) (menv '(())))
(list
 'query:
 '(app
   match-alt
   re
   (->
    (λ (pat1 pat2)
      (app alt (app regex-derivative pat1 c) (app regex-derivative pat2 c)))
    <-))
 (menv '(())))
(list
 'clos/con:
 (list
  (list
   '(λ (pat1 pat2)
      (app alt (app regex-derivative pat1 c) (app regex-derivative pat2 c)))
   (menv '(())))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   cons
   (app quote seq)
   (-> (app cons pat1 (app cons pat2 (app quote (app)))) <-))
 (menv '(())))
(list
 'clos/con:
 (list (list '(app cons pat1 (app cons pat2 (app quote (app)))) (menv '(())))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   (-> regex-match <-)
   (app quote (app seq foo (app rep bar)))
   (app quote (app foo bar)))
 (menv '()))
(list
 'clos/con:
 (list
  (list
   '(λ (pattern data)
      (match
       (app null? data)
       ((#t) (app regex-empty? (app regex-empty pattern)))
       ((#f)
        (app
         regex-match
         (app regex-derivative pattern (app car data))
         (app cdr data)))))
   (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app (-> regex-seq? <-) re) (menv '(())))
(list
 'clos/con:
 (list
  (list
   '(λ (re) (app and (app pair? re) (app eq? (app car re) (app quote seq))))
   (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app (-> regex-empty? <-) re) (menv '(())))
(list 'clos/con: (list (list '(λ (re) (app eq? re (app #t))) (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app quote (-> alt <-)) (menv '(())))
(list
 'clos/con:
 (list
  (list
   '(λ (pat1 pat2)
      (match
       (app regex-null? pat1)
       ((#f)
        (match
         (app regex-null? pat2)
         ((#f)
          (app
           cons
           (app quote alt)
           (app cons pat1 (app cons pat2 (app quote (app))))))
         (_ pat1)))
       (_ pat2)))
   (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app regex-null? pat2)
   (->
    (#f)
    (app
     cons
     (app quote alt)
     (app cons pat1 (app cons pat2 (app quote (app)))))
    <-)
   (_ pat1))
 (menv '(())))
(list
 'clos/con:
 (list
  (list
   '(app
     cons
     (app quote alt)
     (app cons pat1 (app cons pat2 (app quote (app)))))
   (menv '(())))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(let ((-> _ = debug-trace <-)) bod) (menv '(())))
(list 'clos/con: (list (list '(λ () (app quote do-nothing)) (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app regex-empty? pat1)
   (->
    (#f)
    (match
     (app regex-empty? pat2)
     ((#f)
      (app
       cons
       (app quote seq)
       (app cons pat1 (app cons pat2 (app quote (app))))))
     (_ pat1))
    <-)
   (_ pat2))
 (menv '(())))
(list 'query: '(app cons (-> pat2 <-) (app quote (app))) (menv '(())))
(list 'query: '(app car (-> (app cdr p) <-)) (menv '(())))
(list
 'query:
 '(letrec (debug-trace
           cadr
           caddr
           regex-NULL
           regex-BLANK
           regex-alt?
           regex-seq?
           regex-rep?
           regex-null?
           (-> regex-empty? = (λ (re) (app eq? re (app #t))) <-)
           regex-atom?
           match-seq
           match-alt
           match-rep
           seq
           alt
           rep
           regex-empty
           regex-derivative
           regex-match
           check-expect)
    bod)
 (menv '()))
(list 'clos/con: (list (list '(λ (re) (app eq? re (app #t))) (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> and <-) (app pair? re) (app eq? (app car re) (app quote seq)))
 (menv '(())))
'(clos/con: (#<procedure:do-demand-and>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   (-> regex-match <-)
   (app regex-derivative pattern (app car data))
   (app cdr data))
 (menv '(())))
(list
 'clos/con:
 (list
  (list
   '(λ (pattern data)
      (match
       (app null? data)
       ((#t) (app regex-empty? (app regex-empty pattern)))
       ((#f)
        (app
         regex-match
         (app regex-derivative pattern (app car data))
         (app cdr data)))))
   (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   (-> match-alt <-)
   re
   (λ (pat1 pat2) (app alt (app regex-empty pat1) (app regex-empty pat2))))
 (menv '(())))
(list
 'clos/con:
 (list
  (list
   '(λ (re f)
      (app and (app regex-alt? re) (app f (app cadr re) (app caddr re))))
   (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app (-> car <-) re) (menv '(())))
(list 'query: '(app regex-empty (-> pat1 <-)) (menv '(() ())))
(list
 'query:
 '(app (-> alt <-) (app regex-empty pat1) (app regex-empty pat2))
 (menv '(() ())))
(list
 'clos/con:
 (list
  (list
   '(λ (pat1 pat2)
      (match
       (app regex-null? pat1)
       ((#f)
        (match
         (app regex-null? pat2)
         ((#f)
          (app
           cons
           (app quote alt)
           (app cons pat1 (app cons pat2 (app quote (app))))))
         (_ pat1)))
       (_ pat2)))
   (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app regex-derivative pat1 (-> c <-)) (menv '(() ())))
(list 'query: '(app quote (-> (app) <-)) (menv '(())))
(list
 'query:
 '(app and (app regex-alt? re) (-> (app f (app cadr re) (app caddr re)) <-))
 (menv '(())))
(list
 'query:
 '(letrec (debug-trace
           cadr
           caddr
           regex-NULL
           regex-BLANK
           regex-alt?
           regex-seq?
           regex-rep?
           regex-null?
           regex-empty?
           regex-atom?
           match-seq
           match-alt
           match-rep
           seq
           alt
           rep
           regex-empty
           (->
            regex-derivative
            =
            (λ (re c)
              (let ((_ debug-trace))
                (match
                 (app regex-empty? re)
                 ((#f)
                  (match
                   (app regex-null? re)
                   ((#f)
                    (match
                     (app eq? c re)
                     ((#f)
                      (match
                       (app regex-atom? re)
                       ((#f)
                        (match
                         (app
                          match-seq
                          re
                          (λ (pat1 pat2)
                            (app
                             alt
                             (app seq (app regex-derivative pat1 c) pat2)
                             (app
                              seq
                              (app regex-empty pat1)
                              (app regex-derivative pat2 c)))))
                         ((#f)
                          (match
                           (app
                            match-alt
                            re
                            (λ (pat1 pat2)
                              (app
                               alt
                               (app regex-derivative pat1 c)
                               (app regex-derivative pat2 c))))
                           ((#f)
                            (match
                             (app
                              match-rep
                              re
                              (λ (pat)
                                (app
                                 seq
                                 (app regex-derivative pat c)
                                 (app rep pat))))
                             ((#f) regex-NULL)
                             (_ ())))
                           (_ ())))
                         (_ ())))
                       (_ regex-NULL)))
                     (_ regex-BLANK)))
                   (_ regex-NULL)))
                 (_ regex-NULL))))
            <-)
           regex-match
           check-expect)
    bod)
 (menv '()))
(list
 'clos/con:
 (list
  (list
   '(λ (re c)
      (let ((_ debug-trace))
        (match
         (app regex-empty? re)
         ((#f)
          (match
           (app regex-null? re)
           ((#f)
            (match
             (app eq? c re)
             ((#f)
              (match
               (app regex-atom? re)
               ((#f)
                (match
                 (app
                  match-seq
                  re
                  (λ (pat1 pat2)
                    (app
                     alt
                     (app seq (app regex-derivative pat1 c) pat2)
                     (app
                      seq
                      (app regex-empty pat1)
                      (app regex-derivative pat2 c)))))
                 ((#f)
                  (match
                   (app
                    match-alt
                    re
                    (λ (pat1 pat2)
                      (app
                       alt
                       (app regex-derivative pat1 c)
                       (app regex-derivative pat2 c))))
                   ((#f)
                    (match
                     (app
                      match-rep
                      re
                      (λ (pat)
                        (app seq (app regex-derivative pat c) (app rep pat))))
                     ((#f) regex-NULL)
                     (_ ())))
                   (_ ())))
                 (_ ())))
               (_ regex-NULL)))
             (_ regex-BLANK)))
           (_ regex-NULL)))
         (_ regex-NULL))))
   (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app regex-null? (-> pat1 <-)) (menv '(())))
(list
 'query:
 '(app cons (-> pat1 <-) (app cons pat2 (app quote (app))))
 (menv '(())))
(list 'query: '(app (-> quote <-) seq) (menv '(())))
(list 'query: '(app quote (-> (app seq foo (app rep bar)) <-)) (menv '()))
(list
 'query:
 '(app seq (app regex-derivative pat c) (-> (app rep pat) <-))
 (menv '(() ())))
(list
 'query:
 '(match
   (-> (app regex-null? pat) <-)
   ((#f)
    (match
     (app regex-empty? pat)
     ((#f) (app cons (app quote rep) (app cons pat (app quote (app)))))
     (_ regex-BLANK)))
   (_ regex-BLANK))
 (menv '(())))
(list 'query: '(app (-> regex-derivative <-) pat1 c) (menv '(() ())))
(list
 'clos/con:
 (list
  (list
   '(λ (re c)
      (let ((_ debug-trace))
        (match
         (app regex-empty? re)
         ((#f)
          (match
           (app regex-null? re)
           ((#f)
            (match
             (app eq? c re)
             ((#f)
              (match
               (app regex-atom? re)
               ((#f)
                (match
                 (app
                  match-seq
                  re
                  (λ (pat1 pat2)
                    (app
                     alt
                     (app seq (app regex-derivative pat1 c) pat2)
                     (app
                      seq
                      (app regex-empty pat1)
                      (app regex-derivative pat2 c)))))
                 ((#f)
                  (match
                   (app
                    match-alt
                    re
                    (λ (pat1 pat2)
                      (app
                       alt
                       (app regex-derivative pat1 c)
                       (app regex-derivative pat2 c))))
                   ((#f)
                    (match
                     (app
                      match-rep
                      re
                      (λ (pat)
                        (app seq (app regex-derivative pat c) (app rep pat))))
                     ((#f) regex-NULL)
                     (_ ())))
                   (_ ())))
                 (_ ())))
               (_ regex-NULL)))
             (_ regex-BLANK)))
           (_ regex-NULL)))
         (_ regex-NULL))))
   (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app
    match-alt
    re
    (λ (pat1 pat2)
      (app alt (app regex-derivative pat1 c) (app regex-derivative pat2 c))))
   ((#f)
    (match
     (app
      match-rep
      re
      (λ (pat) (app seq (app regex-derivative pat c) (app rep pat))))
     ((#f) regex-NULL)
     (_ ())))
   (-> _ () <-))
 (menv '(())))
(list 'query: '(app caddr (-> re <-)) (menv '(())))
(list
 'query:
 '(λ (pattern data)
    (->
     (match
      (app null? data)
      ((#t) (app regex-empty? (app regex-empty pattern)))
      ((#f)
       (app
        regex-match
        (app regex-derivative pattern (app car data))
        (app cdr data))))
     <-))
 (menv '(())))
(list
 'query:
 '(match
   (-> (app regex-null? pat1) <-)
   ((#f)
    (match
     (app regex-null? pat2)
     ((#f)
      (match
       (app regex-empty? pat1)
       ((#f)
        (match
         (app regex-empty? pat2)
         ((#f)
          (app
           cons
           (app quote seq)
           (app cons pat1 (app cons pat2 (app quote (app))))))
         (_ pat1)))
       (_ pat2)))
     (_ regex-NULL)))
   (_ regex-NULL))
 (menv '(())))
(list
 'query:
 '(match
   (->
    (app
     match-alt
     re
     (λ (pat1 pat2) (app alt (app regex-empty pat1) (app regex-empty pat2))))
    <-)
   ((#f) (match (app regex-rep? re) ((#f) #f) (_ #t)))
   (_ ()))
 (menv '(())))
(list
 'query:
 '(app
   match-alt
   (-> re <-)
   (λ (pat1 pat2)
     (app alt (app regex-derivative pat1 c) (app regex-derivative pat2 c))))
 (menv '(())))
(list
 'query:
 '(match
   (app
    match-alt
    re
    (λ (pat1 pat2) (app alt (app regex-empty pat1) (app regex-empty pat2))))
   (-> (#f) (match (app regex-rep? re) ((#f) #f) (_ #t)) <-)
   (_ ()))
 (menv '(())))
(list 'query: '(app (-> cadr <-) re) (menv '(())))
(list 'clos/con: (list (list '(λ (p) (app car (app cdr p))) (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(letrec (debug-trace
           cadr
           caddr
           regex-NULL
           regex-BLANK
           regex-alt?
           regex-seq?
           regex-rep?
           regex-null?
           regex-empty?
           regex-atom?
           match-seq
           match-alt
           match-rep
           seq
           (->
            alt
            =
            (λ (pat1 pat2)
              (match
               (app regex-null? pat1)
               ((#f)
                (match
                 (app regex-null? pat2)
                 ((#f)
                  (app
                   cons
                   (app quote alt)
                   (app cons pat1 (app cons pat2 (app quote (app))))))
                 (_ pat1)))
               (_ pat2)))
            <-)
           rep
           regex-empty
           regex-derivative
           regex-match
           check-expect)
    bod)
 (menv '()))
(list
 'clos/con:
 (list
  (list
   '(λ (pat1 pat2)
      (match
       (app regex-null? pat1)
       ((#f)
        (match
         (app regex-null? pat2)
         ((#f)
          (app
           cons
           (app quote alt)
           (app cons pat1 (app cons pat2 (app quote (app))))))
         (_ pat1)))
       (_ pat2)))
   (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app cons (-> pat2 <-) (app quote (app))) (menv '(())))
(list
 'query:
 '(λ (re)
    (-> (app and (app pair? re) (app eq? (app car re) (app quote alt))) <-))
 (menv '(())))
(list
 'query:
 '(match
   (->
    (app
     match-alt
     re
     (λ (pat1 pat2)
       (app alt (app regex-derivative pat1 c) (app regex-derivative pat2 c))))
    <-)
   ((#f)
    (match
     (app
      match-rep
      re
      (λ (pat) (app seq (app regex-derivative pat c) (app rep pat))))
     ((#f) regex-NULL)
     (_ ())))
   (_ ()))
 (menv '(())))
(list 'query: '(app pair? (-> re <-)) (menv '(())))
(list 'query: '(app (-> eq? <-) (app car re) (app quote rep)) (menv '(())))
(list
 'query:
 '(λ (re f) (-> (app and (app regex-rep? re) (app f (app cadr re))) <-))
 (menv '(())))
(list 'query: '(app (-> eq? <-) (app car re) (app quote seq)) (menv '(())))
(list
 'query:
 '(letrec (debug-trace
           cadr
           caddr
           regex-NULL
           regex-BLANK
           regex-alt?
           regex-seq?
           regex-rep?
           regex-null?
           regex-empty?
           regex-atom?
           match-seq
           match-alt
           match-rep
           seq
           alt
           rep
           (->
            regex-empty
            =
            (λ (re)
              (match
               (app regex-empty? re)
               ((#f)
                (match
                 (app regex-null? re)
                 ((#f)
                  (match
                   (app regex-atom? re)
                   ((#f)
                    (match
                     (app
                      match-seq
                      re
                      (λ (pat1 pat2)
                        (app
                         seq
                         (app regex-empty pat1)
                         (app regex-empty pat2))))
                     ((#f)
                      (match
                       (app
                        match-alt
                        re
                        (λ (pat1 pat2)
                          (app
                           alt
                           (app regex-empty pat1)
                           (app regex-empty pat2))))
                       ((#f) (match (app regex-rep? re) ((#f) #f) (_ #t)))
                       (_ ())))
                     (_ ())))
                   (_ #f)))
                 (_ #f)))
               (_ #t)))
            <-)
           regex-derivative
           regex-match
           check-expect)
    bod)
 (menv '()))
(list
 'clos/con:
 (list
  (list
   '(λ (re)
      (match
       (app regex-empty? re)
       ((#f)
        (match
         (app regex-null? re)
         ((#f)
          (match
           (app regex-atom? re)
           ((#f)
            (match
             (app
              match-seq
              re
              (λ (pat1 pat2)
                (app seq (app regex-empty pat1) (app regex-empty pat2))))
             ((#f)
              (match
               (app
                match-alt
                re
                (λ (pat1 pat2)
                  (app alt (app regex-empty pat1) (app regex-empty pat2))))
               ((#f) (match (app regex-rep? re) ((#f) #f) (_ #t)))
               (_ ())))
             (_ ())))
           (_ #f)))
         (_ #f)))
       (_ #t)))
   (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app regex-null? pat1) <-)
   ((#f)
    (match
     (app regex-null? pat2)
     ((#f)
      (app
       cons
       (app quote alt)
       (app cons pat1 (app cons pat2 (app quote (app))))))
     (_ pat1)))
   (_ pat2))
 (menv '(())))
(list 'query: '(app seq foo (-> (app rep bar) <-)) (menv '()))
(list 'query: '(app (-> rep <-) bar) (menv '()))
(list
 'clos/con:
 (list
  (list
   '(λ (pat)
      (match
       (app regex-null? pat)
       ((#f)
        (match
         (app regex-empty? pat)
         ((#f) (app cons (app quote rep) (app cons pat (app quote (app)))))
         (_ regex-BLANK)))
       (_ regex-BLANK)))
   (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app regex-empty? (-> pat <-)) (menv '(())))
(list
 'query:
 '(match
   (app regex-null? re)
   (->
    (#f)
    (match
     (app regex-atom? re)
     ((#f)
      (match
       (app
        match-seq
        re
        (λ (pat1 pat2)
          (app seq (app regex-empty pat1) (app regex-empty pat2))))
       ((#f)
        (match
         (app
          match-alt
          re
          (λ (pat1 pat2)
            (app alt (app regex-empty pat1) (app regex-empty pat2))))
         ((#f) (match (app regex-rep? re) ((#f) #f) (_ #t)))
         (_ ())))
       (_ ())))
     (_ #f))
    <-)
   (_ #f))
 (menv '(())))
(list
 'query:
 '(match
   (app regex-empty? re)
   ((#f)
    (match
     (app regex-null? re)
     ((#f)
      (match
       (app regex-atom? re)
       ((#f)
        (match
         (app
          match-seq
          re
          (λ (pat1 pat2)
            (app seq (app regex-empty pat1) (app regex-empty pat2))))
         ((#f)
          (match
           (app
            match-alt
            re
            (λ (pat1 pat2)
              (app alt (app regex-empty pat1) (app regex-empty pat2))))
           ((#f) (match (app regex-rep? re) ((#f) #f) (_ #t)))
           (_ ())))
         (_ ())))
       (_ #f)))
     (_ #f)))
   (-> _ #t <-))
 (menv '(())))
(list 'clos/con: (list (list #t (menv '(())))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app (-> eq? <-) (app car re) (app quote alt)) (menv '(())))
(list 'query: '(app (-> regex-empty? <-) re) (menv '(())))
(list 'clos/con: (list (list '(λ (re) (app eq? re (app #t))) (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app (-> regex-alt? <-) re) (menv '(())))
(list
 'clos/con:
 (list
  (list
   '(λ (re) (app and (app pair? re) (app eq? (app car re) (app quote alt))))
   (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app regex-empty? re)
   ((#f)
    (match
     (app regex-null? re)
     ((#f)
      (match
       (app eq? c re)
       ((#f)
        (match
         (app regex-atom? re)
         ((#f)
          (match
           (app
            match-seq
            re
            (λ (pat1 pat2)
              (app
               alt
               (app seq (app regex-derivative pat1 c) pat2)
               (app
                seq
                (app regex-empty pat1)
                (app regex-derivative pat2 c)))))
           ((#f)
            (match
             (app
              match-alt
              re
              (λ (pat1 pat2)
                (app
                 alt
                 (app regex-derivative pat1 c)
                 (app regex-derivative pat2 c))))
             ((#f)
              (match
               (app
                match-rep
                re
                (λ (pat) (app seq (app regex-derivative pat c) (app rep pat))))
               ((#f) regex-NULL)
               (_ ())))
             (_ ())))
           (_ ())))
         (_ regex-NULL)))
       (_ regex-BLANK)))
     (_ regex-NULL)))
   (-> _ regex-NULL <-))
 (menv '(())))
(list 'clos/con: (list (list #f (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app cdr (-> (app cdr p) <-)) (menv '(())))
(list 'query: '(app (-> quote <-) seq) (menv '(())))
(list 'query: '(app regex-atom? (-> re <-)) (menv '(())))
(list
 'query:
 '(match
   (app
    match-rep
    re
    (λ (pat) (app seq (app regex-derivative pat c) (app rep pat))))
   (-> (#f) regex-NULL <-)
   (_ ()))
 (menv '(())))
(list 'clos/con: (list (list #f (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app (-> cons <-) pat2 (app quote (app))) (menv '(())))
(list 'clos/con: (list (list 'cons (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app regex-empty (-> pattern <-)) (menv '(())))
(list 'query: '(app (-> regex-null? <-) re) (menv '(())))
(list 'clos/con: (list (list '(λ (re) (app eq? re (app #f))) (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app and (app pair? re) (-> (app eq? (app car re) (app quote alt)) <-))
 (menv '(())))
(list 'query: '(app (-> regex-null? <-) re) (menv '(())))
(list 'clos/con: (list (list '(λ (re) (app eq? re (app #f))) (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app regex-null? pat2)
   (->
    (#f)
    (match
     (app regex-empty? pat1)
     ((#f)
      (match
       (app regex-empty? pat2)
       ((#f)
        (app
         cons
         (app quote seq)
         (app cons pat1 (app cons pat2 (app quote (app))))))
       (_ pat1)))
     (_ pat2))
    <-)
   (_ regex-NULL))
 (menv '(())))
(list 'query: '(app (-> car <-) re) (menv '(())))
(list
 'query:
 '(match
   (app null? data)
   ((#t) (app regex-empty? (app regex-empty pattern)))
   (->
    (#f)
    (app
     regex-match
     (app regex-derivative pattern (app car data))
     (app cdr data))
    <-))
 (menv '(())))
(list
 'query:
 '(app
   match-seq
   (-> re <-)
   (λ (pat1 pat2) (app seq (app regex-empty pat1) (app regex-empty pat2))))
 (menv '(())))
(list 'query: '(app regex-null? (-> re <-)) (menv '(())))
(list
 'query:
 '(match
   (app regex-empty? pat)
   ((#f) (app cons (app quote rep) (app cons pat (app quote (app)))))
   (-> _ regex-BLANK <-))
 (menv '(())))
(list 'clos/con: (list (list #t (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app (-> eq? <-) c re) (menv '(())))
(list
 'query:
 '(letrec (debug-trace
           cadr
           caddr
           regex-NULL
           regex-BLANK
           regex-alt?
           regex-seq?
           regex-rep?
           regex-null?
           regex-empty?
           regex-atom?
           match-seq
           (->
            match-alt
            =
            (λ (re f)
              (app
               and
               (app regex-alt? re)
               (app f (app cadr re) (app caddr re))))
            <-)
           match-rep
           seq
           alt
           rep
           regex-empty
           regex-derivative
           regex-match
           check-expect)
    bod)
 (menv '()))
(list
 'clos/con:
 (list
  (list
   '(λ (re f)
      (app and (app regex-alt? re) (app f (app cadr re) (app caddr re))))
   (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (pat1 pat2)
    (-> (app seq (app regex-empty pat1) (app regex-empty pat2)) <-))
 (menv '(() ())))
(list
 'query:
 '(app
   regex-match
   (app quote (app seq foo (app rep bar)))
   (-> (app quote (app foo bar)) <-))
 (menv '()))
(list
 'query:
 '(match
   (app regex-null? pat2)
   ((#f)
    (match
     (app regex-empty? pat1)
     ((#f)
      (match
       (app regex-empty? pat2)
       ((#f)
        (app
         cons
         (app quote seq)
         (app cons pat1 (app cons pat2 (app quote (app))))))
       (_ pat1)))
     (_ pat2)))
   (-> _ regex-NULL <-))
 (menv '(())))
(list 'clos/con: (list (list #f (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> regex-derivative <-) pattern (app car data))
 (menv '(())))
(list
 'clos/con:
 (list
  (list
   '(λ (re c)
      (let ((_ debug-trace))
        (match
         (app regex-empty? re)
         ((#f)
          (match
           (app regex-null? re)
           ((#f)
            (match
             (app eq? c re)
             ((#f)
              (match
               (app regex-atom? re)
               ((#f)
                (match
                 (app
                  match-seq
                  re
                  (λ (pat1 pat2)
                    (app
                     alt
                     (app seq (app regex-derivative pat1 c) pat2)
                     (app
                      seq
                      (app regex-empty pat1)
                      (app regex-derivative pat2 c)))))
                 ((#f)
                  (match
                   (app
                    match-alt
                    re
                    (λ (pat1 pat2)
                      (app
                       alt
                       (app regex-derivative pat1 c)
                       (app regex-derivative pat2 c))))
                   ((#f)
                    (match
                     (app
                      match-rep
                      re
                      (λ (pat)
                        (app seq (app regex-derivative pat c) (app rep pat))))
                     ((#f) regex-NULL)
                     (_ ())))
                   (_ ())))
                 (_ ())))
               (_ regex-NULL)))
             (_ regex-BLANK)))
           (_ regex-NULL)))
         (_ regex-NULL))))
   (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app regex-derivative (-> pattern <-) (app car data))
 (menv '(())))
(list
 'query:
 '(app and (app pair? re) (-> (app eq? (app car re) (app quote rep)) <-))
 (menv '(())))
(list
 'query:
 '(letrec (debug-trace
           cadr
           caddr
           regex-NULL
           regex-BLANK
           regex-alt?
           regex-seq?
           (->
            regex-rep?
            =
            (λ (re)
              (app and (app pair? re) (app eq? (app car re) (app quote rep))))
            <-)
           regex-null?
           regex-empty?
           regex-atom?
           match-seq
           match-alt
           match-rep
           seq
           alt
           rep
           regex-empty
           regex-derivative
           regex-match
           check-expect)
    bod)
 (menv '()))
(list
 'clos/con:
 (list
  (list
   '(λ (re) (app and (app pair? re) (app eq? (app car re) (app quote rep))))
   (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app quote (-> (app) <-)) (menv '(())))
(list 'query: '(app (-> pair? <-) re) (menv '(())))
(list
 'query:
 '(λ (re f)
    (-> (app and (app regex-alt? re) (app f (app cadr re) (app caddr re))) <-))
 (menv '(())))
(list
 'query:
 '(app (-> seq <-) (app regex-empty pat1) (app regex-empty pat2))
 (menv '(() ())))
(list
 'clos/con:
 (list
  (list
   '(λ (pat1 pat2)
      (match
       (app regex-null? pat1)
       ((#f)
        (match
         (app regex-null? pat2)
         ((#f)
          (match
           (app regex-empty? pat1)
           ((#f)
            (match
             (app regex-empty? pat2)
             ((#f)
              (app
               cons
               (app quote seq)
               (app cons pat1 (app cons pat2 (app quote (app))))))
             (_ pat1)))
           (_ pat2)))
         (_ regex-NULL)))
       (_ regex-NULL)))
   (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app (-> eq? <-) re (app #t)) (menv '(())))
(list
 'query:
 '(match
   (->
    (app
     match-rep
     re
     (λ (pat) (app seq (app regex-derivative pat c) (app rep pat))))
    <-)
   ((#f) regex-NULL)
   (_ ()))
 (menv '(())))
(list
 'query:
 '(match
   (-> (app regex-null? re) <-)
   ((#f)
    (match
     (app eq? c re)
     ((#f)
      (match
       (app regex-atom? re)
       ((#f)
        (match
         (app
          match-seq
          re
          (λ (pat1 pat2)
            (app
             alt
             (app seq (app regex-derivative pat1 c) pat2)
             (app seq (app regex-empty pat1) (app regex-derivative pat2 c)))))
         ((#f)
          (match
           (app
            match-alt
            re
            (λ (pat1 pat2)
              (app
               alt
               (app regex-derivative pat1 c)
               (app regex-derivative pat2 c))))
           ((#f)
            (match
             (app
              match-rep
              re
              (λ (pat) (app seq (app regex-derivative pat c) (app rep pat))))
             ((#f) regex-NULL)
             (_ ())))
           (_ ())))
         (_ ())))
       (_ regex-NULL)))
     (_ regex-BLANK)))
   (_ regex-NULL))
 (menv '(())))
(list 'query: '(app eq? (app car re) (-> (app quote rep) <-)) (menv '(())))
(list 'query: '(app (-> foo <-) bar) (menv '()))
(list
 'query:
 '(app seq (app regex-empty pat1) (-> (app regex-derivative pat2 c) <-))
 (menv '(() ())))
(list 'query: '(app cadr (-> re <-)) (menv '(())))
(list
 'query:
 '(app regex-empty? (-> (app regex-empty pattern) <-))
 (menv '(())))
(list 'query: '(app (-> or <-) (app char? re) (app symbol? re)) (menv '(())))
'(clos/con: (#<procedure:do-demand-or>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app pair? (-> re <-)) (menv '(())))
(list 'query: '(app (-> regex-null? <-) pat1) (menv '(())))
(list 'clos/con: (list (list '(λ (re) (app eq? re (app #f))) (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app (-> cdr <-) data) (menv '(())))
(list
 'query:
 '(app (-> seq <-) (app regex-derivative pat c) (app rep pat))
 (menv '(() ())))
(list
 'clos/con:
 (list
  (list
   '(λ (pat1 pat2)
      (match
       (app regex-null? pat1)
       ((#f)
        (match
         (app regex-null? pat2)
         ((#f)
          (match
           (app regex-empty? pat1)
           ((#f)
            (match
             (app regex-empty? pat2)
             ((#f)
              (app
               cons
               (app quote seq)
               (app cons pat1 (app cons pat2 (app quote (app))))))
             (_ pat1)))
           (_ pat2)))
         (_ regex-NULL)))
       (_ regex-NULL)))
   (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app or (-> (app char? re) <-) (app symbol? re)) (menv '(())))
(list
 'query:
 '(app
   match-seq
   re
   (->
    (λ (pat1 pat2) (app seq (app regex-empty pat1) (app regex-empty pat2)))
    <-))
 (menv '(())))
(list
 'clos/con:
 (list
  (list
   '(λ (pat1 pat2) (app seq (app regex-empty pat1) (app regex-empty pat2)))
   (menv '(())))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app cdr (-> data <-)) (menv '(())))
(list 'query: '(app regex-null? (-> re <-)) (menv '(())))
(list
 'query:
 '(match
   (-> (app regex-empty? pat1) <-)
   ((#f)
    (match
     (app regex-empty? pat2)
     ((#f)
      (app
       cons
       (app quote seq)
       (app cons pat1 (app cons pat2 (app quote (app))))))
     (_ pat1)))
   (_ pat2))
 (menv '(())))
(list 'query: '(app (-> f <-) (app cadr re) (app caddr re)) (menv '(())))
(list 'query: '(app f (-> (app cadr re) <-)) (menv '(())))
(list
 'query:
 '(λ (re) (-> (app or (app char? re) (app symbol? re)) <-))
 (menv '(())))
(list 'query: '(app car (-> re <-)) (menv '(())))
(list
 'query:
 '(app and (app pair? re) (-> (app eq? (app car re) (app quote seq)) <-))
 (menv '(())))
(list
 'query:
 '(app seq (-> (app regex-empty pat1) <-) (app regex-empty pat2))
 (menv '(() ())))
(list 'query: '(app (-> regex-rep? <-) re) (menv '(())))
(list
 'clos/con:
 (list
  (list
   '(λ (re) (app and (app pair? re) (app eq? (app car re) (app quote rep))))
   (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app cons pat2 (-> (app quote (app)) <-)) (menv '(())))
(list 'query: '(app car (-> (app cdr (app cdr p)) <-)) (menv '(())))
(list
 'query:
 '(app and (-> (app regex-seq? re) <-) (app f (app cadr re) (app caddr re)))
 (menv '(())))
(list 'query: '(app (-> null? <-) data) (menv '(())))
(list
 'query:
 '(app
   match-seq
   re
   (->
    (λ (pat1 pat2)
      (app
       alt
       (app seq (app regex-derivative pat1 c) pat2)
       (app seq (app regex-empty pat1) (app regex-derivative pat2 c))))
    <-))
 (menv '(())))
(list
 'clos/con:
 (list
  (list
   '(λ (pat1 pat2)
      (app
       alt
       (app seq (app regex-derivative pat1 c) pat2)
       (app seq (app regex-empty pat1) (app regex-derivative pat2 c))))
   (menv '(())))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app eq? re (-> (app #t) <-)) (menv '(())))
(list 'clos/con: (list (list '(app #t) (menv '(())))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app regex-empty? (-> re <-)) (menv '(())))
(list
 'query:
 '(app
   (-> check-expect <-)
   (app
    regex-match
    (app quote (app seq foo (app rep bar)))
    (app quote (app foo bar)))
   (app #f))
 (menv '()))
(list
 'clos/con:
 (list (list '(λ (check expect) (app equal? check expect)) (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(match (app regex-rep? re) ((#f) #f) (-> _ #t <-)) (menv '(())))
(list 'clos/con: (list (list #t (menv '(())))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app seq (-> (app regex-derivative pat c) <-) (app rep pat))
 (menv '(() ())))
(list
 'query:
 '(match
   (app regex-null? pat1)
   ((#f)
    (match
     (app regex-null? pat2)
     ((#f)
      (match
       (app regex-empty? pat1)
       ((#f)
        (match
         (app regex-empty? pat2)
         ((#f)
          (app
           cons
           (app quote seq)
           (app cons pat1 (app cons pat2 (app quote (app))))))
         (_ pat1)))
       (_ pat2)))
     (_ regex-NULL)))
   (-> _ regex-NULL <-))
 (menv '(())))
(list 'clos/con: (list (list #f (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app regex-null? pat2) <-)
   ((#f)
    (app
     cons
     (app quote alt)
     (app cons pat1 (app cons pat2 (app quote (app))))))
   (_ pat1))
 (menv '(())))
