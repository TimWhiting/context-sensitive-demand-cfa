"app-num", 0, "(list 'eval '(top) (envenv '()))", 11,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"app-num", 0, "(list 'eval '(let ((-> x = (λ (y) y) <-)) bod) (envenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"app-num", 0, "(list 'eval '(λ (y) (-> y <-)) (envenv '(())))", 4,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"app-num", 0, "(list 'eval '(let (x) (-> (let ((_ (app x 1))) (app x 2)) <-)) (envenv '()))", 10,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"app-num", 0, "(list 'eval '(let ((-> _ = (app x 1) <-)) bod) (envenv '()))", 9,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"app-num", 0, "(list 'eval '(app x (-> 1 <-)) (envenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"app-num", 0, "(list 'eval '(app (-> x <-) 1) (envenv '()))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"app-num", 0, "(list 'eval '(let (_) (-> (app x 2) <-)) (envenv '()))", 9,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"app-num", 0, "(list 'eval '(app x (-> 2 <-)) (envenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"app-num", 0, "(list 'eval '(app (-> x <-) 2) (envenv '()))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 0, "(list 'eval '(top) (envenv '()))", 19,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 0, "(list
 'eval
 '(letrec ((->
            a
            =
            (λ (y) (match (app equal? y 0) (#t (app a (app - y 1))) (#f y)))
            <-))
    bod)
 (envenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 0, "(list
 'eval
 '(λ (y) (-> (match (app equal? y 0) (#t (app a (app - y 1))) (#f y)) <-))
 (envenv '(())))", 7,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 0, "(list
 'eval
 '(match (app equal? y 0) (#t (app a (app - y 1))) (-> #f y <-))
 (envenv '(())))", 4,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 0, "(list
 'eval
 '(match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
 (envenv '(())))", 18,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 0, "(list 'eval '(app a (-> (app - y 1) <-)) (envenv '(())))", 6,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 0, "(list 'eval '(app - y (-> 1 <-)) (envenv '(())))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 0, "(list 'eval '(app - (-> y <-) 1) (envenv '(())))", 4,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 0, "(list 'eval '(app (-> - <-) y 1) (envenv '(())))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 0, "(list 'eval '(app (-> a <-) (app - y 1)) (envenv '(())))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 0, "(list
 'eval
 '(match (-> (app equal? y 0) <-) (#t (app a (app - y 1))) (#f y))
 (envenv '(())))", 6,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 0, "(list 'eval '(app equal? y (-> 0 <-)) (envenv '(())))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 0, "(list 'eval '(app equal? (-> y <-) 0) (envenv '(())))", 4,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 0, "(list 'eval '(app (-> equal? <-) y 0) (envenv '(())))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 0, "(list 'eval '(letrec (a) (-> (app a 2) <-)) (envenv '()))", 18,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 0, "(list 'eval '(app a (-> 2 <-)) (envenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 0, "(list 'eval '(app (-> a <-) 2) (envenv '()))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letstar", 0, "(list 'eval '(top) (envenv '()))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letstar", 0, "(list 'eval '(let* (a (-> b = a <-)) bod) (envenv '()))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letstar", 0, "(list 'eval '(let* ((-> a = 10 <-) b) bod) (envenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letstar", 0, "(list 'eval '(let* (a b) (-> a <-)) (envenv '()))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"constr", 0, "(list 'eval '(top) (envenv '()))", 9,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"constr", 0, "(list 'eval '(let ((-> x = (app cons 1 nil) <-)) bod) (envenv '()))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"constr", 0, "(list 'eval '(app cons 1 (-> nil <-)) (envenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"constr", 0, "(list 'eval '(app cons (-> 1 <-) nil) (envenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"constr", 0, "(list 'eval '(app (-> cons <-) 1 nil) (envenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"constr", 0, "(list 'eval '(let (x) (-> (match x ((cons 1 n) n) (_ x)) <-)) (envenv '()))", 8,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"constr", 0, "(list 'eval '(match x ((cons 1 n) n) (-> _ x <-)) (envenv '()))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"constr", 0, "(list 'eval '(match x (-> (cons 1 n) n <-) (_ x)) (envenv '()))", 6,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"constr", 0, "(list 'eval '(match (-> x <-) ((cons 1 n) n) (_ x)) (envenv '()))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"err", 0, "(list 'eval '(top) (envenv '()))", 6,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"err", 0, "(list 'eval '(app (λ (x) (app x x)) (-> 2 <-)) (envenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"err", 0, "(list 'eval '(app (-> (λ (x) (app x x)) <-) 2) (envenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"err", 0, "(list 'eval '(λ (x) (-> (app x x) <-)) (envenv '(())))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"err", 0, "(list 'eval '(app x (-> x <-)) (envenv '(())))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"err", 0, "(list 'eval '(app (-> x <-) x) (envenv '(())))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"id", 0, "(list 'eval '(top) (envenv '()))", 5,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"id", 0, "(list 'eval '(app (λ (x) x) (-> (λ (y) y) <-)) (envenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"id", 0, "(list 'eval '(λ (y) (-> y <-)) (envenv '(())))", 6,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"id", 0, "(list 'eval '(app (-> (λ (x) x) <-) (λ (y) y)) (envenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"id", 0, "(list 'eval '(λ (x) (-> x <-)) (envenv '(())))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"let-num", 0, "(list 'eval '(top) (envenv '()))", 8,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"let-num", 0, "(list 'eval '(let ((-> x = (λ (y) y) <-)) bod) (envenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"let-num", 0, "(list 'eval '(λ (y) (-> y <-)) (envenv '(())))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"let-num", 0, "(list 'eval '(let (x) (-> (app x 1) <-)) (envenv '()))", 7,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"let-num", 0, "(list 'eval '(app x (-> 1 <-)) (envenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"let-num", 0, "(list 'eval '(app (-> x <-) 1) (envenv '()))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"let", 0, "(list 'eval '(top) (envenv '()))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"let", 0, "(list 'eval '(let ((-> x = (λ (y) y) <-)) bod) (envenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"let", 0, "(list 'eval '(λ (y) (-> y <-)) (envenv '(())))", 4,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"let", 0, "(list 'eval '(let (x) (-> x <-)) (envenv '()))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"multi-param", 0, "(list 'eval '(top) (envenv '()))", 11,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"multi-param", 0, "(list 'eval '(app (λ (x y) (app x y)) (λ (z) z) (-> 2 <-)) (envenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"multi-param", 0, "(list 'eval '(app (λ (x y) (app x y)) (-> (λ (z) z) <-) 2) (envenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"multi-param", 0, "(list 'eval '(λ (z) (-> z <-)) (envenv '(())))", 4,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"multi-param", 0, "(list 'eval '(app (-> (λ (x y) (app x y)) <-) (λ (z) z) 2) (envenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"multi-param", 0, "(list 'eval '(λ (x y) (-> (app x y) <-)) (envenv '(())))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"multi-param", 0, "(list 'eval '(app x (-> y <-)) (envenv '(())))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"multi-param", 0, "(list 'eval '(app (-> x <-) y) (envenv '(())))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list 'eval '(top) (envenv '()))", 42,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list
 'eval
 '(letrec ((->
            ack
            =
            (λ (m n)
              (match
               (app = m 0)
               (#f
                (match
                 (app = n 0)
                 (#f (app ack (app - m 1) (app ack m (app - n 1))))
                 (_ (app ack (app - m 1) 1))))
               (_ (app + n 1))))
            <-))
    bod)
 (envenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list
 'eval
 '(λ (m n)
    (->
     (match
      (app = m 0)
      (#f
       (match
        (app = n 0)
        (#f (app ack (app - m 1) (app ack m (app - n 1))))
        (_ (app ack (app - m 1) 1))))
      (_ (app + n 1)))
     <-))
 (envenv '(())))", 9,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list
 'eval
 '(match
   (app = m 0)
   (#f
    (match
     (app = n 0)
     (#f (app ack (app - m 1) (app ack m (app - n 1))))
     (_ (app ack (app - m 1) 1))))
   (-> _ (app + n 1) <-))
 (envenv '(())))", 8,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list 'eval '(app + n (-> 1 <-)) (envenv '(())))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list 'eval '(app + (-> n <-) 1) (envenv '(())))", 6,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list 'eval '(app (-> + <-) n 1) (envenv '(())))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list
 'eval
 '(match
   (app = m 0)
   (->
    #f
    (match
     (app = n 0)
     (#f (app ack (app - m 1) (app ack m (app - n 1))))
     (_ (app ack (app - m 1) 1)))
    <-)
   (_ (app + n 1)))
 (envenv '(())))", 9,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list
 'eval
 '(match
   (app = n 0)
   (#f (app ack (app - m 1) (app ack m (app - n 1))))
   (-> _ (app ack (app - m 1) 1) <-))
 (envenv '(())))", 41,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list 'eval '(app ack (app - m 1) (-> 1 <-)) (envenv '(())))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list 'eval '(app ack (-> (app - m 1) <-) 1) (envenv '(())))", 8,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list 'eval '(app - m (-> 1 <-)) (envenv '(())))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list 'eval '(app - (-> m <-) 1) (envenv '(())))", 6,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list 'eval '(app (-> - <-) m 1) (envenv '(())))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list 'eval '(app (-> ack <-) (app - m 1) 1) (envenv '(())))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list
 'eval
 '(match
   (app = n 0)
   (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-)
   (_ (app ack (app - m 1) 1)))
 (envenv '(())))", 41,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list
 'eval
 '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
 (envenv '(())))", 39,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list 'eval '(app ack m (-> (app - n 1) <-)) (envenv '(())))", 8,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list 'eval '(app - n (-> 1 <-)) (envenv '(())))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list 'eval '(app - (-> n <-) 1) (envenv '(())))", 6,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list 'eval '(app (-> - <-) n 1) (envenv '(())))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list 'eval '(app ack (-> m <-) (app - n 1)) (envenv '(())))", 6,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list 'eval '(app (-> ack <-) m (app - n 1)) (envenv '(())))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list
 'eval
 '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
 (envenv '(())))", 8,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list 'eval '(app - m (-> 1 <-)) (envenv '(())))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list 'eval '(app - (-> m <-) 1) (envenv '(())))", 6,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list 'eval '(app (-> - <-) m 1) (envenv '(())))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list
 'eval
 '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
 (envenv '(())))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list
 'eval
 '(match
   (-> (app = n 0) <-)
   (#f (app ack (app - m 1) (app ack m (app - n 1))))
   (_ (app ack (app - m 1) 1)))
 (envenv '(())))", 8,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list 'eval '(app = n (-> 0 <-)) (envenv '(())))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list 'eval '(app = (-> n <-) 0) (envenv '(())))", 6,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list 'eval '(app (-> = <-) n 0) (envenv '(())))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list
 'eval
 '(match
   (-> (app = m 0) <-)
   (#f
    (match
     (app = n 0)
     (#f (app ack (app - m 1) (app ack m (app - n 1))))
     (_ (app ack (app - m 1) 1))))
   (_ (app + n 1)))
 (envenv '(())))", 8,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list 'eval '(app = m (-> 0 <-)) (envenv '(())))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list 'eval '(app = (-> m <-) 0) (envenv '(())))", 6,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list 'eval '(app (-> = <-) m 0) (envenv '(())))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list 'eval '(letrec (ack) (-> (app ack 3 12) <-)) (envenv '()))", 41,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list 'eval '(app ack 3 (-> 12 <-)) (envenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list 'eval '(app ack (-> 3 <-) 12) (envenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 0, "(list 'eval '(app (-> ack <-) 3 12) (envenv '()))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 0, "(list 'eval '(top) (envenv '()))", 29,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 0, "(list
 'eval
 '(app
   (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
   (->
    (λ (x1)
      (app
       (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
       (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))
    <-))
 (envenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 0, "(list
 'eval
 '(λ (x1)
    (->
     (app
      (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
      (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
     <-))
 (envenv '(())))", 21,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 0, "(list
 'eval
 '(app
   (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
   (-> (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))) <-))
 (envenv '(())))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 0, "(list
 'eval
 '(λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-))
 (envenv '(() ())))", 14,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 0, "(list
 'eval
 '(app (λ (z) (app z x1 x2)) (-> (λ (y1 y2) y1) <-))
 (envenv '(() ())))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 0, "(list 'eval '(λ (y1 y2) (-> y1 <-)) (envenv '(() () ())))", 4,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 0, "(list
 'eval
 '(app (-> (λ (z) (app z x1 x2)) <-) (λ (y1 y2) y1))
 (envenv '(() ())))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 0, "(list 'eval '(λ (z) (-> (app z x1 x2) <-)) (envenv '(() () ())))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 0, "(list 'eval '(app z x1 (-> x2 <-)) (envenv '(() () ())))", 5,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 0, "(list 'eval '(app z (-> x1 <-) x2) (envenv '(() () ())))", 5,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 0, "(list 'eval '(app (-> z <-) x1 x2) (envenv '(() () ())))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 0, "(list
 'eval
 '(app
   (-> (λ (f2) (let ((_ (app f2 #t))) (app f2 #f))) <-)
   (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
 (envenv '(())))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 0, "(list
 'eval
 '(λ (f2) (-> (let ((_ (app f2 #t))) (app f2 #f)) <-))
 (envenv '(() ())))", 4,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 0, "(list 'eval '(let ((-> _ = (app f2 #t) <-)) bod) (envenv '(() ())))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 0, "(list 'eval '(app f2 (-> #t <-)) (envenv '(() ())))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 0, "(list 'eval '(app (-> f2 <-) #t) (envenv '(() ())))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 0, "(list 'eval '(let (_) (-> (app f2 #f) <-)) (envenv '(() ())))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 0, "(list 'eval '(app f2 (-> #f <-)) (envenv '(() ())))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 0, "(list 'eval '(app (-> f2 <-) #f) (envenv '(() ())))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 0, "(list
 'eval
 '(app
   (-> (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) <-)
   (λ (x1)
     (app
      (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
      (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
 (envenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 0, "(list
 'eval
 '(λ (f1) (-> (let ((_ (app f1 #t))) (app f1 #f)) <-))
 (envenv '(())))", 4,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 0, "(list 'eval '(let ((-> _ = (app f1 #t) <-)) bod) (envenv '(())))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 0, "(list 'eval '(app f1 (-> #t <-)) (envenv '(())))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 0, "(list 'eval '(app (-> f1 <-) #t) (envenv '(())))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 0, "(list 'eval '(let (_) (-> (app f1 #f) <-)) (envenv '(())))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 0, "(list 'eval '(app f1 (-> #f <-)) (envenv '(())))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 0, "(list 'eval '(app (-> f1 <-) #f) (envenv '(())))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"structural-rec", 0, "(list 'eval '(top) (envenv '()))", 15,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"structural-rec", 0, "(list 'eval '(app (λ (x) (app x x)) (-> (λ (y) (app y y)) <-)) (envenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"structural-rec", 0, "(list 'eval '(λ (y) (-> (app y y) <-)) (envenv '(())))", 14,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"structural-rec", 0, "(list 'eval '(app y (-> y <-)) (envenv '(())))", 13,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"structural-rec", 0, "(list 'eval '(app (-> y <-) y) (envenv '(())))", 13,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"structural-rec", 0, "(list 'eval '(app (-> (λ (x) (app x x)) <-) (λ (y) (app y y))) (envenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"structural-rec", 0, "(list 'eval '(λ (x) (-> (app x x) <-)) (envenv '(())))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"structural-rec", 0, "(list 'eval '(app x (-> x <-)) (envenv '(())))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"structural-rec", 0, "(list 'eval '(app (-> x <-) x) (envenv '(())))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"app-num", 1, "(list 'eval '(top) (envenv '()))", 10,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"app-num", 1, "(list 'eval '(let ((-> x = (λ (y) y) <-)) bod) (envenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"app-num", 1, "(list 'eval '(λ (y) (-> y <-)) (envenv '((□? (y)))))", 9,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"app-num", 1, "(list 'eval '(let (x) (-> (let ((_ (app x 1))) (app x 2)) <-)) (envenv '()))", 9,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"app-num", 1, "(list 'eval '(let ((-> _ = (app x 1) <-)) bod) (envenv '()))", 8,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"app-num", 1, "(list 'eval '(app x (-> 1 <-)) (envenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"app-num", 1, "(list 'eval '(app (-> x <-) 1) (envenv '()))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"app-num", 1, "(list 'eval '(let (_) (-> (app x 2) <-)) (envenv '()))", 8,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"app-num", 1, "(list 'eval '(app x (-> 2 <-)) (envenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"app-num", 1, "(list 'eval '(app (-> x <-) 2) (envenv '()))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 1, "(list 'eval '(top) (envenv '()))", 22,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 1, "(list
 'eval
 '(letrec ((->
            a
            =
            (λ (y) (match (app equal? y 0) (#t (app a (app - y 1))) (#f y)))
            <-))
    bod)
 (envenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 1, "(list
 'eval
 '(λ (y) (-> (match (app equal? y 0) (#t (app a (app - y 1))) (#f y)) <-))
 (envenv '((□? (y)))))", 58,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 1, "(list
 'eval
 '(match (app equal? y 0) (#t (app a (app - y 1))) (-> #f y <-))
 (envenv '((□? (y)))))", 29,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 1, "(list
 'eval
 '(match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
 (envenv '((□? (y)))))", 46,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 1, "(list 'eval '(app a (-> (app - y 1) <-)) (envenv '((□? (y)))))", 25,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 1, "(list 'eval '(app - y (-> 1 <-)) (envenv '((□? (y)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 1, "(list 'eval '(app - (-> y <-) 1) (envenv '((□? (y)))))", 25,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 1, "(list 'eval '(app (-> - <-) y 1) (envenv '((□? (y)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 1, "(list 'eval '(app (-> a <-) (app - y 1)) (envenv '((□? (y)))))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 1, "(list
 'eval
 '(match (-> (app equal? y 0) <-) (#t (app a (app - y 1))) (#f y))
 (envenv '((□? (y)))))", 41,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 1, "(list 'eval '(app equal? y (-> 0 <-)) (envenv '((□? (y)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 1, "(list 'eval '(app equal? (-> y <-) 0) (envenv '((□? (y)))))", 29,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 1, "(list 'eval '(app (-> equal? <-) y 0) (envenv '((□? (y)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 1, "(list 'eval '(letrec (a) (-> (app a 2) <-)) (envenv '()))", 21,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 1, "(list 'eval '(app a (-> 2 <-)) (envenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 1, "(list 'eval '(app (-> a <-) 2) (envenv '()))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letstar", 1, "(list 'eval '(top) (envenv '()))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letstar", 1, "(list 'eval '(let* (a (-> b = a <-)) bod) (envenv '()))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letstar", 1, "(list 'eval '(let* ((-> a = 10 <-) b) bod) (envenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letstar", 1, "(list 'eval '(let* (a b) (-> a <-)) (envenv '()))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"constr", 1, "(list 'eval '(top) (envenv '()))", 9,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"constr", 1, "(list 'eval '(let ((-> x = (app cons 1 nil) <-)) bod) (envenv '()))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"constr", 1, "(list 'eval '(app cons 1 (-> nil <-)) (envenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"constr", 1, "(list 'eval '(app cons (-> 1 <-) nil) (envenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"constr", 1, "(list 'eval '(app (-> cons <-) 1 nil) (envenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"constr", 1, "(list 'eval '(let (x) (-> (match x ((cons 1 n) n) (_ x)) <-)) (envenv '()))", 8,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"constr", 1, "(list 'eval '(match x ((cons 1 n) n) (-> _ x <-)) (envenv '()))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"constr", 1, "(list 'eval '(match x (-> (cons 1 n) n <-) (_ x)) (envenv '()))", 6,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"constr", 1, "(list 'eval '(match (-> x <-) ((cons 1 n) n) (_ x)) (envenv '()))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"err", 1, "(list 'eval '(top) (envenv '()))", 6,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"err", 1, "(list 'eval '(app (λ (x) (app x x)) (-> 2 <-)) (envenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"err", 1, "(list 'eval '(app (-> (λ (x) (app x x)) <-) 2) (envenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"err", 1, "(list 'eval '(λ (x) (-> (app x x) <-)) (envenv '((□? (x)))))", 7,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"err", 1, "(list 'eval '(app x (-> x <-)) (envenv '((□? (x)))))", 5,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"err", 1, "(list 'eval '(app (-> x <-) x) (envenv '((□? (x)))))", 5,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"id", 1, "(list 'eval '(top) (envenv '()))", 5,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"id", 1, "(list 'eval '(app (λ (x) x) (-> (λ (y) y) <-)) (envenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"id", 1, "(list 'eval '(λ (y) (-> y <-)) (envenv '((□? (y)))))", 7,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"id", 1, "(list 'eval '(app (-> (λ (x) x) <-) (λ (y) y)) (envenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"id", 1, "(list 'eval '(λ (x) (-> x <-)) (envenv '((□? (x)))))", 5,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"let-num", 1, "(list 'eval '(top) (envenv '()))", 8,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"let-num", 1, "(list 'eval '(let ((-> x = (λ (y) y) <-)) bod) (envenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"let-num", 1, "(list 'eval '(λ (y) (-> y <-)) (envenv '((□? (y)))))", 6,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"let-num", 1, "(list 'eval '(let (x) (-> (app x 1) <-)) (envenv '()))", 7,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"let-num", 1, "(list 'eval '(app x (-> 1 <-)) (envenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"let-num", 1, "(list 'eval '(app (-> x <-) 1) (envenv '()))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"let", 1, "(list 'eval '(top) (envenv '()))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"let", 1, "(list 'eval '(let ((-> x = (λ (y) y) <-)) bod) (envenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"let", 1, "(list 'eval '(λ (y) (-> y <-)) (envenv '((□? (y)))))", 5,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"let", 1, "(list 'eval '(let (x) (-> x <-)) (envenv '()))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"multi-param", 1, "(list 'eval '(top) (envenv '()))", 11,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"multi-param", 1, "(list 'eval '(app (λ (x y) (app x y)) (λ (z) z) (-> 2 <-)) (envenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"multi-param", 1, "(list 'eval '(app (λ (x y) (app x y)) (-> (λ (z) z) <-) 2) (envenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"multi-param", 1, "(list 'eval '(λ (z) (-> z <-)) (envenv '((□? (z)))))", 9,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"multi-param", 1, "(list 'eval '(app (-> (λ (x y) (app x y)) <-) (λ (z) z) 2) (envenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"multi-param", 1, "(list 'eval '(λ (x y) (-> (app x y) <-)) (envenv '((□? (x y)))))", 14,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"multi-param", 1, "(list 'eval '(app x (-> y <-)) (envenv '((□? (x y)))))", 5,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"multi-param", 1, "(list 'eval '(app (-> x <-) y) (envenv '((□? (x y)))))", 5,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 1, "(list 'eval '(top) (envenv '()))", 40,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 1, "(list
 'eval
 '(letrec ((->
            ack
            =
            (λ (m n)
              (match
               (app = m 0)
               (#f
                (match
                 (app = n 0)
                 (#f (app ack (app - m 1) (app ack m (app - n 1))))
                 (_ (app ack (app - m 1) 1))))
               (_ (app + n 1))))
            <-))
    bod)
 (envenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 1, "(list
 'eval
 '(λ (m n)
    (->
     (match
      (app = m 0)
      (#f
       (match
        (app = n 0)
        (#f (app ack (app - m 1) (app ack m (app - n 1))))
        (_ (app ack (app - m 1) 1))))
      (_ (app + n 1)))
     <-))
 (envenv '((□? (m n)))))", 305,0,7,7,0,1,8,8,0,2,8,8,0,3,8,8,0,4,8,8,0
"ack", 1, "(list
 'eval
 '(match
   (app = m 0)
   (#f
    (match
     (app = n 0)
     (#f (app ack (app - m 1) (app ack m (app - n 1))))
     (_ (app ack (app - m 1) 1))))
   (-> _ (app + n 1) <-))
 (envenv '((□? (m n)))))", 249,0,5,5,0,1,5,5,0,2,5,5,0,3,5,5,0,4,5,5,0
"ack", 1, "(list 'eval '(app + n (-> 1 <-)) (envenv '((□? (m n)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 1, "(list 'eval '(app + (-> n <-) 1) (envenv '((□? (m n)))))", 237,0,5,5,0,1,5,5,0,2,5,5,0,3,5,5,0,4,5,5,0
"ack", 1, "(list 'eval '(app (-> + <-) n 1) (envenv '((□? (m n)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 1, "(list
 'eval
 '(match
   (app = m 0)
   (->
    #f
    (match
     (app = n 0)
     (#f (app ack (app - m 1) (app ack m (app - n 1))))
     (_ (app ack (app - m 1) 1)))
    <-)
   (_ (app + n 1)))
 (envenv '((□? (m n)))))", 287,0,7,7,0,1,7,7,0,2,7,7,0,3,6,6,0,4,7,7,0
"ack", 1, "(list
 'eval
 '(match
   (app = n 0)
   (#f (app ack (app - m 1) (app ack m (app - n 1))))
   (-> _ (app ack (app - m 1) 1) <-))
 (envenv '((□? (m n)))))", 257,0,5,5,0,1,6,6,0,2,5,5,0,3,5,5,0,4,5,5,0
"ack", 1, "(list 'eval '(app ack (app - m 1) (-> 1 <-)) (envenv '((□? (m n)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 1, "(list 'eval '(app ack (-> (app - m 1) <-) 1) (envenv '((□? (m n)))))", 103,0,2,2,0,1,2,2,0,2,2,2,0,3,2,2,0,4,2,2,0
"ack", 1, "(list 'eval '(app - m (-> 1 <-)) (envenv '((□? (m n)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 1, "(list 'eval '(app - (-> m <-) 1) (envenv '((□? (m n)))))", 103,0,2,2,0,1,2,2,0,2,2,2,0,3,2,2,0,4,2,2,0
"ack", 1, "(list 'eval '(app (-> - <-) m 1) (envenv '((□? (m n)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 1, "(list 'eval '(app (-> ack <-) (app - m 1) 1) (envenv '((□? (m n)))))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 1, "(list
 'eval
 '(match
   (app = n 0)
   (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-)
   (_ (app ack (app - m 1) 1)))
 (envenv '((□? (m n)))))", 257,0,5,5,0,1,5,5,0,2,5,5,0,3,5,5,0,4,5,5,0
"ack", 1, "(list
 'eval
 '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
 (envenv '((□? (m n)))))", 233,0,5,5,0,1,5,5,0,2,5,5,0,3,5,5,0,4,5,5,0
"ack", 1, "(list 'eval '(app ack m (-> (app - n 1) <-)) (envenv '((□? (m n)))))", 233,0,5,5,0,1,5,5,0,2,5,5,0,3,5,5,0,4,5,5,0
"ack", 1, "(list 'eval '(app - n (-> 1 <-)) (envenv '((□? (m n)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 1, "(list 'eval '(app - (-> n <-) 1) (envenv '((□? (m n)))))", 233,0,5,5,0,1,5,5,0,2,5,5,0,3,5,5,0,4,5,5,0
"ack", 1, "(list 'eval '(app (-> - <-) n 1) (envenv '((□? (m n)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 1, "(list 'eval '(app ack (-> m <-) (app - n 1)) (envenv '((□? (m n)))))", 103,0,2,2,0,1,2,2,0,2,2,2,0,3,2,2,0,4,2,2,0
"ack", 1, "(list 'eval '(app (-> ack <-) m (app - n 1)) (envenv '((□? (m n)))))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 1, "(list
 'eval
 '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
 (envenv '((□? (m n)))))", 103,0,2,2,0,1,2,2,0,2,2,2,0,3,2,2,0,4,2,2,0
"ack", 1, "(list 'eval '(app - m (-> 1 <-)) (envenv '((□? (m n)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 1, "(list 'eval '(app - (-> m <-) 1) (envenv '((□? (m n)))))", 103,0,2,2,0,1,2,2,0,2,2,2,0,3,2,2,0,4,2,2,0
"ack", 1, "(list 'eval '(app (-> - <-) m 1) (envenv '((□? (m n)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 1, "(list
 'eval
 '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
 (envenv '((□? (m n)))))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 1, "(list
 'eval
 '(match
   (-> (app = n 0) <-)
   (#f (app ack (app - m 1) (app ack m (app - n 1))))
   (_ (app ack (app - m 1) 1)))
 (envenv '((□? (m n)))))", 249,0,6,6,0,1,5,5,0,2,6,6,0,3,5,5,0,4,6,6,0
"ack", 1, "(list 'eval '(app = n (-> 0 <-)) (envenv '((□? (m n)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 1, "(list 'eval '(app = (-> n <-) 0) (envenv '((□? (m n)))))", 237,0,5,5,0,1,5,5,0,2,5,5,0,3,5,5,0,4,5,5,0
"ack", 1, "(list 'eval '(app (-> = <-) n 0) (envenv '((□? (m n)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 1, "(list
 'eval
 '(match
   (-> (app = m 0) <-)
   (#f
    (match
     (app = n 0)
     (#f (app ack (app - m 1) (app ack m (app - n 1))))
     (_ (app ack (app - m 1) 1))))
   (_ (app + n 1)))
 (envenv '((□? (m n)))))", 135,0,3,3,0,1,3,3,0,2,3,3,0,3,3,3,0,4,3,3,0
"ack", 1, "(list 'eval '(app = m (-> 0 <-)) (envenv '((□? (m n)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 1, "(list 'eval '(app = (-> m <-) 0) (envenv '((□? (m n)))))", 111,0,2,2,0,1,2,2,0,2,3,3,0,3,2,2,0,4,2,2,0
"ack", 1, "(list 'eval '(app (-> = <-) m 0) (envenv '((□? (m n)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 1, "(list 'eval '(letrec (ack) (-> (app ack 3 12) <-)) (envenv '()))", 39,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 1, "(list 'eval '(app ack 3 (-> 12 <-)) (envenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 1, "(list 'eval '(app ack (-> 3 <-) 12) (envenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 1, "(list 'eval '(app (-> ack <-) 3 12) (envenv '()))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 1, "(list 'eval '(top) (envenv '()))", 14,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 1, "(list
 'eval
 '(app
   (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
   (->
    (λ (x1)
      (app
       (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
       (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))
    <-))
 (envenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 1, "(list
 'eval
 '(λ (x1)
    (->
     (app
      (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
      (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
     <-))
 (envenv '((□? (x1)))))", 14,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 1, "(list
 'eval
 '(app
   (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
   (-> (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))) <-))
 (envenv '((□? (x1)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 1, "(list
 'eval
 '(λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-))
 (envenv '((□? (x2)) (□? (x1)))))", 50,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 1, "(list
 'eval
 '(app (λ (z) (app z x1 x2)) (-> (λ (y1 y2) y1) <-))
 (envenv '((□? (x2)) (□? (x1)))))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 1, "(list
 'eval
 '(λ (y1 y2) (-> y1 <-))
 (envenv '((□? (y1 y2)) (□? (x2)) (□? (x1)))))", 39,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 1, "(list
 'eval
 '(app (-> (λ (z) (app z x1 x2)) <-) (λ (y1 y2) y1))
 (envenv '((□? (x2)) (□? (x1)))))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 1, "(list
 'eval
 '(λ (z) (-> (app z x1 x2) <-))
 (envenv '((□? (z)) (□? (x2)) (□? (x1)))))", 64,0,1,1,0,1,1,1,0,2,1,1,0,3,1,1,0,4,1,1,0
"kcfa-2", 1, "(list 'eval '(app z x1 (-> x2 <-)) (envenv '((□? (z)) (□? (x2)) (□? (x1)))))", 14,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 1, "(list 'eval '(app z (-> x1 <-) x2) (envenv '((□? (z)) (□? (x2)) (□? (x1)))))", 16,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 1, "(list 'eval '(app (-> z <-) x1 x2) (envenv '((□? (z)) (□? (x2)) (□? (x1)))))", 7,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 1, "(list
 'eval
 '(app
   (-> (λ (f2) (let ((_ (app f2 #t))) (app f2 #f))) <-)
   (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
 (envenv '((□? (x1)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 1, "(list
 'eval
 '(λ (f2) (-> (let ((_ (app f2 #t))) (app f2 #f)) <-))
 (envenv '((□? (f2)) (□? (x1)))))", 21,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 1, "(list
 'eval
 '(let ((-> _ = (app f2 #t) <-)) bod)
 (envenv '((□? (f2)) (□? (x1)))))", 19,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 1, "(list 'eval '(app f2 (-> #t <-)) (envenv '((□? (f2)) (□? (x1)))))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 1, "(list 'eval '(app (-> f2 <-) #t) (envenv '((□? (f2)) (□? (x1)))))", 6,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 1, "(list 'eval '(let (_) (-> (app f2 #f) <-)) (envenv '((□? (f2)) (□? (x1)))))", 19,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 1, "(list 'eval '(app f2 (-> #f <-)) (envenv '((□? (f2)) (□? (x1)))))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 1, "(list 'eval '(app (-> f2 <-) #f) (envenv '((□? (f2)) (□? (x1)))))", 6,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 1, "(list
 'eval
 '(app
   (-> (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) <-)
   (λ (x1)
     (app
      (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
      (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
 (envenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 1, "(list
 'eval
 '(λ (f1) (-> (let ((_ (app f1 #t))) (app f1 #f)) <-))
 (envenv '((□? (f1)))))", 22,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 1, "(list 'eval '(let ((-> _ = (app f1 #t) <-)) bod) (envenv '((□? (f1)))))", 20,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 1, "(list 'eval '(app f1 (-> #t <-)) (envenv '((□? (f1)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 1, "(list 'eval '(app (-> f1 <-) #t) (envenv '((□? (f1)))))", 5,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 1, "(list 'eval '(let (_) (-> (app f1 #f) <-)) (envenv '((□? (f1)))))", 20,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 1, "(list 'eval '(app f1 (-> #f <-)) (envenv '((□? (f1)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 1, "(list 'eval '(app (-> f1 <-) #f) (envenv '((□? (f1)))))", 5,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"structural-rec", 1, "(list 'eval '(top) (envenv '()))", 20,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"structural-rec", 1, "(list 'eval '(app (λ (x) (app x x)) (-> (λ (y) (app y y)) <-)) (envenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"structural-rec", 1, "(list 'eval '(λ (y) (-> (app y y) <-)) (envenv '((□? (y)))))", 23,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"structural-rec", 1, "(list 'eval '(app y (-> y <-)) (envenv '((□? (y)))))", 18,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"structural-rec", 1, "(list 'eval '(app (-> y <-) y) (envenv '((□? (y)))))", 18,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"structural-rec", 1, "(list 'eval '(app (-> (λ (x) (app x x)) <-) (λ (y) (app y y))) (envenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"structural-rec", 1, "(list 'eval '(λ (x) (-> (app x x) <-)) (envenv '((□? (x)))))", 24,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"structural-rec", 1, "(list 'eval '(app x (-> x <-)) (envenv '((□? (x)))))", 5,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"structural-rec", 1, "(list 'eval '(app (-> x <-) x) (envenv '((□? (x)))))", 5,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"app-num", 2, "(list 'eval '(top) (envenv '()))", 10,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"app-num", 2, "(list 'eval '(let ((-> x = (λ (y) y) <-)) bod) (envenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"app-num", 2, "(list 'eval '(λ (y) (-> y <-)) (envenv '((□? (y)))))", 9,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"app-num", 2, "(list 'eval '(let (x) (-> (let ((_ (app x 1))) (app x 2)) <-)) (envenv '()))", 9,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"app-num", 2, "(list 'eval '(let ((-> _ = (app x 1) <-)) bod) (envenv '()))", 8,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"app-num", 2, "(list 'eval '(app x (-> 1 <-)) (envenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"app-num", 2, "(list 'eval '(app (-> x <-) 1) (envenv '()))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"app-num", 2, "(list 'eval '(let (_) (-> (app x 2) <-)) (envenv '()))", 8,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"app-num", 2, "(list 'eval '(app x (-> 2 <-)) (envenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"app-num", 2, "(list 'eval '(app (-> x <-) 2) (envenv '()))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 2, "(list 'eval '(top) (envenv '()))", 21,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 2, "(list
 'eval
 '(letrec ((->
            a
            =
            (λ (y) (match (app equal? y 0) (#t (app a (app - y 1))) (#f y)))
            <-))
    bod)
 (envenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 2, "(list
 'eval
 '(λ (y) (-> (match (app equal? y 0) (#t (app a (app - y 1))) (#f y)) <-))
 (envenv '((□? (y)))))", 85,0,1,1,0,1,1,1,0,2,1,1,0,3,1,1,0,4,2,2,0
"basic-letrec", 2, "(list
 'eval
 '(match (app equal? y 0) (#t (app a (app - y 1))) (-> #f y <-))
 (envenv '((□? (y)))))", 42,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 2, "(list
 'eval
 '(match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
 (envenv '((□? (y)))))", 73,0,1,1,0,1,1,1,0,2,1,1,0,3,1,1,0,4,1,1,0
"basic-letrec", 2, "(list 'eval '(app a (-> (app - y 1) <-)) (envenv '((□? (y)))))", 36,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 2, "(list 'eval '(app - y (-> 1 <-)) (envenv '((□? (y)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 2, "(list 'eval '(app - (-> y <-) 1) (envenv '((□? (y)))))", 36,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 2, "(list 'eval '(app (-> - <-) y 1) (envenv '((□? (y)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 2, "(list 'eval '(app (-> a <-) (app - y 1)) (envenv '((□? (y)))))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 2, "(list
 'eval
 '(match (-> (app equal? y 0) <-) (#t (app a (app - y 1))) (#f y))
 (envenv '((□? (y)))))", 60,0,1,1,0,1,1,1,0,2,1,1,0,3,1,1,0,4,1,1,0
"basic-letrec", 2, "(list 'eval '(app equal? y (-> 0 <-)) (envenv '((□? (y)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 2, "(list 'eval '(app equal? (-> y <-) 0) (envenv '((□? (y)))))", 42,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 2, "(list 'eval '(app (-> equal? <-) y 0) (envenv '((□? (y)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 2, "(list 'eval '(letrec (a) (-> (app a 2) <-)) (envenv '()))", 20,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 2, "(list 'eval '(app a (-> 2 <-)) (envenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letrec", 2, "(list 'eval '(app (-> a <-) 2) (envenv '()))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letstar", 2, "(list 'eval '(top) (envenv '()))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letstar", 2, "(list 'eval '(let* (a (-> b = a <-)) bod) (envenv '()))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letstar", 2, "(list 'eval '(let* ((-> a = 10 <-) b) bod) (envenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"basic-letstar", 2, "(list 'eval '(let* (a b) (-> a <-)) (envenv '()))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"constr", 2, "(list 'eval '(top) (envenv '()))", 9,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"constr", 2, "(list 'eval '(let ((-> x = (app cons 1 nil) <-)) bod) (envenv '()))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"constr", 2, "(list 'eval '(app cons 1 (-> nil <-)) (envenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"constr", 2, "(list 'eval '(app cons (-> 1 <-) nil) (envenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"constr", 2, "(list 'eval '(app (-> cons <-) 1 nil) (envenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"constr", 2, "(list 'eval '(let (x) (-> (match x ((cons 1 n) n) (_ x)) <-)) (envenv '()))", 8,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"constr", 2, "(list 'eval '(match x ((cons 1 n) n) (-> _ x <-)) (envenv '()))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"constr", 2, "(list 'eval '(match x (-> (cons 1 n) n <-) (_ x)) (envenv '()))", 6,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"constr", 2, "(list 'eval '(match (-> x <-) ((cons 1 n) n) (_ x)) (envenv '()))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"err", 2, "(list 'eval '(top) (envenv '()))", 6,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"err", 2, "(list 'eval '(app (λ (x) (app x x)) (-> 2 <-)) (envenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"err", 2, "(list 'eval '(app (-> (λ (x) (app x x)) <-) 2) (envenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"err", 2, "(list 'eval '(λ (x) (-> (app x x) <-)) (envenv '((□? (x)))))", 7,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"err", 2, "(list 'eval '(app x (-> x <-)) (envenv '((□? (x)))))", 5,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"err", 2, "(list 'eval '(app (-> x <-) x) (envenv '((□? (x)))))", 5,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"id", 2, "(list 'eval '(top) (envenv '()))", 5,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"id", 2, "(list 'eval '(app (λ (x) x) (-> (λ (y) y) <-)) (envenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"id", 2, "(list 'eval '(λ (y) (-> y <-)) (envenv '((□? (y)))))", 7,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"id", 2, "(list 'eval '(app (-> (λ (x) x) <-) (λ (y) y)) (envenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"id", 2, "(list 'eval '(λ (x) (-> x <-)) (envenv '((□? (x)))))", 5,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"let-num", 2, "(list 'eval '(top) (envenv '()))", 8,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"let-num", 2, "(list 'eval '(let ((-> x = (λ (y) y) <-)) bod) (envenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"let-num", 2, "(list 'eval '(λ (y) (-> y <-)) (envenv '((□? (y)))))", 6,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"let-num", 2, "(list 'eval '(let (x) (-> (app x 1) <-)) (envenv '()))", 7,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"let-num", 2, "(list 'eval '(app x (-> 1 <-)) (envenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"let-num", 2, "(list 'eval '(app (-> x <-) 1) (envenv '()))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"let", 2, "(list 'eval '(top) (envenv '()))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"let", 2, "(list 'eval '(let ((-> x = (λ (y) y) <-)) bod) (envenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"let", 2, "(list 'eval '(λ (y) (-> y <-)) (envenv '((□? (y)))))", 5,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"let", 2, "(list 'eval '(let (x) (-> x <-)) (envenv '()))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"multi-param", 2, "(list 'eval '(top) (envenv '()))", 11,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"multi-param", 2, "(list 'eval '(app (λ (x y) (app x y)) (λ (z) z) (-> 2 <-)) (envenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"multi-param", 2, "(list 'eval '(app (λ (x y) (app x y)) (-> (λ (z) z) <-) 2) (envenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"multi-param", 2, "(list 'eval '(λ (z) (-> z <-)) (envenv '((□? (z)))))", 9,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"multi-param", 2, "(list 'eval '(app (-> (λ (x y) (app x y)) <-) (λ (z) z) 2) (envenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"multi-param", 2, "(list 'eval '(λ (x y) (-> (app x y) <-)) (envenv '((□? (x y)))))", 15,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"multi-param", 2, "(list 'eval '(app x (-> y <-)) (envenv '((□? (x y)))))", 5,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"multi-param", 2, "(list 'eval '(app (-> x <-) y) (envenv '((□? (x y)))))", 5,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 2, "(list 'eval '(top) (envenv '()))", 38,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 2, "(list
 'eval
 '(letrec ((->
            ack
            =
            (λ (m n)
              (match
               (app = m 0)
               (#f
                (match
                 (app = n 0)
                 (#f (app ack (app - m 1) (app ack m (app - n 1))))
                 (_ (app ack (app - m 1) 1))))
               (_ (app + n 1))))
            <-))
    bod)
 (envenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 2, "(list
 'eval
 '(λ (m n)
    (->
     (match
      (app = m 0)
      (#f
       (match
        (app = n 0)
        (#f (app ack (app - m 1) (app ack m (app - n 1))))
        (_ (app ack (app - m 1) 1))))
      (_ (app + n 1)))
     <-))
 (envenv '((□? (m n)))))", 980,0,64,64,1,1,66,66,2,2,65,65,2,3,67,67,2,4,66,66,2
"ack", 2, "(list
 'eval
 '(match
   (app = m 0)
   (#f
    (match
     (app = n 0)
     (#f (app ack (app - m 1) (app ack m (app - n 1))))
     (_ (app ack (app - m 1) 1))))
   (-> _ (app + n 1) <-))
 (envenv '((□? (m n)))))", 896,0,53,53,2,1,52,52,1,2,54,54,2,3,58,58,6,4,54,54,2
"ack", 2, "(list 'eval '(app + n (-> 1 <-)) (envenv '((□? (m n)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 2, "(list 'eval '(app + (-> n <-) 1) (envenv '((□? (m n)))))", 878,0,51,52,2,1,50,51,1,2,52,53,2,3,51,52,1,4,52,53,3
"ack", 2, "(list 'eval '(app (-> + <-) n 1) (envenv '((□? (m n)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 2, "(list
 'eval
 '(match
   (app = m 0)
   (->
    #f
    (match
     (app = n 0)
     (#f (app ack (app - m 1) (app ack m (app - n 1))))
     (_ (app ack (app - m 1) 1)))
    <-)
   (_ (app + n 1)))
 (envenv '((□? (m n)))))", 962,0,62,62,2,1,65,65,5,2,61,61,2,3,61,61,2,4,62,62,2
"ack", 2, "(list
 'eval
 '(match
   (app = n 0)
   (#f (app ack (app - m 1) (app ack m (app - n 1))))
   (-> _ (app ack (app - m 1) 1) <-))
 (envenv '((□? (m n)))))", 916,0,53,53,2,1,53,54,2,2,53,53,1,3,52,52,1,4,54,54,3
"ack", 2, "(list 'eval '(app ack (app - m 1) (-> 1 <-)) (envenv '((□? (m n)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 2, "(list 'eval '(app ack (-> (app - m 1) <-) 1) (envenv '((□? (m n)))))", 328,0,20,20,0,1,21,21,0,2,21,21,1,3,20,20,0,4,20,20,0
"ack", 2, "(list 'eval '(app - m (-> 1 <-)) (envenv '((□? (m n)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 2, "(list 'eval '(app - (-> m <-) 1) (envenv '((□? (m n)))))", 328,0,21,21,1,1,20,20,0,2,20,20,0,3,20,20,0,4,20,20,0
"ack", 2, "(list 'eval '(app (-> - <-) m 1) (envenv '((□? (m n)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 2, "(list 'eval '(app (-> ack <-) (app - m 1) 1) (envenv '((□? (m n)))))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 2, "(list
 'eval
 '(match
   (app = n 0)
   (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-)
   (_ (app ack (app - m 1) 1)))
 (envenv '((□? (m n)))))", 916,0,52,52,2,1,52,52,1,2,52,52,1,3,53,54,2,4,51,51,1
"ack", 2, "(list
 'eval
 '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
 (envenv '((□? (m n)))))", 872,0,49,49,2,1,48,48,1,2,48,48,1,3,50,50,3,4,48,48,1
"ack", 2, "(list 'eval '(app ack m (-> (app - n 1) <-)) (envenv '((□? (m n)))))", 872,0,49,49,1,1,50,50,2,2,49,49,1,3,48,48,1,4,50,50,2
"ack", 2, "(list 'eval '(app - n (-> 1 <-)) (envenv '((□? (m n)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 2, "(list 'eval '(app - (-> n <-) 1) (envenv '((□? (m n)))))", 872,0,51,51,2,1,53,53,4,2,49,50,2,3,49,50,1,4,51,52,3
"ack", 2, "(list 'eval '(app (-> - <-) n 1) (envenv '((□? (m n)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 2, "(list 'eval '(app ack (-> m <-) (app - n 1)) (envenv '((□? (m n)))))", 328,0,20,20,0,1,20,20,0,2,22,22,2,3,20,20,0,4,19,19,0
"ack", 2, "(list 'eval '(app (-> ack <-) m (app - n 1)) (envenv '((□? (m n)))))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 2, "(list
 'eval
 '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
 (envenv '((□? (m n)))))", 328,0,21,21,0,1,20,20,0,2,20,20,0,3,20,20,0,4,20,20,0
"ack", 2, "(list 'eval '(app - m (-> 1 <-)) (envenv '((□? (m n)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 2, "(list 'eval '(app - (-> m <-) 1) (envenv '((□? (m n)))))", 328,0,20,20,0,1,20,20,0,2,20,20,0,3,20,20,0,4,20,20,0
"ack", 2, "(list 'eval '(app (-> - <-) m 1) (envenv '((□? (m n)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 2, "(list
 'eval
 '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
 (envenv '((□? (m n)))))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 2, "(list
 'eval
 '(match
   (-> (app = n 0) <-)
   (#f (app ack (app - m 1) (app ack m (app - n 1))))
   (_ (app ack (app - m 1) 1)))
 (envenv '((□? (m n)))))", 896,0,52,52,1,1,51,51,1,2,52,52,2,3,51,51,1,4,52,52,2
"ack", 2, "(list 'eval '(app = n (-> 0 <-)) (envenv '((□? (m n)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 2, "(list 'eval '(app = (-> n <-) 0) (envenv '((□? (m n)))))", 878,0,53,53,4,1,50,50,1,2,50,50,1,3,51,51,2,4,50,50,1
"ack", 2, "(list 'eval '(app (-> = <-) n 0) (envenv '((□? (m n)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 2, "(list
 'eval
 '(match
   (-> (app = m 0) <-)
   (#f
    (match
     (app = n 0)
     (#f (app ack (app - m 1) (app ack m (app - n 1))))
     (_ (app ack (app - m 1) 1))))
   (_ (app + n 1)))
 (envenv '((□? (m n)))))", 432,0,28,28,0,1,28,28,0,2,30,30,3,3,27,27,0,4,28,28,0
"ack", 2, "(list 'eval '(app = m (-> 0 <-)) (envenv '((□? (m n)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 2, "(list 'eval '(app = (-> m <-) 0) (envenv '((□? (m n)))))", 354,0,24,24,0,1,24,24,0,2,24,24,0,3,23,23,0,4,24,24,1
"ack", 2, "(list 'eval '(app (-> = <-) m 0) (envenv '((□? (m n)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 2, "(list 'eval '(letrec (ack) (-> (app ack 3 12) <-)) (envenv '()))", 37,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 2, "(list 'eval '(app ack 3 (-> 12 <-)) (envenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 2, "(list 'eval '(app ack (-> 3 <-) 12) (envenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"ack", 2, "(list 'eval '(app (-> ack <-) 3 12) (envenv '()))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 2, "(list 'eval '(top) (envenv '()))", 14,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 2, "(list
 'eval
 '(app
   (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
   (->
    (λ (x1)
      (app
       (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
       (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))
    <-))
 (envenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 2, "(list
 'eval
 '(λ (x1)
    (->
     (app
      (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
      (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
     <-))
 (envenv '((□? (x1)))))", 16,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 2, "(list
 'eval
 '(app
   (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
   (-> (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))) <-))
 (envenv '((□? (x1)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 2, "(list
 'eval
 '(λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-))
 (envenv '((□? (x2)) (□? (x1)))))", 96,0,2,2,0,1,2,2,0,2,2,2,0,3,2,2,0,4,2,2,0
"kcfa-2", 2, "(list
 'eval
 '(app (λ (z) (app z x1 x2)) (-> (λ (y1 y2) y1) <-))
 (envenv '((□? (x2)) (□? (x1)))))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 2, "(list
 'eval
 '(λ (y1 y2) (-> y1 <-))
 (envenv '((□? (y1 y2)) (□? (x2)) (□? (x1)))))", 67,0,1,1,0,1,1,1,0,2,1,1,0,3,1,1,0,4,1,1,0
"kcfa-2", 2, "(list
 'eval
 '(app (-> (λ (z) (app z x1 x2)) <-) (λ (y1 y2) y1))
 (envenv '((□? (x2)) (□? (x1)))))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 2, "(list
 'eval
 '(λ (z) (-> (app z x1 x2) <-))
 (envenv '((□? (z)) (□? (x2)) (□? (x1)))))", 122,0,3,3,0,1,4,4,0,2,3,3,0,3,4,4,0,4,3,3,0
"kcfa-2", 2, "(list 'eval '(app z x1 (-> x2 <-)) (envenv '((□? (z)) (□? (x2)) (□? (x1)))))", 17,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 2, "(list 'eval '(app z (-> x1 <-) x2) (envenv '((□? (z)) (□? (x2)) (□? (x1)))))", 16,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 2, "(list 'eval '(app (-> z <-) x1 x2) (envenv '((□? (z)) (□? (x2)) (□? (x1)))))", 8,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 2, "(list
 'eval
 '(app
   (-> (λ (f2) (let ((_ (app f2 #t))) (app f2 #f))) <-)
   (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
 (envenv '((□? (x1)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 2, "(list
 'eval
 '(λ (f2) (-> (let ((_ (app f2 #t))) (app f2 #f)) <-))
 (envenv '((□? (f2)) (□? (x1)))))", 26,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 2, "(list
 'eval
 '(let ((-> _ = (app f2 #t) <-)) bod)
 (envenv '((□? (f2)) (□? (x1)))))", 24,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 2, "(list 'eval '(app f2 (-> #t <-)) (envenv '((□? (f2)) (□? (x1)))))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 2, "(list 'eval '(app (-> f2 <-) #t) (envenv '((□? (f2)) (□? (x1)))))", 7,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 2, "(list 'eval '(let (_) (-> (app f2 #f) <-)) (envenv '((□? (f2)) (□? (x1)))))", 24,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 2, "(list 'eval '(app f2 (-> #f <-)) (envenv '((□? (f2)) (□? (x1)))))", 3,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 2, "(list 'eval '(app (-> f2 <-) #f) (envenv '((□? (f2)) (□? (x1)))))", 7,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 2, "(list
 'eval
 '(app
   (-> (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) <-)
   (λ (x1)
     (app
      (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
      (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
 (envenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 2, "(list
 'eval
 '(λ (f1) (-> (let ((_ (app f1 #t))) (app f1 #f)) <-))
 (envenv '((□? (f1)))))", 23,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 2, "(list 'eval '(let ((-> _ = (app f1 #t) <-)) bod) (envenv '((□? (f1)))))", 21,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 2, "(list 'eval '(app f1 (-> #t <-)) (envenv '((□? (f1)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 2, "(list 'eval '(app (-> f1 <-) #t) (envenv '((□? (f1)))))", 5,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 2, "(list 'eval '(let (_) (-> (app f1 #f) <-)) (envenv '((□? (f1)))))", 21,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 2, "(list 'eval '(app f1 (-> #f <-)) (envenv '((□? (f1)))))", 2,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"kcfa-2", 2, "(list 'eval '(app (-> f1 <-) #f) (envenv '((□? (f1)))))", 5,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"structural-rec", 2, "(list 'eval '(top) (envenv '()))", 27,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"structural-rec", 2, "(list 'eval '(app (λ (x) (app x x)) (-> (λ (y) (app y y)) <-)) (envenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"structural-rec", 2, "(list 'eval '(λ (y) (-> (app y y) <-)) (envenv '((□? (y)))))", 33,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"structural-rec", 2, "(list 'eval '(app y (-> y <-)) (envenv '((□? (y)))))", 24,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"structural-rec", 2, "(list 'eval '(app (-> y <-) y) (envenv '((□? (y)))))", 24,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"structural-rec", 2, "(list 'eval '(app (-> (λ (x) (app x x)) <-) (λ (y) (app y y))) (envenv '()))", 1,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"structural-rec", 2, "(list 'eval '(λ (x) (-> (app x x) <-)) (envenv '((□? (x)))))", 34,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"structural-rec", 2, "(list 'eval '(app x (-> x <-)) (envenv '((□? (x)))))", 5,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
"structural-rec", 2, "(list 'eval '(app (-> x <-) x) (envenv '((□? (x)))))", 5,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0
