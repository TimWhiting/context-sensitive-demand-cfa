'(clean-cache
  primtest
  2
  94
  letrec*
  "\"'(eval ((top) letrec* (square ... byte-size) ...) (env ()))\""
  #f)
'(clean-cache
  primtest
  2
  94
  let
  "\"'(eval\n  (λ (byte-size iterations) (-> (let (n) ...) <-))\n  (env ((□? (byte-size iterations)))))\""
  #f)
'(clean-cache
  primtest
  2
  25
  94
  app
  "\"'(eval\n  (let (... () (n (-> (app random byte-size) <-)) () ...) ...)\n  (env ((□? (byte-size iterations)))))\""
  18
  14
  3
  1
  11
  2
  13
  1
  3/4
  4
  #f
  30/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval (app random (-> byte-size <-)) (env ((□? (byte-size iterations)))))\""
  10
  6
  3
  1
  5
  2
  7
  1
  3/4
  0
  #f
  4
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  primtest
  2
  94
  match
  "\"'(eval\n  (let (n)\n    (->\n     (match\n      (app\n       and\n       (app not (app is-trivial-composite? n))\n       (app is-fermat-prime? n iterations))\n      ...)\n     <-))\n  (env ((□? (byte-size iterations)))))\""
  #f)
'(clean-cache
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval\n  (match\n   (app\n    and\n    (app not (app is-trivial-composite? n))\n    (app is-fermat-prime? n iterations))\n   (#f)\n   (_ (-> n <-)))\n  (env ((□? (byte-size iterations)))))\""
  22
  18
  3
  1
  14
  2
  16
  1
  3/4
  4
  #f
  38/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  primtest
  2
  94
  app
  "\"'(eval\n  (match\n   (app\n    and\n    (app not (app is-trivial-composite? n))\n    (app is-fermat-prime? n iterations))\n   ((#f) (-> (app generate-fermat-prime byte-size iterations) <-))\n   _)\n  (env ((□? (byte-size iterations)))))\""
  #f)
'(clean-cache
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval\n  (app generate-fermat-prime byte-size (-> iterations <-))\n  (env ((□? (byte-size iterations)))))\""
  10
  6
  3
  1
  5
  2
  7
  1
  11/12
  0
  #f
  4
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval\n  (app generate-fermat-prime (-> byte-size <-) iterations)\n  (env ((□? (byte-size iterations)))))\""
  10
  6
  3
  1
  5
  2
  7
  1
  11/12
  0
  #f
  4
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  primtest
  2
  94
  app
  "\"'(eval\n  (match\n   (->\n    (app\n     and\n     (app not (app is-trivial-composite? n))\n     (app is-fermat-prime? n iterations))\n    <-)\n   (#f)\n   _)\n  (env ((□? (byte-size iterations)))))\""
  #f)
'(clean-cache
  primtest
  2
  94
  app
  "\"'(eval\n  (app\n   and\n   (app not (app is-trivial-composite? n))\n   (-> (app is-fermat-prime? n iterations) <-))\n  (env ((□? (byte-size iterations)))))\""
  #f)
'(clean-cache
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval\n  (app is-fermat-prime? n (-> iterations <-))\n  (env ((□? (byte-size iterations)))))\""
  10
  6
  3
  1
  5
  2
  7
  1
  3/4
  0
  #f
  4
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval\n  (app is-fermat-prime? (-> n <-) iterations)\n  (env ((□? (byte-size iterations)))))\""
  22
  18
  3
  1
  14
  2
  16
  1
  3/4
  4
  #f
  38/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  primtest
  2
  94
  app
  "\"'(eval\n  (app\n   and\n   (-> (app not (app is-trivial-composite? n)) <-)\n   (app is-fermat-prime? n iterations))\n  (env ((□? (byte-size iterations)))))\""
  #f)
'(clean-cache
  primtest
  2
  94
  app
  "\"'(eval\n  (app not (-> (app is-trivial-composite? n) <-))\n  (env ((□? (byte-size iterations)))))\""
  #f)
'(clean-cache
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval\n  (app is-trivial-composite? (-> n <-))\n  (env ((□? (byte-size iterations)))))\""
  22
  18
  3
  1
  14
  2
  16
  1
  3/4
  4
  #f
  38/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  primtest
  2
  94
  app
  "\"'(eval\n  (λ (n iterations)\n    (-> (app or (app <= iterations 0) (let* (byte-size ... a) ...)) <-))\n  (env ((□? (n iterations)))))\""
  #f)
'(clean-cache
  primtest
  2
  94
  let*
  "\"'(eval\n  (app or (app <= iterations 0) (-> (let* (byte-size ... a) ...) <-))\n  (env ((□? (n iterations)))))\""
  #f)
'(clean-cache
  primtest
  2
  25
  94
  app
  "\"'(eval\n  (let* (... byte-size (a (-> (app random byte-size) <-)) () ...) ...)\n  (env ((□? (n iterations)))))\""
  121
  111
  6
  4
  69
  3
  72
  1
  286/441
  38
  #f
  482/111
  ((5 5 0) (5 5 0) (5 5 0)))
'(clean-cache
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval (app random (-> byte-size <-)) (env ((□? (n iterations)))))\""
  107
  97
  6
  4
  61
  3
  64
  1
  262/399
  31
  #f
  419/97
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  primtest
  2
  25
  94
  app
  "\"'(eval\n  (let* (...\n         ()\n         (byte-size (-> (app ceiling (app / (app log n) (app log 2))) <-))\n         a\n         ...)\n    ...)\n  (env ((□? (n iterations)))))\""
  100
  90
  6
  4
  57
  3
  60
  1
  125/189
  31
  #f
  391/90
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  primtest
  2
  25
  94
  app
  "\"'(eval\n  (app ceiling (-> (app / (app log n) (app log 2)) <-))\n  (env ((□? (n iterations)))))\""
  86
  76
  6
  4
  49
  3
  52
  1
  113/168
  24
  #f
  82/19
  ((4 4 0) (7/2 7/2 0) (7/2 7/2 0)))
'(clean-cache
  primtest
  2
  25
  94
  app
  "\"'(eval (app / (app log n) (-> (app log 2) <-)) (env ((□? (n iterations)))))\""
  4
  3
  0
  1
  0
  0
  0
  1
  0
  1
  #f
  13/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  primtest
  2
  25
  94
  app
  "\"'(eval (app / (-> (app log n) <-) (app log 2)) (env ((□? (n iterations)))))\""
  53
  43
  6
  4
  29
  3
  32
  1
  54/77
  11
  #f
  183/43
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval (app log (-> n <-)) (env ((□? (n iterations)))))\""
  39
  29
  6
  4
  21
  3
  24
  1
  46/63
  4
  #f
  120/29
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  primtest
  2
  94
  match
  "\"'(eval\n  (let* (byte-size ... a)\n    (-> (match (app = (app modulo-power a (app - n 1) n) 1) ...) <-))\n  (env ((□? (n iterations)))))\""
  #f)
'(clean-cache
  primtest
  2
  94
  app
  "\"'(eval\n  (match\n   (app = (app modulo-power a (app - n 1) n) 1)\n   (#f)\n   (_ (-> (app is-fermat-prime? n (app - iterations 1)) <-)))\n  (env ((□? (n iterations)))))\""
  #f)
'(clean-cache
  primtest
  2
  25
  94
  app
  "\"'(eval\n  (app is-fermat-prime? n (-> (app - iterations 1) <-))\n  (env ((□? (n iterations)))))\""
  47
  37
  6
  4
  24
  3
  27
  1
  169/224
  7
  #f
  155/37
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval (app - (-> iterations <-) 1) (env ((□? (n iterations)))))\""
  45
  35
  6
  4
  24
  3
  27
  1
  523/672
  6
  #f
  146/35
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval\n  (app is-fermat-prime? (-> n <-) (app - iterations 1))\n  (env ((□? (n iterations)))))\""
  38
  28
  6
  4
  21
  3
  24
  1
  23/28
  4
  #f
  29/7
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  primtest
  2
  25
  94
  app
  "\"'(eval\n  (match\n   (app = (app modulo-power a (app - n 1) n) 1)\n   ((#f) (-> (app #f) <-))\n   _)\n  (env ((□? (n iterations)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  primtest
  2
  94
  app
  "\"'(eval\n  (match (-> (app = (app modulo-power a (app - n 1) n) 1) <-) (#f) _)\n  (env ((□? (n iterations)))))\""
  #f)
'(clean-cache
  primtest
  2
  94
  app
  "\"'(eval\n  (app = (-> (app modulo-power a (app - n 1) n) <-) 1)\n  (env ((□? (n iterations)))))\""
  #f)
'(clean-cache
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval (app modulo-power a (app - n 1) (-> n <-)) (env ((□? (n iterations)))))\""
  39
  29
  6
  4
  21
  3
  24
  1
  46/63
  4
  #f
  120/29
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  primtest
  2
  25
  94
  app
  "\"'(eval (app modulo-power a (-> (app - n 1) <-) n) (env ((□? (n iterations)))))\""
  60
  50
  6
  4
  33
  3
  36
  1
  29/42
  11
  #f
  211/50
  ((3 3 0) (5/2 5/2 0) (3 3 0)))
'(clean-cache
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval (app - (-> n <-) 1) (env ((□? (n iterations)))))\""
  39
  29
  6
  4
  21
  3
  24
  1
  46/63
  4
  #f
  120/29
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval (app modulo-power (-> a <-) (app - n 1) n) (env ((□? (n iterations)))))\""
  128
  118
  6
  4
  73
  3
  76
  1
  149/231
  38
  #f
  255/59
  ((11/2 11/2 0) (11/2 11/2 0) (11/2 11/2 0)))
'(clean-cache
  primtest
  2
  25
  94
  app
  "\"'(eval\n  (app or (-> (app <= iterations 0) <-) (let* (byte-size ... a) ...))\n  (env ((□? (n iterations)))))\""
  66
  56
  6
  4
  36
  3
  39
  1
  75/112
  13
  #f
  239/56
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval (app <= (-> iterations <-) 0) (env ((□? (n iterations)))))\""
  45
  35
  6
  4
  24
  3
  27
  1
  59/84
  6
  #f
  146/35
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  primtest
  2
  94
  app
  "\"'(eval\n  (λ (n)\n    (->\n     (app\n      or\n      (app = (app modulo n 2) 0)\n      (app = (app modulo n 3) 0)\n      (app = (app modulo n 5) 0)\n      (app = (app modulo n 7) 0)\n      (app = (app modulo n 11) 0)\n      (app = (app modulo n 13) 0)\n      (app = (app modulo n 17) 0)\n      (app = (app modulo n 19) 0)\n      (app = (app modulo n 23) 0))\n     <-))\n  (env ((□? (n)))))\""
  #f)
'(clean-cache
  primtest
  2
  25
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (-> (app = (app modulo n 23) 0) <-))\n  (env ((□? (n)))))\""
  54
  46
  5
  3
  29
  3
  32
  1
  9/14
  12
  #f
  99/23
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  primtest
  2
  25
  94
  app
  "\"'(eval (app = (-> (app modulo n 23) <-) 0) (env ((□? (n)))))\""
  42
  34
  5
  3
  23
  3
  26
  1
  15/22
  8
  #f
  72/17
  ((1 1 0) (1 1 0) (3/2 3/2 0)))
'(clean-cache
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 23) (env ((□? (n)))))\""
  30
  22
  5
  3
  17
  3
  20
  1
  3/4
  4
  #f
  46/11
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  primtest
  2
  25
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (-> (app = (app modulo n 19) 0) <-)\n   (app = (app modulo n 23) 0))\n  (env ((□? (n)))))\""
  54
  46
  5
  3
  29
  3
  32
  1
  9/14
  12
  #f
  99/23
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  primtest
  2
  25
  94
  app
  "\"'(eval (app = (-> (app modulo n 19) <-) 0) (env ((□? (n)))))\""
  42
  34
  5
  3
  23
  3
  26
  1
  15/22
  8
  #f
  72/17
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 19) (env ((□? (n)))))\""
  30
  22
  5
  3
  17
  3
  20
  1
  3/4
  4
  #f
  46/11
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  primtest
  2
  25
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (-> (app = (app modulo n 17) 0) <-)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env ((□? (n)))))\""
  54
  46
  5
  3
  29
  3
  32
  1
  9/14
  12
  #f
  99/23
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  primtest
  2
  25
  94
  app
  "\"'(eval (app = (-> (app modulo n 17) <-) 0) (env ((□? (n)))))\""
  42
  34
  5
  3
  23
  3
  26
  1
  15/22
  8
  #f
  72/17
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 17) (env ((□? (n)))))\""
  30
  22
  5
  3
  17
  3
  20
  1
  3/4
  4
  #f
  46/11
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  primtest
  2
  25
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (-> (app = (app modulo n 13) 0) <-)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env ((□? (n)))))\""
  54
  46
  5
  3
  29
  3
  32
  1
  9/14
  12
  #f
  99/23
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  primtest
  2
  25
  94
  app
  "\"'(eval (app = (-> (app modulo n 13) <-) 0) (env ((□? (n)))))\""
  42
  34
  5
  3
  23
  3
  26
  1
  15/22
  8
  #f
  72/17
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 13) (env ((□? (n)))))\""
  30
  22
  5
  3
  17
  3
  20
  1
  3/4
  4
  #f
  46/11
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  primtest
  2
  25
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (-> (app = (app modulo n 11) 0) <-)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env ((□? (n)))))\""
  54
  46
  5
  3
  29
  3
  32
  1
  9/14
  12
  #f
  99/23
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  primtest
  2
  25
  94
  app
  "\"'(eval (app = (-> (app modulo n 11) <-) 0) (env ((□? (n)))))\""
  42
  34
  5
  3
  23
  3
  26
  1
  15/22
  8
  #f
  72/17
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 11) (env ((□? (n)))))\""
  30
  22
  5
  3
  17
  3
  20
  1
  3/4
  4
  #f
  46/11
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  primtest
  2
  25
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (-> (app = (app modulo n 7) 0) <-)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env ((□? (n)))))\""
  54
  46
  5
  3
  29
  3
  32
  1
  9/14
  12
  #f
  99/23
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  primtest
  2
  25
  94
  app
  "\"'(eval (app = (-> (app modulo n 7) <-) 0) (env ((□? (n)))))\""
  42
  34
  5
  3
  23
  3
  26
  1
  15/22
  8
  #f
  72/17
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 7) (env ((□? (n)))))\""
  30
  22
  5
  3
  17
  3
  20
  1
  3/4
  4
  #f
  46/11
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  primtest
  2
  25
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (-> (app = (app modulo n 5) 0) <-)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env ((□? (n)))))\""
  54
  46
  5
  3
  29
  3
  32
  1
  9/14
  12
  #f
  99/23
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  primtest
  2
  25
  94
  app
  "\"'(eval (app = (-> (app modulo n 5) <-) 0) (env ((□? (n)))))\""
  42
  34
  5
  3
  23
  3
  26
  1
  15/22
  8
  #f
  72/17
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 5) (env ((□? (n)))))\""
  30
  22
  5
  3
  17
  3
  20
  1
  3/4
  4
  #f
  46/11
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  primtest
  2
  25
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (-> (app = (app modulo n 3) 0) <-)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env ((□? (n)))))\""
  54
  46
  5
  3
  29
  3
  32
  1
  9/14
  12
  #f
  99/23
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  primtest
  2
  25
  94
  app
  "\"'(eval (app = (-> (app modulo n 3) <-) 0) (env ((□? (n)))))\""
  42
  34
  5
  3
  23
  3
  26
  1
  15/22
  8
  #f
  72/17
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 3) (env ((□? (n)))))\""
  30
  22
  5
  3
  17
  3
  20
  1
  3/4
  4
  #f
  46/11
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  primtest
  2
  25
  94
  app
  "\"'(eval\n  (app\n   or\n   (-> (app = (app modulo n 2) 0) <-)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env ((□? (n)))))\""
  54
  46
  5
  3
  29
  3
  32
  1
  9/14
  12
  #f
  99/23
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  primtest
  2
  25
  94
  app
  "\"'(eval (app = (-> (app modulo n 2) <-) 0) (env ((□? (n)))))\""
  42
  34
  5
  3
  23
  3
  26
  1
  15/22
  8
  #f
  72/17
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 2) (env ((□? (n)))))\""
  30
  22
  5
  3
  17
  3
  20
  1
  3/4
  4
  #f
  46/11
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  primtest
  2
  94
  match
  "\"'(eval\n  (λ (base exp n) (-> (match (app = exp 0) ...) <-))\n  (env ((□? (base exp n)))))\""
  #f)
'(clean-cache
  primtest
  2
  94
  match
  "\"'(eval\n  (match (app = exp 0) ((#f) (-> (match (app odd? exp) ...) <-)) _)\n  (env ((□? (base exp n)))))\""
  #f)
'(clean-cache
  primtest
  2
  94
  app
  "\"'(eval\n  (match\n   (app odd? exp)\n   (#f)\n   (_\n    (->\n     (app modulo (app * base (app modulo-power base (app - exp 1) n)) n)\n     <-)))\n  (env ((□? (base exp n)))))\""
  #f)
'(clean-cache
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval\n  (app modulo (app * base (app modulo-power base (app - exp 1) n)) (-> n <-))\n  (env ((□? (base exp n)))))\""
  74
  57
  10
  7
  41
  4
  45
  1
  1669/2310
  4
  #f
  232/57
  ((7 7 0) (7 7 0) (7 7 0)))
'(clean-cache
  primtest
  2
  94
  app
  "\"'(eval\n  (app modulo (-> (app * base (app modulo-power base (app - exp 1) n)) <-) n)\n  (env ((□? (base exp n)))))\""
  #f)
'(clean-cache
  primtest
  2
  25
  94
  app
  "\"'(eval\n  (app * base (-> (app modulo-power base (app - exp 1) n) <-))\n  (env ((□? (base exp n)))))\""
  219
  200
  10
  9
  140
  4
  144
  1
  7481/10164
  54
  #f
  431/100
  ((31/2 31/2 0) (15 15 0) (15 15 0)))
'(clean-cache
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval\n  (app modulo-power base (app - exp 1) (-> n <-))\n  (env ((□? (base exp n)))))\""
  74
  57
  10
  7
  41
  4
  45
  1
  662/847
  4
  #f
  232/57
  ((7 7 0) (7 7 0) (7 7 0)))
'(clean-cache
  primtest
  2
  25
  94
  app
  "\"'(eval\n  (app modulo-power base (-> (app - exp 1) <-) n)\n  (env ((□? (base exp n)))))\""
  158
  141
  10
  7
  101
  4
  105
  1
  2867/3850
  32
  #f
  596/141
  ((21/2 21/2 0) (21/2 21/2 0) (21/2 21/2 0)))
'(clean-cache
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval (app - (-> exp <-) 1) (env ((□? (base exp n)))))\""
  149
  132
  10
  7
  101
  4
  105
  1
  13577/17325
  29
  #f
  557/132
  ((9 9 0) (9 9 0) (9 9 0)))
'(clean-cache
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval\n  (app modulo-power (-> base <-) (app - exp 1) n)\n  (env ((□? (base exp n)))))\""
  163
  146
  10
  7
  93
  4
  97
  1
  1873/2772
  38
  #f
  311/73
  ((23/2 23/2 0) (23/2 23/2 0) (23/2 23/2 0)))
'(clean-cache
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval\n  (app * (-> base <-) (app modulo-power base (app - exp 1) n))\n  (env ((□? (base exp n)))))\""
  163
  146
  10
  7
  93
  4
  97
  1
  18814/28875
  38
  #f
  311/73
  ((11 11 0) (11 11 0) (11 11 0)))
'(clean-cache
  primtest
  2
  25
  94
  app
  "\"'(eval\n  (match\n   (app odd? exp)\n   ((#f)\n    (->\n     (app modulo (app square (app modulo-power base (app / exp 2) n)) n)\n     <-))\n   _)\n  (env ((□? (base exp n)))))\""
  309
  287
  12
  10
  213
  5
  218
  1
  14677/19320
  77
  #f
  1233/287
  ((22 22 0) (21 21 0) (43/2 43/2 0)))
'(clean-cache
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval\n  (app modulo (app square (app modulo-power base (app / exp 2) n)) (-> n <-))\n  (env ((□? (base exp n)))))\""
  74
  57
  10
  7
  41
  4
  45
  1
  1669/2310
  4
  #f
  232/57
  ((7 7 0) (7 7 0) (7 7 0)))
'(clean-cache
  primtest
  2
  25
  94
  app
  "\"'(eval\n  (app modulo (-> (app square (app modulo-power base (app / exp 2) n)) <-) n)\n  (env ((□? (base exp n)))))\""
  248
  226
  12
  10
  169
  5
  174
  1
  141671/184800
  66
  #f
  489/113
  ((15 15 0) (15 15 0) (15 15 0)))
'(clean-cache
  primtest
  2
  25
  94
  app
  "\"'(eval\n  (app square (-> (app modulo-power base (app / exp 2) n) <-))\n  (env ((□? (base exp n)))))\""
  205
  187
  10
  8
  140
  4
  144
  1
  116471/152460
  50
  #f
  806/187
  ((12 12 0) (12 12 0) (12 12 0)))
'(clean-cache
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval\n  (app modulo-power base (app / exp 2) (-> n <-))\n  (env ((□? (base exp n)))))\""
  73
  56
  10
  7
  41
  4
  45
  1
  3338/4235
  4
  #f
  57/14
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(clean-cache
  primtest
  2
  25
  94
  app
  "\"'(eval\n  (app modulo-power base (-> (app / exp 2) <-) n)\n  (env ((□? (base exp n)))))\""
  151
  134
  10
  7
  101
  4
  105
  1
  5993/7700
  30
  #f
  283/67
  ((19/2 19/2 0) (19/2 19/2 0) (19/2 19/2 0)))
'(clean-cache
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval (app / (-> exp <-) 2) (env ((□? (base exp n)))))\""
  149
  132
  10
  7
  101
  4
  105
  1
  6049/7700
  29
  #f
  557/132
  ((17/2 17/2 0) (17/2 17/2 0) (9 9 0)))
'(clean-cache
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval\n  (app modulo-power (-> base <-) (app / exp 2) n)\n  (env ((□? (base exp n)))))\""
  162
  145
  10
  7
  93
  4
  97
  1
  9407/13860
  38
  #f
  618/145
  ((21/2 21/2 0) (21/2 21/2 0) (21/2 21/2 0)))
'(clean-cache
  primtest
  2
  25
  94
  app
  "\"'(eval (match (-> (app odd? exp) <-) (#f) _) (env ((□? (base exp n)))))\""
  171
  154
  10
  7
  117
  4
  121
  1
  6637/8855
  40
  #f
  47/11
  ((10 10 0) (10 10 0) (10 10 0)))
'(clean-cache
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval (app odd? (-> exp <-)) (env ((□? (base exp n)))))\""
  149
  132
  10
  7
  101
  4
  105
  1
  6077/8085
  29
  #f
  557/132
  ((17/2 17/2 0) (17/2 17/2 0) (17/2 17/2 0)))
'(clean-cache
  primtest
  2
  25
  94
  app
  "\"'(eval (match (-> (app = exp 0) <-) (#f) _) (env ((□? (base exp n)))))\""
  182
  165
  10
  7
  125
  4
  129
  1
  6917/9240
  40
  #f
  234/55
  ((21/2 21/2 0) (21/2 21/2 0) (21/2 21/2 0)))
'(clean-cache
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval (app = (-> exp <-) 0) (env ((□? (base exp n)))))\""
  149
  132
  10
  7
  101
  4
  105
  1
  6077/8085
  29
  #f
  557/132
  ((17/2 17/2 0) (17/2 17/2 0) (17/2 17/2 0)))
'(clean-cache
  primtest
  2
  94
  app
  "\"'(eval (λ (x) (-> (app * x x) <-)) (env ((□? (x)))))\""
  #f)
'(clean-cache
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval (app * x (-> x <-)) (env ((□? (x)))))\""
  399
  376
  12
  11
  308
  5
  313
  1
  20147/23100
  92
  #f
  807/188
  ((25 25 0) (49/2 49/2 0) (49/2 49/2 0)))
'(clean-cache
  primtest
  2
  94
  ref-or-constructor
  "\"'(eval (app * (-> x <-) x) (env ((□? (x)))))\""
  #f)
'(clean-cache
  primtest
  2
  94
  app
  "\"'(eval\n  (letrec*\n   (square ... byte-size)\n   (-> (app generate-fermat-prime byte-size iterations) <-))\n  (env ()))\""
  #f)
'(shuffled-cache
  0
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval\n  (app is-trivial-composite? (-> n <-))\n  (env ((□? (byte-size iterations)))))\""
  22
  18
  3
  1
  14
  2
  16
  1
  3/4
  4
  #f
  38/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 11) (env ((□? (n)))))\""
  29
  22
  5
  2
  17
  3
  20
  1
  3/4
  4
  #f
  46/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  2
  25
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (-> (app = (app modulo n 5) 0) <-)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env ((□? (n)))))\""
  42
  35
  5
  2
  29
  3
  32
  1
  4/5
  8
  #f
  30/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval (app = (-> exp <-) 0) (env ((□? (base exp n)))))\""
  163
  144
  12
  7
  116
  5
  121
  1
  1919/2475
  32
  #f
  305/72
  ((7 7 0) (7 7 0) (7 7 0)))
'(shuffled-cache
  0
  primtest
  2
  25
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (-> (app = (app modulo n 13) 0) <-)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env ((□? (n)))))\""
  176
  157
  12
  7
  128
  5
  133
  1
  4828/6105
  36
  #f
  668/157
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  2
  25
  94
  let*
  "\"'(eval\n  (app or (app <= iterations 0) (-> (let* (byte-size ... a) ...) <-))\n  (env ((□? (n iterations)))))\""
  460
  436
  14
  10
  392
  6
  398
  1
  235507/258720
  124
  #f
  965/218
  ((9 9 0) (9 9 0) (9 9 0)))
'(shuffled-cache
  0
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval\n  (app is-fermat-prime? n (-> iterations <-))\n  (env ((□? (byte-size iterations)))))\""
  461
  437
  14
  10
  392
  6
  398
  1
  469859/517440
  124
  #f
  1934/437
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  2
  25
  94
  app
  "\"'(eval\n  (match\n   (app = (app modulo-power a (app - n 1) n) 1)\n   ((#f) (-> (app #f) <-))\n   _)\n  (env ((□? (n iterations)))))\""
  463
  439
  14
  10
  392
  6
  398
  1
  468011/517440
  126
  #t
  1944/439
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval\n  (app modulo (app square (app modulo-power base (app / exp 2) n)) (-> n <-))\n  (env ((□? (base exp n)))))\""
  482
  458
  14
  10
  406
  6
  412
  1
  39236/43505
  126
  #f
  1010/229
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  0
  primtest
  2
  25
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (-> (app = (app modulo n 19) 0) <-)\n   (app = (app modulo n 23) 0))\n  (env ((□? (n)))))\""
  495
  471
  14
  10
  418
  6
  424
  1
  20773/23100
  130
  #f
  2078/471
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval (app / (-> exp <-) 2) (env ((□? (base exp n)))))\""
  496
  472
  14
  10
  418
  6
  424
  1
  20759/23100
  130
  #f
  1041/236
  ((1/2 1/2 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval (app modulo-power a (app - n 1) (-> n <-)) (env ((□? (n iterations)))))\""
  496
  472
  14
  10
  418
  6
  424
  1
  20759/23100
  130
  #f
  1041/236
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 17) (env ((□? (n)))))\""
  497
  473
  14
  10
  418
  6
  424
  1
  41518/46585
  130
  #f
  2086/473
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval\n  (app generate-fermat-prime (-> byte-size <-) iterations)\n  (env ((□? (byte-size iterations)))))\""
  498
  474
  14
  10
  418
  6
  424
  1
  165687/186340
  130
  #f
  1045/237
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  2
  25
  94
  app
  "\"'(eval\n  (match\n   (->\n    (app\n     and\n     (app not (app is-trivial-composite? n))\n     (app is-fermat-prime? n iterations))\n    <-)\n   (#f)\n   _)\n  (env ((□? (byte-size iterations)))))\""
  630
  605
  14
  11
  548
  6
  554
  1
  744077/794640
  175
  #f
  2727/605
  ((35/2 35/2 1/2) (35/2 35/2 1/2) (35/2 35/2 1/2)))
'(shuffled-cache
  0
  primtest
  2
  25
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (-> (app = (app modulo n 23) 0) <-))\n  (env ((□? (n)))))\""
  631
  606
  14
  11
  548
  6
  554
  1
  742537/794640
  175
  #f
  911/202
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  2
  25
  94
  app
  "\"'(eval\n  (λ (n iterations)\n    (-> (app or (app <= iterations 0) (let* (byte-size ... a) ...)) <-))\n  (env ((□? (n iterations)))))\""
  635
  610
  14
  11
  548
  6
  554
  1
  246383/264880
  176
  #f
  1378/305
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  primtest
  2
  25
  94
  app
  "\"'(eval (app = (-> (app modulo n 19) <-) 0) (env ((□? (n)))))\""
  636
  611
  14
  11
  548
  6
  554
  1
  737609/794640
  176
  #f
  2760/611
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval (app odd? (-> exp <-)) (env ((□? (base exp n)))))\""
  637
  612
  14
  11
  548
  6
  554
  1
  736949/794640
  176
  #f
  691/153
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval\n  (app generate-fermat-prime byte-size (-> iterations <-))\n  (env ((□? (byte-size iterations)))))\""
  638
  613
  14
  11
  548
  6
  554
  1
  367897/397320
  176
  #f
  2768/613
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 2) (env ((□? (n)))))\""
  639
  614
  14
  11
  548
  6
  554
  1
  367127/397320
  176
  #f
  1386/307
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval (app log (-> n <-)) (env ((□? (n iterations)))))\""
  640
  615
  14
  11
  548
  6
  554
  1
  73333/79464
  176
  #f
  2776/615
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval (app * x (-> x <-)) (env ((□? (x)))))\""
  659
  633
  14
  12
  564
  6
  570
  1
  104543/113520
  181
  #f
  2855/633
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval\n  (app modulo-power base (app - exp 1) (-> n <-))\n  (env ((□? (base exp n)))))\""
  660
  634
  14
  12
  564
  6
  570
  1
  20899/22704
  181
  #f
  2859/634
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  primtest
  2
  25
  94
  app
  "\"'(eval (app = (-> (app modulo n 5) <-) 0) (env ((□? (n)))))\""
  661
  635
  14
  12
  564
  6
  570
  1
  485/528
  181
  #f
  2863/635
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval (app random (-> byte-size <-)) (env ((□? (byte-size iterations)))))\""
  661
  635
  14
  12
  564
  6
  570
  1
  485/528
  181
  #f
  2863/635
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  2
  25
  94
  app
  "\"'(eval (λ (x) (-> (app * x x) <-)) (env ((□? (x)))))\""
  665
  639
  14
  12
  567
  6
  573
  1
  10411/11352
  182
  #f
  320/71
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  2
  25
  94
  app
  "\"'(eval\n  (match (-> (app = (app modulo-power a (app - n 1) n) 1) <-) (#f) _)\n  (env ((□? (n iterations)))))\""
  669
  643
  14
  12
  567
  6
  573
  1
  51791/56760
  183
  #f
  2899/643
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  2
  25
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (-> (app = (app modulo n 7) 0) <-)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env ((□? (n)))))\""
  670
  644
  14
  12
  567
  6
  573
  1
  17227/18920
  183
  #f
  415/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  2
  25
  94
  app
  "\"'(eval (app modulo-power a (-> (app - n 1) <-) n) (env ((□? (n iterations)))))\""
  670
  644
  14
  12
  567
  6
  573
  1
  17227/18920
  183
  #f
  415/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  2
  25
  94
  app
  "\"'(eval (app = (-> (app modulo n 7) <-) 0) (env ((□? (n)))))\""
  671
  645
  14
  12
  567
  6
  573
  1
  51571/56760
  183
  #f
  2909/645
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval (app random (-> byte-size <-)) (env ((□? (n iterations)))))\""
  673
  647
  14
  12
  567
  6
  573
  1
  51439/56760
  183
  #f
  2917/647
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  2
  25
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (-> (app = (app modulo n 17) 0) <-)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env ((□? (n)))))\""
  674
  648
  14
  12
  567
  6
  573
  1
  51329/56760
  183
  #f
  2923/648
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval (app - (-> n <-) 1) (env ((□? (n iterations)))))\""
  674
  648
  14
  12
  567
  6
  573
  1
  51329/56760
  183
  #f
  2923/648
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval\n  (app * (-> base <-) (app modulo-power base (app - exp 1) n))\n  (env ((□? (base exp n)))))\""
  693
  667
  14
  12
  581
  6
  587
  1
  103061/114180
  183
  #f
  2999/667
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  0
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval\n  (app modulo-power base (app / exp 2) (-> n <-))\n  (env ((□? (base exp n)))))\""
  693
  667
  14
  12
  581
  6
  587
  1
  103061/114180
  183
  #f
  2999/667
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  2
  25
  94
  app
  "\"'(eval\n  (let (... () (n (-> (app random byte-size) <-)) () ...) ...)\n  (env ((□? (byte-size iterations)))))\""
  693
  667
  14
  12
  581
  6
  587
  1
  103061/114180
  183
  #f
  2999/667
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  2
  25
  94
  app
  "\"'(eval\n  (match\n   (app\n    and\n    (app not (app is-trivial-composite? n))\n    (app is-fermat-prime? n iterations))\n   ((#f) (-> (app generate-fermat-prime byte-size iterations) <-))\n   _)\n  (env ((□? (byte-size iterations)))))\""
  709
  682
  14
  13
  595
  6
  601
  1
  35747/39380
  187
  #f
  3067/682
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  primtest
  2
  25
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (-> (app = (app modulo n 3) 0) <-)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env ((□? (n)))))\""
  710
  683
  14
  13
  595
  6
  601
  1
  107021/118140
  187
  #f
  3073/683
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  2
  25
  94
  app
  "\"'(eval\n  (let* (...\n         ()\n         (byte-size (-> (app ceiling (app / (app log n) (app log 2))) <-))\n         a\n         ...)\n    ...)\n  (env ((□? (n iterations)))))\""
  713
  686
  14
  13
  595
  6
  601
  1
  106669/118140
  188
  #f
  1543/343
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  2
  25
  94
  app
  "\"'(eval\n  (app modulo-power base (-> (app / exp 2) <-) n)\n  (env ((□? (base exp n)))))\""
  713
  686
  14
  13
  595
  6
  601
  1
  106669/118140
  188
  #f
  1543/343
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval\n  (app modulo-power (-> base <-) (app / exp 2) n)\n  (env ((□? (base exp n)))))\""
  713
  686
  14
  13
  595
  6
  601
  1
  106669/118140
  188
  #f
  1543/343
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 13) (env ((□? (n)))))\""
  714
  687
  14
  13
  595
  6
  601
  1
  35483/39380
  188
  #f
  1030/229
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 7) (env ((□? (n)))))\""
  715
  688
  14
  13
  595
  6
  601
  1
  106229/118140
  188
  #f
  1547/344
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 5) (env ((□? (n)))))\""
  716
  689
  14
  13
  595
  6
  601
  1
  106009/118140
  188
  #f
  3098/689
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  2
  25
  94
  let
  "\"'(eval\n  (λ (byte-size iterations) (-> (let (n) ...) <-))\n  (env ((□? (byte-size iterations)))))\""
  721
  694
  14
  13
  599
  6
  605
  1
  105899/118140
  188
  #f
  1560/347
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  2
  25
  94
  app
  "\"'(eval\n  (λ (n)\n    (->\n     (app\n      or\n      (app = (app modulo n 2) 0)\n      (app = (app modulo n 3) 0)\n      (app = (app modulo n 5) 0)\n      (app = (app modulo n 7) 0)\n      (app = (app modulo n 11) 0)\n      (app = (app modulo n 13) 0)\n      (app = (app modulo n 17) 0)\n      (app = (app modulo n 19) 0)\n      (app = (app modulo n 23) 0))\n     <-))\n  (env ((□? (n)))))\""
  722
  695
  14
  13
  599
  6
  605
  1
  105679/118140
  188
  #f
  3126/695
  ((31/2 31/2 1/2) (15 15 1/2) (31/2 31/2 1/2)))
'(shuffled-cache
  0
  primtest
  2
  25
  94
  app
  "\"'(eval (app / (-> (app log n) <-) (app log 2)) (env ((□? (n iterations)))))\""
  725
  698
  14
  13
  599
  6
  605
  1
  35109/39380
  189
  #f
  3139/698
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  2
  25
  94
  app
  "\"'(eval\n  (app = (-> (app modulo-power a (app - n 1) n) <-) 1)\n  (env ((□? (n iterations)))))\""
  727
  700
  14
  13
  599
  6
  605
  1
  105107/118140
  190
  #f
  787/175
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 23) (env ((□? (n)))))\""
  728
  701
  14
  13
  599
  6
  605
  1
  104887/118140
  190
  #f
  3152/701
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  2
  25
  94
  app
  "\"'(eval (app = (-> (app modulo n 2) <-) 0) (env ((□? (n)))))\""
  729
  702
  14
  13
  599
  6
  605
  1
  34889/39380
  190
  #f
  526/117
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval (app modulo-power (-> a <-) (app - n 1) n) (env ((□? (n iterations)))))\""
  729
  702
  14
  13
  599
  6
  605
  1
  34889/39380
  190
  #f
  526/117
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  2
  25
  94
  app
  "\"'(eval (app = (-> (app modulo n 11) <-) 0) (env ((□? (n)))))\""
  730
  703
  14
  13
  599
  6
  605
  1
  104447/118140
  190
  #f
  3160/703
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  2
  25
  94
  app
  "\"'(eval (app = (-> (app modulo n 13) <-) 0) (env ((□? (n)))))\""
  731
  704
  14
  13
  599
  6
  605
  1
  104227/118140
  190
  #f
  791/176
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 3) (env ((□? (n)))))\""
  732
  705
  14
  13
  599
  6
  605
  1
  34669/39380
  190
  #f
  1056/235
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  2
  25
  94
  app
  "\"'(eval\n  (app ceiling (-> (app / (app log n) (app log 2)) <-))\n  (env ((□? (n iterations)))))\""
  736
  709
  14
  13
  599
  6
  605
  1
  103567/118140
  191
  #f
  3185/709
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  2
  25
  94
  app
  "\"'(eval\n  (app modulo (-> (app square (app modulo-power base (app / exp 2) n)) <-) n)\n  (env ((□? (base exp n)))))\""
  745
  718
  14
  13
  605
  6
  611
  1
  20665/23628
  198
  #f
  1614/359
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval (app - (-> exp <-) 1) (env ((□? (base exp n)))))\""
  746
  719
  14
  13
  605
  6
  611
  1
  61951/70884
  198
  #f
  3232/719
  ((1 1 0) (1 1 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  primtest
  2
  25
  94
  app
  "\"'(eval\n  (app not (-> (app is-trivial-composite? n) <-))\n  (env ((□? (byte-size iterations)))))\""
  747
  720
  14
  13
  605
  6
  611
  1
  15463/17721
  198
  #f
  1619/360
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval\n  (app modulo (app * base (app modulo-power base (app - exp 1) n)) (-> n <-))\n  (env ((□? (base exp n)))))\""
  748
  721
  14
  13
  605
  6
  611
  1
  61753/70884
  198
  #f
  3242/721
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  primtest
  2
  25
  94
  app
  "\"'(eval (match (-> (app = exp 0) <-) (#f) _) (env ((□? (base exp n)))))\""
  758
  731
  14
  13
  608
  6
  614
  1
  307433/354420
  201
  #f
  3287/731
  ((2 2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval\n  (match\n   (app\n    and\n    (app not (app is-trivial-composite? n))\n    (app is-fermat-prime? n iterations))\n   (#f)\n   (_ (-> n <-)))\n  (env ((□? (byte-size iterations)))))\""
  759
  732
  14
  13
  608
  6
  614
  1
  153469/177210
  201
  #f
  1097/244
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  2
  25
  94
  app
  "\"'(eval\n  (match\n   (app = (app modulo-power a (app - n 1) n) 1)\n   (#f)\n   (_ (-> (app is-fermat-prime? n (app - iterations 1)) <-)))\n  (env ((□? (n iterations)))))\""
  761
  734
  14
  13
  608
  6
  614
  1
  153073/177210
  202
  #f
  1651/367
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  2
  25
  94
  app
  "\"'(eval\n  (app square (-> (app modulo-power base (app / exp 2) n) <-))\n  (env ((□? (base exp n)))))\""
  764
  737
  14
  13
  608
  6
  614
  1
  152803/177210
  204
  #f
  3316/737
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  primtest
  2
  25
  94
  app
  "\"'(eval\n  (match\n   (app odd? exp)\n   (#f)\n   (_\n    (->\n     (app modulo (app * base (app modulo-power base (app - exp 1) n)) n)\n     <-)))\n  (env ((□? (base exp n)))))\""
  813
  786
  14
  13
  650
  6
  656
  1
  76151/88605
  222
  #f
  1766/393
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  0
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval\n  (app is-fermat-prime? (-> n <-) (app - iterations 1))\n  (env ((□? (n iterations)))))\""
  813
  786
  14
  13
  650
  6
  656
  1
  76151/88605
  222
  #f
  1766/393
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 19) (env ((□? (n)))))\""
  814
  787
  14
  13
  650
  6
  656
  1
  75986/88605
  222
  #f
  3536/787
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  2
  25
  94
  match
  "\"'(eval\n  (match (app = exp 0) ((#f) (-> (match (app odd? exp) ...) <-)) _)\n  (env ((□? (base exp n)))))\""
  819
  792
  14
  13
  650
  6
  656
  1
  75634/88605
  222
  #f
  593/132
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  primtest
  2
  25
  94
  app
  "\"'(eval (app = (-> (app modulo n 3) <-) 0) (env ((□? (n)))))\""
  820
  793
  14
  13
  650
  6
  656
  1
  75469/88605
  222
  #f
  274/61
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  2
  25
  94
  app
  "\"'(eval\n  (app modulo-power base (-> (app - exp 1) <-) n)\n  (env ((□? (base exp n)))))\""
  827
  800
  14
  13
  650
  6
  656
  1
  15031/17721
  224
  #f
  449/100
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  primtest
  2
  25
  94
  app
  "\"'(eval (app = (-> (app modulo n 17) <-) 0) (env ((□? (n)))))\""
  828
  801
  14
  13
  650
  6
  656
  1
  14998/17721
  224
  #f
  3596/801
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  2
  25
  94
  match
  "\"'(eval\n  (λ (base exp n) (-> (match (app = exp 0) ...) <-))\n  (env ((□? (base exp n)))))\""
  835
  808
  14
  13
  650
  6
  656
  1
  24892/29535
  224
  #f
  907/202
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  primtest
  2
  25
  94
  app
  "\"'(eval\n  (app or (-> (app <= iterations 0) <-) (let* (byte-size ... a) ...))\n  (env ((□? (n iterations)))))\""
  839
  812
  14
  13
  650
  6
  656
  1
  8257/9845
  225
  #f
  521/116
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  2
  25
  94
  app
  "\"'(eval (app / (app log n) (-> (app log 2) <-)) (env ((□? (n iterations)))))\""
  842
  815
  14
  13
  650
  6
  656
  1
  24683/29535
  226
  #f
  732/163
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  2
  25
  94
  app
  "\"'(eval\n  (let* (... byte-size (a (-> (app random byte-size) <-)) () ...) ...)\n  (env ((□? (n iterations)))))\""
  845
  818
  14
  13
  650
  6
  656
  1
  8202/9845
  227
  #f
  3673/818
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  2
  25
  94
  app
  "\"'(eval\n  (app modulo (-> (app * base (app modulo-power base (app - exp 1) n)) <-) n)\n  (env ((□? (base exp n)))))\""
  852
  825
  14
  13
  650
  6
  656
  1
  73504/88605
  229
  #f
  3703/825
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  primtest
  2
  25
  94
  match
  "\"'(eval\n  (let* (byte-size ... a)\n    (-> (match (app = (app modulo-power a (app - n 1) n) 1) ...) <-))\n  (env ((□? (n iterations)))))\""
  856
  829
  14
  13
  650
  6
  656
  1
  14648/17721
  230
  #f
  3726/829
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  2
  25
  94
  app
  "\"'(eval\n  (app\n   and\n   (-> (app not (app is-trivial-composite? n)) <-)\n   (app is-fermat-prime? n iterations))\n  (env ((□? (byte-size iterations)))))\""
  857
  830
  14
  13
  650
  6
  656
  1
  58493/70884
  230
  #f
  1866/415
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval\n  (app modulo-power (-> base <-) (app - exp 1) n)\n  (env ((□? (base exp n)))))\""
  858
  831
  14
  13
  650
  6
  656
  1
  292321/354420
  230
  #f
  3736/831
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  primtest
  2
  25
  94
  match
  "\"'(eval\n  (let (n)\n    (->\n     (match\n      (app\n       and\n       (app not (app is-trivial-composite? n))\n       (app is-fermat-prime? n iterations))\n      ...)\n     <-))\n  (env ((□? (byte-size iterations)))))\""
  859
  832
  14
  13
  650
  6
  656
  1
  145913/177210
  230
  #f
  935/208
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  2
  25
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (-> (app = (app modulo n 11) 0) <-)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env ((□? (n)))))\""
  860
  833
  14
  13
  650
  6
  656
  1
  145583/177210
  230
  #f
  3746/833
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  2
  25
  94
  app
  "\"'(eval (app = (-> (app modulo n 23) <-) 0) (env ((□? (n)))))\""
  861
  834
  14
  13
  650
  6
  656
  1
  145253/177210
  230
  #f
  625/139
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  2
  25
  94
  app
  "\"'(eval\n  (match\n   (app odd? exp)\n   ((#f)\n    (->\n     (app modulo (app square (app modulo-power base (app / exp 2) n)) n)\n     <-))\n   _)\n  (env ((□? (base exp n)))))\""
  883
  856
  14
  13
  665
  6
  671
  1
  289723/354420
  237
  #f
  3845/856
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval (app <= (-> iterations <-) 0) (env ((□? (n iterations)))))\""
  884
  857
  14
  13
  665
  6
  671
  1
  289459/354420
  237
  #f
  3849/857
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  2
  25
  94
  app
  "\"'(eval\n  (app * base (-> (app modulo-power base (app - exp 1) n) <-))\n  (env ((□? (base exp n)))))\""
  887
  860
  14
  13
  665
  6
  671
  1
  288919/354420
  239
  #f
  3863/860
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval (app * (-> x <-) x) (env ((□? (x)))))\""
  888
  861
  14
  13
  665
  6
  671
  1
  72106/88605
  239
  #f
  1289/287
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval\n  (app is-fermat-prime? (-> n <-) iterations)\n  (env ((□? (byte-size iterations)))))\""
  889
  862
  14
  13
  665
  6
  671
  1
  287929/354420
  239
  #f
  3871/862
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  2
  25
  94
  app
  "\"'(eval\n  (app\n   or\n   (-> (app = (app modulo n 2) 0) <-)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env ((□? (n)))))\""
  890
  863
  14
  13
  665
  6
  671
  1
  287269/354420
  239
  #f
  3877/863
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  2
  25
  94
  letrec*
  "\"'(eval ((top) letrec* (square ... byte-size) ...) (env ()))\""
  894
  867
  14
  13
  669
  6
  675
  1
  146687/180180
  240
  #f
  1298/289
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  2
  25
  94
  app
  "\"'(eval (match (-> (app odd? exp) <-) (#f) _) (env ((□? (base exp n)))))\""
  899
  872
  14
  13
  669
  6
  675
  1
  146257/180180
  242
  #f
  1959/436
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  primtest
  2
  25
  94
  app
  "\"'(eval\n  (app is-fermat-prime? n (-> (app - iterations 1) <-))\n  (env ((□? (n iterations)))))\""
  899
  872
  14
  13
  669
  6
  675
  1
  146257/180180
  242
  #f
  1959/436
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  2
  25
  94
  app
  "\"'(eval\n  (app\n   and\n   (app not (app is-trivial-composite? n))\n   (-> (app is-fermat-prime? n iterations) <-))\n  (env ((□? (byte-size iterations)))))\""
  900
  873
  14
  13
  669
  6
  675
  1
  3209/3960
  242
  #f
  436/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  2
  25
  94
  app
  "\"'(eval\n  (letrec*\n   (square ... byte-size)\n   (-> (app generate-fermat-prime byte-size iterations) <-))\n  (env ()))\""
  900
  873
  14
  13
  669
  6
  675
  1
  3209/3960
  242
  #f
  436/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval (app - (-> iterations <-) 1) (env ((□? (n iterations)))))\""
  901
  874
  14
  13
  669
  6
  675
  1
  58351/72072
  242
  #f
  1964/437
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 19) (env ((□? (n)))))\""
  30
  22
  5
  3
  17
  3
  20
  1
  3/4
  4
  #f
  46/11
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  primtest
  2
  25
  94
  app
  "\"'(eval\n  (app modulo-power base (-> (app / exp 2) <-) n)\n  (env ((□? (base exp n)))))\""
  153
  133
  12
  8
  104
  5
  109
  1
  1406/1815
  29
  #f
  561/133
  ((8 8 0) (8 8 0) (8 8 0)))
'(shuffled-cache
  1
  primtest
  2
  94
  let
  "\"'(eval\n  (λ (byte-size iterations) (-> (let (n) ...) <-))\n  (env ((□? (byte-size iterations)))))\""
  #f)
'(shuffled-cache
  1
  primtest
  2
  94
  match
  "\"'(eval\n  (match (app = exp 0) ((#f) (-> (match (app odd? exp) ...) <-)) _)\n  (env ((□? (base exp n)))))\""
  #f)
'(shuffled-cache
  1
  primtest
  2
  25
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (-> (app = (app modulo n 5) 0) <-)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env ((□? (n)))))\""
  54
  46
  5
  3
  29
  3
  32
  1
  9/14
  12
  #f
  99/23
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  primtest
  2
  94
  letrec*
  "\"'(eval ((top) letrec* (square ... byte-size) ...) (env ()))\""
  #f)
'(shuffled-cache
  1
  primtest
  2
  94
  app
  "\"'(eval\n  (match\n   (app odd? exp)\n   (#f)\n   (_\n    (->\n     (app modulo (app * base (app modulo-power base (app - exp 1) n)) n)\n     <-)))\n  (env ((□? (base exp n)))))\""
  #f)
'(shuffled-cache
  1
  primtest
  2
  25
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (-> (app = (app modulo n 11) 0) <-)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env ((□? (n)))))\""
  54
  46
  5
  3
  29
  3
  32
  1
  9/14
  12
  #f
  99/23
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  primtest
  2
  25
  94
  app
  "\"'(eval\n  (app ceiling (-> (app / (app log n) (app log 2)) <-))\n  (env ((□? (n iterations)))))\""
  109
  96
  8
  5
  64
  4
  68
  1
  13/20
  29
  #f
  415/96
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval (app / (-> exp <-) 2) (env ((□? (base exp n)))))\""
  203
  184
  12
  7
  144
  5
  149
  1
  20/27
  50
  #f
  197/46
  ((5 5 0) (5 5 0) (5 5 0)))
'(shuffled-cache
  1
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval\n  (app modulo-power (-> base <-) (app - exp 1) n)\n  (env ((□? (base exp n)))))\""
  252
  233
  12
  7
  188
  5
  193
  1
  523/660
  58
  #f
  992/233
  ((7/2 7/2 0) (7/2 7/2 0) (13/2 13/2 0)))
'(shuffled-cache
  1
  primtest
  2
  25
  94
  app
  "\"'(eval\n  (match (-> (app = (app modulo-power a (app - n 1) n) 1) <-) (#f) _)\n  (env ((□? (n iterations)))))\""
  402
  379
  14
  9
  329
  6
  335
  1
  13/15
  103
  #f
  1641/379
  ((5 5 0) (5 5 0) (5 5 0)))
'(shuffled-cache
  1
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 11) (env ((□? (n)))))\""
  402
  379
  14
  9
  329
  6
  335
  1
  13/15
  103
  #f
  1641/379
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval\n  (app is-fermat-prime? (-> n <-) iterations)\n  (env ((□? (byte-size iterations)))))\""
  403
  380
  14
  9
  329
  6
  335
  1
  4249/4920
  103
  #f
  329/76
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  2
  25
  94
  app
  "\"'(eval\n  (match\n   (app odd? exp)\n   ((#f)\n    (->\n     (app modulo (app square (app modulo-power base (app / exp 2) n)) n)\n     <-))\n   _)\n  (env ((□? (base exp n)))))\""
  465
  442
  14
  9
  383
  6
  389
  1
  6373/7470
  120
  #f
  956/221
  ((5 5 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  1
  primtest
  2
  25
  94
  app
  "\"'(eval\n  (let (... () (n (-> (app random byte-size) <-)) () ...) ...)\n  (env ((□? (byte-size iterations)))))\""
  465
  442
  14
  9
  383
  6
  389
  1
  6373/7470
  120
  #f
  956/221
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 3) (env ((□? (n)))))\""
  466
  443
  14
  9
  383
  6
  389
  1
  6373/7560
  120
  #f
  1916/443
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  2
  25
  94
  app
  "\"'(eval\n  (match\n   (->\n    (app\n     and\n     (app not (app is-trivial-composite? n))\n     (app is-fermat-prime? n iterations))\n    <-)\n   (#f)\n   _)\n  (env ((□? (byte-size iterations)))))\""
  693
  668
  14
  11
  602
  6
  608
  1
  14401/15570
  197
  #f
  2997/668
  ((41/2 41/2 1/2) (41/2 41/2 1/2) (41/2 41/2 1/2)))
'(shuffled-cache
  1
  primtest
  2
  25
  94
  app
  "\"'(eval (app modulo-power a (-> (app - n 1) <-) n) (env ((□? (n iterations)))))\""
  697
  672
  14
  11
  602
  6
  608
  1
  2867/3114
  198
  #f
  1507/336
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  primtest
  2
  25
  94
  app
  "\"'(eval (match (-> (app = exp 0) <-) (#f) _) (env ((□? (base exp n)))))\""
  704
  679
  14
  11
  605
  6
  611
  1
  11435/12456
  200
  #f
  3046/679
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  primtest
  2
  25
  94
  app
  "\"'(eval (app / (app log n) (-> (app log 2) <-)) (env ((□? (n iterations)))))\""
  704
  679
  14
  11
  605
  6
  611
  1
  11435/12456
  200
  #f
  3046/679
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval (app - (-> n <-) 1) (env ((□? (n iterations)))))\""
  705
  680
  14
  11
  605
  6
  611
  1
  57127/62280
  200
  #f
  305/68
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  2
  25
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (-> (app = (app modulo n 17) 0) <-)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env ((□? (n)))))\""
  709
  684
  14
  11
  605
  6
  611
  1
  56647/62280
  201
  #f
  341/76
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  2
  25
  94
  app
  "\"'(eval (app = (-> (app modulo n 19) <-) 0) (env ((□? (n)))))\""
  713
  688
  14
  11
  605
  6
  611
  1
  56167/62280
  202
  #f
  1543/344
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  2
  25
  94
  app
  "\"'(eval\n  (app\n   and\n   (app not (app is-trivial-composite? n))\n   (-> (app is-fermat-prime? n iterations) <-))\n  (env ((□? (byte-size iterations)))))\""
  714
  689
  14
  11
  605
  6
  611
  1
  56077/62280
  202
  #f
  3092/689
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  2
  25
  94
  app
  "\"'(eval (app = (-> (app modulo n 17) <-) 0) (env ((□? (n)))))\""
  718
  693
  14
  11
  605
  6
  611
  1
  55657/62280
  203
  #f
  3109/693
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  2
  25
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (-> (app = (app modulo n 7) 0) <-)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env ((□? (n)))))\""
  722
  697
  14
  11
  605
  6
  611
  1
  55177/62280
  204
  #f
  184/41
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  2
  94
  app
  "\"'(eval\n  (λ (n)\n    (->\n     (app\n      or\n      (app = (app modulo n 2) 0)\n      (app = (app modulo n 3) 0)\n      (app = (app modulo n 5) 0)\n      (app = (app modulo n 7) 0)\n      (app = (app modulo n 11) 0)\n      (app = (app modulo n 13) 0)\n      (app = (app modulo n 17) 0)\n      (app = (app modulo n 19) 0)\n      (app = (app modulo n 23) 0))\n     <-))\n  (env ((□? (n)))))\""
  #f)
'(shuffled-cache
  1
  primtest
  2
  25
  94
  app
  "\"'(eval\n  (let* (...\n         ()\n         (byte-size (-> (app ceiling (app / (app log n) (app log 2))) <-))\n         a\n         ...)\n    ...)\n  (env ((□? (n iterations)))))\""
  100
  90
  6
  4
  57
  3
  60
  1
  125/189
  31
  #f
  391/90
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  1
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval\n  (app modulo-power (-> base <-) (app / exp 2) n)\n  (env ((□? (base exp n)))))\""
  147
  131
  10
  6
  93
  4
  97
  1
  5689/7560
  35
  #f
  559/131
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  1
  primtest
  2
  25
  94
  app
  "\"'(eval\n  (app\n   and\n   (-> (app not (app is-trivial-composite? n)) <-)\n   (app is-fermat-prime? n iterations))\n  (env ((□? (byte-size iterations)))))\""
  296
  277
  12
  7
  238
  5
  243
  1
  28369/30555
  82
  #f
  1238/277
  ((17 17 1/2) (33/2 33/2 1/2) (17 17 1/2)))
'(shuffled-cache
  1
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval (app modulo-power a (app - n 1) (-> n <-)) (env ((□? (n iterations)))))\""
  297
  278
  12
  7
  238
  5
  243
  1
  28369/30870
  82
  #f
  621/139
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  2
  25
  94
  app
  "\"'(eval\n  (app\n   or\n   (-> (app = (app modulo n 2) 0) <-)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env ((□? (n)))))\""
  305
  285
  12
  8
  238
  5
  243
  1
  13817/15435
  84
  #f
  1274/285
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  primtest
  2
  25
  94
  app
  "\"'(eval (app = (-> (app modulo n 5) <-) 0) (env ((□? (n)))))\""
  306
  286
  12
  8
  238
  5
  243
  1
  27529/30870
  84
  #f
  639/143
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval (app - (-> iterations <-) 1) (env ((□? (n iterations)))))\""
  341
  321
  12
  8
  262
  5
  267
  1
  117961/133560
  90
  #f
  1424/321
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval\n  (app modulo-power base (app - exp 1) (-> n <-))\n  (env ((□? (base exp n)))))\""
  367
  347
  12
  8
  282
  5
  287
  1
  120697/136080
  90
  #f
  1528/347
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  1
  primtest
  2
  25
  94
  app
  "\"'(eval (app = (-> (app modulo n 23) <-) 0) (env ((□? (n)))))\""
  368
  348
  12
  8
  282
  5
  287
  1
  120277/136080
  90
  #f
  383/87
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  2
  25
  94
  app
  "\"'(eval\n  (letrec*\n   (square ... byte-size)\n   (-> (app generate-fermat-prime byte-size iterations) <-))\n  (env ()))\""
  766
  740
  14
  12
  665
  6
  671
  1
  7061/7602
  217
  #f
  3319/740
  ((17 17 0) (33/2 33/2 0) (33/2 33/2 0)))
'(shuffled-cache
  1
  primtest
  2
  25
  94
  app
  "\"'(eval (app / (-> (app log n) <-) (app log 2)) (env ((□? (n iterations)))))\""
  766
  740
  14
  12
  665
  6
  671
  1
  7061/7602
  217
  #f
  3319/740
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  2
  25
  94
  app
  "\"'(eval (λ (x) (-> (app * x x) <-)) (env ((□? (x)))))\""
  771
  744
  14
  13
  665
  6
  671
  1
  7019/7602
  218
  #f
  139/31
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  primtest
  2
  25
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (-> (app = (app modulo n 3) 0) <-)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env ((□? (n)))))\""
  772
  745
  14
  13
  665
  6
  671
  1
  2335/2534
  218
  #f
  3342/745
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval\n  (app is-fermat-prime? (-> n <-) (app - iterations 1))\n  (env ((□? (n iterations)))))\""
  772
  745
  14
  13
  665
  6
  671
  1
  2335/2534
  218
  #f
  3342/745
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval (app log (-> n <-)) (env ((□? (n iterations)))))\""
  772
  745
  14
  13
  665
  6
  671
  1
  2335/2534
  218
  #f
  3342/745
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  2
  25
  94
  app
  "\"'(eval\n  (app modulo (-> (app square (app modulo-power base (app / exp 2) n)) <-) n)\n  (env ((□? (base exp n)))))\""
  775
  748
  14
  13
  666
  6
  672
  1
  83941/91224
  220
  #f
  839/187
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  primtest
  2
  25
  94
  app
  "\"'(eval\n  (match\n   (app = (app modulo-power a (app - n 1) n) 1)\n   (#f)\n   (_ (-> (app is-fermat-prime? n (app - iterations 1)) <-)))\n  (env ((□? (n iterations)))))\""
  778
  751
  14
  13
  666
  6
  672
  1
  418361/456120
  222
  #f
  3372/751
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval\n  (match\n   (app\n    and\n    (app not (app is-trivial-composite? n))\n    (app is-fermat-prime? n iterations))\n   (#f)\n   (_ (-> n <-)))\n  (env ((□? (byte-size iterations)))))\""
  779
  752
  14
  13
  666
  6
  672
  1
  417731/456120
  222
  #f
  211/47
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  2
  25
  94
  app
  "\"'(eval\n  (match\n   (app\n    and\n    (app not (app is-trivial-composite? n))\n    (app is-fermat-prime? n iterations))\n   ((#f) (-> (app generate-fermat-prime byte-size iterations) <-))\n   _)\n  (env ((□? (byte-size iterations)))))\""
  780
  753
  14
  13
  666
  6
  672
  1
  417101/456120
  222
  #f
  3380/753
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  2
  25
  94
  let*
  "\"'(eval\n  (app or (app <= iterations 0) (-> (let* (byte-size ... a) ...) <-))\n  (env ((□? (n iterations)))))\""
  783
  756
  14
  13
  666
  6
  672
  1
  2297/2520
  222
  #f
  1699/378
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval (app odd? (-> exp <-)) (env ((□? (base exp n)))))\""
  784
  757
  14
  13
  666
  6
  672
  1
  415477/456120
  222
  #f
  3402/757
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  primtest
  2
  25
  94
  app
  "\"'(eval\n  (app = (-> (app modulo-power a (app - n 1) n) <-) 1)\n  (env ((□? (n iterations)))))\""
  787
  760
  14
  13
  666
  6
  672
  1
  414133/456120
  224
  #f
  427/95
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval\n  (app modulo (app square (app modulo-power base (app / exp 2) n)) (-> n <-))\n  (env ((□? (base exp n)))))\""
  788
  761
  14
  13
  666
  6
  672
  1
  206909/228060
  224
  #f
  3420/761
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval\n  (app is-fermat-prime? n (-> iterations <-))\n  (env ((□? (byte-size iterations)))))\""
  788
  761
  14
  13
  666
  6
  672
  1
  206909/228060
  224
  #f
  3420/761
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  2
  25
  94
  app
  "\"'(eval\n  (match\n   (app = (app modulo-power a (app - n 1) n) 1)\n   ((#f) (-> (app #f) <-))\n   _)\n  (env ((□? (n iterations)))))\""
  791
  764
  14
  13
  666
  6
  672
  1
  206237/228060
  227
  #t
  3435/764
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval\n  (app is-trivial-composite? (-> n <-))\n  (env ((□? (byte-size iterations)))))\""
  792
  765
  14
  13
  666
  6
  672
  1
  102961/114030
  227
  #f
  3439/765
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval (app - (-> exp <-) 1) (env ((□? (base exp n)))))\""
  793
  766
  14
  13
  666
  6
  672
  1
  34297/38010
  227
  #f
  3443/766
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 17) (env ((□? (n)))))\""
  794
  767
  14
  13
  666
  6
  672
  1
  11409/12670
  227
  #f
  3447/767
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  2
  25
  94
  match
  "\"'(eval\n  (let (n)\n    (->\n     (match\n      (app\n       and\n       (app not (app is-trivial-composite? n))\n       (app is-fermat-prime? n iterations))\n      ...)\n     <-))\n  (env ((□? (byte-size iterations)))))\""
  795
  768
  14
  13
  666
  6
  672
  1
  22783/25340
  227
  #f
  3451/768
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  2
  25
  94
  app
  "\"'(eval (app = (-> (app modulo n 3) <-) 0) (env ((□? (n)))))\""
  796
  769
  14
  13
  666
  6
  672
  1
  68209/76020
  227
  #f
  3455/769
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  2
  25
  94
  match
  "\"'(eval\n  (let* (byte-size ... a)\n    (-> (match (app = (app modulo-power a (app - n 1) n) 1) ...) <-))\n  (env ((□? (n iterations)))))\""
  803
  776
  14
  13
  666
  6
  672
  1
  9691/10860
  229
  #f
  3495/776
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 2) (env ((□? (n)))))\""
  803
  776
  14
  13
  666
  6
  672
  1
  9691/10860
  229
  #f
  3495/776
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval (app modulo-power (-> a <-) (app - n 1) n) (env ((□? (n iterations)))))\""
  806
  779
  14
  13
  666
  6
  672
  1
  67657/76020
  229
  #f
  3507/779
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval (app random (-> byte-size <-)) (env ((□? (n iterations)))))\""
  809
  782
  14
  13
  666
  6
  672
  1
  67477/76020
  229
  #f
  9/2
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  2
  25
  94
  app
  "\"'(eval (app = (-> (app modulo n 7) <-) 0) (env ((□? (n)))))\""
  810
  783
  14
  13
  666
  6
  672
  1
  67337/76020
  229
  #f
  3523/783
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  2
  25
  94
  app
  "\"'(eval\n  (let* (... byte-size (a (-> (app random byte-size) <-)) () ...) ...)\n  (env ((□? (n iterations)))))\""
  815
  788
  14
  13
  666
  6
  672
  1
  67061/76020
  231
  #f
  3545/788
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  2
  25
  94
  match
  "\"'(eval\n  (λ (base exp n) (-> (match (app = exp 0) ...) <-))\n  (env ((□? (base exp n)))))\""
  819
  792
  14
  13
  666
  6
  672
  1
  200623/228060
  231
  #f
  3563/792
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval\n  (app * (-> base <-) (app modulo-power base (app - exp 1) n))\n  (env ((□? (base exp n)))))\""
  820
  793
  14
  13
  666
  6
  672
  1
  400931/456120
  231
  #f
  3567/793
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 13) (env ((□? (n)))))\""
  821
  794
  14
  13
  666
  6
  672
  1
  400091/456120
  231
  #f
  3571/794
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  2
  25
  94
  app
  "\"'(eval (app = (-> (app modulo n 13) <-) 0) (env ((□? (n)))))\""
  822
  795
  14
  13
  666
  6
  672
  1
  399251/456120
  231
  #f
  715/159
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 5) (env ((□? (n)))))\""
  823
  796
  14
  13
  666
  6
  672
  1
  398411/456120
  231
  #f
  3579/796
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  2
  25
  94
  app
  "\"'(eval\n  (app square (-> (app modulo-power base (app / exp 2) n) <-))\n  (env ((□? (base exp n)))))\""
  825
  798
  14
  13
  666
  6
  672
  1
  397907/456120
  232
  #f
  598/133
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval\n  (app modulo-power base (app / exp 2) (-> n <-))\n  (env ((□? (base exp n)))))\""
  825
  798
  14
  13
  666
  6
  672
  1
  397907/456120
  232
  #f
  598/133
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 7) (env ((□? (n)))))\""
  826
  799
  14
  13
  666
  6
  672
  1
  397067/456120
  232
  #f
  3592/799
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval (app * x (-> x <-)) (env ((□? (x)))))\""
  826
  799
  14
  13
  666
  6
  672
  1
  397067/456120
  232
  #f
  3592/799
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  2
  25
  94
  app
  "\"'(eval (match (-> (app odd? exp) <-) (#f) _) (env ((□? (base exp n)))))\""
  829
  802
  14
  13
  666
  6
  672
  1
  396283/456120
  233
  #f
  3607/802
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  primtest
  2
  25
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (-> (app = (app modulo n 23) 0) <-))\n  (env ((□? (n)))))\""
  830
  803
  14
  13
  666
  6
  672
  1
  395443/456120
  233
  #f
  3613/803
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  2
  25
  94
  app
  "\"'(eval\n  (app modulo (-> (app * base (app modulo-power base (app - exp 1) n)) <-) n)\n  (env ((□? (base exp n)))))\""
  838
  811
  14
  13
  670
  6
  676
  1
  394379/456120
  236
  #f
  3648/811
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval (app = (-> exp <-) 0) (env ((□? (base exp n)))))\""
  839
  812
  14
  13
  670
  6
  676
  1
  394099/456120
  236
  #f
  913/203
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval\n  (app generate-fermat-prime (-> byte-size <-) iterations)\n  (env ((□? (byte-size iterations)))))\""
  840
  813
  14
  13
  670
  6
  676
  1
  393469/456120
  236
  #f
  3656/813
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  2
  25
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (-> (app = (app modulo n 13) 0) <-)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env ((□? (n)))))\""
  841
  814
  14
  13
  670
  6
  676
  1
  392629/456120
  236
  #f
  1831/407
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  2
  25
  94
  app
  "\"'(eval\n  (app or (-> (app <= iterations 0) <-) (let* (byte-size ... a) ...))\n  (env ((□? (n iterations)))))\""
  848
  821
  14
  13
  670
  6
  676
  1
  77921/91224
  238
  #f
  3694/821
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  primtest
  2
  25
  94
  app
  "\"'(eval\n  (app * base (-> (app modulo-power base (app - exp 1) n) <-))\n  (env ((□? (base exp n)))))\""
  850
  823
  14
  13
  670
  6
  676
  1
  389101/456120
  239
  #f
  3703/823
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  primtest
  2
  25
  94
  app
  "\"'(eval (app = (-> (app modulo n 11) <-) 0) (env ((□? (n)))))\""
  851
  824
  14
  13
  670
  6
  676
  1
  388261/456120
  239
  #f
  3707/824
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  2
  25
  94
  app
  "\"'(eval\n  (app not (-> (app is-trivial-composite? n) <-))\n  (env ((□? (byte-size iterations)))))\""
  852
  825
  14
  13
  670
  6
  676
  1
  387631/456120
  239
  #f
  3713/825
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  2
  25
  94
  app
  "\"'(eval\n  (app is-fermat-prime? n (-> (app - iterations 1) <-))\n  (env ((□? (n iterations)))))\""
  852
  825
  14
  13
  670
  6
  676
  1
  387631/456120
  239
  #f
  3713/825
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval (app modulo (-> n <-) 23) (env ((□? (n)))))\""
  853
  826
  14
  13
  670
  6
  676
  1
  386791/456120
  239
  #f
  9/2
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval (app * (-> x <-) x) (env ((□? (x)))))\""
  853
  826
  14
  13
  670
  6
  676
  1
  386791/456120
  239
  #f
  9/2
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  2
  25
  94
  app
  "\"'(eval\n  (λ (n iterations)\n    (-> (app or (app <= iterations 0) (let* (byte-size ... a) ...)) <-))\n  (env ((□? (n iterations)))))\""
  860
  833
  14
  13
  670
  6
  676
  1
  76859/91224
  242
  #f
  3756/833
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval\n  (app modulo (app * base (app modulo-power base (app - exp 1) n)) (-> n <-))\n  (env ((□? (base exp n)))))\""
  861
  834
  14
  13
  670
  6
  676
  1
  19199/22806
  242
  #f
  1880/417
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  primtest
  2
  25
  94
  app
  "\"'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (-> (app = (app modulo n 19) 0) <-)\n   (app = (app modulo n 23) 0))\n  (env ((□? (n)))))\""
  862
  835
  14
  13
  670
  6
  676
  1
  19157/22806
  242
  #f
  3766/835
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval (app random (-> byte-size <-)) (env ((□? (byte-size iterations)))))\""
  862
  835
  14
  13
  670
  6
  676
  1
  19157/22806
  242
  #f
  3766/835
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval (app <= (-> iterations <-) 0) (env ((□? (n iterations)))))\""
  863
  836
  14
  13
  670
  6
  676
  1
  2735/3258
  242
  #f
  1885/418
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  2
  25
  94
  ref-or-constructor
  "\"'(eval\n  (app generate-fermat-prime byte-size (-> iterations <-))\n  (env ((□? (byte-size iterations)))))\""
  864
  837
  14
  13
  670
  6
  676
  1
  5461/6516
  242
  #f
  1258/279
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  primtest
  2
  25
  94
  app
  "\"'(eval\n  (app modulo-power base (-> (app - exp 1) <-) n)\n  (env ((□? (base exp n)))))\""
  868
  841
  14
  13
  670
  6
  676
  1
  27233/32580
  243
  #f
  3791/841
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  primtest
  2
  25
  94
  app
  "\"'(eval (app = (-> (app modulo n 2) <-) 0) (env ((□? (n)))))\""
  868
  841
  14
  13
  670
  6
  676
  1
  27233/32580
  243
  #f
  3791/841
  ((0 0 0) (0 0 0) (0 0 0)))
