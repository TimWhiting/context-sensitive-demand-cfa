'(clean-cache
  mj09
  2
  500
  33
  let
  "'(eval ((top) let (h) ...) (env ()))"
  #f
  36
  26
  10
  0
  26
  10
  36
  1
  1
  26
  #t
  1
  (1 1 0))
'(clean-cache
  mj09
  2
  500
  33
  lambda
  "'(eval (let (... () (h (-> (λ (b) ...) <-)) () ...) ...) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  mj09
  2
  500
  33
  let
  "'(eval (λ (b) (-> (let (g) ...) <-)) (env ((□? (b)))))"
  #f
  113
  86
  20
  7
  48
  17
  65
  1
  10351/15750
  71
  #f
  51/43
  (10 11 0))
'(clean-cache
  mj09
  2
  500
  33
  lambda
  "'(eval (let (... () (g (-> (λ (z) ...) <-)) () ...) ...) (env ((□? (b)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  mj09
  2
  500
  33
  ref-or-constructor
  "'(eval (λ (z) (-> z <-)) (env ((□? (z)) (□? (b)))))"
  #f
  94
  66
  20
  8
  36
  17
  53
  1
  421/630
  55
  #f
  37/33
  (9 9 0))
'(clean-cache
  mj09
  2
  500
  33
  let
  "'(eval (let (g) (-> (let (f) ...) <-)) (env ((□? (b)))))"
  #f
  110
  83
  20
  7
  46
  17
  63
  1
  9931/15120
  69
  #f
  98/83
  (8 9 0))
'(clean-cache
  mj09
  2
  500
  33
  lambda
  "'(eval (let (... () (f (-> (λ (k) ...) <-)) () ...) ...) (env ((□? (b)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  mj09
  2
  500
  33
  match
  "'(eval (λ (k) (-> (match b ...) <-)) (env ((□? (k)) (□? (b)))))"
  #f
  75
  53
  14
  8
  26
  13
  39
  1
  47/72
  45
  #f
  54/53
  (7 7 0))
'(clean-cache
  mj09
  2
  500
  33
  app
  "'(eval (match b (#f) (_ (-> (app k 1) <-))) (env ((□? (k)) (□? (b)))))"
  #f
  18
  9
  5
  4
  0
  0
  0
  1
  0
  9
  #t
  1
  (0 0 0))
'(clean-cache
  mj09
  2
  500
  33
  number
  "'(eval (app k (-> 1 <-)) (env ((□? (k)) (□? (b)))))"
  #t
  3
  1
  0
  2
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  mj09
  2
  500
  33
  ref-or-constructor
  "'(eval (app (-> k <-) 1) (env ((□? (k)) (□? (b)))))"
  #f
  6
  2
  2
  2
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  mj09
  2
  500
  33
  app
  "'(eval (match b ((#f) (-> (app k 2) <-)) _) (env ((□? (k)) (□? (b)))))"
  #f
  18
  9
  5
  4
  0
  0
  0
  1
  0
  9
  #t
  1
  (1 1 0))
'(clean-cache
  mj09
  2
  500
  33
  number
  "'(eval (app k (-> 2 <-)) (env ((□? (k)) (□? (b)))))"
  #t
  3
  1
  0
  2
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  mj09
  2
  500
  33
  ref-or-constructor
  "'(eval (app (-> k <-) 2) (env ((□? (k)) (□? (b)))))"
  #f
  6
  2
  2
  2
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  mj09
  2
  500
  33
  ref-or-constructor
  "'(eval (match (-> b <-) (#f) _) (env ((□? (k)) (□? (b)))))"
  #f
  10
  5
  3
  2
  4
  3
  7
  1
  4/5
  4
  #f
  6/5
  (0 0 0))
'(clean-cache
  mj09
  2
  500
  33
  let
  "'(eval (let (f) (-> (let (y) ...) <-)) (env ((□? (b)))))"
  #f
  107
  80
  20
  7
  44
  17
  61
  1
  9511/14490
  67
  #f
  47/40
  (9 9 0))
'(clean-cache
  mj09
  2
  500
  33
  app
  "'(eval\n  (let (... () (y (-> (app f (λ (x) ...)) <-)) () ...) ...)\n  (env ((□? (b)))))"
  #f
  78
  60
  14
  4
  32
  13
  45
  1
  7159/10710
  51
  #f
  11/10
  (7 7 0))
'(clean-cache
  mj09
  2
  500
  33
  lambda
  "'(eval (app f (-> (λ (x) ...) <-)) (env ((□? (b)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  mj09
  2
  500
  33
  ref-or-constructor
  "'(eval (λ (x) (-> x <-)) (env ((□? (x)) (□? (b)))))"
  #f
  11
  5
  3
  3
  0
  0
  0
  1
  0
  4
  #f
  6/5
  (0 0 0))
'(clean-cache
  mj09
  2
  500
  33
  ref-or-constructor
  "'(eval (app (-> f <-) (λ (x) ...)) (env ((□? (b)))))"
  #t
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  mj09
  2
  500
  33
  app
  "'(eval (let (y) (-> (app g y) <-)) (env ((□? (b)))))"
  #f
  104
  77
  20
  7
  42
  17
  59
  1
  9091/13860
  65
  #f
  90/77
  (9 10 0))
'(clean-cache
  mj09
  2
  500
  33
  ref-or-constructor
  "'(eval (app g (-> y <-)) (env ((□? (b)))))"
  #f
  81
  63
  14
  4
  34
  13
  47
  1
  7579/11340
  53
  #f
  10/9
  (6 7 0))
'(clean-cache
  mj09
  2
  500
  33
  ref-or-constructor
  "'(eval (app (-> g <-) y) (env ((□? (b)))))"
  #t
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  mj09
  2
  500
  33
  let
  "'(eval (let (h) (-> (let (x ... y) ...) <-)) (env ()))"
  #f
  35
  25
  10
  0
  25
  10
  35
  1
  1
  25
  #t
  1
  (1 1 0))
'(clean-cache
  mj09
  2
  500
  33
  app
  "'(eval (let (... x (y (-> (app h (app #f)) <-)) () ...) ...) (env ()))"
  #f
  33
  23
  10
  0
  23
  10
  33
  1
  1
  23
  #t
  1
  (1 1 0))
'(clean-cache
  mj09
  2
  500
  33
  app
  "'(eval (app h (-> (app #f) <-)) (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  mj09
  2
  500
  33
  constructor
  "'(eval (app (-> #f <-)) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  mj09
  2
  500
  33
  ref-or-constructor
  "'(eval (app (-> h <-) (app #f)) (env ()))"
  #t
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  mj09
  2
  500
  33
  app
  "'(eval (let (... () (x (-> (app h (app #t)) <-)) y ...) ...) (env ()))"
  #f
  33
  23
  10
  0
  23
  10
  33
  1
  1
  23
  #t
  1
  (1 1 0))
'(clean-cache
  mj09
  2
  500
  33
  app
  "'(eval (app h (-> (app #t) <-)) (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  mj09
  2
  500
  33
  constructor
  "'(eval (app (-> #t <-)) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  mj09
  2
  500
  33
  ref-or-constructor
  "'(eval (app (-> h <-) (app #t)) (env ()))"
  #t
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  mj09
  2
  500
  33
  ref-or-constructor
  "'(eval (let (x ... y) (-> y <-)) (env ()))"
  #f
  34
  24
  10
  0
  24
  10
  34
  1
  1
  24
  #t
  1
  (1 1 0))
