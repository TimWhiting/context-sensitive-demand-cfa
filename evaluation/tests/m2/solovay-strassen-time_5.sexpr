'(clean-cache
  solovay-strassen
  2
  5
  510
  lettypes
  "'(eval ((top) lettypes (error) ...) (env ()))"
  #f
  10
  10
  0
  0
  10
  0
  10
  1
  1
  10
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  letrec*
  "'(eval\n  (lettypes error ... error (letrec* (square ... byte-size) ...))\n  (env ()))"
  #f
  9
  9
  0
  0
  9
  0
  9
  1
  1
  9
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  number
  "'(eval (letrec* (... iterations (byte-size (-> 15 <-)) () ...) ...) (env ()))"
  (number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  number
  "'(eval\n  (letrec*\n   (... generate-solovay-strassen-prime (iterations (-> 10 <-)) byte-size ...)\n   ...)\n  (env ()))"
  (number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  lambda
  "'(eval\n  (letrec*\n   (...\n    generate-fermat-prime\n    (generate-solovay-strassen-prime (-> (λ (byte-size iterations) ...) <-))\n    iterations\n    ...)\n   ...)\n  (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  let
  "'(eval\n  (λ (byte-size iterations) (-> (let (n) ...) <-))\n  (env ((□? (byte-size iterations)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval\n  (let (... () (n (-> (app generate-fermat-prime byte-size 5) <-)) () ...) ...)\n  (env ((□? (byte-size iterations)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  number
  "'(eval\n  (app generate-fermat-prime byte-size (-> 5 <-))\n  (env ((□? (byte-size iterations)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval\n  (app generate-fermat-prime (-> byte-size <-) 5)\n  (env ((□? (byte-size iterations)))))"
  #f
  10
  6
  3
  1
  5
  2
  7
  1
  3/4
  6
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval\n  (app (-> generate-fermat-prime <-) byte-size 5)\n  (env ((□? (byte-size iterations)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  match
  "'(eval\n  (let (n) (-> (match (app is-solovay-strassen-prime? n iterations) ...) <-))\n  (env ((□? (byte-size iterations)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval\n  (match (app is-solovay-strassen-prime? n iterations) (#f) (_ (-> n <-)))\n  (env ((□? (byte-size iterations)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval\n  (match\n   (app is-solovay-strassen-prime? n iterations)\n   ((#f) (-> (app generate-solovay-strassen-prime byte-size iterations) <-))\n   _)\n  (env ((□? (byte-size iterations)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval\n  (app generate-solovay-strassen-prime byte-size (-> iterations <-))\n  (env ((□? (byte-size iterations)))))"
  #f
  10
  6
  3
  1
  5
  2
  7
  1
  11/12
  6
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval\n  (app generate-solovay-strassen-prime (-> byte-size <-) iterations)\n  (env ((□? (byte-size iterations)))))"
  #f
  10
  6
  3
  1
  5
  2
  7
  1
  11/12
  6
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval\n  (app (-> generate-solovay-strassen-prime <-) byte-size iterations)\n  (env ((□? (byte-size iterations)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval\n  (match (-> (app is-solovay-strassen-prime? n iterations) <-) (#f) _)\n  (env ((□? (byte-size iterations)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval\n  (app is-solovay-strassen-prime? n (-> iterations <-))\n  (env ((□? (byte-size iterations)))))"
  #f
  10
  6
  3
  1
  5
  2
  7
  1
  3/4
  6
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval\n  (app is-solovay-strassen-prime? (-> n <-) iterations)\n  (env ((□? (byte-size iterations)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval\n  (app (-> is-solovay-strassen-prime? <-) n iterations)\n  (env ((□? (byte-size iterations)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  lambda
  "'(eval\n  (letrec*\n   (...\n    is-solovay-strassen-prime?\n    (generate-fermat-prime (-> (λ (byte-size iterations) ...) <-))\n    generate-solovay-strassen-prime\n    ...)\n   ...)\n  (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  let
  "'(eval\n  (λ (byte-size iterations) (-> (let (n) ...) <-))\n  (env ((□? (byte-size iterations)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval\n  (let (... () (n (-> (app random byte-size) <-)) () ...) ...)\n  (env ((□? (byte-size iterations)))))"
  #f
  41
  31
  6
  4
  20
  3
  23
  1
  153/224
  30
  #f
  32/31
  ((2 2 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app random (-> byte-size <-)) (env ((□? (byte-size iterations)))))"
  #f
  27
  17
  6
  4
  12
  3
  15
  1
  121/168
  17
  #t
  1
  ((1 1 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app (-> random <-) byte-size) (env ((□? (byte-size iterations)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  match
  "'(eval\n  (let (n) (-> (match (match (app not ...) ...) ...) <-))\n  (env ((□? (byte-size iterations)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval\n  (match\n   (match (app not (app is-trivial-composite? ...)) ...)\n   (#f)\n   (_ (-> n <-)))\n  (env ((□? (byte-size iterations)))))"
  #f
  48
  38
  6
  4
  24
  3
  27
  1
  169/252
  30
  #f
  23/19
  ((2 2 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval\n  (match\n   (match (app not (app is-trivial-composite? ...)) ...)\n   ((#f) (-> (app generate-fermat-prime byte-size iterations) <-))\n   _)\n  (env ((□? (byte-size iterations)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval\n  (app generate-fermat-prime byte-size (-> iterations <-))\n  (env ((□? (byte-size iterations)))))"
  #f
  13
  6
  3
  4
  2
  1
  3
  1
  1/5
  6
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval\n  (app generate-fermat-prime (-> byte-size <-) iterations)\n  (env ((□? (byte-size iterations)))))"
  #f
  26
  16
  6
  4
  12
  3
  15
  1
  121/140
  16
  #t
  1
  ((1 1 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval\n  (app (-> generate-fermat-prime <-) byte-size iterations)\n  (env ((□? (byte-size iterations)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  match
  "'(eval\n  (match (-> (match (app not (app is-trivial-composite? ...)) ...) <-) (#f) _)\n  (env ((□? (byte-size iterations)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  match
  "'(eval\n  (match\n   (app not (app is-trivial-composite? n))\n   (#f)\n   (_ (-> (match (app is-fermat-prime? n iterations) ...) <-)))\n  (env ((□? (byte-size iterations)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval\n  (match (app is-fermat-prime? n iterations) (#f) (_ (-> (app #t) <-)))\n  (env ((□? (byte-size iterations)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (byte-size iterations)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval\n  (match (app is-fermat-prime? n iterations) ((#f) (-> (app #f) <-)) _)\n  (env ((□? (byte-size iterations)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (byte-size iterations)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval\n  (match (-> (app is-fermat-prime? n iterations) <-) (#f) _)\n  (env ((□? (byte-size iterations)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval\n  (app is-fermat-prime? n (-> iterations <-))\n  (env ((□? (byte-size iterations)))))"
  #f
  14
  7
  3
  4
  2
  1
  3
  1
  2/15
  7
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval\n  (app is-fermat-prime? (-> n <-) iterations)\n  (env ((□? (byte-size iterations)))))"
  #f
  48
  38
  6
  4
  24
  3
  27
  1
  169/252
  30
  #f
  23/19
  ((2 2 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval\n  (app (-> is-fermat-prime? <-) n iterations)\n  (env ((□? (byte-size iterations)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval\n  (match (app not (app is-trivial-composite? n)) ((#f) (-> (app #f) <-)) _)\n  (env ((□? (byte-size iterations)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (byte-size iterations)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval\n  (match (-> (app not (app is-trivial-composite? n)) <-) (#f) _)\n  (env ((□? (byte-size iterations)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval\n  (app not (-> (app is-trivial-composite? n) <-))\n  (env ((□? (byte-size iterations)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval\n  (app is-trivial-composite? (-> n <-))\n  (env ((□? (byte-size iterations)))))"
  #f
  48
  38
  6
  4
  24
  3
  27
  1
  169/252
  30
  #f
  23/19
  ((2 2 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval\n  (app (-> is-trivial-composite? <-) n)\n  (env ((□? (byte-size iterations)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval\n  (app (-> not <-) (app is-trivial-composite? n))\n  (env ((□? (byte-size iterations)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  lambda
  "'(eval\n  (letrec*\n   (...\n    is-fermat-prime?\n    (is-solovay-strassen-prime? (-> (λ (n iterations) ...) <-))\n    generate-fermat-prime\n    ...)\n   ...)\n  (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  match
  "'(eval\n  (λ (n iterations) (-> (match (app <= iterations 0) ...) <-))\n  (env ((□? (n iterations)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval\n  (match (app <= iterations 0) (#f) (_ (-> (app #t) <-)))\n  (env ((□? (n iterations)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (n iterations)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  match
  "'(eval\n  (match\n   (app <= iterations 0)\n   ((#f) (-> (match (match (app even? ...) ...) ...) <-))\n   _)\n  (env ((□? (n iterations)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval\n  (match (match (app even? n) ...) (#f) (_ (-> (app #f) <-)))\n  (env ((□? (n iterations)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (n iterations)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  let*
  "'(eval\n  (match\n   (match (app even? n) ...)\n   ((#f) (-> (let* (byte-size ... a) ...) <-))\n   _)\n  (env ((□? (n iterations)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval\n  (let* (...\n         byte-size\n         (a (-> (app + 1 (app modulo (app random ...) (app - ...))) <-))\n         ()\n         ...)\n    ...)\n  (env ((□? (n iterations)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval\n  (app + 1 (-> (app modulo (app random byte-size) (app - n 1)) <-))\n  (env ((□? (n iterations)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval\n  (app modulo (app random byte-size) (-> (app - n 1) <-))\n  (env ((□? (n iterations)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  number
  "'(eval (app - n (-> 1 <-)) (env ((□? (n iterations)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app - (-> n <-) 1) (env ((□? (n iterations)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app (-> - <-) n 1) (env ((□? (n iterations)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval\n  (app modulo (-> (app random byte-size) <-) (app - n 1))\n  (env ((□? (n iterations)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app random (-> byte-size <-)) (env ((□? (n iterations)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app (-> random <-) byte-size) (env ((□? (n iterations)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval\n  (app (-> modulo <-) (app random byte-size) (app - n 1))\n  (env ((□? (n iterations)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  number
  "'(eval\n  (app + (-> 1 <-) (app modulo (app random byte-size) (app - n 1)))\n  (env ((□? (n iterations)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval\n  (app (-> + <-) 1 (app modulo (app random byte-size) (app - n 1)))\n  (env ((□? (n iterations)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval\n  (let* (...\n         ()\n         (byte-size (-> (app ceiling (app / (app log ...) (app log ...))) <-))\n         a\n         ...)\n    ...)\n  (env ((□? (n iterations)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval\n  (app ceiling (-> (app / (app log n) (app log 2)) <-))\n  (env ((□? (n iterations)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval (app / (app log n) (-> (app log 2) <-)) (env ((□? (n iterations)))))"
  #f
  4
  3
  0
  1
  0
  0
  0
  1
  0
  3
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  number
  "'(eval (app log (-> 2 <-)) (env ((□? (n iterations)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app (-> log <-) 2) (env ((□? (n iterations)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval (app / (-> (app log n) <-) (app log 2)) (env ((□? (n iterations)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app log (-> n <-)) (env ((□? (n iterations)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app (-> log <-) n) (env ((□? (n iterations)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app (-> / <-) (app log n) (app log 2)) (env ((□? (n iterations)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval\n  (app (-> ceiling <-) (app / (app log n) (app log 2)))\n  (env ((□? (n iterations)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  let*
  "'(eval\n  (let* (byte-size ... a) (-> (let* (jacobi-a-n ... exp) ...) <-))\n  (env ((□? (n iterations)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval\n  (let* (...\n         jacobi-a-n\n         (exp (-> (app modulo-power a (app / (app - ...) 2) n) <-))\n         ()\n         ...)\n    ...)\n  (env ((□? (n iterations)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval\n  (app modulo-power a (app / (app - n 1) 2) (-> n <-))\n  (env ((□? (n iterations)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval\n  (app modulo-power a (-> (app / (app - n 1) 2) <-) n)\n  (env ((□? (n iterations)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  number
  "'(eval (app / (app - n 1) (-> 2 <-)) (env ((□? (n iterations)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval (app / (-> (app - n 1) <-) 2) (env ((□? (n iterations)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  number
  "'(eval (app - n (-> 1 <-)) (env ((□? (n iterations)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app - (-> n <-) 1) (env ((□? (n iterations)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app (-> - <-) n 1) (env ((□? (n iterations)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app (-> / <-) (app - n 1) 2) (env ((□? (n iterations)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval\n  (app modulo-power (-> a <-) (app / (app - n 1) 2) n)\n  (env ((□? (n iterations)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval\n  (app (-> modulo-power <-) a (app / (app - n 1) 2) n)\n  (env ((□? (n iterations)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval\n  (let* (... () (jacobi-a-n (-> (app jacobi a n) <-)) exp ...) ...)\n  (env ((□? (n iterations)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app jacobi a (-> n <-)) (env ((□? (n iterations)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app jacobi (-> a <-) n) (env ((□? (n iterations)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app (-> jacobi <-) a n) (env ((□? (n iterations)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  match
  "'(eval\n  (let* (jacobi-a-n ... exp) (-> (match (match (app = ...) ...) ...) <-))\n  (env ((□? (n iterations)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval\n  (match (match (app = jacobi-a-n 0) ...) (#f) (_ (-> (app #f) <-)))\n  (env ((□? (n iterations)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (n iterations)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval\n  (match\n   (match (app = jacobi-a-n 0) ...)\n   ((#f) (-> (app is-solovay-strassen-prime? n (app - iterations 1)) <-))\n   _)\n  (env ((□? (n iterations)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval\n  (app is-solovay-strassen-prime? n (-> (app - iterations 1) <-))\n  (env ((□? (n iterations)))))"
  #f
  47
  37
  6
  4
  24
  3
  27
  1
  169/224
  29
  #f
  45/37
  ((2 2 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  number
  "'(eval (app - iterations (-> 1 <-)) (env ((□? (n iterations)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app - (-> iterations <-) 1) (env ((□? (n iterations)))))"
  #f
  45
  35
  6
  4
  24
  3
  27
  1
  523/672
  27
  #f
  43/35
  ((2 2 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app (-> - <-) iterations 1) (env ((□? (n iterations)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval\n  (app is-solovay-strassen-prime? (-> n <-) (app - iterations 1))\n  (env ((□? (n iterations)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval\n  (app (-> is-solovay-strassen-prime? <-) n (app - iterations 1))\n  (env ((□? (n iterations)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  match
  "'(eval\n  (match (-> (match (app = jacobi-a-n 0) ...) <-) (#f) _)\n  (env ((□? (n iterations)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval\n  (match (app = jacobi-a-n 0) (#f) (_ (-> (app #t) <-)))\n  (env ((□? (n iterations)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (n iterations)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  match
  "'(eval\n  (match\n   (app = jacobi-a-n 0)\n   ((#f) (-> (match (app not (app = ...)) ...) <-))\n   _)\n  (env ((□? (n iterations)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval\n  (match (app not (app = (app modulo ...) exp)) (#f) (_ (-> (app #t) <-)))\n  (env ((□? (n iterations)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (n iterations)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval\n  (match (app not (app = (app modulo ...) exp)) ((#f) (-> (app #f) <-)) _)\n  (env ((□? (n iterations)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (n iterations)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval\n  (match (-> (app not (app = (app modulo ...) exp)) <-) (#f) _)\n  (env ((□? (n iterations)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval\n  (app not (-> (app = (app modulo jacobi-a-n n) exp) <-))\n  (env ((□? (n iterations)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval\n  (app = (app modulo jacobi-a-n n) (-> exp <-))\n  (env ((□? (n iterations)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval\n  (app = (-> (app modulo jacobi-a-n n) <-) exp)\n  (env ((□? (n iterations)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app modulo jacobi-a-n (-> n <-)) (env ((□? (n iterations)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app modulo (-> jacobi-a-n <-) n) (env ((□? (n iterations)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app (-> modulo <-) jacobi-a-n n) (env ((□? (n iterations)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval\n  (app (-> = <-) (app modulo jacobi-a-n n) exp)\n  (env ((□? (n iterations)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval\n  (app (-> not <-) (app = (app modulo jacobi-a-n n) exp))\n  (env ((□? (n iterations)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval (match (-> (app = jacobi-a-n 0) <-) (#f) _) (env ((□? (n iterations)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  number
  "'(eval (app = jacobi-a-n (-> 0 <-)) (env ((□? (n iterations)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app = (-> jacobi-a-n <-) 0) (env ((□? (n iterations)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app (-> = <-) jacobi-a-n 0) (env ((□? (n iterations)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  match
  "'(eval\n  (match (-> (match (app even? n) ...) <-) (#f) _)\n  (env ((□? (n iterations)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  match
  "'(eval\n  (match (app even? n) (#f) (_ (-> (match (app not (app = ...)) ...) <-)))\n  (env ((□? (n iterations)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval\n  (match (app not (app = n 2)) (#f) (_ (-> (app #t) <-)))\n  (env ((□? (n iterations)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (n iterations)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval\n  (match (app not (app = n 2)) ((#f) (-> (app #f) <-)) _)\n  (env ((□? (n iterations)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (n iterations)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval\n  (match (-> (app not (app = n 2)) <-) (#f) _)\n  (env ((□? (n iterations)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval (app not (-> (app = n 2) <-)) (env ((□? (n iterations)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  number
  "'(eval (app = n (-> 2 <-)) (env ((□? (n iterations)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app = (-> n <-) 2) (env ((□? (n iterations)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app (-> = <-) n 2) (env ((□? (n iterations)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app (-> not <-) (app = n 2)) (env ((□? (n iterations)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval\n  (match (app even? n) ((#f) (-> (app #f) <-)) _)\n  (env ((□? (n iterations)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (n iterations)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval (match (-> (app even? n) <-) (#f) _) (env ((□? (n iterations)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app even? (-> n <-)) (env ((□? (n iterations)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app (-> even? <-) n) (env ((□? (n iterations)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval\n  (match (-> (app <= iterations 0) <-) (#f) _)\n  (env ((□? (n iterations)))))"
  #f
  66
  56
  6
  4
  36
  3
  39
  1
  75/112
  44
  #f
  17/14
  ((4 4 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  number
  "'(eval (app <= iterations (-> 0 <-)) (env ((□? (n iterations)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app <= (-> iterations <-) 0) (env ((□? (n iterations)))))"
  #f
  45
  35
  6
  4
  24
  3
  27
  1
  59/84
  27
  #f
  43/35
  ((2 2 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app (-> <= <-) iterations 0) (env ((□? (n iterations)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  lambda
  "'(eval\n  (letrec*\n   (...\n    is-trivial-composite?\n    (is-fermat-prime? (-> (λ (n iterations) ...) <-))\n    is-solovay-strassen-prime?\n    ...)\n   ...)\n  (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  match
  "'(eval\n  (λ (n iterations) (-> (match (app <= iterations 0) ...) <-))\n  (env ((□? (n iterations)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval\n  (match (app <= iterations 0) (#f) (_ (-> (app #t) <-)))\n  (env ((□? (n iterations)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (n iterations)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  match
  "'(eval\n  (match\n   (app <= iterations 0)\n   ((#f) (-> (match (let* (byte-size ... a) ...) ...) <-))\n   _)\n  (env ((□? (n iterations)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval\n  (match (let* (byte-size ... a) ...) (#f) (_ (-> (app #t) <-)))\n  (env ((□? (n iterations)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (n iterations)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval\n  (match (let* (byte-size ... a) ...) ((#f) (-> (app #f) <-)) _)\n  (env ((□? (n iterations)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (n iterations)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  let*
  "'(eval\n  (match (-> (let* (byte-size ... a) ...) <-) (#f) _)\n  (env ((□? (n iterations)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval\n  (let* (... byte-size (a (-> (app random byte-size) <-)) () ...) ...)\n  (env ((□? (n iterations)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app random (-> byte-size <-)) (env ((□? (n iterations)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app (-> random <-) byte-size) (env ((□? (n iterations)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval\n  (let* (...\n         ()\n         (byte-size (-> (app ceiling (app / (app log ...) (app log ...))) <-))\n         a\n         ...)\n    ...)\n  (env ((□? (n iterations)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval\n  (app ceiling (-> (app / (app log n) (app log 2)) <-))\n  (env ((□? (n iterations)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval (app / (app log n) (-> (app log 2) <-)) (env ((□? (n iterations)))))"
  #f
  4
  3
  0
  1
  0
  0
  0
  1
  0
  3
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  number
  "'(eval (app log (-> 2 <-)) (env ((□? (n iterations)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app (-> log <-) 2) (env ((□? (n iterations)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval (app / (-> (app log n) <-) (app log 2)) (env ((□? (n iterations)))))"
  #f
  82
  66
  9
  7
  40
  4
  44
  1
  233/364
  37
  #f
  95/66
  ((5 5 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app log (-> n <-)) (env ((□? (n iterations)))))"
  #f
  68
  52
  9
  7
  32
  4
  36
  1
  201/308
  30
  #f
  37/26
  ((4 4 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app (-> log <-) n) (env ((□? (n iterations)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app (-> / <-) (app log n) (app log 2)) (env ((□? (n iterations)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval\n  (app (-> ceiling <-) (app / (app log n) (app log 2)))\n  (env ((□? (n iterations)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  match
  "'(eval\n  (let* (byte-size ... a) (-> (match (app = (app modulo-power ...) 1) ...) <-))\n  (env ((□? (n iterations)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval\n  (match\n   (app = (app modulo-power a (app - ...) n) 1)\n   (#f)\n   (_ (-> (app is-fermat-prime? n (app - iterations 1)) <-)))\n  (env ((□? (n iterations)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval\n  (app is-fermat-prime? n (-> (app - iterations 1) <-))\n  (env ((□? (n iterations)))))"
  #f
  52
  39
  6
  7
  20
  2
  22
  1
  108/245
  31
  #f
  47/39
  ((2 2 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  number
  "'(eval (app - iterations (-> 1 <-)) (env ((□? (n iterations)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app - (-> iterations <-) 1) (env ((□? (n iterations)))))"
  #f
  50
  37
  6
  7
  20
  2
  22
  1
  344/735
  29
  #f
  45/37
  ((2 2 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app (-> - <-) iterations 1) (env ((□? (n iterations)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval\n  (app is-fermat-prime? (-> n <-) (app - iterations 1))\n  (env ((□? (n iterations)))))"
  #f
  67
  51
  9
  7
  32
  4
  36
  1
  201/280
  30
  #f
  24/17
  ((3 3 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval\n  (app (-> is-fermat-prime? <-) n (app - iterations 1))\n  (env ((□? (n iterations)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval\n  (match\n   (app = (app modulo-power a (app - ...) n) 1)\n   ((#f) (-> (app #f) <-))\n   _)\n  (env ((□? (n iterations)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (n iterations)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval\n  (match (-> (app = (app modulo-power a (app - ...) n) 1) <-) (#f) _)\n  (env ((□? (n iterations)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  number
  "'(eval\n  (app = (app modulo-power a (app - n 1) n) (-> 1 <-))\n  (env ((□? (n iterations)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval\n  (app = (-> (app modulo-power a (app - n 1) n) <-) 1)\n  (env ((□? (n iterations)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app modulo-power a (app - n 1) (-> n <-)) (env ((□? (n iterations)))))"
  #f
  68
  52
  9
  7
  32
  4
  36
  1
  201/308
  30
  #f
  37/26
  ((4 4 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval (app modulo-power a (-> (app - n 1) <-) n) (env ((□? (n iterations)))))"
  #f
  89
  73
  9
  7
  44
  4
  48
  1
  249/392
  44
  #f
  102/73
  ((5 5 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  number
  "'(eval (app - n (-> 1 <-)) (env ((□? (n iterations)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app - (-> n <-) 1) (env ((□? (n iterations)))))"
  #f
  68
  52
  9
  7
  32
  4
  36
  1
  201/308
  30
  #f
  37/26
  ((4 4 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app (-> - <-) n 1) (env ((□? (n iterations)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app modulo-power (-> a <-) (app - n 1) n) (env ((□? (n iterations)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app (-> modulo-power <-) a (app - n 1) n) (env ((□? (n iterations)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval\n  (app (-> = <-) (app modulo-power a (app - n 1) n) 1)\n  (env ((□? (n iterations)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval\n  (match (-> (app <= iterations 0) <-) (#f) _)\n  (env ((□? (n iterations)))))"
  #f
  71
  58
  6
  7
  32
  2
  34
  1
  178/385
  46
  #f
  35/29
  ((3 3 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  number
  "'(eval (app <= iterations (-> 0 <-)) (env ((□? (n iterations)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app <= (-> iterations <-) 0) (env ((□? (n iterations)))))"
  #f
  50
  37
  6
  7
  20
  2
  22
  1
  59/140
  29
  #f
  45/37
  ((2 2 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app (-> <= <-) iterations 0) (env ((□? (n iterations)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  lambda
  "'(eval\n  (letrec*\n   (...\n    jacobi\n    (is-trivial-composite? (-> (λ (n) ...) <-))\n    is-fermat-prime?\n    ...)\n   ...)\n  (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  match
  "'(eval (λ (n) (-> (match (app = (app modulo ...) 0) ...) <-)) (env ((□? (n)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval\n  (match (app = (app modulo n 2) 0) (#f) (_ (-> (app #t) <-)))\n  (env ((□? (n)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (n)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  match
  "'(eval\n  (match\n   (app = (app modulo n 2) 0)\n   ((#f) (-> (match (app = (app modulo ...) 0) ...) <-))\n   _)\n  (env ((□? (n)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval\n  (match (app = (app modulo n 3) 0) (#f) (_ (-> (app #t) <-)))\n  (env ((□? (n)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (n)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  match
  "'(eval\n  (match\n   (app = (app modulo n 3) 0)\n   ((#f) (-> (match (app = (app modulo ...) 0) ...) <-))\n   _)\n  (env ((□? (n)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval\n  (match (app = (app modulo n 5) 0) (#f) (_ (-> (app #t) <-)))\n  (env ((□? (n)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (n)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  match
  "'(eval\n  (match\n   (app = (app modulo n 5) 0)\n   ((#f) (-> (match (app = (app modulo ...) 0) ...) <-))\n   _)\n  (env ((□? (n)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval\n  (match (app = (app modulo n 7) 0) (#f) (_ (-> (app #t) <-)))\n  (env ((□? (n)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (n)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  match
  "'(eval\n  (match\n   (app = (app modulo n 7) 0)\n   ((#f) (-> (match (app = (app modulo ...) 0) ...) <-))\n   _)\n  (env ((□? (n)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval\n  (match (app = (app modulo n 11) 0) (#f) (_ (-> (app #t) <-)))\n  (env ((□? (n)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (n)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  match
  "'(eval\n  (match\n   (app = (app modulo n 11) 0)\n   ((#f) (-> (match (app = (app modulo ...) 0) ...) <-))\n   _)\n  (env ((□? (n)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval\n  (match (app = (app modulo n 13) 0) (#f) (_ (-> (app #t) <-)))\n  (env ((□? (n)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (n)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  match
  "'(eval\n  (match\n   (app = (app modulo n 13) 0)\n   ((#f) (-> (match (app = (app modulo ...) 0) ...) <-))\n   _)\n  (env ((□? (n)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval\n  (match (app = (app modulo n 17) 0) (#f) (_ (-> (app #t) <-)))\n  (env ((□? (n)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (n)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  match
  "'(eval\n  (match\n   (app = (app modulo n 17) 0)\n   ((#f) (-> (match (app = (app modulo ...) 0) ...) <-))\n   _)\n  (env ((□? (n)))))"
  #f
  123
  109
  8
  6
  70
  4
  74
  1
  59/84
  71
  #f
  147/109
  ((4 4 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval\n  (match (app = (app modulo n 19) 0) (#f) (_ (-> (app #t) <-)))\n  (env ((□? (n)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (n)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  match
  "'(eval\n  (match\n   (app = (app modulo n 19) 0)\n   ((#f) (-> (match (app = (app modulo ...) 0) ...) <-))\n   _)\n  (env ((□? (n)))))"
  #f
  101
  87
  8
  6
  50
  4
  54
  1
  1045/1764
  60
  #f
  38/29
  ((4 4 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval\n  (match (app = (app modulo n 23) 0) (#f) (_ (-> (app #t) <-)))\n  (env ((□? (n)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (n)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval\n  (match (app = (app modulo n 23) 0) ((#f) (-> (app #f) <-)) _)\n  (env ((□? (n)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (n)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval (match (-> (app = (app modulo n 23) 0) <-) (#f) _) (env ((□? (n)))))"
  #f
  83
  69
  8
  6
  40
  4
  44
  1
  269/448
  46
  #f
  4/3
  ((4 4 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  number
  "'(eval (app = (app modulo n 23) (-> 0 <-)) (env ((□? (n)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval (app = (-> (app modulo n 23) <-) 0) (env ((□? (n)))))"
  #f
  71
  57
  8
  6
  34
  4
  38
  1
  227/364
  38
  #f
  4/3
  ((3 3 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  number
  "'(eval (app modulo n (-> 23 <-)) (env ((□? (n)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app modulo (-> n <-) 23) (env ((□? (n)))))"
  #f
  59
  45
  8
  6
  28
  4
  32
  1
  37/56
  30
  #f
  4/3
  ((3 3 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app (-> modulo <-) n 23) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app (-> = <-) (app modulo n 23) 0) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval (match (-> (app = (app modulo n 19) 0) <-) (#f) _) (env ((□? (n)))))"
  #f
  83
  69
  8
  6
  40
  4
  44
  1
  269/448
  46
  #f
  4/3
  ((4 4 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  number
  "'(eval (app = (app modulo n 19) (-> 0 <-)) (env ((□? (n)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval (app = (-> (app modulo n 19) <-) 0) (env ((□? (n)))))"
  #f
  71
  57
  8
  6
  34
  4
  38
  1
  227/364
  38
  #f
  4/3
  ((3 3 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  number
  "'(eval (app modulo n (-> 19 <-)) (env ((□? (n)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app modulo (-> n <-) 19) (env ((□? (n)))))"
  #f
  59
  45
  8
  6
  28
  4
  32
  1
  37/56
  30
  #f
  4/3
  ((3 3 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app (-> modulo <-) n 19) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app (-> = <-) (app modulo n 19) 0) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval (match (-> (app = (app modulo n 17) 0) <-) (#f) _) (env ((□? (n)))))"
  #f
  83
  69
  8
  6
  40
  4
  44
  1
  269/448
  46
  #f
  4/3
  ((3 3 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  number
  "'(eval (app = (app modulo n 17) (-> 0 <-)) (env ((□? (n)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval (app = (-> (app modulo n 17) <-) 0) (env ((□? (n)))))"
  #f
  71
  57
  8
  6
  34
  4
  38
  1
  227/364
  38
  #f
  4/3
  ((3 3 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  number
  "'(eval (app modulo n (-> 17 <-)) (env ((□? (n)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app modulo (-> n <-) 17) (env ((□? (n)))))"
  #f
  59
  45
  8
  6
  28
  4
  32
  1
  37/56
  30
  #f
  4/3
  ((3 3 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app (-> modulo <-) n 17) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app (-> = <-) (app modulo n 17) 0) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval (match (-> (app = (app modulo n 13) 0) <-) (#f) _) (env ((□? (n)))))"
  #f
  83
  69
  8
  6
  40
  4
  44
  1
  269/448
  46
  #f
  4/3
  ((4 4 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  number
  "'(eval (app = (app modulo n 13) (-> 0 <-)) (env ((□? (n)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval (app = (-> (app modulo n 13) <-) 0) (env ((□? (n)))))"
  #f
  71
  57
  8
  6
  34
  4
  38
  1
  227/364
  38
  #f
  4/3
  ((3 3 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  number
  "'(eval (app modulo n (-> 13 <-)) (env ((□? (n)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app modulo (-> n <-) 13) (env ((□? (n)))))"
  #f
  59
  45
  8
  6
  28
  4
  32
  1
  37/56
  30
  #f
  4/3
  ((3 3 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app (-> modulo <-) n 13) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app (-> = <-) (app modulo n 13) 0) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval (match (-> (app = (app modulo n 11) 0) <-) (#f) _) (env ((□? (n)))))"
  #f
  83
  69
  8
  6
  40
  4
  44
  1
  269/448
  46
  #f
  4/3
  ((3 3 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  number
  "'(eval (app = (app modulo n 11) (-> 0 <-)) (env ((□? (n)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval (app = (-> (app modulo n 11) <-) 0) (env ((□? (n)))))"
  #f
  71
  57
  8
  6
  34
  4
  38
  1
  227/364
  38
  #f
  4/3
  ((3 3 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  number
  "'(eval (app modulo n (-> 11 <-)) (env ((□? (n)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app modulo (-> n <-) 11) (env ((□? (n)))))"
  #f
  59
  45
  8
  6
  28
  4
  32
  1
  37/56
  30
  #f
  4/3
  ((3 3 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app (-> modulo <-) n 11) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app (-> = <-) (app modulo n 11) 0) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval (match (-> (app = (app modulo n 7) 0) <-) (#f) _) (env ((□? (n)))))"
  #f
  83
  69
  8
  6
  40
  4
  44
  1
  269/448
  46
  #f
  4/3
  ((3 3 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  number
  "'(eval (app = (app modulo n 7) (-> 0 <-)) (env ((□? (n)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval (app = (-> (app modulo n 7) <-) 0) (env ((□? (n)))))"
  #f
  71
  57
  8
  6
  34
  4
  38
  1
  227/364
  38
  #f
  4/3
  ((3 3 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  number
  "'(eval (app modulo n (-> 7 <-)) (env ((□? (n)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app modulo (-> n <-) 7) (env ((□? (n)))))"
  #f
  59
  45
  8
  6
  28
  4
  32
  1
  37/56
  30
  #f
  4/3
  ((3 3 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app (-> modulo <-) n 7) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app (-> = <-) (app modulo n 7) 0) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval (match (-> (app = (app modulo n 5) 0) <-) (#f) _) (env ((□? (n)))))"
  #f
  83
  69
  8
  6
  40
  4
  44
  1
  269/448
  46
  #f
  4/3
  ((3 3 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  number
  "'(eval (app = (app modulo n 5) (-> 0 <-)) (env ((□? (n)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval (app = (-> (app modulo n 5) <-) 0) (env ((□? (n)))))"
  #f
  71
  57
  8
  6
  34
  4
  38
  1
  227/364
  38
  #f
  4/3
  ((3 3 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  number
  "'(eval (app modulo n (-> 5 <-)) (env ((□? (n)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app modulo (-> n <-) 5) (env ((□? (n)))))"
  #f
  59
  45
  8
  6
  28
  4
  32
  1
  37/56
  30
  #f
  4/3
  ((3 3 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app (-> modulo <-) n 5) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app (-> = <-) (app modulo n 5) 0) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval (match (-> (app = (app modulo n 3) 0) <-) (#f) _) (env ((□? (n)))))"
  #f
  83
  69
  8
  6
  40
  4
  44
  1
  269/448
  46
  #f
  4/3
  ((3 3 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  number
  "'(eval (app = (app modulo n 3) (-> 0 <-)) (env ((□? (n)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval (app = (-> (app modulo n 3) <-) 0) (env ((□? (n)))))"
  #f
  71
  57
  8
  6
  34
  4
  38
  1
  227/364
  38
  #f
  4/3
  ((3 3 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  number
  "'(eval (app modulo n (-> 3 <-)) (env ((□? (n)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app modulo (-> n <-) 3) (env ((□? (n)))))"
  #f
  59
  45
  8
  6
  28
  4
  32
  1
  37/56
  30
  #f
  4/3
  ((3 3 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app (-> modulo <-) n 3) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app (-> = <-) (app modulo n 3) 0) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval (match (-> (app = (app modulo n 2) 0) <-) (#f) _) (env ((□? (n)))))"
  #f
  83
  69
  8
  6
  40
  4
  44
  1
  269/448
  46
  #f
  4/3
  ((3 3 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  number
  "'(eval (app = (app modulo n 2) (-> 0 <-)) (env ((□? (n)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval (app = (-> (app modulo n 2) <-) 0) (env ((□? (n)))))"
  #f
  71
  57
  8
  6
  34
  4
  38
  1
  227/364
  38
  #f
  4/3
  ((3 3 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  number
  "'(eval (app modulo n (-> 2 <-)) (env ((□? (n)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app modulo (-> n <-) 2) (env ((□? (n)))))"
  #f
  59
  45
  8
  6
  28
  4
  32
  1
  37/56
  30
  #f
  4/3
  ((3 3 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app (-> modulo <-) n 2) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app (-> = <-) (app modulo n 2) 0) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  lambda
  "'(eval\n  (letrec*\n   (... modulo-power (jacobi (-> (λ (a n) ...) <-)) is-trivial-composite? ...)\n   ...)\n  (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  match
  "'(eval (λ (a n) (-> (match (app = n 1) ...) <-)) (env ((□? (a n)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  number
  "'(eval (match (app = n 1) (#f) (_ (-> 1 <-))) (env ((□? (a n)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  match
  "'(eval\n  (match (app = n 1) ((#f) (-> (match (app = a 1) ...) <-)) _)\n  (env ((□? (a n)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  number
  "'(eval (match (app = a 1) (#f) (_ (-> 1 <-))) (env ((□? (a n)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  match
  "'(eval\n  (match (app = a 1) ((#f) (-> (match (app not (app = ...)) ...) <-)) _)\n  (env ((□? (a n)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  number
  "'(eval\n  (match (app not (app = (app gcd ...) 1)) (#f) (_ (-> 0 <-)))\n  (env ((□? (a n)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  match
  "'(eval\n  (match\n   (app not (app = (app gcd ...) 1))\n   ((#f) (-> (match (match (app = ...) ...) ...) <-))\n   _)\n  (env ((□? (a n)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval\n  (match (match (app = a 2) ...) (#f) (c-x (-> c-x <-)))\n  (env ((□? (a n)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  match
  "'(eval\n  (match (match (app = a 2) ...) ((#f) (-> (match (app > a n) ...) <-)) c-x)\n  (env ((□? (a n)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval\n  (match (app > a n) (#f) (_ (-> (app jacobi (app modulo a n) n) <-)))\n  (env ((□? (a n)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app jacobi (app modulo a n) (-> n <-)) (env ((□? (a n)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval (app jacobi (-> (app modulo a n) <-) n) (env ((□? (a n)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app modulo a (-> n <-)) (env ((□? (a n)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app modulo (-> a <-) n) (env ((□? (a n)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app (-> modulo <-) a n) (env ((□? (a n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app (-> jacobi <-) (app modulo a n) n) (env ((□? (a n)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  match
  "'(eval\n  (match (app > a n) ((#f) (-> (match (app even? a) ...) <-)) _)\n  (env ((□? (a n)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval\n  (match\n   (app even? a)\n   (#f)\n   (_ (-> (app * (app jacobi (app / ...) n) (app jacobi 2 n)) <-)))\n  (env ((□? (a n)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval\n  (app * (app jacobi (app / a 2) n) (-> (app jacobi 2 n) <-))\n  (env ((□? (a n)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app jacobi 2 (-> n <-)) (env ((□? (a n)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  number
  "'(eval (app jacobi (-> 2 <-) n) (env ((□? (a n)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app (-> jacobi <-) 2 n) (env ((□? (a n)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval\n  (app * (-> (app jacobi (app / a 2) n) <-) (app jacobi 2 n))\n  (env ((□? (a n)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app jacobi (app / a 2) (-> n <-)) (env ((□? (a n)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval (app jacobi (-> (app / a 2) <-) n) (env ((□? (a n)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  number
  "'(eval (app / a (-> 2 <-)) (env ((□? (a n)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app / (-> a <-) 2) (env ((□? (a n)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app (-> / <-) a 2) (env ((□? (a n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app (-> jacobi <-) (app / a 2) n) (env ((□? (a n)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval\n  (app (-> * <-) (app jacobi (app / a 2) n) (app jacobi 2 n))\n  (env ((□? (a n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  match
  "'(eval\n  (match (app even? a) ((#f) (-> (match (app even? n) ...) <-)) _)\n  (env ((□? (a n)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval\n  (match\n   (app even? n)\n   (#f)\n   (_ (-> (app * (app jacobi a (app / ...)) (app jacobi a 2)) <-)))\n  (env ((□? (a n)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval\n  (app * (app jacobi a (app / n 2)) (-> (app jacobi a 2) <-))\n  (env ((□? (a n)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  number
  "'(eval (app jacobi a (-> 2 <-)) (env ((□? (a n)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app jacobi (-> a <-) 2) (env ((□? (a n)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app (-> jacobi <-) a 2) (env ((□? (a n)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval\n  (app * (-> (app jacobi a (app / n 2)) <-) (app jacobi a 2))\n  (env ((□? (a n)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval (app jacobi a (-> (app / n 2) <-)) (env ((□? (a n)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  number
  "'(eval (app / n (-> 2 <-)) (env ((□? (a n)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app / (-> n <-) 2) (env ((□? (a n)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app (-> / <-) n 2) (env ((□? (a n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app jacobi (-> a <-) (app / n 2)) (env ((□? (a n)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app (-> jacobi <-) a (app / n 2)) (env ((□? (a n)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval\n  (app (-> * <-) (app jacobi a (app / n 2)) (app jacobi a 2))\n  (env ((□? (a n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval\n  (match\n   (app even? n)\n   ((#f) (-> (app * (app jacobi n a) (match (app even? ...) ...)) <-))\n   _)\n  (env ((□? (a n)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  match
  "'(eval\n  (app * (app jacobi n a) (-> (match (app even? (app / ...)) ...) <-))\n  (env ((□? (a n)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  number
  "'(eval\n  (match (app even? (app / (app * ...) 4)) (#f) (_ (-> 1 <-)))\n  (env ((□? (a n)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  number
  "'(eval\n  (match (app even? (app / (app * ...) 4)) ((#f) (-> -1 <-)) _)\n  (env ((□? (a n)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval\n  (match (-> (app even? (app / (app * ...) 4)) <-) (#f) _)\n  (env ((□? (a n)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval\n  (app even? (-> (app / (app * (app - ...) (app - ...)) 4) <-))\n  (env ((□? (a n)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  number
  "'(eval (app / (app * (app - a 1) (app - n 1)) (-> 4 <-)) (env ((□? (a n)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval (app / (-> (app * (app - a 1) (app - n 1)) <-) 4) (env ((□? (a n)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval (app * (app - a 1) (-> (app - n 1) <-)) (env ((□? (a n)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  number
  "'(eval (app - n (-> 1 <-)) (env ((□? (a n)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app - (-> n <-) 1) (env ((□? (a n)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app (-> - <-) n 1) (env ((□? (a n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval (app * (-> (app - a 1) <-) (app - n 1)) (env ((□? (a n)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  number
  "'(eval (app - a (-> 1 <-)) (env ((□? (a n)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app - (-> a <-) 1) (env ((□? (a n)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app (-> - <-) a 1) (env ((□? (a n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app (-> * <-) (app - a 1) (app - n 1)) (env ((□? (a n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app (-> / <-) (app * (app - a 1) (app - n 1)) 4) (env ((□? (a n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval\n  (app (-> even? <-) (app / (app * (app - ...) (app - ...)) 4))\n  (env ((□? (a n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval\n  (app * (-> (app jacobi n a) <-) (match (app even? (app / ...)) ...))\n  (env ((□? (a n)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app jacobi n (-> a <-)) (env ((□? (a n)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app jacobi (-> n <-) a) (env ((□? (a n)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app (-> jacobi <-) n a) (env ((□? (a n)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval\n  (app (-> * <-) (app jacobi n a) (match (app even? (app / ...)) ...))\n  (env ((□? (a n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval (match (-> (app even? n) <-) (#f) _) (env ((□? (a n)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app even? (-> n <-)) (env ((□? (a n)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app (-> even? <-) n) (env ((□? (a n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval (match (-> (app even? a) <-) (#f) _) (env ((□? (a n)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app even? (-> a <-)) (env ((□? (a n)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app (-> even? <-) a) (env ((□? (a n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval (match (-> (app > a n) <-) (#f) _) (env ((□? (a n)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app > a (-> n <-)) (env ((□? (a n)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app > (-> a <-) n) (env ((□? (a n)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app (-> > <-) a n) (env ((□? (a n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  match
  "'(eval (match (-> (match (app = a 2) ...) <-) (#f) c-x) (env ((□? (a n)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  match
  "'(eval\n  (match (app = a 2) (#f) (_ (-> (match (let (n-mod-8) ...) ...) <-)))\n  (env ((□? (a n)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval\n  (match (let (n-mod-8) ...) (#f) (_ (-> (app #t) <-)))\n  (env ((□? (a n)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (a n)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval\n  (match (let (n-mod-8) ...) ((#f) (-> (app #f) <-)) _)\n  (env ((□? (a n)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (a n)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  let
  "'(eval (match (-> (let (n-mod-8) ...) <-) (#f) _) (env ((□? (a n)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval\n  (let (... () (n-mod-8 (-> (app modulo n 8) <-)) () ...) ...)\n  (env ((□? (a n)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  number
  "'(eval (app modulo n (-> 8 <-)) (env ((□? (a n)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app modulo (-> n <-) 8) (env ((□? (a n)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app (-> modulo <-) n 8) (env ((□? (a n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  match
  "'(eval\n  (let (n-mod-8) (-> (match (match (app = ...) ...) ...) <-))\n  (env ((□? (a n)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  number
  "'(eval\n  (match (match (app = n-mod-8 1) ...) (#f) (_ (-> 1 <-)))\n  (env ((□? (a n)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  match
  "'(eval\n  (match\n   (match (app = n-mod-8 1) ...)\n   ((#f) (-> (match (match (app = ...) ...) ...) <-))\n   _)\n  (env ((□? (a n)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  number
  "'(eval\n  (match (match (app = n-mod-8 3) ...) (#f) (_ (-> -1 <-)))\n  (env ((□? (a n)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval\n  (match (match (app = n-mod-8 3) ...) ((#f) (-> (app error \"no-match\") <-)) _)\n  (env ((□? (a n)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  string
  "'(eval (app error (-> \"no-match\" <-)) (env ((□? (a n)))))"
  (string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app (-> error <-) \"no-match\") (env ((□? (a n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  match
  "'(eval (match (-> (match (app = n-mod-8 3) ...) <-) (#f) _) (env ((□? (a n)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval (match (app = n-mod-8 3) (#f) (_ (-> (app #t) <-))) (env ((□? (a n)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (a n)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  match
  "'(eval\n  (match (app = n-mod-8 3) ((#f) (-> (match (app = n-mod-8 5) ...) <-)) _)\n  (env ((□? (a n)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval (match (app = n-mod-8 5) (#f) (_ (-> (app #t) <-))) (env ((□? (a n)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (a n)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval (match (app = n-mod-8 5) ((#f) (-> (app #f) <-)) _) (env ((□? (a n)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (a n)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval (match (-> (app = n-mod-8 5) <-) (#f) _) (env ((□? (a n)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  number
  "'(eval (app = n-mod-8 (-> 5 <-)) (env ((□? (a n)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app = (-> n-mod-8 <-) 5) (env ((□? (a n)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app (-> = <-) n-mod-8 5) (env ((□? (a n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval (match (-> (app = n-mod-8 3) <-) (#f) _) (env ((□? (a n)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  number
  "'(eval (app = n-mod-8 (-> 3 <-)) (env ((□? (a n)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app = (-> n-mod-8 <-) 3) (env ((□? (a n)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app (-> = <-) n-mod-8 3) (env ((□? (a n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  match
  "'(eval (match (-> (match (app = n-mod-8 1) ...) <-) (#f) _) (env ((□? (a n)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval (match (app = n-mod-8 1) (#f) (_ (-> (app #t) <-))) (env ((□? (a n)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (a n)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  match
  "'(eval\n  (match (app = n-mod-8 1) ((#f) (-> (match (app = n-mod-8 7) ...) <-)) _)\n  (env ((□? (a n)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval (match (app = n-mod-8 7) (#f) (_ (-> (app #t) <-))) (env ((□? (a n)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (a n)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval (match (app = n-mod-8 7) ((#f) (-> (app #f) <-)) _) (env ((□? (a n)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (a n)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval (match (-> (app = n-mod-8 7) <-) (#f) _) (env ((□? (a n)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  number
  "'(eval (app = n-mod-8 (-> 7 <-)) (env ((□? (a n)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app = (-> n-mod-8 <-) 7) (env ((□? (a n)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app (-> = <-) n-mod-8 7) (env ((□? (a n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval (match (-> (app = n-mod-8 1) <-) (#f) _) (env ((□? (a n)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  number
  "'(eval (app = n-mod-8 (-> 1 <-)) (env ((□? (a n)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app = (-> n-mod-8 <-) 1) (env ((□? (a n)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app (-> = <-) n-mod-8 1) (env ((□? (a n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval (match (app = a 2) ((#f) (-> (app #f) <-)) _) (env ((□? (a n)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (a n)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval (match (-> (app = a 2) <-) (#f) _) (env ((□? (a n)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  number
  "'(eval (app = a (-> 2 <-)) (env ((□? (a n)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app = (-> a <-) 2) (env ((□? (a n)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app (-> = <-) a 2) (env ((□? (a n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval\n  (match (-> (app not (app = (app gcd ...) 1)) <-) (#f) _)\n  (env ((□? (a n)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval (app not (-> (app = (app gcd a n) 1) <-)) (env ((□? (a n)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  number
  "'(eval (app = (app gcd a n) (-> 1 <-)) (env ((□? (a n)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval (app = (-> (app gcd a n) <-) 1) (env ((□? (a n)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app gcd a (-> n <-)) (env ((□? (a n)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app gcd (-> a <-) n) (env ((□? (a n)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app (-> gcd <-) a n) (env ((□? (a n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app (-> = <-) (app gcd a n) 1) (env ((□? (a n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app (-> not <-) (app = (app gcd a n) 1)) (env ((□? (a n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval (match (-> (app = a 1) <-) (#f) _) (env ((□? (a n)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  number
  "'(eval (app = a (-> 1 <-)) (env ((□? (a n)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app = (-> a <-) 1) (env ((□? (a n)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app (-> = <-) a 1) (env ((□? (a n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval (match (-> (app = n 1) <-) (#f) _) (env ((□? (a n)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  number
  "'(eval (app = n (-> 1 <-)) (env ((□? (a n)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app = (-> n <-) 1) (env ((□? (a n)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app (-> = <-) n 1) (env ((□? (a n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  lambda
  "'(eval\n  (letrec*\n   (... square (modulo-power (-> (λ (base exp n) ...) <-)) jacobi ...)\n   ...)\n  (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  match
  "'(eval\n  (λ (base exp n) (-> (match (app = exp 0) ...) <-))\n  (env ((□? (base exp n)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  number
  "'(eval (match (app = exp 0) (#f) (_ (-> 1 <-))) (env ((□? (base exp n)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  match
  "'(eval\n  (match (app = exp 0) ((#f) (-> (match (app odd? exp) ...) <-)) _)\n  (env ((□? (base exp n)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval\n  (match\n   (app odd? exp)\n   (#f)\n   (_ (-> (app modulo (app * base (app modulo-power ...)) n) <-)))\n  (env ((□? (base exp n)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval\n  (app modulo (app * base (app modulo-power base (app - ...) n)) (-> n <-))\n  (env ((□? (base exp n)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval\n  (app modulo (-> (app * base (app modulo-power base (app - ...) n)) <-) n)\n  (env ((□? (base exp n)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval\n  (app * base (-> (app modulo-power base (app - exp 1) n) <-))\n  (env ((□? (base exp n)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval\n  (app modulo-power base (app - exp 1) (-> n <-))\n  (env ((□? (base exp n)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval\n  (app modulo-power base (-> (app - exp 1) <-) n)\n  (env ((□? (base exp n)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  number
  "'(eval (app - exp (-> 1 <-)) (env ((□? (base exp n)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app - (-> exp <-) 1) (env ((□? (base exp n)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app (-> - <-) exp 1) (env ((□? (base exp n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval\n  (app modulo-power (-> base <-) (app - exp 1) n)\n  (env ((□? (base exp n)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval\n  (app (-> modulo-power <-) base (app - exp 1) n)\n  (env ((□? (base exp n)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval\n  (app * (-> base <-) (app modulo-power base (app - exp 1) n))\n  (env ((□? (base exp n)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval\n  (app (-> * <-) base (app modulo-power base (app - exp 1) n))\n  (env ((□? (base exp n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval\n  (app (-> modulo <-) (app * base (app modulo-power base (app - ...) n)) n)\n  (env ((□? (base exp n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval\n  (match\n   (app odd? exp)\n   ((#f) (-> (app modulo (app square (app modulo-power ...)) n) <-))\n   _)\n  (env ((□? (base exp n)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval\n  (app modulo (app square (app modulo-power base (app / ...) n)) (-> n <-))\n  (env ((□? (base exp n)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval\n  (app modulo (-> (app square (app modulo-power base (app / ...) n)) <-) n)\n  (env ((□? (base exp n)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval\n  (app square (-> (app modulo-power base (app / exp 2) n) <-))\n  (env ((□? (base exp n)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval\n  (app modulo-power base (app / exp 2) (-> n <-))\n  (env ((□? (base exp n)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval\n  (app modulo-power base (-> (app / exp 2) <-) n)\n  (env ((□? (base exp n)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  number
  "'(eval (app / exp (-> 2 <-)) (env ((□? (base exp n)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app / (-> exp <-) 2) (env ((□? (base exp n)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app (-> / <-) exp 2) (env ((□? (base exp n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval\n  (app modulo-power (-> base <-) (app / exp 2) n)\n  (env ((□? (base exp n)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval\n  (app (-> modulo-power <-) base (app / exp 2) n)\n  (env ((□? (base exp n)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval\n  (app (-> square <-) (app modulo-power base (app / exp 2) n))\n  (env ((□? (base exp n)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval\n  (app (-> modulo <-) (app square (app modulo-power base (app / ...) n)) n)\n  (env ((□? (base exp n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval (match (-> (app odd? exp) <-) (#f) _) (env ((□? (base exp n)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app odd? (-> exp <-)) (env ((□? (base exp n)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app (-> odd? <-) exp) (env ((□? (base exp n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval (match (-> (app = exp 0) <-) (#f) _) (env ((□? (base exp n)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  number
  "'(eval (app = exp (-> 0 <-)) (env ((□? (base exp n)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app = (-> exp <-) 0) (env ((□? (base exp n)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app (-> = <-) exp 0) (env ((□? (base exp n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  lambda
  "'(eval\n  (letrec* (... () (square (-> (λ (x) ...) <-)) modulo-power ...) ...)\n  (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval (λ (x) (-> (app * x x) <-)) (env ((□? (x)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app * x (-> x <-)) (env ((□? (x)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app * (-> x <-) x) (env ((□? (x)))))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app (-> * <-) x x) (env ((□? (x)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  let
  "'(eval (letrec* (square ... byte-size) (-> (let (_) ...) <-)) (env ()))"
  #f
  8
  8
  0
  0
  8
  0
  8
  1
  1
  8
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval\n  (let (... () (_ (-> (app display \"Generating prime...\") <-)) () ...) ...)\n  (env ()))"
  #f
  3
  3
  0
  0
  3
  0
  3
  1
  1
  3
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  string
  "'(eval (app display (-> \"Generating prime...\" <-)) (env ()))"
  (string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app (-> display <-) \"Generating prime...\") (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  let
  "'(eval (let (_) (-> (let (_) ...) <-)) (env ()))"
  #f
  7
  7
  0
  0
  7
  0
  7
  1
  1
  7
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval (let (... () (_ (-> (app newline) <-)) () ...) ...) (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app (-> newline <-)) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  let
  "'(eval (let (_) (-> (let (_) ...) <-)) (env ()))"
  #f
  6
  6
  0
  0
  6
  0
  6
  1
  1
  6
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval\n  (let (...\n        ()\n        (_\n         (->\n          (app\n           display\n           (app generate-solovay-strassen-prime byte-size iterations))\n          <-))\n        ()\n        ...)\n    ...)\n  (env ()))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval\n  (app\n   display\n   (-> (app generate-solovay-strassen-prime byte-size iterations) <-))\n  (env ()))"
  #f
  #f)
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval\n  (app generate-solovay-strassen-prime byte-size (-> iterations <-))\n  (env ()))"
  (number char string quoted constructor)
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval\n  (app generate-solovay-strassen-prime (-> byte-size <-) iterations)\n  (env ()))"
  (number char string quoted constructor)
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval\n  (app (-> generate-solovay-strassen-prime <-) byte-size iterations)\n  (env ()))"
  (lambda number char string quoted constructor)
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval\n  (app\n   (-> display <-)\n   (app generate-solovay-strassen-prime byte-size iterations))\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  let
  "'(eval (let (_) (-> (let (_) ...) <-)) (env ()))"
  #f
  5
  5
  0
  0
  5
  0
  5
  1
  1
  5
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval\n  (let (...\n        ()\n        (_\n         (-> (app display \" is prime with at least probability 1 - 1/2^\") <-))\n        ()\n        ...)\n    ...)\n  (env ()))"
  #f
  3
  3
  0
  0
  3
  0
  3
  1
  1
  3
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  string
  "'(eval\n  (app display (-> \" is prime with at least probability 1 - 1/2^\" <-))\n  (env ()))"
  (string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval\n  (app (-> display <-) \" is prime with at least probability 1 - 1/2^\")\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  let
  "'(eval (let (_) (-> (let (_) ...) <-)) (env ()))"
  #f
  4
  4
  0
  0
  4
  0
  4
  1
  1
  4
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval (let (... () (_ (-> (app display iterations) <-)) () ...) ...) (env ()))"
  #f
  4
  4
  0
  0
  4
  0
  4
  1
  1
  4
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app display (-> iterations <-)) (env ()))"
  (number char string quoted constructor)
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app (-> display <-) iterations) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  let
  "'(eval (let (_) (-> (let (_) ...) <-)) (env ()))"
  #f
  3
  3
  0
  0
  3
  0
  3
  1
  1
  3
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval (let (... () (_ (-> (app display \".\") <-)) () ...) ...) (env ()))"
  #f
  3
  3
  0
  0
  3
  0
  3
  1
  1
  3
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  string
  "'(eval (app display (-> \".\" <-)) (env ()))"
  (string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app (-> display <-) \".\") (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  app
  "'(eval (let (_) (-> (app newline) <-)) (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  solovay-strassen
  2
  5
  510
  ref-or-constructor
  "'(eval (app (-> newline <-)) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
