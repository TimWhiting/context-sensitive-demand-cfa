'(clean-cache
  deriv
  2
  1000
  257
  lettypes
  "'(eval ((top) lettypes (cons ... error) ...) (env ()))"
  #f
  927
  810
  91
  26
  752
  61
  813
  1
  202319/206976
  418
  #f
  2527/810
  (462 468 5))
'(clean-cache
  deriv
  2
  1000
  257
  letrec*
  "'(eval (lettypes cons ... error (letrec* (car ... deriv) ...)) (env ()))"
  #f
  926
  809
  91
  26
  751
  61
  812
  1
  201087/205744
  418
  #f
  2520/809
  (460 467 4))
'(clean-cache
  deriv
  2
  1000
  257
  lambda
  "'(eval (letrec* (... pair? (deriv (-> (λ (a) ...) <-)) () ...) ...) (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  match
  "'(eval (λ (a) (-> (match (app not (app pair? ...)) ...) <-)) (env ((□? (a)))))"
  #f
  #f)
'(clean-cache
  deriv
  2
  1000
  257
  match
  "'(eval\n  (match (app not (app pair? a)) (#f) (_ (-> (match (app eq? a 'x) ...) <-)))\n  (env ((□? (a)))))"
  #f
  950
  835
  89
  26
  765
  60
  825
  1
  439883/460768
  428
  #f
  519/167
  (483 490 4))
'(clean-cache
  deriv
  2
  1000
  257
  number
  "'(eval (match (app eq? a 'x) (#f) (_ (-> 1 <-))) (env ((□? (a)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  number
  "'(eval (match (app eq? a 'x) ((#f) (-> 0 <-)) _) (env ((□? (a)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  app
  "'(eval (match (-> (app eq? a 'x) <-) (#f) _) (env ((□? (a)))))"
  #f
  899
  784
  89
  26
  720
  60
  780
  1
  2143975/2241008
  394
  #f
  361/112
  (474 481 5))
'(clean-cache
  deriv
  2
  1000
  257
  quoted
  "'(eval (app eq? a (-> 'x <-)) (env ((□? (a)))))"
  (quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval (app eq? (-> a <-) 'x) (env ((□? (a)))))"
  #f
  848
  733
  89
  26
  675
  60
  735
  1
  122855/128128
  359
  #f
  2395/733
  (449 455 4))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval (app (-> eq? <-) a 'x) (env ((□? (a)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  match
  "'(eval\n  (match\n   (app not (app pair? a))\n   ((#f) (-> (match (app eq? (app car ...) '+) ...) <-))\n   _)\n  (env ((□? (a)))))"
  #f
  #f)
'(clean-cache
  deriv
  2
  1000
  257
  app
  "'(eval\n  (match\n   (app eq? (app car a) '+)\n   (#f)\n   (_ (-> (app cons '+ (app map deriv (app cdr ...))) <-)))\n  (env ((□? (a)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  app
  "'(eval (app cons '+ (-> (app map deriv (app cdr a)) <-)) (env ((□? (a)))))"
  #f
  890
  771
  89
  30
  690
  60
  750
  1
  11533243/12185481
  302
  #t
  2930/771
  (618 631 7))
'(clean-cache
  deriv
  2
  1000
  257
  app
  "'(eval (app map deriv (-> (app cdr a) <-)) (env ((□? (a)))))"
  #f
  857
  741
  89
  27
  675
  60
  735
  1
  60305979/62559728
  280
  #f
  2861/741
  (545 552 8))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval (app cdr (-> a <-)) (env ((□? (a)))))"
  #f
  848
  733
  89
  26
  675
  60
  735
  1
  521845/539308
  359
  #f
  2395/733
  (438 444 4))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval (app (-> cdr <-) a) (env ((□? (a)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval (app map (-> deriv <-) (app cdr a)) (env ((□? (a)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval (app (-> map <-) deriv (app cdr a)) (env ((□? (a)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  quoted
  "'(eval (app cons (-> '+ <-) (app map deriv (app cdr a))) (env ((□? (a)))))"
  (quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval (app (-> cons <-) '+ (app map deriv (app cdr a))) (env ((□? (a)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  match
  "'(eval\n  (match\n   (app eq? (app car a) '+)\n   ((#f) (-> (match (app eq? (app car ...) '-) ...) <-))\n   _)\n  (env ((□? (a)))))"
  #f
  #f)
'(clean-cache
  deriv
  2
  1000
  257
  app
  "'(eval\n  (match\n   (app eq? (app car a) '-)\n   (#f)\n   (_ (-> (app cons '- (app map deriv (app cdr ...))) <-)))\n  (env ((□? (a)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  app
  "'(eval (app cons '- (-> (app map deriv (app cdr a)) <-)) (env ((□? (a)))))"
  #f
  884
  766
  89
  29
  690
  60
  750
  1
  4254360079/4484257008
  328
  #t
  2779/766
  (562 573 7))
'(clean-cache
  deriv
  2
  1000
  257
  app
  "'(eval (app map deriv (-> (app cdr a) <-)) (env ((□? (a)))))"
  #f
  856
  740
  89
  27
  675
  60
  735
  1
  30169737/31279864
  307
  #f
  2723/740
  (525 536 5))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval (app cdr (-> a <-)) (env ((□? (a)))))"
  #f
  848
  733
  89
  26
  675
  60
  735
  1
  521845/539308
  359
  #f
  2395/733
  (440 446 5))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval (app (-> cdr <-) a) (env ((□? (a)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval (app map (-> deriv <-) (app cdr a)) (env ((□? (a)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval (app (-> map <-) deriv (app cdr a)) (env ((□? (a)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  quoted
  "'(eval (app cons (-> '- <-) (app map deriv (app cdr a))) (env ((□? (a)))))"
  (quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval (app (-> cons <-) '- (app map deriv (app cdr a))) (env ((□? (a)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  match
  "'(eval\n  (match\n   (app eq? (app car a) '-)\n   ((#f) (-> (match (app eq? (app car ...) '*) ...) <-))\n   _)\n  (env ((□? (a)))))"
  #f
  #f)
'(clean-cache
  deriv
  2
  1000
  257
  app
  "'(eval\n  (match\n   (app eq? (app car a) '*)\n   (#f)\n   (_ (-> (app cons '* (app cons a (app cons ...))) <-)))\n  (env ((□? (a)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  app
  "'(eval\n  (app cons '* (-> (app cons a (app cons (app cons ...) (app nil ...))) <-))\n  (env ((□? (a)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  app
  "'(eval\n  (app cons a (-> (app cons (app cons '+ (app map ...)) (app nil)) <-))\n  (env ((□? (a)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  app
  "'(eval\n  (app\n   cons\n   (app cons '+ (app map (λ (a) ...) (app cdr ...)))\n   (-> (app nil) <-))\n  (env ((□? (a)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval (app (-> nil <-)) (env ((□? (a)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  app
  "'(eval\n  (app\n   cons\n   (-> (app cons '+ (app map (λ (a) ...) (app cdr ...))) <-)\n   (app nil))\n  (env ((□? (a)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  app
  "'(eval\n  (app cons '+ (-> (app map (λ (a) ...) (app cdr a)) <-))\n  (env ((□? (a)))))"
  #f
  878
  761
  89
  28
  690
  60
  750
  1
  92711935/97483848
  354
  #t
  2628/761
  (497 505 5))
'(clean-cache
  deriv
  2
  1000
  257
  app
  "'(eval (app map (λ (a) ...) (-> (app cdr a) <-)) (env ((□? (a)))))"
  #f
  855
  739
  89
  27
  675
  60
  735
  1
  60372969/62559728
  334
  #f
  2585/739
  (469 478 5))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval (app cdr (-> a <-)) (env ((□? (a)))))"
  #f
  848
  733
  89
  26
  675
  60
  735
  1
  521845/539308
  359
  #f
  2395/733
  (425 432 4))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval (app (-> cdr <-) a) (env ((□? (a)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  lambda
  "'(eval (app map (-> (λ (a) ...) <-) (app cdr a)) (env ((□? (a)))))"
  (lambda number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  app
  "'(eval\n  (λ (a) (-> (app cons '/ (app cons (app deriv ...) (app cons ...))) <-))\n  (env ((□? (a)) (□? (a)))))"
  #f
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  app
  "'(eval\n  (app cons '/ (-> (app cons (app deriv a) (app cons a (app nil ...))) <-))\n  (env ((□? (a)) (□? (a)))))"
  #f
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  app
  "'(eval\n  (app cons (app deriv a) (-> (app cons a (app nil)) <-))\n  (env ((□? (a)) (□? (a)))))"
  #f
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  app
  "'(eval (app cons a (-> (app nil) <-)) (env ((□? (a)) (□? (a)))))"
  #f
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval (app (-> nil <-)) (env ((□? (a)) (□? (a)))))"
  #t
  3
  1
  0
  2
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval (app cons (-> a <-) (app nil)) (env ((□? (a)) (□? (a)))))"
  #f
  863
  744
  91
  28
  675
  60
  735
  1
  451715843/473753280
  336
  #f
  2599/744
  (477 484 6))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval (app (-> cons <-) a (app nil)) (env ((□? (a)) (□? (a)))))"
  #t
  3
  1
  0
  2
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  app
  "'(eval\n  (app cons (-> (app deriv a) <-) (app cons a (app nil)))\n  (env ((□? (a)) (□? (a)))))"
  #f
  955
  838
  91
  26
  748
  61
  809
  1
  571229/613536
  416
  #f
  2745/838
  (481 488 6))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval (app deriv (-> a <-)) (env ((□? (a)) (□? (a)))))"
  #f
  863
  744
  91
  28
  675
  60
  735
  1
  451715843/469197960
  336
  #f
  2599/744
  (497 505 8))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval (app (-> deriv <-) a) (env ((□? (a)) (□? (a)))))"
  (lambda number char string quoted constructor)
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval\n  (app (-> cons <-) (app deriv a) (app cons a (app nil)))\n  (env ((□? (a)) (□? (a)))))"
  #t
  3
  1
  0
  2
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  quoted
  "'(eval\n  (app cons (-> '/ <-) (app cons (app deriv a) (app cons a (app nil ...))))\n  (env ((□? (a)) (□? (a)))))"
  (quoted constructor)
  3
  1
  0
  2
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval\n  (app (-> cons <-) '/ (app cons (app deriv a) (app cons a (app nil ...))))\n  (env ((□? (a)) (□? (a)))))"
  #t
  3
  1
  0
  2
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval (app (-> map <-) (λ (a) ...) (app cdr a)) (env ((□? (a)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  quoted
  "'(eval\n  (app cons (-> '+ <-) (app map (λ (a) ...) (app cdr a)))\n  (env ((□? (a)))))"
  (quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval\n  (app (-> cons <-) '+ (app map (λ (a) ...) (app cdr a)))\n  (env ((□? (a)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval\n  (app\n   (-> cons <-)\n   (app cons '+ (app map (λ (a) ...) (app cdr ...)))\n   (app nil))\n  (env ((□? (a)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval\n  (app cons (-> a <-) (app cons (app cons '+ (app map ...)) (app nil)))\n  (env ((□? (a)))))"
  #f
  848
  733
  89
  26
  675
  60
  735
  1
  122855/128128
  359
  #f
  2395/733
  (420 426 5))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval\n  (app (-> cons <-) a (app cons (app cons '+ (app map ...)) (app nil)))\n  (env ((□? (a)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  quoted
  "'(eval\n  (app cons (-> '* <-) (app cons a (app cons (app cons ...) (app nil ...))))\n  (env ((□? (a)))))"
  (quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval\n  (app (-> cons <-) '* (app cons a (app cons (app cons ...) (app nil ...))))\n  (env ((□? (a)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  match
  "'(eval\n  (match\n   (app eq? (app car a) '*)\n   ((#f) (-> (match (app eq? (app car ...) '/) ...) <-))\n   _)\n  (env ((□? (a)))))"
  #f
  #f)
'(clean-cache
  deriv
  2
  1000
  257
  app
  "'(eval\n  (match\n   (app eq? (app car a) '/)\n   (#f)\n   (_ (-> (app cons '- (app cons (app cons ...) (app cons ...))) <-)))\n  (env ((□? (a)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  app
  "'(eval\n  (app\n   cons\n   '-\n   (->\n    (app\n     cons\n     (app cons '/ (app cons ...))\n     (app cons (app cons ...) (app nil ...)))\n    <-))\n  (env ((□? (a)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  app
  "'(eval\n  (app\n   cons\n   (app cons '/ (app cons (app deriv ...) (app cons ...)))\n   (-> (app cons (app cons '/ (app cons ...)) (app nil)) <-))\n  (env ((□? (a)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  app
  "'(eval\n  (app\n   cons\n   (app cons '/ (app cons (app cadr ...) (app cons ...)))\n   (-> (app nil) <-))\n  (env ((□? (a)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval (app (-> nil <-)) (env ((□? (a)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  app
  "'(eval\n  (app\n   cons\n   (-> (app cons '/ (app cons (app cadr ...) (app cons ...))) <-)\n   (app nil))\n  (env ((□? (a)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  app
  "'(eval\n  (app\n   cons\n   '/\n   (-> (app cons (app cadr a) (app cons (app cons ...) (app nil ...))) <-))\n  (env ((□? (a)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  app
  "'(eval\n  (app\n   cons\n   (app cadr a)\n   (-> (app cons (app cons '* (app cons ...)) (app nil)) <-))\n  (env ((□? (a)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  app
  "'(eval\n  (app\n   cons\n   (app cons '* (app cons (app caddr ...) (app cons ...)))\n   (-> (app nil) <-))\n  (env ((□? (a)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval (app (-> nil <-)) (env ((□? (a)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  app
  "'(eval\n  (app\n   cons\n   (-> (app cons '* (app cons (app caddr ...) (app cons ...))) <-)\n   (app nil))\n  (env ((□? (a)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  app
  "'(eval\n  (app\n   cons\n   '*\n   (-> (app cons (app caddr a) (app cons (app caddr ...) (app cons ...))) <-))\n  (env ((□? (a)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  app
  "'(eval\n  (app\n   cons\n   (app caddr a)\n   (-> (app cons (app caddr a) (app cons (app deriv ...) (app nil ...))) <-))\n  (env ((□? (a)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  app
  "'(eval\n  (app\n   cons\n   (app caddr a)\n   (-> (app cons (app deriv (app caddr ...)) (app nil)) <-))\n  (env ((□? (a)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  app
  "'(eval (app cons (app deriv (app caddr a)) (-> (app nil) <-)) (env ((□? (a)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval (app (-> nil <-)) (env ((□? (a)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  app
  "'(eval (app cons (-> (app deriv (app caddr a)) <-) (app nil)) (env ((□? (a)))))"
  #f
  #f)
'(clean-cache
  deriv
  2
  1000
  257
  app
  "'(eval (app deriv (-> (app caddr a) <-)) (env ((□? (a)))))"
  #f
  881
  762
  89
  30
  675
  60
  735
  1
  7698073/8089620
  370
  #f
  2657/762
  (540 549 5))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval (app caddr (-> a <-)) (env ((□? (a)))))"
  #f
  848
  733
  89
  26
  675
  60
  735
  1
  521845/539308
  359
  #f
  2395/733
  (417 424 4))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval (app (-> caddr <-) a) (env ((□? (a)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval (app (-> deriv <-) (app caddr a)) (env ((□? (a)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval (app (-> cons <-) (app deriv (app caddr a)) (app nil)) (env ((□? (a)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  app
  "'(eval\n  (app\n   cons\n   (-> (app caddr a) <-)\n   (app cons (app deriv (app caddr ...)) (app nil)))\n  (env ((□? (a)))))"
  #f
  916
  797
  89
  30
  708
  60
  768
  1
  22510947/23823800
  391
  #f
  2734/797
  (523 532 5))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval (app caddr (-> a <-)) (env ((□? (a)))))"
  #f
  848
  733
  89
  26
  675
  60
  735
  1
  521845/539308
  359
  #f
  2395/733
  (418 425 4))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval (app (-> caddr <-) a) (env ((□? (a)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval\n  (app\n   (-> cons <-)\n   (app caddr a)\n   (app cons (app deriv (app caddr ...)) (app nil)))\n  (env ((□? (a)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  app
  "'(eval\n  (app\n   cons\n   (-> (app caddr a) <-)\n   (app cons (app caddr a) (app cons (app deriv ...) (app nil ...))))\n  (env ((□? (a)))))"
  #f
  916
  797
  89
  30
  708
  60
  768
  1
  22510947/23823800
  391
  #f
  2734/797
  (522 531 6))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval (app caddr (-> a <-)) (env ((□? (a)))))"
  #f
  848
  733
  89
  26
  675
  60
  735
  1
  521845/539308
  359
  #f
  2395/733
  (417 424 4))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval (app (-> caddr <-) a) (env ((□? (a)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval\n  (app\n   (-> cons <-)\n   (app caddr a)\n   (app cons (app caddr a) (app cons (app deriv ...) (app nil ...))))\n  (env ((□? (a)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  quoted
  "'(eval\n  (app\n   cons\n   (-> '* <-)\n   (app cons (app caddr a) (app cons (app caddr ...) (app cons ...))))\n  (env ((□? (a)))))"
  (quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval\n  (app\n   (-> cons <-)\n   '*\n   (app cons (app caddr a) (app cons (app caddr ...) (app cons ...))))\n  (env ((□? (a)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval\n  (app\n   (-> cons <-)\n   (app cons '* (app cons (app caddr ...) (app cons ...)))\n   (app nil))\n  (env ((□? (a)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  app
  "'(eval\n  (app\n   cons\n   (-> (app cadr a) <-)\n   (app cons (app cons '* (app cons ...)) (app nil)))\n  (env ((□? (a)))))"
  #f
  900
  783
  89
  28
  708
  60
  768
  1
  10174861/10720710
  387
  #f
  2596/783
  (453 460 4))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval (app cadr (-> a <-)) (env ((□? (a)))))"
  #f
  848
  733
  89
  26
  675
  60
  735
  1
  521845/539308
  359
  #f
  2395/733
  (421 428 4))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval (app (-> cadr <-) a) (env ((□? (a)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval\n  (app\n   (-> cons <-)\n   (app cadr a)\n   (app cons (app cons '* (app cons ...)) (app nil)))\n  (env ((□? (a)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  quoted
  "'(eval\n  (app\n   cons\n   (-> '/ <-)\n   (app cons (app cadr a) (app cons (app cons ...) (app nil ...))))\n  (env ((□? (a)))))"
  (quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval\n  (app\n   (-> cons <-)\n   '/\n   (app cons (app cadr a) (app cons (app cons ...) (app nil ...))))\n  (env ((□? (a)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval\n  (app\n   (-> cons <-)\n   (app cons '/ (app cons (app cadr ...) (app cons ...)))\n   (app nil))\n  (env ((□? (a)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  app
  "'(eval\n  (app\n   cons\n   (-> (app cons '/ (app cons (app deriv ...) (app cons ...))) <-)\n   (app cons (app cons '/ (app cons ...)) (app nil)))\n  (env ((□? (a)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  app
  "'(eval\n  (app\n   cons\n   '/\n   (->\n    (app\n     cons\n     (app deriv (app cadr ...))\n     (app cons (app caddr ...) (app nil ...)))\n    <-))\n  (env ((□? (a)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  app
  "'(eval\n  (app\n   cons\n   (app deriv (app cadr a))\n   (-> (app cons (app caddr a) (app nil)) <-))\n  (env ((□? (a)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  app
  "'(eval (app cons (app caddr a) (-> (app nil) <-)) (env ((□? (a)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval (app (-> nil <-)) (env ((□? (a)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  app
  "'(eval (app cons (-> (app caddr a) <-) (app nil)) (env ((□? (a)))))"
  #f
  916
  797
  89
  30
  708
  60
  768
  1
  22510947/23823800
  391
  #f
  2734/797
  (518 525 5))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval (app caddr (-> a <-)) (env ((□? (a)))))"
  #f
  848
  733
  89
  26
  675
  60
  735
  1
  521845/539308
  359
  #f
  2395/733
  (413 419 4))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval (app (-> caddr <-) a) (env ((□? (a)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval (app (-> cons <-) (app caddr a) (app nil)) (env ((□? (a)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  app
  "'(eval\n  (app\n   cons\n   (-> (app deriv (app cadr a)) <-)\n   (app cons (app caddr a) (app nil)))\n  (env ((□? (a)))))"
  #f
  #f)
'(clean-cache
  deriv
  2
  1000
  257
  app
  "'(eval (app deriv (-> (app cadr a) <-)) (env ((□? (a)))))"
  #f
  865
  748
  89
  28
  675
  60
  735
  1
  3655429/3824184
  366
  #f
  229/68
  (459 467 5))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval (app cadr (-> a <-)) (env ((□? (a)))))"
  #f
  848
  733
  89
  26
  675
  60
  735
  1
  521845/539308
  359
  #f
  2395/733
  (407 414 4))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval (app (-> cadr <-) a) (env ((□? (a)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval (app (-> deriv <-) (app cadr a)) (env ((□? (a)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval\n  (app\n   (-> cons <-)\n   (app deriv (app cadr a))\n   (app cons (app caddr a) (app nil)))\n  (env ((□? (a)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  quoted
  "'(eval\n  (app\n   cons\n   (-> '/ <-)\n   (app\n    cons\n    (app deriv (app cadr ...))\n    (app cons (app caddr ...) (app nil ...))))\n  (env ((□? (a)))))"
  (quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval\n  (app\n   (-> cons <-)\n   '/\n   (app\n    cons\n    (app deriv (app cadr ...))\n    (app cons (app caddr ...) (app nil ...))))\n  (env ((□? (a)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval\n  (app\n   (-> cons <-)\n   (app cons '/ (app cons (app deriv ...) (app cons ...)))\n   (app cons (app cons '/ (app cons ...)) (app nil)))\n  (env ((□? (a)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  quoted
  "'(eval\n  (app\n   cons\n   (-> '- <-)\n   (app\n    cons\n    (app cons '/ (app cons ...))\n    (app cons (app cons ...) (app nil ...))))\n  (env ((□? (a)))))"
  (quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval\n  (app\n   (-> cons <-)\n   '-\n   (app\n    cons\n    (app cons '/ (app cons ...))\n    (app cons (app cons ...) (app nil ...))))\n  (env ((□? (a)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  app
  "'(eval\n  (match\n   (app eq? (app car a) '/)\n   ((#f) (-> (app error (app #f) \"No derivation method available\") <-))\n   _)\n  (env ((□? (a)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  string
  "'(eval\n  (app error (app #f) (-> \"No derivation method available\" <-))\n  (env ((□? (a)))))"
  (string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  app
  "'(eval\n  (app error (-> (app #f) <-) \"No derivation method available\")\n  (env ((□? (a)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (a)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval\n  (app (-> error <-) (app #f) \"No derivation method available\")\n  (env ((□? (a)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  app
  "'(eval (match (-> (app eq? (app car a) '/) <-) (#f) _) (env ((□? (a)))))"
  #f
  952
  836
  89
  27
  765
  60
  825
  1
  2173081/2282896
  411
  #f
  1369/418
  (437 444 4))
'(clean-cache
  deriv
  2
  1000
  257
  quoted
  "'(eval (app eq? (app car a) (-> '/ <-)) (env ((□? (a)))))"
  (quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  app
  "'(eval (app eq? (-> (app car a) <-) '/) (env ((□? (a)))))"
  #f
  901
  785
  89
  27
  720
  60
  780
  1
  2117641/2220064
  377
  #f
  2623/785
  (430 438 6))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval (app car (-> a <-)) (env ((□? (a)))))"
  #f
  848
  733
  89
  26
  675
  60
  735
  1
  122855/128128
  359
  #f
  2395/733
  (392 397 4))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval (app (-> car <-) a) (env ((□? (a)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval (app (-> eq? <-) (app car a) '/) (env ((□? (a)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  app
  "'(eval (match (-> (app eq? (app car a) '*) <-) (#f) _) (env ((□? (a)))))"
  #f
  952
  836
  89
  27
  765
  60
  825
  1
  2173081/2282896
  411
  #f
  1369/418
  (436 443 6))
'(clean-cache
  deriv
  2
  1000
  257
  quoted
  "'(eval (app eq? (app car a) (-> '* <-)) (env ((□? (a)))))"
  (quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  app
  "'(eval (app eq? (-> (app car a) <-) '*) (env ((□? (a)))))"
  #f
  901
  785
  89
  27
  720
  60
  780
  1
  2117641/2220064
  377
  #f
  2623/785
  (426 432 4))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval (app car (-> a <-)) (env ((□? (a)))))"
  #f
  848
  733
  89
  26
  675
  60
  735
  1
  122855/128128
  359
  #f
  2395/733
  (393 399 4))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval (app (-> car <-) a) (env ((□? (a)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval (app (-> eq? <-) (app car a) '*) (env ((□? (a)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  app
  "'(eval (match (-> (app eq? (app car a) '-) <-) (#f) _) (env ((□? (a)))))"
  #f
  952
  836
  89
  27
  765
  60
  825
  1
  2173081/2282896
  411
  #f
  1369/418
  (436 442 5))
'(clean-cache
  deriv
  2
  1000
  257
  quoted
  "'(eval (app eq? (app car a) (-> '- <-)) (env ((□? (a)))))"
  (quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  app
  "'(eval (app eq? (-> (app car a) <-) '-) (env ((□? (a)))))"
  #f
  901
  785
  89
  27
  720
  60
  780
  1
  2117641/2220064
  377
  #f
  2623/785
  (419 426 4))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval (app car (-> a <-)) (env ((□? (a)))))"
  #f
  848
  733
  89
  26
  675
  60
  735
  1
  122855/128128
  359
  #f
  2395/733
  (379 385 5))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval (app (-> car <-) a) (env ((□? (a)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval (app (-> eq? <-) (app car a) '-) (env ((□? (a)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  app
  "'(eval (match (-> (app eq? (app car a) '+) <-) (#f) _) (env ((□? (a)))))"
  #f
  952
  836
  89
  27
  765
  60
  825
  1
  2173081/2282896
  411
  #f
  1369/418
  (419 426 4))
'(clean-cache
  deriv
  2
  1000
  257
  quoted
  "'(eval (app eq? (app car a) (-> '+ <-)) (env ((□? (a)))))"
  (quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  app
  "'(eval (app eq? (-> (app car a) <-) '+) (env ((□? (a)))))"
  #f
  901
  785
  89
  27
  720
  60
  780
  1
  2117641/2220064
  377
  #f
  2623/785
  (410 416 5))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval (app car (-> a <-)) (env ((□? (a)))))"
  #f
  848
  733
  89
  26
  675
  60
  735
  1
  122855/128128
  359
  #f
  2395/733
  (381 387 4))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval (app (-> car <-) a) (env ((□? (a)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval (app (-> eq? <-) (app car a) '+) (env ((□? (a)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  app
  "'(eval (match (-> (app not (app pair? a)) <-) (#f) _) (env ((□? (a)))))"
  #f
  958
  840
  91
  27
  768
  61
  829
  1
  776669/816816
  421
  #f
  2663/840
  (415 422 6))
'(clean-cache
  deriv
  2
  1000
  257
  app
  "'(eval (app not (-> (app pair? a) <-)) (env ((□? (a)))))"
  #f
  922
  804
  91
  27
  736
  61
  797
  1
  2251159/2366672
  402
  #f
  435/134
  (408 414 4))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval (app pair? (-> a <-)) (env ((□? (a)))))"
  #f
  848
  733
  89
  26
  675
  60
  735
  1
  122855/128128
  359
  #f
  2395/733
  (382 389 5))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval (app (-> pair? <-) a) (env ((□? (a)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval (app (-> not <-) (app pair? a)) (env ((□? (a)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  lambda
  "'(eval\n  (letrec* (... map (pair? (-> (λ (pair?-v) ...) <-)) deriv ...) ...)\n  (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  match
  "'(eval (λ (pair?-v) (-> (match pair?-v ...) <-)) (env ((□? (pair?-v)))))"
  #f
  907
  788
  91
  28
  715
  61
  776
  1
  654077/691152
  391
  #f
  650/197
  (448 455 4))
'(clean-cache
  deriv
  2
  1000
  257
  app
  "'(eval\n  (match pair?-v (cons pair?-c pair?-d) (_ (-> (app #f) <-)))\n  (env ((□? (pair?-v)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (pair?-v)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  app
  "'(eval\n  (match pair?-v ((cons pair?-c pair?-d) (-> (app #t) <-)) _)\n  (env ((□? (pair?-v)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (pair?-v)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval (match (-> pair?-v <-) (cons pair?-c pair?-d) _) (env ((□? (pair?-v)))))"
  #f
  874
  755
  91
  28
  690
  61
  751
  1
  210047/219912
  365
  #f
  2494/755
  (441 448 6))
'(clean-cache
  deriv
  2
  1000
  257
  lambda
  "'(eval\n  (letrec* (... caddr (map (-> (λ (map-f map-l) ...) <-)) pair? ...) ...)\n  (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  match
  "'(eval (λ (map-f map-l) (-> (match map-l ...) <-)) (env ((□? (map-f map-l)))))"
  #f
  945
  826
  89
  30
  736
  60
  796
  1
  1425584201/1508721984
  394
  #f
  1411/413
  (493 501 5))
'(clean-cache
  deriv
  2
  1000
  257
  app
  "'(eval\n  (match map-l (cons map-c map-d) ((nil) (-> (app nil) <-)))\n  (env ((□? (map-f map-l)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval (app (-> nil <-)) (env ((□? (map-f map-l)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  app
  "'(eval\n  (match\n   map-l\n   ((cons map-c map-d)\n    (-> (app cons (app map-f map-c) (app map map-f map-d)) <-))\n   (nil))\n  (env ((□? (map-f map-l)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  app
  "'(eval\n  (app cons (app map-f map-c) (-> (app map map-f map-d) <-))\n  (env ((□? (map-f map-l)))))"
  #f
  885
  768
  89
  28
  695
  60
  755
  1
  943689631/993059760
  355
  #f
  2635/768
  (428 435 5))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval (app map map-f (-> map-d <-)) (env ((□? (map-f map-l)))))"
  #f
  871
  752
  89
  30
  675
  60
  735
  1
  44987443/46919796
  302
  #f
  349/94
  (549 558 8))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval (app map (-> map-f <-) map-d) (env ((□? (map-f map-l)))))"
  #f
  24
  13
  5
  6
  5
  1
  6
  1
  13/45
  7
  #f
  19/13
  (4 4 0))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval (app (-> map <-) map-f map-d) (env ((□? (map-f map-l)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  app
  "'(eval\n  (app cons (-> (app map-f map-c) <-) (app map map-f map-d))\n  (env ((□? (map-f map-l)))))"
  #f
  #f)
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval (app map-f (-> map-c <-)) (env ((□? (map-f map-l)))))"
  #f
  869
  750
  89
  30
  675
  60
  735
  1
  900934583/938395920
  318
  #f
  899/250
  (478 486 5))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval (app (-> map-f <-) map-c) (env ((□? (map-f map-l)))))"
  #f
  25
  14
  5
  6
  5
  1
  6
  1
  13/54
  7
  #f
  3/2
  (4 5 0))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval\n  (app (-> cons <-) (app map-f map-c) (app map map-f map-d))\n  (env ((□? (map-f map-l)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval\n  (match (-> map-l <-) (cons map-c map-d) (nil))\n  (env ((□? (map-f map-l)))))"
  #f
  868
  749
  89
  30
  675
  60
  735
  1
  180278023/187679184
  318
  #f
  2685/749
  (464 471 5))
'(clean-cache
  deriv
  2
  1000
  257
  lambda
  "'(eval\n  (letrec* (... cadr (caddr (-> (λ (cadr-v) ...) <-)) map ...) ...)\n  (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  app
  "'(eval\n  (λ (cadr-v) (-> (app car (app cdr (app cdr ...))) <-))\n  (env ((□? (cadr-v)))))"
  #f
  929
  809
  89
  31
  714
  60
  774
  1
  15343159/16179240
  388
  #f
  2791/809
  (513 522 6))
'(clean-cache
  deriv
  2
  1000
  257
  app
  "'(eval (app car (-> (app cdr (app cdr cadr-v)) <-)) (env ((□? (cadr-v)))))"
  #f
  877
  758
  89
  30
  675
  60
  735
  1
  5155277/5393080
  368
  #f
  2647/758
  (486 493 5))
'(clean-cache
  deriv
  2
  1000
  257
  app
  "'(eval (app cdr (-> (app cdr cadr-v) <-)) (env ((□? (cadr-v)))))"
  #f
  826
  708
  89
  29
  636
  60
  696
  1
  15487523/16179240
  349
  #f
  626/177
  (456 464 5))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval (app cdr (-> cadr-v <-)) (env ((□? (cadr-v)))))"
  #f
  773
  656
  89
  28
  597
  60
  657
  1
  15566063/16179240
  328
  #f
  2161/656
  (410 417 4))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval (app (-> cdr <-) cadr-v) (env ((□? (cadr-v)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval (app (-> cdr <-) (app cdr cadr-v)) (env ((□? (cadr-v)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval (app (-> car <-) (app cdr (app cdr cadr-v))) (env ((□? (cadr-v)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  lambda
  "'(eval\n  (letrec* (... cdr (cadr (-> (λ (cadr-v) ...) <-)) caddr ...) ...)\n  (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  app
  "'(eval (λ (cadr-v) (-> (app car (app cdr cadr-v)) <-)) (env ((□? (cadr-v)))))"
  #f
  883
  765
  89
  29
  688
  60
  748
  1
  605223/637364
  372
  #f
  2569/765
  (430 437 4))
'(clean-cache
  deriv
  2
  1000
  257
  app
  "'(eval (app car (-> (app cdr cadr-v) <-)) (env ((□? (cadr-v)))))"
  #f
  861
  744
  89
  28
  675
  60
  735
  1
  917975/956046
  364
  #f
  2509/744
  (422 428 5))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval (app cdr (-> cadr-v <-)) (env ((□? (cadr-v)))))"
  #f
  839
  723
  89
  27
  662
  60
  722
  1
  87767/91052
  356
  #f
  2377/723
  (425 431 5))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval (app (-> cdr <-) cadr-v) (env ((□? (cadr-v)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval (app (-> car <-) (app cdr cadr-v)) (env ((□? (cadr-v)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  lambda
  "'(eval (letrec* (... car (cdr (-> (λ (cdr-v) ...) <-)) cadr ...) ...) (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  match
  "'(eval (λ (cdr-v) (-> (match cdr-v ...) <-)) (env ((□? (cdr-v)))))"
  #f
  843
  723
  89
  31
  651
  60
  711
  1
  1858907/1933104
  261
  #f
  2932/723
  (599 609 7))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval (match cdr-v ((cons cdr-c cdr-d) (-> cdr-d <-))) (env ((□? (cdr-v)))))"
  #f
  858
  738
  89
  31
  668
  60
  728
  1
  44085791/45890208
  277
  #f
  490/123
  (658 670 8))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval (match (-> cdr-v <-) (cons cdr-c cdr-d)) (env ((□? (cdr-v)))))"
  #f
  852
  732
  89
  31
  667
  60
  727
  1
  11037245/11472552
  277
  #f
  47/12
  (534 543 5))
'(clean-cache
  deriv
  2
  1000
  257
  lambda
  "'(eval (letrec* (... () (car (-> (λ (car-v) ...) <-)) cdr ...) ...) (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  match
  "'(eval (λ (car-v) (-> (match car-v ...) <-)) (env ((□? (car-v)))))"
  #f
  #f)
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval (match car-v ((cons car-c car-d) (-> car-c <-))) (env ((□? (car-v)))))"
  #f
  1007
  881
  89
  37
  779
  60
  839
  1
  3191983/3361512
  372
  #f
  3484/881
  (699 711 7))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval (match (-> car-v <-) (cons car-c car-d)) (env ((□? (car-v)))))"
  #f
  976
  850
  89
  37
  755
  60
  815
  1
  3198647/3361512
  372
  #f
  1568/425
  (626 637 7))
'(clean-cache
  deriv
  2
  1000
  257
  app
  "'(eval\n  (letrec* (car ... deriv) (-> (app deriv (app cons '+ (app cons ...))) <-))\n  (env ()))"
  #f
  925
  808
  91
  26
  750
  61
  811
  1
  199855/204512
  418
  #f
  2513/808
  (388 394 4))
'(clean-cache
  deriv
  2
  1000
  257
  app
  "'(eval\n  (app deriv (-> (app cons '+ (app cons (app cons ...) (app cons ...))) <-))\n  (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  app
  "'(eval\n  (app\n   cons\n   '+\n   (->\n    (app\n     cons\n     (app cons '* (app cons ...))\n     (app cons (app cons ...) (app cons ...)))\n    <-))\n  (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  app
  "'(eval\n  (app\n   cons\n   (app cons '* (app cons 3 (app cons ...)))\n   (->\n    (app\n     cons\n     (app cons '* (app cons ...))\n     (app cons (app cons ...) (app cons ...)))\n    <-))\n  (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  app
  "'(eval\n  (app\n   cons\n   (app cons '* (app cons 'a (app cons ...)))\n   (-> (app cons (app cons '* (app cons ...)) (app cons 5 (app nil ...))) <-))\n  (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  app
  "'(eval\n  (app\n   cons\n   (app cons '* (app cons 'b (app cons ...)))\n   (-> (app cons 5 (app nil)) <-))\n  (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  app
  "'(eval (app cons 5 (-> (app nil) <-)) (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval (app (-> nil <-)) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  number
  "'(eval (app cons (-> 5 <-) (app nil)) (env ()))"
  (number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval (app (-> cons <-) 5 (app nil)) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  app
  "'(eval\n  (app\n   cons\n   (-> (app cons '* (app cons 'b (app cons ...))) <-)\n   (app cons 5 (app nil)))\n  (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  app
  "'(eval\n  (app cons '* (-> (app cons 'b (app cons 'x (app nil ...))) <-))\n  (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  app
  "'(eval (app cons 'b (-> (app cons 'x (app nil)) <-)) (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  app
  "'(eval (app cons 'x (-> (app nil) <-)) (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval (app (-> nil <-)) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  quoted
  "'(eval (app cons (-> 'x <-) (app nil)) (env ()))"
  (quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval (app (-> cons <-) 'x (app nil)) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  quoted
  "'(eval (app cons (-> 'b <-) (app cons 'x (app nil))) (env ()))"
  (quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval (app (-> cons <-) 'b (app cons 'x (app nil))) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  quoted
  "'(eval\n  (app cons (-> '* <-) (app cons 'b (app cons 'x (app nil ...))))\n  (env ()))"
  (quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval\n  (app (-> cons <-) '* (app cons 'b (app cons 'x (app nil ...))))\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval\n  (app\n   (-> cons <-)\n   (app cons '* (app cons 'b (app cons ...)))\n   (app cons 5 (app nil)))\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  app
  "'(eval\n  (app\n   cons\n   (-> (app cons '* (app cons 'a (app cons ...))) <-)\n   (app cons (app cons '* (app cons ...)) (app cons 5 (app nil ...))))\n  (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  app
  "'(eval\n  (app cons '* (-> (app cons 'a (app cons 'x (app cons ...))) <-))\n  (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  app
  "'(eval\n  (app cons 'a (-> (app cons 'x (app cons 'x (app nil ...))) <-))\n  (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  app
  "'(eval (app cons 'x (-> (app cons 'x (app nil)) <-)) (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  app
  "'(eval (app cons 'x (-> (app nil) <-)) (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval (app (-> nil <-)) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  quoted
  "'(eval (app cons (-> 'x <-) (app nil)) (env ()))"
  (quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval (app (-> cons <-) 'x (app nil)) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  quoted
  "'(eval (app cons (-> 'x <-) (app cons 'x (app nil))) (env ()))"
  (quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval (app (-> cons <-) 'x (app cons 'x (app nil))) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  quoted
  "'(eval\n  (app cons (-> 'a <-) (app cons 'x (app cons 'x (app nil ...))))\n  (env ()))"
  (quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval\n  (app (-> cons <-) 'a (app cons 'x (app cons 'x (app nil ...))))\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  quoted
  "'(eval\n  (app cons (-> '* <-) (app cons 'a (app cons 'x (app cons ...))))\n  (env ()))"
  (quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval\n  (app (-> cons <-) '* (app cons 'a (app cons 'x (app cons ...))))\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval\n  (app\n   (-> cons <-)\n   (app cons '* (app cons 'a (app cons ...)))\n   (app cons (app cons '* (app cons ...)) (app cons 5 (app nil ...))))\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  app
  "'(eval\n  (app\n   cons\n   (-> (app cons '* (app cons 3 (app cons ...))) <-)\n   (app\n    cons\n    (app cons '* (app cons ...))\n    (app cons (app cons ...) (app cons ...))))\n  (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  app
  "'(eval\n  (app cons '* (-> (app cons 3 (app cons 'x (app cons ...))) <-))\n  (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  app
  "'(eval (app cons 3 (-> (app cons 'x (app cons 'x (app nil ...))) <-)) (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  app
  "'(eval (app cons 'x (-> (app cons 'x (app nil)) <-)) (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  app
  "'(eval (app cons 'x (-> (app nil) <-)) (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval (app (-> nil <-)) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  quoted
  "'(eval (app cons (-> 'x <-) (app nil)) (env ()))"
  (quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval (app (-> cons <-) 'x (app nil)) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  quoted
  "'(eval (app cons (-> 'x <-) (app cons 'x (app nil))) (env ()))"
  (quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval (app (-> cons <-) 'x (app cons 'x (app nil))) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  number
  "'(eval (app cons (-> 3 <-) (app cons 'x (app cons 'x (app nil ...)))) (env ()))"
  (number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval (app (-> cons <-) 3 (app cons 'x (app cons 'x (app nil ...)))) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  quoted
  "'(eval\n  (app cons (-> '* <-) (app cons 3 (app cons 'x (app cons ...))))\n  (env ()))"
  (quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval\n  (app (-> cons <-) '* (app cons 3 (app cons 'x (app cons ...))))\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval\n  (app\n   (-> cons <-)\n   (app cons '* (app cons 3 (app cons ...)))\n   (app\n    cons\n    (app cons '* (app cons ...))\n    (app cons (app cons ...) (app cons ...))))\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  quoted
  "'(eval\n  (app\n   cons\n   (-> '+ <-)\n   (app\n    cons\n    (app cons '* (app cons ...))\n    (app cons (app cons ...) (app cons ...))))\n  (env ()))"
  (quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval\n  (app\n   (-> cons <-)\n   '+\n   (app\n    cons\n    (app cons '* (app cons ...))\n    (app cons (app cons ...) (app cons ...))))\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  deriv
  2
  1000
  257
  ref-or-constructor
  "'(eval\n  (app (-> deriv <-) (app cons '+ (app cons (app cons ...) (app cons ...))))\n  (env ()))"
  (lambda number char string quoted constructor)
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
