'(clean-cache
  tic-tac-toe
  2
  353
  lettypes
  "\"'(eval ((top) lettypes (cons ... player) ...) (env ()))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  letrec*
  "\"'(eval\n  (lettypes cons ... player (letrec* (some-v ... zero-player-game) ...))\n  (env ()))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) (app make-ai-action (app X)))\n      (app player (app O) (app make-ai-action (app O))))\n     <-))\n  (env ((□? ()))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) (app make-ai-action (app X)))\n   (-> (app player (app O) (app make-ai-action (app O))) <-))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (app player (app O) (-> (app make-ai-action (app O)) <-))\n  (env ((□? ()))))\""
  7
  4
  0
  3
  1
  0
  1
  1
  1/4
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval (app make-ai-action (-> (app O) <-)) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (app player (-> (app O) <-) (app make-ai-action (app O)))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) (app make-ai-action (app X))) <-)\n   (app player (app O) (app make-ai-action (app O))))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (app player (app X) (-> (app make-ai-action (app X)) <-))\n  (env ((□? ()))))\""
  7
  4
  0
  3
  1
  0
  1
  1
  1/4
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval (app make-ai-action (-> (app X) <-)) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (app player (-> (app X) <-) (app make-ai-action (app X)))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) human-action)\n      (app player (app O) (app make-ai-action (app O))))\n     <-))\n  (env ((□? ()))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) human-action)\n   (-> (app player (app O) (app make-ai-action (app O))) <-))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (app player (app O) (-> (app make-ai-action (app O)) <-))\n  (env ((□? ()))))\""
  7
  4
  0
  3
  1
  0
  1
  1
  1/4
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval (app make-ai-action (-> (app O) <-)) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (app player (-> (app O) <-) (app make-ai-action (app O)))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) human-action) <-)\n   (app player (app O) (app make-ai-action (app O))))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval (app player (-> (app X) <-) human-action) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) human-action)\n      (app player (app O) human-action))\n     <-))\n  (env ((□? ()))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) human-action)\n   (-> (app player (app O) human-action) <-))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval (app player (-> (app O) <-) human-action) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) human-action) <-)\n   (app player (app O) human-action))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval (app player (-> (app X) <-) human-action) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (λ (player-one player-two)\n    (-> (app play-turn empty-board player-one player-two) <-))\n  (env ((□? (player-one player-two)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app play-turn empty-board player-one (-> player-two <-))\n  (env ((□? (player-one player-two)))))\""
  15
  7
  4
  4
  0
  1
  1
  1
  0
  6
  #f
  37/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app play-turn empty-board (-> player-one <-) player-two)\n  (env ((□? (player-one player-two)))))\""
  15
  7
  4
  4
  0
  1
  1
  1
  0
  6
  #f
  37/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  let
  "\"'(eval\n  (λ (bo this-play that-play) (-> (let (_) ...) <-))\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  8
  5
  0
  3
  1
  0
  1
  1
  1/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  27
  19
  3
  5
  10
  1
  11
  1
  11/20
  18
  #f
  98/19
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  match
  "\"'(eval\n  (let (_) (-> (match this-play ...) <-))\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  let
  "\"'(eval\n  (match this-play ((player mark action) (-> (let (co) ...) <-)))\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  letrec
  "\"'(eval\n  (let (... () (co (-> (letrec (loop) ...) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  let
  "\"'(eval\n  (λ () (-> (let (co) ...) <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (let (... () (co (-> (app action bo) <-)) () ...) ...)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app action (-> bo <-)) (env ((□? ()) (□? (bo this-play that-play)))))\""
  28
  19
  3
  6
  10
  1
  11
  1
  11/20
  18
  #f
  98/19
  ((1/2 1/2 0) (1/2 1/2 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app (-> action <-) bo) (env ((□? ()) (□? (bo this-play that-play)))))\""
  81
  59
  7
  15
  17
  2
  19
  1
  31/240
  32
  #f
  386/59
  ((15/2 15/2 0) (15/2 15/2 0) (15/2 15/2 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  match
  "\"'(eval\n  (let (co) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> co <-)))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> (app loop) <-)) _)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app blank? (-> (app board-lookup co bo) <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app board-lookup co (-> bo <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  28
  19
  3
  6
  10
  1
  11
  1
  11/20
  18
  #f
  98/19
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (app board-lookup (-> co <-) bo)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (letrec (loop) (-> (app loop) <-))\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  let
  "\"'(eval (let (co) (-> (let (bo) ...) <-)) (env ((□? (bo this-play that-play)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co mark bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  7
  4
  0
  3
  1
  0
  1
  1
  1/4
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app board-mark co mark (-> bo <-))\n  (env ((□? (bo this-play that-play)))))\""
  27
  19
  3
  5
  10
  1
  11
  1
  11/20
  18
  #f
  98/19
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app board-mark co (-> mark <-) bo)\n  (env ((□? (bo this-play that-play)))))\""
  74
  57
  7
  10
  15
  2
  17
  1
  1/16
  30
  #f
  374/57
  ((7 7 0) (7 7 0) (7 7 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (app board-mark (-> co <-) mark bo)\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  match
  "\"'(eval\n  (let (bo) (-> (match (app wins? bo mark) ...) <-))\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  25
  353
  let
  "\"'(eval\n  (match (app wins? bo mark) (#f) (_ (-> (let (_) ...) <-)))\n  (env ((□? (bo this-play that-play)))))\""
  4
  3
  0
  1
  0
  0
  0
  1
  0
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  8
  5
  0
  3
  1
  0
  1
  1
  1/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  8
  5
  0
  3
  1
  0
  1
  1
  1/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval (let (_) (-> (app void) <-)) (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  match
  "\"'(eval\n  (match (app wins? bo mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  25
  353
  let
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (let (_) ...) <-)))\n  (env ((□? (bo this-play that-play)))))\""
  5
  4
  0
  1
  0
  0
  0
  1
  0
  3
  #t
  19/4
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  8
  5
  0
  3
  1
  0
  1
  1
  1/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  8
  5
  0
  3
  1
  0
  1
  1
  1/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (let (_) (-> (app display \"Cat's game.\\n\") <-))\n  (env ((□? (bo this-play that-play)))))\""
  4
  3
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  14/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f) (-> (app play-turn bo that-play this-play) <-))\n   _)\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app play-turn bo that-play (-> this-play <-))\n  (env ((□? (bo this-play that-play)))))\""
  53
  36
  7
  10
  10
  2
  12
  1
  5/64
  18
  #f
  20/3
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app play-turn bo (-> that-play <-) this-play)\n  (env ((□? (bo this-play that-play)))))\""
  53
  36
  7
  10
  10
  2
  12
  1
  5/64
  18
  #f
  20/3
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app play-turn (-> bo <-) that-play this-play)\n  (env ((□? (bo this-play that-play)))))\""
  8
  5
  0
  3
  1
  0
  1
  1
  1/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match (-> (app full? bo) <-) (#f) _)\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app full? (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  8
  5
  0
  3
  1
  0
  1
  1
  1/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match (-> (app wins? bo mark) <-) (#f) _)\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app wins? bo (-> mark <-)) (env ((□? (bo this-play that-play)))))\""
  74
  57
  7
  10
  15
  2
  17
  1
  1/16
  30
  #f
  374/57
  ((7 7 0) (7 7 0) (7 7 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app wins? (-> bo <-) mark) (env ((□? (bo this-play that-play)))))\""
  8
  5
  0
  3
  1
  0
  1
  1
  1/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (match (-> this-play <-) (player mark action))\n  (env ((□? (bo this-play that-play)))))\""
  54
  37
  7
  10
  10
  2
  12
  1
  5/68
  18
  #f
  250/37
  ((5 5 0) (5 5 0) (5 5 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval (λ (bo) (-> (app void) <-)) (env ((□? (bo)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (λ (bo)\n    (-> (app move-coord (app some-v (app maximin bo ma (app mark⁻¹ ma)))) <-))\n  (env ((□? (bo)) (□? (ma)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app move-coord (-> (app some-v (app maximin bo ma (app mark⁻¹ ma))) <-))\n  (env ((□? (bo)) (□? (ma)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app some-v (-> (app maximin bo ma (app mark⁻¹ ma)) <-))\n  (env ((□? (bo)) (□? (ma)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval (app maximin bo ma (-> (app mark⁻¹ ma) <-)) (env ((□? (bo)) (□? (ma)))))\""
  40
  22
  6
  12
  1
  2
  3
  1
  1/16
  18
  #f
  57/11
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app mark⁻¹ (-> ma <-)) (env ((□? (bo)) (□? (ma)))))\""
  15
  7
  4
  4
  0
  1
  1
  1
  0
  6
  #f
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app maximin bo (-> ma <-) (app mark⁻¹ ma)) (env ((□? (bo)) (□? (ma)))))\""
  15
  7
  4
  4
  0
  1
  1
  1
  0
  6
  #f
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app maximin (-> bo <-) ma (app mark⁻¹ ma)) (env ((□? (bo)) (□? (ma)))))\""
  85
  34
  33
  18
  22
  12
  34
  1
  1/2
  33
  #f
  86/17
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (λ (bo) (-> (app error 'human-action \"not implemented\") <-))\n  (env ((□? (bo)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (λ (bo this-mark that-mark)\n    (-> (app fold/coord (λ (co mm) ...) (app none)) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (app fold/coord (λ (co mm) ...) (-> (app none) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  match
  "\"'(eval\n  (λ (co mm) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  let
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> (let (bo) ...) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co this-mark bo) <-)) () ...) ...)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  8
  4
  0
  4
  1
  0
  1
  1
  1/4
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app board-mark co this-mark (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  104
  43
  36
  25
  22
  13
  35
  1
  13/33
  39
  #f
  225/43
  ((4 4 0) (4 4 0) (4 4 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app board-mark co (-> this-mark <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  45
  16
  9
  20
  0
  3
  3
  1
  0
  9
  #f
  87/16
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app board-mark (-> co <-) this-mark bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  13
  5
  2
  6
  1
  0
  1
  1
  1/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (let (bo)\n    (->\n     (app max-maybe-move mm (app move co (match (app wins? bo this-mark) ...)))\n     <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (app\n   max-maybe-move\n   mm\n   (-> (app move co (match (app wins? bo this-mark) ...)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  match
  "\"'(eval\n  (app move co (-> (match (app wins? bo this-mark) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (match (app wins? bo this-mark) (#f) (_ (-> (app horizon (app win) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (app horizon (-> (app win) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  match
  "\"'(eval\n  (match (app wins? bo this-mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (app horizon (app draw) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (app horizon (-> (app draw) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f)\n    (->\n     (app\n      horizon-add1\n      (app move-horizon (app some-v (app minimax bo that-mark this-mark))))\n     <-))\n   _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app\n   horizon-add1\n   (->\n    (app move-horizon (app some-v (app minimax bo that-mark this-mark)))\n    <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app move-horizon (-> (app some-v (app minimax bo that-mark this-mark)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app some-v (-> (app minimax bo that-mark this-mark) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app minimax bo that-mark (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  44
  15
  9
  20
  0
  3
  3
  1
  0
  9
  #f
  27/5
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app minimax bo (-> that-mark <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  63
  30
  11
  22
  1
  4
  5
  1
  1/18
  18
  #f
  27/5
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app minimax (-> bo <-) that-mark this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  9
  5
  0
  4
  1
  0
  1
  1
  1/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match (-> (app full? bo) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app full? (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  9
  5
  0
  4
  1
  0
  1
  1
  1/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match (-> (app wins? bo this-mark) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app wins? bo (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  45
  16
  9
  20
  0
  3
  3
  1
  0
  9
  #f
  87/16
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app wins? (-> bo <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  9
  5
  0
  4
  1
  0
  1
  1
  1/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app move (-> co <-) (match (app wins? bo this-mark) ...))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  13
  5
  2
  6
  1
  0
  1
  1
  1/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (app\n   max-maybe-move\n   (-> mm <-)\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> mm <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app blank? (-> (app board-lookup co bo) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app board-lookup co (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  104
  43
  36
  25
  22
  13
  35
  1
  13/33
  39
  #f
  225/43
  ((4 4 0) (4 4 0) (4 4 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app board-lookup (-> co <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  13
  5
  2
  6
  1
  0
  1
  1
  1/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (λ (bo this-mark that-mark)\n    (-> (app fold/coord (λ (co mm) ...) (app none)) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (app fold/coord (λ (co mm) ...) (-> (app none) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  match
  "\"'(eval\n  (λ (co mm) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  let
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> (let (bo) ...) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co this-mark bo) <-)) () ...) ...)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  8
  4
  0
  4
  1
  0
  1
  1
  1/4
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app board-mark co this-mark (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  14
  6
  2
  6
  1
  1
  2
  1
  1/6
  6
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app board-mark co (-> this-mark <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  64
  31
  11
  22
  1
  4
  5
  1
  1/19
  18
  #f
  168/31
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app board-mark (-> co <-) this-mark bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  13
  5
  2
  6
  1
  0
  1
  1
  1/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (let (bo)\n    (->\n     (app min-maybe-move mm (app move co (match (app wins? bo this-mark) ...)))\n     <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (app\n   min-maybe-move\n   mm\n   (-> (app move co (match (app wins? bo this-mark) ...)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  match
  "\"'(eval\n  (app move co (-> (match (app wins? bo this-mark) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (match (app wins? bo this-mark) (#f) (_ (-> (app horizon (app lose) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (app horizon (-> (app lose) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  match
  "\"'(eval\n  (match (app wins? bo this-mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (app horizon (app draw) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (app horizon (-> (app draw) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f)\n    (->\n     (app\n      horizon-add1\n      (app move-horizon (app some-v (app maximin bo that-mark this-mark))))\n     <-))\n   _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app\n   horizon-add1\n   (->\n    (app move-horizon (app some-v (app maximin bo that-mark this-mark)))\n    <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app move-horizon (-> (app some-v (app maximin bo that-mark this-mark)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app some-v (-> (app maximin bo that-mark this-mark) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app maximin bo that-mark (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  63
  30
  11
  22
  1
  4
  5
  1
  1/18
  18
  #f
  27/5
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app maximin bo (-> that-mark <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  44
  15
  9
  20
  0
  3
  3
  1
  0
  9
  #f
  27/5
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app maximin (-> bo <-) that-mark this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  9
  5
  0
  4
  1
  0
  1
  1
  1/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match (-> (app full? bo) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app full? (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  9
  5
  0
  4
  1
  0
  1
  1
  1/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match (-> (app wins? bo this-mark) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app wins? bo (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  64
  31
  11
  22
  1
  4
  5
  1
  1/19
  18
  #f
  168/31
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app wins? (-> bo <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  9
  5
  0
  4
  1
  0
  1
  1
  1/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app move (-> co <-) (match (app wins? bo this-mark) ...))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  13
  5
  2
  6
  1
  0
  1
  1
  1/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (app\n   min-maybe-move\n   (-> mm <-)\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> mm <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app blank? (-> (app board-lookup co bo) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app board-lookup co (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  14
  6
  2
  6
  1
  1
  2
  1
  1/6
  6
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app board-lookup (-> co <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  13
  5
  2
  6
  1
  0
  1
  1
  1/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  match
  "\"'(eval (λ (mmo mo₁) (-> (match mmo ...) <-)) (env ((□? (mmo mo₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (match mmo (some mo₀) ((none) (-> (app some mo₁) <-)))\n  (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app some (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  8
  3
  2
  3
  0
  1
  1
  1
  0
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (match\n   mmo\n   ((some mo₀)\n    (->\n     (app\n      some\n      (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n     <-))\n   (none))\n  (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  match
  "\"'(eval\n  (app\n   some\n   (->\n    (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...)\n    <-))\n  (env ((□? (mmo mo₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   (#f)\n   (_ (-> mo₁ <-)))\n  (env ((□? (mmo mo₁)))))\""
  8
  3
  2
  3
  0
  1
  1
  1
  0
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   ((#f) (-> mo₀ <-))\n   _)\n  (env ((□? (mmo mo₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match\n   (-> (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) <-)\n   (#f)\n   _)\n  (env ((□? (mmo mo₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app horizon< (app move-horizon mo₀) (-> (app move-horizon mo₁) <-))\n  (env ((□? (mmo mo₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  8
  3
  2
  3
  0
  1
  1
  1
  0
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app horizon< (-> (app move-horizon mo₀) <-) (app move-horizon mo₁))\n  (env ((□? (mmo mo₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₀ <-)) (env ((□? (mmo mo₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (match (-> mmo <-) (some mo₀) (none)) (env ((□? (mmo mo₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  match
  "\"'(eval (λ (mmo mo₁) (-> (match mmo ...) <-)) (env ((□? (mmo mo₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (match mmo (some mo₀) ((none) (-> (app some mo₁) <-)))\n  (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app some (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  8
  3
  2
  3
  0
  1
  1
  1
  0
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (match\n   mmo\n   ((some mo₀)\n    (->\n     (app\n      some\n      (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n     <-))\n   (none))\n  (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  match
  "\"'(eval\n  (app\n   some\n   (->\n    (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...)\n    <-))\n  (env ((□? (mmo mo₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   (#f)\n   (_ (-> mo₀ <-)))\n  (env ((□? (mmo mo₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   ((#f) (-> mo₁ <-))\n   _)\n  (env ((□? (mmo mo₁)))))\""
  8
  3
  2
  3
  0
  1
  1
  1
  0
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match\n   (-> (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) <-)\n   (#f)\n   _)\n  (env ((□? (mmo mo₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app horizon< (app move-horizon mo₀) (-> (app move-horizon mo₁) <-))\n  (env ((□? (mmo mo₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  8
  3
  2
  3
  0
  1
  1
  1
  0
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app horizon< (-> (app move-horizon mo₀) <-) (app move-horizon mo₁))\n  (env ((□? (mmo mo₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₀ <-)) (env ((□? (mmo mo₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (match (-> mmo <-) (some mo₀) (none)) (env ((□? (mmo mo₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval (λ (f x) (-> (app foldl (λ (r x) ...) x is) <-)) (env ((□? (f x)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app foldl (λ (r x) ...) x (-> is <-)) (env ((□? (f x)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app foldl (λ (r x) ...) (-> x <-) is) (env ((□? (f x)))))\""
  11
  5
  3
  3
  0
  1
  1
  1
  0
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (λ (r x) (-> (app foldl (λ (c x) ...) x is) <-))\n  (env ((□? (r x)) (□? (f x)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app foldl (λ (c x) ...) x (-> is <-)) (env ((□? (r x)) (□? (f x)))))\""
  5
  3
  0
  2
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app foldl (λ (c x) ...) (-> x <-) is) (env ((□? (r x)) (□? (f x)))))\""
  103
  69
  20
  14
  33
  10
  43
  1
  421/780
  52
  #t
  350/69
  ((11/2 11/2 0) (11/2 11/2 0) (11/2 11/2 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (λ (c x) (-> (app f (app coord r c) x) <-))\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (app f (app coord r c) (-> x <-))\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (app f (-> (app coord r c) <-) x)\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  5
  2
  0
  3
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  46
  30
  11
  5
  23
  5
  28
  1
  53/66
  28
  #f
  51/10
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  46
  30
  11
  5
  23
  5
  28
  1
  53/66
  28
  #f
  51/10
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app (-> f <-) (app coord r c) x)\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  11
  3
  3
  5
  0
  1
  1
  1
  0
  2
  #f
  16/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  match
  "\"'(eval (λ (f acc l) (-> (match l ...) <-)) (env ((□? (f acc l)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match l (nil) ((cons x xs) (-> (app foldl f (app f x acc) xs) <-)))\n  (env ((□? (f acc l)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app foldl f (app f x acc) (-> xs <-)) (env ((□? (f acc l)))))\""
  34
  24
  4
  6
  14
  1
  15
  1
  31/42
  14
  #f
  137/24
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval (app foldl f (-> (app f x acc) <-) xs) (env ((□? (f acc l)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app f x (-> acc <-)) (env ((□? (f acc l)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app f (-> x <-) acc) (env ((□? (f acc l)))))\""
  41
  31
  4
  6
  20
  1
  21
  1
  104/133
  20
  #f
  174/31
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app (-> f <-) x acc) (env ((□? (f acc l)))))\""
  20
  10
  4
  6
  3
  1
  4
  1
  3/28
  4
  #f
  28/5
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app foldl (-> f <-) (app f x acc) xs) (env ((□? (f acc l)))))\""
  19
  9
  4
  6
  3
  1
  4
  1
  1/7
  4
  #f
  50/9
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (match l ((nil) (-> acc <-)) (cons x xs)) (env ((□? (f acc l)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (match (-> l <-) (nil) (cons x xs)) (env ((□? (f acc l)))))\""
  34
  24
  4
  6
  14
  1
  15
  1
  31/42
  14
  #f
  137/24
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  match
  "\"'(eval (λ (h) (-> (match h ...) <-)) (env ((□? (h)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (match h ((horizon oc sc) (-> (app horizon oc (app + sc 1)) <-)))\n  (env ((□? (h)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval (app horizon oc (-> (app + sc 1) <-)) (env ((□? (h)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app + (-> sc <-) 1) (env ((□? (h)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app horizon (-> oc <-) (app + sc 1)) (env ((□? (h)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (match (-> h <-) (horizon oc sc)) (env ((□? (h)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  match
  "\"'(eval (λ (h₀ h₁) (-> (match h₀ ...) <-)) (env ((□? (h₀ h₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  match
  "\"'(eval\n  (match h₀ ((horizon oc₀ sc₀) (-> (match h₁ ...) <-)))\n  (env ((□? (h₀ h₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match\n   h₁\n   ((horizon oc₁ sc₁)\n    (->\n     (app or (app oc< oc₀ oc₁) (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n     <-)))\n  (env ((□? (h₀ h₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app\n   or\n   (app oc< oc₀ oc₁)\n   (-> (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)) <-))\n  (env ((□? (h₀ h₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app and (app equal? oc₀ oc₁) (-> (app < sc₀ sc₁) <-))\n  (env ((□? (h₀ h₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app < sc₀ (-> sc₁ <-)) (env ((□? (h₀ h₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app < (-> sc₀ <-) sc₁) (env ((□? (h₀ h₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app and (-> (app equal? oc₀ oc₁) <-) (app < sc₀ sc₁))\n  (env ((□? (h₀ h₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app equal? oc₀ (-> oc₁ <-)) (env ((□? (h₀ h₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₀ <-) oc₁) (env ((□? (h₀ h₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app\n   or\n   (-> (app oc< oc₀ oc₁) <-)\n   (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n  (env ((□? (h₀ h₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app oc< oc₀ (-> oc₁ <-)) (env ((□? (h₀ h₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app oc< (-> oc₀ <-) oc₁) (env ((□? (h₀ h₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (match (-> h₁ <-) (horizon oc₁ sc₁)) (env ((□? (h₀ h₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (match (-> h₀ <-) (horizon oc₀ sc₀)) (env ((□? (h₀ h₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  match
  "\"'(eval (λ (oc₀ oc₁) (-> (match oc₀ ...) <-)) (env ((□? (oc₀ oc₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match\n   oc₀\n   (win)\n   (draw)\n   ((lose) (-> (app not (app equal? oc₁ (app lose))) <-)))\n  (env ((□? (oc₀ oc₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval (app not (-> (app equal? oc₁ (app lose)) <-)) (env ((□? (oc₀ oc₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval (app equal? oc₁ (-> (app lose) <-)) (env ((□? (oc₀ oc₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₁ <-) (app lose)) (env ((□? (oc₀ oc₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match oc₀ (win) ((draw) (-> (app equal? oc₁ (app win)) <-)) (lose))\n  (env ((□? (oc₀ oc₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval (app equal? oc₁ (-> (app win) <-)) (env ((□? (oc₀ oc₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₁ <-) (app win)) (env ((□? (oc₀ oc₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (match oc₀ ((win) (-> (app #f) <-)) (draw) (lose))\n  (env ((□? (oc₀ oc₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (match (-> oc₀ <-) (win) (draw) (lose)) (env ((□? (oc₀ oc₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval (λ (b) (-> (app andmap (λ (r) ...) is) <-)) (env ((□? (b)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app andmap (λ (r) ...) (-> is <-)) (env ((□? (b)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval (λ (r) (-> (app andmap (λ (c) ...) is) <-)) (env ((□? (r)) (□? (b)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app andmap (λ (c) ...) (-> is <-)) (env ((□? (r)) (□? (b)))))\""
  5
  3
  0
  2
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (λ (c) (-> (app marked? (app b (app coord r c))) <-))\n  (env ((□? (c)) (□? (r)) (□? (b)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app marked? (-> (app b (app coord r c)) <-))\n  (env ((□? (c)) (□? (r)) (□? (b)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval (app b (-> (app coord r c) <-)) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  5
  2
  0
  3
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  53
  30
  15
  8
  23
  5
  28
  1
  53/66
  28
  #f
  51/10
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  53
  30
  15
  8
  23
  5
  28
  1
  53/66
  28
  #f
  51/10
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app (-> b <-) (app coord r c)) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  30
  14
  4
  12
  1
  1
  2
  1
  1/12
  14
  #t
  36/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (λ (b m)\n    (->\n     (app\n      or\n      (app ormap (λ (r) ...) is)\n      (app ormap (λ (c) ...) is)\n      (app andmap (λ (rc) ...) is)\n      (app andmap (λ (rc) ...) is))\n     <-))\n  (env ((□? (b m)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (-> (app andmap (λ (rc) ...) is) <-))\n  (env ((□? (b m)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app andmap (λ (rc) ...) (-> is <-)) (env ((□? (b m)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (λ (rc) (-> (app marked-with? b (app coord rc (app i⁻¹ rc)) m) <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord rc (app i⁻¹ rc)) (-> m <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  164
  109
  22
  33
  21
  7
  28
  1
  7/108
  55
  #f
  661/109
  ((13 13 0) (27/2 27/2 0) (27/2 27/2 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord rc (app i⁻¹ rc)) <-) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval (app coord rc (-> (app i⁻¹ rc) <-)) (env ((□? (rc)) (□? (b m)))))\""
  80
  53
  17
  10
  32
  6
  38
  1
  68/99
  45
  #f
  279/53
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app i⁻¹ (-> rc <-)) (env ((□? (rc)) (□? (b m)))))\""
  53
  30
  15
  8
  23
  5
  28
  1
  53/66
  28
  #f
  51/10
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app coord (-> rc <-) (app i⁻¹ rc)) (env ((□? (rc)) (□? (b m)))))\""
  53
  30
  15
  8
  23
  5
  28
  1
  53/66
  28
  #f
  51/10
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord rc (app i⁻¹ rc)) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  29
  14
  4
  11
  1
  1
  2
  1
  1/12
  14
  #t
  36/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (-> (app andmap (λ (rc) ...) is) <-)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app andmap (λ (rc) ...) (-> is <-)) (env ((□? (b m)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (λ (rc) (-> (app marked-with? b (app coord rc rc) m) <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord rc rc) (-> m <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  164
  109
  22
  33
  21
  7
  28
  1
  7/108
  55
  #f
  661/109
  ((27/2 27/2 0) (27/2 27/2 0) (13 13 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord rc rc) <-) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app coord rc (-> rc <-)) (env ((□? (rc)) (□? (b m)))))\""
  53
  30
  15
  8
  23
  5
  28
  1
  53/66
  28
  #f
  51/10
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app coord (-> rc <-) rc) (env ((□? (rc)) (□? (b m)))))\""
  53
  30
  15
  8
  23
  5
  28
  1
  53/66
  28
  #f
  51/10
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord rc rc) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  29
  14
  4
  11
  1
  1
  2
  1
  1/12
  14
  #t
  36/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (-> (app ormap (λ (c) ...) is) <-)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app ormap (λ (c) ...) (-> is <-)) (env ((□? (b m)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval (λ (c) (-> (app andmap (λ (r) ...) is) <-)) (env ((□? (c)) (□? (b m)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app andmap (λ (r) ...) (-> is <-)) (env ((□? (c)) (□? (b m)))))\""
  5
  3
  0
  2
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (λ (r) (-> (app marked-with? b (app coord r c) m) <-))\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord r c) (-> m <-))\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  165
  109
  22
  34
  21
  7
  28
  1
  7/108
  55
  #f
  661/109
  ((27/2 27/2 0) (27/2 27/2 0) (27/2 27/2 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord r c) <-) m)\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  5
  2
  0
  3
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  46
  30
  11
  5
  23
  5
  28
  1
  53/66
  28
  #f
  51/10
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  53
  30
  15
  8
  23
  5
  28
  1
  53/66
  28
  #f
  51/10
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord r c) m)\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  30
  14
  4
  12
  1
  1
  2
  1
  1/12
  14
  #t
  36/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app\n   or\n   (-> (app ormap (λ (r) ...) is) <-)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app ormap (λ (r) ...) (-> is <-)) (env ((□? (b m)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval (λ (r) (-> (app andmap (λ (c) ...) is) <-)) (env ((□? (r)) (□? (b m)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app andmap (λ (c) ...) (-> is <-)) (env ((□? (r)) (□? (b m)))))\""
  5
  3
  0
  2
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (λ (c) (-> (app marked-with? b (app coord r c) m) <-))\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord r c) (-> m <-))\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  165
  109
  22
  34
  21
  7
  28
  1
  7/108
  55
  #f
  661/109
  ((27/2 27/2 0) (27/2 27/2 0) (27/2 27/2 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord r c) <-) m)\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  5
  2
  0
  3
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  53
  30
  15
  8
  23
  5
  28
  1
  53/66
  28
  #f
  51/10
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  46
  30
  11
  5
  23
  5
  28
  1
  53/66
  28
  #f
  51/10
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord r c) m)\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  30
  14
  4
  12
  1
  1
  2
  1
  1/12
  14
  #t
  36/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  match
  "\"'(eval (λ (f xs) (-> (match xs ...) <-)) (env ((□? (f xs)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match\n   xs\n   (nil)\n   ((cons x rest-xs) (-> (app and (app f x) (app andmap f rest-xs)) <-)))\n  (env ((□? (f xs)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval (app and (app f x) (-> (app andmap f rest-xs) <-)) (env ((□? (f xs)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app andmap f (-> rest-xs <-)) (env ((□? (f xs)))))\""
  65
  44
  8
  13
  22
  1
  23
  1
  67/120
  26
  #f
  249/44
  ((5 5 0) (5 5 0) (5 5 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app andmap (-> f <-) rest-xs) (env ((□? (f xs)))))\""
  42
  21
  8
  13
  7
  1
  8
  1
  1/15
  12
  #f
  50/7
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval (app and (-> (app f x) <-) (app andmap f rest-xs)) (env ((□? (f xs)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app f (-> x <-)) (env ((□? (f xs)))))\""
  72
  51
  8
  13
  28
  1
  29
  1
  224/345
  32
  #f
  286/51
  ((6 6 0) (6 6 0) (6 6 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app (-> f <-) x) (env ((□? (f xs)))))\""
  43
  22
  8
  13
  7
  1
  8
  1
  7/120
  12
  #f
  80/11
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (match xs ((nil) (-> (app #t) <-)) (cons x rest-xs))\n  (env ((□? (f xs)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (match (-> xs <-) (nil) (cons x rest-xs)) (env ((□? (f xs)))))\""
  65
  44
  8
  13
  22
  1
  23
  1
  67/120
  26
  #f
  249/44
  ((5 5 0) (5 5 0) (5 5 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  match
  "\"'(eval (λ (f xs) (-> (match xs ...) <-)) (env ((□? (f xs)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match\n   xs\n   (nil)\n   ((cons x rest-xs) (-> (app or (app f x) (app ormap f rest-xs)) <-)))\n  (env ((□? (f xs)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval (app or (app f x) (-> (app ormap f rest-xs) <-)) (env ((□? (f xs)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app ormap f (-> rest-xs <-)) (env ((□? (f xs)))))\""
  33
  24
  4
  5
  14
  1
  15
  1
  31/42
  14
  #f
  137/24
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app ormap (-> f <-) rest-xs) (env ((□? (f xs)))))\""
  18
  9
  4
  5
  3
  1
  4
  1
  1/7
  4
  #f
  50/9
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval (app or (-> (app f x) <-) (app ormap f rest-xs)) (env ((□? (f xs)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app f (-> x <-)) (env ((□? (f xs)))))\""
  40
  31
  4
  5
  20
  1
  21
  1
  104/133
  20
  #f
  174/31
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app (-> f <-) x) (env ((□? (f xs)))))\""
  19
  10
  4
  5
  3
  1
  4
  1
  3/28
  4
  #f
  28/5
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (match xs ((nil) (-> (app #f) <-)) (cons x rest-xs))\n  (env ((□? (f xs)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (match (-> xs <-) (nil) (cons x rest-xs)) (env ((□? (f xs)))))\""
  33
  24
  4
  5
  14
  1
  15
  1
  31/42
  14
  #f
  137/24
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  match
  "\"'(eval (λ (i) (-> (match i ...) <-)) (env ((□? (i)))))\""
  78
  51
  17
  10
  30
  6
  36
  1
  41/60
  44
  #f
  89/17
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval (match i (Ze) (On) ((Tw) (-> (app Ze) <-))) (env ((□? (i)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval (match i (Ze) ((On) (-> (app On) <-)) (Tw)) (env ((□? (i)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval (match i ((Ze) (-> (app Tw) <-)) (On) (Tw)) (env ((□? (i)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (match (-> i <-) (Ze) (On) (Tw)) (env ((□? (i)))))\""
  60
  33
  17
  10
  23
  6
  29
  1
  53/69
  29
  #f
  57/11
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  match
  "\"'(eval (λ (b co m) (-> (match (app b co) ...) <-)) (env ((□? (b co m)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match (app b co) (blank) ((marked m*) (-> (app equal? m m*) <-)))\n  (env ((□? (b co m)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app equal? m (-> m* <-)) (env ((□? (b co m)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app equal? (-> m <-) m*) (env ((□? (b co m)))))\""
  231
  133
  27
  71
  21
  8
  29
  1
  7/116
  55
  #f
  115/19
  ((20 20 0) (20 20 0) (20 20 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (match (app b co) ((blank) (-> (app #f) <-)) (marked m*))\n  (env ((□? (b co m)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval (match (-> (app b co) <-) (blank) (marked m*)) (env ((□? (b co m)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app b (-> co <-)) (env ((□? (b co m)))))\""
  22
  9
  5
  8
  0
  1
  1
  1
  0
  8
  #f
  16/3
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app (-> b <-) co) (env ((□? (b co m)))))\""
  77
  30
  9
  38
  1
  2
  3
  1
  1/16
  30
  #t
  16/3
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval (λ (co bo) (-> (app bo co) <-)) (env ((□? (co bo)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app bo (-> co <-)) (env ((□? (co bo)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app (-> bo <-) co) (env ((□? (co bo)))))\""
  190
  98
  47
  45
  26
  16
  42
  1
  113/448
  85
  #f
  535/98
  ((29/2 29/2 0) (29/2 29/2 0) (29/2 29/2 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  match
  "\"'(eval\n  (λ (co) (-> (match (app equal? co₀ co) ...) <-))\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (match (app equal? co₀ co) (#f) (_ (-> (app marked ma) <-)))\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app marked (-> ma <-)) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  164
  109
  22
  33
  21
  7
  28
  1
  7/108
  55
  #f
  661/109
  ((13 13 0) (13 13 0) (27/2 27/2 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match (app equal? co₀ co) ((#f) (-> (app board-lookup co bo) <-)) _)\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app board-lookup co (-> bo <-)) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  160
  81
  42
  37
  26
  15
  41
  1
  335/1176
  73
  #f
  16/3
  ((10 10 0) (10 10 0) (10 10 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app board-lookup (-> co <-) bo) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match (-> (app equal? co₀ co) <-) (#f) _)\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app equal? co₀ (-> co <-)) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app equal? (-> co₀ <-) co) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval (λ (co) (-> (app blank) <-)) (env ((□? (co)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  match
  "\"'(eval (λ (ma) (-> (match ma ...) <-)) (env ((□? (ma)))))\""
  37
  19
  6
  12
  0
  2
  2
  1
  0
  15
  #f
  99/19
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval (match ma (X) ((O) (-> (app X) <-))) (env ((□? (ma)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval (match ma ((X) (-> (app O) <-)) (O)) (env ((□? (ma)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (match (-> ma <-) (X) (O)) (env ((□? (ma)))))\""
  28
  11
  6
  11
  0
  2
  2
  1
  0
  9
  #f
  57/11
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (letrec*\n   (...\n    move-horizon\n    (is\n     (->\n      (app cons (app Ze) (app cons (app On) (app cons (app Tw) (app nil))))\n      <-))\n    mark⁻¹\n    ...)\n   ...)\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (app cons (app Ze) (-> (app cons (app On) (app cons (app Tw) (app nil))) <-))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval (app cons (app On) (-> (app cons (app Tw) (app nil)) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval (app cons (app Tw) (-> (app nil) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval (app cons (-> (app Tw) <-) (app nil)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval (app cons (-> (app On) <-) (app cons (app Tw) (app nil))) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (app cons (-> (app Ze) <-) (app cons (app On) (app cons (app Tw) (app nil))))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  match
  "\"'(eval\n  (λ (move-horizon-v) (-> (match move-horizon-v ...) <-))\n  (env ((□? (move-horizon-v)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (match\n   move-horizon-v\n   (move _ move-horizon-x)\n   (_ (-> (app error \"invalid match for move-horizon\") <-)))\n  (env ((□? (move-horizon-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (match move-horizon-v ((move _ move-horizon-x) (-> move-horizon-x <-)) _)\n  (env ((□? (move-horizon-v)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (match (-> move-horizon-v <-) (move _ move-horizon-x) _)\n  (env ((□? (move-horizon-v)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  match
  "\"'(eval\n  (λ (move-coord-v) (-> (match move-coord-v ...) <-))\n  (env ((□? (move-coord-v)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (match\n   move-coord-v\n   (move move-coord-x _)\n   (_ (-> (app error \"invalid match for move-coord\") <-)))\n  (env ((□? (move-coord-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (match move-coord-v ((move move-coord-x _) (-> move-coord-x <-)) _)\n  (env ((□? (move-coord-v)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (match (-> move-coord-v <-) (move move-coord-x _) _)\n  (env ((□? (move-coord-v)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  match
  "\"'(eval (λ (a) (-> (match a ...) <-)) (env ((□? (a)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval (match a (blank) (_ (-> (app #f) <-))) (env ((□? (a)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval (match a ((blank) (-> (app #t) <-)) _) (env ((□? (a)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (match (-> a <-) (blank) _) (env ((□? (a)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  match
  "\"'(eval (λ (a) (-> (match a ...) <-)) (env ((□? (a)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval (match a (marked _) (_ (-> (app #f) <-))) (env ((□? (a)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval (match a ((marked _) (-> (app #t) <-)) _) (env ((□? (a)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (match (-> a <-) (marked _) _) (env ((□? (a)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  match
  "\"'(eval (λ (some-v-v) (-> (match some-v-v ...) <-)) (env ((□? (some-v-v)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (match\n   some-v-v\n   (some some-v-x)\n   (_ (-> (app error \"invalid match for some-v\") <-)))\n  (env ((□? (some-v-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (match some-v-v ((some some-v-x) (-> some-v-x <-)) _)\n  (env ((□? (some-v-v)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (match (-> some-v-v <-) (some some-v-x) _) (env ((□? (some-v-v)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (letrec* (some-v ... zero-player-game) (-> (app zero-player-game) <-))\n  (env ()))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  46
  30
  11
  5
  23
  5
  28
  1
  53/66
  28
  #f
  51/10
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  match
  "\"'(eval (λ (f acc l) (-> (match l ...) <-)) (env ((□? (f acc l)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app board-lookup (-> co <-) bo) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval (match ma (X) ((O) (-> (app X) <-))) (env ((□? (ma)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  let
  "\"'(eval\n  (λ () (-> (let (co) ...) <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app wins? bo (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  45
  16
  9
  20
  0
  3
  3
  1
  0
  9
  #f
  87/16
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app\n   or\n   (-> (app ormap (λ (r) ...) is) <-)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  match
  "\"'(eval (λ (b co m) (-> (match (app b co) ...) <-)) (env ((□? (b co m)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match l (nil) ((cons x xs) (-> (app foldl f (app f x acc) xs) <-)))\n  (env ((□? (f acc l)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app b (-> co <-)) (env ((□? (b co m)))))\""
  22
  9
  5
  8
  0
  1
  1
  1
  0
  8
  #f
  16/3
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app + (-> sc <-) 1) (env ((□? (h)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval (app make-ai-action (-> (app O) <-)) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match\n   oc₀\n   (win)\n   (draw)\n   ((lose) (-> (app not (app equal? oc₁ (app lose))) <-)))\n  (env ((□? (oc₀ oc₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  match
  "\"'(eval\n  (match (app wins? bo this-mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord rc (app i⁻¹ rc)) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  29
  14
  4
  11
  1
  1
  2
  1
  1/12
  14
  #t
  36/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) human-action)\n   (-> (app player (app O) human-action) <-))\n  (env ((□? ()))))\""
  32
  16
  4
  12
  1
  1
  2
  1
  1/14
  16
  #t
  41/8
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  39
  21
  4
  14
  2
  1
  3
  1
  2/19
  21
  #t
  107/21
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app\n   or\n   (app oc< oc₀ oc₁)\n   (-> (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)) <-))\n  (env ((□? (h₀ h₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval (match (-> (app b co) <-) (blank) (marked m*)) (env ((□? (b co m)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app (-> f <-) (app coord r c) x)\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  11
  3
  3
  5
  0
  1
  1
  1
  0
  2
  #f
  16/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (app\n   max-maybe-move\n   (-> mm <-)\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₀ <-)) (env ((□? (mmo mo₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app < sc₀ (-> sc₁ <-)) (env ((□? (h₀ h₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (λ (r) (-> (app marked-with? b (app coord r c) m) <-))\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (app\n   max-maybe-move\n   mm\n   (-> (app move co (match (app wins? bo this-mark) ...)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (match move-horizon-v ((move _ move-horizon-x) (-> move-horizon-x <-)) _)\n  (env ((□? (move-horizon-v)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  53
  30
  15
  8
  23
  5
  28
  1
  53/66
  28
  #f
  51/10
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₁ <-) (app win)) (env ((□? (oc₀ oc₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> co <-)))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (match\n   move-coord-v\n   (move move-coord-x _)\n   (_ (-> (app error \"invalid match for move-coord\") <-)))\n  (env ((□? (move-coord-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app horizon< (-> (app move-horizon mo₀) <-) (app move-horizon mo₁))\n  (env ((□? (mmo mo₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app play-turn bo (-> that-play <-) this-play)\n  (env ((□? (bo this-play that-play)))))\""
  53
  36
  7
  10
  10
  2
  12
  1
  5/64
  18
  #f
  20/3
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  67
  49
  7
  11
  20
  2
  22
  1
  139/588
  31
  #t
  306/49
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval (λ (r) (-> (app andmap (λ (c) ...) is) <-)) (env ((□? (r)) (□? (b)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (match oc₀ ((win) (-> (app #f) <-)) (draw) (lose))\n  (env ((□? (oc₀ oc₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  match
  "\"'(eval\n  (λ (co mm) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app coord (-> rc <-) (app i⁻¹ rc)) (env ((□? (rc)) (□? (b m)))))\""
  53
  30
  15
  8
  23
  5
  28
  1
  53/66
  28
  #f
  51/10
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (match (-> ma <-) (X) (O)) (env ((□? (ma)))))\""
  81
  41
  21
  19
  23
  7
  30
  1
  53/90
  37
  #f
  210/41
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  108
  60
  24
  24
  33
  8
  41
  1
  331/570
  55
  #f
  77/15
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match\n   (-> (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) <-)\n   (#f)\n   _)\n  (env ((□? (mmo mo₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app (-> f <-) x) (env ((□? (f xs)))))\""
  43
  22
  8
  13
  7
  1
  8
  1
  7/120
  12
  #f
  80/11
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  let
  "\"'(eval\n  (λ (bo this-play that-play) (-> (let (_) ...) <-))\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app andmap (λ (rc) ...) (-> is <-)) (env ((□? (b m)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval (match i (Ze) ((On) (-> (app On) <-)) (Tw)) (env ((□? (i)))))\""
  7
  5
  0
  2
  2
  0
  2
  1
  2/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) human-action) <-)\n   (app player (app O) human-action))\n  (env ((□? ()))))\""
  10
  7
  0
  3
  2
  0
  2
  1
  2/7
  7
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app move-horizon (-> (app some-v (app minimax bo that-mark this-mark)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app some-v (-> (app maximin bo ma (app mark⁻¹ ma)) <-))\n  (env ((□? (bo)) (□? (ma)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  letrec*
  "\"'(eval\n  (lettypes cons ... player (letrec* (some-v ... zero-player-game) ...))\n  (env ()))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  match
  "\"'(eval\n  (app\n   some\n   (->\n    (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...)\n    <-))\n  (env ((□? (mmo mo₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (match\n   mmo\n   ((some mo₀)\n    (->\n     (app\n      some\n      (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n     <-))\n   (none))\n  (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval (app and (app f x) (-> (app andmap f rest-xs) <-)) (env ((□? (f xs)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  match
  "\"'(eval\n  (let (_) (-> (match this-play ...) <-))\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  match
  "\"'(eval\n  (λ (move-horizon-v) (-> (match move-horizon-v ...) <-))\n  (env ((□? (move-horizon-v)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  match
  "\"'(eval (λ (oc₀ oc₁) (-> (match oc₀ ...) <-)) (env ((□? (oc₀ oc₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval (match a ((blank) (-> (app #t) <-)) _) (env ((□? (a)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval (λ (f x) (-> (app foldl (λ (r x) ...) x is) <-)) (env ((□? (f x)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app minimax (-> bo <-) that-mark this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  9
  5
  0
  4
  1
  0
  1
  1
  1/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app board-lookup (-> co <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  24
  13
  2
  9
  3
  0
  3
  1
  1/4
  13
  #t
  67/13
  ((0 0 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (match h ((horizon oc sc) (-> (app horizon oc (app + sc 1)) <-)))\n  (env ((□? (h)))))\""
  27
  15
  2
  10
  3
  0
  3
  1
  5/24
  15
  #t
  77/15
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app equal? oc₀ (-> oc₁ <-)) (env ((□? (h₀ h₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match (app equal? co₀ co) ((#f) (-> (app board-lookup co bo) <-)) _)\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval (app cons (-> (app On) <-) (app cons (app Tw) (app nil))) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app some (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  10
  5
  2
  3
  2
  1
  3
  1
  2/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app oc< oc₀ (-> oc₁ <-)) (env ((□? (h₀ h₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord rc rc) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  29
  14
  4
  11
  1
  1
  2
  1
  1/12
  14
  #t
  36/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app move (-> co <-) (match (app wins? bo this-mark) ...))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  46
  23
  6
  17
  3
  1
  4
  1
  9/68
  23
  #t
  120/23
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match\n   (-> (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) <-)\n   (#f)\n   _)\n  (env ((□? (mmo mo₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  match
  "\"'(eval\n  (λ (co) (-> (match (app equal? co₀ co) ...) <-))\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₀ <-)) (env ((□? (mmo mo₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app board-mark (-> co <-) this-mark bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  13
  5
  2
  6
  1
  0
  1
  1
  1/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app wins? bo (-> mark <-)) (env ((□? (bo this-play that-play)))))\""
  87
  62
  9
  16
  16
  2
  18
  1
  23/280
  35
  #f
  399/62
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval (app equal? oc₁ (-> (app lose) <-)) (env ((□? (oc₀ oc₁)))))\""
  90
  64
  9
  17
  16
  2
  18
  1
  23/296
  37
  #t
  409/64
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  match
  "\"'(eval\n  (app move co (-> (match (app wins? bo this-mark) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  match
  "\"'(eval\n  (app move co (-> (match (app wins? bo this-mark) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  let
  "\"'(eval (let (co) (-> (let (bo) ...) <-)) (env ((□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f)\n    (->\n     (app\n      horizon-add1\n      (app move-horizon (app some-v (app minimax bo that-mark this-mark))))\n     <-))\n   _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   (#f)\n   (_ (-> mo₀ <-)))\n  (env ((□? (mmo mo₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (match move-coord-v ((move move-coord-x _) (-> move-coord-x <-)) _)\n  (env ((□? (move-coord-v)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app play-turn empty-board (-> player-one <-) player-two)\n  (env ((□? (player-one player-two)))))\""
  15
  7
  4
  4
  0
  1
  1
  1
  0
  6
  #f
  37/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord r c) <-) m)\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  20
  9
  4
  7
  0
  1
  1
  1
  0
  8
  #t
  47/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app ormap (λ (r) ...) (-> is <-)) (env ((□? (b m)))))\""
  23
  12
  4
  7
  2
  1
  3
  1
  1/6
  11
  #t
  31/6
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (app\n   min-maybe-move\n   mm\n   (-> (app move co (match (app wins? bo this-mark) ...)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  27
  14
  4
  9
  2
  1
  3
  1
  1/7
  13
  #t
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app board-lookup (-> co <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  40
  20
  6
  14
  3
  1
  4
  1
  3/19
  19
  #t
  103/20
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app andmap (λ (c) ...) (-> is <-)) (env ((□? (r)) (□? (b)))))\""
  43
  21
  6
  16
  3
  1
  4
  1
  3/20
  20
  #t
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app f (-> x <-)) (env ((□? (f xs)))))\""
  108
  69
  14
  25
  29
  2
  31
  1
  239/600
  49
  #f
  379/69
  ((6 6 0) (6 6 0) (6 6 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (match\n   move-horizon-v\n   (move _ move-horizon-x)\n   (_ (-> (app error \"invalid match for move-horizon\") <-)))\n  (env ((□? (move-horizon-v)))))\""
  111
  71
  14
  26
  29
  2
  31
  1
  239/630
  51
  #t
  389/71
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  match
  "\"'(eval (λ (h) (-> (match h ...) <-)) (env ((□? (h)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app play-turn bo that-play (-> this-play <-))\n  (env ((□? (bo this-play that-play)))))\""
  53
  36
  7
  10
  10
  2
  12
  1
  5/64
  18
  #f
  20/3
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (app horizon (app draw) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  57
  38
  7
  12
  10
  2
  12
  1
  5/72
  20
  #t
  125/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval (app coord rc (-> (app i⁻¹ rc) <-)) (env ((□? (rc)) (□? (b m)))))\""
  137
  91
  24
  22
  42
  8
  50
  1
  287/612
  65
  #f
  529/91
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord rc rc) (-> m <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  285
  189
  49
  47
  69
  21
  90
  1
  11801/37380
  127
  #f
  17/3
  ((13 13 0) (13 13 0) (13 13 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (app player (app X) (-> (app make-ai-action (app X)) <-))\n  (env ((□? ()))))\""
  290
  193
  49
  48
  70
  21
  91
  1
  12221/39060
  131
  #t
  1091/193
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app move-horizon (-> (app some-v (app maximin bo that-mark this-mark)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  match
  "\"'(eval\n  (λ (move-coord-v) (-> (match move-coord-v ...) <-))\n  (env ((□? (move-coord-v)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) human-action) <-)\n   (app player (app O) (app make-ai-action (app O))))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  match
  "\"'(eval\n  (let (co) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval (app maximin bo ma (-> (app mark⁻¹ ma) <-)) (env ((□? (bo)) (□? (ma)))))\""
  40
  22
  6
  12
  1
  2
  3
  1
  1/16
  18
  #f
  57/11
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval (app player (-> (app O) <-) human-action) (env ((□? ()))))\""
  43
  24
  6
  13
  1
  2
  3
  1
  1/18
  20
  #t
  31/6
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  89
  54
  17
  18
  24
  7
  31
  1
  7/15
  48
  #f
  277/54
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app blank? (-> (app board-lookup co bo) <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app < (-> sc₀ <-) sc₁) (env ((□? (h₀ h₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co mark bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  7
  4
  0
  3
  1
  0
  1
  1
  1/4
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> (app loop) <-)) _)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app board-mark (-> co <-) this-mark bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  13
  5
  2
  6
  1
  0
  1
  1
  1/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   ((#f) (-> mo₁ <-))\n   _)\n  (env ((□? (mmo mo₁)))))\""
  23
  10
  4
  9
  1
  1
  2
  1
  1/8
  10
  #t
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match\n   xs\n   (nil)\n   ((cons x rest-xs) (-> (app and (app f x) (app andmap f rest-xs)) <-)))\n  (env ((□? (f xs)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co this-mark bo) <-)) () ...) ...)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  8
  4
  0
  4
  1
  0
  1
  1
  1/4
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app move-coord (-> (app some-v (app maximin bo ma (app mark⁻¹ ma))) <-))\n  (env ((□? (bo)) (□? (ma)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app horizon< (-> (app move-horizon mo₀) <-) (app move-horizon mo₁))\n  (env ((□? (mmo mo₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval (app make-ai-action (-> (app X) <-)) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app board-mark co this-mark (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  17
  8
  2
  7
  1
  1
  2
  1
  1/8
  8
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  23
  12
  2
  9
  1
  1
  2
  1
  1/11
  12
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  33
  17
  4
  12
  1
  2
  3
  1
  1/14
  17
  #t
  87/17
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app foldl (λ (c x) ...) (-> x <-) is) (env ((□? (r x)) (□? (f x)))))\""
  133
  86
  24
  23
  41
  13
  54
  1
  167/400
  69
  #t
  437/86
  ((11/2 11/2 0) (11/2 11/2 0) (11/2 11/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (letrec*\n   (...\n    move-horizon\n    (is\n     (->\n      (app cons (app Ze) (app cons (app On) (app cons (app Tw) (app nil))))\n      <-))\n    mark⁻¹\n    ...)\n   ...)\n  (env ()))\""
  133
  86
  24
  23
  41
  13
  54
  1
  167/400
  69
  #t
  437/86
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (match xs ((nil) (-> (app #f) <-)) (cons x rest-xs))\n  (env ((□? (f xs)))))\""
  136
  88
  24
  24
  41
  13
  54
  1
  167/420
  71
  #t
  447/88
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app (-> b <-) (app coord r c)) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  30
  14
  4
  12
  1
  1
  2
  1
  1/12
  14
  #t
  36/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match\n   xs\n   (nil)\n   ((cons x rest-xs) (-> (app or (app f x) (app ormap f rest-xs)) <-)))\n  (env ((□? (f xs)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (app player (-> (app O) <-) (app make-ai-action (app O)))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app and (-> (app equal? oc₀ oc₁) <-) (app < sc₀ sc₁))\n  (env ((□? (h₀ h₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app andmap (λ (r) ...) (-> is <-)) (env ((□? (b)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (λ (b m)\n    (->\n     (app\n      or\n      (app ormap (λ (r) ...) is)\n      (app ormap (λ (c) ...) is)\n      (app andmap (λ (rc) ...) is)\n      (app andmap (λ (rc) ...) is))\n     <-))\n  (env ((□? (b m)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app foldl (λ (r x) ...) (-> x <-) is) (env ((□? (f x)))))\""
  11
  5
  3
  3
  0
  1
  1
  1
  0
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app andmap (λ (rc) ...) (-> is <-)) (env ((□? (b m)))))\""
  15
  8
  3
  4
  2
  1
  3
  1
  1/4
  8
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app wins? (-> bo <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  23
  13
  3
  7
  3
  1
  4
  1
  3/13
  13
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (λ (bo) (-> (app error 'human-action \"not implemented\") <-))\n  (env ((□? (bo)))))\""
  26
  15
  3
  8
  3
  1
  4
  1
  1/5
  15
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app marked? (-> (app b (app coord r c)) <-))\n  (env ((□? (c)) (□? (r)) (□? (b)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app blank? (-> (app board-lookup co bo) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  46
  30
  11
  5
  23
  5
  28
  1
  53/66
  28
  #f
  51/10
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (app horizon (-> (app draw) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  50
  32
  11
  7
  23
  5
  28
  1
  53/72
  30
  #t
  163/32
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord rc rc) <-) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  54
  34
  11
  9
  23
  5
  28
  1
  53/78
  32
  #t
  173/34
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval (λ (r) (-> (app andmap (λ (c) ...) is) <-)) (env ((□? (r)) (□? (b m)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval (match ma ((X) (-> (app O) <-)) (O)) (env ((□? (ma)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval (app and (-> (app f x) <-) (app andmap f rest-xs)) (env ((□? (f xs)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (λ (c) (-> (app marked? (app b (app coord r c))) <-))\n  (env ((□? (c)) (□? (r)) (□? (b)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (match (app wins? bo this-mark) (#f) (_ (-> (app horizon (app lose) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (app cons (-> (app Ze) <-) (app cons (app On) (app cons (app Tw) (app nil))))\n  (env ()))\""
  6
  4
  0
  2
  2
  0
  2
  1
  1/2
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app maximin bo that-mark (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  68
  35
  11
  22
  3
  4
  7
  1
  3/22
  23
  #f
  188/35
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (λ (r x) (-> (app foldl (λ (c x) ...) x is) <-))\n  (env ((□? (r x)) (□? (f x)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) human-action)\n   (-> (app player (app O) (app make-ai-action (app O))) <-))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app board-mark co (-> this-mark <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  47
  18
  9
  20
  0
  3
  3
  1
  0
  11
  #f
  97/18
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app full? (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  58
  27
  9
  22
  1
  3
  4
  1
  1/17
  20
  #t
  142/27
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval (app or (-> (app f x) <-) (app ormap f rest-xs)) (env ((□? (f xs)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (match (-> oc₀ <-) (win) (draw) (lose)) (env ((□? (oc₀ oc₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord rc (app i⁻¹ rc)) (-> m <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  164
  109
  22
  33
  21
  7
  28
  1
  7/108
  55
  #f
  661/109
  ((27/2 27/2 0) (14 14 0) (14 14 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  match
  "\"'(eval (λ (f xs) (-> (match xs ...) <-)) (env ((□? (f xs)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app wins? bo (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  64
  31
  11
  22
  1
  4
  5
  1
  1/19
  18
  #f
  168/31
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (app player (-> (app O) <-) (app make-ai-action (app O)))\n  (env ((□? ()))))\""
  66
  33
  11
  22
  1
  4
  5
  1
  1/21
  20
  #t
  178/33
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  match
  "\"'(eval\n  (match h₀ ((horizon oc₀ sc₀) (-> (match h₁ ...) <-)))\n  (env ((□? (h₀ h₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app maximin bo (-> that-mark <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  44
  15
  9
  20
  0
  3
  3
  1
  0
  9
  #f
  27/5
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app (-> f <-) x acc) (env ((□? (f acc l)))))\""
  64
  25
  13
  26
  3
  4
  7
  1
  3/91
  13
  #f
  137/25
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval (app not (-> (app equal? oc₁ (app lose)) <-)) (env ((□? (oc₀ oc₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval (app b (-> (app coord r c) <-)) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  5
  2
  0
  3
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval (let (_) (-> (app void) <-)) (env ((□? (bo this-play that-play)))))\""
  8
  4
  0
  4
  0
  0
  0
  1
  0
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (λ (c x) (-> (app f (app coord r c) x) <-))\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match (-> (app full? bo) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app board-mark co mark (-> bo <-))\n  (env ((□? (bo this-play that-play)))))\""
  27
  19
  3
  5
  10
  1
  11
  1
  11/20
  18
  #f
  98/19
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  80
  49
  18
  13
  33
  6
  39
  1
  331/450
  46
  #f
  251/49
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (λ (rc) (-> (app marked-with? b (app coord rc (app i⁻¹ rc)) m) <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (match (-> h₀ <-) (horizon oc₀ sc₀)) (env ((□? (h₀ h₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (app player (app O) (-> (app make-ai-action (app O)) <-))\n  (env ((□? ()))))\""
  7
  4
  0
  3
  1
  0
  1
  1
  1/4
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (match (-> some-v-v <-) (some some-v-x) _) (env ((□? (some-v-v)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  8
  3
  2
  3
  0
  1
  1
  1
  0
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (-> (app ormap (λ (c) ...) is) <-)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app (-> bo <-) co) (env ((□? (co bo)))))\""
  190
  98
  47
  45
  26
  16
  42
  1
  113/448
  85
  #f
  535/98
  ((29/2 29/2 0) (29/2 29/2 0) (29/2 29/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app board-mark co (-> this-mark <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  237
  138
  49
  50
  33
  17
  50
  1
  61/238
  108
  #f
  376/69
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app move (-> co <-) (match (app wins? bo this-mark) ...))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  284
  167
  55
  62
  36
  18
  54
  1
  1523/5880
  132
  #t
  927/167
  ((17/2 17/2 0) (8 8 0) (17/2 17/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app wins? (-> bo <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  285
  168
  55
  62
  36
  18
  54
  1
  1523/5985
  133
  #t
  311/56
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match (-> (app full? bo) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app (-> b <-) co) (env ((□? (b co m)))))\""
  77
  30
  9
  38
  1
  2
  3
  1
  1/16
  30
  #t
  16/3
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app some (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  83
  33
  11
  39
  1
  3
  4
  1
  1/19
  33
  #t
  175/33
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (app horizon (-> (app lose) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  85
  35
  11
  39
  1
  3
  4
  1
  1/21
  35
  #t
  37/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  match
  "\"'(eval (λ (a) (-> (match a ...) <-)) (env ((□? (a)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (app f (-> (app coord r c) <-) x)\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  5
  2
  0
  3
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app oc< (-> oc₀ <-) oc₁) (env ((□? (h₀ h₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval (λ (c) (-> (app andmap (λ (r) ...) is) <-)) (env ((□? (c)) (□? (b m)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (match (-> move-coord-v <-) (move move-coord-x _) _)\n  (env ((□? (move-coord-v)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app board-mark co this-mark (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  104
  43
  36
  25
  22
  13
  35
  1
  13/33
  39
  #f
  225/43
  ((4 4 0) (4 4 0) (4 4 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match (-> (app wins? bo this-mark) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (app horizon (-> (app win) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (app player (-> (app X) <-) (app make-ai-action (app X)))\n  (env ((□? ()))))\""
  7
  4
  0
  3
  0
  0
  0
  1
  0
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (λ (player-one player-two)\n    (-> (app play-turn empty-board player-one player-two) <-))\n  (env ((□? (player-one player-two)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (app horizon (app draw) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval (match i (Ze) (On) ((Tw) (-> (app Ze) <-))) (env ((□? (i)))))\""
  7
  4
  0
  3
  0
  0
  0
  1
  0
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app equal? (-> m <-) m*) (env ((□? (b co m)))))\""
  238
  139
  27
  72
  21
  8
  29
  1
  7/124
  61
  #f
  837/139
  ((21 21 0) (21 21 0) (21 21 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) (app make-ai-action (app X)))\n   (-> (app player (app O) (app make-ai-action (app O))) <-))\n  (env ((□? ()))))\""
  238
  139
  27
  72
  21
  8
  29
  1
  7/124
  61
  #t
  837/139
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app board-mark co (-> mark <-) bo)\n  (env ((□? (bo this-play that-play)))))\""
  239
  140
  27
  72
  21
  8
  29
  1
  1/18
  61
  #f
  843/140
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app foldl (-> f <-) (app f x acc) xs) (env ((□? (f acc l)))))\""
  258
  149
  31
  78
  24
  9
  33
  1
  5/84
  65
  #f
  893/149
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app maximin (-> bo <-) that-mark this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  267
  156
  31
  80
  25
  9
  34
  1
  69/994
  72
  #t
  232/39
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app foldl f (app f x acc) (-> xs <-)) (env ((□? (f acc l)))))\""
  290
  179
  31
  80
  39
  9
  48
  1
  97/581
  86
  #f
  1057/179
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f)\n    (->\n     (app\n      horizon-add1\n      (app move-horizon (app some-v (app maximin bo that-mark this-mark))))\n     <-))\n   _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  match
  "\"'(eval (λ (f xs) (-> (match xs ...) <-)) (env ((□? (f xs)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  match
  "\"'(eval (λ (mmo mo₁) (-> (match mmo ...) <-)) (env ((□? (mmo mo₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval (app player (-> (app X) <-) human-action) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app foldl (λ (r x) ...) x (-> is <-)) (env ((□? (f x)))))\""
  7
  5
  0
  2
  2
  0
  2
  1
  2/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) human-action)\n      (app player (app O) (app make-ai-action (app O))))\n     <-))\n  (env ((□? ()))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  let
  "\"'(eval\n  (match (app wins? bo mark) (#f) (_ (-> (let (_) ...) <-)))\n  (env ((□? (bo this-play that-play)))))\""
  4
  3
  0
  1
  0
  0
  0
  1
  0
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  let
  "\"'(eval\n  (match this-play ((player mark action) (-> (let (co) ...) <-)))\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app\n   horizon-add1\n   (->\n    (app move-horizon (app some-v (app maximin bo that-mark this-mark)))\n    <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (app f (app coord r c) (-> x <-))\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval (λ (b) (-> (app andmap (λ (r) ...) is) <-)) (env ((□? (b)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app f (-> x <-)) (env ((□? (f xs)))))\""
  40
  31
  4
  5
  20
  1
  21
  1
  104/133
  20
  #f
  174/31
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match (-> (app full? bo) <-) (#f) _)\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match (-> (app wins? bo this-mark) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  match
  "\"'(eval (λ (some-v-v) (-> (match some-v-v ...) <-)) (env ((□? (some-v-v)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app (-> f <-) x) (env ((□? (f xs)))))\""
  19
  10
  4
  5
  3
  1
  4
  1
  3/28
  4
  #f
  28/5
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (app board-lookup (-> co <-) bo)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord r c) <-) m)\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  5
  2
  0
  3
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval (app cons (app On) (-> (app cons (app Tw) (app nil)) <-)) (env ()))\""
  7
  4
  0
  3
  2
  0
  2
  1
  1/2
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app some-v (-> (app minimax bo that-mark this-mark) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app andmap (λ (r) ...) (-> is <-)) (env ((□? (c)) (□? (b m)))))\""
  5
  3
  0
  2
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  lettypes
  "\"'(eval ((top) lettypes (cons ... player) ...) (env ()))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval (match a (blank) (_ (-> (app #f) <-))) (env ((□? (a)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  let
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> (let (bo) ...) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app (-> action <-) bo) (env ((□? ()) (□? (bo this-play that-play)))))\""
  81
  59
  7
  15
  17
  2
  19
  1
  31/240
  32
  #f
  386/59
  ((15/2 15/2 0) (15/2 15/2 0) (7 7 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  match
  "\"'(eval (λ (mmo mo₁) (-> (match mmo ...) <-)) (env ((□? (mmo mo₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app blank? (-> (app board-lookup co bo) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  match
  "\"'(eval\n  (app\n   some\n   (->\n    (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...)\n    <-))\n  (env ((□? (mmo mo₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (λ (rc) (-> (app marked-with? b (app coord rc rc) m) <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app board-lookup co (-> bo <-)) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  160
  81
  42
  37
  26
  15
  41
  1
  335/1176
  73
  #f
  16/3
  ((10 10 0) (10 10 0) (10 10 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (match (-> h <-) (horizon oc sc)) (env ((□? (h)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) human-action)\n      (app player (app O) human-action))\n     <-))\n  (env ((□? ()))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (λ (bo)\n    (-> (app move-coord (app some-v (app maximin bo ma (app mark⁻¹ ma)))) <-))\n  (env ((□? (bo)) (□? (ma)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (match (-> a <-) (blank) _) (env ((□? (a)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  let
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (let (_) ...) <-)))\n  (env ((□? (bo this-play that-play)))))\""
  5
  4
  0
  1
  0
  0
  0
  1
  0
  3
  #t
  19/4
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (match (app b co) ((blank) (-> (app #f) <-)) (marked m*))\n  (env ((□? (b co m)))))\""
  8
  6
  0
  2
  0
  0
  0
  1
  0
  5
  #t
  29/6
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord r c) (-> m <-))\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  193
  136
  22
  35
  36
  7
  43
  1
  43/480
  74
  #f
  807/136
  ((16 16 0) (15 15 0) (15 15 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord rc (app i⁻¹ rc)) <-) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  208
  143
  22
  43
  36
  7
  43
  1
  43/496
  81
  #t
  77/13
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co this-mark bo) <-)) () ...) ...)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  215
  148
  22
  45
  37
  7
  44
  1
  17/176
  86
  #t
  218/37
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app play-turn (-> bo <-) that-play this-play)\n  (env ((□? (bo this-play that-play)))))\""
  230
  163
  22
  45
  49
  7
  56
  1
  1471/11592
  101
  #t
  948/163
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  match
  "\"'(eval (λ (i) (-> (match i ...) <-)) (env ((□? (i)))))\""
  336
  237
  48
  51
  95
  21
  116
  1
  799/2520
  163
  #f
  1342/237
  ((6 6 0) (6 6 0) (6 6 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  match
  "\"'(eval\n  (match (app wins? bo this-mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  53
  30
  15
  8
  23
  5
  28
  1
  53/66
  28
  #f
  51/10
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (match (app equal? co₀ co) (#f) (_ (-> (app marked ma) <-)))\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  57
  32
  15
  10
  23
  5
  28
  1
  53/72
  30
  #t
  163/32
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord r c) (-> m <-))\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  220
  141
  37
  42
  44
  12
  56
  1
  127/468
  85
  #f
  824/141
  ((29/2 29/2 0) (29/2 29/2 0) (29/2 29/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app equal? co₀ (-> co <-)) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (letrec (loop) (-> (app loop) <-))\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app\n   or\n   (-> (app oc< oc₀ oc₁) <-)\n   (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n  (env ((□? (h₀ h₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app horizon (-> oc <-) (app + sc 1)) (env ((□? (h)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app full? (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  8
  5
  0
  3
  1
  0
  1
  1
  1/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval (λ (co) (-> (app blank) <-)) (env ((□? (co)))))\""
  11
  7
  0
  4
  1
  0
  1
  1
  1/7
  7
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app maximin bo (-> ma <-) (app mark⁻¹ ma)) (env ((□? (bo)) (□? (ma)))))\""
  26
  14
  4
  8
  1
  1
  2
  1
  1/14
  13
  #f
  71/14
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (match some-v-v ((some some-v-x) (-> some-v-x <-)) _)\n  (env ((□? (some-v-v)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  53
  30
  15
  8
  23
  5
  28
  1
  53/66
  28
  #f
  51/10
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (match l ((nil) (-> acc <-)) (cons x xs)) (env ((□? (f acc l)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (match\n   mmo\n   ((some mo₀)\n    (->\n     (app\n      some\n      (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n     <-))\n   (none))\n  (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (λ (c) (-> (app marked-with? b (app coord r c) m) <-))\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (app horizon (-> (app draw) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (let (bo)\n    (->\n     (app min-maybe-move mm (app move co (match (app wins? bo this-mark) ...)))\n     <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app maximin (-> bo <-) ma (app mark⁻¹ ma)) (env ((□? (bo)) (□? (ma)))))\""
  85
  34
  33
  18
  22
  12
  34
  1
  1/2
  33
  #f
  86/17
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₁ <-) (app lose)) (env ((□? (oc₀ oc₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (match (-> mmo <-) (some mo₀) (none)) (env ((□? (mmo mo₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) (app make-ai-action (app X)))\n      (app player (app O) (app make-ai-action (app O))))\n     <-))\n  (env ((□? ()))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  match
  "\"'(eval\n  (λ (co mm) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> mm <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app andmap (-> f <-) rest-xs) (env ((□? (f xs)))))\""
  42
  21
  8
  13
  7
  1
  8
  1
  1/15
  12
  #f
  50/7
  ((4 4 0) (4 4 0) (4 4 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app mark⁻¹ (-> ma <-)) (env ((□? (bo)) (□? (ma)))))\""
  57
  28
  12
  17
  7
  2
  9
  1
  1/30
  18
  #f
  93/14
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app equal? (-> co₀ <-) co) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (-> (app andmap (λ (rc) ...) is) <-))\n  (env ((□? (b m)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f) (-> (app play-turn bo that-play this-play) <-))\n   _)\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval (app equal? oc₁ (-> (app win) <-)) (env ((□? (oc₀ oc₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  11
  7
  0
  4
  1
  0
  1
  1
  1/7
  7
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  57
  37
  11
  9
  24
  5
  29
  1
  56/87
  35
  #f
  188/37
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  64
  42
  11
  11
  25
  5
  30
  1
  59/102
  40
  #t
  71/14
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app full? (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  71
  46
  11
  14
  25
  5
  30
  1
  59/111
  44
  #t
  233/46
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   ((#f) (-> mo₀ <-))\n   _)\n  (env ((□? (mmo mo₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval (match i ((Ze) (-> (app Tw) <-)) (On) (Tw)) (env ((□? (i)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app ormap f (-> rest-xs <-)) (env ((□? (f xs)))))\""
  36
  26
  4
  6
  14
  1
  15
  1
  31/49
  16
  #f
  147/26
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval (match a (marked _) (_ (-> (app #f) <-))) (env ((□? (a)))))\""
  39
  28
  4
  7
  14
  1
  15
  1
  31/56
  18
  #t
  157/28
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (app\n   min-maybe-move\n   (-> mm <-)\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app marked (-> ma <-)) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  164
  109
  22
  33
  21
  7
  28
  1
  7/108
  55
  #f
  661/109
  ((27/2 27/2 0) (27/2 27/2 0) (27/2 27/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app f x (-> acc <-)) (env ((□? (f acc l)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval (app cons (-> (app Tw) <-) (app nil)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  match
  "\"'(eval (λ (ma) (-> (match ma ...) <-)) (env ((□? (ma)))))\""
  39
  21
  6
  12
  2
  2
  4
  1
  2/15
  17
  #f
  109/21
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (app fold/coord (λ (co mm) ...) (-> (app none) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  42
  23
  6
  13
  2
  2
  4
  1
  2/17
  19
  #t
  119/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (match (-> mmo <-) (some mo₀) (none)) (env ((□? (mmo mo₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (app cons (app Ze) (-> (app cons (app On) (app cons (app Tw) (app nil))) <-))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (match (-> l <-) (nil) (cons x xs)) (env ((□? (f acc l)))))\""
  34
  24
  4
  6
  14
  1
  15
  1
  31/42
  14
  #f
  137/24
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (match (-> h₁ <-) (horizon oc₁ sc₁)) (env ((□? (h₀ h₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (match (app wins? bo this-mark) (#f) (_ (-> (app horizon (app win) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval (app or (app f x) (-> (app ormap f rest-xs) <-)) (env ((□? (f xs)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (match xs ((nil) (-> (app #t) <-)) (cons x rest-xs))\n  (env ((□? (f xs)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app minimax bo that-mark (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  47
  17
  9
  21
  0
  3
  3
  1
  0
  11
  #f
  91/17
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) (app make-ai-action (app X))) <-)\n   (app player (app O) (app make-ai-action (app O))))\n  (env ((□? ()))))\""
  49
  19
  9
  21
  0
  3
  3
  1
  0
  13
  #t
  101/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (app fold/coord (λ (co mm) ...) (-> (app none) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  52
  22
  9
  21
  0
  3
  3
  1
  0
  16
  #t
  58/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match (-> (app equal? co₀ co) <-) (#f) _)\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (match mmo (some mo₀) ((none) (-> (app some mo₁) <-)))\n  (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (match (-> xs <-) (nil) (cons x rest-xs)) (env ((□? (f xs)))))\""
  36
  26
  4
  6
  14
  1
  15
  1
  31/49
  16
  #f
  147/26
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app board-lookup co (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  140
  69
  40
  31
  36
  14
  50
  1
  92/189
  55
  #f
  124/23
  ((4 4 0) (4 4 0) (4 4 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval (match a ((marked _) (-> (app #t) <-)) _) (env ((□? (a)))))\""
  143
  71
  40
  32
  36
  14
  50
  1
  184/399
  57
  #t
  382/71
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  match
  "\"'(eval (λ (a) (-> (match a ...) <-)) (env ((□? (a)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app horizon< (app move-horizon mo₀) (-> (app move-horizon mo₁) <-))\n  (env ((□? (mmo mo₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (letrec* (some-v ... zero-player-game) (-> (app zero-player-game) <-))\n  (env ()))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (match mmo (some mo₀) ((none) (-> (app some mo₁) <-)))\n  (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (match (-> this-play <-) (player mark action))\n  (env ((□? (bo this-play that-play)))))\""
  57
  39
  7
  11
  10
  2
  12
  1
  5/76
  20
  #f
  20/3
  ((5 5 0) (5 5 0) (5 5 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app wins? (-> bo <-) mark) (env ((□? (bo this-play that-play)))))\""
  74
  55
  7
  12
  23
  2
  25
  1
  139/672
  36
  #t
  31/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (let (_) (-> (app display \"Cat's game.\\n\") <-))\n  (env ((□? (bo this-play that-play)))))\""
  89
  70
  7
  12
  33
  2
  35
  1
  179/756
  44
  #t
  83/14
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match (-> (app wins? bo mark) <-) (#f) _)\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app\n   horizon-add1\n   (->\n    (app move-horizon (app some-v (app minimax bo that-mark this-mark)))\n    <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app i⁻¹ (-> rc <-)) (env ((□? (rc)) (□? (b m)))))\""
  53
  30
  15
  8
  23
  5
  28
  1
  53/66
  28
  #f
  51/10
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app minimax bo (-> that-mark <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  116
  60
  26
  30
  24
  9
  33
  1
  7/15
  46
  #f
  21/4
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval (app foldl f (-> (app f x acc) <-) xs) (env ((□? (f acc l)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (match (-> xs <-) (nil) (cons x rest-xs)) (env ((□? (f xs)))))\""
  65
  44
  8
  13
  22
  1
  23
  1
  67/120
  26
  #f
  249/44
  ((11/2 11/2 0) (11/2 11/2 0) (11/2 11/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match oc₀ (win) ((draw) (-> (app equal? oc₁ (app win)) <-)) (lose))\n  (env ((□? (oc₀ oc₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (match (-> a <-) (marked _) _) (env ((□? (a)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (-> (app andmap (λ (rc) ...) is) <-)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   (#f)\n   (_ (-> mo₁ <-)))\n  (env ((□? (mmo mo₁)))))\""
  8
  3
  2
  3
  0
  1
  1
  1
  0
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app foldl (λ (c x) ...) x (-> is <-)) (env ((□? (r x)) (□? (f x)))))\""
  13
  6
  2
  5
  2
  1
  3
  1
  1/3
  6
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  match
  "\"'(eval (λ (h₀ h₁) (-> (match h₀ ...) <-)) (env ((□? (h₀ h₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  let
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> (let (bo) ...) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₀ <-) oc₁) (env ((□? (h₀ h₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (let (bo)\n    (->\n     (app max-maybe-move mm (app move co (match (app wins? bo this-mark) ...)))\n     <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app f (-> x <-) acc) (env ((□? (f acc l)))))\""
  41
  31
  4
  6
  20
  1
  21
  1
  104/133
  20
  #f
  174/31
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app equal? m (-> m* <-)) (env ((□? (b co m)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (λ (bo this-mark that-mark)\n    (-> (app fold/coord (λ (co mm) ...) (app none)) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  match
  "\"'(eval\n  (match (app wins? bo mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app andmap f (-> rest-xs <-)) (env ((□? (f xs)))))\""
  65
  44
  8
  13
  22
  1
  23
  1
  67/120
  26
  #f
  249/44
  ((11/2 11/2 0) (11/2 11/2 0) (11/2 11/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app ormap (-> f <-) rest-xs) (env ((□? (f xs)))))\""
  82
  53
  12
  17
  25
  2
  27
  1
  983/1995
  30
  #f
  299/53
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app board-lookup co (-> bo <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  110
  72
  15
  23
  35
  3
  38
  1
  289/567
  48
  #f
  397/72
  ((1/2 1/2 0) (1/2 1/2 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app bo (-> co <-)) (env ((□? (co bo)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app and (app equal? oc₀ oc₁) (-> (app < sc₀ sc₁) <-))\n  (env ((□? (h₀ h₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval (app player (-> (app X) <-) human-action) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (app board-mark (-> co <-) mark bo)\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app coord rc (-> rc <-)) (env ((□? (rc)) (□? (b m)))))\""
  53
  30
  15
  8
  23
  5
  28
  1
  53/66
  28
  #f
  51/10
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app andmap (λ (c) ...) (-> is <-)) (env ((□? (r)) (□? (b m)))))\""
  54
  31
  15
  8
  23
  5
  28
  1
  53/69
  29
  #t
  158/31
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app horizon< (app move-horizon mo₀) (-> (app move-horizon mo₁) <-))\n  (env ((□? (mmo mo₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval (λ (bo) (-> (app void) <-)) (env ((□? (bo)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app coord (-> rc <-) rc) (env ((□? (rc)) (□? (b m)))))\""
  56
  32
  15
  9
  23
  5
  28
  1
  53/72
  30
  #f
  163/32
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app play-turn empty-board player-one (-> player-two <-))\n  (env ((□? (player-one player-two)))))\""
  71
  39
  19
  13
  23
  6
  29
  1
  53/93
  36
  #f
  200/39
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval (λ (co bo) (-> (app bo co) <-)) (env ((□? (co bo)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app board-lookup co (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  14
  6
  2
  6
  1
  1
  2
  1
  1/6
  6
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app ormap (λ (c) ...) (-> is <-)) (env ((□? (b m)))))\""
  18
  9
  2
  7
  3
  1
  4
  1
  1/3
  9
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  letrec
  "\"'(eval\n  (let (... () (co (-> (letrec (loop) ...) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (let (... () (co (-> (app action bo) <-)) () ...) ...)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (match (-> i <-) (Ze) (On) (Tw)) (env ((□? (i)))))\""
  60
  33
  17
  10
  23
  6
  29
  1
  53/69
  29
  #f
  57/11
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval (app horizon oc (-> (app + sc 1) <-)) (env ((□? (h)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match\n   h₁\n   ((horizon oc₁ sc₁)\n    (->\n     (app or (app oc< oc₀ oc₁) (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n     <-)))\n  (env ((□? (h₀ h₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> mm <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app action (-> bo <-)) (env ((□? ()) (□? (bo this-play that-play)))))\""
  28
  19
  3
  6
  10
  1
  11
  1
  11/20
  18
  #f
  98/19
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval (app make-ai-action (-> (app O) <-)) (env ((□? ()))))\""
  31
  21
  3
  7
  10
  1
  11
  1
  11/25
  20
  #t
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (match (-> move-horizon-v <-) (move _ move-horizon-x) _)\n  (env ((□? (move-horizon-v)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (λ (bo this-mark that-mark)\n    (-> (app fold/coord (λ (co mm) ...) (app none)) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord r c) m)\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  30
  14
  4
  12
  1
  1
  2
  1
  1/12
  14
  #t
  36/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  match
  "\"'(eval\n  (let (bo) (-> (match (app wins? bo mark) ...) <-))\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (match\n   some-v-v\n   (some some-v-x)\n   (_ (-> (app error \"invalid match for some-v\") <-)))\n  (env ((□? (some-v-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app some-v (-> (app maximin bo that-mark this-mark) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (app player (app O) (-> (app make-ai-action (app O)) <-))\n  (env ((□? ()))))\""
  7
  4
  0
  3
  1
  0
  1
  1
  1/4
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord r c) m)\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  37
  18
  4
  15
  2
  1
  3
  1
  1/8
  18
  #t
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match (app b co) (blank) ((marked m*) (-> (app equal? m m*) <-)))\n  (env ((□? (b co m)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval (app cons (app Tw) (-> (app nil) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  8
  3
  2
  3
  0
  1
  1
  1
  0
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval (app or (-> (app f x) <-) (app ormap f rest-xs)) (env ((□? (f xs)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app some (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  8
  3
  2
  3
  0
  1
  1
  1
  0
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app maximin bo (-> that-mark <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  54
  22
  11
  21
  0
  4
  4
  1
  0
  16
  #f
  60/11
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord rc rc) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  88
  45
  15
  28
  1
  5
  6
  1
  1/24
  39
  #t
  79/15
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app andmap f (-> rest-xs <-)) (env ((□? (f xs)))))\""
  177
  107
  23
  47
  35
  6
  41
  1
  197/760
  83
  #f
  576/107
  ((8 8 0) (8 8 0) (8 8 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app coord rc (-> rc <-)) (env ((□? (rc)) (□? (b m)))))\""
  215
  128
  37
  50
  52
  16
  68
  1
  368/969
  101
  #f
  685/128
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app wins? (-> bo <-) mark) (env ((□? (bo this-play that-play)))))\""
  215
  128
  37
  50
  52
  16
  68
  1
  368/969
  101
  #t
  685/128
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   ((#f) (-> mo₀ <-))\n   _)\n  (env ((□? (mmo mo₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord rc (app i⁻¹ rc)) <-) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  match
  "\"'(eval (λ (oc₀ oc₁) (-> (match oc₀ ...) <-)) (env ((□? (oc₀ oc₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval (app equal? oc₁ (-> (app win) <-)) (env ((□? (oc₀ oc₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) human-action)\n   (-> (app player (app O) human-action) <-))\n  (env ((□? ()))))\""
  6
  4
  0
  2
  0
  0
  0
  1
  0
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval (app foldl f (-> (app f x acc) <-) xs) (env ((□? (f acc l)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   (#f)\n   (_ (-> mo₀ <-)))\n  (env ((□? (mmo mo₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (match (-> ma <-) (X) (O)) (env ((□? (ma)))))\""
  28
  11
  6
  11
  0
  2
  2
  1
  0
  9
  #f
  57/11
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app board-mark co this-mark (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  42
  17
  8
  17
  1
  3
  4
  1
  1/14
  15
  #t
  87/17
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  match
  "\"'(eval\n  (app move co (-> (match (app wins? bo this-mark) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app wins? bo (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  45
  16
  9
  20
  0
  3
  3
  1
  0
  9
  #f
  87/16
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval (app player (-> (app X) <-) human-action) (env ((□? ()))))\""
  47
  18
  9
  20
  0
  3
  3
  1
  0
  11
  #t
  97/18
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app ormap (λ (c) ...) (-> is <-)) (env ((□? (b m)))))\""
  51
  21
  9
  21
  2
  3
  5
  1
  2/15
  14
  #t
  16/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  match
  "\"'(eval (λ (b co m) (-> (match (app b co) ...) <-)) (env ((□? (b co m)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₁ <-) (app win)) (env ((□? (oc₀ oc₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app andmap (λ (rc) ...) (-> is <-)) (env ((□? (b m)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match oc₀ (win) ((draw) (-> (app equal? oc₁ (app win)) <-)) (lose))\n  (env ((□? (oc₀ oc₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (app horizon (-> (app draw) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval (match a ((marked _) (-> (app #t) <-)) _) (env ((□? (a)))))\""
  7
  4
  0
  3
  0
  0
  0
  1
  0
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  letrec*
  "\"'(eval\n  (lettypes cons ... player (letrec* (some-v ... zero-player-game) ...))\n  (env ()))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (app horizon (-> (app lose) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (app cons (-> (app Ze) <-) (app cons (app On) (app cons (app Tw) (app nil))))\n  (env ()))\""
  6
  4
  0
  2
  2
  0
  2
  1
  1/2
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  match
  "\"'(eval\n  (app\n   some\n   (->\n    (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...)\n    <-))\n  (env ((□? (mmo mo₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app foldl (λ (r x) ...) x (-> is <-)) (env ((□? (f x)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (app cons (app Ze) (-> (app cons (app On) (app cons (app Tw) (app nil))) <-))\n  (env ()))\""
  6
  5
  0
  1
  4
  0
  4
  1
  4/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (match mmo (some mo₀) ((none) (-> (app some mo₁) <-)))\n  (env ((□? (mmo mo₁)))))\""
  9
  7
  0
  2
  4
  0
  4
  1
  4/7
  7
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app some (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  18
  11
  2
  5
  4
  1
  5
  1
  2/5
  11
  #t
  56/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (match\n   mmo\n   ((some mo₀)\n    (->\n     (app\n      some\n      (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n     <-))\n   (none))\n  (env ((□? (mmo mo₁)))))\""
  21
  13
  2
  6
  4
  1
  5
  1
  1/3
  13
  #t
  66/13
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  match
  "\"'(eval (λ (a) (-> (match a ...) <-)) (env ((□? (a)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (match (-> this-play <-) (player mark action))\n  (env ((□? (bo this-play that-play)))))\""
  54
  37
  7
  10
  10
  2
  12
  1
  5/68
  18
  #f
  250/37
  ((5 5 0) (5 5 0) (5 5 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) human-action) <-)\n   (app player (app O) (app make-ai-action (app O))))\n  (env ((□? ()))))\""
  54
  37
  7
  10
  10
  2
  12
  1
  5/68
  18
  #t
  250/37
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (letrec* (some-v ... zero-player-game) (-> (app zero-player-game) <-))\n  (env ()))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval (λ (c) (-> (app andmap (λ (r) ...) is) <-)) (env ((□? (c)) (□? (b m)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (match oc₀ ((win) (-> (app #f) <-)) (draw) (lose))\n  (env ((□? (oc₀ oc₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app board-lookup (-> co <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  16
  7
  2
  7
  1
  0
  1
  1
  1/7
  7
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (match (-> h <-) (horizon oc sc)) (env ((□? (h)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> mm <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval (app or (app f x) (-> (app ormap f rest-xs) <-)) (env ((□? (f xs)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval (λ (bo) (-> (app void) <-)) (env ((□? (bo)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  let
  "\"'(eval\n  (match this-play ((player mark action) (-> (let (co) ...) <-)))\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match l (nil) ((cons x xs) (-> (app foldl f (app f x acc) xs) <-)))\n  (env ((□? (f acc l)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app maximin (-> bo <-) ma (app mark⁻¹ ma)) (env ((□? (bo)) (□? (ma)))))\""
  85
  34
  33
  18
  22
  12
  34
  1
  1/2
  33
  #f
  86/17
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app f (-> x <-) acc) (env ((□? (f acc l)))))\""
  126
  65
  37
  24
  42
  13
  55
  1
  167/259
  53
  #f
  346/65
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match (-> (app full? bo) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  match
  "\"'(eval (λ (some-v-v) (-> (match some-v-v ...) <-)) (env ((□? (some-v-v)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match (app equal? co₀ co) ((#f) (-> (app board-lookup co bo) <-)) _)\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app minimax bo that-mark (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  44
  15
  9
  20
  0
  3
  3
  1
  0
  9
  #f
  27/5
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval (app and (-> (app f x) <-) (app andmap f rest-xs)) (env ((□? (f xs)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (match (-> xs <-) (nil) (cons x rest-xs)) (env ((□? (f xs)))))\""
  65
  44
  8
  13
  22
  1
  23
  1
  67/120
  26
  #f
  249/44
  ((11/2 11/2 0) (11/2 11/2 0) (11/2 11/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app full? (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  73
  49
  8
  16
  23
  1
  24
  1
  149/315
  31
  #t
  274/49
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (app player (app X) (-> (app make-ai-action (app X)) <-))\n  (env ((□? ()))))\""
  80
  53
  8
  19
  24
  1
  25
  1
  164/375
  35
  #t
  294/53
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (match (-> move-coord-v <-) (move move-coord-x _) _)\n  (env ((□? (move-coord-v)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app equal? oc₀ (-> oc₁ <-)) (env ((□? (h₀ h₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  let
  "\"'(eval\n  (λ (bo this-play that-play) (-> (let (_) ...) <-))\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app wins? bo (-> mark <-)) (env ((□? (bo this-play that-play)))))\""
  74
  57
  7
  10
  15
  2
  17
  1
  1/16
  30
  #f
  374/57
  ((7 7 0) (7 7 0) (7 7 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (app horizon (-> (app win) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  78
  59
  7
  12
  15
  2
  17
  1
  15/256
  32
  #t
  384/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app < (-> sc₀ <-) sc₁) (env ((□? (h₀ h₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval (λ (r) (-> (app andmap (λ (c) ...) is) <-)) (env ((□? (r)) (□? (b)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app (-> bo <-) co) (env ((□? (co bo)))))\""
  190
  98
  47
  45
  26
  16
  42
  1
  113/448
  85
  #f
  535/98
  ((29/2 29/2 0) (29/2 29/2 0) (29/2 29/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app andmap (λ (r) ...) (-> is <-)) (env ((□? (c)) (□? (b m)))))\""
  195
  101
  47
  47
  28
  16
  44
  1
  141/490
  88
  #t
  550/101
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match\n   h₁\n   ((horizon oc₁ sc₁)\n    (->\n     (app or (app oc< oc₀ oc₁) (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n     <-)))\n  (env ((□? (h₀ h₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app\n   or\n   (-> (app oc< oc₀ oc₁) <-)\n   (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n  (env ((□? (h₀ h₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app\n   horizon-add1\n   (->\n    (app move-horizon (app some-v (app minimax bo that-mark this-mark)))\n    <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app play-turn empty-board player-one (-> player-two <-))\n  (env ((□? (player-one player-two)))))\""
  15
  7
  4
  4
  0
  1
  1
  1
  0
  6
  #f
  37/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app some-v (-> (app maximin bo ma (app mark⁻¹ ma)) <-))\n  (env ((□? (bo)) (□? (ma)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (app player (-> (app O) <-) (app make-ai-action (app O)))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (λ (c) (-> (app marked? (app b (app coord r c))) <-))\n  (env ((□? (c)) (□? (r)) (□? (b)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app minimax bo (-> that-mark <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  63
  30
  11
  22
  1
  4
  5
  1
  1/18
  18
  #f
  27/5
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  let
  "\"'(eval\n  (λ () (-> (let (co) ...) <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval (app cons (app On) (-> (app cons (app Tw) (app nil)) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  10
  7
  0
  3
  3
  0
  3
  1
  3/7
  7
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app blank? (-> (app board-lookup co bo) <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (match (-> a <-) (blank) _) (env ((□? (a)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) human-action)\n      (app player (app O) human-action))\n     <-))\n  (env ((□? ()))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) human-action) <-)\n   (app player (app O) human-action))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f)\n    (->\n     (app\n      horizon-add1\n      (app move-horizon (app some-v (app maximin bo that-mark this-mark))))\n     <-))\n   _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app ormap (λ (r) ...) (-> is <-)) (env ((□? (b m)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (app board-mark (-> co <-) mark bo)\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  match
  "\"'(eval (λ (ma) (-> (match ma ...) <-)) (env ((□? (ma)))))\""
  37
  19
  6
  12
  0
  2
  2
  1
  0
  15
  #f
  99/19
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval (match a ((blank) (-> (app #t) <-)) _) (env ((□? (a)))))\""
  40
  21
  6
  13
  0
  2
  2
  1
  0
  17
  #t
  109/21
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (match (-> xs <-) (nil) (cons x rest-xs)) (env ((□? (f xs)))))\""
  73
  45
  10
  18
  14
  3
  17
  1
  62/189
  31
  #f
  82/15
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app board-lookup (-> co <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  86
  50
  12
  24
  15
  3
  18
  1
  69/224
  36
  #t
  271/50
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (match move-horizon-v ((move _ move-horizon-x) (-> move-horizon-x <-)) _)\n  (env ((□? (move-horizon-v)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord rc rc) (-> m <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  164
  109
  22
  33
  21
  7
  28
  1
  7/108
  55
  #f
  661/109
  ((14 14 0) (14 14 0) (14 14 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app oc< (-> oc₀ <-) oc₁) (env ((□? (h₀ h₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (λ (bo) (-> (app error 'human-action \"not implemented\") <-))\n  (env ((□? (bo)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app board-lookup co (-> bo <-)) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  163
  83
  42
  38
  26
  15
  41
  1
  67/252
  75
  #f
  442/83
  ((21/2 21/2 0) (21/2 21/2 0) (21/2 21/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  match
  "\"'(eval\n  (app move co (-> (match (app wins? bo this-mark) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f) (-> (app play-turn bo that-play this-play) <-))\n   _)\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> co <-)))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match\n   (-> (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) <-)\n   (#f)\n   _)\n  (env ((□? (mmo mo₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval (app not (-> (app equal? oc₁ (app lose)) <-)) (env ((□? (oc₀ oc₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (λ (r x) (-> (app foldl (λ (c x) ...) x is) <-))\n  (env ((□? (r x)) (□? (f x)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (λ (bo this-mark that-mark)\n    (-> (app fold/coord (λ (co mm) ...) (app none)) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval (match i (Ze) ((On) (-> (app On) <-)) (Tw)) (env ((□? (i)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app and (-> (app equal? oc₀ oc₁) <-) (app < sc₀ sc₁))\n  (env ((□? (h₀ h₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (match (app b co) ((blank) (-> (app #f) <-)) (marked m*))\n  (env ((□? (b co m)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  49
  32
  11
  6
  23
  5
  28
  1
  53/72
  30
  #f
  163/32
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (λ (r) (-> (app marked-with? b (app coord r c) m) <-))\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app blank? (-> (app board-lookup co bo) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app wins? (-> bo <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  9
  5
  0
  4
  1
  0
  1
  1
  1/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (match (-> h₁ <-) (horizon oc₁ sc₁)) (env ((□? (h₀ h₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app play-turn bo that-play (-> this-play <-))\n  (env ((□? (bo this-play that-play)))))\""
  53
  36
  7
  10
  10
  2
  12
  1
  5/64
  18
  #f
  20/3
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app play-turn (-> bo <-) that-play this-play)\n  (env ((□? (bo this-play that-play)))))\""
  70
  52
  7
  11
  23
  2
  25
  1
  139/588
  34
  #t
  321/52
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (match (-> i <-) (Ze) (On) (Tw)) (env ((□? (i)))))\""
  130
  85
  24
  21
  46
  8
  54
  1
  1901/3696
  63
  #f
  492/85
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app board-lookup co (-> bo <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  144
  98
  24
  22
  52
  8
  60
  1
  4075/7896
  75
  #f
  559/98
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app foldl (λ (c x) ...) x (-> is <-)) (env ((□? (r x)) (□? (f x)))))\""
  147
  99
  24
  24
  52
  8
  60
  1
  4075/8064
  76
  #t
  188/33
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval (match a (marked _) (_ (-> (app #f) <-))) (env ((□? (a)))))\""
  150
  101
  24
  25
  52
  8
  60
  1
  163/336
  78
  #t
  574/101
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (app player (-> (app O) <-) (app make-ai-action (app O)))\n  (env ((□? ()))))\""
  152
  103
  24
  25
  52
  8
  60
  1
  4075/8736
  80
  #t
  584/103
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  match
  "\"'(eval\n  (let (bo) (-> (match (app wins? bo mark) ...) <-))\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app wins? (-> bo <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  9
  5
  0
  4
  1
  0
  1
  1
  1/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app foldl (λ (r x) ...) (-> x <-) is) (env ((□? (f x)))))\""
  19
  10
  3
  6
  1
  1
  2
  1
  1/10
  10
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app board-mark co mark (-> bo <-))\n  (env ((□? (bo this-play that-play)))))\""
  44
  28
  6
  10
  10
  2
  12
  1
  61/240
  27
  #f
  143/28
  ((1/2 1/2 0) (1/2 1/2 0) (1 1 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app equal? (-> co₀ <-) co) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  match
  "\"'(eval\n  (λ (move-horizon-v) (-> (match move-horizon-v ...) <-))\n  (env ((□? (move-horizon-v)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval (app coord rc (-> (app i⁻¹ rc) <-)) (env ((□? (rc)) (□? (b m)))))\""
  80
  53
  17
  10
  32
  6
  38
  1
  68/99
  45
  #f
  279/53
  ((2 2 0) (5/2 5/2 0) (2 2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval (app make-ai-action (-> (app O) <-)) (env ((□? ()))))\""
  83
  55
  17
  11
  32
  6
  38
  1
  68/105
  47
  #t
  289/55
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (let (bo)\n    (->\n     (app max-maybe-move mm (app move co (match (app wins? bo this-mark) ...)))\n     <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (app fold/coord (λ (co mm) ...) (-> (app none) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app move-horizon (-> (app some-v (app minimax bo that-mark this-mark)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app foldl (-> f <-) (app f x acc) xs) (env ((□? (f acc l)))))\""
  19
  9
  4
  6
  3
  1
  4
  1
  1/7
  4
  #f
  50/9
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  27
  14
  4
  9
  4
  1
  5
  1
  5/28
  9
  #t
  75/14
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app maximin bo that-mark (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  90
  44
  15
  31
  5
  5
  10
  1
  17/182
  27
  #f
  237/44
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (λ (player-one player-two)\n    (-> (app play-turn empty-board player-one player-two) <-))\n  (env ((□? (player-one player-two)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (letrec (loop) (-> (app loop) <-))\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval (app b (-> (app coord r c) <-)) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  5
  2
  0
  3
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (let (bo)\n    (->\n     (app min-maybe-move mm (app move co (match (app wins? bo this-mark) ...)))\n     <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (app player (-> (app X) <-) (app make-ai-action (app X)))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval (app cons (app Tw) (-> (app nil) <-)) (env ()))\""
  5
  4
  0
  1
  2
  0
  2
  1
  1/2
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (λ (bo this-mark that-mark)\n    (-> (app fold/coord (λ (co mm) ...) (app none)) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval (app make-ai-action (-> (app O) <-)) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₀ <-)) (env ((□? (mmo mo₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (λ (c x) (-> (app f (app coord r c) x) <-))\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app ormap f (-> rest-xs <-)) (env ((□? (f xs)))))\""
  33
  24
  4
  5
  14
  1
  15
  1
  31/42
  14
  #f
  137/24
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  match
  "\"'(eval (λ (h) (-> (match h ...) <-)) (env ((□? (h)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₀ <-) oc₁) (env ((□? (h₀ h₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (-> (app ormap (λ (c) ...) is) <-)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval (match i ((Ze) (-> (app Tw) <-)) (On) (Tw)) (env ((□? (i)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₀ <-)) (env ((□? (mmo mo₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  match
  "\"'(eval (λ (f xs) (-> (match xs ...) <-)) (env ((□? (f xs)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app action (-> bo <-)) (env ((□? ()) (□? (bo this-play that-play)))))\""
  28
  19
  3
  6
  10
  1
  11
  1
  11/20
  18
  #f
  98/19
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f)\n    (->\n     (app\n      horizon-add1\n      (app move-horizon (app some-v (app minimax bo that-mark this-mark))))\n     <-))\n   _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app some-v (-> (app minimax bo that-mark this-mark) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (match (app wins? bo this-mark) (#f) (_ (-> (app horizon (app win) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (app horizon (-> (app draw) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  6
  4
  0
  2
  0
  0
  0
  1
  0
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval (λ (co bo) (-> (app bo co) <-)) (env ((□? (co bo)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app\n   horizon-add1\n   (->\n    (app move-horizon (app some-v (app maximin bo that-mark this-mark)))\n    <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app andmap (λ (c) ...) (-> is <-)) (env ((□? (r)) (□? (b m)))))\""
  5
  3
  0
  2
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval (app and (app f x) (-> (app andmap f rest-xs) <-)) (env ((□? (f xs)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match (-> (app wins? bo this-mark) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app < sc₀ (-> sc₁ <-)) (env ((□? (h₀ h₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  match
  "\"'(eval\n  (match (app wins? bo this-mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app move-coord (-> (app some-v (app maximin bo ma (app mark⁻¹ ma))) <-))\n  (env ((□? (bo)) (□? (ma)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app equal? m (-> m* <-)) (env ((□? (b co m)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (λ (c) (-> (app marked-with? b (app coord r c) m) <-))\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (match some-v-v ((some some-v-x) (-> some-v-x <-)) _)\n  (env ((□? (some-v-v)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app board-lookup co (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  104
  43
  36
  25
  22
  13
  35
  1
  13/33
  39
  #f
  225/43
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (match move-coord-v ((move move-coord-x _) (-> move-coord-x <-)) _)\n  (env ((□? (move-coord-v)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (app player (app O) (-> (app make-ai-action (app O)) <-))\n  (env ((□? ()))))\""
  7
  4
  0
  3
  1
  0
  1
  1
  1/4
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app minimax (-> bo <-) that-mark this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  16
  9
  0
  7
  2
  0
  2
  1
  2/9
  9
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app andmap (λ (c) ...) (-> is <-)) (env ((□? (r)) (□? (b)))))\""
  21
  12
  0
  9
  4
  0
  4
  1
  1/3
  12
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  70
  40
  15
  15
  25
  5
  30
  1
  59/96
  38
  #f
  203/40
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (match xs ((nil) (-> (app #t) <-)) (cons x rest-xs))\n  (env ((□? (f xs)))))\""
  74
  44
  15
  15
  27
  5
  32
  1
  61/102
  42
  #t
  223/44
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app marked (-> ma <-)) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  238
  157
  37
  44
  48
  12
  60
  1
  13/48
  101
  #f
  904/157
  ((15 15 0) (15 15 0) (15 15 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app andmap (λ (r) ...) (-> is <-)) (env ((□? (b)))))\""
  239
  158
  37
  44
  48
  12
  60
  1
  143/534
  102
  #t
  909/158
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord r c) m)\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  296
  196
  45
  55
  65
  13
  78
  1
  568/2037
  140
  #t
  551/98
  ((4 4 0) (4 4 0) (4 4 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord r c) (-> m <-))\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  309
  209
  45
  55
  70
  13
  83
  1
  583/2121
  144
  #f
  1176/209
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app (-> f <-) x) (env ((□? (f xs)))))\""
  335
  229
  49
  57
  83
  14
  97
  1
  6833/24255
  158
  #f
  1320/229
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₁ <-) (app lose)) (env ((□? (oc₀ oc₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord r c) (-> m <-))\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  165
  109
  22
  34
  21
  7
  28
  1
  7/108
  55
  #f
  661/109
  ((29/2 29/2 0) (29/2 29/2 0) (14 14 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  match
  "\"'(eval (λ (a) (-> (match a ...) <-)) (env ((□? (a)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app mark⁻¹ (-> ma <-)) (env ((□? (bo)) (□? (ma)))))\""
  15
  7
  4
  4
  0
  1
  1
  1
  0
  6
  #f
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   (#f)\n   (_ (-> mo₁ <-)))\n  (env ((□? (mmo mo₁)))))\""
  23
  10
  6
  7
  0
  2
  2
  1
  0
  9
  #t
  51/10
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (match\n   mmo\n   ((some mo₀)\n    (->\n     (app\n      some\n      (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n     <-))\n   (none))\n  (env ((□? (mmo mo₁)))))\""
  26
  12
  6
  8
  0
  2
  2
  1
  0
  11
  #t
  61/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  let
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> (let (bo) ...) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (λ (bo)\n    (-> (app move-coord (app some-v (app maximin bo ma (app mark⁻¹ ma)))) <-))\n  (env ((□? (bo)) (□? (ma)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app blank? (-> (app board-lookup co bo) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval (λ (f x) (-> (app foldl (λ (r x) ...) x is) <-)) (env ((□? (f x)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (match (-> l <-) (nil) (cons x xs)) (env ((□? (f acc l)))))\""
  34
  24
  4
  6
  14
  1
  15
  1
  31/42
  14
  #f
  137/24
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  match
  "\"'(eval\n  (λ (co mm) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app (-> b <-) co) (env ((□? (b co m)))))\""
  77
  30
  9
  38
  1
  2
  3
  1
  1/16
  30
  #t
  16/3
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app oc< oc₀ (-> oc₁ <-)) (env ((□? (h₀ h₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (λ (rc) (-> (app marked-with? b (app coord rc rc) m) <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match (-> (app equal? co₀ co) <-) (#f) _)\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  let
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> (let (bo) ...) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app board-lookup co (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  14
  6
  2
  6
  1
  1
  2
  1
  1/6
  6
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app foldl f (app f x acc) (-> xs <-)) (env ((□? (f acc l)))))\""
  48
  30
  6
  12
  15
  2
  17
  1
  23/42
  20
  #f
  167/30
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (-> (app andmap (λ (rc) ...) is) <-)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (letrec*\n   (...\n    move-horizon\n    (is\n     (->\n      (app cons (app Ze) (app cons (app On) (app cons (app Tw) (app nil))))\n      <-))\n    mark⁻¹\n    ...)\n   ...)\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord rc rc) <-) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  6
  4
  0
  2
  2
  0
  2
  1
  1/2
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app b (-> co <-)) (env ((□? (b co m)))))\""
  24
  11
  5
  8
  2
  1
  3
  1
  2/11
  10
  #f
  58/11
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (app\n   max-maybe-move\n   (-> mm <-)\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> (app loop) <-)) _)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval (λ (b) (-> (app andmap (λ (r) ...) is) <-)) (env ((□? (b)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord r c) <-) m)\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  5
  2
  0
  3
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) (app make-ai-action (app X)))\n   (-> (app player (app O) (app make-ai-action (app O))) <-))\n  (env ((□? ()))))\""
  8
  4
  0
  4
  0
  0
  0
  1
  0
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app (-> b <-) (app coord r c)) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  38
  18
  4
  16
  1
  1
  2
  1
  1/16
  18
  #t
  46/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app board-lookup (-> co <-) bo) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match\n   xs\n   (nil)\n   ((cons x rest-xs) (-> (app or (app f x) (app ormap f rest-xs)) <-)))\n  (env ((□? (f xs)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (match (-> some-v-v <-) (some some-v-x) _) (env ((□? (some-v-v)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app move (-> co <-) (match (app wins? bo this-mark) ...))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  13
  5
  2
  6
  1
  0
  1
  1
  1/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> mm <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  let
  "\"'(eval\n  (match (app wins? bo mark) (#f) (_ (-> (let (_) ...) <-)))\n  (env ((□? (bo this-play that-play)))))\""
  4
  3
  0
  1
  0
  0
  0
  1
  0
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co this-mark bo) <-)) () ...) ...)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  12
  7
  0
  5
  1
  0
  1
  1
  1/7
  7
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval (λ (r) (-> (app andmap (λ (c) ...) is) <-)) (env ((□? (r)) (□? (b m)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval (app make-ai-action (-> (app X) <-)) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval (app cons (-> (app On) <-) (app cons (app Tw) (app nil))) (env ()))\""
  5
  4
  0
  1
  2
  0
  2
  1
  1/2
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  match
  "\"'(eval\n  (λ (co mm) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval (match ma ((X) (-> (app O) <-)) (O)) (env ((□? (ma)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (app horizon (app draw) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  7
  4
  0
  3
  0
  0
  0
  1
  0
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (match xs ((nil) (-> (app #f) <-)) (cons x rest-xs))\n  (env ((□? (f xs)))))\""
  10
  6
  0
  4
  0
  0
  0
  1
  0
  6
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  match
  "\"'(eval\n  (match (app wins? bo mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord r c) <-) m)\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  5
  2
  0
  3
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app board-mark co (-> this-mark <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  50
  18
  9
  23
  0
  3
  3
  1
  0
  11
  #f
  97/18
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  match
  "\"'(eval (λ (f xs) (-> (match xs ...) <-)) (env ((□? (f xs)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match (app b co) (blank) ((marked m*) (-> (app equal? m m*) <-)))\n  (env ((□? (b co m)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co this-mark bo) <-)) () ...) ...)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  8
  4
  0
  4
  1
  0
  1
  1
  1/4
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app board-mark co this-mark (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  104
  43
  36
  25
  22
  13
  35
  1
  13/33
  39
  #f
  225/43
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  match
  "\"'(eval (λ (mmo mo₁) (-> (match mmo ...) <-)) (env ((□? (mmo mo₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app board-mark (-> co <-) this-mark bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  13
  5
  2
  6
  1
  0
  1
  1
  1/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app maximin (-> bo <-) that-mark this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  24
  13
  2
  9
  3
  0
  3
  1
  1/4
  13
  #t
  67/13
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord rc (app i⁻¹ rc)) (-> m <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  203
  132
  26
  45
  24
  7
  31
  1
  3/32
  74
  #f
  196/33
  ((16 16 0) (16 16 0) (16 16 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (match (-> mmo <-) (some mo₀) (none)) (env ((□? (mmo mo₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (app horizon (app draw) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app + (-> sc <-) 1) (env ((□? (h)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app equal? (-> m <-) m*) (env ((□? (b co m)))))\""
  231
  133
  27
  71
  21
  8
  29
  1
  7/116
  55
  #f
  115/19
  ((21 21 0) (41/2 41/2 0) (41/2 41/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  match
  "\"'(eval (λ (mmo mo₁) (-> (match mmo ...) <-)) (env ((□? (mmo mo₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  let
  "\"'(eval (let (co) (-> (let (bo) ...) <-)) (env ((□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  8
  5
  0
  3
  1
  0
  1
  1
  1/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app play-turn empty-board (-> player-one <-) player-two)\n  (env ((□? (player-one player-two)))))\""
  23
  12
  4
  7
  1
  1
  2
  1
  1/12
  11
  #f
  31/6
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app board-mark co (-> mark <-) bo)\n  (env ((□? (bo this-play that-play)))))\""
  86
  68
  7
  11
  25
  2
  27
  1
  109/735
  54
  #f
  405/68
  ((5 5 0) (5 5 0) (5 5 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (match (-> mmo <-) (some mo₀) (none)) (env ((□? (mmo mo₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app horizon< (-> (app move-horizon mo₀) <-) (app move-horizon mo₁))\n  (env ((□? (mmo mo₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match (-> (app full? bo) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app (-> f <-) x) (env ((□? (f xs)))))\""
  43
  22
  8
  13
  7
  1
  8
  1
  7/120
  12
  #f
  80/11
  ((5 5 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  match
  "\"'(eval\n  (let (co) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  match
  "\"'(eval (λ (f acc l) (-> (match l ...) <-)) (env ((□? (f acc l)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app f (-> x <-)) (env ((□? (f xs)))))\""
  40
  31
  4
  5
  20
  1
  21
  1
  104/133
  20
  #f
  174/31
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app horizon (-> oc <-) (app + sc 1)) (env ((□? (h)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app move (-> co <-) (match (app wins? bo this-mark) ...))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  13
  5
  2
  6
  1
  0
  1
  1
  1/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  match
  "\"'(eval (λ (h₀ h₁) (-> (match h₀ ...) <-)) (env ((□? (h₀ h₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app f (-> x <-)) (env ((□? (f xs)))))\""
  72
  51
  8
  13
  28
  1
  29
  1
  224/345
  32
  #f
  286/51
  ((6 6 0) (6 6 0) (6 6 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval (match i (Ze) (On) ((Tw) (-> (app Ze) <-))) (env ((□? (i)))))\""
  75
  53
  8
  14
  28
  1
  29
  1
  224/375
  34
  #t
  296/53
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (match l ((nil) (-> acc <-)) (cons x xs)) (env ((□? (f acc l)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match (-> (app wins? bo mark) <-) (#f) _)\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app\n   or\n   (-> (app ormap (λ (r) ...) is) <-)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  8
  3
  2
  3
  0
  1
  1
  1
  0
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  match
  "\"'(eval\n  (let (_) (-> (match this-play ...) <-))\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval (app player (-> (app X) <-) human-action) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  56
  32
  15
  9
  23
  5
  28
  1
  53/72
  30
  #f
  163/32
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval (match a (blank) (_ (-> (app #f) <-))) (env ((□? (a)))))\""
  59
  34
  15
  10
  23
  5
  28
  1
  53/78
  32
  #t
  173/34
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  91
  50
  26
  15
  32
  10
  42
  1
  32/51
  46
  #f
  128/25
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (app some-v (-> (app maximin bo that-mark this-mark) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  112
  65
  26
  21
  42
  10
  52
  1
  551/900
  54
  #f
  324/65
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app ormap (-> f <-) rest-xs) (env ((□? (f xs)))))\""
  129
  74
  30
  25
  45
  11
  56
  1
  3917/6720
  58
  #f
  187/37
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match\n   oc₀\n   (win)\n   (draw)\n   ((lose) (-> (app not (app equal? oc₁ (app lose))) <-)))\n  (env ((□? (oc₀ oc₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (app f (-> (app coord r c) <-) x)\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  5
  2
  0
  3
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app (-> f <-) x acc) (env ((□? (f acc l)))))\""
  23
  12
  4
  7
  3
  1
  4
  1
  1/14
  6
  #f
  11/2
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  79
  59
  11
  9
  31
  5
  36
  1
  376/609
  41
  #f
  339/59
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app coord (-> rc <-) rc) (env ((□? (rc)) (□? (b m)))))\""
  118
  75
  26
  17
  40
  10
  50
  1
  151/259
  55
  #f
  422/75
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval (app maximin bo ma (-> (app mark⁻¹ ma) <-)) (env ((□? (bo)) (□? (ma)))))\""
  158
  97
  32
  29
  41
  12
  53
  1
  158/371
  73
  #f
  536/97
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord r c) m)\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  219
  129
  45
  45
  54
  19
  73
  1
  509/1365
  105
  #t
  698/129
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (λ (b m)\n    (->\n     (app\n      or\n      (app ormap (λ (r) ...) is)\n      (app ormap (λ (c) ...) is)\n      (app andmap (λ (rc) ...) is)\n      (app andmap (λ (rc) ...) is))\n     <-))\n  (env ((□? (b m)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app coord (-> rc <-) (app i⁻¹ rc)) (env ((□? (rc)) (□? (b m)))))\""
  53
  30
  15
  8
  23
  5
  28
  1
  53/66
  28
  #f
  51/10
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match\n   xs\n   (nil)\n   ((cons x rest-xs) (-> (app and (app f x) (app andmap f rest-xs)) <-)))\n  (env ((□? (f xs)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval (λ (co) (-> (app blank) <-)) (env ((□? (co)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval (app horizon oc (-> (app + sc 1) <-)) (env ((□? (h)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app i⁻¹ (-> rc <-)) (env ((□? (rc)) (□? (b m)))))\""
  53
  30
  15
  8
  23
  5
  28
  1
  53/66
  28
  #f
  51/10
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app\n   or\n   (app oc< oc₀ oc₁)\n   (-> (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)) <-))\n  (env ((□? (h₀ h₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) human-action)\n      (app player (app O) (app make-ai-action (app O))))\n     <-))\n  (env ((□? ()))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match (-> (app full? bo) <-) (#f) _)\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app horizon< (-> (app move-horizon mo₀) <-) (app move-horizon mo₁))\n  (env ((□? (mmo mo₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app (-> f <-) (app coord r c) x)\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  11
  3
  3
  5
  0
  1
  1
  1
  0
  2
  #f
  16/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (match\n   move-coord-v\n   (move move-coord-x _)\n   (_ (-> (app error \"invalid match for move-coord\") <-)))\n  (env ((□? (move-coord-v)))))\""
  14
  5
  3
  6
  0
  1
  1
  1
  0
  4
  #t
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  22
  10
  3
  9
  1
  1
  2
  1
  1/10
  9
  #t
  51/10
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (app\n   min-maybe-move\n   mm\n   (-> (app move co (match (app wins? bo this-mark) ...)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  25
  12
  3
  10
  1
  1
  2
  1
  1/12
  11
  #t
  61/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  59
  39
  6
  14
  17
  2
  19
  1
  107/300
  37
  #f
  67/13
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (λ (rc) (-> (app marked-with? b (app coord rc (app i⁻¹ rc)) m) <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) human-action)\n   (-> (app player (app O) (app make-ai-action (app O))) <-))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  56
  32
  15
  9
  23
  5
  28
  1
  53/72
  30
  #f
  163/32
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (-> (app andmap (λ (rc) ...) is) <-))\n  (env ((□? (b m)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (match (app equal? co₀ co) (#f) (_ (-> (app marked ma) <-)))\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval (app player (-> (app O) <-) human-action) (env ((□? ()))))\""
  7
  4
  0
  3
  0
  0
  0
  1
  0
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (app board-lookup (-> co <-) bo)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (app\n   max-maybe-move\n   mm\n   (-> (app move co (match (app wins? bo this-mark) ...)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  match
  "\"'(eval\n  (match (app wins? bo this-mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  match
  "\"'(eval\n  (app\n   some\n   (->\n    (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...)\n    <-))\n  (env ((□? (mmo mo₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app marked? (-> (app b (app coord r c)) <-))\n  (env ((□? (c)) (□? (r)) (□? (b)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (app\n   min-maybe-move\n   (-> mm <-)\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app horizon< (app move-horizon mo₀) (-> (app move-horizon mo₁) <-))\n  (env ((□? (mmo mo₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app board-mark (-> co <-) this-mark bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  13
  5
  2
  6
  1
  0
  1
  1
  1/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app full? (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  22
  10
  2
  10
  2
  0
  2
  1
  1/5
  10
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord rc (app i⁻¹ rc)) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  47
  24
  6
  17
  3
  1
  4
  1
  1/8
  24
  #t
  125/24
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  match
  "\"'(eval\n  (match h₀ ((horizon oc₀ sc₀) (-> (match h₁ ...) <-)))\n  (env ((□? (h₀ h₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (match mmo (some mo₀) ((none) (-> (app some mo₁) <-)))\n  (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (app f (app coord r c) (-> x <-))\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app move-horizon (-> (app some-v (app maximin bo that-mark this-mark)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (match (app wins? bo this-mark) (#f) (_ (-> (app horizon (app lose) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app andmap (-> f <-) rest-xs) (env ((□? (f xs)))))\""
  46
  23
  8
  15
  7
  1
  8
  1
  7/135
  14
  #f
  160/23
  ((4 4 0) (4 4 0) (4 4 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  match
  "\"'(eval (λ (i) (-> (match i ...) <-)) (env ((□? (i)))))\""
  137
  102
  17
  18
  47
  6
  53
  1
  103/220
  68
  #f
  99/17
  ((6 6 0) (6 6 0) (6 6 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (match h ((horizon oc sc) (-> (app horizon oc (app + sc 1)) <-)))\n  (env ((□? (h)))))\""
  140
  104
  17
  19
  47
  6
  53
  1
  103/230
  70
  #t
  151/26
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app andmap (λ (rc) ...) (-> is <-)) (env ((□? (b m)))))\""
  140
  104
  17
  19
  47
  6
  53
  1
  103/230
  70
  #t
  151/26
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app equal? co₀ (-> co <-)) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match (-> (app wins? bo this-mark) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app play-turn bo (-> that-play <-) this-play)\n  (env ((□? (bo this-play that-play)))))\""
  53
  36
  7
  10
  10
  2
  12
  1
  5/64
  18
  #f
  20/3
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app and (app equal? oc₀ oc₁) (-> (app < sc₀ sc₁) <-))\n  (env ((□? (h₀ h₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) (app make-ai-action (app X)))\n      (app player (app O) (app make-ai-action (app O))))\n     <-))\n  (env ((□? ()))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval (match (-> (app b co) <-) (blank) (marked m*)) (env ((□? (b co m)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app maximin bo (-> ma <-) (app mark⁻¹ ma)) (env ((□? (bo)) (□? (ma)))))\""
  15
  7
  4
  4
  0
  1
  1
  1
  0
  6
  #f
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app horizon< (app move-horizon mo₀) (-> (app move-horizon mo₁) <-))\n  (env ((□? (mmo mo₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   ((#f) (-> mo₁ <-))\n   _)\n  (env ((□? (mmo mo₁)))))\""
  8
  3
  2
  3
  0
  1
  1
  1
  0
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (match\n   move-horizon-v\n   (move _ move-horizon-x)\n   (_ (-> (app error \"invalid match for move-horizon\") <-)))\n  (env ((□? (move-horizon-v)))))\""
  11
  5
  2
  4
  0
  1
  1
  1
  0
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (app fold/coord (λ (co mm) ...) (-> (app none) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  13
  7
  2
  4
  0
  1
  1
  1
  0
  7
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  59
  37
  13
  9
  23
  6
  29
  1
  53/87
  35
  #f
  188/37
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (let (_) (-> (app display \"Cat's game.\\n\") <-))\n  (env ((□? (bo this-play that-play)))))\""
  63
  40
  13
  10
  23
  6
  29
  1
  53/96
  37
  #t
  101/20
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval (let (_) (-> (app void) <-)) (env ((□? (bo this-play that-play)))))\""
  65
  42
  13
  10
  23
  6
  29
  1
  53/102
  39
  #t
  106/21
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval (app equal? oc₁ (-> (app lose) <-)) (env ((□? (oc₀ oc₁)))))\""
  68
  44
  13
  11
  23
  6
  29
  1
  53/108
  41
  #t
  111/22
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co mark bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  74
  48
  13
  13
  24
  6
  30
  1
  7/15
  45
  #t
  121/24
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app foldl (λ (c x) ...) (-> x <-) is) (env ((□? (r x)) (□? (f x)))))\""
  103
  69
  20
  14
  33
  10
  43
  1
  421/780
  52
  #t
  350/69
  ((11/2 11/2 0) (11/2 11/2 0) (11/2 11/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app f x (-> acc <-)) (env ((□? (f acc l)))))\""
  104
  70
  20
  14
  33
  10
  43
  1
  139/260
  53
  #t
  71/14
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (match (-> h₀ <-) (horizon oc₀ sc₀)) (env ((□? (h₀ h₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match\n   (-> (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) <-)\n   (#f)\n   _)\n  (env ((□? (mmo mo₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (match (-> a <-) (marked _) _) (env ((□? (a)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  letrec
  "\"'(eval\n  (let (... () (co (-> (letrec (loop) ...) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  match
  "\"'(eval\n  (λ (move-coord-v) (-> (match move-coord-v ...) <-))\n  (env ((□? (move-coord-v)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval (app cons (-> (app Tw) <-) (app nil)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  lettypes
  "\"'(eval ((top) lettypes (cons ... player) ...) (env ()))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval (match ma (X) ((O) (-> (app X) <-))) (env ((□? (ma)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (match (-> move-horizon-v <-) (move _ move-horizon-x) _)\n  (env ((□? (move-horizon-v)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  let
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (let (_) ...) <-)))\n  (env ((□? (bo this-play that-play)))))\""
  5
  4
  0
  1
  0
  0
  0
  1
  0
  3
  #t
  19/4
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app wins? bo (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  69
  35
  11
  23
  1
  4
  5
  1
  1/23
  21
  #f
  187/35
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  122
  65
  26
  31
  24
  9
  33
  1
  56/135
  49
  #f
  68/13
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  129
  70
  26
  33
  25
  9
  34
  1
  59/150
  54
  #t
  73/14
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (match\n   some-v-v\n   (some some-v-x)\n   (_ (-> (app error \"invalid match for some-v\") <-)))\n  (env ((□? (some-v-v)))))\""
  132
  72
  26
  34
  25
  9
  34
  1
  59/156
  56
  #t
  125/24
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  match
  "\"'(eval\n  (λ (co) (-> (match (app equal? co₀ co) ...) <-))\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app bo (-> co <-)) (env ((□? (co bo)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app board-mark co (-> this-mark <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  64
  31
  11
  22
  1
  4
  5
  1
  1/19
  18
  #f
  168/31
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval\n  (app full? (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  75
  40
  11
  24
  2
  4
  6
  1
  1/12
  27
  #t
  213/40
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (let (... () (co (-> (app action bo) <-)) () ...) ...)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  ref-or-constructor
  "\"'(eval (app (-> action <-) bo) (env ((□? ()) (□? (bo this-play that-play)))))\""
  81
  59
  7
  15
  17
  2
  19
  1
  31/240
  32
  #f
  386/59
  ((7 7 0) (7 7 0) (7 7 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) (app make-ai-action (app X))) <-)\n   (app player (app O) (app make-ai-action (app O))))\n  (env ((□? ()))))\""
  81
  59
  7
  15
  17
  2
  19
  1
  31/240
  32
  #t
  386/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (match (-> oc₀ <-) (win) (draw) (lose)) (env ((□? (oc₀ oc₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  25
  353
  app
  "\"'(eval\n  (app player (app O) (-> (app make-ai-action (app O)) <-))\n  (env ((□? ()))))\""
  7
  4
  0
  3
  1
  0
  1
  1
  1/4
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
