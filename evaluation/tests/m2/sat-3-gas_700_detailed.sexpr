'(clean-cache
  sat-3
  2
  700
  163
  letrec*
  "'(eval ((top) letrec* (println ... sat-solve-7) ...) (env ()))"
  #f
  4
  4
  0
  0
  4
  0
  4
  1
  1
  4
  #t
  1
  (0 0 0))
'(clean-cache
  sat-3
  2
  700
  163
  lambda
  "'(eval\n  (letrec* (... try (sat-solve-7 (-> (λ (p) ...) <-)) () ...) ...)\n  (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-3
  2
  700
  163
  app
  "'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))"
  #f
  #f)
'(clean-cache
  sat-3
  2
  700
  163
  lambda
  "'(eval (app try (-> (λ (n1) ...) <-)) (env ((□? (p)))))"
  (lambda number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-3
  2
  700
  163
  app
  "'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))"
  #f
  #f)
'(clean-cache
  sat-3
  2
  700
  163
  lambda
  "'(eval (app try (-> (λ (n2) ...) <-)) (env ((□? (n1)) (□? (p)))))"
  (lambda number char string quoted constructor)
  3
  1
  0
  2
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-3
  2
  700
  163
  app
  "'(eval\n  (λ (n2) (-> (app try (λ (n3) ...)) <-))\n  (env ((□? (n2)) (□? (n1)) (□? (p)))))"
  #f
  #f)
'(clean-cache
  sat-3
  2
  700
  163
  lambda
  "'(eval (app try (-> (λ (n3) ...) <-)) (env ((□? (n2)) (□? (n1)) (□? (p)))))"
  (lambda number char string quoted constructor)
  4
  1
  0
  3
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-3
  2
  700
  163
  app
  "'(eval\n  (λ (n3) (-> (app try (λ (n4) ...)) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))"
  #f
  #f)
'(clean-cache
  sat-3
  2
  700
  163
  lambda
  "'(eval\n  (app try (-> (λ (n4) ...) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))"
  (lambda number char string quoted constructor)
  5
  1
  0
  4
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-3
  2
  700
  163
  app
  "'(eval\n  (λ (n4) (-> (app try (λ (n5) ...)) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))"
  #f
  #f)
'(clean-cache
  sat-3
  2
  700
  163
  lambda
  "'(eval\n  (app try (-> (λ (n5) ...) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))"
  (lambda number char string quoted constructor)
  6
  1
  0
  5
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-3
  2
  700
  163
  app
  "'(eval\n  (λ (n5) (-> (app try (λ (n6) ...)) <-))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))"
  #f
  #f)
'(clean-cache
  sat-3
  2
  700
  163
  lambda
  "'(eval\n  (app try (-> (λ (n6) ...) <-))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))"
  (lambda number char string quoted constructor)
  7
  1
  0
  6
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-3
  2
  700
  163
  app
  "'(eval\n  (λ (n6) (-> (app try (λ (n7) ...)) <-))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))"
  #f
  600
  417
  65
  118
  238
  26
  264
  1
  14338/17685
  289
  #f
  572/417
  (255 262 4))
'(clean-cache
  sat-3
  2
  700
  163
  lambda
  "'(eval\n  (app try (-> (λ (n7) ...) <-))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))"
  (lambda number char string quoted constructor)
  8
  1
  0
  7
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-3
  2
  700
  163
  app
  "'(eval\n  (λ (n7) (-> (app p n1 n2 n3 n4 n5 n6 n7) <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))"
  #f
  348
  220
  57
  71
  50
  25
  75
  1
  1648/15525
  154
  #f
  13/10
  (123 127 2))
'(clean-cache
  sat-3
  2
  700
  163
  ref-or-constructor
  "'(eval\n  (app p n1 n2 n3 n4 n5 n6 (-> n7 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))"
  #f
  19
  7
  3
  9
  1
  0
  1
  1
  1/7
  6
  #f
  8/7
  (2 2 0))
'(clean-cache
  sat-3
  2
  700
  163
  ref-or-constructor
  "'(eval\n  (app p n1 n2 n3 n4 n5 (-> n6 <-) n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))"
  #f
  19
  7
  3
  9
  1
  0
  1
  1
  1/7
  6
  #f
  8/7
  (1 1 0))
'(clean-cache
  sat-3
  2
  700
  163
  ref-or-constructor
  "'(eval\n  (app p n1 n2 n3 n4 (-> n5 <-) n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))"
  #f
  19
  7
  3
  9
  1
  0
  1
  1
  1/7
  6
  #f
  8/7
  (1 1 0))
'(clean-cache
  sat-3
  2
  700
  163
  ref-or-constructor
  "'(eval\n  (app p n1 n2 n3 (-> n4 <-) n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))"
  #f
  19
  7
  3
  9
  1
  0
  1
  1
  1/7
  6
  #f
  8/7
  (1 1 0))
'(clean-cache
  sat-3
  2
  700
  163
  ref-or-constructor
  "'(eval\n  (app p n1 n2 (-> n3 <-) n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))"
  #f
  19
  7
  3
  9
  1
  0
  1
  1
  1/7
  6
  #f
  8/7
  (1 1 0))
'(clean-cache
  sat-3
  2
  700
  163
  ref-or-constructor
  "'(eval\n  (app p n1 (-> n2 <-) n3 n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))"
  #f
  19
  7
  3
  9
  1
  0
  1
  1
  1/7
  6
  #f
  8/7
  (1 1 0))
'(clean-cache
  sat-3
  2
  700
  163
  ref-or-constructor
  "'(eval\n  (app p (-> n1 <-) n2 n3 n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))"
  #f
  19
  7
  3
  9
  1
  0
  1
  1
  1/7
  6
  #f
  8/7
  (1 1 0))
'(clean-cache
  sat-3
  2
  700
  163
  ref-or-constructor
  "'(eval\n  (app (-> p <-) n1 n2 n3 n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))"
  #f
  13
  3
  2
  8
  2
  2
  4
  1
  2/3
  3
  #t
  1
  (0 0 0))
'(clean-cache
  sat-3
  2
  700
  163
  ref-or-constructor
  "'(eval\n  (app (-> try <-) (λ (n7) ...))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))"
  (lambda number char string quoted constructor)
  9
  2
  0
  7
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  sat-3
  2
  700
  163
  ref-or-constructor
  "'(eval\n  (app (-> try <-) (λ (n6) ...))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))"
  (lambda number char string quoted constructor)
  8
  2
  0
  6
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  sat-3
  2
  700
  163
  ref-or-constructor
  "'(eval\n  (app (-> try <-) (λ (n5) ...))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))"
  (lambda number char string quoted constructor)
  7
  2
  0
  5
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  sat-3
  2
  700
  163
  ref-or-constructor
  "'(eval\n  (app (-> try <-) (λ (n4) ...))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))"
  (lambda number char string quoted constructor)
  6
  2
  0
  4
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  sat-3
  2
  700
  163
  ref-or-constructor
  "'(eval (app (-> try <-) (λ (n3) ...)) (env ((□? (n2)) (□? (n1)) (□? (p)))))"
  (lambda number char string quoted constructor)
  5
  2
  0
  3
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  sat-3
  2
  700
  163
  ref-or-constructor
  "'(eval (app (-> try <-) (λ (n2) ...)) (env ((□? (n1)) (□? (p)))))"
  (lambda number char string quoted constructor)
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  sat-3
  2
  700
  163
  ref-or-constructor
  "'(eval (app (-> try <-) (λ (n1) ...)) (env ((□? (p)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  sat-3
  2
  700
  163
  lambda
  "'(eval\n  (letrec* (... phi (try (-> (λ (f) ...) <-)) sat-solve-7 ...) ...)\n  (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-3
  2
  700
  163
  let
  "'(eval (λ (f) (-> (let (_) ...) <-)) (env ((□? (f)))))"
  #f
  #f)
'(clean-cache
  sat-3
  2
  700
  163
  app
  "'(eval\n  (let (... () (_ (-> (app println \"trying\") <-)) () ...) ...)\n  (env ((□? (f)))))"
  #f
  8
  6
  0
  2
  1
  0
  1
  1
  1/6
  6
  #t
  1
  (0 0 0))
'(clean-cache
  sat-3
  2
  700
  163
  string
  "'(eval (app println (-> \"trying\" <-)) (env ((□? (f)))))"
  (string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-3
  2
  700
  163
  ref-or-constructor
  "'(eval (app (-> println <-) \"trying\") (env ((□? (f)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  sat-3
  2
  700
  163
  match
  "'(eval (let (_) (-> (match (app f (app #t ...)) ...) <-)) (env ((□? (f)))))"
  #f
  #f)
'(clean-cache
  sat-3
  2
  700
  163
  app
  "'(eval (match (app f (app #t)) (#f) (_ (-> (app #t) <-))) (env ((□? (f)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  sat-3
  2
  700
  163
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (f)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-3
  2
  700
  163
  match
  "'(eval\n  (match (app f (app #t)) ((#f) (-> (match (app f (app #f ...)) ...) <-)) _)\n  (env ((□? (f)))))"
  #f
  #f)
'(clean-cache
  sat-3
  2
  700
  163
  app
  "'(eval (match (app f (app #f)) (#f) (_ (-> (app #t) <-))) (env ((□? (f)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  sat-3
  2
  700
  163
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (f)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-3
  2
  700
  163
  app
  "'(eval (match (app f (app #f)) ((#f) (-> (app #f) <-)) _) (env ((□? (f)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  sat-3
  2
  700
  163
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (f)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-3
  2
  700
  163
  app
  "'(eval (match (-> (app f (app #f)) <-) (#f) _) (env ((□? (f)))))"
  #f
  #f)
'(clean-cache
  sat-3
  2
  700
  163
  app
  "'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  sat-3
  2
  700
  163
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (f)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-3
  2
  700
  163
  ref-or-constructor
  "'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))"
  #f
  24
  8
  8
  8
  0
  1
  1
  1
  0
  7
  #f
  7/4
  (3 3 0))
'(clean-cache
  sat-3
  2
  700
  163
  app
  "'(eval (match (-> (app f (app #t)) <-) (#f) _) (env ((□? (f)))))"
  #f
  #f)
'(clean-cache
  sat-3
  2
  700
  163
  app
  "'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  sat-3
  2
  700
  163
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (f)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-3
  2
  700
  163
  ref-or-constructor
  "'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))"
  #f
  24
  8
  8
  8
  0
  1
  1
  1
  0
  7
  #f
  7/4
  (2 2 0))
'(clean-cache
  sat-3
  2
  700
  163
  lambda
  "'(eval\n  (letrec*\n   (... println (phi (-> (λ (x1 x2 x3 x4 x5 x6 x7) ...) <-)) try ...)\n   ...)\n  (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-3
  2
  700
  163
  match
  "'(eval\n  (λ (x1 x2 x3 x4 x5 x6 x7) (-> (match (match x1 ...) ...) <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))"
  #f
  340
  221
  55
  64
  48
  23
  71
  1
  1378/14985
  152
  #f
  290/221
  (115 118 1))
'(clean-cache
  sat-3
  2
  700
  163
  match
  "'(eval\n  (match (match x1 ...) (#f) (_ (-> (match (match x1 ...) ...) <-)))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))"
  #f
  327
  208
  55
  64
  48
  23
  71
  1
  689/6615
  144
  #f
  17/13
  (113 116 2))
'(clean-cache
  sat-3
  2
  700
  163
  match
  "'(eval\n  (match (match x1 ...) (#f) (_ (-> (match (match x3 ...) ...) <-)))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))"
  #f
  306
  187
  55
  64
  48
  23
  71
  1
  1378/10395
  132
  #f
  22/17
  (114 117 2))
'(clean-cache
  sat-3
  2
  700
  163
  match
  "'(eval\n  (match (match x3 ...) (#f) (_ (-> (match (match (app not ...) ...) ...) <-)))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))"
  #f
  295
  176
  55
  64
  48
  23
  71
  1
  689/4320
  125
  #f
  227/176
  (113 115 1))
'(clean-cache
  sat-3
  2
  700
  163
  match
  "'(eval\n  (match\n   (match (app not x4) ...)\n   (#f)\n   (_ (-> (match (match (app not ...) ...) ...) <-)))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))"
  #f
  177
  107
  30
  40
  21
  10
  31
  1
  51/329
  75
  #f
  139/107
  (43 44 0))
'(clean-cache
  sat-3
  2
  700
  163
  match
  "'(eval\n  (match (match (app not x2) ...) (#f) (_ (-> (match (match x4 ...) ...) <-)))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))"
  #f
  84
  46
  11
  27
  3
  2
  5
  1
  3/26
  32
  #f
  30/23
  (12 12 0))
'(clean-cache
  sat-3
  2
  700
  163
  app
  "'(eval\n  (match (match x4 ...) (#f) (_ (-> (app #t) <-)))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  sat-3
  2
  700
  163
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-3
  2
  700
  163
  app
  "'(eval\n  (match (match x4 ...) ((#f) (-> (app #f) <-)) _)\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  sat-3
  2
  700
  163
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-3
  2
  700
  163
  match
  "'(eval\n  (match (-> (match x4 ...) <-) (#f) _)\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))"
  #f
  76
  38
  11
  27
  3
  2
  5
  1
  1/7
  26
  #f
  25/19
  (12 13 0))
'(clean-cache
  sat-3
  2
  700
  163
  app
  "'(eval\n  (match x4 (#f) (_ (-> (app #t) <-)))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  sat-3
  2
  700
  163
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-3
  2
  700
  163
  match
  "'(eval\n  (match x4 ((#f) (-> (match x2 ...) <-)) _)\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))"
  #f
  46
  20
  6
  20
  3
  2
  5
  1
  1/5
  16
  #f
  6/5
  (3 3 0))
'(clean-cache
  sat-3
  2
  700
  163
  app
  "'(eval\n  (match x2 (#f) (_ (-> (app #t) <-)))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  sat-3
  2
  700
  163
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-3
  2
  700
  163
  app
  "'(eval\n  (match x2 ((#f) (-> (app #f) <-)) _)\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  sat-3
  2
  700
  163
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-3
  2
  700
  163
  ref-or-constructor
  "'(eval (match (-> x2 <-) (#f) _) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))"
  #f
  37
  12
  6
  19
  3
  2
  5
  1
  3/10
  10
  #f
  7/6
  (3 3 0))
'(clean-cache
  sat-3
  2
  700
  163
  ref-or-constructor
  "'(eval (match (-> x4 <-) (#f) _) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))"
  #f
  33
  12
  6
  15
  3
  2
  5
  1
  3/10
  10
  #f
  7/6
  (3 3 0))
'(clean-cache
  sat-3
  2
  700
  163
  app
  "'(eval\n  (match (match (app not x2) ...) ((#f) (-> (app #f) <-)) _)\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  sat-3
  2
  700
  163
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-3
  2
  700
  163
  match
  "'(eval\n  (match (-> (match (app not x2) ...) <-) (#f) _)\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))"
  #f
  98
  54
  15
  29
  13
  6
  19
  1
  7/27
  39
  #f
  23/18
  (14 14 0))
'(clean-cache
  sat-3
  2
  700
  163
  app
  "'(eval\n  (match (app not x2) (#f) (_ (-> (app #t) <-)))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  sat-3
  2
  700
  163
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-3
  2
  700
  163
  match
  "'(eval\n  (match (app not x2) ((#f) (-> (match (app not x3) ...) <-)) _)\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))"
  #f
  50
  26
  6
  18
  5
  2
  7
  1
  5/19
  20
  #f
  16/13
  (4 4 0))
'(clean-cache
  sat-3
  2
  700
  163
  app
  "'(eval\n  (match (app not x3) (#f) (_ (-> (app #t) <-)))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  sat-3
  2
  700
  163
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-3
  2
  700
  163
  app
  "'(eval\n  (match (app not x3) ((#f) (-> (app #f) <-)) _)\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  sat-3
  2
  700
  163
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-3
  2
  700
  163
  app
  "'(eval (match (-> (app not x3) <-) (#f) _) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))"
  #f
  42
  18
  6
  18
  5
  2
  7
  1
  5/14
  14
  #f
  11/9
  (3 3 0))
'(clean-cache
  sat-3
  2
  700
  163
  ref-or-constructor
  "'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))"
  #f
  35
  12
  6
  17
  3
  2
  5
  1
  3/10
  10
  #f
  7/6
  (3 3 0))
'(clean-cache
  sat-3
  2
  700
  163
  ref-or-constructor
  "'(eval (app (-> not <-) x3) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-3
  2
  700
  163
  app
  "'(eval (match (-> (app not x2) <-) (#f) _) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))"
  #f
  44
  18
  6
  20
  5
  2
  7
  1
  5/14
  14
  #f
  11/9
  (3 3 0))
'(clean-cache
  sat-3
  2
  700
  163
  ref-or-constructor
  "'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))"
  #f
  37
  12
  6
  19
  3
  2
  5
  1
  3/10
  10
  #f
  7/6
  (2 3 0))
'(clean-cache
  sat-3
  2
  700
  163
  ref-or-constructor
  "'(eval (app (-> not <-) x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-3
  2
  700
  163
  app
  "'(eval\n  (match (match (app not x4) ...) ((#f) (-> (app #f) <-)) _)\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  sat-3
  2
  700
  163
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-3
  2
  700
  163
  match
  "'(eval\n  (match (-> (match (app not x4) ...) <-) (#f) _)\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))"
  #f
  83
  44
  11
  28
  10
  5
  15
  1
  8/25
  30
  #f
  29/22
  (12 12 0))
'(clean-cache
  sat-3
  2
  700
  163
  app
  "'(eval\n  (match (app not x4) (#f) (_ (-> (app #t) <-)))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  sat-3
  2
  700
  163
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-3
  2
  700
  163
  match
  "'(eval\n  (match (app not x4) ((#f) (-> (match x1 ...) <-)) _)\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))"
  #f
  47
  20
  6
  21
  8
  5
  13
  1
  8/15
  16
  #f
  6/5
  (3 3 0))
'(clean-cache
  sat-3
  2
  700
  163
  app
  "'(eval\n  (match x1 (#f) (_ (-> (app #t) <-)))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  sat-3
  2
  700
  163
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-3
  2
  700
  163
  app
  "'(eval\n  (match x1 ((#f) (-> (app #f) <-)) _)\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  sat-3
  2
  700
  163
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-3
  2
  700
  163
  ref-or-constructor
  "'(eval (match (-> x1 <-) (#f) _) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))"
  #f
  38
  12
  6
  20
  8
  5
  13
  1
  4/5
  10
  #f
  7/6
  (2 2 0))
'(clean-cache
  sat-3
  2
  700
  163
  app
  "'(eval (match (-> (app not x4) <-) (#f) _) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))"
  #f
  40
  18
  6
  16
  5
  2
  7
  1
  5/14
  14
  #f
  11/9
  (3 3 0))
'(clean-cache
  sat-3
  2
  700
  163
  ref-or-constructor
  "'(eval (app not (-> x4 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))"
  #f
  33
  12
  6
  15
  3
  2
  5
  1
  3/10
  10
  #f
  7/6
  (3 3 0))
'(clean-cache
  sat-3
  2
  700
  163
  ref-or-constructor
  "'(eval (app (-> not <-) x4) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-3
  2
  700
  163
  app
  "'(eval\n  (match (match x3 ...) ((#f) (-> (app #f) <-)) _)\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  sat-3
  2
  700
  163
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-3
  2
  700
  163
  match
  "'(eval\n  (match (-> (match x3 ...) <-) (#f) _)\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))"
  #f
  86
  46
  15
  25
  11
  6
  17
  1
  5/21
  34
  #f
  29/23
  (14 14 0))
'(clean-cache
  sat-3
  2
  700
  163
  app
  "'(eval\n  (match x3 (#f) (_ (-> (app #t) <-)))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  sat-3
  2
  700
  163
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-3
  2
  700
  163
  match
  "'(eval\n  (match x3 ((#f) (-> (match x4 ...) <-)) _)\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))"
  #f
  42
  20
  6
  16
  3
  2
  5
  1
  1/5
  16
  #f
  6/5
  (3 3 0))
'(clean-cache
  sat-3
  2
  700
  163
  app
  "'(eval\n  (match x4 (#f) (_ (-> (app #t) <-)))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  sat-3
  2
  700
  163
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-3
  2
  700
  163
  app
  "'(eval\n  (match x4 ((#f) (-> (app #f) <-)) _)\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  sat-3
  2
  700
  163
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-3
  2
  700
  163
  ref-or-constructor
  "'(eval (match (-> x4 <-) (#f) _) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))"
  #f
  33
  12
  6
  15
  3
  2
  5
  1
  3/10
  10
  #f
  7/6
  (3 3 0))
'(clean-cache
  sat-3
  2
  700
  163
  ref-or-constructor
  "'(eval (match (-> x3 <-) (#f) _) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))"
  #f
  35
  12
  6
  17
  3
  2
  5
  1
  3/10
  10
  #f
  7/6
  (3 3 0))
'(clean-cache
  sat-3
  2
  700
  163
  app
  "'(eval\n  (match (match x1 ...) ((#f) (-> (app #f) <-)) _)\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  sat-3
  2
  700
  163
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-3
  2
  700
  163
  match
  "'(eval\n  (match (-> (match x1 ...) <-) (#f) _)\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))"
  #f
  163
  88
  30
  45
  32
  19
  51
  1
  628/2079
  63
  #f
  113/88
  (39 40 0))
'(clean-cache
  sat-3
  2
  700
  163
  app
  "'(eval\n  (match x1 (#f) (_ (-> (app #t) <-)))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  sat-3
  2
  700
  163
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-3
  2
  700
  163
  match
  "'(eval\n  (match x1 ((#f) (-> (match (app not x2) ...) <-)) _)\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))"
  #f
  98
  54
  15
  29
  13
  6
  19
  1
  7/27
  39
  #f
  23/18
  (14 14 0))
'(clean-cache
  sat-3
  2
  700
  163
  app
  "'(eval\n  (match (app not x2) (#f) (_ (-> (app #t) <-)))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  sat-3
  2
  700
  163
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-3
  2
  700
  163
  match
  "'(eval\n  (match (app not x2) ((#f) (-> (match (app not x3) ...) <-)) _)\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))"
  #f
  50
  26
  6
  18
  5
  2
  7
  1
  5/19
  20
  #f
  16/13
  (3 3 0))
'(clean-cache
  sat-3
  2
  700
  163
  app
  "'(eval\n  (match (app not x3) (#f) (_ (-> (app #t) <-)))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  sat-3
  2
  700
  163
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-3
  2
  700
  163
  app
  "'(eval\n  (match (app not x3) ((#f) (-> (app #f) <-)) _)\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  sat-3
  2
  700
  163
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-3
  2
  700
  163
  app
  "'(eval (match (-> (app not x3) <-) (#f) _) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))"
  #f
  42
  18
  6
  18
  5
  2
  7
  1
  5/14
  14
  #f
  11/9
  (3 3 0))
'(clean-cache
  sat-3
  2
  700
  163
  ref-or-constructor
  "'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))"
  #f
  35
  12
  6
  17
  3
  2
  5
  1
  3/10
  10
  #f
  7/6
  (2 3 0))
'(clean-cache
  sat-3
  2
  700
  163
  ref-or-constructor
  "'(eval (app (-> not <-) x3) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-3
  2
  700
  163
  app
  "'(eval (match (-> (app not x2) <-) (#f) _) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))"
  #f
  44
  18
  6
  20
  5
  2
  7
  1
  5/14
  14
  #f
  11/9
  (3 3 0))
'(clean-cache
  sat-3
  2
  700
  163
  ref-or-constructor
  "'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))"
  #f
  37
  12
  6
  19
  3
  2
  5
  1
  3/10
  10
  #f
  7/6
  (3 3 0))
'(clean-cache
  sat-3
  2
  700
  163
  ref-or-constructor
  "'(eval (app (-> not <-) x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-3
  2
  700
  163
  ref-or-constructor
  "'(eval (match (-> x1 <-) (#f) _) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))"
  #f
  38
  12
  6
  20
  8
  5
  13
  1
  4/5
  10
  #f
  7/6
  (2 2 0))
'(clean-cache
  sat-3
  2
  700
  163
  app
  "'(eval\n  (match (match x1 ...) ((#f) (-> (app #f) <-)) _)\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  sat-3
  2
  700
  163
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-3
  2
  700
  163
  match
  "'(eval\n  (match (-> (match x1 ...) <-) (#f) _)\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))"
  #f
  93
  46
  15
  32
  18
  11
  29
  1
  23/63
  34
  #f
  29/23
  (12 13 0))
'(clean-cache
  sat-3
  2
  700
  163
  app
  "'(eval\n  (match x1 (#f) (_ (-> (app #t) <-)))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  sat-3
  2
  700
  163
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-3
  2
  700
  163
  match
  "'(eval\n  (match x1 ((#f) (-> (match x2 ...) <-)) _)\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))"
  #f
  46
  20
  6
  20
  3
  2
  5
  1
  1/5
  16
  #f
  6/5
  (3 3 0))
'(clean-cache
  sat-3
  2
  700
  163
  app
  "'(eval\n  (match x2 (#f) (_ (-> (app #t) <-)))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  sat-3
  2
  700
  163
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-3
  2
  700
  163
  app
  "'(eval\n  (match x2 ((#f) (-> (app #f) <-)) _)\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  sat-3
  2
  700
  163
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-3
  2
  700
  163
  ref-or-constructor
  "'(eval (match (-> x2 <-) (#f) _) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))"
  #f
  37
  12
  6
  19
  3
  2
  5
  1
  3/10
  10
  #f
  7/6
  (3 3 0))
'(clean-cache
  sat-3
  2
  700
  163
  ref-or-constructor
  "'(eval (match (-> x1 <-) (#f) _) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))"
  #f
  38
  12
  6
  20
  8
  5
  13
  1
  4/5
  10
  #f
  7/6
  (2 2 0))
'(clean-cache
  sat-3
  2
  700
  163
  lambda
  "'(eval (letrec* (... () (println (-> (λ (s) ...) <-)) phi ...) ...) (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-3
  2
  700
  163
  let
  "'(eval (λ (s) (-> (let (_) ...) <-)) (env ((□? (s)))))"
  #f
  4
  3
  0
  1
  0
  0
  0
  1
  0
  3
  #t
  1
  (0 0 0))
'(clean-cache
  sat-3
  2
  700
  163
  app
  "'(eval (let (... () (_ (-> (app display s) <-)) () ...) ...) (env ((□? (s)))))"
  #f
  11
  6
  2
  3
  0
  1
  1
  1
  0
  6
  #t
  1
  (0 0 0))
'(clean-cache
  sat-3
  2
  700
  163
  ref-or-constructor
  "'(eval (app display (-> s <-)) (env ((□? (s)))))"
  #f
  6
  2
  2
  2
  0
  1
  1
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  sat-3
  2
  700
  163
  ref-or-constructor
  "'(eval (app (-> display <-) s) (env ((□? (s)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-3
  2
  700
  163
  app
  "'(eval (let (_) (-> (app newline) <-)) (env ((□? (s)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  sat-3
  2
  700
  163
  ref-or-constructor
  "'(eval (app (-> newline <-)) (env ((□? (s)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-3
  2
  700
  163
  let
  "'(eval (letrec* (println ... sat-solve-7) (-> (let (_) ...) <-)) (env ()))"
  #f
  3
  3
  0
  0
  3
  0
  3
  1
  1
  3
  #t
  1
  (0 0 0))
'(clean-cache
  sat-3
  2
  700
  163
  app
  "'(eval\n  (let (... () (_ (-> (app display (app sat-solve-7 phi)) <-)) () ...) ...)\n  (env ()))"
  #f
  #f)
'(clean-cache
  sat-3
  2
  700
  163
  app
  "'(eval (app display (-> (app sat-solve-7 phi) <-)) (env ()))"
  #f
  #f)
'(clean-cache
  sat-3
  2
  700
  163
  ref-or-constructor
  "'(eval (app sat-solve-7 (-> phi <-)) (env ()))"
  (lambda number char string quoted constructor)
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  sat-3
  2
  700
  163
  ref-or-constructor
  "'(eval (app (-> sat-solve-7 <-) phi) (env ()))"
  (lambda number char string quoted constructor)
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  sat-3
  2
  700
  163
  ref-or-constructor
  "'(eval (app (-> display <-) (app sat-solve-7 phi)) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-3
  2
  700
  163
  app
  "'(eval (let (_) (-> (app newline) <-)) (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  sat-3
  2
  700
  163
  ref-or-constructor
  "'(eval (app (-> newline <-)) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
