'(clean-cache
  rsa
  2
  122
  lettypes
  "\"'(eval ((top) lettypes (cons) ...) (env ()))\""
  #f)
'(clean-cache
  rsa
  2
  122
  letrec*
  "\"'(eval\n  (lettypes cons ... cons (letrec* (car ... decrypted-ciphertext) ...))\n  (env ()))\""
  #f)
'(clean-cache
  rsa
  2
  122
  app
  "\"'(eval\n  (letrec*\n   (...\n    ciphertext\n    (decrypted-ciphertext (-> (app decrypt ciphertext d n) <-))\n    ()\n    ...)\n   ...)\n  (env ()))\""
  #f)
'(clean-cache
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app decrypt ciphertext d (-> n <-)) (env ()))\""
  7
  7
  0
  0
  7
  0
  7
  1
  1
  1
  #f
  29/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app decrypt ciphertext (-> d <-) n) (env ()))\""
  308
  276
  18
  14
  220
  8
  228
  1
  3091/3510
  96
  #f
  637/138
  ((29/2 29/2 0) (29/2 29/2 0) (29/2 29/2 0)))
'(clean-cache
  rsa
  2
  122
  ref-or-constructor
  "\"'(eval (app decrypt (-> ciphertext <-) d n) (env ()))\""
  #f)
'(clean-cache
  rsa
  2
  122
  app
  "\"'(eval\n  (letrec*\n   (...\n    plaintext\n    (ciphertext (-> (app encrypt plaintext e n) <-))\n    decrypted-ciphertext\n    ...)\n   ...)\n  (env ()))\""
  #f)
'(clean-cache
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app encrypt plaintext e (-> n <-)) (env ()))\""
  7
  7
  0
  0
  7
  0
  7
  1
  1
  1
  #f
  29/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  2
  15
  122
  app
  "\"'(eval\n  (letrec* (... e (d (-> (app private-exponent e p q) <-)) plaintext ...) ...)\n  (env ()))\""
  307
  275
  18
  14
  219
  8
  227
  1
  3061/3480
  96
  #f
  254/55
  ((29/2 29/2 0) (14 14 0) (29/2 29/2 0)))
'(clean-cache
  rsa
  2
  15
  122
  app
  "\"'(eval (letrec* (... q (n (-> (app * p q) <-)) e ...) ...) (env ()))\""
  6
  6
  0
  0
  6
  0
  6
  1
  1
  1
  #f
  25/6
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  2
  122
  app
  "\"'(eval (λ (c d n) (-> (app modulo-power c d n) <-)) (env ((□? (c d n)))))\""
  #f)
'(clean-cache
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app modulo-power c d (-> n <-)) (env ((□? (c d n)))))\""
  11
  8
  2
  1
  7
  2
  9
  1
  7/8
  1
  #f
  33/8
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app modulo-power c (-> d <-) n) (env ((□? (c d n)))))\""
  312
  277
  20
  15
  220
  10
  230
  1
  3091/3540
  96
  #f
  1278/277
  ((29/2 29/2 0) (29/2 29/2 0) (29/2 29/2 0)))
'(clean-cache
  rsa
  2
  122
  ref-or-constructor
  "\"'(eval (app modulo-power (-> c <-) d n) (env ((□? (c d n)))))\""
  #f)
'(clean-cache
  rsa
  2
  122
  match
  "\"'(eval (λ (m e n) (-> (match (app > m n) ...) <-)) (env ((□? (m e n)))))\""
  #f)
'(clean-cache
  rsa
  2
  15
  122
  app
  "\"'(eval\n  (match\n   (app > m n)\n   (#f)\n   (_ (-> (app error \"The modulus is too small to encrypt the message.\") <-)))\n  (env ((□? (m e n)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  2
  122
  app
  "\"'(eval\n  (match (app > m n) ((#f) (-> (app modulo-power m e n) <-)) _)\n  (env ((□? (m e n)))))\""
  #f)
'(clean-cache
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app modulo-power m e (-> n <-)) (env ((□? (m e n)))))\""
  11
  8
  2
  1
  7
  2
  9
  1
  7/8
  1
  #f
  33/8
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app modulo-power m (-> e <-) n) (env ((□? (m e n)))))\""
  6
  3
  2
  1
  2
  2
  4
  1
  2/3
  0
  #f
  4
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app modulo-power (-> m <-) e n) (env ((□? (m e n)))))\""
  6
  3
  2
  1
  2
  2
  4
  1
  2/3
  0
  #f
  4
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  2
  15
  122
  app
  "\"'(eval (match (-> (app > m n) <-) (#f) _) (env ((□? (m e n)))))\""
  19
  16
  2
  1
  12
  2
  14
  1
  21/26
  4
  #t
  17/4
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app > m (-> n <-)) (env ((□? (m e n)))))\""
  11
  8
  2
  1
  7
  2
  9
  1
  7/8
  1
  #f
  33/8
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app > (-> m <-) n) (env ((□? (m e n)))))\""
  6
  3
  2
  1
  2
  2
  4
  1
  2/3
  0
  #f
  4
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  2
  122
  match
  "\"'(eval\n  (λ (e p q) (-> (match (app is-legal-public-exponent? e p q) ...) <-))\n  (env ((□? (e p q)))))\""
  #f)
'(clean-cache
  rsa
  2
  122
  app
  "\"'(eval\n  (match\n   (app is-legal-public-exponent? e p q)\n   (#f)\n   (_ (-> (app modulo-inverse e (app totient p q)) <-)))\n  (env ((□? (e p q)))))\""
  #f)
'(clean-cache
  rsa
  2
  15
  122
  app
  "\"'(eval (app modulo-inverse e (-> (app totient p q) <-)) (env ((□? (e p q)))))\""
  42
  32
  6
  4
  18
  3
  21
  1
  23/38
  9
  #f
  137/32
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app totient p (-> q <-)) (env ((□? (e p q)))))\""
  6
  3
  2
  1
  2
  2
  4
  1
  2/3
  0
  #f
  4
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app totient (-> p <-) q) (env ((□? (e p q)))))\""
  6
  3
  2
  1
  2
  2
  4
  1
  2/3
  0
  #f
  4
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app modulo-inverse (-> e <-) (app totient p q)) (env ((□? (e p q)))))\""
  6
  3
  2
  1
  2
  2
  4
  1
  2/3
  0
  #f
  4
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  2
  15
  122
  app
  "\"'(eval\n  (match\n   (app is-legal-public-exponent? e p q)\n   ((#f) (-> (app error \"Not a legal public exponent for that modulus.\") <-))\n   _)\n  (env ((□? (e p q)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  2
  15
  122
  app
  "\"'(eval\n  (match (-> (app is-legal-public-exponent? e p q) <-) (#f) _)\n  (env ((□? (e p q)))))\""
  99
  86
  8
  5
  56
  4
  60
  1
  193/282
  34
  #t
  189/43
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app is-legal-public-exponent? e p (-> q <-)) (env ((□? (e p q)))))\""
  6
  3
  2
  1
  2
  2
  4
  1
  2/3
  0
  #f
  4
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app is-legal-public-exponent? e (-> p <-) q) (env ((□? (e p q)))))\""
  6
  3
  2
  1
  2
  2
  4
  1
  2/3
  0
  #f
  4
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app is-legal-public-exponent? (-> e <-) p q) (env ((□? (e p q)))))\""
  6
  3
  2
  1
  2
  2
  4
  1
  2/3
  0
  #f
  4
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  2
  15
  122
  app
  "\"'(eval\n  (λ (e p q)\n    (->\n     (app\n      and\n      (app < 1 e)\n      (app < e (app totient p q))\n      (app = 1 (app gcd e (app totient p q))))\n     <-))\n  (env ((□? (e p q)))))\""
  93
  81
  8
  4
  53
  4
  57
  1
  191/264
  31
  #t
  355/81
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  rsa
  2
  15
  122
  app
  "\"'(eval\n  (app\n   and\n   (app < 1 e)\n   (app < e (app totient p q))\n   (-> (app = 1 (app gcd e (app totient p q))) <-))\n  (env ((□? (e p q)))))\""
  60
  48
  8
  4
  29
  4
  33
  1
  11/15
  13
  #t
  205/48
  ((3/2 3/2 0) (1 1 0) (1 1 0)))
'(clean-cache
  rsa
  2
  15
  122
  app
  "\"'(eval (app = 1 (-> (app gcd e (app totient p q)) <-)) (env ((□? (e p q)))))\""
  51
  39
  8
  4
  26
  4
  30
  1
  7/9
  9
  #f
  55/13
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  rsa
  2
  15
  122
  app
  "\"'(eval (app gcd e (-> (app totient p q) <-)) (env ((□? (e p q)))))\""
  52
  39
  8
  5
  20
  4
  24
  1
  4/7
  10
  #f
  166/39
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app totient p (-> q <-)) (env ((□? (e p q)))))\""
  12
  5
  4
  3
  3
  3
  6
  1
  5/8
  0
  #f
  4
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app totient (-> p <-) q) (env ((□? (e p q)))))\""
  12
  5
  4
  3
  3
  3
  6
  1
  5/8
  0
  #f
  4
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app gcd (-> e <-) (app totient p q)) (env ((□? (e p q)))))\""
  12
  5
  4
  3
  3
  3
  6
  1
  5/8
  0
  #f
  4
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  2
  15
  122
  app
  "\"'(eval\n  (app\n   and\n   (app < 1 e)\n   (-> (app < e (app totient p q)) <-)\n   (app = 1 (app gcd e (app totient p q))))\n  (env ((□? (e p q)))))\""
  51
  39
  8
  4
  26
  4
  30
  1
  7/9
  10
  #t
  166/39
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  rsa
  2
  15
  122
  app
  "\"'(eval (app < e (-> (app totient p q) <-)) (env ((□? (e p q)))))\""
  52
  39
  8
  5
  20
  4
  24
  1
  4/7
  10
  #f
  166/39
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app totient p (-> q <-)) (env ((□? (e p q)))))\""
  12
  5
  4
  3
  3
  3
  6
  1
  5/8
  0
  #f
  4
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app totient (-> p <-) q) (env ((□? (e p q)))))\""
  12
  5
  4
  3
  3
  3
  6
  1
  5/8
  0
  #f
  4
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app < (-> e <-) (app totient p q)) (env ((□? (e p q)))))\""
  12
  5
  4
  3
  3
  3
  6
  1
  5/8
  0
  #f
  4
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  2
  15
  122
  app
  "\"'(eval\n  (app\n   and\n   (-> (app < 1 e) <-)\n   (app < e (app totient p q))\n   (app = 1 (app gcd e (app totient p q))))\n  (env ((□? (e p q)))))\""
  21
  14
  4
  3
  6
  3
  9
  1
  1/2
  4
  #t
  30/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app < 1 (-> e <-)) (env ((□? (e p q)))))\""
  12
  5
  4
  3
  3
  3
  6
  1
  5/8
  0
  #f
  4
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  2
  122
  match
  "\"'(eval\n  (λ (base exp n) (-> (match (app = exp 0) ...) <-))\n  (env ((□? (base exp n)))))\""
  #f)
'(clean-cache
  rsa
  2
  122
  match
  "\"'(eval\n  (match (app = exp 0) ((#f) (-> (match (app odd? exp) ...) <-)) _)\n  (env ((□? (base exp n)))))\""
  #f)
'(clean-cache
  rsa
  2
  122
  app
  "\"'(eval\n  (match\n   (app odd? exp)\n   (#f)\n   (_\n    (->\n     (app modulo (app * base (app modulo-power base (app - exp 1) n)) n)\n     <-)))\n  (env ((□? (base exp n)))))\""
  #f)
'(clean-cache
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval\n  (app modulo (app * base (app modulo-power base (app - exp 1) n)) (-> n <-))\n  (env ((□? (base exp n)))))\""
  55
  40
  9
  6
  30
  5
  35
  1
  954/1183
  1
  #f
  161/40
  ((5 5 0) (5 5 0) (5 5 0)))
'(clean-cache
  rsa
  2
  122
  app
  "\"'(eval\n  (app modulo (-> (app * base (app modulo-power base (app - exp 1) n)) <-) n)\n  (env ((□? (base exp n)))))\""
  #f)
'(clean-cache
  rsa
  2
  122
  app
  "\"'(eval\n  (app * base (-> (app modulo-power base (app - exp 1) n) <-))\n  (env ((□? (base exp n)))))\""
  #f)
'(clean-cache
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval\n  (app modulo-power base (app - exp 1) (-> n <-))\n  (env ((□? (base exp n)))))\""
  55
  40
  9
  6
  30
  5
  35
  1
  73/84
  1
  #f
  161/40
  ((5 5 0) (5 5 0) (5 5 0)))
'(clean-cache
  rsa
  2
  122
  app
  "\"'(eval\n  (app modulo-power base (-> (app - exp 1) <-) n)\n  (env ((□? (base exp n)))))\""
  #f)
'(clean-cache
  rsa
  2
  122
  ref-or-constructor
  "\"'(eval (app - (-> exp <-) 1) (env ((□? (base exp n)))))\""
  #f)
'(clean-cache
  rsa
  2
  122
  ref-or-constructor
  "\"'(eval\n  (app modulo-power (-> base <-) (app - exp 1) n)\n  (env ((□? (base exp n)))))\""
  #f)
'(clean-cache
  rsa
  2
  122
  ref-or-constructor
  "\"'(eval\n  (app * (-> base <-) (app modulo-power base (app - exp 1) n))\n  (env ((□? (base exp n)))))\""
  #f)
'(clean-cache
  rsa
  2
  122
  app
  "\"'(eval\n  (match\n   (app odd? exp)\n   ((#f)\n    (->\n     (app modulo (app square (app modulo-power base (app / exp 2) n)) n)\n     <-))\n   _)\n  (env ((□? (base exp n)))))\""
  #f)
'(clean-cache
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval\n  (app modulo (app square (app modulo-power base (app / exp 2) n)) (-> n <-))\n  (env ((□? (base exp n)))))\""
  55
  40
  9
  6
  30
  5
  35
  1
  954/1183
  1
  #f
  161/40
  ((5 5 0) (5 5 0) (5 5 0)))
'(clean-cache
  rsa
  2
  122
  app
  "\"'(eval\n  (app modulo (-> (app square (app modulo-power base (app / exp 2) n)) <-) n)\n  (env ((□? (base exp n)))))\""
  #f)
'(clean-cache
  rsa
  2
  122
  app
  "\"'(eval\n  (app square (-> (app modulo-power base (app / exp 2) n) <-))\n  (env ((□? (base exp n)))))\""
  #f)
'(clean-cache
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval\n  (app modulo-power base (app / exp 2) (-> n <-))\n  (env ((□? (base exp n)))))\""
  54
  39
  9
  6
  30
  5
  35
  1
  159/182
  1
  #f
  157/39
  ((9/2 9/2 0) (4 4 0) (4 4 0)))
'(clean-cache
  rsa
  2
  122
  app
  "\"'(eval\n  (app modulo-power base (-> (app / exp 2) <-) n)\n  (env ((□? (base exp n)))))\""
  #f)
'(clean-cache
  rsa
  2
  122
  ref-or-constructor
  "\"'(eval (app / (-> exp <-) 2) (env ((□? (base exp n)))))\""
  #f)
'(clean-cache
  rsa
  2
  122
  ref-or-constructor
  "\"'(eval\n  (app modulo-power (-> base <-) (app / exp 2) n)\n  (env ((□? (base exp n)))))\""
  #f)
'(clean-cache
  rsa
  2
  122
  app
  "\"'(eval (match (-> (app odd? exp) <-) (#f) _) (env ((□? (base exp n)))))\""
  #f)
'(clean-cache
  rsa
  2
  122
  ref-or-constructor
  "\"'(eval (app odd? (-> exp <-)) (env ((□? (base exp n)))))\""
  #f)
'(clean-cache
  rsa
  2
  122
  app
  "\"'(eval (match (-> (app = exp 0) <-) (#f) _) (env ((□? (base exp n)))))\""
  #f)
'(clean-cache
  rsa
  2
  122
  ref-or-constructor
  "\"'(eval (app = (-> exp <-) 0) (env ((□? (base exp n)))))\""
  #f)
'(clean-cache
  rsa
  2
  122
  app
  "\"'(eval (λ (x) (-> (app * x x) <-)) (env ((□? (x)))))\""
  #f)
'(clean-cache
  rsa
  2
  122
  ref-or-constructor
  "\"'(eval (app * x (-> x <-)) (env ((□? (x)))))\""
  #f)
'(clean-cache
  rsa
  2
  122
  ref-or-constructor
  "\"'(eval (app * (-> x <-) x) (env ((□? (x)))))\""
  #f)
'(clean-cache
  rsa
  2
  15
  122
  app
  "\"'(eval (λ (p q) (-> (app * (app - p 1) (app - q 1)) <-)) (env ((□? (p q)))))\""
  100
  85
  8
  7
  39
  4
  43
  1
  479/924
  20
  #f
  72/17
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(clean-cache
  rsa
  2
  15
  122
  app
  "\"'(eval (app * (app - p 1) (-> (app - q 1) <-)) (env ((□? (p q)))))\""
  49
  34
  8
  7
  15
  4
  19
  1
  52/105
  7
  #f
  143/34
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app - (-> q <-) 1) (env ((□? (p q)))))\""
  28
  13
  8
  7
  6
  4
  10
  1
  11/21
  0
  #f
  4
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  rsa
  2
  15
  122
  app
  "\"'(eval (app * (-> (app - p 1) <-) (app - q 1)) (env ((□? (p q)))))\""
  49
  34
  8
  7
  15
  4
  19
  1
  52/105
  7
  #f
  143/34
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app - (-> p <-) 1) (env ((□? (p q)))))\""
  28
  13
  8
  7
  6
  4
  10
  1
  11/21
  0
  #f
  4
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  rsa
  2
  122
  app
  "\"'(eval\n  (λ (a n) (-> (app modulo (app car (app extended-gcd a n)) n) <-))\n  (env ((□? (a n)))))\""
  #f)
'(clean-cache
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval\n  (app modulo (app car (app extended-gcd a n)) (-> n <-))\n  (env ((□? (a n)))))\""
  48
  34
  8
  6
  19
  4
  23
  1
  3/5
  9
  #f
  145/34
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  rsa
  2
  122
  app
  "\"'(eval\n  (app modulo (-> (app car (app extended-gcd a n)) <-) n)\n  (env ((□? (a n)))))\""
  #f)
'(clean-cache
  rsa
  2
  15
  122
  app
  "\"'(eval (app car (-> (app extended-gcd a n) <-)) (env ((□? (a n)))))\""
  76
  57
  11
  8
  37
  5
  42
  1
  3/4
  24
  #t
  256/57
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app extended-gcd a (-> n <-)) (env ((□? (a n)))))\""
  48
  34
  8
  6
  19
  4
  23
  1
  3/5
  9
  #f
  145/34
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app extended-gcd (-> a <-) n) (env ((□? (a n)))))\""
  12
  5
  4
  3
  3
  3
  6
  1
  5/8
  0
  #f
  4
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  2
  15
  122
  match
  "\"'(eval\n  (λ (a b) (-> (match (app = (app modulo a b) 0) ...) <-))\n  (env ((□? (a b)))))\""
  142
  123
  11
  8
  74
  5
  79
  1
  187/252
  47
  #f
  188/41
  ((6 6 0) (6 6 0) (6 6 0)))
'(clean-cache
  rsa
  2
  15
  122
  app
  "\"'(eval\n  (match (app = (app modulo a b) 0) (#f) (_ (-> (app cons 0 1) <-)))\n  (env ((□? (a b)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  2
  15
  122
  let*
  "\"'(eval\n  (match (app = (app modulo a b) 0) ((#f) (-> (let* (x:y ... y) ...) <-)) _)\n  (env ((□? (a b)))))\""
  4
  3
  0
  1
  0
  0
  0
  1
  0
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  2
  15
  122
  app
  "\"'(eval (let* (... x (y (-> (app cdr x:y) <-)) () ...) ...) (env ((□? (a b)))))\""
  210
  181
  16
  13
  123
  7
  130
  1
  1619/2160
  55
  #f
  843/181
  ((12 12 0) (12 12 0) (12 12 0)))
'(clean-cache
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app cdr (-> x:y <-)) (env ((□? (a b)))))\""
  141
  120
  11
  10
  72
  5
  77
  1
  889/1380
  39
  #f
  553/120
  ((6 6 0) (6 6 0) (6 6 0)))
'(clean-cache
  rsa
  2
  15
  122
  app
  "\"'(eval (let* (... x:y (x (-> (app car x:y) <-)) y ...) ...) (env ((□? (a b)))))\""
  210
  181
  16
  13
  123
  7
  130
  1
  1619/2160
  55
  #f
  843/181
  ((12 12 0) (12 12 0) (12 12 0)))
'(clean-cache
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app car (-> x:y <-)) (env ((□? (a b)))))\""
  141
  120
  11
  10
  72
  5
  77
  1
  889/1380
  39
  #f
  553/120
  ((6 6 0) (6 6 0) (6 6 0)))
'(clean-cache
  rsa
  2
  15
  122
  app
  "\"'(eval\n  (let* (... () (x:y (-> (app extended-gcd b (app modulo a b)) <-)) x ...) ...)\n  (env ((□? (a b)))))\""
  135
  114
  11
  10
  69
  5
  74
  1
  437/675
  39
  #f
  515/114
  ((6 6 0) (11/2 11/2 0) (11/2 11/2 0)))
'(clean-cache
  rsa
  2
  15
  122
  app
  "\"'(eval (app extended-gcd b (-> (app modulo a b) <-)) (env ((□? (a b)))))\""
  93
  73
  11
  9
  39
  5
  44
  1
  53/87
  15
  #f
  307/73
  ((4 4 0) (4 4 0) (4 4 0)))
'(clean-cache
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app modulo a (-> b <-)) (env ((□? (a b)))))\""
  91
  71
  11
  9
  39
  5
  44
  1
  268/435
  14
  #f
  298/71
  ((4 4 0) (4 4 0) (4 4 0)))
'(clean-cache
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app modulo (-> a <-) b) (env ((□? (a b)))))\""
  77
  58
  11
  8
  39
  5
  44
  1
  731/870
  10
  #f
  121/29
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app extended-gcd (-> b <-) (app modulo a b)) (env ((□? (a b)))))\""
  76
  57
  11
  8
  39
  5
  44
  1
  367/435
  10
  #f
  238/57
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  rsa
  2
  15
  122
  app
  "\"'(eval\n  (let* (x:y ... y)\n    (-> (app cons y (app - x (app * y (app quotient a b)))) <-))\n  (env ((□? (a b)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  2
  122
  app
  "\"'(eval\n  (app cons y (-> (app - x (app * y (app quotient a b))) <-))\n  (env ((□? (a b)))))\""
  #f)
'(clean-cache
  rsa
  2
  15
  122
  app
  "\"'(eval (app - x (-> (app * y (app quotient a b)) <-)) (env ((□? (a b)))))\""
  235
  206
  16
  13
  130
  7
  137
  1
  1523/2160
  62
  #f
  475/103
  ((29/2 29/2 0) (14 14 0) (14 29/2 0)))
'(clean-cache
  rsa
  2
  15
  122
  app
  "\"'(eval (app * y (-> (app quotient a b) <-)) (env ((□? (a b)))))\""
  95
  76
  11
  8
  48
  5
  53
  1
  779/990
  16
  #f
  80/19
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app quotient a (-> b <-)) (env ((□? (a b)))))\""
  91
  71
  11
  9
  39
  5
  44
  1
  539/900
  14
  #f
  298/71
  ((4 4 0) (4 4 0) (4 4 0)))
'(clean-cache
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app quotient (-> a <-) b) (env ((□? (a b)))))\""
  77
  58
  11
  8
  39
  5
  44
  1
  367/450
  10
  #f
  121/29
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app * (-> y <-) (app quotient a b)) (env ((□? (a b)))))\""
  214
  185
  16
  13
  124
  7
  131
  1
  401/540
  55
  #f
  859/185
  ((25/2 25/2 0) (25/2 25/2 0) (25/2 25/2 0)))
'(clean-cache
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app - (-> x <-) (app * y (app quotient a b))) (env ((□? (a b)))))\""
  214
  185
  16
  13
  124
  7
  131
  1
  401/540
  55
  #f
  859/185
  ((25/2 25/2 0) (25/2 25/2 0) (25/2 25/2 0)))
'(clean-cache
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval\n  (app cons (-> y <-) (app - x (app * y (app quotient a b))))\n  (env ((□? (a b)))))\""
  214
  185
  16
  13
  124
  7
  131
  1
  401/540
  55
  #f
  859/185
  ((25/2 25/2 0) (25/2 25/2 0) (25/2 25/2 0)))
'(clean-cache
  rsa
  2
  15
  122
  app
  "\"'(eval (match (-> (app = (app modulo a b) 0) <-) (#f) _) (env ((□? (a b)))))\""
  113
  94
  11
  8
  57
  5
  62
  1
  103/135
  22
  #f
  200/47
  ((5 5 0) (5 5 0) (5 5 0)))
'(clean-cache
  rsa
  2
  15
  122
  app
  "\"'(eval (app = (-> (app modulo a b) <-) 0) (env ((□? (a b)))))\""
  95
  76
  11
  8
  48
  5
  53
  1
  779/990
  16
  #f
  80/19
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app modulo a (-> b <-)) (env ((□? (a b)))))\""
  91
  71
  11
  9
  39
  5
  44
  1
  539/900
  14
  #f
  298/71
  ((4 4 0) (4 4 0) (7/2 7/2 0)))
'(clean-cache
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app modulo (-> a <-) b) (env ((□? (a b)))))\""
  77
  58
  11
  8
  39
  5
  44
  1
  367/450
  10
  #f
  121/29
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  rsa
  2
  15
  122
  match
  "\"'(eval (λ (cdr-v) (-> (match cdr-v ...) <-)) (env ((□? (cdr-v)))))\""
  207
  177
  16
  14
  121
  7
  128
  1
  181/240
  51
  #f
  827/177
  ((25/2 25/2 0) (25/2 25/2 0) (25/2 25/2 0)))
'(clean-cache
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (match cdr-v ((cons cdr-c cdr-d) (-> cdr-d <-))) (env ((□? (cdr-v)))))\""
  204
  174
  16
  14
  120
  7
  127
  1
  137/180
  51
  #f
  815/174
  ((21/2 21/2 0) (21/2 21/2 0) (21/2 21/2 0)))
'(clean-cache
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (match (-> cdr-v <-) (cons cdr-c cdr-d)) (env ((□? (cdr-v)))))\""
  151
  126
  13
  12
  75
  6
  81
  1
  452/705
  39
  #f
  197/42
  ((7 7 0) (7 7 0) (7 7 0)))
'(clean-cache
  rsa
  2
  122
  match
  "\"'(eval (λ (car-v) (-> (match car-v ...) <-)) (env ((□? (car-v)))))\""
  #f)
'(clean-cache
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (match car-v ((cons car-c car-d) (-> car-c <-))) (env ((□? (car-v)))))\""
  217
  187
  16
  14
  141
  7
  148
  1
  3769/4440
  62
  #f
  885/187
  ((12 12 0) (23/2 23/2 0) (23/2 23/2 0)))
'(clean-cache
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (match (-> car-v <-) (cons car-c car-d)) (env ((□? (car-v)))))\""
  155
  129
  14
  12
  88
  6
  94
  1
  2293/2940
  47
  #f
  204/43
  ((7 7 0) (7 7 0) (7 7 0)))
'(clean-cache
  rsa
  2
  122
  match
  "\"'(eval\n  (letrec*\n   (car ... decrypted-ciphertext)\n   (-> (match (app not (app = plaintext decrypted-ciphertext)) ...) <-))\n  (env ()))\""
  #f)
'(clean-cache
  rsa
  2
  15
  122
  app
  "\"'(eval\n  (match\n   (app not (app = plaintext decrypted-ciphertext))\n   (#f)\n   (_ (-> (app error \"RSA fail!\") <-)))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  2
  15
  122
  app
  "\"'(eval\n  (match\n   (app not (app = plaintext decrypted-ciphertext))\n   ((#f) (-> (app display \"RSA success!\") <-))\n   _)\n  (env ()))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  2
  #t
  14/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  2
  122
  app
  "\"'(eval\n  (match (-> (app not (app = plaintext decrypted-ciphertext)) <-) (#f) _)\n  (env ()))\""
  #f)
'(clean-cache
  rsa
  2
  122
  app
  "\"'(eval (app not (-> (app = plaintext decrypted-ciphertext) <-)) (env ()))\""
  #f)
'(clean-cache
  rsa
  2
  122
  ref-or-constructor
  "\"'(eval (app = plaintext (-> decrypted-ciphertext <-)) (env ()))\""
  #f)
'(shuffled-cache
  0
  rsa
  2
  122
  match
  "\"'(eval\n  (λ (base exp n) (-> (match (app = exp 0) ...) <-))\n  (env ((□? (base exp n)))))\""
  #f)
'(shuffled-cache
  0
  rsa
  2
  15
  122
  app
  "\"'(eval\n  (letrec* (... e (d (-> (app private-exponent e p q) <-)) plaintext ...) ...)\n  (env ()))\""
  307
  275
  18
  14
  219
  8
  227
  1
  3061/3480
  96
  #f
  254/55
  ((29/2 29/2 0) (29/2 29/2 0) (29/2 29/2 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app decrypt ciphertext (-> d <-) n) (env ()))\""
  308
  276
  18
  14
  220
  8
  228
  1
  3091/3510
  96
  #f
  637/138
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  app
  "\"'(eval (letrec* (... q (n (-> (app * p q) <-)) e ...) ...) (env ()))\""
  312
  280
  18
  14
  224
  8
  232
  1
  3211/3630
  97
  #f
  1291/280
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app quotient (-> a <-) b) (env ((□? (a b)))))\""
  313
  281
  18
  14
  224
  8
  232
  1
  6407/7260
  97
  #f
  1295/281
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  app
  "\"'(eval (let* (... x:y (x (-> (app car x:y) <-)) y ...) ...) (env ((□? (a b)))))\""
  316
  284
  18
  14
  224
  8
  232
  1
  1592/1815
  99
  #f
  1309/284
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app cdr (-> x:y <-)) (env ((□? (a b)))))\""
  316
  284
  18
  14
  224
  8
  232
  1
  1592/1815
  99
  #f
  1309/284
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  app
  "\"'(eval\n  (app\n   and\n   (-> (app < 1 e) <-)\n   (app < e (app totient p q))\n   (app = 1 (app gcd e (app totient p q))))\n  (env ((□? (e p q)))))\""
  320
  288
  18
  14
  224
  8
  232
  1
  142/165
  101
  #t
  1327/288
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  app
  "\"'(eval\n  (app modulo-power base (-> (app - exp 1) <-) n)\n  (env ((□? (base exp n)))))\""
  449
  402
  27
  20
  307
  13
  320
  1
  152897/180180
  128
  #f
  905/201
  ((9 9 0) (17/2 17/2 0) (17/2 17/2 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (match car-v ((cons car-c car-d) (-> car-c <-))) (env ((□? (car-v)))))\""
  456
  406
  27
  23
  307
  13
  320
  1
  607493/720720
  129
  #f
  918/203
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  app
  "\"'(eval\n  (match\n   (app is-legal-public-exponent? e p q)\n   ((#f) (-> (app error \"Not a legal public exponent for that modulus.\") <-))\n   _)\n  (env ((□? (e p q)))))\""
  458
  408
  27
  23
  308
  13
  321
  1
  612953/731640
  131
  #t
  923/204
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  app
  "\"'(eval\n  (match (-> (app not (app = plaintext decrypted-ciphertext)) <-) (#f) _)\n  (env ()))\""
  633
  577
  29
  27
  469
  14
  483
  1
  945103/1081080
  184
  #f
  2593/577
  ((6 6 0) (6 6 0) (6 6 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval\n  (app modulo-power (-> base <-) (app / exp 2) n)\n  (env ((□? (base exp n)))))\""
  658
  602
  29
  27
  488
  14
  502
  1
  950473/1086540
  184
  #f
  2693/602
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval\n  (app modulo-power base (app - exp 1) (-> n <-))\n  (env ((□? (base exp n)))))\""
  682
  626
  29
  27
  506
  14
  520
  1
  955543/1092000
  184
  #f
  2789/626
  ((4 4 0) (4 4 0) (4 4 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval\n  (app modulo (app square (app modulo-power base (app / exp 2) n)) (-> n <-))\n  (env ((□? (base exp n)))))\""
  683
  627
  29
  27
  506
  14
  520
  1
  477089/546000
  184
  #f
  49/11
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app - (-> x <-) (app * y (app quotient a b))) (env ((□? (a b)))))\""
  686
  630
  29
  27
  506
  14
  520
  1
  118931/136500
  184
  #f
  187/42
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  app
  "\"'(eval\n  (let* (... () (x:y (-> (app extended-gcd b (app modulo a b)) <-)) x ...) ...)\n  (env ((□? (a b)))))\""
  686
  630
  29
  27
  506
  14
  520
  1
  118931/136500
  184
  #f
  187/42
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  app
  "\"'(eval\n  (match\n   (app not (app = plaintext decrypted-ciphertext))\n   (#f)\n   (_ (-> (app error \"RSA fail!\") <-)))\n  (env ()))\""
  688
  632
  29
  27
  508
  14
  522
  1
  120296/137865
  186
  #t
  2815/632
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app * x (-> x <-)) (env ((□? (x)))))\""
  722
  665
  29
  28
  538
  14
  552
  1
  160033/183820
  195
  #f
  592/133
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app extended-gcd a (-> n <-)) (env ((□? (a n)))))\""
  722
  665
  29
  28
  538
  14
  552
  1
  160033/183820
  195
  #f
  592/133
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  match
  "\"'(eval (λ (cdr-v) (-> (match cdr-v ...) <-)) (env ((□? (cdr-v)))))\""
  729
  670
  29
  30
  538
  14
  552
  1
  476459/551460
  195
  #f
  1494/335
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app modulo-power (-> m <-) e n) (env ((□? (m e n)))))\""
  729
  670
  29
  30
  538
  14
  552
  1
  476459/551460
  195
  #f
  1494/335
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval\n  (app cons (-> y <-) (app - x (app * y (app quotient a b))))\n  (env ((□? (a b)))))\""
  732
  673
  29
  30
  538
  14
  552
  1
  949369/1102920
  195
  #f
  3000/673
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  app
  "\"'(eval\n  (λ (a n) (-> (app modulo (app car (app extended-gcd a n)) n) <-))\n  (env ((□? (a n)))))\""
  733
  674
  29
  30
  538
  14
  552
  1
  946639/1102920
  195
  #f
  1502/337
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  match
  "\"'(eval\n  (match (app = exp 0) ((#f) (-> (match (app odd? exp) ...) <-)) _)\n  (env ((□? (base exp n)))))\""
  743
  684
  29
  30
  541
  14
  555
  1
  235321/275730
  197
  #f
  254/57
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app modulo-inverse (-> e <-) (app totient p q)) (env ((□? (e p q)))))\""
  744
  685
  29
  30
  541
  14
  555
  1
  469277/551460
  197
  #f
  3052/685
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  app
  "\"'(eval (match (-> (app > m n) <-) (#f) _) (env ((□? (m e n)))))\""
  745
  686
  29
  30
  541
  14
  555
  1
  116978/137865
  198
  #t
  3057/686
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  app
  "\"'(eval\n  (match (app > m n) ((#f) (-> (app modulo-power m e n) <-)) _)\n  (env ((□? (m e n)))))\""
  746
  687
  29
  30
  541
  14
  555
  1
  466547/551460
  198
  #f
  3061/687
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app decrypt ciphertext d (-> n <-)) (env ()))\""
  746
  687
  29
  30
  541
  14
  555
  1
  466547/551460
  198
  #f
  3061/687
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  app
  "\"'(eval\n  (app\n   and\n   (app < 1 e)\n   (-> (app < e (app totient p q)) <-)\n   (app = 1 (app gcd e (app totient p q))))\n  (env ((□? (e p q)))))\""
  750
  691
  29
  30
  541
  14
  555
  1
  461087/551460
  200
  #t
  3079/691
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  app
  "\"'(eval (app = (-> (app modulo a b) <-) 0) (env ((□? (a b)))))\""
  751
  692
  29
  30
  541
  14
  555
  1
  230407/275730
  200
  #f
  3083/692
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  app
  "\"'(eval\n  (app cons y (-> (app - x (app * y (app quotient a b))) <-))\n  (env ((□? (a b)))))\""
  758
  699
  29
  30
  541
  14
  555
  1
  91453/110292
  202
  #f
  3113/699
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app gcd (-> e <-) (app totient p q)) (env ((□? (e p q)))))\""
  759
  700
  29
  30
  541
  14
  555
  1
  22795/27573
  202
  #f
  3117/700
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (match cdr-v ((cons cdr-c cdr-d) (-> cdr-d <-))) (env ((□? (cdr-v)))))\""
  759
  700
  29
  30
  541
  14
  555
  1
  22795/27573
  202
  #f
  3117/700
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app encrypt plaintext e (-> n <-)) (env ()))\""
  759
  700
  29
  30
  541
  14
  555
  1
  22795/27573
  202
  #f
  3117/700
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app - (-> exp <-) 1) (env ((□? (base exp n)))))\""
  759
  700
  29
  30
  541
  14
  555
  1
  22795/27573
  202
  #f
  3117/700
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  app
  "\"'(eval\n  (app square (-> (app modulo-power base (app / exp 2) n) <-))\n  (env ((□? (base exp n)))))\""
  763
  704
  29
  30
  541
  14
  555
  1
  22756/27573
  205
  #f
  49/11
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app * (-> y <-) (app quotient a b)) (env ((□? (a b)))))\""
  764
  705
  29
  30
  541
  14
  555
  1
  181775/220584
  205
  #f
  628/141
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  match
  "\"'(eval (λ (car-v) (-> (match car-v ...) <-)) (env ((□? (car-v)))))\""
  767
  708
  29
  30
  541
  14
  555
  1
  181229/220584
  205
  #f
  788/177
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app - (-> q <-) 1) (env ((□? (p q)))))\""
  770
  709
  29
  32
  541
  14
  555
  1
  45239/55146
  205
  #f
  3156/709
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  app
  "\"'(eval (app extended-gcd b (-> (app modulo a b) <-)) (env ((□? (a b)))))\""
  770
  709
  29
  32
  541
  14
  555
  1
  45239/55146
  205
  #f
  3156/709
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  app
  "\"'(eval\n  (let* (x:y ... y)\n    (-> (app cons y (app - x (app * y (app quotient a b)))) <-))\n  (env ((□? (a b)))))\""
  773
  712
  29
  32
  541
  14
  555
  1
  901231/1102920
  208
  #t
  3175/712
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  app
  "\"'(eval (app modulo-inverse e (-> (app totient p q) <-)) (env ((□? (e p q)))))\""
  774
  713
  29
  32
  541
  14
  555
  1
  898501/1102920
  208
  #f
  3179/713
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  app
  "\"'(eval\n  (λ (e p q)\n    (->\n     (app\n      and\n      (app < 1 e)\n      (app < e (app totient p q))\n      (app = 1 (app gcd e (app totient p q))))\n     <-))\n  (env ((□? (e p q)))))\""
  779
  718
  29
  32
  541
  14
  555
  1
  888491/1102920
  213
  #t
  1602/359
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app modulo a (-> b <-)) (env ((□? (a b)))))\""
  780
  719
  29
  32
  541
  14
  555
  1
  177589/220584
  213
  #f
  3208/719
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  app
  "\"'(eval\n  (app modulo (-> (app car (app extended-gcd a n)) <-) n)\n  (env ((□? (a n)))))\""
  781
  720
  29
  32
  541
  14
  555
  1
  177043/220584
  213
  #f
  803/180
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app extended-gcd (-> b <-) (app modulo a b)) (env ((□? (a b)))))\""
  781
  720
  29
  32
  541
  14
  555
  1
  177043/220584
  213
  #f
  803/180
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  app
  "\"'(eval (app < e (-> (app totient p q) <-)) (env ((□? (e p q)))))\""
  783
  722
  29
  32
  541
  14
  555
  1
  176315/220584
  214
  #f
  3221/722
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app extended-gcd (-> a <-) n) (env ((□? (a n)))))\""
  783
  722
  29
  32
  541
  14
  555
  1
  176315/220584
  214
  #f
  3221/722
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app * (-> x <-) x) (env ((□? (x)))))\""
  784
  723
  29
  32
  541
  14
  555
  1
  175951/220584
  214
  #f
  1075/241
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app > (-> m <-) n) (env ((□? (m e n)))))\""
  785
  724
  29
  32
  541
  14
  555
  1
  175405/220584
  214
  #f
  3229/724
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  app
  "\"'(eval\n  (app modulo-power base (-> (app / exp 2) <-) n)\n  (env ((□? (base exp n)))))\""
  785
  724
  29
  32
  541
  14
  555
  1
  175405/220584
  214
  #f
  3229/724
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  app
  "\"'(eval (match (-> (app odd? exp) <-) (#f) _) (env ((□? (base exp n)))))\""
  792
  731
  29
  32
  541
  14
  555
  1
  174841/220584
  217
  #f
  3262/731
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app modulo (-> a <-) b) (env ((□? (a b)))))\""
  793
  732
  29
  32
  541
  14
  555
  1
  873659/1102920
  217
  #f
  1633/366
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  app
  "\"'(eval (λ (x) (-> (app * x x) <-)) (env ((□? (x)))))\""
  800
  739
  29
  32
  547
  14
  561
  1
  174659/220584
  219
  #f
  3296/739
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  match
  "\"'(eval (λ (m e n) (-> (match (app > m n) ...) <-)) (env ((□? (m e n)))))\""
  801
  740
  29
  32
  547
  14
  561
  1
  174113/220584
  219
  #f
  165/37
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app totient p (-> q <-)) (env ((□? (e p q)))))\""
  802
  741
  29
  32
  547
  14
  561
  1
  173567/220584
  219
  #f
  3304/741
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app modulo a (-> b <-)) (env ((□? (a b)))))\""
  803
  742
  29
  32
  547
  14
  561
  1
  867289/1102920
  219
  #f
  1654/371
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app quotient a (-> b <-)) (env ((□? (a b)))))\""
  804
  743
  29
  32
  547
  14
  561
  1
  216481/275730
  219
  #f
  3312/743
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  app
  "\"'(eval\n  (app modulo (-> (app square (app modulo-power base (app / exp 2) n)) <-) n)\n  (env ((□? (base exp n)))))\""
  817
  756
  29
  32
  556
  14
  570
  1
  288009/367640
  229
  #f
  241/54
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  app
  "\"'(eval (app * (-> (app - p 1) <-) (app - q 1)) (env ((□? (p q)))))\""
  821
  760
  29
  32
  556
  14
  570
  1
  286189/367640
  230
  #f
  3391/760
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app totient (-> p <-) q) (env ((□? (e p q)))))\""
  822
  761
  29
  32
  556
  14
  570
  1
  285279/367640
  230
  #f
  3395/761
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval\n  (app modulo-power (-> base <-) (app - exp 1) n)\n  (env ((□? (base exp n)))))\""
  823
  762
  29
  32
  556
  14
  570
  1
  285179/367640
  230
  #f
  1133/254
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  app
  "\"'(eval\n  (match\n   (app not (app = plaintext decrypted-ciphertext))\n   ((#f) (-> (app display \"RSA success!\") <-))\n   _)\n  (env ()))\""
  826
  765
  29
  32
  559
  14
  573
  1
  290639/373100
  232
  #t
  3413/765
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  app
  "\"'(eval (match (-> (app = exp 0) <-) (#f) _) (env ((□? (base exp n)))))\""
  839
  778
  29
  32
  562
  14
  576
  1
  289197/373100
  236
  #f
  3471/778
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  app
  "\"'(eval\n  (match\n   (app > m n)\n   (#f)\n   (_ (-> (app error \"The modulus is too small to encrypt the message.\") <-)))\n  (env ((□? (m e n)))))\""
  841
  780
  29
  32
  563
  14
  577
  1
  291017/376740
  238
  #t
  3481/780
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  app
  "\"'(eval\n  (letrec*\n   (...\n    plaintext\n    (ciphertext (-> (app encrypt plaintext e n) <-))\n    decrypted-ciphertext\n    ...)\n   ...)\n  (env ()))\""
  841
  780
  29
  32
  563
  14
  577
  1
  291017/376740
  238
  #f
  3481/780
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  app
  "\"'(eval (app * y (-> (app quotient a b) <-)) (env ((□? (a b)))))\""
  848
  787
  29
  32
  563
  14
  577
  1
  24077/31395
  240
  #f
  3511/787
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app is-legal-public-exponent? e (-> p <-) q) (env ((□? (e p q)))))\""
  848
  787
  29
  32
  563
  14
  577
  1
  24077/31395
  240
  #f
  3511/787
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app modulo-power m (-> e <-) n) (env ((□? (m e n)))))\""
  848
  787
  29
  32
  563
  14
  577
  1
  24077/31395
  240
  #f
  3511/787
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  match
  "\"'(eval\n  (λ (e p q) (-> (match (app is-legal-public-exponent? e p q) ...) <-))\n  (env ((□? (e p q)))))\""
  849
  788
  29
  32
  563
  14
  577
  1
  144007/188370
  240
  #f
  3515/788
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval\n  (app modulo (app car (app extended-gcd a n)) (-> n <-))\n  (env ((□? (a n)))))\""
  850
  789
  29
  32
  563
  14
  577
  1
  71776/94185
  240
  #f
  1173/263
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app modulo-power c (-> d <-) n) (env ((□? (c d n)))))\""
  850
  789
  29
  32
  563
  14
  577
  1
  71776/94185
  240
  #f
  1173/263
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  letrec*
  "\"'(eval\n  (lettypes cons ... cons (letrec* (car ... decrypted-ciphertext) ...))\n  (env ()))\""
  852
  791
  29
  32
  565
  14
  579
  1
  72686/95095
  240
  #f
  3531/791
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  app
  "\"'(eval\n  (match\n   (app is-legal-public-exponent? e p q)\n   (#f)\n   (_ (-> (app modulo-inverse e (app totient p q)) <-)))\n  (env ((□? (e p q)))))\""
  853
  792
  29
  32
  565
  14
  579
  1
  144917/190190
  240
  #f
  3535/792
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval\n  (app modulo-power base (app / exp 2) (-> n <-))\n  (env ((□? (base exp n)))))\""
  853
  792
  29
  32
  565
  14
  579
  1
  144917/190190
  240
  #f
  3535/792
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  app
  "\"'(eval (λ (c d n) (-> (app modulo-power c d n) <-)) (env ((□? (c d n)))))\""
  854
  793
  29
  32
  565
  14
  579
  1
  72231/95095
  240
  #f
  3539/793
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  lettypes
  "\"'(eval ((top) lettypes (cons) ...) (env ()))\""
  855
  794
  29
  32
  566
  14
  580
  1
  36343/47775
  240
  #f
  3545/794
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app < (-> e <-) (app totient p q)) (env ((□? (e p q)))))\""
  856
  795
  29
  32
  566
  14
  580
  1
  435661/573300
  240
  #f
  1183/265
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app is-legal-public-exponent? (-> e <-) p q) (env ((□? (e p q)))))\""
  856
  795
  29
  32
  566
  14
  580
  1
  435661/573300
  240
  #f
  1183/265
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval\n  (app modulo (app * base (app modulo-power base (app - exp 1) n)) (-> n <-))\n  (env ((□? (base exp n)))))\""
  857
  796
  29
  32
  566
  14
  580
  1
  869957/1146600
  240
  #f
  3553/796
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app odd? (-> exp <-)) (env ((□? (base exp n)))))\""
  858
  797
  29
  32
  566
  14
  580
  1
  869657/1146600
  240
  #f
  3557/797
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  match
  "\"'(eval\n  (λ (a b) (-> (match (app = (app modulo a b) 0) ...) <-))\n  (env ((□? (a b)))))\""
  859
  798
  29
  32
  566
  14
  580
  1
  869111/1146600
  240
  #f
  1783/399
  ((0 0 0) (0 0 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app modulo-power c d (-> n <-)) (env ((□? (c d n)))))\""
  859
  798
  29
  32
  566
  14
  580
  1
  869111/1146600
  240
  #f
  1783/399
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app is-legal-public-exponent? e p (-> q <-)) (env ((□? (e p q)))))\""
  859
  798
  29
  32
  566
  14
  580
  1
  869111/1146600
  240
  #f
  1783/399
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  app
  "\"'(eval\n  (match\n   (app odd? exp)\n   (#f)\n   (_\n    (->\n     (app modulo (app * base (app modulo-power base (app - exp 1) n)) n)\n     <-)))\n  (env ((□? (base exp n)))))\""
  922
  861
  29
  32
  619
  14
  633
  1
  4762721/6306300
  264
  #f
  3844/861
  ((5 5 0) (5 5 0) (5 5 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app = plaintext (-> decrypted-ciphertext <-)) (env ()))\""
  922
  861
  29
  32
  619
  14
  633
  1
  4762721/6306300
  264
  #f
  3844/861
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  app
  "\"'(eval (app = 1 (-> (app gcd e (app totient p q)) <-)) (env ((□? (e p q)))))\""
  926
  865
  29
  32
  619
  14
  633
  1
  4712671/6306300
  265
  #f
  3861/865
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app totient (-> p <-) q) (env ((□? (e p q)))))\""
  927
  866
  29
  32
  619
  14
  633
  1
  261537/350350
  265
  #f
  3865/866
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  match
  "\"'(eval\n  (letrec*\n   (car ... decrypted-ciphertext)\n   (-> (match (app not (app = plaintext decrypted-ciphertext)) ...) <-))\n  (env ()))\""
  927
  866
  29
  32
  619
  14
  633
  1
  261537/350350
  265
  #f
  3865/866
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app > m (-> n <-)) (env ((□? (m e n)))))\""
  928
  867
  29
  32
  619
  14
  633
  1
  1564217/2102100
  265
  #f
  3869/867
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  app
  "\"'(eval\n  (match (app = (app modulo a b) 0) (#f) (_ (-> (app cons 0 1) <-)))\n  (env ((□? (a b)))))\""
  932
  871
  29
  32
  620
  14
  634
  1
  2337817/3153150
  269
  #t
  3893/871
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval\n  (app * (-> base <-) (app modulo-power base (app - exp 1) n))\n  (env ((□? (base exp n)))))\""
  933
  872
  29
  32
  620
  14
  634
  1
  1168226/1576575
  269
  #f
  3897/872
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app totient (-> p <-) q) (env ((□? (e p q)))))\""
  933
  872
  29
  32
  620
  14
  634
  1
  1168226/1576575
  269
  #f
  3897/872
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app car (-> x:y <-)) (env ((□? (a b)))))\""
  933
  872
  29
  32
  620
  14
  634
  1
  1168226/1576575
  269
  #f
  3897/872
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  app
  "\"'(eval (app not (-> (app = plaintext decrypted-ciphertext) <-)) (env ()))\""
  933
  872
  29
  32
  620
  14
  634
  1
  1168226/1576575
  269
  #f
  3897/872
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  app
  "\"'(eval\n  (letrec*\n   (...\n    ciphertext\n    (decrypted-ciphertext (-> (app decrypt ciphertext d n) <-))\n    ()\n    ...)\n   ...)\n  (env ()))\""
  933
  872
  29
  32
  620
  14
  634
  1
  1168226/1576575
  269
  #f
  3897/872
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  app
  "\"'(eval\n  (match\n   (app odd? exp)\n   ((#f)\n    (->\n     (app modulo (app square (app modulo-power base (app / exp 2) n)) n)\n     <-))\n   _)\n  (env ((□? (base exp n)))))\""
  964
  903
  29
  32
  641
  14
  655
  1
  9318649/12612600
  279
  #f
  4031/903
  ((5/2 5/2 0) (5/2 5/2 0) (3 3 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  app
  "\"'(eval (app car (-> (app extended-gcd a n) <-)) (env ((□? (a n)))))\""
  964
  903
  29
  32
  641
  14
  655
  1
  9318649/12612600
  279
  #t
  4031/903
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (match (-> car-v <-) (cons car-c car-d)) (env ((□? (car-v)))))\""
  964
  903
  29
  32
  641
  14
  655
  1
  9318649/12612600
  279
  #f
  4031/903
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app totient p (-> q <-)) (env ((□? (e p q)))))\""
  964
  903
  29
  32
  641
  14
  655
  1
  9318649/12612600
  279
  #f
  4031/903
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app modulo-power (-> c <-) d n) (env ((□? (c d n)))))\""
  964
  903
  29
  32
  641
  14
  655
  1
  9318649/12612600
  279
  #f
  4031/903
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  app
  "\"'(eval\n  (app * base (-> (app modulo-power base (app - exp 1) n) <-))\n  (env ((□? (base exp n)))))\""
  968
  907
  29
  32
  641
  14
  655
  1
  715333/970200
  282
  #f
  4050/907
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  app
  "\"'(eval\n  (app modulo (-> (app * base (app modulo-power base (app - exp 1) n)) <-) n)\n  (env ((□? (base exp n)))))\""
  978
  917
  29
  32
  641
  14
  655
  1
  712213/970200
  285
  #f
  4093/917
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app modulo-power m e (-> n <-)) (env ((□? (m e n)))))\""
  978
  917
  29
  32
  641
  14
  655
  1
  712213/970200
  285
  #f
  4093/917
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  app
  "\"'(eval (app gcd e (-> (app totient p q) <-)) (env ((□? (e p q)))))\""
  980
  919
  29
  32
  641
  14
  655
  1
  709133/970200
  286
  #f
  4102/919
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app modulo (-> a <-) b) (env ((□? (a b)))))\""
  981
  920
  29
  32
  641
  14
  655
  1
  708671/970200
  286
  #f
  2053/460
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  app
  "\"'(eval\n  (app\n   and\n   (app < 1 e)\n   (app < e (app totient p q))\n   (-> (app = 1 (app gcd e (app totient p q))) <-))\n  (env ((□? (e p q)))))\""
  985
  924
  29
  32
  641
  14
  655
  1
  702511/970200
  288
  #t
  1031/231
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app = (-> exp <-) 0) (env ((□? (base exp n)))))\""
  986
  925
  29
  32
  641
  14
  655
  1
  9129343/12612600
  288
  #f
  4128/925
  ((1 1 0) (1/2 1/2 0) (1 1 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  app
  "\"'(eval (λ (p q) (-> (app * (app - p 1) (app - q 1)) <-)) (env ((□? (p q)))))\""
  990
  929
  29
  32
  641
  14
  655
  1
  9075289/12612600
  289
  #f
  4145/929
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (match (-> cdr-v <-) (cons cdr-c cdr-d)) (env ((□? (cdr-v)))))\""
  990
  929
  29
  32
  641
  14
  655
  1
  9075289/12612600
  289
  #f
  4145/929
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  app
  "\"'(eval\n  (match (-> (app is-legal-public-exponent? e p q) <-) (#f) _)\n  (env ((□? (e p q)))))\""
  991
  930
  29
  32
  641
  14
  655
  1
  9045259/12612600
  290
  #t
  415/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app < 1 (-> e <-)) (env ((□? (e p q)))))\""
  992
  931
  29
  32
  641
  14
  655
  1
  9035249/12612600
  290
  #f
  4154/931
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  app
  "\"'(eval (match (-> (app = (app modulo a b) 0) <-) (#f) _) (env ((□? (a b)))))\""
  993
  932
  29
  32
  641
  14
  655
  1
  9029243/12612600
  290
  #f
  1040/233
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app / (-> exp <-) 2) (env ((□? (base exp n)))))\""
  994
  933
  29
  32
  641
  14
  655
  1
  9025943/12612600
  290
  #f
  1388/311
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  app
  "\"'(eval (app - x (-> (app * y (app quotient a b)) <-)) (env ((□? (a b)))))\""
  1001
  940
  29
  32
  641
  14
  655
  1
  8965883/12612600
  292
  #f
  2097/470
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  app
  "\"'(eval (app * (app - p 1) (-> (app - q 1) <-)) (env ((□? (p q)))))\""
  1005
  944
  29
  32
  641
  14
  655
  1
  1783567/2522520
  293
  #f
  4211/944
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app totient p (-> q <-)) (env ((□? (e p q)))))\""
  1006
  945
  29
  32
  641
  14
  655
  1
  118771/168168
  293
  #f
  281/63
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  let*
  "\"'(eval\n  (match (app = (app modulo a b) 0) ((#f) (-> (let* (x:y ... y) ...) <-)) _)\n  (env ((□? (a b)))))\""
  1009
  948
  29
  32
  641
  14
  655
  1
  740567/1051050
  296
  #t
  1411/316
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app - (-> p <-) 1) (env ((□? (p q)))))\""
  1010
  949
  29
  32
  641
  14
  655
  1
  591853/840840
  296
  #f
  4237/949
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  app
  "\"'(eval (let* (... x (y (-> (app cdr x:y) <-)) () ...) ...) (env ((□? (a b)))))\""
  1013
  952
  29
  32
  641
  14
  655
  1
  196617/280280
  298
  #f
  4251/952
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app decrypt (-> ciphertext <-) d n) (env ()))\""
  1013
  952
  29
  32
  641
  14
  655
  1
  196617/280280
  298
  #f
  4251/952
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  122
  app
  "\"'(eval (λ (x) (-> (app * x x) <-)) (env ((□? (x)))))\""
  #f)
'(shuffled-cache
  1
  rsa
  2
  15
  122
  app
  "\"'(eval (let* (... x (y (-> (app cdr x:y) <-)) () ...) ...) (env ((□? (a b)))))\""
  210
  181
  16
  13
  123
  7
  130
  1
  1619/2160
  55
  #f
  843/181
  ((25/2 25/2 0) (12 12 0) (12 12 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  app
  "\"'(eval\n  (app modulo (-> (app car (app extended-gcd a n)) <-) n)\n  (env ((□? (a n)))))\""
  249
  220
  16
  13
  158
  7
  165
  1
  851/1140
  72
  #f
  511/110
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  rsa
  2
  122
  app
  "\"'(eval\n  (app modulo (-> (app square (app modulo-power base (app / exp 2) n)) <-) n)\n  (env ((□? (base exp n)))))\""
  #f)
'(shuffled-cache
  1
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app extended-gcd (-> b <-) (app modulo a b)) (env ((□? (a b)))))\""
  76
  57
  11
  8
  39
  5
  44
  1
  367/435
  10
  #f
  238/57
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  app
  "\"'(eval (app modulo-inverse e (-> (app totient p q) <-)) (env ((□? (e p q)))))\""
  76
  57
  11
  8
  39
  5
  44
  1
  367/435
  10
  #f
  238/57
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  122
  ref-or-constructor
  "\"'(eval (app modulo-power (-> c <-) d n) (env ((□? (c d n)))))\""
  #f)
'(shuffled-cache
  1
  rsa
  2
  15
  122
  app
  "\"'(eval\n  (match\n   (app not (app = plaintext decrypted-ciphertext))\n   ((#f) (-> (app display \"RSA success!\") <-))\n   _)\n  (env ()))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  2
  #t
  14/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app - (-> x <-) (app * y (app quotient a b))) (env ((□? (a b)))))\""
  217
  188
  16
  13
  127
  7
  134
  1
  847/1125
  57
  #f
  873/188
  ((12 12 0) (12 12 0) (12 12 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  match
  "\"'(eval (λ (car-v) (-> (match car-v ...) <-)) (env ((□? (car-v)))))\""
  255
  225
  16
  14
  159
  7
  166
  1
  1753/2310
  72
  #f
  349/75
  ((4 4 0) (4 4 0) (4 4 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app odd? (-> exp <-)) (env ((□? (base exp n)))))\""
  445
  395
  27
  23
  306
  13
  319
  1
  302551/360360
  122
  #f
  1777/395
  ((17/2 17/2 0) (8 8 0) (8 8 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app > m (-> n <-)) (env ((□? (m e n)))))\""
  451
  401
  27
  23
  311
  13
  324
  1
  316201/376740
  123
  #f
  1802/401
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app totient (-> p <-) q) (env ((□? (e p q)))))\""
  451
  401
  27
  23
  311
  13
  324
  1
  316201/376740
  123
  #f
  1802/401
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  app
  "\"'(eval (app car (-> (app extended-gcd a n) <-)) (env ((□? (a n)))))\""
  453
  403
  27
  23
  311
  13
  324
  1
  314381/376740
  125
  #t
  1812/403
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  app
  "\"'(eval\n  (match\n   (app odd? exp)\n   ((#f)\n    (->\n     (app modulo (app square (app modulo-power base (app / exp 2) n)) n)\n     <-))\n   _)\n  (env ((□? (base exp n)))))\""
  620
  566
  29
  25
  452
  14
  466
  1
  76177/90090
  172
  #f
  2519/566
  ((17/2 17/2 0) (17/2 17/2 0) (17/2 17/2 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  match
  "\"'(eval (λ (cdr-v) (-> (match cdr-v ...) <-)) (env ((□? (cdr-v)))))\""
  624
  569
  29
  26
  452
  14
  466
  1
  75631/90090
  172
  #f
  2535/569
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app totient (-> p <-) q) (env ((□? (e p q)))))\""
  624
  569
  29
  26
  452
  14
  466
  1
  75631/90090
  172
  #f
  2535/569
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  app
  "\"'(eval\n  (app * base (-> (app modulo-power base (app - exp 1) n) <-))\n  (env ((□? (base exp n)))))\""
  722
  666
  29
  27
  542
  14
  556
  1
  18282/21385
  208
  #f
  989/222
  ((9/2 9/2 0) (4 4 0) (9/2 9/2 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app = plaintext (-> decrypted-ciphertext <-)) (env ()))\""
  747
  690
  29
  28
  566
  14
  580
  1
  2505953/2912910
  215
  #f
  1537/345
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  app
  "\"'(eval (match (-> (app odd? exp) <-) (#f) _) (env ((□? (base exp n)))))\""
  754
  697
  29
  28
  566
  14
  580
  1
  1249099/1456455
  218
  #f
  3107/697
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  let*
  "\"'(eval\n  (match (app = (app modulo a b) 0) ((#f) (-> (let* (x:y ... y) ...) <-)) _)\n  (env ((□? (a b)))))\""
  757
  700
  29
  28
  566
  14
  580
  1
  9959759/11651640
  221
  #t
  125/28
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  app
  "\"'(eval\n  (match (app = (app modulo a b) 0) (#f) (_ (-> (app cons 0 1) <-)))\n  (env ((□? (a b)))))\""
  761
  704
  29
  28
  567
  14
  581
  1
  661715/776776
  225
  #t
  3149/704
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app decrypt ciphertext d (-> n <-)) (env ()))\""
  761
  704
  29
  28
  567
  14
  581
  1
  661715/776776
  225
  #f
  3149/704
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (match car-v ((cons car-c car-d) (-> car-c <-))) (env ((□? (car-v)))))\""
  761
  704
  29
  28
  567
  14
  581
  1
  661715/776776
  225
  #f
  3149/704
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  app
  "\"'(eval (match (-> (app = exp 0) <-) (#f) _) (env ((□? (base exp n)))))\""
  771
  714
  29
  28
  567
  14
  581
  1
  658579/776776
  228
  #f
  1597/357
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  match
  "\"'(eval\n  (λ (base exp n) (-> (match (app = exp 0) ...) <-))\n  (env ((□? (base exp n)))))\""
  780
  723
  29
  28
  567
  14
  581
  1
  3278551/3883880
  229
  #f
  3235/723
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  app
  "\"'(eval (app * (-> (app - p 1) <-) (app - q 1)) (env ((□? (p q)))))\""
  793
  733
  29
  31
  567
  14
  581
  1
  3256243/3883880
  232
  #f
  3278/733
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app decrypt (-> ciphertext <-) d n) (env ()))\""
  793
  733
  29
  31
  567
  14
  581
  1
  3256243/3883880
  232
  #f
  3278/733
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  app
  "\"'(eval\n  (λ (a n) (-> (app modulo (app car (app extended-gcd a n)) n) <-))\n  (env ((□? (a n)))))\""
  797
  737
  29
  31
  567
  14
  581
  1
  3216203/3883880
  233
  #f
  3295/737
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  app
  "\"'(eval (app gcd e (-> (app totient p q) <-)) (env ((□? (e p q)))))\""
  798
  738
  29
  31
  567
  14
  581
  1
  3206193/3883880
  233
  #f
  3299/738
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app > (-> m <-) n) (env ((□? (m e n)))))\""
  799
  739
  29
  31
  567
  14
  581
  1
  3196183/3883880
  233
  #f
  3303/739
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  letrec*
  "\"'(eval\n  (lettypes cons ... cons (letrec* (car ... decrypted-ciphertext) ...))\n  (env ()))\""
  809
  749
  29
  31
  577
  14
  591
  1
  3396383/4084080
  238
  #f
  3356/749
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  app
  "\"'(eval\n  (match (-> (app not (app = plaintext decrypted-ciphertext)) <-) (#f) _)\n  (env ()))\""
  809
  749
  29
  31
  577
  14
  591
  1
  3396383/4084080
  238
  #f
  3356/749
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval\n  (app modulo-power base (app / exp 2) (-> n <-))\n  (env ((□? (base exp n)))))\""
  809
  749
  29
  31
  577
  14
  591
  1
  3396383/4084080
  238
  #f
  3356/749
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app * x (-> x <-)) (env ((□? (x)))))\""
  811
  750
  29
  32
  577
  14
  591
  1
  1130793/1361360
  238
  #f
  112/25
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (match cdr-v ((cons cdr-c cdr-d) (-> cdr-d <-))) (env ((□? (cdr-v)))))\""
  811
  750
  29
  32
  577
  14
  591
  1
  1130793/1361360
  238
  #f
  112/25
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app = (-> exp <-) 0) (env ((□? (base exp n)))))\""
  812
  751
  29
  32
  577
  14
  591
  1
  199487/240240
  238
  #f
  3364/751
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval\n  (app modulo-power base (app - exp 1) (-> n <-))\n  (env ((□? (base exp n)))))\""
  813
  752
  29
  32
  577
  14
  591
  1
  260783/314160
  238
  #f
  421/94
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app * (-> x <-) x) (env ((□? (x)))))\""
  814
  753
  29
  32
  577
  14
  591
  1
  17365/20944
  238
  #f
  1124/251
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app totient p (-> q <-)) (env ((□? (e p q)))))\""
  814
  753
  29
  32
  577
  14
  591
  1
  17365/20944
  238
  #f
  1124/251
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  app
  "\"'(eval (app < e (-> (app totient p q) <-)) (env ((□? (e p q)))))\""
  815
  754
  29
  32
  577
  14
  591
  1
  51941/62832
  238
  #f
  1688/377
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app modulo-power m e (-> n <-)) (env ((□? (m e n)))))\""
  815
  754
  29
  32
  577
  14
  591
  1
  51941/62832
  238
  #f
  1688/377
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  match
  "\"'(eval (λ (m e n) (-> (match (app > m n) ...) <-)) (env ((□? (m e n)))))\""
  816
  755
  29
  32
  577
  14
  591
  1
  51787/62832
  238
  #f
  676/151
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  app
  "\"'(eval (app - x (-> (app * y (app quotient a b)) <-)) (env ((□? (a b)))))\""
  823
  762
  29
  32
  577
  14
  591
  1
  128351/157080
  240
  #f
  1705/381
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app modulo-power c d (-> n <-)) (env ((□? (c d n)))))\""
  823
  762
  29
  32
  577
  14
  591
  1
  128351/157080
  240
  #f
  1705/381
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval\n  (app * (-> base <-) (app modulo-power base (app - exp 1) n))\n  (env ((□? (base exp n)))))\""
  849
  788
  29
  32
  596
  14
  610
  1
  3351811/4104100
  240
  #f
  1757/394
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app quotient a (-> b <-)) (env ((□? (a b)))))\""
  850
  789
  29
  32
  596
  14
  610
  1
  1673403/2052050
  240
  #f
  3518/789
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  app
  "\"'(eval\n  (app cons y (-> (app - x (app * y (app quotient a b))) <-))\n  (env ((□? (a b)))))\""
  857
  796
  29
  32
  596
  14
  610
  1
  3323783/4104100
  242
  #f
  887/199
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  app
  "\"'(eval\n  (letrec* (... e (d (-> (app private-exponent e p q) <-)) plaintext ...) ...)\n  (env ()))\""
  857
  796
  29
  32
  596
  14
  610
  1
  3323783/4104100
  242
  #f
  887/199
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app modulo-power (-> m <-) e n) (env ((□? (m e n)))))\""
  857
  796
  29
  32
  596
  14
  610
  1
  3323783/4104100
  242
  #f
  887/199
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  app
  "\"'(eval\n  (match\n   (app > m n)\n   (#f)\n   (_ (-> (app error \"The modulus is too small to encrypt the message.\") <-)))\n  (env ((□? (m e n)))))\""
  859
  798
  29
  32
  597
  14
  611
  1
  1114601/1381380
  244
  #t
  593/133
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  app
  "\"'(eval\n  (match (-> (app is-legal-public-exponent? e p q) <-) (#f) _)\n  (env ((□? (e p q)))))\""
  860
  799
  29
  32
  597
  14
  611
  1
  3333793/4144140
  245
  #t
  3563/799
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app modulo-power m (-> e <-) n) (env ((□? (m e n)))))\""
  860
  799
  29
  32
  597
  14
  611
  1
  3333793/4144140
  245
  #f
  3563/799
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  app
  "\"'(eval\n  (app\n   and\n   (app < 1 e)\n   (-> (app < e (app totient p q)) <-)\n   (app = 1 (app gcd e (app totient p q))))\n  (env ((□? (e p q)))))\""
  861
  800
  29
  32
  597
  14
  611
  1
  3323783/4144140
  246
  #t
  223/50
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app is-legal-public-exponent? e (-> p <-) q) (env ((□? (e p q)))))\""
  862
  801
  29
  32
  597
  14
  611
  1
  368197/460460
  246
  #f
  3572/801
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval\n  (app modulo-power (-> base <-) (app - exp 1) n)\n  (env ((□? (base exp n)))))\""
  863
  802
  29
  32
  597
  14
  611
  1
  36403/45540
  246
  #f
  1788/401
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  app
  "\"'(eval\n  (λ (e p q)\n    (->\n     (app\n      and\n      (app < 1 e)\n      (app < e (app totient p q))\n      (app = 1 (app gcd e (app totient p q))))\n     <-))\n  (env ((□? (e p q)))))\""
  864
  803
  29
  32
  597
  14
  611
  1
  36293/45540
  247
  #t
  3581/803
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  lettypes
  "\"'(eval ((top) lettypes (cons) ...) (env ()))\""
  865
  804
  29
  32
  598
  14
  612
  1
  36513/45760
  247
  #f
  3587/804
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  match
  "\"'(eval\n  (match (app = exp 0) ((#f) (-> (match (app odd? exp) ...) <-)) _)\n  (env ((□? (base exp n)))))\""
  872
  811
  29
  32
  598
  14
  612
  1
  206667/260260
  248
  #f
  3618/811
  ((1/2 1/2 0) (1/2 1/2 0) (1 1 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  app
  "\"'(eval\n  (match\n   (app is-legal-public-exponent? e p q)\n   ((#f) (-> (app error \"Not a legal public exponent for that modulus.\") <-))\n   _)\n  (env ((□? (e p q)))))\""
  874
  813
  29
  32
  599
  14
  613
  1
  831673/1051050
  250
  #t
  3628/813
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval\n  (app modulo (app square (app modulo-power base (app / exp 2) n)) (-> n <-))\n  (env ((□? (base exp n)))))\""
  875
  814
  29
  32
  599
  14
  613
  1
  415699/525525
  250
  #f
  1816/407
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app - (-> q <-) 1) (env ((□? (p q)))))\""
  876
  815
  29
  32
  599
  14
  613
  1
  3322589/4204200
  250
  #f
  3636/815
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app totient (-> p <-) q) (env ((□? (e p q)))))\""
  876
  815
  29
  32
  599
  14
  613
  1
  3322589/4204200
  250
  #f
  3636/815
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app modulo (-> a <-) b) (env ((□? (a b)))))\""
  877
  816
  29
  32
  599
  14
  613
  1
  1659793/2102100
  250
  #f
  455/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  app
  "\"'(eval (match (-> (app = (app modulo a b) 0) <-) (#f) _) (env ((□? (a b)))))\""
  881
  820
  29
  32
  599
  14
  613
  1
  1653787/2102100
  251
  #f
  3659/820
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  app
  "\"'(eval\n  (letrec*\n   (...\n    plaintext\n    (ciphertext (-> (app encrypt plaintext e n) <-))\n    decrypted-ciphertext\n    ...)\n   ...)\n  (env ()))\""
  881
  820
  29
  32
  599
  14
  613
  1
  1653787/2102100
  251
  #f
  3659/820
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (match (-> cdr-v <-) (cons cdr-c cdr-d)) (env ((□? (cdr-v)))))\""
  881
  820
  29
  32
  599
  14
  613
  1
  1653787/2102100
  251
  #f
  3659/820
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval\n  (app cons (-> y <-) (app - x (app * y (app quotient a b))))\n  (env ((□? (a b)))))\""
  884
  823
  29
  32
  599
  14
  613
  1
  1098187/1401400
  251
  #f
  3671/823
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  app
  "\"'(eval\n  (app\n   and\n   (app < 1 e)\n   (app < e (app totient p q))\n   (-> (app = 1 (app gcd e (app totient p q))) <-))\n  (env ((□? (e p q)))))\""
  885
  824
  29
  32
  599
  14
  613
  1
  3284551/4204200
  252
  #t
  919/206
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app quotient (-> a <-) b) (env ((□? (a b)))))\""
  886
  825
  29
  32
  599
  14
  613
  1
  546591/700700
  252
  #f
  736/165
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app * (-> y <-) (app quotient a b)) (env ((□? (a b)))))\""
  887
  826
  29
  32
  599
  14
  613
  1
  409693/525525
  252
  #f
  1842/413
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app modulo-inverse (-> e <-) (app totient p q)) (env ((□? (e p q)))))\""
  887
  826
  29
  32
  599
  14
  613
  1
  409693/525525
  252
  #f
  1842/413
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval\n  (app modulo-power (-> base <-) (app / exp 2) n)\n  (env ((□? (base exp n)))))\""
  887
  826
  29
  32
  599
  14
  613
  1
  409693/525525
  252
  #f
  1842/413
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app decrypt ciphertext (-> d <-) n) (env ()))\""
  887
  826
  29
  32
  599
  14
  613
  1
  409693/525525
  252
  #f
  1842/413
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  app
  "\"'(eval (app = (-> (app modulo a b) <-) 0) (env ((□? (a b)))))\""
  891
  830
  29
  32
  599
  14
  613
  1
  544589/700700
  253
  #f
  3701/830
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  app
  "\"'(eval\n  (app\n   and\n   (-> (app < 1 e) <-)\n   (app < e (app totient p q))\n   (app = 1 (app gcd e (app totient p q))))\n  (env ((□? (e p q)))))\""
  892
  831
  29
  32
  599
  14
  613
  1
  814381/1051050
  254
  #t
  3706/831
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app extended-gcd a (-> n <-)) (env ((□? (a n)))))\""
  892
  831
  29
  32
  599
  14
  613
  1
  814381/1051050
  254
  #f
  3706/831
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app extended-gcd (-> a <-) n) (env ((□? (a n)))))\""
  892
  831
  29
  32
  599
  14
  613
  1
  814381/1051050
  254
  #f
  3706/831
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app modulo-power c (-> d <-) n) (env ((□? (c d n)))))\""
  892
  831
  29
  32
  599
  14
  613
  1
  814381/1051050
  254
  #f
  3706/831
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app encrypt plaintext e (-> n <-)) (env ()))\""
  892
  831
  29
  32
  599
  14
  613
  1
  814381/1051050
  254
  #f
  3706/831
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  app
  "\"'(eval\n  (app modulo (-> (app * base (app modulo-power base (app - exp 1) n)) <-) n)\n  (env ((□? (base exp n)))))\""
  923
  862
  29
  32
  620
  14
  634
  1
  3246469/4204200
  264
  #f
  1920/431
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  app
  "\"'(eval\n  (match\n   (app odd? exp)\n   (#f)\n   (_\n    (->\n     (app modulo (app * base (app modulo-power base (app - exp 1) n)) n)\n     <-)))\n  (env ((□? (base exp n)))))\""
  954
  893
  29
  32
  641
  14
  655
  1
  404314/525525
  274
  #f
  3974/893
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  app
  "\"'(eval\n  (app square (-> (app modulo-power base (app / exp 2) n) <-))\n  (env ((□? (base exp n)))))\""
  958
  897
  29
  32
  641
  14
  655
  1
  19219/25025
  277
  #f
  1331/299
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  match
  "\"'(eval\n  (letrec*\n   (car ... decrypted-ciphertext)\n   (-> (match (app not (app = plaintext decrypted-ciphertext)) ...) <-))\n  (env ()))\""
  958
  897
  29
  32
  641
  14
  655
  1
  19219/25025
  277
  #f
  1331/299
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  app
  "\"'(eval (app * (app - p 1) (-> (app - q 1) <-)) (env ((□? (p q)))))\""
  965
  904
  29
  32
  641
  14
  655
  1
  3212347/4204200
  279
  #f
  4023/904
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  app
  "\"'(eval (app = 1 (-> (app gcd e (app totient p q)) <-)) (env ((□? (e p q)))))\""
  966
  905
  29
  32
  641
  14
  655
  1
  3202337/4204200
  279
  #f
  4027/905
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app modulo a (-> b <-)) (env ((□? (a b)))))\""
  967
  906
  29
  32
  641
  14
  655
  1
  640067/840840
  279
  #f
  4031/906
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app gcd (-> e <-) (app totient p q)) (env ((□? (e p q)))))\""
  968
  907
  29
  32
  641
  14
  655
  1
  127613/168168
  279
  #f
  4035/907
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app cdr (-> x:y <-)) (env ((□? (a b)))))\""
  969
  908
  29
  32
  641
  14
  655
  1
  3188323/4204200
  279
  #f
  4043/908
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app - (-> p <-) 1) (env ((□? (p q)))))\""
  969
  908
  29
  32
  641
  14
  655
  1
  3188323/4204200
  279
  #f
  4043/908
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app totient p (-> q <-)) (env ((□? (e p q)))))\""
  969
  908
  29
  32
  641
  14
  655
  1
  3188323/4204200
  279
  #f
  4043/908
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  app
  "\"'(eval (app * y (-> (app quotient a b) <-)) (env ((□? (a b)))))\""
  976
  915
  29
  32
  641
  14
  655
  1
  1056101/1401400
  281
  #f
  4073/915
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app / (-> exp <-) 2) (env ((□? (base exp n)))))\""
  977
  916
  29
  32
  641
  14
  655
  1
  243631/323400
  281
  #f
  4077/916
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  app
  "\"'(eval\n  (letrec*\n   (...\n    ciphertext\n    (decrypted-ciphertext (-> (app decrypt ciphertext d n) <-))\n    ()\n    ...)\n   ...)\n  (env ()))\""
  977
  916
  29
  32
  641
  14
  655
  1
  243631/323400
  281
  #f
  4077/916
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app car (-> x:y <-)) (env ((□? (a b)))))\""
  977
  916
  29
  32
  641
  14
  655
  1
  243631/323400
  281
  #f
  4077/916
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  match
  "\"'(eval\n  (λ (a b) (-> (match (app = (app modulo a b) 0) ...) <-))\n  (env ((□? (a b)))))\""
  980
  919
  29
  32
  641
  14
  655
  1
  60773/80850
  283
  #f
  4096/919
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  match
  "\"'(eval\n  (λ (e p q) (-> (match (app is-legal-public-exponent? e p q) ...) <-))\n  (env ((□? (e p q)))))\""
  981
  920
  29
  32
  641
  14
  655
  1
  40387/53900
  283
  #f
  205/46
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  app
  "\"'(eval (match (-> (app > m n) <-) (#f) _) (env ((□? (m e n)))))\""
  982
  921
  29
  32
  641
  14
  655
  1
  30194/40425
  284
  #t
  4105/921
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  app
  "\"'(eval\n  (match\n   (app is-legal-public-exponent? e p q)\n   (#f)\n   (_ (-> (app modulo-inverse e (app totient p q)) <-)))\n  (env ((□? (e p q)))))\""
  983
  922
  29
  32
  641
  14
  655
  1
  120391/161700
  284
  #f
  4109/922
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  app
  "\"'(eval (λ (p q) (-> (app * (app - p 1) (app - q 1)) <-)) (env ((□? (p q)))))\""
  990
  929
  29
  32
  641
  14
  655
  1
  17117/23100
  286
  #f
  4139/929
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app is-legal-public-exponent? (-> e <-) p q) (env ((□? (e p q)))))\""
  991
  930
  29
  32
  641
  14
  655
  1
  8531/11550
  286
  #f
  1381/310
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (match (-> car-v <-) (cons car-c car-d)) (env ((□? (car-v)))))\""
  991
  930
  29
  32
  641
  14
  655
  1
  8531/11550
  286
  #f
  1381/310
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  app
  "\"'(eval (λ (c d n) (-> (app modulo-power c d n) <-)) (env ((□? (c d n)))))\""
  992
  931
  29
  32
  641
  14
  655
  1
  5669/7700
  286
  #f
  4147/931
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app modulo (-> a <-) b) (env ((□? (a b)))))\""
  993
  932
  29
  32
  641
  14
  655
  1
  607/825
  286
  #f
  4151/932
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  app
  "\"'(eval (letrec* (... q (n (-> (app * p q) <-)) e ...) ...) (env ()))\""
  993
  932
  29
  32
  641
  14
  655
  1
  607/825
  286
  #f
  4151/932
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  app
  "\"'(eval\n  (let* (x:y ... y)\n    (-> (app cons y (app - x (app * y (app quotient a b)))) <-))\n  (env ((□? (a b)))))\""
  996
  935
  29
  32
  641
  14
  655
  1
  5647/7700
  289
  #t
  834/187
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  app
  "\"'(eval (let* (... x:y (x (-> (app car x:y) <-)) y ...) ...) (env ((□? (a b)))))\""
  996
  935
  29
  32
  641
  14
  655
  1
  5647/7700
  289
  #f
  834/187
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app is-legal-public-exponent? e p (-> q <-)) (env ((□? (e p q)))))\""
  997
  936
  29
  32
  641
  14
  655
  1
  8443/11550
  289
  #f
  2087/468
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app < 1 (-> e <-)) (env ((□? (e p q)))))\""
  998
  937
  29
  32
  641
  14
  655
  1
  16831/23100
  289
  #f
  4178/937
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app modulo a (-> b <-)) (env ((□? (a b)))))\""
  999
  938
  29
  32
  641
  14
  655
  1
  841/1155
  289
  #f
  2091/469
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app < (-> e <-) (app totient p q)) (env ((□? (e p q)))))\""
  1000
  939
  29
  32
  641
  14
  655
  1
  479/660
  289
  #f
  4186/939
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval\n  (app modulo (app * base (app modulo-power base (app - exp 1) n)) (-> n <-))\n  (env ((□? (base exp n)))))\""
  1001
  940
  29
  32
  641
  14
  655
  1
  101671/140140
  289
  #f
  419/94
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  app
  "\"'(eval\n  (app modulo-power base (-> (app - exp 1) <-) n)\n  (env ((□? (base exp n)))))\""
  1011
  950
  29
  32
  641
  14
  655
  1
  303517/420420
  292
  #f
  4233/950
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app - (-> exp <-) 1) (env ((□? (base exp n)))))\""
  1012
  951
  29
  32
  641
  14
  655
  1
  23339/32340
  292
  #f
  4237/951
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  app
  "\"'(eval\n  (app modulo-power base (-> (app / exp 2) <-) n)\n  (env ((□? (base exp n)))))\""
  1012
  951
  29
  32
  641
  14
  655
  1
  23339/32340
  292
  #f
  4237/951
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  app
  "\"'(eval\n  (match (app > m n) ((#f) (-> (app modulo-power m e n) <-)) _)\n  (env ((□? (m e n)))))\""
  1013
  952
  29
  32
  641
  14
  655
  1
  3877/5390
  292
  #f
  4241/952
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  app
  "\"'(eval\n  (let* (... () (x:y (-> (app extended-gcd b (app modulo a b)) <-)) x ...) ...)\n  (env ((□? (a b)))))\""
  1013
  952
  29
  32
  641
  14
  655
  1
  3877/5390
  292
  #f
  4241/952
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval (app totient p (-> q <-)) (env ((□? (e p q)))))\""
  1013
  952
  29
  32
  641
  14
  655
  1
  3877/5390
  292
  #f
  4241/952
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  app
  "\"'(eval (app extended-gcd b (-> (app modulo a b) <-)) (env ((□? (a b)))))\""
  1013
  952
  29
  32
  641
  14
  655
  1
  3877/5390
  292
  #f
  4241/952
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  ref-or-constructor
  "\"'(eval\n  (app modulo (app car (app extended-gcd a n)) (-> n <-))\n  (env ((□? (a n)))))\""
  1014
  953
  29
  32
  641
  14
  655
  1
  69709/97020
  292
  #f
  4245/953
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  app
  "\"'(eval (app not (-> (app = plaintext decrypted-ciphertext) <-)) (env ()))\""
  1014
  953
  29
  32
  641
  14
  655
  1
  69709/97020
  292
  #f
  4245/953
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  15
  122
  app
  "\"'(eval\n  (match\n   (app not (app = plaintext decrypted-ciphertext))\n   (#f)\n   (_ (-> (app error \"RSA fail!\") <-)))\n  (env ()))\""
  1014
  953
  29
  32
  641
  14
  655
  1
  69709/97020
  292
  #t
  4245/953
  ((0 0 0) (0 0 0) (0 0 0)))
