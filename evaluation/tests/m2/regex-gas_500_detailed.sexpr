'(clean-cache
  regex
  2
  500
  450
  lettypes
  "'(eval ((top) lettypes (cons ... nil) ...) (env ()))"
  #f
  25
  17
  4
  4
  17
  3
  20
  1
  1
  7
  #f
  7/17
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  letrec*
  "'(eval (lettypes cons ... nil (letrec* (car ... check-expect) ...)) (env ()))"
  #f
  24
  16
  4
  4
  16
  3
  19
  1
  1
  7
  #f
  7/16
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  lambda
  "'(eval\n  (letrec*\n   (... regex-match (check-expect (-> (λ (check expect) ...) <-)) () ...)\n   ...)\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval\n  (λ (check expect) (-> (app equal? check expect) <-))\n  (env ((□? (check expect)))))"
  #f
  22
  14
  4
  4
  11
  3
  14
  1
  5/6
  6
  #f
  3/7
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app equal? check (-> expect <-)) (env ((□? (check expect)))))"
  #f
  6
  3
  2
  1
  2
  2
  4
  1
  2/3
  3
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app equal? (-> check <-) expect) (env ((□? (check expect)))))"
  #f
  18
  10
  4
  4
  9
  3
  12
  1
  9/10
  4
  #f
  2/5
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app (-> equal? <-) check expect) (env ((□? (check expect)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  lambda
  "'(eval\n  (letrec*\n   (... d/dc (regex-match (-> (λ (pattern data) ...) <-)) check-expect ...)\n   ...)\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  match
  "'(eval\n  (λ (pattern data) (-> (match (app null? data) ...) <-))\n  (env ((□? (pattern data)))))"
  #f
  124
  94
  17
  13
  82
  5
  87
  1
  223/246
  62
  #f
  41/47
  (4 4 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval\n  (match\n   (app null? data)\n   (#f)\n   (_ (-> (app regex-empty? (app regex-empty pattern)) <-)))\n  (env ((□? (pattern data)))))"
  #f
  31
  15
  7
  9
  5
  1
  6
  1
  7/24
  7
  #f
  7/15
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval\n  (app regex-empty? (-> (app regex-empty pattern) <-))\n  (env ((□? (pattern data)))))"
  #f
  25
  10
  7
  8
  5
  1
  6
  1
  1/2
  5
  #f
  1/2
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app regex-empty (-> pattern <-)) (env ((□? (pattern data)))))"
  #f
  40
  23
  10
  7
  22
  3
  25
  1
  14/15
  12
  #t
  12/23
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app (-> regex-empty <-) pattern) (env ((□? (pattern data)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval\n  (app (-> regex-empty? <-) (app regex-empty pattern))\n  (env ((□? (pattern data)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval\n  (match\n   (app null? data)\n   ((#f)\n    (-> (app regex-match (app d/dc pattern (app car ...)) (app cdr data)) <-))\n   _)\n  (env ((□? (pattern data)))))"
  #f
  15
  9
  2
  4
  4
  1
  5
  1
  4/9
  4
  #f
  4/9
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval\n  (app regex-match (app d/dc pattern (app car data)) (-> (app cdr data) <-))\n  (env ((□? (pattern data)))))"
  #f
  43
  30
  8
  5
  24
  3
  27
  1
  53/60
  24
  #f
  19/15
  (1 1 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app cdr (-> data <-)) (env ((□? (pattern data)))))"
  #f
  37
  25
  8
  4
  24
  3
  27
  1
  59/60
  23
  #f
  28/25
  (1 1 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app (-> cdr <-) data) (env ((□? (pattern data)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval\n  (app regex-match (-> (app d/dc pattern (app car data)) <-) (app cdr data))\n  (env ((□? (pattern data)))))"
  #f
  27
  12
  7
  8
  6
  1
  7
  1
  1/2
  6
  #f
  1/2
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval (app d/dc pattern (-> (app car data) <-)) (env ((□? (pattern data)))))"
  #f
  67
  43
  15
  9
  37
  4
  41
  1
  39/44
  36
  #f
  52/43
  (2 2 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app car (-> data <-)) (env ((□? (pattern data)))))"
  #f
  37
  25
  8
  4
  24
  3
  27
  1
  15/16
  23
  #f
  28/25
  (1 1 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app (-> car <-) data) (env ((□? (pattern data)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app d/dc (-> pattern <-) (app car data)) (env ((□? (pattern data)))))"
  #f
  40
  23
  10
  7
  22
  3
  25
  1
  14/15
  12
  #t
  12/23
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app (-> d/dc <-) pattern (app car data)) (env ((□? (pattern data)))))"
  #f
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  3
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval\n  (app (-> regex-match <-) (app d/dc pattern (app car data)) (app cdr data))\n  (env ((□? (pattern data)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval (match (-> (app null? data) <-) (#f) _) (env ((□? (pattern data)))))"
  #f
  67
  51
  10
  6
  42
  4
  46
  1
  64/75
  44
  #f
  20/17
  (2 2 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app null? (-> data <-)) (env ((□? (pattern data)))))"
  #f
  37
  25
  8
  4
  24
  3
  27
  1
  15/16
  23
  #f
  28/25
  (1 1 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app (-> null? <-) data) (env ((□? (pattern data)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval\n  (letrec*\n   (... regex-derivative (d/dc (-> regex-derivative <-)) regex-match ...)\n   ...)\n  (env ()))"
  #t
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  lambda
  "'(eval\n  (letrec*\n   (... regex-empty (regex-derivative (-> (λ (re c) ...) <-)) d/dc ...)\n   ...)\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  let
  "'(eval (λ (re c) (-> (let (_) ...) <-)) (env ((□? (re c)))))"
  #f
  #f)
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval\n  (let (... () (_ (-> (app debug-trace) <-)) () ...) ...)\n  (env ((□? (re c)))))"
  #f
  7
  4
  0
  3
  1
  0
  1
  1
  1/4
  4
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app (-> debug-trace <-)) (env ((□? (re c)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  match
  "'(eval (let (_) (-> (match (app regex-empty? re) ...) <-)) (env ((□? (re c)))))"
  #f
  #f)
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval\n  (match (app regex-empty? re) (#f) (_ (-> regex-NULL <-)))\n  (env ((□? (re c)))))"
  #f
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  3
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  match
  "'(eval\n  (match\n   (app regex-empty? re)\n   ((#f) (-> (match (app regex-null? re) ...) <-))\n   _)\n  (env ((□? (re c)))))"
  #f
  #f)
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval\n  (match (app regex-null? re) (#f) (_ (-> regex-NULL <-)))\n  (env ((□? (re c)))))"
  #f
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  3
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  match
  "'(eval\n  (match (app regex-null? re) ((#f) (-> (match (app eq? c re) ...) <-)) _)\n  (env ((□? (re c)))))"
  #f
  #f)
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (match (app eq? c re) (#f) (_ (-> regex-BLANK <-))) (env ((□? (re c)))))"
  #f
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  3
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  match
  "'(eval\n  (match (app eq? c re) ((#f) (-> (match (app regex-atom? re) ...) <-)) _)\n  (env ((□? (re c)))))"
  #f
  #f)
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval\n  (match (app regex-atom? re) (#f) (_ (-> regex-NULL <-)))\n  (env ((□? (re c)))))"
  #f
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  3
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  match
  "'(eval\n  (match\n   (app regex-atom? re)\n   ((#f) (-> (match (app match-seq re (λ (pat1 pat2) ...)) ...) <-))\n   _)\n  (env ((□? (re c)))))"
  #f
  26
  14
  4
  8
  8
  1
  9
  1
  4/7
  6
  #f
  3/7
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval\n  (match (app match-seq re (λ (pat1 pat2) ...)) (#f) (c-x (-> c-x <-)))\n  (env ((□? (re c)))))"
  #f
  26
  14
  4
  8
  8
  1
  9
  1
  4/7
  6
  #f
  3/7
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  match
  "'(eval\n  (match\n   (app match-seq re (λ (pat1 pat2) ...))\n   ((#f) (-> (match (app match-alt re (λ (pat1 pat2) ...)) ...) <-))\n   c-x)\n  (env ((□? (re c)))))"
  #f
  26
  14
  4
  8
  8
  1
  9
  1
  4/7
  6
  #f
  3/7
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval\n  (match (app match-alt re (λ (pat1 pat2) ...)) (#f) (c-x (-> c-x <-)))\n  (env ((□? (re c)))))"
  #f
  26
  14
  4
  8
  8
  1
  9
  1
  4/7
  6
  #f
  3/7
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  match
  "'(eval\n  (match\n   (app match-alt re (λ (pat1 pat2) ...))\n   ((#f) (-> (match (app match-rep re (λ (pat) ...)) ...) <-))\n   c-x)\n  (env ((□? (re c)))))"
  #f
  26
  14
  4
  8
  8
  1
  9
  1
  4/7
  6
  #f
  3/7
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval\n  (match (app match-rep re (λ (pat) ...)) (#f) (c-x (-> c-x <-)))\n  (env ((□? (re c)))))"
  #f
  26
  14
  4
  8
  8
  1
  9
  1
  4/7
  6
  #f
  3/7
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval\n  (match (app match-rep re (λ (pat) ...)) ((#f) (-> regex-NULL <-)) c-x)\n  (env ((□? (re c)))))"
  #f
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  3
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval\n  (match (-> (app match-rep re (λ (pat) ...)) <-) (#f) c-x)\n  (env ((□? (re c)))))"
  #f
  25
  13
  4
  8
  8
  1
  9
  1
  8/13
  6
  #f
  6/13
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  lambda
  "'(eval (app match-rep re (-> (λ (pat) ...) <-)) (env ((□? (re c)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval\n  (λ (pat) (-> (app seq (app d/dc pat c) (app rep pat)) <-))\n  (env ((□? (pat)) (□? (re c)))))"
  #f
  27
  10
  8
  9
  5
  1
  6
  1
  1/2
  5
  #f
  1/2
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval\n  (app seq (app d/dc pat c) (-> (app rep pat) <-))\n  (env ((□? (pat)) (□? (re c)))))"
  #f
  27
  10
  8
  9
  5
  1
  6
  1
  1/2
  5
  #f
  1/2
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app rep (-> pat <-)) (env ((□? (pat)) (□? (re c)))))"
  #f
  32
  11
  9
  12
  7
  1
  8
  1
  7/11
  6
  #f
  6/11
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app (-> rep <-) pat) (env ((□? (pat)) (□? (re c)))))"
  #t
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval\n  (app seq (-> (app d/dc pat c) <-) (app rep pat))\n  (env ((□? (pat)) (□? (re c)))))"
  #f
  28
  12
  7
  9
  6
  1
  7
  1
  1/2
  6
  #f
  1/2
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app d/dc pat (-> c <-)) (env ((□? (pat)) (□? (re c)))))"
  #f
  #f)
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app d/dc (-> pat <-) c) (env ((□? (pat)) (□? (re c)))))"
  #f
  32
  11
  9
  12
  7
  1
  8
  1
  7/11
  6
  #f
  6/11
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app (-> d/dc <-) pat c) (env ((□? (pat)) (□? (re c)))))"
  #f
  5
  3
  0
  2
  2
  0
  2
  1
  2/3
  3
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval\n  (app (-> seq <-) (app d/dc pat c) (app rep pat))\n  (env ((□? (pat)) (□? (re c)))))"
  #t
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app match-rep (-> re <-) (λ (pat) ...)) (env ((□? (re c)))))"
  #f
  #f)
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app (-> match-rep <-) re (λ (pat) ...)) (env ((□? (re c)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval\n  (match (-> (app match-alt re (λ (pat1 pat2) ...)) <-) (#f) c-x)\n  (env ((□? (re c)))))"
  #f
  25
  13
  4
  8
  8
  1
  9
  1
  8/13
  6
  #f
  6/13
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  lambda
  "'(eval (app match-alt re (-> (λ (pat1 pat2) ...) <-)) (env ((□? (re c)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval\n  (λ (pat1 pat2) (-> (app alt (app d/dc pat1 c) (app d/dc pat2 c)) <-))\n  (env ((□? (pat1 pat2)) (□? (re c)))))"
  #f
  27
  10
  8
  9
  5
  1
  6
  1
  1/2
  5
  #f
  1/2
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval\n  (app alt (app d/dc pat1 c) (-> (app d/dc pat2 c) <-))\n  (env ((□? (pat1 pat2)) (□? (re c)))))"
  #f
  28
  12
  7
  9
  6
  1
  7
  1
  1/2
  6
  #f
  1/2
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app d/dc pat2 (-> c <-)) (env ((□? (pat1 pat2)) (□? (re c)))))"
  #f
  #f)
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app d/dc (-> pat2 <-) c) (env ((□? (pat1 pat2)) (□? (re c)))))"
  #f
  32
  11
  9
  12
  7
  1
  8
  1
  7/11
  6
  #f
  6/11
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app (-> d/dc <-) pat2 c) (env ((□? (pat1 pat2)) (□? (re c)))))"
  #f
  5
  3
  0
  2
  2
  0
  2
  1
  2/3
  3
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval\n  (app alt (-> (app d/dc pat1 c) <-) (app d/dc pat2 c))\n  (env ((□? (pat1 pat2)) (□? (re c)))))"
  #f
  28
  12
  7
  9
  6
  1
  7
  1
  1/2
  6
  #f
  1/2
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app d/dc pat1 (-> c <-)) (env ((□? (pat1 pat2)) (□? (re c)))))"
  #f
  #f)
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app d/dc (-> pat1 <-) c) (env ((□? (pat1 pat2)) (□? (re c)))))"
  #f
  32
  11
  9
  12
  7
  1
  8
  1
  7/11
  6
  #f
  6/11
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app (-> d/dc <-) pat1 c) (env ((□? (pat1 pat2)) (□? (re c)))))"
  #f
  5
  3
  0
  2
  2
  0
  2
  1
  2/3
  3
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval\n  (app (-> alt <-) (app d/dc pat1 c) (app d/dc pat2 c))\n  (env ((□? (pat1 pat2)) (□? (re c)))))"
  #t
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app match-alt (-> re <-) (λ (pat1 pat2) ...)) (env ((□? (re c)))))"
  #f
  #f)
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app (-> match-alt <-) re (λ (pat1 pat2) ...)) (env ((□? (re c)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval\n  (match (-> (app match-seq re (λ (pat1 pat2) ...)) <-) (#f) c-x)\n  (env ((□? (re c)))))"
  #f
  25
  13
  4
  8
  8
  1
  9
  1
  8/13
  6
  #f
  6/13
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  lambda
  "'(eval (app match-seq re (-> (λ (pat1 pat2) ...) <-)) (env ((□? (re c)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval\n  (λ (pat1 pat2)\n    (->\n     (app\n      alt\n      (app seq (app d/dc ...) pat2)\n      (app seq (app regex-empty ...) (app d/dc ...)))\n     <-))\n  (env ((□? (pat1 pat2)) (□? (re c)))))"
  #f
  27
  10
  8
  9
  5
  1
  6
  1
  1/2
  5
  #f
  1/2
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval\n  (app\n   alt\n   (app seq (app d/dc pat1 c) pat2)\n   (-> (app seq (app regex-empty pat1) (app d/dc pat2 c)) <-))\n  (env ((□? (pat1 pat2)) (□? (re c)))))"
  #f
  27
  10
  8
  9
  5
  1
  6
  1
  1/2
  5
  #f
  1/2
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval\n  (app seq (app regex-empty pat1) (-> (app d/dc pat2 c) <-))\n  (env ((□? (pat1 pat2)) (□? (re c)))))"
  #f
  28
  12
  7
  9
  6
  1
  7
  1
  1/2
  6
  #f
  1/2
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app d/dc pat2 (-> c <-)) (env ((□? (pat1 pat2)) (□? (re c)))))"
  #f
  #f)
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app d/dc (-> pat2 <-) c) (env ((□? (pat1 pat2)) (□? (re c)))))"
  #f
  32
  11
  9
  12
  7
  1
  8
  1
  7/11
  6
  #f
  6/11
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app (-> d/dc <-) pat2 c) (env ((□? (pat1 pat2)) (□? (re c)))))"
  #f
  5
  3
  0
  2
  2
  0
  2
  1
  2/3
  3
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval\n  (app seq (-> (app regex-empty pat1) <-) (app d/dc pat2 c))\n  (env ((□? (pat1 pat2)) (□? (re c)))))"
  #f
  26
  10
  7
  9
  5
  1
  6
  1
  1/2
  5
  #f
  1/2
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app regex-empty (-> pat1 <-)) (env ((□? (pat1 pat2)) (□? (re c)))))"
  #f
  32
  11
  9
  12
  7
  1
  8
  1
  7/11
  6
  #f
  6/11
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app (-> regex-empty <-) pat1) (env ((□? (pat1 pat2)) (□? (re c)))))"
  #t
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval\n  (app (-> seq <-) (app regex-empty pat1) (app d/dc pat2 c))\n  (env ((□? (pat1 pat2)) (□? (re c)))))"
  #t
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval\n  (app\n   alt\n   (-> (app seq (app d/dc pat1 c) pat2) <-)\n   (app seq (app regex-empty pat1) (app d/dc pat2 c)))\n  (env ((□? (pat1 pat2)) (□? (re c)))))"
  #f
  27
  10
  8
  9
  5
  1
  6
  1
  1/2
  5
  #f
  1/2
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval\n  (app seq (app d/dc pat1 c) (-> pat2 <-))\n  (env ((□? (pat1 pat2)) (□? (re c)))))"
  #f
  32
  11
  9
  12
  7
  1
  8
  1
  7/11
  6
  #f
  6/11
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval\n  (app seq (-> (app d/dc pat1 c) <-) pat2)\n  (env ((□? (pat1 pat2)) (□? (re c)))))"
  #f
  28
  12
  7
  9
  6
  1
  7
  1
  1/2
  6
  #f
  1/2
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app d/dc pat1 (-> c <-)) (env ((□? (pat1 pat2)) (□? (re c)))))"
  #f
  #f)
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app d/dc (-> pat1 <-) c) (env ((□? (pat1 pat2)) (□? (re c)))))"
  #f
  32
  11
  9
  12
  7
  1
  8
  1
  7/11
  6
  #f
  6/11
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app (-> d/dc <-) pat1 c) (env ((□? (pat1 pat2)) (□? (re c)))))"
  #f
  5
  3
  0
  2
  2
  0
  2
  1
  2/3
  3
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval\n  (app (-> seq <-) (app d/dc pat1 c) pat2)\n  (env ((□? (pat1 pat2)) (□? (re c)))))"
  #t
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval\n  (app\n   (-> alt <-)\n   (app seq (app d/dc pat1 c) pat2)\n   (app seq (app regex-empty pat1) (app d/dc pat2 c)))\n  (env ((□? (pat1 pat2)) (□? (re c)))))"
  #t
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app match-seq (-> re <-) (λ (pat1 pat2) ...)) (env ((□? (re c)))))"
  #f
  #f)
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app (-> match-seq <-) re (λ (pat1 pat2) ...)) (env ((□? (re c)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval (match (-> (app regex-atom? re) <-) (#f) _) (env ((□? (re c)))))"
  #f
  #f)
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app regex-atom? (-> re <-)) (env ((□? (re c)))))"
  #f
  #f)
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app (-> regex-atom? <-) re) (env ((□? (re c)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval (match (-> (app eq? c re) <-) (#f) _) (env ((□? (re c)))))"
  #f
  #f)
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app eq? c (-> re <-)) (env ((□? (re c)))))"
  #f
  #f)
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app eq? (-> c <-) re) (env ((□? (re c)))))"
  #f
  #f)
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app (-> eq? <-) c re) (env ((□? (re c)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval (match (-> (app regex-null? re) <-) (#f) _) (env ((□? (re c)))))"
  #f
  #f)
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app regex-null? (-> re <-)) (env ((□? (re c)))))"
  #f
  #f)
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app (-> regex-null? <-) re) (env ((□? (re c)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval (match (-> (app regex-empty? re) <-) (#f) _) (env ((□? (re c)))))"
  #f
  #f)
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app regex-empty? (-> re <-)) (env ((□? (re c)))))"
  #f
  #f)
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app (-> regex-empty? <-) re) (env ((□? (re c)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  lambda
  "'(eval\n  (letrec*\n   (... rep (regex-empty (-> (λ (re) ...) <-)) regex-derivative ...)\n   ...)\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  match
  "'(eval (λ (re) (-> (match (app regex-empty? re) ...) <-)) (env ((□? (re)))))"
  #f
  #f)
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval\n  (match (app regex-empty? re) (#f) (_ (-> (app #t) <-)))\n  (env ((□? (re)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (re)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  match
  "'(eval\n  (match\n   (app regex-empty? re)\n   ((#f) (-> (match (app regex-null? re) ...) <-))\n   _)\n  (env ((□? (re)))))"
  #f
  #f)
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval\n  (match (app regex-null? re) (#f) (_ (-> (app #f) <-)))\n  (env ((□? (re)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (re)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  match
  "'(eval\n  (match\n   (app regex-null? re)\n   ((#f) (-> (match (app regex-atom? re) ...) <-))\n   _)\n  (env ((□? (re)))))"
  #f
  #f)
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval\n  (match (app regex-atom? re) (#f) (_ (-> (app #f) <-)))\n  (env ((□? (re)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (re)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  match
  "'(eval\n  (match\n   (app regex-atom? re)\n   ((#f) (-> (match (app match-seq re (λ (pat1 pat2) ...)) ...) <-))\n   _)\n  (env ((□? (re)))))"
  #f
  26
  14
  4
  8
  8
  1
  9
  1
  4/7
  6
  #f
  3/7
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval\n  (match (app match-seq re (λ (pat1 pat2) ...)) (#f) (c-x (-> c-x <-)))\n  (env ((□? (re)))))"
  #f
  26
  14
  4
  8
  8
  1
  9
  1
  4/7
  6
  #f
  3/7
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  match
  "'(eval\n  (match\n   (app match-seq re (λ (pat1 pat2) ...))\n   ((#f) (-> (match (app match-alt re (λ (pat1 pat2) ...)) ...) <-))\n   c-x)\n  (env ((□? (re)))))"
  #f
  26
  14
  4
  8
  8
  1
  9
  1
  4/7
  6
  #f
  3/7
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval\n  (match (app match-alt re (λ (pat1 pat2) ...)) (#f) (c-x (-> c-x <-)))\n  (env ((□? (re)))))"
  #f
  26
  14
  4
  8
  8
  1
  9
  1
  4/7
  6
  #f
  3/7
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  match
  "'(eval\n  (match\n   (app match-alt re (λ (pat1 pat2) ...))\n   ((#f) (-> (match (app regex-rep? re) ...) <-))\n   c-x)\n  (env ((□? (re)))))"
  #f
  21
  10
  4
  7
  4
  1
  5
  1
  2/5
  4
  #f
  2/5
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval (match (app regex-rep? re) (#f) (_ (-> (app #t) <-))) (env ((□? (re)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (re)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval (match (app regex-rep? re) ((#f) (-> (app #f) <-)) _) (env ((□? (re)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (re)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval (match (-> (app regex-rep? re) <-) (#f) _) (env ((□? (re)))))"
  #f
  20
  9
  4
  7
  4
  1
  5
  1
  4/9
  4
  #f
  4/9
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app regex-rep? (-> re <-)) (env ((□? (re)))))"
  #f
  #f)
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app (-> regex-rep? <-) re) (env ((□? (re)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval\n  (match (-> (app match-alt re (λ (pat1 pat2) ...)) <-) (#f) c-x)\n  (env ((□? (re)))))"
  #f
  25
  13
  4
  8
  8
  1
  9
  1
  8/13
  6
  #f
  6/13
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  lambda
  "'(eval (app match-alt re (-> (λ (pat1 pat2) ...) <-)) (env ((□? (re)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval\n  (λ (pat1 pat2)\n    (-> (app alt (app regex-empty pat1) (app regex-empty pat2)) <-))\n  (env ((□? (pat1 pat2)) (□? (re)))))"
  #f
  27
  10
  8
  9
  5
  1
  6
  1
  1/2
  5
  #f
  1/2
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval\n  (app alt (app regex-empty pat1) (-> (app regex-empty pat2) <-))\n  (env ((□? (pat1 pat2)) (□? (re)))))"
  #f
  26
  10
  7
  9
  5
  1
  6
  1
  1/2
  5
  #f
  1/2
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app regex-empty (-> pat2 <-)) (env ((□? (pat1 pat2)) (□? (re)))))"
  #f
  32
  11
  9
  12
  7
  1
  8
  1
  7/11
  6
  #f
  6/11
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app (-> regex-empty <-) pat2) (env ((□? (pat1 pat2)) (□? (re)))))"
  #t
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval\n  (app alt (-> (app regex-empty pat1) <-) (app regex-empty pat2))\n  (env ((□? (pat1 pat2)) (□? (re)))))"
  #f
  26
  10
  7
  9
  5
  1
  6
  1
  1/2
  5
  #f
  1/2
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app regex-empty (-> pat1 <-)) (env ((□? (pat1 pat2)) (□? (re)))))"
  #f
  32
  11
  9
  12
  7
  1
  8
  1
  7/11
  6
  #f
  6/11
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app (-> regex-empty <-) pat1) (env ((□? (pat1 pat2)) (□? (re)))))"
  #t
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval\n  (app (-> alt <-) (app regex-empty pat1) (app regex-empty pat2))\n  (env ((□? (pat1 pat2)) (□? (re)))))"
  #t
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app match-alt (-> re <-) (λ (pat1 pat2) ...)) (env ((□? (re)))))"
  #f
  #f)
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app (-> match-alt <-) re (λ (pat1 pat2) ...)) (env ((□? (re)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval\n  (match (-> (app match-seq re (λ (pat1 pat2) ...)) <-) (#f) c-x)\n  (env ((□? (re)))))"
  #f
  25
  13
  4
  8
  8
  1
  9
  1
  8/13
  6
  #f
  6/13
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  lambda
  "'(eval (app match-seq re (-> (λ (pat1 pat2) ...) <-)) (env ((□? (re)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval\n  (λ (pat1 pat2)\n    (-> (app seq (app regex-empty pat1) (app regex-empty pat2)) <-))\n  (env ((□? (pat1 pat2)) (□? (re)))))"
  #f
  27
  10
  8
  9
  5
  1
  6
  1
  1/2
  5
  #f
  1/2
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval\n  (app seq (app regex-empty pat1) (-> (app regex-empty pat2) <-))\n  (env ((□? (pat1 pat2)) (□? (re)))))"
  #f
  26
  10
  7
  9
  5
  1
  6
  1
  1/2
  5
  #f
  1/2
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app regex-empty (-> pat2 <-)) (env ((□? (pat1 pat2)) (□? (re)))))"
  #f
  32
  11
  9
  12
  7
  1
  8
  1
  7/11
  6
  #f
  6/11
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app (-> regex-empty <-) pat2) (env ((□? (pat1 pat2)) (□? (re)))))"
  #t
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval\n  (app seq (-> (app regex-empty pat1) <-) (app regex-empty pat2))\n  (env ((□? (pat1 pat2)) (□? (re)))))"
  #f
  26
  10
  7
  9
  5
  1
  6
  1
  1/2
  5
  #f
  1/2
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app regex-empty (-> pat1 <-)) (env ((□? (pat1 pat2)) (□? (re)))))"
  #f
  32
  11
  9
  12
  7
  1
  8
  1
  7/11
  6
  #f
  6/11
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app (-> regex-empty <-) pat1) (env ((□? (pat1 pat2)) (□? (re)))))"
  #t
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval\n  (app (-> seq <-) (app regex-empty pat1) (app regex-empty pat2))\n  (env ((□? (pat1 pat2)) (□? (re)))))"
  #t
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app match-seq (-> re <-) (λ (pat1 pat2) ...)) (env ((□? (re)))))"
  #f
  #f)
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app (-> match-seq <-) re (λ (pat1 pat2) ...)) (env ((□? (re)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval (match (-> (app regex-atom? re) <-) (#f) _) (env ((□? (re)))))"
  #f
  #f)
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app regex-atom? (-> re <-)) (env ((□? (re)))))"
  #f
  #f)
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app (-> regex-atom? <-) re) (env ((□? (re)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval (match (-> (app regex-null? re) <-) (#f) _) (env ((□? (re)))))"
  #f
  #f)
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app regex-null? (-> re <-)) (env ((□? (re)))))"
  #f
  #f)
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app (-> regex-null? <-) re) (env ((□? (re)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval (match (-> (app regex-empty? re) <-) (#f) _) (env ((□? (re)))))"
  #f
  #f)
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app regex-empty? (-> re <-)) (env ((□? (re)))))"
  #f
  #f)
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app (-> regex-empty? <-) re) (env ((□? (re)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  lambda
  "'(eval\n  (letrec* (... alt (rep (-> (λ (pat) ...) <-)) regex-empty ...) ...)\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  match
  "'(eval (λ (pat) (-> (match (app regex-null? pat) ...) <-)) (env ((□? (pat)))))"
  #f
  67
  29
  19
  19
  14
  3
  17
  1
  21/38
  12
  #f
  12/29
  (1 1 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval\n  (match (app regex-null? pat) (#f) (_ (-> regex-BLANK <-)))\n  (env ((□? (pat)))))"
  #f
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  3
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  match
  "'(eval\n  (match\n   (app regex-null? pat)\n   ((#f) (-> (match (app regex-empty? pat) ...) <-))\n   _)\n  (env ((□? (pat)))))"
  #f
  65
  29
  18
  18
  14
  3
  17
  1
  21/38
  12
  #f
  12/29
  (1 1 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval\n  (match (app regex-empty? pat) (#f) (_ (-> regex-BLANK <-)))\n  (env ((□? (pat)))))"
  #f
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  3
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval\n  (match\n   (app regex-empty? pat)\n   ((#f) (-> (app cons 'rep (app cons pat (app nil ...))) <-))\n   _)\n  (env ((□? (pat)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval (app cons 'rep (-> (app cons pat (app nil)) <-)) (env ((□? (pat)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval (app cons pat (-> (app nil) <-)) (env ((□? (pat)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app (-> nil <-)) (env ((□? (pat)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app cons (-> pat <-) (app nil)) (env ((□? (pat)))))"
  #f
  38
  13
  11
  14
  7
  2
  9
  1
  7/12
  6
  #f
  6/13
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app (-> cons <-) pat (app nil)) (env ((□? (pat)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  quoted
  "'(eval (app cons (-> 'rep <-) (app cons pat (app nil))) (env ((□? (pat)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app (-> cons <-) 'rep (app cons pat (app nil))) (env ((□? (pat)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval (match (-> (app regex-empty? pat) <-) (#f) _) (env ((□? (pat)))))"
  #f
  62
  26
  18
  18
  13
  3
  16
  1
  61/108
  12
  #f
  6/13
  (1 1 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app regex-empty? (-> pat <-)) (env ((□? (pat)))))"
  #f
  38
  13
  11
  14
  7
  2
  9
  1
  7/12
  6
  #f
  6/13
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app (-> regex-empty? <-) pat) (env ((□? (pat)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval (match (-> (app regex-null? pat) <-) (#f) _) (env ((□? (pat)))))"
  #f
  64
  26
  19
  19
  13
  3
  16
  1
  61/108
  12
  #f
  6/13
  (1 1 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app regex-null? (-> pat <-)) (env ((□? (pat)))))"
  #f
  38
  13
  11
  14
  7
  2
  9
  1
  7/12
  6
  #f
  6/13
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app (-> regex-null? <-) pat) (env ((□? (pat)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  lambda
  "'(eval\n  (letrec* (... seq (alt (-> (λ (pat1 pat2) ...) <-)) rep ...) ...)\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  match
  "'(eval\n  (λ (pat1 pat2) (-> (match (app regex-null? pat1) ...) <-))\n  (env ((□? (pat1 pat2)))))"
  #f
  96
  56
  19
  21
  24
  3
  27
  1
  57/160
  23
  #f
  23/56
  (2 2 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval\n  (match (app regex-null? pat1) (#f) (_ (-> pat2 <-)))\n  (env ((□? (pat1 pat2)))))"
  #f
  68
  32
  19
  17
  15
  3
  18
  1
  12/29
  15
  #f
  15/32
  (1 1 0))
'(clean-cache
  regex
  2
  500
  450
  match
  "'(eval\n  (match\n   (app regex-null? pat1)\n   ((#f) (-> (match (app regex-null? pat2) ...) <-))\n   _)\n  (env ((□? (pat1 pat2)))))"
  #f
  96
  56
  19
  21
  24
  3
  27
  1
  57/160
  23
  #f
  23/56
  (2 2 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval\n  (match (app regex-null? pat2) (#f) (_ (-> pat1 <-)))\n  (env ((□? (pat1 pat2)))))"
  #f
  68
  32
  19
  17
  15
  3
  18
  1
  12/29
  15
  #f
  15/32
  (1 1 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval\n  (match\n   (app regex-null? pat2)\n   ((#f) (-> (app cons 'alt (app cons pat1 (app cons ...))) <-))\n   _)\n  (env ((□? (pat1 pat2)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval\n  (app cons 'alt (-> (app cons pat1 (app cons pat2 (app nil ...))) <-))\n  (env ((□? (pat1 pat2)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval\n  (app cons pat1 (-> (app cons pat2 (app nil)) <-))\n  (env ((□? (pat1 pat2)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval (app cons pat2 (-> (app nil) <-)) (env ((□? (pat1 pat2)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app (-> nil <-)) (env ((□? (pat1 pat2)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app cons (-> pat2 <-) (app nil)) (env ((□? (pat1 pat2)))))"
  #f
  68
  32
  19
  17
  15
  3
  18
  1
  12/29
  15
  #f
  15/32
  (1 1 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app (-> cons <-) pat2 (app nil)) (env ((□? (pat1 pat2)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval\n  (app cons (-> pat1 <-) (app cons pat2 (app nil)))\n  (env ((□? (pat1 pat2)))))"
  #f
  68
  32
  19
  17
  15
  3
  18
  1
  12/29
  15
  #f
  15/32
  (1 1 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval\n  (app (-> cons <-) pat1 (app cons pat2 (app nil)))\n  (env ((□? (pat1 pat2)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  quoted
  "'(eval\n  (app cons (-> 'alt <-) (app cons pat1 (app cons pat2 (app nil ...))))\n  (env ((□? (pat1 pat2)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval\n  (app (-> cons <-) 'alt (app cons pat1 (app cons pat2 (app nil ...))))\n  (env ((□? (pat1 pat2)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval (match (-> (app regex-null? pat2) <-) (#f) _) (env ((□? (pat1 pat2)))))"
  #f
  92
  52
  19
  21
  24
  3
  27
  1
  57/155
  23
  #f
  23/52
  (2 2 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app regex-null? (-> pat2 <-)) (env ((□? (pat1 pat2)))))"
  #f
  68
  32
  19
  17
  15
  3
  18
  1
  12/29
  15
  #f
  15/32
  (1 1 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app (-> regex-null? <-) pat2) (env ((□? (pat1 pat2)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval (match (-> (app regex-null? pat1) <-) (#f) _) (env ((□? (pat1 pat2)))))"
  #f
  92
  52
  19
  21
  24
  3
  27
  1
  57/155
  23
  #f
  23/52
  (2 2 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app regex-null? (-> pat1 <-)) (env ((□? (pat1 pat2)))))"
  #f
  68
  32
  19
  17
  15
  3
  18
  1
  12/29
  15
  #f
  15/32
  (1 1 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app (-> regex-null? <-) pat1) (env ((□? (pat1 pat2)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  lambda
  "'(eval\n  (letrec* (... match-rep (seq (-> (λ (pat1 pat2) ...) <-)) alt ...) ...)\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  match
  "'(eval\n  (λ (pat1 pat2) (-> (match (app regex-null? pat1) ...) <-))\n  (env ((□? (pat1 pat2)))))"
  #f
  112
  70
  20
  22
  29
  3
  32
  1
  26/75
  27
  #f
  27/70
  (3 3 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval\n  (match (app regex-null? pat1) (#f) (_ (-> regex-NULL <-)))\n  (env ((□? (pat1 pat2)))))"
  #f
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  3
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  match
  "'(eval\n  (match\n   (app regex-null? pat1)\n   ((#f) (-> (match (app regex-null? pat2) ...) <-))\n   _)\n  (env ((□? (pat1 pat2)))))"
  #f
  146
  86
  29
  31
  44
  4
  48
  1
  299/602
  35
  #f
  35/86
  (4 4 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval\n  (match (app regex-null? pat2) (#f) (_ (-> regex-NULL <-)))\n  (env ((□? (pat1 pat2)))))"
  #f
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  3
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  match
  "'(eval\n  (match\n   (app regex-null? pat2)\n   ((#f) (-> (match (app regex-empty? pat1) ...) <-))\n   _)\n  (env ((□? (pat1 pat2)))))"
  #f
  101
  69
  12
  20
  28
  2
  30
  1
  10/39
  26
  #f
  26/69
  (3 3 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval\n  (match (app regex-empty? pat1) (#f) (_ (-> pat2 <-)))\n  (env ((□? (pat1 pat2)))))"
  #f
  107
  50
  29
  28
  26
  4
  30
  1
  21/40
  23
  #f
  23/50
  (3 3 0))
'(clean-cache
  regex
  2
  500
  450
  match
  "'(eval\n  (match\n   (app regex-empty? pat1)\n   ((#f) (-> (match (app regex-empty? pat2) ...) <-))\n   _)\n  (env ((□? (pat1 pat2)))))"
  #f
  146
  86
  29
  31
  44
  4
  48
  1
  150/301
  35
  #f
  35/86
  (4 4 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval\n  (match (app regex-empty? pat2) (#f) (_ (-> pat1 <-)))\n  (env ((□? (pat1 pat2)))))"
  #f
  66
  39
  12
  15
  16
  2
  18
  1
  7/23
  16
  #f
  16/39
  (2 2 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval\n  (match\n   (app regex-empty? pat2)\n   ((#f) (-> (app cons 'seq (app cons pat1 (app cons ...))) <-))\n   _)\n  (env ((□? (pat1 pat2)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval\n  (app cons 'seq (-> (app cons pat1 (app cons pat2 (app nil ...))) <-))\n  (env ((□? (pat1 pat2)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval\n  (app cons pat1 (-> (app cons pat2 (app nil)) <-))\n  (env ((□? (pat1 pat2)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval (app cons pat2 (-> (app nil) <-)) (env ((□? (pat1 pat2)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app (-> nil <-)) (env ((□? (pat1 pat2)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app cons (-> pat2 <-) (app nil)) (env ((□? (pat1 pat2)))))"
  #f
  107
  50
  29
  28
  26
  4
  30
  1
  21/40
  23
  #f
  23/50
  (3 3 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app (-> cons <-) pat2 (app nil)) (env ((□? (pat1 pat2)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval\n  (app cons (-> pat1 <-) (app cons pat2 (app nil)))\n  (env ((□? (pat1 pat2)))))"
  #f
  66
  39
  12
  15
  16
  2
  18
  1
  7/23
  16
  #f
  16/39
  (2 2 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval\n  (app (-> cons <-) pat1 (app cons pat2 (app nil)))\n  (env ((□? (pat1 pat2)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  quoted
  "'(eval\n  (app cons (-> 'seq <-) (app cons pat1 (app cons pat2 (app nil ...))))\n  (env ((□? (pat1 pat2)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval\n  (app (-> cons <-) 'seq (app cons pat1 (app cons pat2 (app nil ...))))\n  (env ((□? (pat1 pat2)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval (match (-> (app regex-empty? pat2) <-) (#f) _) (env ((□? (pat1 pat2)))))"
  #f
  139
  79
  29
  31
  42
  4
  46
  1
  74/147
  35
  #f
  35/79
  (4 4 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app regex-empty? (-> pat2 <-)) (env ((□? (pat1 pat2)))))"
  #f
  107
  50
  29
  28
  26
  4
  30
  1
  21/40
  23
  #f
  23/50
  (3 3 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app (-> regex-empty? <-) pat2) (env ((□? (pat1 pat2)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval (match (-> (app regex-empty? pat1) <-) (#f) _) (env ((□? (pat1 pat2)))))"
  #f
  96
  64
  12
  20
  28
  2
  30
  1
  4/15
  26
  #f
  13/32
  (3 3 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app regex-empty? (-> pat1 <-)) (env ((□? (pat1 pat2)))))"
  #f
  66
  39
  12
  15
  16
  2
  18
  1
  7/23
  16
  #f
  16/39
  (1 1 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app (-> regex-empty? <-) pat1) (env ((□? (pat1 pat2)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval (match (-> (app regex-null? pat2) <-) (#f) _) (env ((□? (pat1 pat2)))))"
  #f
  139
  79
  29
  31
  42
  4
  46
  1
  295/588
  35
  #f
  35/79
  (4 4 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app regex-null? (-> pat2 <-)) (env ((□? (pat1 pat2)))))"
  #f
  107
  50
  29
  28
  26
  4
  30
  1
  21/40
  23
  #f
  23/50
  (3 3 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app (-> regex-null? <-) pat2) (env ((□? (pat1 pat2)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval (match (-> (app regex-null? pat1) <-) (#f) _) (env ((□? (pat1 pat2)))))"
  #f
  107
  65
  20
  22
  29
  3
  32
  1
  52/145
  27
  #f
  27/65
  (3 3 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app regex-null? (-> pat1 <-)) (env ((□? (pat1 pat2)))))"
  #f
  66
  39
  12
  15
  16
  2
  18
  1
  7/23
  16
  #f
  16/39
  (2 2 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app (-> regex-null? <-) pat1) (env ((□? (pat1 pat2)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  lambda
  "'(eval\n  (letrec* (... match-alt (match-rep (-> (λ (re f) ...) <-)) seq ...) ...)\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  match
  "'(eval (λ (re f) (-> (match (app regex-rep? re) ...) <-)) (env ((□? (re f)))))"
  #f
  21
  10
  4
  7
  4
  1
  5
  1
  2/5
  4
  #f
  2/5
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  match
  "'(eval\n  (match\n   (app regex-rep? re)\n   (#f)\n   (_ (-> (match (app f (app cadr ...)) ...) <-)))\n  (env ((□? (re f)))))"
  #f
  39
  18
  10
  11
  8
  2
  10
  1
  4/7
  9
  #f
  1/2
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval\n  (match (app f (app cadr re)) (#f) (_ (-> (app #t) <-)))\n  (env ((□? (re f)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (re f)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval\n  (match (app f (app cadr re)) ((#f) (-> (app #f) <-)) _)\n  (env ((□? (re f)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (re f)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval (match (-> (app f (app cadr re)) <-) (#f) _) (env ((□? (re f)))))"
  #f
  37
  16
  10
  11
  8
  2
  10
  1
  8/13
  9
  #f
  9/16
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval (app f (-> (app cadr re) <-)) (env ((□? (re f)))))"
  #f
  25
  8
  7
  10
  4
  1
  5
  1
  1/2
  4
  #f
  1/2
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app cadr (-> re <-)) (env ((□? (re f)))))"
  #f
  #f)
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app (-> cadr <-) re) (env ((□? (re f)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app (-> f <-) (app cadr re)) (env ((□? (re f)))))"
  #f
  6
  2
  2
  2
  0
  1
  1
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval\n  (match (app regex-rep? re) ((#f) (-> (app #f) <-)) _)\n  (env ((□? (re f)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (re f)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval (match (-> (app regex-rep? re) <-) (#f) _) (env ((□? (re f)))))"
  #f
  20
  9
  4
  7
  4
  1
  5
  1
  4/9
  4
  #f
  4/9
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app regex-rep? (-> re <-)) (env ((□? (re f)))))"
  #f
  #f)
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app (-> regex-rep? <-) re) (env ((□? (re f)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  lambda
  "'(eval\n  (letrec*\n   (... match-seq (match-alt (-> (λ (re f) ...) <-)) match-rep ...)\n   ...)\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  match
  "'(eval (λ (re f) (-> (match (app regex-alt? re) ...) <-)) (env ((□? (re f)))))"
  #f
  21
  10
  4
  7
  4
  1
  5
  1
  2/5
  4
  #f
  2/5
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  match
  "'(eval\n  (match\n   (app regex-alt? re)\n   (#f)\n   (_ (-> (match (app f (app cadr ...) (app caddr ...)) ...) <-)))\n  (env ((□? (re f)))))"
  #f
  56
  31
  11
  14
  14
  2
  16
  1
  8/17
  15
  #f
  16/31
  (1 1 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval\n  (match (app f (app cadr re) (app caddr re)) (#f) (_ (-> (app #t) <-)))\n  (env ((□? (re f)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (re f)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval\n  (match (app f (app cadr re) (app caddr re)) ((#f) (-> (app #f) <-)) _)\n  (env ((□? (re f)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (re f)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval\n  (match (-> (app f (app cadr re) (app caddr re)) <-) (#f) _)\n  (env ((□? (re f)))))"
  #f
  53
  28
  11
  14
  14
  2
  16
  1
  1/2
  15
  #f
  4/7
  (1 1 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval (app f (app cadr re) (-> (app caddr re) <-)) (env ((□? (re f)))))"
  #f
  25
  8
  7
  10
  4
  1
  5
  1
  1/2
  4
  #f
  1/2
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app caddr (-> re <-)) (env ((□? (re f)))))"
  #f
  #f)
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app (-> caddr <-) re) (env ((□? (re f)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval (app f (-> (app cadr re) <-) (app caddr re)) (env ((□? (re f)))))"
  #f
  25
  8
  7
  10
  4
  1
  5
  1
  1/2
  4
  #f
  1/2
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app cadr (-> re <-)) (env ((□? (re f)))))"
  #f
  #f)
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app (-> cadr <-) re) (env ((□? (re f)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app (-> f <-) (app cadr re) (app caddr re)) (env ((□? (re f)))))"
  #f
  9
  3
  3
  3
  0
  1
  1
  1
  0
  3
  #t
  4/3
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval\n  (match (app regex-alt? re) ((#f) (-> (app #f) <-)) _)\n  (env ((□? (re f)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (re f)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval (match (-> (app regex-alt? re) <-) (#f) _) (env ((□? (re f)))))"
  #f
  20
  9
  4
  7
  4
  1
  5
  1
  4/9
  4
  #f
  4/9
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app regex-alt? (-> re <-)) (env ((□? (re f)))))"
  #f
  #f)
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app (-> regex-alt? <-) re) (env ((□? (re f)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  lambda
  "'(eval\n  (letrec*\n   (... regex-atom? (match-seq (-> (λ (re f) ...) <-)) match-alt ...)\n   ...)\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  match
  "'(eval (λ (re f) (-> (match (app regex-seq? re) ...) <-)) (env ((□? (re f)))))"
  #f
  21
  10
  4
  7
  4
  1
  5
  1
  2/5
  4
  #f
  2/5
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  match
  "'(eval\n  (match\n   (app regex-seq? re)\n   (#f)\n   (_ (-> (match (app f (app cadr ...) (app caddr ...)) ...) <-)))\n  (env ((□? (re f)))))"
  #f
  58
  32
  11
  15
  15
  2
  17
  1
  4/7
  16
  #f
  17/32
  (1 1 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval\n  (match (app f (app cadr re) (app caddr re)) (#f) (_ (-> (app #t) <-)))\n  (env ((□? (re f)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (re f)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval\n  (match (app f (app cadr re) (app caddr re)) ((#f) (-> (app #f) <-)) _)\n  (env ((□? (re f)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (re f)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval\n  (match (-> (app f (app cadr re) (app caddr re)) <-) (#f) _)\n  (env ((□? (re f)))))"
  #f
  55
  29
  11
  15
  15
  2
  17
  1
  3/5
  16
  #f
  17/29
  (1 1 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval (app f (app cadr re) (-> (app caddr re) <-)) (env ((□? (re f)))))"
  #f
  25
  8
  7
  10
  4
  1
  5
  1
  1/2
  4
  #f
  1/2
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app caddr (-> re <-)) (env ((□? (re f)))))"
  #f
  #f)
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app (-> caddr <-) re) (env ((□? (re f)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval (app f (-> (app cadr re) <-) (app caddr re)) (env ((□? (re f)))))"
  #f
  25
  8
  7
  10
  4
  1
  5
  1
  1/2
  4
  #f
  1/2
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app cadr (-> re <-)) (env ((□? (re f)))))"
  #f
  #f)
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app (-> cadr <-) re) (env ((□? (re f)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app (-> f <-) (app cadr re) (app caddr re)) (env ((□? (re f)))))"
  #f
  9
  3
  3
  3
  0
  1
  1
  1
  0
  3
  #t
  4/3
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval\n  (match (app regex-seq? re) ((#f) (-> (app #f) <-)) _)\n  (env ((□? (re f)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (re f)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval (match (-> (app regex-seq? re) <-) (#f) _) (env ((□? (re f)))))"
  #f
  20
  9
  4
  7
  4
  1
  5
  1
  4/9
  4
  #f
  4/9
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app regex-seq? (-> re <-)) (env ((□? (re f)))))"
  #f
  #f)
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app (-> regex-seq? <-) re) (env ((□? (re f)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  lambda
  "'(eval\n  (letrec*\n   (... regex-empty? (regex-atom? (-> (λ (re) ...) <-)) match-seq ...)\n   ...)\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  match
  "'(eval (λ (re) (-> (match (app char? re) ...) <-)) (env ((□? (re)))))"
  #f
  #f)
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval (match (app char? re) (#f) (_ (-> (app #t) <-))) (env ((□? (re)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (re)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  match
  "'(eval\n  (match (app char? re) ((#f) (-> (match (app symbol? re) ...) <-)) _)\n  (env ((□? (re)))))"
  #f
  #f)
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval (match (app symbol? re) (#f) (_ (-> (app #t) <-))) (env ((□? (re)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (re)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval (match (app symbol? re) ((#f) (-> (app #f) <-)) _) (env ((□? (re)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (re)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval (match (-> (app symbol? re) <-) (#f) _) (env ((□? (re)))))"
  #f
  #f)
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app symbol? (-> re <-)) (env ((□? (re)))))"
  #f
  #f)
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app (-> symbol? <-) re) (env ((□? (re)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval (match (-> (app char? re) <-) (#f) _) (env ((□? (re)))))"
  #f
  #f)
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app char? (-> re <-)) (env ((□? (re)))))"
  #f
  #f)
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app (-> char? <-) re) (env ((□? (re)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  lambda
  "'(eval\n  (letrec*\n   (... regex-null? (regex-empty? (-> (λ (re) ...) <-)) regex-atom? ...)\n   ...)\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval (λ (re) (-> (app eq? re (app #t)) <-)) (env ((□? (re)))))"
  #f
  #f)
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval (app eq? re (-> (app #t) <-)) (env ((□? (re)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (re)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app eq? (-> re <-) (app #t)) (env ((□? (re)))))"
  #f
  #f)
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app (-> eq? <-) re (app #t)) (env ((□? (re)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  lambda
  "'(eval\n  (letrec*\n   (... regex-rep? (regex-null? (-> (λ (re) ...) <-)) regex-empty? ...)\n   ...)\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval (λ (re) (-> (app eq? re (app #f)) <-)) (env ((□? (re)))))"
  #f
  #f)
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval (app eq? re (-> (app #f) <-)) (env ((□? (re)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (re)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app eq? (-> re <-) (app #f)) (env ((□? (re)))))"
  #f
  #f)
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app (-> eq? <-) re (app #f)) (env ((□? (re)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  lambda
  "'(eval\n  (letrec*\n   (... regex-seq? (regex-rep? (-> (λ (re) ...) <-)) regex-null? ...)\n   ...)\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  match
  "'(eval (λ (re) (-> (match (app pair? re) ...) <-)) (env ((□? (re)))))"
  #f
  #f)
'(clean-cache
  regex
  2
  500
  450
  match
  "'(eval\n  (match\n   (app pair? re)\n   (#f)\n   (_ (-> (match (app eq? (app car ...) 'rep) ...) <-)))\n  (env ((□? (re)))))"
  #f
  #f)
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval\n  (match (app eq? (app car re) 'rep) (#f) (_ (-> (app #t) <-)))\n  (env ((□? (re)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (re)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval\n  (match (app eq? (app car re) 'rep) ((#f) (-> (app #f) <-)) _)\n  (env ((□? (re)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (re)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval (match (-> (app eq? (app car re) 'rep) <-) (#f) _) (env ((□? (re)))))"
  #f
  #f)
'(clean-cache
  regex
  2
  500
  450
  quoted
  "'(eval (app eq? (app car re) (-> 'rep <-)) (env ((□? (re)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval (app eq? (-> (app car re) <-) 'rep) (env ((□? (re)))))"
  #f
  #f)
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app car (-> re <-)) (env ((□? (re)))))"
  #f
  #f)
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app (-> car <-) re) (env ((□? (re)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app (-> eq? <-) (app car re) 'rep) (env ((□? (re)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval (match (app pair? re) ((#f) (-> (app #f) <-)) _) (env ((□? (re)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (re)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval (match (-> (app pair? re) <-) (#f) _) (env ((□? (re)))))"
  #f
  #f)
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app pair? (-> re <-)) (env ((□? (re)))))"
  #f
  #f)
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app (-> pair? <-) re) (env ((□? (re)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  lambda
  "'(eval\n  (letrec*\n   (... regex-alt? (regex-seq? (-> (λ (re) ...) <-)) regex-rep? ...)\n   ...)\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  match
  "'(eval (λ (re) (-> (match (app pair? re) ...) <-)) (env ((□? (re)))))"
  #f
  #f)
'(clean-cache
  regex
  2
  500
  450
  match
  "'(eval\n  (match\n   (app pair? re)\n   (#f)\n   (_ (-> (match (app eq? (app car ...) 'seq) ...) <-)))\n  (env ((□? (re)))))"
  #f
  #f)
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval\n  (match (app eq? (app car re) 'seq) (#f) (_ (-> (app #t) <-)))\n  (env ((□? (re)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (re)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval\n  (match (app eq? (app car re) 'seq) ((#f) (-> (app #f) <-)) _)\n  (env ((□? (re)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (re)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval (match (-> (app eq? (app car re) 'seq) <-) (#f) _) (env ((□? (re)))))"
  #f
  #f)
'(clean-cache
  regex
  2
  500
  450
  quoted
  "'(eval (app eq? (app car re) (-> 'seq <-)) (env ((□? (re)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval (app eq? (-> (app car re) <-) 'seq) (env ((□? (re)))))"
  #f
  #f)
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app car (-> re <-)) (env ((□? (re)))))"
  #f
  #f)
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app (-> car <-) re) (env ((□? (re)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app (-> eq? <-) (app car re) 'seq) (env ((□? (re)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval (match (app pair? re) ((#f) (-> (app #f) <-)) _) (env ((□? (re)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (re)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval (match (-> (app pair? re) <-) (#f) _) (env ((□? (re)))))"
  #f
  #f)
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app pair? (-> re <-)) (env ((□? (re)))))"
  #f
  #f)
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app (-> pair? <-) re) (env ((□? (re)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  lambda
  "'(eval\n  (letrec*\n   (... regex-BLANK (regex-alt? (-> (λ (re) ...) <-)) regex-seq? ...)\n   ...)\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  match
  "'(eval (λ (re) (-> (match (app pair? re) ...) <-)) (env ((□? (re)))))"
  #f
  #f)
'(clean-cache
  regex
  2
  500
  450
  match
  "'(eval\n  (match\n   (app pair? re)\n   (#f)\n   (_ (-> (match (app eq? (app car ...) 'alt) ...) <-)))\n  (env ((□? (re)))))"
  #f
  #f)
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval\n  (match (app eq? (app car re) 'alt) (#f) (_ (-> (app #t) <-)))\n  (env ((□? (re)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (re)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval\n  (match (app eq? (app car re) 'alt) ((#f) (-> (app #f) <-)) _)\n  (env ((□? (re)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (re)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval (match (-> (app eq? (app car re) 'alt) <-) (#f) _) (env ((□? (re)))))"
  #f
  #f)
'(clean-cache
  regex
  2
  500
  450
  quoted
  "'(eval (app eq? (app car re) (-> 'alt <-)) (env ((□? (re)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval (app eq? (-> (app car re) <-) 'alt) (env ((□? (re)))))"
  #f
  #f)
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app car (-> re <-)) (env ((□? (re)))))"
  #f
  #f)
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app (-> car <-) re) (env ((□? (re)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app (-> eq? <-) (app car re) 'alt) (env ((□? (re)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval (match (app pair? re) ((#f) (-> (app #f) <-)) _) (env ((□? (re)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (re)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval (match (-> (app pair? re) <-) (#f) _) (env ((□? (re)))))"
  #f
  #f)
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app pair? (-> re <-)) (env ((□? (re)))))"
  #f
  #f)
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app (-> pair? <-) re) (env ((□? (re)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval\n  (letrec* (... regex-NULL (regex-BLANK (-> (app #t) <-)) regex-alt? ...) ...)\n  (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  constructor
  "'(eval (app (-> #t <-)) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval\n  (letrec* (... caddr (regex-NULL (-> (app #f) <-)) regex-BLANK ...) ...)\n  (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  constructor
  "'(eval (app (-> #f <-)) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  lambda
  "'(eval\n  (letrec* (... cadr (caddr (-> (λ (p) ...) <-)) regex-NULL ...) ...)\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval (λ (p) (-> (app car (app cdr (app cdr ...))) <-)) (env ((□? (p)))))"
  #f
  #f)
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval (app car (-> (app cdr (app cdr p)) <-)) (env ((□? (p)))))"
  #f
  #f)
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval (app cdr (-> (app cdr p) <-)) (env ((□? (p)))))"
  #f
  #f)
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app cdr (-> p <-)) (env ((□? (p)))))"
  #f
  #f)
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app (-> cdr <-) p) (env ((□? (p)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app (-> cdr <-) (app cdr p)) (env ((□? (p)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app (-> car <-) (app cdr (app cdr p))) (env ((□? (p)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  lambda
  "'(eval\n  (letrec* (... debug-trace (cadr (-> (λ (p) ...) <-)) caddr ...) ...)\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval (λ (p) (-> (app car (app cdr p)) <-)) (env ((□? (p)))))"
  #f
  #f)
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval (app car (-> (app cdr p) <-)) (env ((□? (p)))))"
  #f
  #f)
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app cdr (-> p <-)) (env ((□? (p)))))"
  #f
  #f)
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app (-> cdr <-) p) (env ((□? (p)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app (-> car <-) (app cdr p)) (env ((□? (p)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  lambda
  "'(eval\n  (letrec* (... null? (debug-trace (-> (λ () ...) <-)) cadr ...) ...)\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  quoted
  "'(eval (λ () (-> 'do-nothing <-)) (env ((□? ()))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  lambda
  "'(eval\n  (letrec* (... pair? (null? (-> (λ (null?-v) ...) <-)) debug-trace ...) ...)\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  match
  "'(eval (λ (null?-v) (-> (match null?-v ...) <-)) (env ((□? (null?-v)))))"
  #f
  62
  46
  10
  6
  36
  4
  40
  1
  221/264
  40
  #f
  55/46
  (1 1 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval (match null?-v (nil) (_ (-> (app #f) <-))) (env ((□? (null?-v)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (null?-v)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval (match null?-v ((nil) (-> (app #t) <-)) _) (env ((□? (null?-v)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (null?-v)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (match (-> null?-v <-) (nil) _) (env ((□? (null?-v)))))"
  #f
  45
  29
  10
  6
  27
  4
  31
  1
  63/68
  26
  #f
  34/29
  (1 1 0))
'(clean-cache
  regex
  2
  500
  450
  lambda
  "'(eval\n  (letrec* (... cdr (pair? (-> (λ (pair?-v) ...) <-)) null? ...) ...)\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  match
  "'(eval (λ (pair?-v) (-> (match pair?-v ...) <-)) (env ((□? (pair?-v)))))"
  #f
  #f)
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval\n  (match pair?-v (cons pair?-c pair?-d) (_ (-> (app #f) <-)))\n  (env ((□? (pair?-v)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (pair?-v)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval\n  (match pair?-v ((cons pair?-c pair?-d) (-> (app #t) <-)) _)\n  (env ((□? (pair?-v)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (pair?-v)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (match (-> pair?-v <-) (cons pair?-c pair?-d) _) (env ((□? (pair?-v)))))"
  #f
  #f)
'(clean-cache
  regex
  2
  500
  450
  lambda
  "'(eval\n  (letrec* (... car (cdr (-> (λ (cdr-v) ...) <-)) pair? ...) ...)\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  match
  "'(eval (λ (cdr-v) (-> (match cdr-v ...) <-)) (env ((□? (cdr-v)))))"
  #f
  #f)
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (match cdr-v ((cons cdr-c cdr-d) (-> cdr-d <-))) (env ((□? (cdr-v)))))"
  #f
  #f)
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (match (-> cdr-v <-) (cons cdr-c cdr-d)) (env ((□? (cdr-v)))))"
  #f
  #f)
'(clean-cache
  regex
  2
  500
  450
  lambda
  "'(eval (letrec* (... () (car (-> (λ (car-v) ...) <-)) cdr ...) ...) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  match
  "'(eval (λ (car-v) (-> (match car-v ...) <-)) (env ((□? (car-v)))))"
  #f
  #f)
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (match car-v ((cons car-c car-d) (-> car-c <-))) (env ((□? (car-v)))))"
  #f
  #f)
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (match (-> car-v <-) (cons car-c car-d)) (env ((□? (car-v)))))"
  #f
  #f)
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval\n  (letrec*\n   (car ... check-expect)\n   (->\n    (app check-expect (app regex-match (app cons ...) (app cons ...)) (app #f))\n    <-))\n  (env ()))"
  #f
  23
  15
  4
  4
  15
  3
  18
  1
  1
  7
  #f
  7/15
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval\n  (app\n   check-expect\n   (app\n    regex-match\n    (app cons 'seq (app cons ...))\n    (app cons 'foo (app cons ...)))\n   (-> (app #f) <-))\n  (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  constructor
  "'(eval (app (-> #f <-)) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval\n  (app\n   check-expect\n   (->\n    (app\n     regex-match\n     (app cons 'seq (app cons ...))\n     (app cons 'foo (app cons ...)))\n    <-)\n   (app #f))\n  (env ()))"
  #f
  14
  9
  2
  3
  9
  1
  10
  1
  1
  4
  #f
  4/9
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval\n  (app\n   regex-match\n   (app cons 'seq (app cons 'foo (app cons ...)))\n   (-> (app cons 'foo (app cons 'bar (app nil ...))) <-))\n  (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval (app cons 'foo (-> (app cons 'bar (app nil)) <-)) (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval (app cons 'bar (-> (app nil) <-)) (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app (-> nil <-)) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  quoted
  "'(eval (app cons (-> 'bar <-) (app nil)) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app (-> cons <-) 'bar (app nil)) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  quoted
  "'(eval (app cons (-> 'foo <-) (app cons 'bar (app nil))) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app (-> cons <-) 'foo (app cons 'bar (app nil))) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval\n  (app\n   regex-match\n   (-> (app cons 'seq (app cons 'foo (app cons ...))) <-)\n   (app cons 'foo (app cons 'bar (app nil ...))))\n  (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval\n  (app\n   cons\n   'seq\n   (-> (app cons 'foo (app cons (app cons ...) (app nil ...))) <-))\n  (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval\n  (app cons 'foo (-> (app cons (app cons 'rep (app cons ...)) (app nil)) <-))\n  (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval\n  (app cons (app cons 'rep (app cons 'bar (app nil ...))) (-> (app nil) <-))\n  (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app (-> nil <-)) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval\n  (app cons (-> (app cons 'rep (app cons 'bar (app nil ...))) <-) (app nil))\n  (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval (app cons 'rep (-> (app cons 'bar (app nil)) <-)) (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  app
  "'(eval (app cons 'bar (-> (app nil) <-)) (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app (-> nil <-)) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  quoted
  "'(eval (app cons (-> 'bar <-) (app nil)) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app (-> cons <-) 'bar (app nil)) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  quoted
  "'(eval (app cons (-> 'rep <-) (app cons 'bar (app nil))) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval (app (-> cons <-) 'rep (app cons 'bar (app nil))) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval\n  (app (-> cons <-) (app cons 'rep (app cons 'bar (app nil ...))) (app nil))\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  quoted
  "'(eval\n  (app cons (-> 'foo <-) (app cons (app cons 'rep (app cons ...)) (app nil)))\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval\n  (app (-> cons <-) 'foo (app cons (app cons 'rep (app cons ...)) (app nil)))\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  quoted
  "'(eval\n  (app\n   cons\n   (-> 'seq <-)\n   (app cons 'foo (app cons (app cons ...) (app nil ...))))\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval\n  (app\n   (-> cons <-)\n   'seq\n   (app cons 'foo (app cons (app cons ...) (app nil ...))))\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval\n  (app\n   (-> regex-match <-)\n   (app cons 'seq (app cons 'foo (app cons ...)))\n   (app cons 'foo (app cons 'bar (app nil ...))))\n  (env ()))"
  #t
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  regex
  2
  500
  450
  ref-or-constructor
  "'(eval\n  (app\n   (-> check-expect <-)\n   (app\n    regex-match\n    (app cons 'seq (app cons ...))\n    (app cons 'foo (app cons ...)))\n   (app #f))\n  (env ()))"
  #t
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
