'(clean-cache
  ack
  2
  5
  20
  letrec*
  "\"'(eval ((top) letrec* (ack) ...) (env ()))\""
  45
  38
  5
  2
  38
  2
  40
  1
  1
  11
  #f
  167/38
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  ack
  2
  20
  match
  "\"'(eval (λ (m n) (-> (match (app = m 0) ...) <-)) (env ((□? (m n)))))\""
  #f)
'(clean-cache
  ack
  2
  20
  app
  "\"'(eval (match (app = m 0) (#f) (_ (-> (app + n 1) <-))) (env ((□? (m n)))))\""
  #f)
'(clean-cache
  ack
  2
  20
  ref-or-constructor
  "\"'(eval (app + (-> n <-) 1) (env ((□? (m n)))))\""
  #f)
'(clean-cache
  ack
  2
  20
  match
  "\"'(eval\n  (match (app = m 0) ((#f) (-> (match (app = n 0) ...) <-)) _)\n  (env ((□? (m n)))))\""
  #f)
'(clean-cache
  ack
  2
  20
  app
  "\"'(eval\n  (match (app = n 0) (#f) (_ (-> (app ack (app - m 1) 1) <-)))\n  (env ((□? (m n)))))\""
  #f)
'(clean-cache
  ack
  2
  20
  app
  "\"'(eval (app ack (-> (app - m 1) <-) 1) (env ((□? (m n)))))\""
  #f)
'(clean-cache
  ack
  2
  20
  ref-or-constructor
  "\"'(eval (app - (-> m <-) 1) (env ((□? (m n)))))\""
  #f)
'(clean-cache
  ack
  2
  20
  app
  "\"'(eval\n  (match\n   (app = n 0)\n   ((#f) (-> (app ack (app - m 1) (app ack m (app - n 1))) <-))\n   _)\n  (env ((□? (m n)))))\""
  #f)
'(clean-cache
  ack
  2
  20
  app
  "\"'(eval\n  (app ack (app - m 1) (-> (app ack m (app - n 1)) <-))\n  (env ((□? (m n)))))\""
  #f)
'(clean-cache
  ack
  2
  20
  app
  "\"'(eval (app ack m (-> (app - n 1) <-)) (env ((□? (m n)))))\""
  #f)
'(clean-cache
  ack
  2
  20
  ref-or-constructor
  "\"'(eval (app - (-> n <-) 1) (env ((□? (m n)))))\""
  #f)
'(clean-cache
  ack
  2
  20
  ref-or-constructor
  "\"'(eval (app ack (-> m <-) (app - n 1)) (env ((□? (m n)))))\""
  #f)
'(clean-cache
  ack
  2
  20
  app
  "\"'(eval\n  (app ack (-> (app - m 1) <-) (app ack m (app - n 1)))\n  (env ((□? (m n)))))\""
  #f)
'(clean-cache
  ack
  2
  20
  ref-or-constructor
  "\"'(eval (app - (-> m <-) 1) (env ((□? (m n)))))\""
  #f)
'(clean-cache
  ack
  2
  20
  app
  "\"'(eval (match (-> (app = n 0) <-) (#f) _) (env ((□? (m n)))))\""
  #f)
'(clean-cache
  ack
  2
  20
  ref-or-constructor
  "\"'(eval (app = (-> n <-) 0) (env ((□? (m n)))))\""
  #f)
'(clean-cache
  ack
  2
  20
  app
  "\"'(eval (match (-> (app = m 0) <-) (#f) _) (env ((□? (m n)))))\""
  #f)
'(clean-cache
  ack
  2
  20
  ref-or-constructor
  "\"'(eval (app = (-> m <-) 0) (env ((□? (m n)))))\""
  #f)
'(clean-cache
  ack
  2
  5
  20
  app
  "\"'(eval (letrec* (ack) (-> (app ack 3 12) <-)) (env ()))\""
  44
  37
  5
  2
  37
  2
  39
  1
  1
  11
  #f
  163/37
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  ack
  2
  20
  app
  "\"'(eval (match (-> (app = m 0) <-) (#f) _) (env ((□? (m n)))))\""
  #f)
'(shuffled-cache
  0
  ack
  2
  20
  app
  "\"'(eval\n  (match (app = n 0) (#f) (_ (-> (app ack (app - m 1) 1) <-)))\n  (env ((□? (m n)))))\""
  #f)
'(shuffled-cache
  0
  ack
  2
  20
  match
  "\"'(eval (λ (m n) (-> (match (app = m 0) ...) <-)) (env ((□? (m n)))))\""
  #f)
'(shuffled-cache
  0
  ack
  2
  5
  20
  app
  "\"'(eval (letrec* (ack) (-> (app ack 3 12) <-)) (env ()))\""
  44
  37
  5
  2
  37
  2
  39
  1
  1
  11
  #f
  163/37
  ((1 3/2 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  ack
  2
  20
  app
  "\"'(eval (app ack (-> (app - m 1) <-) 1) (env ((□? (m n)))))\""
  #f)
'(shuffled-cache
  0
  ack
  2
  20
  app
  "\"'(eval (match (-> (app = n 0) <-) (#f) _) (env ((□? (m n)))))\""
  #f)
'(shuffled-cache
  0
  ack
  2
  20
  ref-or-constructor
  "\"'(eval (app = (-> n <-) 0) (env ((□? (m n)))))\""
  #f)
'(shuffled-cache
  0
  ack
  2
  20
  ref-or-constructor
  "\"'(eval (app - (-> m <-) 1) (env ((□? (m n)))))\""
  #f)
'(shuffled-cache
  0
  ack
  2
  20
  ref-or-constructor
  "\"'(eval (app = (-> m <-) 0) (env ((□? (m n)))))\""
  #f)
'(shuffled-cache
  0
  ack
  2
  20
  app
  "\"'(eval\n  (app ack (-> (app - m 1) <-) (app ack m (app - n 1)))\n  (env ((□? (m n)))))\""
  #f)
'(shuffled-cache
  0
  ack
  2
  20
  ref-or-constructor
  "\"'(eval (app - (-> n <-) 1) (env ((□? (m n)))))\""
  #f)
'(shuffled-cache
  0
  ack
  2
  20
  app
  "\"'(eval\n  (app ack (app - m 1) (-> (app ack m (app - n 1)) <-))\n  (env ((□? (m n)))))\""
  #f)
'(shuffled-cache
  0
  ack
  2
  5
  20
  letrec*
  "\"'(eval ((top) letrec* (ack) ...) (env ()))\""
  45
  38
  5
  2
  38
  2
  40
  1
  1
  11
  #f
  167/38
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  ack
  2
  20
  ref-or-constructor
  "\"'(eval (app ack (-> m <-) (app - n 1)) (env ((□? (m n)))))\""
  #f)
'(shuffled-cache
  0
  ack
  2
  20
  app
  "\"'(eval\n  (match\n   (app = n 0)\n   ((#f) (-> (app ack (app - m 1) (app ack m (app - n 1))) <-))\n   _)\n  (env ((□? (m n)))))\""
  #f)
'(shuffled-cache
  0
  ack
  2
  20
  ref-or-constructor
  "\"'(eval (app + (-> n <-) 1) (env ((□? (m n)))))\""
  #f)
'(shuffled-cache
  0
  ack
  2
  20
  app
  "\"'(eval (match (app = m 0) (#f) (_ (-> (app + n 1) <-))) (env ((□? (m n)))))\""
  #f)
'(shuffled-cache
  0
  ack
  2
  20
  ref-or-constructor
  "\"'(eval (app - (-> m <-) 1) (env ((□? (m n)))))\""
  #f)
'(shuffled-cache
  0
  ack
  2
  20
  match
  "\"'(eval\n  (match (app = m 0) ((#f) (-> (match (app = n 0) ...) <-)) _)\n  (env ((□? (m n)))))\""
  #f)
'(shuffled-cache
  0
  ack
  2
  20
  app
  "\"'(eval (app ack m (-> (app - n 1) <-)) (env ((□? (m n)))))\""
  #f)
'(shuffled-cache
  1
  ack
  2
  5
  20
  letrec*
  "\"'(eval ((top) letrec* (ack) ...) (env ()))\""
  45
  38
  5
  2
  38
  2
  40
  1
  1
  11
  #f
  167/38
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  ack
  2
  20
  match
  "\"'(eval (λ (m n) (-> (match (app = m 0) ...) <-)) (env ((□? (m n)))))\""
  #f)
'(shuffled-cache
  1
  ack
  2
  20
  app
  "\"'(eval (match (-> (app = n 0) <-) (#f) _) (env ((□? (m n)))))\""
  #f)
'(shuffled-cache
  1
  ack
  2
  20
  ref-or-constructor
  "\"'(eval (app = (-> m <-) 0) (env ((□? (m n)))))\""
  #f)
'(shuffled-cache
  1
  ack
  2
  20
  app
  "\"'(eval (match (app = m 0) (#f) (_ (-> (app + n 1) <-))) (env ((□? (m n)))))\""
  #f)
'(shuffled-cache
  1
  ack
  2
  20
  app
  "\"'(eval\n  (app ack (-> (app - m 1) <-) (app ack m (app - n 1)))\n  (env ((□? (m n)))))\""
  #f)
'(shuffled-cache
  1
  ack
  2
  20
  app
  "\"'(eval\n  (match\n   (app = n 0)\n   ((#f) (-> (app ack (app - m 1) (app ack m (app - n 1))) <-))\n   _)\n  (env ((□? (m n)))))\""
  #f)
'(shuffled-cache
  1
  ack
  2
  20
  app
  "\"'(eval\n  (app ack (app - m 1) (-> (app ack m (app - n 1)) <-))\n  (env ((□? (m n)))))\""
  #f)
'(shuffled-cache
  1
  ack
  2
  20
  app
  "\"'(eval\n  (match (app = n 0) (#f) (_ (-> (app ack (app - m 1) 1) <-)))\n  (env ((□? (m n)))))\""
  #f)
'(shuffled-cache
  1
  ack
  2
  20
  match
  "\"'(eval\n  (match (app = m 0) ((#f) (-> (match (app = n 0) ...) <-)) _)\n  (env ((□? (m n)))))\""
  #f)
'(shuffled-cache
  1
  ack
  2
  20
  ref-or-constructor
  "\"'(eval (app ack (-> m <-) (app - n 1)) (env ((□? (m n)))))\""
  #f)
'(shuffled-cache
  1
  ack
  2
  20
  ref-or-constructor
  "\"'(eval (app - (-> m <-) 1) (env ((□? (m n)))))\""
  #f)
'(shuffled-cache
  1
  ack
  2
  20
  ref-or-constructor
  "\"'(eval (app = (-> n <-) 0) (env ((□? (m n)))))\""
  #f)
'(shuffled-cache
  1
  ack
  2
  20
  app
  "\"'(eval (app ack m (-> (app - n 1) <-)) (env ((□? (m n)))))\""
  #f)
'(shuffled-cache
  1
  ack
  2
  20
  app
  "\"'(eval (app ack (-> (app - m 1) <-) 1) (env ((□? (m n)))))\""
  #f)
'(shuffled-cache
  1
  ack
  2
  20
  ref-or-constructor
  "\"'(eval (app + (-> n <-) 1) (env ((□? (m n)))))\""
  #f)
'(shuffled-cache
  1
  ack
  2
  5
  20
  app
  "\"'(eval (letrec* (ack) (-> (app ack 3 12) <-)) (env ()))\""
  44
  37
  5
  2
  37
  2
  39
  1
  1
  11
  #f
  163/37
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  ack
  2
  20
  ref-or-constructor
  "\"'(eval (app - (-> m <-) 1) (env ((□? (m n)))))\""
  #f)
'(shuffled-cache
  1
  ack
  2
  20
  app
  "\"'(eval (match (-> (app = m 0) <-) (#f) _) (env ((□? (m n)))))\""
  #f)
'(shuffled-cache
  1
  ack
  2
  20
  ref-or-constructor
  "\"'(eval (app - (-> n <-) 1) (env ((□? (m n)))))\""
  #f)
