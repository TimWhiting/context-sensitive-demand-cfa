'(clean-cache
  sat-2
  2
  56
  letrec*
  "\"'(eval ((top) letrec* (phi ... sat-solve-7) ...) (env ()))\""
  #f)
'(clean-cache
  sat-2
  2
  56
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  #f)
'(clean-cache
  sat-2
  2
  56
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  #f)
'(clean-cache
  sat-2
  2
  56
  app
  "\"'(eval\n  (λ (n2) (-> (app try (λ (n3) ...)) <-))\n  (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  #f)
'(clean-cache
  sat-2
  2
  56
  app
  "\"'(eval\n  (λ (n3) (-> (app try (λ (n4) ...)) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  #f)
'(clean-cache
  sat-2
  2
  56
  app
  "\"'(eval\n  (λ (n4) (-> (app try (λ (n5) ...)) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  #f)
'(clean-cache
  sat-2
  2
  56
  app
  "\"'(eval\n  (λ (n5) (-> (app try (λ (n6) ...)) <-))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  #f)
'(clean-cache
  sat-2
  2
  56
  app
  "\"'(eval\n  (λ (n6) (-> (app try (λ (n7) ...)) <-))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  #f)
'(clean-cache
  sat-2
  2
  56
  app
  "\"'(eval\n  (λ (n7)\n    (-> (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7) <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  #f)
'(clean-cache
  sat-2
  2
  5
  56
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) (-> n7 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  20
  7
  3
  10
  1
  0
  1
  1
  1/7
  6
  #f
  36/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  2
  5
  56
  app
  "\"'(eval\n  (app (-> (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) <-) n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  50
  21
  2
  27
  2
  2
  4
  1
  2/15
  21
  #t
  5
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(clean-cache
  sat-2
  2
  5
  56
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app (app p n1) n2) n3) n4) n5) (-> n6 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  20
  7
  3
  10
  1
  0
  1
  1
  1/7
  6
  #f
  36/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  2
  5
  56
  app
  "\"'(eval\n  (app (-> (app (app (app (app (app p n1) n2) n3) n4) n5) <-) n6)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  45
  18
  2
  25
  2
  2
  4
  1
  2/13
  18
  #t
  5
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  sat-2
  2
  5
  56
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app p n1) n2) n3) n4) (-> n5 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  20
  7
  3
  10
  1
  0
  1
  1
  1/7
  6
  #f
  36/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  2
  5
  56
  app
  "\"'(eval\n  (app (-> (app (app (app (app p n1) n2) n3) n4) <-) n5)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  40
  15
  2
  23
  2
  2
  4
  1
  2/11
  15
  #t
  5
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  sat-2
  2
  5
  56
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app p n1) n2) n3) (-> n4 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  20
  7
  3
  10
  1
  0
  1
  1
  1/7
  6
  #f
  36/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  2
  5
  56
  app
  "\"'(eval\n  (app (-> (app (app (app p n1) n2) n3) <-) n4)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  35
  12
  2
  21
  2
  2
  4
  1
  2/9
  12
  #t
  5
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-2
  2
  5
  56
  ref-or-constructor
  "\"'(eval\n  (app (app (app p n1) n2) (-> n3 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  20
  7
  3
  10
  1
  0
  1
  1
  1/7
  6
  #f
  36/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  2
  5
  56
  app
  "\"'(eval\n  (app (-> (app (app p n1) n2) <-) n3)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  30
  9
  2
  19
  2
  2
  4
  1
  2/7
  9
  #t
  5
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-2
  2
  5
  56
  ref-or-constructor
  "\"'(eval\n  (app (app p n1) (-> n2 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  20
  7
  3
  10
  1
  0
  1
  1
  1/7
  6
  #f
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  2
  5
  56
  app
  "\"'(eval\n  (app (-> (app p n1) <-) n2)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  25
  6
  2
  17
  2
  2
  4
  1
  2/5
  6
  #t
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  2
  5
  56
  ref-or-constructor
  "\"'(eval\n  (app p (-> n1 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  20
  7
  3
  10
  1
  0
  1
  1
  1/7
  6
  #f
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  2
  5
  56
  ref-or-constructor
  "\"'(eval\n  (app (-> p <-) n1)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  13
  3
  2
  8
  2
  2
  4
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  2
  56
  app
  "\"'(eval\n  (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  #f)
'(clean-cache
  sat-2
  2
  56
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  #f)
'(clean-cache
  sat-2
  2
  5
  56
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  2
  5
  56
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  24
  8
  8
  8
  0
  1
  1
  1
  0
  7
  #f
  23/4
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-2
  2
  56
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  #f)
'(clean-cache
  sat-2
  2
  5
  56
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-2
  2
  5
  56
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  24
  8
  8
  8
  0
  1
  1
  1
  0
  7
  #f
  23/4
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-2
  2
  56
  app
  "\"'(eval\n  (λ (x7)\n    (->\n     (app\n      and\n      (app or x1 x2)\n      (app or x1 (app not x2) (app not x3))\n      (app or x3 x4)\n      (app or (app not x4) x1)\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  #f)
'(clean-cache
  sat-2
  2
  56
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  #f)
'(clean-cache
  sat-2
  2
  5
  56
  ref-or-constructor
  "\"'(eval\n  (app or x4 (-> x2 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  52
  12
  11
  29
  3
  2
  5
  1
  3/10
  10
  #f
  31/6
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-2
  2
  5
  56
  ref-or-constructor
  "\"'(eval\n  (app or (-> x4 <-) x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  71
  12
  25
  34
  3
  2
  5
  1
  3/10
  10
  #f
  31/6
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(clean-cache
  sat-2
  2
  56
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  #f)
'(clean-cache
  sat-2
  2
  5
  56
  app
  "\"'(eval\n  (app or (app not x2) (-> (app not x3) <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  85
  22
  18
  45
  5
  2
  7
  1
  5/14
  16
  #f
  58/11
  ((4 4 0) (4 4 0) (7/2 7/2 0)))
'(clean-cache
  sat-2
  2
  5
  56
  ref-or-constructor
  "\"'(eval\n  (app not (-> x3 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  59
  12
  17
  30
  3
  2
  5
  1
  3/10
  10
  #f
  31/6
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  sat-2
  2
  5
  56
  app
  "\"'(eval\n  (app or (-> (app not x2) <-) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  71
  20
  11
  40
  5
  2
  7
  1
  5/14
  15
  #f
  21/4
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  sat-2
  2
  5
  56
  ref-or-constructor
  "\"'(eval\n  (app not (-> x2 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  52
  12
  11
  29
  3
  2
  5
  1
  3/10
  10
  #f
  31/6
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-2
  2
  56
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (-> (app or (app not x4) x1) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  #f)
'(clean-cache
  sat-2
  2
  5
  56
  ref-or-constructor
  "\"'(eval\n  (app or (app not x4) (-> x1 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  46
  12
  6
  28
  8
  5
  13
  1
  4/5
  10
  #f
  31/6
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-2
  2
  56
  app
  "\"'(eval\n  (app or (-> (app not x4) <-) x1)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  #f)
'(clean-cache
  sat-2
  2
  5
  56
  ref-or-constructor
  "\"'(eval\n  (app not (-> x4 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  71
  12
  25
  34
  3
  2
  5
  1
  3/10
  10
  #f
  31/6
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(clean-cache
  sat-2
  2
  56
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or x3 x4) <-)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  #f)
'(clean-cache
  sat-2
  2
  5
  56
  ref-or-constructor
  "\"'(eval\n  (app or x3 (-> x4 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  71
  12
  25
  34
  3
  2
  5
  1
  3/10
  10
  #f
  31/6
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(clean-cache
  sat-2
  2
  5
  56
  ref-or-constructor
  "\"'(eval\n  (app or (-> x3 <-) x4)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  59
  12
  17
  30
  3
  2
  5
  1
  3/10
  10
  #f
  31/6
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  sat-2
  2
  56
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  #f)
'(clean-cache
  sat-2
  2
  5
  56
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  85
  22
  18
  45
  5
  2
  7
  1
  5/14
  16
  #f
  58/11
  ((4 4 0) (4 4 0) (4 4 0)))
'(clean-cache
  sat-2
  2
  5
  56
  ref-or-constructor
  "\"'(eval\n  (app not (-> x3 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  59
  12
  17
  30
  3
  2
  5
  1
  3/10
  10
  #f
  31/6
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  sat-2
  2
  5
  56
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  71
  20
  11
  40
  5
  2
  7
  1
  5/14
  15
  #f
  21/4
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  sat-2
  2
  5
  56
  ref-or-constructor
  "\"'(eval\n  (app not (-> x2 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  52
  12
  11
  29
  3
  2
  5
  1
  3/10
  10
  #f
  31/6
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-2
  2
  5
  56
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  46
  12
  6
  28
  8
  5
  13
  1
  4/5
  10
  #f
  31/6
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-2
  2
  56
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 x2) <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  #f)
'(clean-cache
  sat-2
  2
  5
  56
  ref-or-constructor
  "\"'(eval\n  (app or x1 (-> x2 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  52
  12
  11
  29
  3
  2
  5
  1
  3/10
  10
  #f
  31/6
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-2
  2
  5
  56
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  46
  12
  6
  28
  8
  5
  13
  1
  4/5
  10
  #f
  31/6
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-2
  2
  56
  app
  "\"'(eval (letrec* (phi ... sat-solve-7) (-> (app sat-solve-7 phi) <-)) (env ()))\""
  #f)
'(shuffled-cache
  0
  sat-2
  2
  5
  56
  app
  "\"'(eval\n  (app (-> (app (app (app p n1) n2) n3) <-) n4)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  35
  12
  2
  21
  2
  2
  4
  1
  2/9
  12
  #t
  5
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  sat-2
  2
  5
  56
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app p n1) n2) n3) (-> n4 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  71
  30
  6
  35
  3
  2
  5
  1
  3/16
  29
  #f
  151/30
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  0
  sat-2
  2
  5
  56
  ref-or-constructor
  "\"'(eval\n  (app (-> p <-) n1)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  71
  30
  6
  35
  3
  2
  5
  1
  3/16
  29
  #t
  151/30
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  2
  5
  56
  app
  "\"'(eval\n  (app (-> (app (app (app (app (app p n1) n2) n3) n4) n5) <-) n6)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  89
  44
  6
  39
  3
  2
  5
  1
  3/20
  43
  #t
  221/44
  ((7/2 7/2 0) (7/2 7/2 0) (3 3 0)))
'(shuffled-cache
  0
  sat-2
  2
  56
  ref-or-constructor
  "\"'(eval\n  (app or (-> x3 <-) x4)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  #f)
'(shuffled-cache
  0
  sat-2
  2
  56
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  #f)
'(shuffled-cache
  0
  sat-2
  2
  56
  app
  "\"'(eval\n  (λ (x7)\n    (->\n     (app\n      and\n      (app or x1 x2)\n      (app or x1 (app not x2) (app not x3))\n      (app or x3 x4)\n      (app or (app not x4) x1)\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  #f)
'(shuffled-cache
  0
  sat-2
  2
  5
  56
  app
  "\"'(eval\n  (app or (app not x2) (-> (app not x3) <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  85
  22
  18
  45
  5
  2
  7
  1
  5/14
  16
  #f
  58/11
  ((4 4 0) (4 4 0) (4 4 0)))
'(shuffled-cache
  0
  sat-2
  2
  56
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or x3 x4) <-)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  #f)
'(shuffled-cache
  0
  sat-2
  2
  56
  app
  "\"'(eval\n  (λ (n4) (-> (app try (λ (n5) ...)) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  #f)
'(shuffled-cache
  0
  sat-2
  2
  56
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 x2) <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  #f)
'(shuffled-cache
  0
  sat-2
  2
  5
  56
  ref-or-constructor
  "\"'(eval\n  (app (app p n1) (-> n2 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  20
  7
  3
  10
  1
  0
  1
  1
  1/7
  6
  #f
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  2
  56
  app
  "\"'(eval\n  (λ (n2) (-> (app try (λ (n3) ...)) <-))\n  (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  #f)
'(shuffled-cache
  0
  sat-2
  2
  56
  app
  "\"'(eval\n  (λ (n3) (-> (app try (λ (n4) ...)) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  #f)
'(shuffled-cache
  0
  sat-2
  2
  56
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  #f)
'(shuffled-cache
  0
  sat-2
  2
  5
  56
  app
  "\"'(eval\n  (app (-> (app (app p n1) n2) <-) n3)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  30
  9
  2
  19
  2
  2
  4
  1
  2/7
  9
  #t
  5
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  sat-2
  2
  5
  56
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  70
  23
  8
  39
  10
  7
  17
  1
  10/17
  21
  #f
  117/23
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  sat-2
  2
  5
  56
  app
  "\"'(eval\n  (app (-> (app p n1) <-) n2)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  70
  23
  8
  39
  10
  7
  17
  1
  10/17
  21
  #t
  117/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  2
  56
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  #f)
'(shuffled-cache
  0
  sat-2
  2
  56
  app
  "\"'(eval\n  (λ (n6) (-> (app try (λ (n7) ...)) <-))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  #f)
'(shuffled-cache
  0
  sat-2
  2
  5
  56
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  46
  12
  6
  28
  8
  5
  13
  1
  4/5
  10
  #f
  31/6
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  sat-2
  2
  56
  app
  "\"'(eval (letrec* (phi ... sat-solve-7) (-> (app sat-solve-7 phi) <-)) (env ()))\""
  #f)
'(shuffled-cache
  0
  sat-2
  2
  5
  56
  ref-or-constructor
  "\"'(eval\n  (app not (-> x3 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  59
  12
  17
  30
  3
  2
  5
  1
  3/10
  10
  #f
  31/6
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  sat-2
  2
  56
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) (-> n7 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  #f)
'(shuffled-cache
  0
  sat-2
  2
  5
  56
  app
  "\"'(eval\n  (app (-> (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) <-) n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  50
  21
  2
  27
  2
  2
  4
  1
  2/15
  21
  #t
  5
  ((7/2 7/2 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  0
  sat-2
  2
  56
  ref-or-constructor
  "\"'(eval\n  (app not (-> x2 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  #f)
'(shuffled-cache
  0
  sat-2
  2
  5
  56
  ref-or-constructor
  "\"'(eval\n  (app not (-> x2 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  52
  12
  11
  29
  3
  2
  5
  1
  3/10
  10
  #f
  31/6
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  sat-2
  2
  56
  ref-or-constructor
  "\"'(eval\n  (app or (-> x4 <-) x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  #f)
'(shuffled-cache
  0
  sat-2
  2
  5
  56
  ref-or-constructor
  "\"'(eval\n  (app not (-> x3 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  59
  12
  17
  30
  3
  2
  5
  1
  3/10
  10
  #f
  31/6
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  sat-2
  2
  56
  app
  "\"'(eval\n  (app or (-> (app not x2) <-) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  #f)
'(shuffled-cache
  0
  sat-2
  2
  5
  56
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app (app p n1) n2) n3) n4) n5) (-> n6 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  20
  7
  3
  10
  1
  0
  1
  1
  1/7
  6
  #f
  36/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-2
  2
  56
  app
  "\"'(eval\n  (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  #f)
'(shuffled-cache
  0
  sat-2
  2
  5
  56
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  2
  5
  56
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  40
  17
  8
  15
  0
  1
  1
  1
  0
  16
  #f
  91/17
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  sat-2
  2
  5
  56
  ref-or-constructor
  "\"'(eval\n  (app or (app not x4) (-> x1 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  91
  36
  14
  41
  9
  6
  15
  1
  32/81
  33
  #f
  113/18
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  sat-2
  2
  56
  letrec*
  "\"'(eval ((top) letrec* (phi ... sat-solve-7) ...) (env ()))\""
  #f)
'(shuffled-cache
  0
  sat-2
  2
  5
  56
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  24
  8
  8
  8
  0
  1
  1
  1
  0
  7
  #f
  23/4
  ((1 1 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-2
  2
  56
  ref-or-constructor
  "\"'(eval\n  (app not (-> x4 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  #f)
'(shuffled-cache
  0
  sat-2
  2
  5
  56
  ref-or-constructor
  "\"'(eval\n  (app or x4 (-> x2 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  52
  12
  11
  29
  3
  2
  5
  1
  3/10
  10
  #f
  31/6
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  sat-2
  2
  5
  56
  ref-or-constructor
  "\"'(eval\n  (app (app (app p n1) n2) (-> n3 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  109
  27
  21
  61
  3
  6
  9
  1
  1/4
  22
  #f
  140/27
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  0
  sat-2
  2
  5
  56
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  129
  36
  21
  72
  5
  6
  11
  1
  5/17
  27
  #f
  21/4
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  sat-2
  2
  56
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  #f)
'(shuffled-cache
  0
  sat-2
  2
  56
  app
  "\"'(eval\n  (app or (-> (app not x4) <-) x1)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  #f)
'(shuffled-cache
  0
  sat-2
  2
  5
  56
  ref-or-constructor
  "\"'(eval\n  (app or x3 (-> x4 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  71
  12
  25
  34
  3
  2
  5
  1
  3/10
  10
  #f
  31/6
  ((7/2 7/2 0) (7/2 7/2 0) (3 3 0)))
'(shuffled-cache
  0
  sat-2
  2
  56
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  #f)
'(shuffled-cache
  0
  sat-2
  2
  56
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (-> (app or (app not x4) x1) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  #f)
'(shuffled-cache
  0
  sat-2
  2
  56
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  #f)
'(shuffled-cache
  0
  sat-2
  2
  5
  56
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  2
  56
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  #f)
'(shuffled-cache
  0
  sat-2
  2
  56
  app
  "\"'(eval\n  (λ (n5) (-> (app try (λ (n6) ...)) <-))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  #f)
'(shuffled-cache
  0
  sat-2
  2
  5
  56
  ref-or-constructor
  "\"'(eval\n  (app or x1 (-> x2 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  52
  12
  11
  29
  3
  2
  5
  1
  3/10
  10
  #f
  31/6
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  sat-2
  2
  5
  56
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app p n1) n2) n3) n4) (-> n5 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  93
  27
  17
  49
  3
  2
  5
  1
  1/4
  22
  #f
  140/27
  ((4 4 0) (4 4 0) (4 4 0)))
'(shuffled-cache
  0
  sat-2
  2
  56
  app
  "\"'(eval\n  (app (-> (app (app (app (app p n1) n2) n3) n4) <-) n5)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  #f)
'(shuffled-cache
  0
  sat-2
  2
  56
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  #f)
'(shuffled-cache
  0
  sat-2
  2
  56
  app
  "\"'(eval\n  (λ (n7)\n    (-> (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7) <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  #f)
'(shuffled-cache
  0
  sat-2
  2
  5
  56
  ref-or-constructor
  "\"'(eval\n  (app p (-> n1 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  20
  7
  3
  10
  1
  0
  1
  1
  1/7
  6
  #f
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  2
  5
  56
  ref-or-constructor
  "\"'(eval\n  (app (app p n1) (-> n2 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  20
  7
  3
  10
  1
  0
  1
  1
  1/7
  6
  #f
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  2
  5
  56
  ref-or-constructor
  "\"'(eval\n  (app not (-> x2 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  62
  14
  12
  36
  3
  2
  5
  1
  3/10
  11
  #f
  73/14
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  sat-2
  2
  56
  ref-or-constructor
  "\"'(eval\n  (app not (-> x4 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  #f)
'(shuffled-cache
  1
  sat-2
  2
  56
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (-> (app or (app not x4) x1) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  #f)
'(shuffled-cache
  1
  sat-2
  2
  56
  app
  "\"'(eval\n  (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  #f)
'(shuffled-cache
  1
  sat-2
  2
  56
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  #f)
'(shuffled-cache
  1
  sat-2
  2
  56
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  #f)
'(shuffled-cache
  1
  sat-2
  2
  56
  app
  "\"'(eval\n  (λ (n6) (-> (app try (λ (n7) ...)) <-))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  #f)
'(shuffled-cache
  1
  sat-2
  2
  5
  56
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  24
  8
  8
  8
  0
  1
  1
  1
  0
  7
  #f
  23/4
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  sat-2
  2
  56
  app
  "\"'(eval\n  (λ (x7)\n    (->\n     (app\n      and\n      (app or x1 x2)\n      (app or x1 (app not x2) (app not x3))\n      (app or x3 x4)\n      (app or (app not x4) x1)\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  #f)
'(shuffled-cache
  1
  sat-2
  2
  5
  56
  app
  "\"'(eval\n  (app (-> (app (app p n1) n2) <-) n3)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  30
  9
  2
  19
  2
  2
  4
  1
  2/7
  9
  #t
  5
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  sat-2
  2
  5
  56
  ref-or-constructor
  "\"'(eval\n  (app not (-> x3 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  82
  23
  19
  40
  5
  4
  9
  1
  5/17
  21
  #f
  117/23
  ((4 4 0) (4 4 0) (4 4 0)))
'(shuffled-cache
  1
  sat-2
  2
  56
  app
  "\"'(eval\n  (λ (n4) (-> (app try (λ (n5) ...)) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  #f)
'(shuffled-cache
  1
  sat-2
  2
  56
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  #f)
'(shuffled-cache
  1
  sat-2
  2
  56
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 x2) <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  #f)
'(shuffled-cache
  1
  sat-2
  2
  5
  56
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  71
  20
  11
  40
  5
  2
  7
  1
  5/14
  15
  #f
  21/4
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  sat-2
  2
  56
  app
  "\"'(eval\n  (app (-> (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) <-) n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  #f)
'(shuffled-cache
  1
  sat-2
  2
  5
  56
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app (app p n1) n2) n3) n4) n5) (-> n6 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  20
  7
  3
  10
  1
  0
  1
  1
  1/7
  6
  #f
  36/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-2
  2
  56
  ref-or-constructor
  "\"'(eval\n  (app or x4 (-> x2 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  #f)
'(shuffled-cache
  1
  sat-2
  2
  5
  56
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  46
  12
  6
  28
  8
  5
  13
  1
  4/5
  10
  #f
  31/6
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  sat-2
  2
  56
  app
  "\"'(eval\n  (λ (n7)\n    (-> (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7) <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  #f)
'(shuffled-cache
  1
  sat-2
  2
  5
  56
  ref-or-constructor
  "\"'(eval\n  (app (app (app p n1) n2) (-> n3 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  20
  7
  3
  10
  1
  0
  1
  1
  1/7
  6
  #f
  36/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-2
  2
  56
  letrec*
  "\"'(eval ((top) letrec* (phi ... sat-solve-7) ...) (env ()))\""
  #f)
'(shuffled-cache
  1
  sat-2
  2
  56
  app
  "\"'(eval\n  (λ (n5) (-> (app try (λ (n6) ...)) <-))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  #f)
'(shuffled-cache
  1
  sat-2
  2
  5
  56
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  2
  5
  56
  app
  "\"'(eval\n  (app (-> (app (app (app p n1) n2) n3) <-) n4)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  38
  14
  2
  22
  2
  2
  4
  1
  2/11
  14
  #t
  5
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  sat-2
  2
  5
  56
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  73
  35
  10
  28
  4
  3
  7
  1
  25/152
  34
  #f
  193/35
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  sat-2
  2
  56
  app
  "\"'(eval\n  (app or (-> (app not x2) <-) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  #f)
'(shuffled-cache
  1
  sat-2
  2
  5
  56
  ref-or-constructor
  "\"'(eval\n  (app or x3 (-> x4 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  71
  12
  25
  34
  3
  2
  5
  1
  3/10
  10
  #f
  31/6
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  1
  sat-2
  2
  5
  56
  ref-or-constructor
  "\"'(eval\n  (app or (-> x4 <-) x2)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  72
  13
  25
  34
  3
  2
  5
  1
  3/11
  10
  #f
  68/13
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  2
  56
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  #f)
'(shuffled-cache
  1
  sat-2
  2
  56
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or x3 x4) <-)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  #f)
'(shuffled-cache
  1
  sat-2
  2
  56
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  #f)
'(shuffled-cache
  1
  sat-2
  2
  5
  56
  app
  "\"'(eval\n  (app (-> (app (app (app (app p n1) n2) n3) n4) <-) n5)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  40
  15
  2
  23
  2
  2
  4
  1
  2/11
  15
  #t
  5
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  sat-2
  2
  56
  ref-or-constructor
  "\"'(eval\n  (app not (-> x3 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  #f)
'(shuffled-cache
  1
  sat-2
  2
  5
  56
  ref-or-constructor
  "\"'(eval\n  (app (-> p <-) n1)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  13
  3
  2
  8
  2
  2
  4
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  2
  5
  56
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app p n1) n2) n3) n4) (-> n5 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  32
  11
  6
  15
  3
  2
  5
  1
  3/10
  10
  #f
  56/11
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  sat-2
  2
  56
  app
  "\"'(eval (letrec* (phi ... sat-solve-7) (-> (app sat-solve-7 phi) <-)) (env ()))\""
  #f)
'(shuffled-cache
  1
  sat-2
  2
  5
  56
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  2
  5
  56
  app
  "\"'(eval\n  (app or (app not x2) (-> (app not x3) <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  87
  24
  18
  45
  5
  2
  7
  1
  5/14
  18
  #f
  21/4
  ((4 4 0) (4 4 0) (4 4 0)))
'(shuffled-cache
  1
  sat-2
  2
  56
  ref-or-constructor
  "\"'(eval\n  (app not (-> x2 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  #f)
'(shuffled-cache
  1
  sat-2
  2
  56
  app
  "\"'(eval\n  (λ (n3) (-> (app try (λ (n4) ...)) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  #f)
'(shuffled-cache
  1
  sat-2
  2
  5
  56
  app
  "\"'(eval\n  (app (-> (app (app (app (app (app p n1) n2) n3) n4) n5) <-) n6)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  45
  18
  2
  25
  2
  2
  4
  1
  2/13
  18
  #t
  5
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  sat-2
  2
  56
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app p n1) n2) n3) (-> n4 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  #f)
'(shuffled-cache
  1
  sat-2
  2
  5
  56
  ref-or-constructor
  "\"'(eval\n  (app or x1 (-> x2 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  52
  12
  11
  29
  3
  2
  5
  1
  3/10
  10
  #f
  31/6
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  sat-2
  2
  56
  ref-or-constructor
  "\"'(eval\n  (app or (app not x4) (-> x1 <-))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  #f)
'(shuffled-cache
  1
  sat-2
  2
  5
  56
  ref-or-constructor
  "\"'(eval\n  (app or (-> x3 <-) x4)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  59
  12
  17
  30
  3
  2
  5
  1
  3/10
  10
  #f
  31/6
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  sat-2
  2
  56
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  #f)
'(shuffled-cache
  1
  sat-2
  2
  56
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  #f)
'(shuffled-cache
  1
  sat-2
  2
  5
  56
  ref-or-constructor
  "\"'(eval\n  (app p (-> n1 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  20
  7
  3
  10
  1
  0
  1
  1
  1/7
  6
  #f
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  2
  56
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  #f)
'(shuffled-cache
  1
  sat-2
  2
  56
  app
  "\"'(eval\n  (λ (n2) (-> (app try (λ (n3) ...)) <-))\n  (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  #f)
'(shuffled-cache
  1
  sat-2
  2
  5
  56
  app
  "\"'(eval\n  (app (-> (app p n1) <-) n2)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  25
  6
  2
  17
  2
  2
  4
  1
  2/5
  6
  #t
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-2
  2
  56
  app
  "\"'(eval\n  (app or (-> (app not x4) <-) x1)\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  #f)
'(shuffled-cache
  1
  sat-2
  2
  5
  56
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env\n   ((□? (x7)) (□? (x6)) (□? (x5)) (□? (x4)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  46
  12
  6
  28
  8
  5
  13
  1
  4/5
  10
  #f
  31/6
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  sat-2
  2
  5
  56
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) (-> n7 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  70
  23
  10
  37
  8
  5
  13
  1
  1/2
  18
  #f
  120/23
  ((3 3 0) (3 3 0) (3 3 0)))
