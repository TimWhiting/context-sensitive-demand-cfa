'(clean-cache
  tic-tac-toe
  2
  15
  569
  lettypes
  "'(eval ((top) lettypes (cons ... player) ...) (env ()))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  letrec*
  "'(eval\n  (lettypes cons ... player (letrec* (some-v ... zero-player-game) ...))\n  (env ()))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  lambda
  "'(eval\n  (letrec*\n   (... one-player-game (zero-player-game (-> (λ () ...) <-)) () ...)\n   ...)\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) (app make-ai-action (app X)))\n      (app player (app O) (app make-ai-action (app O))))\n     <-))\n  (env ((□? ()))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (app\n   play-game\n   (app player (app X) (app make-ai-action (app X)))\n   (-> (app player (app O) (app make-ai-action (app O))) <-))\n  (env ((□? ()))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (app player (app O) (-> (app make-ai-action (app O)) <-))\n  (env ((□? ()))))"
  #f
  7
  4
  0
  3
  1
  0
  1
  1
  1/4
  4
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval (app make-ai-action (-> (app O) <-)) (env ((□? ()))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app (-> O <-)) (env ((□? ()))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app (-> make-ai-action <-) (app O)) (env ((□? ()))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (app player (-> (app O) <-) (app make-ai-action (app O)))\n  (env ((□? ()))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app (-> O <-)) (env ((□? ()))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (app (-> player <-) (app O) (app make-ai-action (app O)))\n  (env ((□? ()))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (app\n   play-game\n   (-> (app player (app X) (app make-ai-action (app X))) <-)\n   (app player (app O) (app make-ai-action (app O))))\n  (env ((□? ()))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (app player (app X) (-> (app make-ai-action (app X)) <-))\n  (env ((□? ()))))"
  #f
  7
  4
  0
  3
  1
  0
  1
  1
  1/4
  4
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval (app make-ai-action (-> (app X) <-)) (env ((□? ()))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app (-> X <-)) (env ((□? ()))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app (-> make-ai-action <-) (app X)) (env ((□? ()))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (app player (-> (app X) <-) (app make-ai-action (app X)))\n  (env ((□? ()))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app (-> X <-)) (env ((□? ()))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (app (-> player <-) (app X) (app make-ai-action (app X)))\n  (env ((□? ()))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (app\n   (-> play-game <-)\n   (app player (app X) (app make-ai-action (app X)))\n   (app player (app O) (app make-ai-action (app O))))\n  (env ((□? ()))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  lambda
  "'(eval\n  (letrec*\n   (...\n    two-player-game\n    (one-player-game (-> (λ () ...) <-))\n    zero-player-game\n    ...)\n   ...)\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) human-action)\n      (app player (app O) (app make-ai-action (app O))))\n     <-))\n  (env ((□? ()))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (app\n   play-game\n   (app player (app X) human-action)\n   (-> (app player (app O) (app make-ai-action (app O))) <-))\n  (env ((□? ()))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (app player (app O) (-> (app make-ai-action (app O)) <-))\n  (env ((□? ()))))"
  #f
  7
  4
  0
  3
  1
  0
  1
  1
  1/4
  4
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval (app make-ai-action (-> (app O) <-)) (env ((□? ()))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app (-> O <-)) (env ((□? ()))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app (-> make-ai-action <-) (app O)) (env ((□? ()))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (app player (-> (app O) <-) (app make-ai-action (app O)))\n  (env ((□? ()))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app (-> O <-)) (env ((□? ()))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (app (-> player <-) (app O) (app make-ai-action (app O)))\n  (env ((□? ()))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (app\n   play-game\n   (-> (app player (app X) human-action) <-)\n   (app player (app O) (app make-ai-action (app O))))\n  (env ((□? ()))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app player (app X) (-> human-action <-)) (env ((□? ()))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval (app player (-> (app X) <-) human-action) (env ((□? ()))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app (-> X <-)) (env ((□? ()))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app (-> player <-) (app X) human-action) (env ((□? ()))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (app\n   (-> play-game <-)\n   (app player (app X) human-action)\n   (app player (app O) (app make-ai-action (app O))))\n  (env ((□? ()))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  lambda
  "'(eval\n  (letrec*\n   (... play-game (two-player-game (-> (λ () ...) <-)) one-player-game ...)\n   ...)\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) human-action)\n      (app player (app O) human-action))\n     <-))\n  (env ((□? ()))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (app\n   play-game\n   (app player (app X) human-action)\n   (-> (app player (app O) human-action) <-))\n  (env ((□? ()))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app player (app O) (-> human-action <-)) (env ((□? ()))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval (app player (-> (app O) <-) human-action) (env ((□? ()))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app (-> O <-)) (env ((□? ()))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app (-> player <-) (app O) human-action) (env ((□? ()))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (app\n   play-game\n   (-> (app player (app X) human-action) <-)\n   (app player (app O) human-action))\n  (env ((□? ()))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app player (app X) (-> human-action <-)) (env ((□? ()))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval (app player (-> (app X) <-) human-action) (env ((□? ()))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app (-> X <-)) (env ((□? ()))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app (-> player <-) (app X) human-action) (env ((□? ()))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (app\n   (-> play-game <-)\n   (app player (app X) human-action)\n   (app player (app O) human-action))\n  (env ((□? ()))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  lambda
  "'(eval\n  (letrec*\n   (...\n    play-turn\n    (play-game (-> (λ (player-one player-two) ...) <-))\n    two-player-game\n    ...)\n   ...)\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (λ (player-one player-two)\n    (-> (app play-turn empty-board player-one player-two) <-))\n  (env ((□? (player-one player-two)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (app play-turn empty-board player-one (-> player-two <-))\n  (env ((□? (player-one player-two)))))"
  #f
  15
  7
  4
  4
  0
  1
  1
  1
  0
  6
  #f
  9/7
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (app play-turn empty-board (-> player-one <-) player-two)\n  (env ((□? (player-one player-two)))))"
  #f
  15
  7
  4
  4
  0
  1
  1
  1
  0
  6
  #f
  9/7
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (app play-turn (-> empty-board <-) player-one player-two)\n  (env ((□? (player-one player-two)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (app (-> play-turn <-) empty-board player-one player-two)\n  (env ((□? (player-one player-two)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  lambda
  "'(eval\n  (letrec*\n   (...\n    draw-board!\n    (play-turn (-> (λ (bo this-play that-play) ...) <-))\n    play-game\n    ...)\n   ...)\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  let
  "'(eval\n  (λ (bo this-play that-play) (-> (let (_) ...) <-))\n  (env ((□? (bo this-play that-play)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))"
  #f
  8
  5
  0
  3
  1
  0
  1
  1
  1/5
  5
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app draw-board! (-> bo <-)) (env ((□? (bo this-play that-play)))))"
  #f
  27
  19
  3
  5
  10
  1
  11
  1
  11/20
  18
  #f
  22/19
  ((2 2 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app (-> draw-board! <-) bo) (env ((□? (bo this-play that-play)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  match
  "'(eval\n  (let (_) (-> (match this-play ...) <-))\n  (env ((□? (bo this-play that-play)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  let
  "'(eval\n  (match this-play ((player mark action) (-> (let (co) ...) <-)))\n  (env ((□? (bo this-play that-play)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  letrec
  "'(eval\n  (let (... () (co (-> (letrec (loop) ...) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  lambda
  "'(eval\n  (letrec (... () (loop (-> (λ () ...) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  let
  "'(eval\n  (λ () (-> (let (co) ...) <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (let (... () (co (-> (app action bo) <-)) () ...) ...)\n  (env ((□? ()) (□? (bo this-play that-play)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app action (-> bo <-)) (env ((□? ()) (□? (bo this-play that-play)))))"
  #f
  28
  19
  3
  6
  10
  1
  11
  1
  11/20
  18
  #f
  22/19
  ((2 2 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app (-> action <-) bo) (env ((□? ()) (□? (bo this-play that-play)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  match
  "'(eval\n  (let (co) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> co <-)))\n  (env ((□? ()) (□? (bo this-play that-play)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> (app loop) <-)) _)\n  (env ((□? ()) (□? (bo this-play that-play)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app (-> loop <-)) (env ((□? ()) (□? (bo this-play that-play)))))"
  #t
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env ((□? ()) (□? (bo this-play that-play)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (app blank? (-> (app board-lookup co bo) <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (app board-lookup co (-> bo <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))"
  #f
  28
  19
  3
  6
  10
  1
  11
  1
  11/20
  18
  #f
  22/19
  ((2 2 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (app board-lookup (-> co <-) bo)\n  (env ((□? ()) (□? (bo this-play that-play)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (app (-> board-lookup <-) co bo)\n  (env ((□? ()) (□? (bo this-play that-play)))))"
  #t
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (app (-> blank? <-) (app board-lookup co bo))\n  (env ((□? ()) (□? (bo this-play that-play)))))"
  #t
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (letrec (loop) (-> (app loop) <-))\n  (env ((□? (bo this-play that-play)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app (-> loop <-)) (env ((□? (bo this-play that-play)))))"
  #t
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  let
  "'(eval (let (co) (-> (let (bo) ...) <-)) (env ((□? (bo this-play that-play)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (let (... () (bo (-> (app board-mark co mark bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))"
  #f
  7
  4
  0
  3
  1
  0
  1
  1
  1/4
  4
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (app board-mark co mark (-> bo <-))\n  (env ((□? (bo this-play that-play)))))"
  #f
  27
  19
  3
  5
  10
  1
  11
  1
  11/20
  18
  #f
  22/19
  ((2 2 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (app board-mark co (-> mark <-) bo)\n  (env ((□? (bo this-play that-play)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (app board-mark (-> co <-) mark bo)\n  (env ((□? (bo this-play that-play)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (app (-> board-mark <-) co mark bo)\n  (env ((□? (bo this-play that-play)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  match
  "'(eval\n  (let (bo) (-> (match (app wins? bo mark) ...) <-))\n  (env ((□? (bo this-play that-play)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  let
  "'(eval\n  (match (app wins? bo mark) (#f) (_ (-> (let (_) ...) <-)))\n  (env ((□? (bo this-play that-play)))))"
  #f
  4
  3
  0
  1
  0
  0
  0
  1
  0
  3
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))"
  #f
  8
  5
  0
  3
  1
  0
  1
  1
  1/5
  5
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app draw-board! (-> bo <-)) (env ((□? (bo this-play that-play)))))"
  #f
  8
  5
  0
  3
  1
  0
  1
  1
  1/5
  5
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app (-> draw-board! <-) bo) (env ((□? (bo this-play that-play)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval (let (_) (-> (app void) <-)) (env ((□? (bo this-play that-play)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app (-> void <-)) (env ((□? (bo this-play that-play)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  match
  "'(eval\n  (match (app wins? bo mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env ((□? (bo this-play that-play)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  let
  "'(eval\n  (match (app full? bo) (#f) (_ (-> (let (_) ...) <-)))\n  (env ((□? (bo this-play that-play)))))"
  #f
  5
  4
  0
  1
  0
  0
  0
  1
  0
  4
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))"
  #f
  8
  5
  0
  3
  1
  0
  1
  1
  1/5
  5
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app draw-board! (-> bo <-)) (env ((□? (bo this-play that-play)))))"
  #f
  8
  5
  0
  3
  1
  0
  1
  1
  1/5
  5
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app (-> draw-board! <-) bo) (env ((□? (bo this-play that-play)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (let (_) (-> (app display \"Cat's game.\\n\") <-))\n  (env ((□? (bo this-play that-play)))))"
  #f
  4
  3
  0
  1
  0
  0
  0
  1
  0
  3
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  string
  "'(eval\n  (app display (-> \"Cat's game.\\n\" <-))\n  (env ((□? (bo this-play that-play)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (app (-> display <-) \"Cat's game.\\n\")\n  (env ((□? (bo this-play that-play)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (match\n   (app full? bo)\n   ((#f) (-> (app play-turn bo that-play this-play) <-))\n   _)\n  (env ((□? (bo this-play that-play)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (app play-turn bo that-play (-> this-play <-))\n  (env ((□? (bo this-play that-play)))))"
  #f
  53
  36
  7
  10
  10
  2
  12
  1
  5/64
  18
  #f
  8/3
  ((13 13 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (app play-turn bo (-> that-play <-) this-play)\n  (env ((□? (bo this-play that-play)))))"
  #f
  53
  36
  7
  10
  10
  2
  12
  1
  5/64
  18
  #f
  8/3
  ((13 14 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (app play-turn (-> bo <-) that-play this-play)\n  (env ((□? (bo this-play that-play)))))"
  #f
  8
  5
  0
  3
  1
  0
  1
  1
  1/5
  5
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (app (-> play-turn <-) bo that-play this-play)\n  (env ((□? (bo this-play that-play)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (match (-> (app full? bo) <-) (#f) _)\n  (env ((□? (bo this-play that-play)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app full? (-> bo <-)) (env ((□? (bo this-play that-play)))))"
  #f
  8
  5
  0
  3
  1
  0
  1
  1
  1/5
  5
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app (-> full? <-) bo) (env ((□? (bo this-play that-play)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (match (-> (app wins? bo mark) <-) (#f) _)\n  (env ((□? (bo this-play that-play)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app wins? bo (-> mark <-)) (env ((□? (bo this-play that-play)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app wins? (-> bo <-) mark) (env ((□? (bo this-play that-play)))))"
  #f
  8
  5
  0
  3
  1
  0
  1
  1
  1/5
  5
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app (-> wins? <-) bo mark) (env ((□? (bo this-play that-play)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (match (-> this-play <-) (player mark action))\n  (env ((□? (bo this-play that-play)))))"
  #f
  54
  37
  7
  10
  10
  2
  12
  1
  5/68
  18
  #f
  102/37
  ((14 14 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  lambda
  "'(eval\n  (letrec*\n   (... make-ai-action (draw-board! (-> (λ (bo) ...) <-)) play-turn ...)\n   ...)\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval (λ (bo) (-> (app void) <-)) (env ((□? (bo)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app (-> void <-)) (env ((□? (bo)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  lambda
  "'(eval\n  (letrec*\n   (... human-action (make-ai-action (-> (λ (ma) ...) <-)) draw-board! ...)\n   ...)\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  lambda
  "'(eval (λ (ma) (-> (λ (bo) ...) <-)) (env ((□? (ma)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (λ (bo)\n    (-> (app move-coord (app some-v (app maximin bo ma (app mark⁻¹ ma)))) <-))\n  (env ((□? (bo)) (□? (ma)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (app move-coord (-> (app some-v (app maximin bo ma (app mark⁻¹ ma))) <-))\n  (env ((□? (bo)) (□? (ma)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (app some-v (-> (app maximin bo ma (app mark⁻¹ ma)) <-))\n  (env ((□? (bo)) (□? (ma)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval (app maximin bo ma (-> (app mark⁻¹ ma) <-)) (env ((□? (bo)) (□? (ma)))))"
  #f
  40
  22
  6
  12
  1
  2
  3
  1
  1/16
  18
  #f
  13/11
  ((3 3 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app mark⁻¹ (-> ma <-)) (env ((□? (bo)) (□? (ma)))))"
  #f
  15
  7
  4
  4
  0
  1
  1
  1
  0
  6
  #f
  8/7
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app (-> mark⁻¹ <-) ma) (env ((□? (bo)) (□? (ma)))))"
  #t
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app maximin bo (-> ma <-) (app mark⁻¹ ma)) (env ((□? (bo)) (□? (ma)))))"
  #f
  15
  7
  4
  4
  0
  1
  1
  1
  0
  6
  #f
  8/7
  ((1 1 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app maximin (-> bo <-) ma (app mark⁻¹ ma)) (env ((□? (bo)) (□? (ma)))))"
  #f
  85
  34
  33
  18
  22
  12
  34
  1
  1/2
  33
  #f
  18/17
  ((8 8 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app (-> maximin <-) bo ma (app mark⁻¹ ma)) (env ((□? (bo)) (□? (ma)))))"
  #t
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (app (-> some-v <-) (app maximin bo ma (app mark⁻¹ ma)))\n  (env ((□? (bo)) (□? (ma)))))"
  #t
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (app (-> move-coord <-) (app some-v (app maximin bo ma (app mark⁻¹ ma))))\n  (env ((□? (bo)) (□? (ma)))))"
  #t
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  lambda
  "'(eval\n  (letrec*\n   (... maximin (human-action (-> (λ (bo) ...) <-)) make-ai-action ...)\n   ...)\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (λ (bo) (-> (app error 'human-action \"not implemented\") <-))\n  (env ((□? (bo)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  string
  "'(eval (app error 'human-action (-> \"not implemented\" <-)) (env ((□? (bo)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  quoted
  "'(eval (app error (-> 'human-action <-) \"not implemented\") (env ((□? (bo)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app (-> error <-) 'human-action \"not implemented\") (env ((□? (bo)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  lambda
  "'(eval\n  (letrec*\n   (...\n    minimax\n    (maximin (-> (λ (bo this-mark that-mark) ...) <-))\n    human-action\n    ...)\n   ...)\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (λ (bo this-mark that-mark)\n    (-> (app fold/coord (λ (co mm) ...) (app none)) <-))\n  (env ((□? (bo this-mark that-mark)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (app fold/coord (λ (co mm) ...) (-> (app none) <-))\n  (env ((□? (bo this-mark that-mark)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app (-> none <-)) (env ((□? (bo this-mark that-mark)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  lambda
  "'(eval\n  (app fold/coord (-> (λ (co mm) ...) <-) (app none))\n  (env ((□? (bo this-mark that-mark)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  match
  "'(eval\n  (λ (co mm) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  let
  "'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> (let (bo) ...) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (let (... () (bo (-> (app board-mark co this-mark bo) <-)) () ...) ...)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))"
  #f
  8
  4
  0
  4
  1
  0
  1
  1
  1/4
  4
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (app board-mark co this-mark (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))"
  #f
  104
  43
  36
  25
  22
  13
  35
  1
  13/33
  39
  #f
  53/43
  ((12 12 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (app board-mark co (-> this-mark <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))"
  #f
  45
  16
  9
  20
  0
  3
  3
  1
  0
  9
  #f
  23/16
  ((4 5 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (app board-mark (-> co <-) this-mark bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))"
  #f
  13
  5
  2
  6
  1
  0
  1
  1
  1/5
  5
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (app (-> board-mark <-) co this-mark bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))"
  #t
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (let (bo)\n    (->\n     (app max-maybe-move mm (app move co (match (app wins? bo this-mark) ...)))\n     <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (app\n   max-maybe-move\n   mm\n   (-> (app move co (match (app wins? bo this-mark) ...)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))"
  #f
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  match
  "'(eval\n  (app move co (-> (match (app wins? bo this-mark) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (match (app wins? bo this-mark) (#f) (_ (-> (app horizon (app win) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))"
  #f
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  number
  "'(eval\n  (app horizon (app win) (-> 0 <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))"
  #t
  3
  1
  0
  2
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (app horizon (-> (app win) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))"
  #f
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app (-> win <-)) (env ((□? (co mm)) (□? (bo this-mark that-mark)))))"
  #t
  3
  1
  0
  2
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (app (-> horizon <-) (app win) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))"
  #t
  3
  1
  0
  2
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  match
  "'(eval\n  (match (app wins? bo this-mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (match (app full? bo) (#f) (_ (-> (app horizon (app draw) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))"
  #f
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  number
  "'(eval\n  (app horizon (app draw) (-> 0 <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))"
  #t
  3
  1
  0
  2
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (app horizon (-> (app draw) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))"
  #f
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app (-> draw <-)) (env ((□? (co mm)) (□? (bo this-mark that-mark)))))"
  #t
  3
  1
  0
  2
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (app (-> horizon <-) (app draw) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))"
  #t
  3
  1
  0
  2
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (match\n   (app full? bo)\n   ((#f)\n    (->\n     (app\n      horizon-add1\n      (app move-horizon (app some-v (app minimax bo that-mark this-mark))))\n     <-))\n   _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (app\n   horizon-add1\n   (->\n    (app move-horizon (app some-v (app minimax bo that-mark this-mark)))\n    <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (app move-horizon (-> (app some-v (app minimax bo that-mark this-mark)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (app some-v (-> (app minimax bo that-mark this-mark) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (app minimax bo that-mark (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))"
  #f
  44
  15
  9
  20
  0
  3
  3
  1
  0
  9
  #f
  7/5
  ((4 4 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (app minimax bo (-> that-mark <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))"
  #f
  63
  30
  11
  22
  1
  4
  5
  1
  1/18
  18
  #f
  7/5
  ((7 7 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (app minimax (-> bo <-) that-mark this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))"
  #f
  9
  5
  0
  4
  1
  0
  1
  1
  1/5
  5
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (app (-> minimax <-) bo that-mark this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))"
  #t
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (app (-> some-v <-) (app minimax bo that-mark this-mark))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))"
  #t
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (app (-> move-horizon <-) (app some-v (app minimax bo that-mark this-mark)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))"
  #t
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (app\n   (-> horizon-add1 <-)\n   (app move-horizon (app some-v (app minimax bo that-mark this-mark))))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))"
  #t
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (match (-> (app full? bo) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (app full? (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))"
  #f
  9
  5
  0
  4
  1
  0
  1
  1
  1/5
  5
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (app (-> full? <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))"
  #t
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (match (-> (app wins? bo this-mark) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (app wins? bo (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))"
  #f
  45
  16
  9
  20
  0
  3
  3
  1
  0
  9
  #f
  23/16
  ((4 5 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (app wins? (-> bo <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))"
  #f
  9
  5
  0
  4
  1
  0
  1
  1
  1/5
  5
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (app (-> wins? <-) bo this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))"
  #t
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (app move (-> co <-) (match (app wins? bo this-mark) ...))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))"
  #f
  13
  5
  2
  6
  1
  0
  1
  1
  1/5
  5
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (app (-> move <-) co (match (app wins? bo this-mark) ...))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))"
  #t
  3
  1
  0
  2
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (app\n   max-maybe-move\n   (-> mm <-)\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (app\n   (-> max-maybe-move <-)\n   mm\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))"
  #t
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> mm <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (app blank? (-> (app board-lookup co bo) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (app board-lookup co (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))"
  #f
  104
  43
  36
  25
  22
  13
  35
  1
  13/33
  39
  #f
  53/43
  ((12 12 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (app board-lookup (-> co <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))"
  #f
  13
  5
  2
  6
  1
  0
  1
  1
  1/5
  5
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (app (-> board-lookup <-) co bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))"
  #t
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (app (-> blank? <-) (app board-lookup co bo))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))"
  #t
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (app (-> fold/coord <-) (λ (co mm) ...) (app none))\n  (env ((□? (bo this-mark that-mark)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  lambda
  "'(eval\n  (letrec*\n   (...\n    max-maybe-move\n    (minimax (-> (λ (bo this-mark that-mark) ...) <-))\n    maximin\n    ...)\n   ...)\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (λ (bo this-mark that-mark)\n    (-> (app fold/coord (λ (co mm) ...) (app none)) <-))\n  (env ((□? (bo this-mark that-mark)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (app fold/coord (λ (co mm) ...) (-> (app none) <-))\n  (env ((□? (bo this-mark that-mark)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app (-> none <-)) (env ((□? (bo this-mark that-mark)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  lambda
  "'(eval\n  (app fold/coord (-> (λ (co mm) ...) <-) (app none))\n  (env ((□? (bo this-mark that-mark)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  match
  "'(eval\n  (λ (co mm) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  let
  "'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> (let (bo) ...) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (let (... () (bo (-> (app board-mark co this-mark bo) <-)) () ...) ...)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))"
  #f
  8
  4
  0
  4
  1
  0
  1
  1
  1/4
  4
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (app board-mark co this-mark (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))"
  #f
  14
  6
  2
  6
  1
  1
  2
  1
  1/6
  6
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (app board-mark co (-> this-mark <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))"
  #f
  64
  31
  11
  22
  1
  4
  5
  1
  1/19
  18
  #f
  44/31
  ((7 7 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (app board-mark (-> co <-) this-mark bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))"
  #f
  13
  5
  2
  6
  1
  0
  1
  1
  1/5
  5
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (app (-> board-mark <-) co this-mark bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))"
  #t
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (let (bo)\n    (->\n     (app min-maybe-move mm (app move co (match (app wins? bo this-mark) ...)))\n     <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (app\n   min-maybe-move\n   mm\n   (-> (app move co (match (app wins? bo this-mark) ...)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))"
  #f
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  match
  "'(eval\n  (app move co (-> (match (app wins? bo this-mark) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (match (app wins? bo this-mark) (#f) (_ (-> (app horizon (app lose) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))"
  #f
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  number
  "'(eval\n  (app horizon (app lose) (-> 0 <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))"
  #t
  3
  1
  0
  2
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (app horizon (-> (app lose) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))"
  #f
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app (-> lose <-)) (env ((□? (co mm)) (□? (bo this-mark that-mark)))))"
  #t
  3
  1
  0
  2
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (app (-> horizon <-) (app lose) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))"
  #t
  3
  1
  0
  2
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  match
  "'(eval\n  (match (app wins? bo this-mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (match (app full? bo) (#f) (_ (-> (app horizon (app draw) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))"
  #f
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  number
  "'(eval\n  (app horizon (app draw) (-> 0 <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))"
  #t
  3
  1
  0
  2
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (app horizon (-> (app draw) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))"
  #f
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app (-> draw <-)) (env ((□? (co mm)) (□? (bo this-mark that-mark)))))"
  #t
  3
  1
  0
  2
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (app (-> horizon <-) (app draw) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))"
  #t
  3
  1
  0
  2
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (match\n   (app full? bo)\n   ((#f)\n    (->\n     (app\n      horizon-add1\n      (app move-horizon (app some-v (app maximin bo that-mark this-mark))))\n     <-))\n   _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (app\n   horizon-add1\n   (->\n    (app move-horizon (app some-v (app maximin bo that-mark this-mark)))\n    <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (app move-horizon (-> (app some-v (app maximin bo that-mark this-mark)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (app some-v (-> (app maximin bo that-mark this-mark) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (app maximin bo that-mark (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))"
  #f
  63
  30
  11
  22
  1
  4
  5
  1
  1/18
  18
  #f
  7/5
  ((7 7 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (app maximin bo (-> that-mark <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))"
  #f
  44
  15
  9
  20
  0
  3
  3
  1
  0
  9
  #f
  7/5
  ((5 5 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (app maximin (-> bo <-) that-mark this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))"
  #f
  9
  5
  0
  4
  1
  0
  1
  1
  1/5
  5
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (app (-> maximin <-) bo that-mark this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))"
  #t
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (app (-> some-v <-) (app maximin bo that-mark this-mark))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))"
  #t
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (app (-> move-horizon <-) (app some-v (app maximin bo that-mark this-mark)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))"
  #t
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (app\n   (-> horizon-add1 <-)\n   (app move-horizon (app some-v (app maximin bo that-mark this-mark))))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))"
  #t
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (match (-> (app full? bo) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (app full? (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))"
  #f
  9
  5
  0
  4
  1
  0
  1
  1
  1/5
  5
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (app (-> full? <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))"
  #t
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (match (-> (app wins? bo this-mark) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (app wins? bo (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))"
  #f
  64
  31
  11
  22
  1
  4
  5
  1
  1/19
  18
  #f
  44/31
  ((7 7 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (app wins? (-> bo <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))"
  #f
  9
  5
  0
  4
  1
  0
  1
  1
  1/5
  5
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (app (-> wins? <-) bo this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))"
  #t
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (app move (-> co <-) (match (app wins? bo this-mark) ...))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))"
  #f
  13
  5
  2
  6
  1
  0
  1
  1
  1/5
  5
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (app (-> move <-) co (match (app wins? bo this-mark) ...))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))"
  #t
  3
  1
  0
  2
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (app\n   min-maybe-move\n   (-> mm <-)\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (app\n   (-> min-maybe-move <-)\n   mm\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))"
  #t
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> mm <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (app blank? (-> (app board-lookup co bo) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (app board-lookup co (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))"
  #f
  14
  6
  2
  6
  1
  1
  2
  1
  1/6
  6
  #t
  1
  ((0 1 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (app board-lookup (-> co <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))"
  #f
  13
  5
  2
  6
  1
  0
  1
  1
  1/5
  5
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (app (-> board-lookup <-) co bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))"
  #t
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (app (-> blank? <-) (app board-lookup co bo))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))"
  #t
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (app (-> fold/coord <-) (λ (co mm) ...) (app none))\n  (env ((□? (bo this-mark that-mark)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  lambda
  "'(eval\n  (letrec*\n   (... min-maybe-move (max-maybe-move (-> (λ (mmo mo₁) ...) <-)) minimax ...)\n   ...)\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  match
  "'(eval (λ (mmo mo₁) (-> (match mmo ...) <-)) (env ((□? (mmo mo₁)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (match mmo (some mo₀) ((none) (-> (app some mo₁) <-)))\n  (env ((□? (mmo mo₁)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app some (-> mo₁ <-)) (env ((□? (mmo mo₁)))))"
  #f
  8
  3
  2
  3
  0
  1
  1
  1
  0
  3
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app (-> some <-) mo₁) (env ((□? (mmo mo₁)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (match\n   mmo\n   ((some mo₀)\n    (->\n     (app\n      some\n      (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n     <-))\n   (none))\n  (env ((□? (mmo mo₁)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  match
  "'(eval\n  (app\n   some\n   (->\n    (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...)\n    <-))\n  (env ((□? (mmo mo₁)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   (#f)\n   (_ (-> mo₁ <-)))\n  (env ((□? (mmo mo₁)))))"
  #f
  8
  3
  2
  3
  0
  1
  1
  1
  0
  3
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   ((#f) (-> mo₀ <-))\n   _)\n  (env ((□? (mmo mo₁)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (match\n   (-> (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) <-)\n   (#f)\n   _)\n  (env ((□? (mmo mo₁)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (app horizon< (app move-horizon mo₀) (-> (app move-horizon mo₁) <-))\n  (env ((□? (mmo mo₁)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app move-horizon (-> mo₁ <-)) (env ((□? (mmo mo₁)))))"
  #f
  8
  3
  2
  3
  0
  1
  1
  1
  0
  3
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app (-> move-horizon <-) mo₁) (env ((□? (mmo mo₁)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (app horizon< (-> (app move-horizon mo₀) <-) (app move-horizon mo₁))\n  (env ((□? (mmo mo₁)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app move-horizon (-> mo₀ <-)) (env ((□? (mmo mo₁)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app (-> move-horizon <-) mo₀) (env ((□? (mmo mo₁)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (app (-> horizon< <-) (app move-horizon mo₀) (app move-horizon mo₁))\n  (env ((□? (mmo mo₁)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (app\n   (-> some <-)\n   (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n  (env ((□? (mmo mo₁)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (match (-> mmo <-) (some mo₀) (none)) (env ((□? (mmo mo₁)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  lambda
  "'(eval\n  (letrec*\n   (...\n    fold/coord\n    (min-maybe-move (-> (λ (mmo mo₁) ...) <-))\n    max-maybe-move\n    ...)\n   ...)\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  match
  "'(eval (λ (mmo mo₁) (-> (match mmo ...) <-)) (env ((□? (mmo mo₁)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (match mmo (some mo₀) ((none) (-> (app some mo₁) <-)))\n  (env ((□? (mmo mo₁)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app some (-> mo₁ <-)) (env ((□? (mmo mo₁)))))"
  #f
  8
  3
  2
  3
  0
  1
  1
  1
  0
  3
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app (-> some <-) mo₁) (env ((□? (mmo mo₁)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (match\n   mmo\n   ((some mo₀)\n    (->\n     (app\n      some\n      (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n     <-))\n   (none))\n  (env ((□? (mmo mo₁)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  match
  "'(eval\n  (app\n   some\n   (->\n    (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...)\n    <-))\n  (env ((□? (mmo mo₁)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   (#f)\n   (_ (-> mo₀ <-)))\n  (env ((□? (mmo mo₁)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   ((#f) (-> mo₁ <-))\n   _)\n  (env ((□? (mmo mo₁)))))"
  #f
  8
  3
  2
  3
  0
  1
  1
  1
  0
  3
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (match\n   (-> (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) <-)\n   (#f)\n   _)\n  (env ((□? (mmo mo₁)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (app horizon< (app move-horizon mo₀) (-> (app move-horizon mo₁) <-))\n  (env ((□? (mmo mo₁)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app move-horizon (-> mo₁ <-)) (env ((□? (mmo mo₁)))))"
  #f
  8
  3
  2
  3
  0
  1
  1
  1
  0
  3
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app (-> move-horizon <-) mo₁) (env ((□? (mmo mo₁)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (app horizon< (-> (app move-horizon mo₀) <-) (app move-horizon mo₁))\n  (env ((□? (mmo mo₁)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app move-horizon (-> mo₀ <-)) (env ((□? (mmo mo₁)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app (-> move-horizon <-) mo₀) (env ((□? (mmo mo₁)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (app (-> horizon< <-) (app move-horizon mo₀) (app move-horizon mo₁))\n  (env ((□? (mmo mo₁)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (app\n   (-> some <-)\n   (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n  (env ((□? (mmo mo₁)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (match (-> mmo <-) (some mo₀) (none)) (env ((□? (mmo mo₁)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  lambda
  "'(eval\n  (letrec*\n   (... foldl (fold/coord (-> (λ (f x) ...) <-)) min-maybe-move ...)\n   ...)\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval (λ (f x) (-> (app foldl (λ (r x) ...) x is) <-)) (env ((□? (f x)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app foldl (λ (r x) ...) x (-> is <-)) (env ((□? (f x)))))"
  #f
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  3
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app foldl (λ (r x) ...) (-> x <-) is) (env ((□? (f x)))))"
  #f
  11
  5
  3
  3
  0
  1
  1
  1
  0
  5
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  lambda
  "'(eval (app foldl (-> (λ (r x) ...) <-) x is) (env ((□? (f x)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (λ (r x) (-> (app foldl (λ (c x) ...) x is) <-))\n  (env ((□? (r x)) (□? (f x)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app foldl (λ (c x) ...) x (-> is <-)) (env ((□? (r x)) (□? (f x)))))"
  #f
  5
  3
  0
  2
  2
  0
  2
  1
  2/3
  3
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app foldl (λ (c x) ...) (-> x <-) is) (env ((□? (r x)) (□? (f x)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  lambda
  "'(eval (app foldl (-> (λ (c x) ...) <-) x is) (env ((□? (r x)) (□? (f x)))))"
  #t
  3
  1
  0
  2
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (λ (c x) (-> (app f (app coord r c) x) <-))\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (app f (app coord r c) (-> x <-))\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (app f (-> (app coord r c) <-) x)\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))"
  #f
  5
  2
  0
  3
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app coord r (-> c <-)) (env ((□? (c x)) (□? (r x)) (□? (f x)))))"
  #f
  46
  30
  11
  5
  23
  5
  28
  1
  53/66
  28
  #f
  11/10
  ((4 4 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app coord (-> r <-) c) (env ((□? (c x)) (□? (r x)) (□? (f x)))))"
  #f
  46
  30
  11
  5
  23
  5
  28
  1
  53/66
  28
  #f
  11/10
  ((3 3 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app (-> coord <-) r c) (env ((□? (c x)) (□? (r x)) (□? (f x)))))"
  #t
  4
  1
  0
  3
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (app (-> f <-) (app coord r c) x)\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))"
  #f
  11
  3
  3
  5
  0
  1
  1
  1
  0
  2
  #f
  4/3
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app (-> foldl <-) (λ (c x) ...) x is) (env ((□? (r x)) (□? (f x)))))"
  #t
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app (-> foldl <-) (λ (r x) ...) x is) (env ((□? (f x)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  lambda
  "'(eval\n  (letrec*\n   (... horizon-add1 (foldl (-> (λ (f acc l) ...) <-)) fold/coord ...)\n   ...)\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  match
  "'(eval (λ (f acc l) (-> (match l ...) <-)) (env ((□? (f acc l)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (match l (nil) ((cons x xs) (-> (app foldl f (app f x acc) xs) <-)))\n  (env ((□? (f acc l)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app foldl f (app f x acc) (-> xs <-)) (env ((□? (f acc l)))))"
  #f
  34
  24
  4
  6
  14
  1
  15
  1
  31/42
  14
  #f
  41/24
  ((6 6 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval (app foldl f (-> (app f x acc) <-) xs) (env ((□? (f acc l)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app f x (-> acc <-)) (env ((□? (f acc l)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app f (-> x <-) acc) (env ((□? (f acc l)))))"
  #f
  41
  31
  4
  6
  20
  1
  21
  1
  104/133
  20
  #f
  50/31
  ((7 7 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app (-> f <-) x acc) (env ((□? (f acc l)))))"
  #f
  20
  10
  4
  6
  3
  1
  4
  1
  3/28
  4
  #f
  8/5
  ((3 4 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app foldl (-> f <-) (app f x acc) xs) (env ((□? (f acc l)))))"
  #f
  19
  9
  4
  6
  3
  1
  4
  1
  1/7
  4
  #f
  14/9
  ((3 3 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app (-> foldl <-) f (app f x acc) xs) (env ((□? (f acc l)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (match l ((nil) (-> acc <-)) (cons x xs)) (env ((□? (f acc l)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (match (-> l <-) (nil) (cons x xs)) (env ((□? (f acc l)))))"
  #f
  34
  24
  4
  6
  14
  1
  15
  1
  31/42
  14
  #f
  41/24
  ((6 6 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  lambda
  "'(eval\n  (letrec* (... horizon< (horizon-add1 (-> (λ (h) ...) <-)) foldl ...) ...)\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  match
  "'(eval (λ (h) (-> (match h ...) <-)) (env ((□? (h)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (match h ((horizon oc sc) (-> (app horizon oc (app + sc 1)) <-)))\n  (env ((□? (h)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval (app horizon oc (-> (app + sc 1) <-)) (env ((□? (h)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  number
  "'(eval (app + sc (-> 1 <-)) (env ((□? (h)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app + (-> sc <-) 1) (env ((□? (h)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app (-> + <-) sc 1) (env ((□? (h)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app horizon (-> oc <-) (app + sc 1)) (env ((□? (h)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app (-> horizon <-) oc (app + sc 1)) (env ((□? (h)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (match (-> h <-) (horizon oc sc)) (env ((□? (h)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  lambda
  "'(eval\n  (letrec* (... oc< (horizon< (-> (λ (h₀ h₁) ...) <-)) horizon-add1 ...) ...)\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  match
  "'(eval (λ (h₀ h₁) (-> (match h₀ ...) <-)) (env ((□? (h₀ h₁)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  match
  "'(eval\n  (match h₀ ((horizon oc₀ sc₀) (-> (match h₁ ...) <-)))\n  (env ((□? (h₀ h₁)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (match\n   h₁\n   ((horizon oc₁ sc₁)\n    (->\n     (app or (app oc< oc₀ oc₁) (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n     <-)))\n  (env ((□? (h₀ h₁)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (app\n   or\n   (app oc< oc₀ oc₁)\n   (-> (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)) <-))\n  (env ((□? (h₀ h₁)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (app and (app equal? oc₀ oc₁) (-> (app < sc₀ sc₁) <-))\n  (env ((□? (h₀ h₁)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app < sc₀ (-> sc₁ <-)) (env ((□? (h₀ h₁)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app < (-> sc₀ <-) sc₁) (env ((□? (h₀ h₁)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app (-> < <-) sc₀ sc₁) (env ((□? (h₀ h₁)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (app and (-> (app equal? oc₀ oc₁) <-) (app < sc₀ sc₁))\n  (env ((□? (h₀ h₁)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app equal? oc₀ (-> oc₁ <-)) (env ((□? (h₀ h₁)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app equal? (-> oc₀ <-) oc₁) (env ((□? (h₀ h₁)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app (-> equal? <-) oc₀ oc₁) (env ((□? (h₀ h₁)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (app (-> and <-) (app equal? oc₀ oc₁) (app < sc₀ sc₁))\n  (env ((□? (h₀ h₁)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (app\n   or\n   (-> (app oc< oc₀ oc₁) <-)\n   (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n  (env ((□? (h₀ h₁)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app oc< oc₀ (-> oc₁ <-)) (env ((□? (h₀ h₁)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app oc< (-> oc₀ <-) oc₁) (env ((□? (h₀ h₁)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app (-> oc< <-) oc₀ oc₁) (env ((□? (h₀ h₁)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (app\n   (-> or <-)\n   (app oc< oc₀ oc₁)\n   (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n  (env ((□? (h₀ h₁)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (match (-> h₁ <-) (horizon oc₁ sc₁)) (env ((□? (h₀ h₁)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (match (-> h₀ <-) (horizon oc₀ sc₀)) (env ((□? (h₀ h₁)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  lambda
  "'(eval\n  (letrec* (... full? (oc< (-> (λ (oc₀ oc₁) ...) <-)) horizon< ...) ...)\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  match
  "'(eval (λ (oc₀ oc₁) (-> (match oc₀ ...) <-)) (env ((□? (oc₀ oc₁)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (match\n   oc₀\n   (win)\n   (draw)\n   ((lose) (-> (app not (app equal? oc₁ (app lose))) <-)))\n  (env ((□? (oc₀ oc₁)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval (app not (-> (app equal? oc₁ (app lose)) <-)) (env ((□? (oc₀ oc₁)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval (app equal? oc₁ (-> (app lose) <-)) (env ((□? (oc₀ oc₁)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app (-> lose <-)) (env ((□? (oc₀ oc₁)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app equal? (-> oc₁ <-) (app lose)) (env ((□? (oc₀ oc₁)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app (-> equal? <-) oc₁ (app lose)) (env ((□? (oc₀ oc₁)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app (-> not <-) (app equal? oc₁ (app lose))) (env ((□? (oc₀ oc₁)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (match oc₀ (win) ((draw) (-> (app equal? oc₁ (app win)) <-)) (lose))\n  (env ((□? (oc₀ oc₁)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval (app equal? oc₁ (-> (app win) <-)) (env ((□? (oc₀ oc₁)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app (-> win <-)) (env ((□? (oc₀ oc₁)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app equal? (-> oc₁ <-) (app win)) (env ((□? (oc₀ oc₁)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app (-> equal? <-) oc₁ (app win)) (env ((□? (oc₀ oc₁)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (match oc₀ ((win) (-> (app #f) <-)) (draw) (lose))\n  (env ((□? (oc₀ oc₁)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (oc₀ oc₁)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (match (-> oc₀ <-) (win) (draw) (lose)) (env ((□? (oc₀ oc₁)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  lambda
  "'(eval (letrec* (... wins? (full? (-> (λ (b) ...) <-)) oc< ...) ...) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval (λ (b) (-> (app andmap (λ (r) ...) is) <-)) (env ((□? (b)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app andmap (λ (r) ...) (-> is <-)) (env ((□? (b)))))"
  #f
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  3
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  lambda
  "'(eval (app andmap (-> (λ (r) ...) <-) is) (env ((□? (b)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval (λ (r) (-> (app andmap (λ (c) ...) is) <-)) (env ((□? (r)) (□? (b)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app andmap (λ (c) ...) (-> is <-)) (env ((□? (r)) (□? (b)))))"
  #f
  5
  3
  0
  2
  2
  0
  2
  1
  2/3
  3
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  lambda
  "'(eval (app andmap (-> (λ (c) ...) <-) is) (env ((□? (r)) (□? (b)))))"
  #t
  3
  1
  0
  2
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (λ (c) (-> (app marked? (app b (app coord r c))) <-))\n  (env ((□? (c)) (□? (r)) (□? (b)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (app marked? (-> (app b (app coord r c)) <-))\n  (env ((□? (c)) (□? (r)) (□? (b)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval (app b (-> (app coord r c) <-)) (env ((□? (c)) (□? (r)) (□? (b)))))"
  #f
  5
  2
  0
  3
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app coord r (-> c <-)) (env ((□? (c)) (□? (r)) (□? (b)))))"
  #f
  53
  30
  15
  8
  23
  5
  28
  1
  53/66
  28
  #f
  11/10
  ((3 3 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app coord (-> r <-) c) (env ((□? (c)) (□? (r)) (□? (b)))))"
  #f
  53
  30
  15
  8
  23
  5
  28
  1
  53/66
  28
  #f
  11/10
  ((3 3 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app (-> coord <-) r c) (env ((□? (c)) (□? (r)) (□? (b)))))"
  #t
  4
  1
  0
  3
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app (-> b <-) (app coord r c)) (env ((□? (c)) (□? (r)) (□? (b)))))"
  #f
  30
  14
  4
  12
  1
  1
  2
  1
  1/12
  14
  #t
  8/7
  ((2 2 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (app (-> marked? <-) (app b (app coord r c)))\n  (env ((□? (c)) (□? (r)) (□? (b)))))"
  #t
  5
  2
  0
  3
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app (-> andmap <-) (λ (c) ...) is) (env ((□? (r)) (□? (b)))))"
  #t
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app (-> andmap <-) (λ (r) ...) is) (env ((□? (b)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  lambda
  "'(eval\n  (letrec* (... andmap (wins? (-> (λ (b m) ...) <-)) full? ...) ...)\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (λ (b m)\n    (->\n     (app\n      or\n      (app ormap (λ (r) ...) is)\n      (app ormap (λ (c) ...) is)\n      (app andmap (λ (rc) ...) is)\n      (app andmap (λ (rc) ...) is))\n     <-))\n  (env ((□? (b m)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (-> (app andmap (λ (rc) ...) is) <-))\n  (env ((□? (b m)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app andmap (λ (rc) ...) (-> is <-)) (env ((□? (b m)))))"
  #f
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  3
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  lambda
  "'(eval (app andmap (-> (λ (rc) ...) <-) is) (env ((□? (b m)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (λ (rc) (-> (app marked-with? b (app coord rc (app i⁻¹ rc)) m) <-))\n  (env ((□? (rc)) (□? (b m)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (app marked-with? b (app coord rc (app i⁻¹ rc)) (-> m <-))\n  (env ((□? (rc)) (□? (b m)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (app marked-with? b (-> (app coord rc (app i⁻¹ rc)) <-) m)\n  (env ((□? (rc)) (□? (b m)))))"
  #f
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval (app coord rc (-> (app i⁻¹ rc) <-)) (env ((□? (rc)) (□? (b m)))))"
  #f
  80
  53
  17
  10
  32
  6
  38
  1
  68/99
  45
  #f
  67/53
  ((6 7 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app i⁻¹ (-> rc <-)) (env ((□? (rc)) (□? (b m)))))"
  #f
  53
  30
  15
  8
  23
  5
  28
  1
  53/66
  28
  #f
  11/10
  ((3 3 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app (-> i⁻¹ <-) rc) (env ((□? (rc)) (□? (b m)))))"
  #t
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app coord (-> rc <-) (app i⁻¹ rc)) (env ((□? (rc)) (□? (b m)))))"
  #f
  53
  30
  15
  8
  23
  5
  28
  1
  53/66
  28
  #f
  11/10
  ((3 3 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app (-> coord <-) rc (app i⁻¹ rc)) (env ((□? (rc)) (□? (b m)))))"
  #t
  3
  1
  0
  2
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (app marked-with? (-> b <-) (app coord rc (app i⁻¹ rc)) m)\n  (env ((□? (rc)) (□? (b m)))))"
  #f
  29
  14
  4
  11
  1
  1
  2
  1
  1/12
  14
  #t
  8/7
  ((2 2 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (app (-> marked-with? <-) b (app coord rc (app i⁻¹ rc)) m)\n  (env ((□? (rc)) (□? (b m)))))"
  #t
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app (-> andmap <-) (λ (rc) ...) is) (env ((□? (b m)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (-> (app andmap (λ (rc) ...) is) <-)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app andmap (λ (rc) ...) (-> is <-)) (env ((□? (b m)))))"
  #f
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  3
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  lambda
  "'(eval (app andmap (-> (λ (rc) ...) <-) is) (env ((□? (b m)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (λ (rc) (-> (app marked-with? b (app coord rc rc) m) <-))\n  (env ((□? (rc)) (□? (b m)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (app marked-with? b (app coord rc rc) (-> m <-))\n  (env ((□? (rc)) (□? (b m)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (app marked-with? b (-> (app coord rc rc) <-) m)\n  (env ((□? (rc)) (□? (b m)))))"
  #f
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app coord rc (-> rc <-)) (env ((□? (rc)) (□? (b m)))))"
  #f
  53
  30
  15
  8
  23
  5
  28
  1
  53/66
  28
  #f
  11/10
  ((3 3 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app coord (-> rc <-) rc) (env ((□? (rc)) (□? (b m)))))"
  #f
  53
  30
  15
  8
  23
  5
  28
  1
  53/66
  28
  #f
  11/10
  ((3 3 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app (-> coord <-) rc rc) (env ((□? (rc)) (□? (b m)))))"
  #t
  3
  1
  0
  2
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (app marked-with? (-> b <-) (app coord rc rc) m)\n  (env ((□? (rc)) (□? (b m)))))"
  #f
  29
  14
  4
  11
  1
  1
  2
  1
  1/12
  14
  #t
  8/7
  ((2 2 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (app (-> marked-with? <-) b (app coord rc rc) m)\n  (env ((□? (rc)) (□? (b m)))))"
  #t
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app (-> andmap <-) (λ (rc) ...) is) (env ((□? (b m)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (-> (app ormap (λ (c) ...) is) <-)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app ormap (λ (c) ...) (-> is <-)) (env ((□? (b m)))))"
  #f
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  3
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  lambda
  "'(eval (app ormap (-> (λ (c) ...) <-) is) (env ((□? (b m)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval (λ (c) (-> (app andmap (λ (r) ...) is) <-)) (env ((□? (c)) (□? (b m)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app andmap (λ (r) ...) (-> is <-)) (env ((□? (c)) (□? (b m)))))"
  #f
  5
  3
  0
  2
  2
  0
  2
  1
  2/3
  3
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  lambda
  "'(eval (app andmap (-> (λ (r) ...) <-) is) (env ((□? (c)) (□? (b m)))))"
  #t
  3
  1
  0
  2
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (λ (r) (-> (app marked-with? b (app coord r c) m) <-))\n  (env ((□? (r)) (□? (c)) (□? (b m)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (app marked-with? b (app coord r c) (-> m <-))\n  (env ((□? (r)) (□? (c)) (□? (b m)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (app marked-with? b (-> (app coord r c) <-) m)\n  (env ((□? (r)) (□? (c)) (□? (b m)))))"
  #f
  5
  2
  0
  3
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app coord r (-> c <-)) (env ((□? (r)) (□? (c)) (□? (b m)))))"
  #f
  46
  30
  11
  5
  23
  5
  28
  1
  53/66
  28
  #f
  11/10
  ((3 3 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app coord (-> r <-) c) (env ((□? (r)) (□? (c)) (□? (b m)))))"
  #f
  53
  30
  15
  8
  23
  5
  28
  1
  53/66
  28
  #f
  11/10
  ((4 4 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app (-> coord <-) r c) (env ((□? (r)) (□? (c)) (□? (b m)))))"
  #t
  4
  1
  0
  3
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (app marked-with? (-> b <-) (app coord r c) m)\n  (env ((□? (r)) (□? (c)) (□? (b m)))))"
  #f
  30
  14
  4
  12
  1
  1
  2
  1
  1/12
  14
  #t
  8/7
  ((2 2 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (app (-> marked-with? <-) b (app coord r c) m)\n  (env ((□? (r)) (□? (c)) (□? (b m)))))"
  #t
  5
  2
  0
  3
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app (-> andmap <-) (λ (r) ...) is) (env ((□? (c)) (□? (b m)))))"
  #t
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app (-> ormap <-) (λ (c) ...) is) (env ((□? (b m)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (app\n   or\n   (-> (app ormap (λ (r) ...) is) <-)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app ormap (λ (r) ...) (-> is <-)) (env ((□? (b m)))))"
  #f
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  3
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  lambda
  "'(eval (app ormap (-> (λ (r) ...) <-) is) (env ((□? (b m)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval (λ (r) (-> (app andmap (λ (c) ...) is) <-)) (env ((□? (r)) (□? (b m)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app andmap (λ (c) ...) (-> is <-)) (env ((□? (r)) (□? (b m)))))"
  #f
  5
  3
  0
  2
  2
  0
  2
  1
  2/3
  3
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  lambda
  "'(eval (app andmap (-> (λ (c) ...) <-) is) (env ((□? (r)) (□? (b m)))))"
  #t
  3
  1
  0
  2
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (λ (c) (-> (app marked-with? b (app coord r c) m) <-))\n  (env ((□? (c)) (□? (r)) (□? (b m)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (app marked-with? b (app coord r c) (-> m <-))\n  (env ((□? (c)) (□? (r)) (□? (b m)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (app marked-with? b (-> (app coord r c) <-) m)\n  (env ((□? (c)) (□? (r)) (□? (b m)))))"
  #f
  5
  2
  0
  3
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app coord r (-> c <-)) (env ((□? (c)) (□? (r)) (□? (b m)))))"
  #f
  53
  30
  15
  8
  23
  5
  28
  1
  53/66
  28
  #f
  11/10
  ((3 3 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app coord (-> r <-) c) (env ((□? (c)) (□? (r)) (□? (b m)))))"
  #f
  46
  30
  11
  5
  23
  5
  28
  1
  53/66
  28
  #f
  11/10
  ((3 3 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app (-> coord <-) r c) (env ((□? (c)) (□? (r)) (□? (b m)))))"
  #t
  4
  1
  0
  3
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (app marked-with? (-> b <-) (app coord r c) m)\n  (env ((□? (c)) (□? (r)) (□? (b m)))))"
  #f
  30
  14
  4
  12
  1
  1
  2
  1
  1/12
  14
  #t
  8/7
  ((2 2 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (app (-> marked-with? <-) b (app coord r c) m)\n  (env ((□? (c)) (□? (r)) (□? (b m)))))"
  #t
  5
  2
  0
  3
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app (-> andmap <-) (λ (c) ...) is) (env ((□? (r)) (□? (b m)))))"
  #t
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app (-> ormap <-) (λ (r) ...) is) (env ((□? (b m)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (app\n   (-> or <-)\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  lambda
  "'(eval\n  (letrec* (... ormap (andmap (-> (λ (f xs) ...) <-)) wins? ...) ...)\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  match
  "'(eval (λ (f xs) (-> (match xs ...) <-)) (env ((□? (f xs)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (match\n   xs\n   (nil)\n   ((cons x rest-xs) (-> (app and (app f x) (app andmap f rest-xs)) <-)))\n  (env ((□? (f xs)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval (app and (app f x) (-> (app andmap f rest-xs) <-)) (env ((□? (f xs)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app andmap f (-> rest-xs <-)) (env ((□? (f xs)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app andmap (-> f <-) rest-xs) (env ((□? (f xs)))))"
  #f
  42
  21
  8
  13
  7
  1
  8
  1
  1/15
  12
  #f
  22/7
  ((11 12 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app (-> andmap <-) f rest-xs) (env ((□? (f xs)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval (app and (-> (app f x) <-) (app andmap f rest-xs)) (env ((□? (f xs)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app f (-> x <-)) (env ((□? (f xs)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app (-> f <-) x) (env ((□? (f xs)))))"
  #f
  43
  22
  8
  13
  7
  1
  8
  1
  7/120
  12
  #f
  36/11
  ((13 13 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app (-> and <-) (app f x) (app andmap f rest-xs)) (env ((□? (f xs)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (match xs ((nil) (-> (app #t) <-)) (cons x rest-xs))\n  (env ((□? (f xs)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (f xs)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (match (-> xs <-) (nil) (cons x rest-xs)) (env ((□? (f xs)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  lambda
  "'(eval\n  (letrec* (... i⁻¹ (ormap (-> (λ (f xs) ...) <-)) andmap ...) ...)\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  match
  "'(eval (λ (f xs) (-> (match xs ...) <-)) (env ((□? (f xs)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (match\n   xs\n   (nil)\n   ((cons x rest-xs) (-> (app or (app f x) (app ormap f rest-xs)) <-)))\n  (env ((□? (f xs)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval (app or (app f x) (-> (app ormap f rest-xs) <-)) (env ((□? (f xs)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app ormap f (-> rest-xs <-)) (env ((□? (f xs)))))"
  #f
  33
  24
  4
  5
  14
  1
  15
  1
  31/42
  14
  #f
  41/24
  ((6 6 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app ormap (-> f <-) rest-xs) (env ((□? (f xs)))))"
  #f
  18
  9
  4
  5
  3
  1
  4
  1
  1/7
  4
  #f
  14/9
  ((3 3 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app (-> ormap <-) f rest-xs) (env ((□? (f xs)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval (app or (-> (app f x) <-) (app ormap f rest-xs)) (env ((□? (f xs)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app f (-> x <-)) (env ((□? (f xs)))))"
  #f
  40
  31
  4
  5
  20
  1
  21
  1
  104/133
  20
  #f
  50/31
  ((7 7 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app (-> f <-) x) (env ((□? (f xs)))))"
  #f
  19
  10
  4
  5
  3
  1
  4
  1
  3/28
  4
  #f
  8/5
  ((3 3 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app (-> or <-) (app f x) (app ormap f rest-xs)) (env ((□? (f xs)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (match xs ((nil) (-> (app #f) <-)) (cons x rest-xs))\n  (env ((□? (f xs)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (f xs)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (match (-> xs <-) (nil) (cons x rest-xs)) (env ((□? (f xs)))))"
  #f
  33
  24
  4
  5
  14
  1
  15
  1
  31/42
  14
  #f
  41/24
  ((6 6 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  lambda
  "'(eval\n  (letrec* (... marked-with? (i⁻¹ (-> (λ (i) ...) <-)) ormap ...) ...)\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  match
  "'(eval (λ (i) (-> (match i ...) <-)) (env ((□? (i)))))"
  #f
  78
  51
  17
  10
  30
  6
  36
  1
  41/60
  44
  #f
  21/17
  ((6 6 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval (match i (Ze) (On) ((Tw) (-> (app Ze) <-))) (env ((□? (i)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app (-> Ze <-)) (env ((□? (i)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval (match i (Ze) ((On) (-> (app On) <-)) (Tw)) (env ((□? (i)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app (-> On <-)) (env ((□? (i)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval (match i ((Ze) (-> (app Tw) <-)) (On) (Tw)) (env ((□? (i)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app (-> Tw <-)) (env ((□? (i)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (match (-> i <-) (Ze) (On) (Tw)) (env ((□? (i)))))"
  #f
  60
  33
  17
  10
  23
  6
  29
  1
  53/69
  29
  #f
  13/11
  ((5 5 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  lambda
  "'(eval\n  (letrec*\n   (... board-lookup (marked-with? (-> (λ (b co m) ...) <-)) i⁻¹ ...)\n   ...)\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  match
  "'(eval (λ (b co m) (-> (match (app b co) ...) <-)) (env ((□? (b co m)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (match (app b co) (blank) ((marked m*) (-> (app equal? m m*) <-)))\n  (env ((□? (b co m)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app equal? m (-> m* <-)) (env ((□? (b co m)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app equal? (-> m <-) m*) (env ((□? (b co m)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app (-> equal? <-) m m*) (env ((□? (b co m)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (match (app b co) ((blank) (-> (app #f) <-)) (marked m*))\n  (env ((□? (b co m)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (b co m)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval (match (-> (app b co) <-) (blank) (marked m*)) (env ((□? (b co m)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app b (-> co <-)) (env ((□? (b co m)))))"
  #f
  22
  9
  5
  8
  0
  1
  1
  1
  0
  8
  #f
  4/3
  ((2 2 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app (-> b <-) co) (env ((□? (b co m)))))"
  #f
  77
  30
  9
  38
  1
  2
  3
  1
  1/16
  30
  #t
  4/3
  ((8 9 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  lambda
  "'(eval\n  (letrec*\n   (... board-mark (board-lookup (-> (λ (co bo) ...) <-)) marked-with? ...)\n   ...)\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval (λ (co bo) (-> (app bo co) <-)) (env ((□? (co bo)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app bo (-> co <-)) (env ((□? (co bo)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app (-> bo <-) co) (env ((□? (co bo)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  lambda
  "'(eval\n  (letrec*\n   (... empty-board (board-mark (-> (λ (co₀ ma bo) ...) <-)) board-lookup ...)\n   ...)\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  lambda
  "'(eval (λ (co₀ ma bo) (-> (λ (co) ...) <-)) (env ((□? (co₀ ma bo)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  match
  "'(eval\n  (λ (co) (-> (match (app equal? co₀ co) ...) <-))\n  (env ((□? (co)) (□? (co₀ ma bo)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (match (app equal? co₀ co) (#f) (_ (-> (app marked ma) <-)))\n  (env ((□? (co)) (□? (co₀ ma bo)))))"
  #f
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app marked (-> ma <-)) (env ((□? (co)) (□? (co₀ ma bo)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app (-> marked <-) ma) (env ((□? (co)) (□? (co₀ ma bo)))))"
  #t
  3
  1
  0
  2
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (match (app equal? co₀ co) ((#f) (-> (app board-lookup co bo) <-)) _)\n  (env ((□? (co)) (□? (co₀ ma bo)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app board-lookup co (-> bo <-)) (env ((□? (co)) (□? (co₀ ma bo)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app board-lookup (-> co <-) bo) (env ((□? (co)) (□? (co₀ ma bo)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app (-> board-lookup <-) co bo) (env ((□? (co)) (□? (co₀ ma bo)))))"
  #t
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (match (-> (app equal? co₀ co) <-) (#f) _)\n  (env ((□? (co)) (□? (co₀ ma bo)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app equal? co₀ (-> co <-)) (env ((□? (co)) (□? (co₀ ma bo)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app equal? (-> co₀ <-) co) (env ((□? (co)) (□? (co₀ ma bo)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app (-> equal? <-) co₀ co) (env ((□? (co)) (□? (co₀ ma bo)))))"
  #t
  3
  1
  0
  2
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  lambda
  "'(eval\n  (letrec* (... mark⁻¹ (empty-board (-> (λ (co) ...) <-)) board-mark ...) ...)\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval (λ (co) (-> (app blank) <-)) (env ((□? (co)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app (-> blank <-)) (env ((□? (co)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  lambda
  "'(eval\n  (letrec* (... is (mark⁻¹ (-> (λ (ma) ...) <-)) empty-board ...) ...)\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  match
  "'(eval (λ (ma) (-> (match ma ...) <-)) (env ((□? (ma)))))"
  #f
  37
  19
  6
  12
  0
  2
  2
  1
  0
  15
  #f
  23/19
  ((2 3 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval (match ma (X) ((O) (-> (app X) <-))) (env ((□? (ma)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app (-> X <-)) (env ((□? (ma)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval (match ma ((X) (-> (app O) <-)) (O)) (env ((□? (ma)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app (-> O <-)) (env ((□? (ma)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (match (-> ma <-) (X) (O)) (env ((□? (ma)))))"
  #f
  28
  11
  6
  11
  0
  2
  2
  1
  0
  9
  #f
  13/11
  ((2 2 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (letrec*\n   (...\n    move-horizon\n    (is\n     (->\n      (app cons (app Ze) (app cons (app On) (app cons (app Tw) (app nil))))\n      <-))\n    mark⁻¹\n    ...)\n   ...)\n  (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (app cons (app Ze) (-> (app cons (app On) (app cons (app Tw) (app nil))) <-))\n  (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval (app cons (app On) (-> (app cons (app Tw) (app nil)) <-)) (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval (app cons (app Tw) (-> (app nil) <-)) (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app (-> nil <-)) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval (app cons (-> (app Tw) <-) (app nil)) (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app (-> Tw <-)) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app (-> cons <-) (app Tw) (app nil)) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval (app cons (-> (app On) <-) (app cons (app Tw) (app nil))) (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app (-> On <-)) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app (-> cons <-) (app On) (app cons (app Tw) (app nil))) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (app cons (-> (app Ze) <-) (app cons (app On) (app cons (app Tw) (app nil))))\n  (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app (-> Ze <-)) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (app (-> cons <-) (app Ze) (app cons (app On) (app cons (app Tw) (app nil))))\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  lambda
  "'(eval\n  (letrec*\n   (... move-coord (move-horizon (-> (λ (move-horizon-v) ...) <-)) is ...)\n   ...)\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  match
  "'(eval\n  (λ (move-horizon-v) (-> (match move-horizon-v ...) <-))\n  (env ((□? (move-horizon-v)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (match\n   move-horizon-v\n   (move _ move-horizon-x)\n   (_ (-> (app error \"invalid match for move-horizon\") <-)))\n  (env ((□? (move-horizon-v)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  string
  "'(eval\n  (app error (-> \"invalid match for move-horizon\" <-))\n  (env ((□? (move-horizon-v)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (app (-> error <-) \"invalid match for move-horizon\")\n  (env ((□? (move-horizon-v)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (match move-horizon-v ((move _ move-horizon-x) (-> move-horizon-x <-)) _)\n  (env ((□? (move-horizon-v)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (match (-> move-horizon-v <-) (move _ move-horizon-x) _)\n  (env ((□? (move-horizon-v)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  lambda
  "'(eval\n  (letrec*\n   (... blank? (move-coord (-> (λ (move-coord-v) ...) <-)) move-horizon ...)\n   ...)\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  match
  "'(eval\n  (λ (move-coord-v) (-> (match move-coord-v ...) <-))\n  (env ((□? (move-coord-v)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (match\n   move-coord-v\n   (move move-coord-x _)\n   (_ (-> (app error \"invalid match for move-coord\") <-)))\n  (env ((□? (move-coord-v)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  string
  "'(eval\n  (app error (-> \"invalid match for move-coord\" <-))\n  (env ((□? (move-coord-v)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (app (-> error <-) \"invalid match for move-coord\")\n  (env ((□? (move-coord-v)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (match move-coord-v ((move move-coord-x _) (-> move-coord-x <-)) _)\n  (env ((□? (move-coord-v)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (match (-> move-coord-v <-) (move move-coord-x _) _)\n  (env ((□? (move-coord-v)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  lambda
  "'(eval\n  (letrec* (... marked? (blank? (-> (λ (a) ...) <-)) move-coord ...) ...)\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  match
  "'(eval (λ (a) (-> (match a ...) <-)) (env ((□? (a)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval (match a (blank) (_ (-> (app #f) <-))) (env ((□? (a)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (a)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval (match a ((blank) (-> (app #t) <-)) _) (env ((□? (a)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (a)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (match (-> a <-) (blank) _) (env ((□? (a)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  lambda
  "'(eval\n  (letrec* (... some-v (marked? (-> (λ (a) ...) <-)) blank? ...) ...)\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  match
  "'(eval (λ (a) (-> (match a ...) <-)) (env ((□? (a)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval (match a (marked _) (_ (-> (app #f) <-))) (env ((□? (a)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (a)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval (match a ((marked _) (-> (app #t) <-)) _) (env ((□? (a)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (a)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (match (-> a <-) (marked _) _) (env ((□? (a)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  lambda
  "'(eval\n  (letrec* (... () (some-v (-> (λ (some-v-v) ...) <-)) marked? ...) ...)\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  match
  "'(eval (λ (some-v-v) (-> (match some-v-v ...) <-)) (env ((□? (some-v-v)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (match\n   some-v-v\n   (some some-v-x)\n   (_ (-> (app error \"invalid match for some-v\") <-)))\n  (env ((□? (some-v-v)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  string
  "'(eval (app error (-> \"invalid match for some-v\" <-)) (env ((□? (some-v-v)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app (-> error <-) \"invalid match for some-v\") (env ((□? (some-v-v)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval\n  (match some-v-v ((some some-v-x) (-> some-v-x <-)) _)\n  (env ((□? (some-v-v)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (match (-> some-v-v <-) (some some-v-x) _) (env ((□? (some-v-v)))))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  app
  "'(eval\n  (letrec* (some-v ... zero-player-game) (-> (app zero-player-game) <-))\n  (env ()))"
  #f
  #f)
'(clean-cache
  tic-tac-toe
  2
  15
  569
  ref-or-constructor
  "'(eval (app (-> zero-player-game <-)) (env ()))"
  #t
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
