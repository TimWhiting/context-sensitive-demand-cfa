'(clean-cache
  tic-tac-toe
  2
  5
  353
  lettypes
  "\"'(eval ((top) lettypes (cons ... player) ...) (env ()))\""
  30
  15
  7
  8
  15
  2
  17
  1
  1
  6
  #f
  22/5
  ((1 1 0) (1 1 0) (1/2 1 0)))
'(clean-cache
  tic-tac-toe
  2
  5
  353
  letrec*
  "\"'(eval\n  (lettypes cons ... player (letrec* (some-v ... zero-player-game) ...))\n  (env ()))\""
  29
  14
  7
  8
  14
  2
  16
  1
  1
  6
  #f
  31/7
  ((1 1 0) (1/2 1 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) (app make-ai-action (app X)))\n      (app player (app O) (app make-ai-action (app O))))\n     <-))\n  (env ((□? ()))))\""
  25
  10
  7
  8
  6
  2
  8
  1
  3/5
  4
  #f
  22/5
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) (app make-ai-action (app X)))\n   (-> (app player (app O) (app make-ai-action (app O))) <-))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (app player (app O) (-> (app make-ai-action (app O)) <-))\n  (env ((□? ()))))\""
  7
  4
  0
  3
  1
  0
  1
  1
  1/4
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval (app make-ai-action (-> (app O) <-)) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (app player (-> (app O) <-) (app make-ai-action (app O)))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) (app make-ai-action (app X))) <-)\n   (app player (app O) (app make-ai-action (app O))))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (app player (app X) (-> (app make-ai-action (app X)) <-))\n  (env ((□? ()))))\""
  7
  4
  0
  3
  1
  0
  1
  1
  1/4
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval (app make-ai-action (-> (app X) <-)) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (app player (-> (app X) <-) (app make-ai-action (app X)))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) human-action)\n      (app player (app O) (app make-ai-action (app O))))\n     <-))\n  (env ((□? ()))))\""
  25
  10
  7
  8
  6
  2
  8
  1
  3/5
  4
  #f
  22/5
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) human-action)\n   (-> (app player (app O) (app make-ai-action (app O))) <-))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (app player (app O) (-> (app make-ai-action (app O)) <-))\n  (env ((□? ()))))\""
  7
  4
  0
  3
  1
  0
  1
  1
  1/4
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval (app make-ai-action (-> (app O) <-)) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (app player (-> (app O) <-) (app make-ai-action (app O)))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) human-action) <-)\n   (app player (app O) (app make-ai-action (app O))))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval (app player (-> (app X) <-) human-action) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) human-action)\n      (app player (app O) human-action))\n     <-))\n  (env ((□? ()))))\""
  25
  10
  7
  8
  6
  2
  8
  1
  3/5
  4
  #f
  22/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) human-action)\n   (-> (app player (app O) human-action) <-))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval (app player (-> (app O) <-) human-action) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) human-action) <-)\n   (app player (app O) human-action))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval (app player (-> (app X) <-) human-action) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (λ (player-one player-two)\n    (-> (app play-turn empty-board player-one player-two) <-))\n  (env ((□? (player-one player-two)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval\n  (app play-turn empty-board player-one (-> player-two <-))\n  (env ((□? (player-one player-two)))))\""
  15
  7
  4
  4
  0
  1
  1
  1
  0
  6
  #f
  37/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval\n  (app play-turn empty-board (-> player-one <-) player-two)\n  (env ((□? (player-one player-two)))))\""
  15
  7
  4
  4
  0
  1
  1
  1
  0
  6
  #f
  37/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  let
  "\"'(eval\n  (λ (bo this-play that-play) (-> (let (_) ...) <-))\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  8
  5
  0
  3
  1
  0
  1
  1
  1/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  27
  19
  3
  5
  10
  1
  11
  1
  11/20
  18
  #f
  98/19
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  match
  "\"'(eval\n  (let (_) (-> (match this-play ...) <-))\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  let
  "\"'(eval\n  (match this-play ((player mark action) (-> (let (co) ...) <-)))\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  letrec
  "\"'(eval\n  (let (... () (co (-> (letrec (loop) ...) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  let
  "\"'(eval\n  (λ () (-> (let (co) ...) <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (let (... () (co (-> (app action bo) <-)) () ...) ...)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app action (-> bo <-)) (env ((□? ()) (□? (bo this-play that-play)))))\""
  28
  19
  3
  6
  10
  1
  11
  1
  11/20
  18
  #f
  98/19
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app (-> action <-) bo) (env ((□? ()) (□? (bo this-play that-play)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  match
  "\"'(eval\n  (let (co) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> co <-)))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> (app loop) <-)) _)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app blank? (-> (app board-lookup co bo) <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval\n  (app board-lookup co (-> bo <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  28
  19
  3
  6
  10
  1
  11
  1
  11/20
  18
  #f
  98/19
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (app board-lookup (-> co <-) bo)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (letrec (loop) (-> (app loop) <-))\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  let
  "\"'(eval (let (co) (-> (let (bo) ...) <-)) (env ((□? (bo this-play that-play)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co mark bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  7
  4
  0
  3
  1
  0
  1
  1
  1/4
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval\n  (app board-mark co mark (-> bo <-))\n  (env ((□? (bo this-play that-play)))))\""
  27
  19
  3
  5
  10
  1
  11
  1
  11/20
  18
  #f
  98/19
  ((5/2 5/2 0) (2 2 0) (5/2 5/2 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (app board-mark co (-> mark <-) bo)\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (app board-mark (-> co <-) mark bo)\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  match
  "\"'(eval\n  (let (bo) (-> (match (app wins? bo mark) ...) <-))\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  5
  353
  let
  "\"'(eval\n  (match (app wins? bo mark) (#f) (_ (-> (let (_) ...) <-)))\n  (env ((□? (bo this-play that-play)))))\""
  4
  3
  0
  1
  0
  0
  0
  1
  0
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  8
  5
  0
  3
  1
  0
  1
  1
  1/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  8
  5
  0
  3
  1
  0
  1
  1
  1/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval (let (_) (-> (app void) <-)) (env ((□? (bo this-play that-play)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  match
  "\"'(eval\n  (match (app wins? bo mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  5
  353
  let
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (let (_) ...) <-)))\n  (env ((□? (bo this-play that-play)))))\""
  5
  4
  0
  1
  0
  0
  0
  1
  0
  3
  #t
  19/4
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  8
  5
  0
  3
  1
  0
  1
  1
  1/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  8
  5
  0
  3
  1
  0
  1
  1
  1/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (let (_) (-> (app display \"Cat's game.\\n\") <-))\n  (env ((□? (bo this-play that-play)))))\""
  4
  3
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  14/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f) (-> (app play-turn bo that-play this-play) <-))\n   _)\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (app play-turn bo that-play (-> this-play <-))\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (app play-turn bo (-> that-play <-) this-play)\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval\n  (app play-turn (-> bo <-) that-play this-play)\n  (env ((□? (bo this-play that-play)))))\""
  8
  5
  0
  3
  1
  0
  1
  1
  1/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match (-> (app full? bo) <-) (#f) _)\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app full? (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  8
  5
  0
  3
  1
  0
  1
  1
  1/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match (-> (app wins? bo mark) <-) (#f) _)\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app wins? bo (-> mark <-)) (env ((□? (bo this-play that-play)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app wins? (-> bo <-) mark) (env ((□? (bo this-play that-play)))))\""
  8
  5
  0
  3
  1
  0
  1
  1
  1/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (match (-> this-play <-) (player mark action))\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval (λ (bo) (-> (app void) <-)) (env ((□? (bo)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (λ (bo)\n    (-> (app move-coord (app some-v (app maximin bo ma (app mark⁻¹ ma)))) <-))\n  (env ((□? (bo)) (□? (ma)))))\""
  60
  33
  10
  17
  21
  3
  24
  1
  19/31
  19
  #f
  151/33
  ((4 4 0) (4 4 0) (7/2 4 0)))
'(clean-cache
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (app move-coord (-> (app some-v (app maximin bo ma (app mark⁻¹ ma))) <-))\n  (env ((□? (bo)) (□? (ma)))))\""
  51
  28
  8
  15
  20
  2
  22
  1
  9/13
  17
  #f
  129/28
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (app some-v (-> (app maximin bo ma (app mark⁻¹ ma)) <-))\n  (env ((□? (bo)) (□? (ma)))))\""
  36
  23
  4
  9
  19
  1
  20
  1
  17/21
  15
  #f
  107/23
  ((2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval (app maximin bo ma (-> (app mark⁻¹ ma) <-)) (env ((□? (bo)) (□? (ma)))))\""
  40
  22
  6
  12
  1
  2
  3
  1
  1/16
  18
  #f
  57/11
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app mark⁻¹ (-> ma <-)) (env ((□? (bo)) (□? (ma)))))\""
  15
  7
  4
  4
  0
  1
  1
  1
  0
  6
  #f
  36/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app maximin bo (-> ma <-) (app mark⁻¹ ma)) (env ((□? (bo)) (□? (ma)))))\""
  15
  7
  4
  4
  0
  1
  1
  1
  0
  6
  #f
  36/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app maximin (-> bo <-) ma (app mark⁻¹ ma)) (env ((□? (bo)) (□? (ma)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (λ (bo) (-> (app error 'human-action \"not implemented\") <-))\n  (env ((□? (bo)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (λ (bo this-mark that-mark)\n    (-> (app fold/coord (λ (co mm) ...) (app none)) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  31
  20
  4
  7
  16
  1
  17
  1
  7/9
  13
  #f
  93/20
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (app fold/coord (λ (co mm) ...) (-> (app none) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  match
  "\"'(eval\n  (λ (co mm) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  let
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> (let (bo) ...) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co this-mark bo) <-)) () ...) ...)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  8
  4
  0
  4
  1
  0
  1
  1
  1/4
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (app board-mark co this-mark (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval\n  (app board-mark co (-> this-mark <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  45
  16
  9
  20
  0
  3
  3
  1
  0
  9
  #f
  87/16
  ((4 4 0) (4 4 0) (4 4 0)))
'(clean-cache
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval\n  (app board-mark (-> co <-) this-mark bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  13
  5
  2
  6
  1
  0
  1
  1
  1/5
  5
  #t
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (let (bo)\n    (->\n     (app max-maybe-move mm (app move co (match (app wins? bo this-mark) ...)))\n     <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (app\n   max-maybe-move\n   mm\n   (-> (app move co (match (app wins? bo this-mark) ...)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  match
  "\"'(eval\n  (app move co (-> (match (app wins? bo this-mark) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (match (app wins? bo this-mark) (#f) (_ (-> (app horizon (app win) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (app horizon (-> (app win) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  match
  "\"'(eval\n  (match (app wins? bo this-mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (app horizon (app draw) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (app horizon (-> (app draw) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f)\n    (->\n     (app\n      horizon-add1\n      (app move-horizon (app some-v (app minimax bo that-mark this-mark))))\n     <-))\n   _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (app\n   horizon-add1\n   (->\n    (app move-horizon (app some-v (app minimax bo that-mark this-mark)))\n    <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  67
  33
  15
  19
  21
  3
  24
  1
  19/31
  19
  #f
  151/33
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (app move-horizon (-> (app some-v (app minimax bo that-mark this-mark)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  51
  28
  8
  15
  20
  2
  22
  1
  9/13
  17
  #f
  129/28
  ((3 3 0) (3 7/2 0) (7/2 7/2 0)))
'(clean-cache
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (app some-v (-> (app minimax bo that-mark this-mark) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  36
  23
  4
  9
  19
  1
  20
  1
  17/21
  15
  #f
  107/23
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval\n  (app minimax bo that-mark (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  44
  15
  9
  20
  0
  3
  3
  1
  0
  9
  #f
  27/5
  ((7/2 4 0) (7/2 4 0) (7/2 4 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (app minimax bo (-> that-mark <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval\n  (app minimax (-> bo <-) that-mark this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  9
  5
  0
  4
  1
  0
  1
  1
  1/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match (-> (app full? bo) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval\n  (app full? (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  9
  5
  0
  4
  1
  0
  1
  1
  1/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match (-> (app wins? bo this-mark) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (app wins? bo (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval\n  (app wins? (-> bo <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  9
  5
  0
  4
  1
  0
  1
  1
  1/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval\n  (app move (-> co <-) (match (app wins? bo this-mark) ...))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  13
  5
  2
  6
  1
  0
  1
  1
  1/5
  5
  #t
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (app\n   max-maybe-move\n   (-> mm <-)\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> mm <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app blank? (-> (app board-lookup co bo) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (app board-lookup co (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval\n  (app board-lookup (-> co <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  13
  5
  2
  6
  1
  0
  1
  1
  1/5
  5
  #t
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (λ (bo this-mark that-mark)\n    (-> (app fold/coord (λ (co mm) ...) (app none)) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  31
  20
  4
  7
  16
  1
  17
  1
  7/9
  13
  #f
  93/20
  ((2 5/2 0) (2 2 0) (2 5/2 0)))
'(clean-cache
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (app fold/coord (λ (co mm) ...) (-> (app none) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  match
  "\"'(eval\n  (λ (co mm) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  let
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> (let (bo) ...) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co this-mark bo) <-)) () ...) ...)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  8
  4
  0
  4
  1
  0
  1
  1
  1/4
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval\n  (app board-mark co this-mark (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  14
  6
  2
  6
  1
  1
  2
  1
  1/6
  6
  #t
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (app board-mark co (-> this-mark <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval\n  (app board-mark (-> co <-) this-mark bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  13
  5
  2
  6
  1
  0
  1
  1
  1/5
  5
  #t
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (let (bo)\n    (->\n     (app min-maybe-move mm (app move co (match (app wins? bo this-mark) ...)))\n     <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (app\n   min-maybe-move\n   mm\n   (-> (app move co (match (app wins? bo this-mark) ...)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  match
  "\"'(eval\n  (app move co (-> (match (app wins? bo this-mark) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (match (app wins? bo this-mark) (#f) (_ (-> (app horizon (app lose) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (app horizon (-> (app lose) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  match
  "\"'(eval\n  (match (app wins? bo this-mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (app horizon (app draw) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (app horizon (-> (app draw) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f)\n    (->\n     (app\n      horizon-add1\n      (app move-horizon (app some-v (app maximin bo that-mark this-mark))))\n     <-))\n   _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (app\n   horizon-add1\n   (->\n    (app move-horizon (app some-v (app maximin bo that-mark this-mark)))\n    <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  67
  33
  15
  19
  21
  3
  24
  1
  19/31
  19
  #f
  151/33
  ((4 9/2 0) (4 9/2 0) (4 9/2 0)))
'(clean-cache
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (app move-horizon (-> (app some-v (app maximin bo that-mark this-mark)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  51
  28
  8
  15
  20
  2
  22
  1
  9/13
  17
  #f
  129/28
  ((3 7/2 0) (3 3 0) (3 3 0)))
'(clean-cache
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (app some-v (-> (app maximin bo that-mark this-mark) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  36
  23
  4
  9
  19
  1
  20
  1
  17/21
  15
  #f
  107/23
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (app maximin bo that-mark (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval\n  (app maximin bo (-> that-mark <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  44
  15
  9
  20
  0
  3
  3
  1
  0
  9
  #f
  27/5
  ((4 4 0) (4 4 0) (4 4 0)))
'(clean-cache
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval\n  (app maximin (-> bo <-) that-mark this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  9
  5
  0
  4
  1
  0
  1
  1
  1/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match (-> (app full? bo) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval\n  (app full? (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  9
  5
  0
  4
  1
  0
  1
  1
  1/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match (-> (app wins? bo this-mark) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (app wins? bo (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval\n  (app wins? (-> bo <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  9
  5
  0
  4
  1
  0
  1
  1
  1/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval\n  (app move (-> co <-) (match (app wins? bo this-mark) ...))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  13
  5
  2
  6
  1
  0
  1
  1
  1/5
  5
  #t
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (app\n   min-maybe-move\n   (-> mm <-)\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> mm <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app blank? (-> (app board-lookup co bo) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval\n  (app board-lookup co (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  14
  6
  2
  6
  1
  1
  2
  1
  1/6
  6
  #t
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval\n  (app board-lookup (-> co <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  13
  5
  2
  6
  1
  0
  1
  1
  1/5
  5
  #t
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  match
  "\"'(eval (λ (mmo mo₁) (-> (match mmo ...) <-)) (env ((□? (mmo mo₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (match mmo (some mo₀) ((none) (-> (app some mo₁) <-)))\n  (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app some (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  8
  3
  2
  3
  0
  1
  1
  1
  0
  3
  #t
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (match\n   mmo\n   ((some mo₀)\n    (->\n     (app\n      some\n      (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n     <-))\n   (none))\n  (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  match
  "\"'(eval\n  (app\n   some\n   (->\n    (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...)\n    <-))\n  (env ((□? (mmo mo₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   (#f)\n   (_ (-> mo₁ <-)))\n  (env ((□? (mmo mo₁)))))\""
  8
  3
  2
  3
  0
  1
  1
  1
  0
  3
  #t
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   ((#f) (-> mo₀ <-))\n   _)\n  (env ((□? (mmo mo₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match\n   (-> (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) <-)\n   (#f)\n   _)\n  (env ((□? (mmo mo₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app horizon< (app move-horizon mo₀) (-> (app move-horizon mo₁) <-))\n  (env ((□? (mmo mo₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  8
  3
  2
  3
  0
  1
  1
  1
  0
  3
  #t
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app horizon< (-> (app move-horizon mo₀) <-) (app move-horizon mo₁))\n  (env ((□? (mmo mo₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₀ <-)) (env ((□? (mmo mo₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (match (-> mmo <-) (some mo₀) (none)) (env ((□? (mmo mo₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  match
  "\"'(eval (λ (mmo mo₁) (-> (match mmo ...) <-)) (env ((□? (mmo mo₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (match mmo (some mo₀) ((none) (-> (app some mo₁) <-)))\n  (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app some (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  8
  3
  2
  3
  0
  1
  1
  1
  0
  3
  #t
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (match\n   mmo\n   ((some mo₀)\n    (->\n     (app\n      some\n      (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n     <-))\n   (none))\n  (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  match
  "\"'(eval\n  (app\n   some\n   (->\n    (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...)\n    <-))\n  (env ((□? (mmo mo₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   (#f)\n   (_ (-> mo₀ <-)))\n  (env ((□? (mmo mo₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   ((#f) (-> mo₁ <-))\n   _)\n  (env ((□? (mmo mo₁)))))\""
  8
  3
  2
  3
  0
  1
  1
  1
  0
  3
  #t
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match\n   (-> (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) <-)\n   (#f)\n   _)\n  (env ((□? (mmo mo₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app horizon< (app move-horizon mo₀) (-> (app move-horizon mo₁) <-))\n  (env ((□? (mmo mo₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  8
  3
  2
  3
  0
  1
  1
  1
  0
  3
  #t
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app horizon< (-> (app move-horizon mo₀) <-) (app move-horizon mo₁))\n  (env ((□? (mmo mo₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₀ <-)) (env ((□? (mmo mo₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (match (-> mmo <-) (some mo₀) (none)) (env ((□? (mmo mo₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval (λ (f x) (-> (app foldl (λ (r x) ...) x is) <-)) (env ((□? (f x)))))\""
  26
  17
  4
  5
  10
  1
  11
  1
  3/5
  11
  #f
  79/17
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app foldl (λ (r x) ...) x (-> is <-)) (env ((□? (f x)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app foldl (λ (r x) ...) (-> x <-) is) (env ((□? (f x)))))\""
  11
  5
  3
  3
  0
  1
  1
  1
  0
  5
  #t
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (λ (r x) (-> (app foldl (λ (c x) ...) x is) <-))\n  (env ((□? (r x)) (□? (f x)))))\""
  26
  17
  4
  5
  10
  1
  11
  1
  3/5
  11
  #f
  79/17
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app foldl (λ (c x) ...) x (-> is <-)) (env ((□? (r x)) (□? (f x)))))\""
  5
  3
  0
  2
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app foldl (λ (c x) ...) (-> x <-) is) (env ((□? (r x)) (□? (f x)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (λ (c x) (-> (app f (app coord r c) x) <-))\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (app f (app coord r c) (-> x <-))\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (app f (-> (app coord r c) <-) x)\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  5
  2
  0
  3
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  46
  30
  11
  5
  23
  5
  28
  1
  53/66
  28
  #f
  51/10
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  46
  30
  11
  5
  23
  5
  28
  1
  53/66
  28
  #f
  51/10
  ((5/2 3 0) (5/2 5/2 0) (3 3 0)))
'(clean-cache
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval\n  (app (-> f <-) (app coord r c) x)\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  11
  3
  3
  5
  0
  1
  1
  1
  0
  2
  #f
  16/3
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  match
  "\"'(eval (λ (f acc l) (-> (match l ...) <-)) (env ((□? (f acc l)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match l (nil) ((cons x xs) (-> (app foldl f (app f x acc) xs) <-)))\n  (env ((□? (f acc l)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app foldl f (app f x acc) (-> xs <-)) (env ((□? (f acc l)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval (app foldl f (-> (app f x acc) <-) xs) (env ((□? (f acc l)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app f x (-> acc <-)) (env ((□? (f acc l)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app f (-> x <-) acc) (env ((□? (f acc l)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app (-> f <-) x acc) (env ((□? (f acc l)))))\""
  20
  10
  4
  6
  3
  1
  4
  1
  3/28
  6
  #f
  27/5
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(clean-cache
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app foldl (-> f <-) (app f x acc) xs) (env ((□? (f acc l)))))\""
  19
  9
  4
  6
  3
  1
  4
  1
  1/7
  6
  #f
  16/3
  ((5/2 5/2 0) (5/2 5/2 0) (3 3 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (match l ((nil) (-> acc <-)) (cons x xs)) (env ((□? (f acc l)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (match (-> l <-) (nil) (cons x xs)) (env ((□? (f acc l)))))\""
  34
  24
  4
  6
  14
  1
  15
  1
  31/42
  15
  #f
  45/8
  ((5 5 0) (5 5 0) (5 5 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  match
  "\"'(eval (λ (h) (-> (match h ...) <-)) (env ((□? (h)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (match h ((horizon oc sc) (-> (app horizon oc (app + sc 1)) <-)))\n  (env ((□? (h)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval (app horizon oc (-> (app + sc 1) <-)) (env ((□? (h)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app + (-> sc <-) 1) (env ((□? (h)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app horizon (-> oc <-) (app + sc 1)) (env ((□? (h)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (match (-> h <-) (horizon oc sc)) (env ((□? (h)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  match
  "\"'(eval (λ (h₀ h₁) (-> (match h₀ ...) <-)) (env ((□? (h₀ h₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  match
  "\"'(eval\n  (match h₀ ((horizon oc₀ sc₀) (-> (match h₁ ...) <-)))\n  (env ((□? (h₀ h₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match\n   h₁\n   ((horizon oc₁ sc₁)\n    (->\n     (app or (app oc< oc₀ oc₁) (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n     <-)))\n  (env ((□? (h₀ h₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app\n   or\n   (app oc< oc₀ oc₁)\n   (-> (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)) <-))\n  (env ((□? (h₀ h₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app and (app equal? oc₀ oc₁) (-> (app < sc₀ sc₁) <-))\n  (env ((□? (h₀ h₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app < sc₀ (-> sc₁ <-)) (env ((□? (h₀ h₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app < (-> sc₀ <-) sc₁) (env ((□? (h₀ h₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app and (-> (app equal? oc₀ oc₁) <-) (app < sc₀ sc₁))\n  (env ((□? (h₀ h₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app equal? oc₀ (-> oc₁ <-)) (env ((□? (h₀ h₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₀ <-) oc₁) (env ((□? (h₀ h₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app\n   or\n   (-> (app oc< oc₀ oc₁) <-)\n   (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n  (env ((□? (h₀ h₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app oc< oc₀ (-> oc₁ <-)) (env ((□? (h₀ h₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app oc< (-> oc₀ <-) oc₁) (env ((□? (h₀ h₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (match (-> h₁ <-) (horizon oc₁ sc₁)) (env ((□? (h₀ h₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (match (-> h₀ <-) (horizon oc₀ sc₀)) (env ((□? (h₀ h₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  match
  "\"'(eval (λ (oc₀ oc₁) (-> (match oc₀ ...) <-)) (env ((□? (oc₀ oc₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match\n   oc₀\n   (win)\n   (draw)\n   ((lose) (-> (app not (app equal? oc₁ (app lose))) <-)))\n  (env ((□? (oc₀ oc₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval (app not (-> (app equal? oc₁ (app lose)) <-)) (env ((□? (oc₀ oc₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval (app equal? oc₁ (-> (app lose) <-)) (env ((□? (oc₀ oc₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₁ <-) (app lose)) (env ((□? (oc₀ oc₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match oc₀ (win) ((draw) (-> (app equal? oc₁ (app win)) <-)) (lose))\n  (env ((□? (oc₀ oc₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval (app equal? oc₁ (-> (app win) <-)) (env ((□? (oc₀ oc₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₁ <-) (app win)) (env ((□? (oc₀ oc₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (match oc₀ ((win) (-> (app #f) <-)) (draw) (lose))\n  (env ((□? (oc₀ oc₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (match (-> oc₀ <-) (win) (draw) (lose)) (env ((□? (oc₀ oc₁)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval (λ (b) (-> (app andmap (λ (r) ...) is) <-)) (env ((□? (b)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app andmap (λ (r) ...) (-> is <-)) (env ((□? (b)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval (λ (r) (-> (app andmap (λ (c) ...) is) <-)) (env ((□? (r)) (□? (b)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app andmap (λ (c) ...) (-> is <-)) (env ((□? (r)) (□? (b)))))\""
  5
  3
  0
  2
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (λ (c) (-> (app marked? (app b (app coord r c))) <-))\n  (env ((□? (c)) (□? (r)) (□? (b)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app marked? (-> (app b (app coord r c)) <-))\n  (env ((□? (c)) (□? (r)) (□? (b)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval (app b (-> (app coord r c) <-)) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  5
  2
  0
  3
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  53
  30
  15
  8
  23
  5
  28
  1
  53/66
  28
  #f
  51/10
  ((7/2 7/2 0) (4 4 0) (9/2 9/2 0)))
'(clean-cache
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  53
  30
  15
  8
  23
  5
  28
  1
  53/66
  28
  #f
  51/10
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app (-> b <-) (app coord r c)) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  30
  14
  4
  12
  1
  1
  2
  1
  1/12
  14
  #t
  36/7
  ((2 2 0) (3/2 2 0) (2 2 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (λ (b m)\n    (->\n     (app\n      or\n      (app ormap (λ (r) ...) is)\n      (app ormap (λ (c) ...) is)\n      (app andmap (λ (rc) ...) is)\n      (app andmap (λ (rc) ...) is))\n     <-))\n  (env ((□? (b m)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (-> (app andmap (λ (rc) ...) is) <-))\n  (env ((□? (b m)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app andmap (λ (rc) ...) (-> is <-)) (env ((□? (b m)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (λ (rc) (-> (app marked-with? b (app coord rc (app i⁻¹ rc)) m) <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord rc (app i⁻¹ rc)) (-> m <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord rc (app i⁻¹ rc)) <-) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval (app coord rc (-> (app i⁻¹ rc) <-)) (env ((□? (rc)) (□? (b m)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app i⁻¹ (-> rc <-)) (env ((□? (rc)) (□? (b m)))))\""
  53
  30
  15
  8
  23
  5
  28
  1
  53/66
  28
  #f
  51/10
  ((3 3 0) (3 3 0) (7/2 7/2 0)))
'(clean-cache
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app coord (-> rc <-) (app i⁻¹ rc)) (env ((□? (rc)) (□? (b m)))))\""
  53
  30
  15
  8
  23
  5
  28
  1
  53/66
  28
  #f
  51/10
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord rc (app i⁻¹ rc)) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  29
  14
  4
  11
  1
  1
  2
  1
  1/12
  14
  #t
  36/7
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (-> (app andmap (λ (rc) ...) is) <-)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app andmap (λ (rc) ...) (-> is <-)) (env ((□? (b m)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (λ (rc) (-> (app marked-with? b (app coord rc rc) m) <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord rc rc) (-> m <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord rc rc) <-) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app coord rc (-> rc <-)) (env ((□? (rc)) (□? (b m)))))\""
  53
  30
  15
  8
  23
  5
  28
  1
  53/66
  28
  #f
  51/10
  ((7/2 7/2 0) (3 3 0) (3 3 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app coord (-> rc <-) rc) (env ((□? (rc)) (□? (b m)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord rc rc) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  29
  14
  4
  11
  1
  1
  2
  1
  1/12
  14
  #t
  36/7
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (-> (app ormap (λ (c) ...) is) <-)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app ormap (λ (c) ...) (-> is <-)) (env ((□? (b m)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval (λ (c) (-> (app andmap (λ (r) ...) is) <-)) (env ((□? (c)) (□? (b m)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app andmap (λ (r) ...) (-> is <-)) (env ((□? (c)) (□? (b m)))))\""
  5
  3
  0
  2
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (λ (r) (-> (app marked-with? b (app coord r c) m) <-))\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord r c) (-> m <-))\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord r c) <-) m)\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  5
  2
  0
  3
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  46
  30
  11
  5
  23
  5
  28
  1
  53/66
  28
  #f
  51/10
  ((3 3 0) (3 3 0) (5/2 5/2 0)))
'(clean-cache
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  53
  30
  15
  8
  23
  5
  28
  1
  53/66
  28
  #f
  51/10
  ((7/2 7/2 0) (7/2 4 0) (7/2 7/2 0)))
'(clean-cache
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord r c) m)\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  30
  14
  4
  12
  1
  1
  2
  1
  1/12
  14
  #t
  36/7
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app\n   or\n   (-> (app ormap (λ (r) ...) is) <-)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app ormap (λ (r) ...) (-> is <-)) (env ((□? (b m)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval (λ (r) (-> (app andmap (λ (c) ...) is) <-)) (env ((□? (r)) (□? (b m)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app andmap (λ (c) ...) (-> is <-)) (env ((□? (r)) (□? (b m)))))\""
  5
  3
  0
  2
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (λ (c) (-> (app marked-with? b (app coord r c) m) <-))\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord r c) (-> m <-))\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord r c) <-) m)\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  5
  2
  0
  3
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  53
  30
  15
  8
  23
  5
  28
  1
  53/66
  28
  #f
  51/10
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(clean-cache
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  46
  30
  11
  5
  23
  5
  28
  1
  53/66
  28
  #f
  51/10
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord r c) m)\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  30
  14
  4
  12
  1
  1
  2
  1
  1/12
  14
  #t
  36/7
  ((2 2 0) (3/2 3/2 0) (2 2 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  match
  "\"'(eval (λ (f xs) (-> (match xs ...) <-)) (env ((□? (f xs)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match\n   xs\n   (nil)\n   ((cons x rest-xs) (-> (app and (app f x) (app andmap f rest-xs)) <-)))\n  (env ((□? (f xs)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval (app and (app f x) (-> (app andmap f rest-xs) <-)) (env ((□? (f xs)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app andmap f (-> rest-xs <-)) (env ((□? (f xs)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app andmap (-> f <-) rest-xs) (env ((□? (f xs)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval (app and (-> (app f x) <-) (app andmap f rest-xs)) (env ((□? (f xs)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app f (-> x <-)) (env ((□? (f xs)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app (-> f <-) x) (env ((□? (f xs)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (match xs ((nil) (-> (app #t) <-)) (cons x rest-xs))\n  (env ((□? (f xs)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (match (-> xs <-) (nil) (cons x rest-xs)) (env ((□? (f xs)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  match
  "\"'(eval (λ (f xs) (-> (match xs ...) <-)) (env ((□? (f xs)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match\n   xs\n   (nil)\n   ((cons x rest-xs) (-> (app or (app f x) (app ormap f rest-xs)) <-)))\n  (env ((□? (f xs)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval (app or (app f x) (-> (app ormap f rest-xs) <-)) (env ((□? (f xs)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app ormap f (-> rest-xs <-)) (env ((□? (f xs)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app ormap (-> f <-) rest-xs) (env ((□? (f xs)))))\""
  18
  9
  4
  5
  3
  1
  4
  1
  1/7
  6
  #f
  16/3
  ((3 3 0) (5/2 3 0) (5/2 5/2 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval (app or (-> (app f x) <-) (app ormap f rest-xs)) (env ((□? (f xs)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app f (-> x <-)) (env ((□? (f xs)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app (-> f <-) x) (env ((□? (f xs)))))\""
  19
  10
  4
  5
  3
  1
  4
  1
  3/28
  6
  #f
  27/5
  ((3 7/2 0) (7/2 7/2 0) (4 4 0)))
'(clean-cache
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (match xs ((nil) (-> (app #f) <-)) (cons x rest-xs))\n  (env ((□? (f xs)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (match (-> xs <-) (nil) (cons x rest-xs)) (env ((□? (f xs)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  match
  "\"'(eval (λ (i) (-> (match i ...) <-)) (env ((□? (i)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval (match i (Ze) (On) ((Tw) (-> (app Ze) <-))) (env ((□? (i)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval (match i (Ze) ((On) (-> (app On) <-)) (Tw)) (env ((□? (i)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval (match i ((Ze) (-> (app Tw) <-)) (On) (Tw)) (env ((□? (i)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (match (-> i <-) (Ze) (On) (Tw)) (env ((□? (i)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  match
  "\"'(eval (λ (b co m) (-> (match (app b co) ...) <-)) (env ((□? (b co m)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match (app b co) (blank) ((marked m*) (-> (app equal? m m*) <-)))\n  (env ((□? (b co m)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app equal? m (-> m* <-)) (env ((□? (b co m)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app equal? (-> m <-) m*) (env ((□? (b co m)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (match (app b co) ((blank) (-> (app #f) <-)) (marked m*))\n  (env ((□? (b co m)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval (match (-> (app b co) <-) (blank) (marked m*)) (env ((□? (b co m)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app b (-> co <-)) (env ((□? (b co m)))))\""
  22
  9
  5
  8
  0
  1
  1
  1
  0
  8
  #f
  16/3
  ((5/2 3 0) (5/2 5/2 0) (3 7/2 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app (-> b <-) co) (env ((□? (b co m)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval (λ (co bo) (-> (app bo co) <-)) (env ((□? (co bo)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app bo (-> co <-)) (env ((□? (co bo)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app (-> bo <-) co) (env ((□? (co bo)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  match
  "\"'(eval\n  (λ (co) (-> (match (app equal? co₀ co) ...) <-))\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (match (app equal? co₀ co) (#f) (_ (-> (app marked ma) <-)))\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app marked (-> ma <-)) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match (app equal? co₀ co) ((#f) (-> (app board-lookup co bo) <-)) _)\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app board-lookup co (-> bo <-)) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app board-lookup (-> co <-) bo) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match (-> (app equal? co₀ co) <-) (#f) _)\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app equal? co₀ (-> co <-)) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app equal? (-> co₀ <-) co) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval (λ (co) (-> (app blank) <-)) (env ((□? (co)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  5
  353
  match
  "\"'(eval (λ (ma) (-> (match ma ...) <-)) (env ((□? (ma)))))\""
  37
  19
  6
  12
  0
  2
  2
  1
  0
  15
  #f
  99/19
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval (match ma (X) ((O) (-> (app X) <-))) (env ((□? (ma)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval (match ma ((X) (-> (app O) <-)) (O)) (env ((□? (ma)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (match (-> ma <-) (X) (O)) (env ((□? (ma)))))\""
  28
  11
  6
  11
  0
  2
  2
  1
  0
  9
  #f
  57/11
  ((3/2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (letrec*\n   (...\n    move-horizon\n    (is\n     (->\n      (app cons (app Ze) (app cons (app On) (app cons (app Tw) (app nil))))\n      <-))\n    mark⁻¹\n    ...)\n   ...)\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (app cons (app Ze) (-> (app cons (app On) (app cons (app Tw) (app nil))) <-))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval (app cons (app On) (-> (app cons (app Tw) (app nil)) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval (app cons (app Tw) (-> (app nil) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval (app cons (-> (app Tw) <-) (app nil)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval (app cons (-> (app On) <-) (app cons (app Tw) (app nil))) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (app cons (-> (app Ze) <-) (app cons (app On) (app cons (app Tw) (app nil))))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  match
  "\"'(eval\n  (λ (move-horizon-v) (-> (match move-horizon-v ...) <-))\n  (env ((□? (move-horizon-v)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (match\n   move-horizon-v\n   (move _ move-horizon-x)\n   (_ (-> (app error \"invalid match for move-horizon\") <-)))\n  (env ((□? (move-horizon-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (match move-horizon-v ((move _ move-horizon-x) (-> move-horizon-x <-)) _)\n  (env ((□? (move-horizon-v)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (match (-> move-horizon-v <-) (move _ move-horizon-x) _)\n  (env ((□? (move-horizon-v)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  5
  353
  match
  "\"'(eval\n  (λ (move-coord-v) (-> (match move-coord-v ...) <-))\n  (env ((□? (move-coord-v)))))\""
  58
  31
  10
  17
  20
  3
  23
  1
  9/14
  17
  #f
  141/31
  ((5 5 0) (4 4 0) (4 4 0)))
'(clean-cache
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (match\n   move-coord-v\n   (move move-coord-x _)\n   (_ (-> (app error \"invalid match for move-coord\") <-)))\n  (env ((□? (move-coord-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval\n  (match move-coord-v ((move move-coord-x _) (-> move-coord-x <-)) _)\n  (env ((□? (move-coord-v)))))\""
  58
  31
  10
  17
  20
  3
  23
  1
  9/14
  17
  #f
  141/31
  ((4 4 0) (4 4 0) (4 4 0)))
'(clean-cache
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval\n  (match (-> move-coord-v <-) (move move-coord-x _) _)\n  (env ((□? (move-coord-v)))))\""
  55
  29
  10
  16
  20
  3
  23
  1
  2/3
  17
  #f
  133/29
  ((4 4 0) (4 4 0) (4 4 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  match
  "\"'(eval (λ (a) (-> (match a ...) <-)) (env ((□? (a)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval (match a (blank) (_ (-> (app #f) <-))) (env ((□? (a)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval (match a ((blank) (-> (app #t) <-)) _) (env ((□? (a)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (match (-> a <-) (blank) _) (env ((□? (a)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  match
  "\"'(eval (λ (a) (-> (match a ...) <-)) (env ((□? (a)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval (match a (marked _) (_ (-> (app #f) <-))) (env ((□? (a)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval (match a ((marked _) (-> (app #t) <-)) _) (env ((□? (a)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (match (-> a <-) (marked _) _) (env ((□? (a)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  match
  "\"'(eval (λ (some-v-v) (-> (match some-v-v ...) <-)) (env ((□? (some-v-v)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (match\n   some-v-v\n   (some some-v-x)\n   (_ (-> (app error \"invalid match for some-v\") <-)))\n  (env ((□? (some-v-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (match some-v-v ((some some-v-x) (-> some-v-x <-)) _)\n  (env ((□? (some-v-v)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (match (-> some-v-v <-) (some some-v-x) _) (env ((□? (some-v-v)))))\""
  #f)
'(clean-cache
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (letrec* (some-v ... zero-player-game) (-> (app zero-player-game) <-))\n  (env ()))\""
  28
  13
  7
  8
  13
  2
  15
  1
  1
  6
  #f
  58/13
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (app cons (-> (app Ze) <-) (app cons (app On) (app cons (app Tw) (app nil))))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval (app foldl f (-> (app f x acc) <-) xs) (env ((□? (f acc l)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  lettypes
  "\"'(eval ((top) lettypes (cons ... player) ...) (env ()))\""
  30
  15
  7
  8
  15
  2
  17
  1
  1
  6
  #f
  22/5
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app horizon< (-> (app move-horizon mo₀) <-) (app move-horizon mo₁))\n  (env ((□? (mmo mo₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app ormap f (-> rest-xs <-)) (env ((□? (f xs)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval\n  (app move (-> co <-) (match (app wins? bo this-mark) ...))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  13
  5
  2
  6
  1
  0
  1
  1
  1/5
  5
  #t
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord r c) m)\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  51
  27
  6
  18
  4
  1
  5
  1
  12/85
  27
  #t
  47/9
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval (app make-ai-action (-> (app X) <-)) (env ((□? ()))))\""
  54
  29
  6
  19
  4
  1
  5
  1
  12/95
  29
  #t
  151/29
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app andmap (-> f <-) rest-xs) (env ((□? (f xs)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (app board-mark co this-mark (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app action (-> bo <-)) (env ((□? ()) (□? (bo this-play that-play)))))\""
  28
  19
  3
  6
  10
  1
  11
  1
  11/20
  18
  #f
  98/19
  ((2 5/2 0) (2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app andmap (λ (rc) ...) (-> is <-)) (env ((□? (b m)))))\""
  32
  22
  3
  7
  12
  1
  13
  1
  32/55
  21
  #t
  113/22
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app ormap (λ (c) ...) (-> is <-)) (env ((□? (b m)))))\""
  33
  23
  3
  7
  12
  1
  13
  1
  8/15
  22
  #t
  118/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  77
  51
  14
  12
  33
  6
  39
  1
  331/480
  48
  #f
  87/17
  ((5/2 5/2 0) (5/2 3 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  78
  52
  14
  12
  33
  6
  39
  1
  331/495
  49
  #t
  267/52
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  109
  68
  25
  16
  42
  11
  53
  1
  386/615
  63
  #f
  175/34
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₁ <-) (app win)) (env ((□? (oc₀ oc₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (let (_) (-> (app display \"Cat's game.\\n\") <-))\n  (env ((□? (bo this-play that-play)))))\""
  4
  3
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  14/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (-> (app ormap (λ (c) ...) is) <-)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (match xs ((nil) (-> (app #f) <-)) (cons x rest-xs))\n  (env ((□? (f xs)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval (match a ((marked _) (-> (app #t) <-)) _) (env ((□? (a)))))\""
  6
  4
  0
  2
  0
  0
  0
  1
  0
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval (app cons (app On) (-> (app cons (app Tw) (app nil)) <-)) (env ()))\""
  8
  6
  0
  2
  2
  0
  2
  1
  1/3
  6
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (app player (-> (app O) <-) (app make-ai-action (app O)))\n  (env ((□? ()))))\""
  11
  8
  0
  3
  2
  0
  2
  1
  1/4
  8
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (match (-> l <-) (nil) (cons x xs)) (env ((□? (f acc l)))))\""
  43
  30
  4
  9
  14
  1
  15
  1
  31/63
  21
  #f
  11/2
  ((9/2 5 0) (5 5 0) (5 5 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app wins? (-> bo <-) mark) (env ((□? (bo this-play that-play)))))\""
  51
  35
  4
  12
  15
  1
  16
  1
  3/7
  26
  #t
  38/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  match
  "\"'(eval (λ (some-v-v) (-> (match some-v-v ...) <-)) (env ((□? (some-v-v)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  match
  "\"'(eval\n  (λ (move-horizon-v) (-> (match move-horizon-v ...) <-))\n  (env ((□? (move-horizon-v)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (match (app equal? co₀ co) (#f) (_ (-> (app marked ma) <-)))\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval\n  (app maximin bo (-> that-mark <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  48
  17
  9
  22
  0
  3
  3
  1
  0
  11
  #f
  91/17
  ((4 4 0) (4 4 0) (4 4 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app oc< (-> oc₀ <-) oc₁) (env ((□? (h₀ h₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f)\n    (->\n     (app\n      horizon-add1\n      (app move-horizon (app some-v (app maximin bo that-mark this-mark))))\n     <-))\n   _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (λ (r) (-> (app marked-with? b (app coord r c) m) <-))\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (app player (app O) (-> (app make-ai-action (app O)) <-))\n  (env ((□? ()))))\""
  7
  4
  0
  3
  1
  0
  1
  1
  1/4
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> co <-)))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match (app equal? co₀ co) ((#f) (-> (app board-lookup co bo) <-)) _)\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (app\n   horizon-add1\n   (->\n    (app move-horizon (app some-v (app maximin bo that-mark this-mark)))\n    <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  67
  33
  15
  19
  21
  3
  24
  1
  19/31
  19
  #f
  151/33
  ((4 4 0) (4 9/2 0) (4 9/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (match (-> some-v-v <-) (some some-v-x) _) (env ((□? (some-v-v)))))\""
  90
  52
  15
  23
  31
  3
  34
  1
  10/19
  29
  #f
  237/52
  ((3 3 0) (3 3 0) (5/2 3 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  match
  "\"'(eval (λ (f xs) (-> (match xs ...) <-)) (env ((□? (f xs)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app horizon< (app move-horizon mo₀) (-> (app move-horizon mo₁) <-))\n  (env ((□? (mmo mo₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval (λ (f x) (-> (app foldl (λ (r x) ...) x is) <-)) (env ((□? (f x)))))\""
  26
  17
  4
  5
  10
  1
  11
  1
  3/5
  11
  #f
  79/17
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval\n  (app wins? (-> bo <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  35
  22
  4
  9
  11
  1
  12
  1
  1/2
  16
  #t
  52/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app f x (-> acc <-)) (env ((□? (f acc l)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₀ <-)) (env ((□? (mmo mo₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (app board-lookup co (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval (match a ((blank) (-> (app #t) <-)) _) (env ((□? (a)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f)\n    (->\n     (app\n      horizon-add1\n      (app move-horizon (app some-v (app minimax bo that-mark this-mark))))\n     <-))\n   _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (λ (b m)\n    (->\n     (app\n      or\n      (app ormap (λ (r) ...) is)\n      (app ormap (λ (c) ...) is)\n      (app andmap (λ (rc) ...) is)\n      (app andmap (λ (rc) ...) is))\n     <-))\n  (env ((□? (b m)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  46
  30
  11
  5
  23
  5
  28
  1
  53/66
  28
  #f
  51/10
  ((7/2 7/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (app move-horizon (-> (app some-v (app maximin bo that-mark this-mark)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  91
  52
  19
  20
  37
  7
  44
  1
  89/126
  39
  #f
  63/13
  ((3 3 0) (3 7/2 0) (3 3 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (λ (r x) (-> (app foldl (λ (c x) ...) x is) <-))\n  (env ((□? (r x)) (□? (f x)))))\""
  102
  62
  19
  21
  40
  7
  47
  1
  169/270
  43
  #f
  148/31
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (app play-turn bo (-> that-play <-) this-play)\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval (λ (r) (-> (app andmap (λ (c) ...) is) <-)) (env ((□? (r)) (□? (b m)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  match
  "\"'(eval (λ (ma) (-> (match ma ...) <-)) (env ((□? (ma)))))\""
  37
  19
  6
  12
  0
  2
  2
  1
  0
  15
  #f
  99/19
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app some (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  45
  22
  8
  15
  0
  3
  3
  1
  0
  18
  #t
  57/11
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (λ (c x) (-> (app f (app coord r c) x) <-))\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord r c) <-) m)\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  5
  2
  0
  3
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  match
  "\"'(eval\n  (match h₀ ((horizon oc₀ sc₀) (-> (match h₁ ...) <-)))\n  (env ((□? (h₀ h₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app bo (-> co <-)) (env ((□? (co bo)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval\n  (app play-turn (-> bo <-) that-play this-play)\n  (env ((□? (bo this-play that-play)))))\""
  8
  5
  0
  3
  1
  0
  1
  1
  1/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app and (-> (app equal? oc₀ oc₁) <-) (app < sc₀ sc₁))\n  (env ((□? (h₀ h₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app equal? co₀ (-> co <-)) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app and (app equal? oc₀ oc₁) (-> (app < sc₀ sc₁) <-))\n  (env ((□? (h₀ h₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app ormap (-> f <-) rest-xs) (env ((□? (f xs)))))\""
  18
  9
  4
  5
  3
  1
  4
  1
  1/7
  6
  #f
  16/3
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app horizon< (app move-horizon mo₀) (-> (app move-horizon mo₁) <-))\n  (env ((□? (mmo mo₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (λ (c) (-> (app marked-with? b (app coord r c) m) <-))\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  match
  "\"'(eval (λ (a) (-> (match a ...) <-)) (env ((□? (a)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  match
  "\"'(eval (λ (h₀ h₁) (-> (match h₀ ...) <-)) (env ((□? (h₀ h₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  53
  30
  15
  8
  23
  5
  28
  1
  53/66
  28
  #f
  51/10
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  match
  "\"'(eval (λ (f acc l) (-> (match l ...) <-)) (env ((□? (f acc l)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app horizon (-> oc <-) (app + sc 1)) (env ((□? (h)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app foldl (λ (c x) ...) (-> x <-) is) (env ((□? (r x)) (□? (f x)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (match (-> oc₀ <-) (win) (draw) (lose)) (env ((□? (oc₀ oc₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match (-> (app wins? bo mark) <-) (#f) _)\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) human-action) <-)\n   (app player (app O) (app make-ai-action (app O))))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (app\n   horizon-add1\n   (->\n    (app move-horizon (app some-v (app minimax bo that-mark this-mark)))\n    <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  70
  35
  15
  20
  21
  3
  24
  1
  19/33
  21
  #f
  23/5
  ((4 9/2 0) (4 4 0) (4 4 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app board-lookup co (-> bo <-)) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  8
  3
  2
  3
  0
  1
  1
  1
  0
  3
  #t
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  16
  6
  4
  6
  0
  2
  2
  1
  0
  6
  #t
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  match
  "\"'(eval (λ (mmo mo₁) (-> (match mmo ...) <-)) (env ((□? (mmo mo₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app + (-> sc <-) 1) (env ((□? (h)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord rc (app i⁻¹ rc)) (-> m <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (letrec (loop) (-> (app loop) <-))\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (letrec* (some-v ... zero-player-game) (-> (app zero-player-game) <-))\n  (env ()))\""
  28
  13
  7
  8
  13
  2
  15
  1
  1
  6
  #f
  58/13
  ((1/2 1/2 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (app fold/coord (λ (co mm) ...) (-> (app none) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  31
  15
  7
  9
  13
  2
  15
  1
  13/15
  8
  #t
  68/15
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval (app player (-> (app O) <-) human-action) (env ((□? ()))))\""
  33
  17
  7
  9
  13
  2
  15
  1
  13/17
  10
  #t
  78/17
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (app some-v (-> (app maximin bo that-mark this-mark) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  69
  40
  11
  18
  32
  3
  35
  1
  15/19
  25
  #f
  37/8
  ((3 3 0) (5/2 5/2 0) (5/2 3 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> mm <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  match
  "\"'(eval\n  (λ (co mm) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (app f (-> (app coord r c) <-) x)\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  5
  2
  0
  3
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app full? (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  13
  7
  0
  6
  1
  0
  1
  1
  1/7
  7
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app (-> b <-) co) (env ((□? (b co m)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval (app cons (-> (app Tw) <-) (app nil)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₁ <-) (app lose)) (env ((□? (oc₀ oc₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (app play-turn bo that-play (-> this-play <-))\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (app\n   max-maybe-move\n   mm\n   (-> (app move co (match (app wins? bo this-mark) ...)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app b (-> co <-)) (env ((□? (b co m)))))\""
  26
  11
  5
  10
  0
  1
  1
  1
  0
  10
  #f
  58/11
  ((3/2 3/2 0) (3/2 3/2 0) (2 2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval (app make-ai-action (-> (app O) <-)) (env ((□? ()))))\""
  29
  13
  5
  11
  0
  1
  1
  1
  0
  12
  #t
  68/13
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (λ (rc) (-> (app marked-with? b (app coord rc rc) m) <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval (app horizon oc (-> (app + sc 1) <-)) (env ((□? (h)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (app horizon (-> (app draw) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (app player (app O) (-> (app make-ai-action (app O)) <-))\n  (env ((□? ()))))\""
  11
  6
  0
  5
  1
  0
  1
  1
  1/6
  6
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval\n  (app minimax (-> bo <-) that-mark this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  18
  11
  0
  7
  2
  0
  2
  1
  2/11
  11
  #t
  5
  ((1/2 1/2 0) (0 0 0) (0 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval\n  (app board-lookup (-> co <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  34
  20
  2
  12
  4
  0
  4
  1
  7/32
  20
  #t
  51/10
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app (-> f <-) x) (env ((□? (f xs)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> (app loop) <-)) _)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match (-> (app full? bo) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) human-action)\n      (app player (app O) (app make-ai-action (app O))))\n     <-))\n  (env ((□? ()))))\""
  25
  10
  7
  8
  6
  2
  8
  1
  3/5
  4
  #f
  22/5
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (app move-horizon (-> (app some-v (app minimax bo that-mark this-mark)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  51
  28
  8
  15
  20
  2
  22
  1
  9/13
  17
  #f
  129/28
  ((3 3 0) (7/2 4 0) (3 3 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (λ (bo) (-> (app error 'human-action \"not implemented\") <-))\n  (env ((□? (bo)))))\""
  54
  30
  8
  16
  20
  2
  22
  1
  9/14
  19
  #t
  139/30
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  match
  "\"'(eval\n  (λ (co) (-> (match (app equal? co₀ co) ...) <-))\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app blank? (-> (app board-lookup co bo) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval\n  (app board-mark co (-> this-mark <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  45
  16
  9
  20
  0
  3
  3
  1
  0
  9
  #f
  87/16
  ((4 4 0) (4 4 0) (4 4 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (match oc₀ ((win) (-> (app #f) <-)) (draw) (lose))\n  (env ((□? (oc₀ oc₁)))))\""
  48
  18
  9
  21
  0
  3
  3
  1
  0
  11
  #t
  97/18
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match (-> (app equal? co₀ co) <-) (#f) _)\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) human-action) <-)\n   (app player (app O) human-action))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (match (app wins? bo this-mark) (#f) (_ (-> (app horizon (app win) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  7
  4
  0
  3
  0
  0
  0
  1
  0
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co mark bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  14
  8
  0
  6
  1
  0
  1
  1
  1/8
  8
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  match
  "\"'(eval\n  (let (co) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval (app or (-> (app f x) <-) (app ormap f rest-xs)) (env ((□? (f xs)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match (-> (app wins? bo this-mark) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval (match i (Ze) (On) ((Tw) (-> (app Ze) <-))) (env ((□? (i)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app equal? (-> m <-) m*) (env ((□? (b co m)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app andmap (λ (c) ...) (-> is <-)) (env ((□? (r)) (□? (b)))))\""
  5
  3
  0
  2
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app (-> bo <-) co) (env ((□? (co bo)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  match
  "\"'(eval (λ (a) (-> (match a ...) <-)) (env ((□? (a)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  match
  "\"'(eval (λ (h) (-> (match h ...) <-)) (env ((□? (h)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match (-> (app full? bo) <-) (#f) _)\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app ormap (λ (r) ...) (-> is <-)) (env ((□? (b m)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (match xs ((nil) (-> (app #t) <-)) (cons x rest-xs))\n  (env ((□? (f xs)))))\""
  7
  5
  0
  2
  2
  0
  2
  1
  2/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   ((#f) (-> mo₀ <-))\n   _)\n  (env ((□? (mmo mo₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord r c) (-> m <-))\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match\n   (-> (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) <-)\n   (#f)\n   _)\n  (env ((□? (mmo mo₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval (match i (Ze) ((On) (-> (app On) <-)) (Tw)) (env ((□? (i)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  56
  32
  15
  9
  23
  5
  28
  1
  53/72
  30
  #f
  163/32
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (app some-v (-> (app maximin bo ma (app mark⁻¹ ma)) <-))\n  (env ((□? (bo)) (□? (ma)))))\""
  86
  49
  19
  18
  36
  6
  42
  1
  86/117
  39
  #f
  240/49
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app andmap (λ (r) ...) (-> is <-)) (env ((□? (b)))))\""
  87
  50
  19
  18
  36
  6
  42
  1
  43/60
  40
  #t
  49/10
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval (match a (marked _) (_ (-> (app #f) <-))) (env ((□? (a)))))\""
  90
  52
  19
  19
  36
  6
  42
  1
  43/63
  42
  #t
  255/52
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₀ <-) oc₁) (env ((□? (h₀ h₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match\n   oc₀\n   (win)\n   (draw)\n   ((lose) (-> (app not (app equal? oc₁ (app lose))) <-)))\n  (env ((□? (oc₀ oc₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  let
  "\"'(eval\n  (match (app wins? bo mark) (#f) (_ (-> (let (_) ...) <-)))\n  (env ((□? (bo this-play that-play)))))\""
  4
  3
  0
  1
  0
  0
  0
  1
  0
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app f (-> x <-) acc) (env ((□? (f acc l)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval (app and (-> (app f x) <-) (app andmap f rest-xs)) (env ((□? (f xs)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (match\n   some-v-v\n   (some some-v-x)\n   (_ (-> (app error \"invalid match for some-v\") <-)))\n  (env ((□? (some-v-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app blank? (-> (app board-lookup co bo) <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (app\n   min-maybe-move\n   (-> mm <-)\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (match (-> ma <-) (X) (O)) (env ((□? (ma)))))\""
  28
  11
  6
  11
  0
  2
  2
  1
  0
  9
  #f
  57/11
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (app player (-> (app X) <-) (app make-ai-action (app X)))\n  (env ((□? ()))))\""
  30
  13
  6
  11
  0
  2
  2
  1
  0
  11
  #t
  67/13
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app\n   or\n   (-> (app ormap (λ (r) ...) is) <-)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (match (-> mmo <-) (some mo₀) (none)) (env ((□? (mmo mo₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (λ (bo this-mark that-mark)\n    (-> (app fold/coord (λ (co mm) ...) (app none)) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  31
  20
  4
  7
  16
  1
  17
  1
  7/9
  13
  #f
  93/20
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval (app equal? oc₁ (-> (app lose) <-)) (env ((□? (oc₀ oc₁)))))\""
  34
  22
  4
  8
  16
  1
  17
  1
  7/10
  15
  #t
  103/22
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (match\n   move-horizon-v\n   (move _ move-horizon-x)\n   (_ (-> (app error \"invalid match for move-horizon\") <-)))\n  (env ((□? (move-horizon-v)))))\""
  37
  24
  4
  9
  16
  1
  17
  1
  7/11
  17
  #t
  113/24
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (app\n   min-maybe-move\n   mm\n   (-> (app move co (match (app wins? bo this-mark) ...)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  41
  26
  4
  11
  16
  1
  17
  1
  7/12
  19
  #t
  123/26
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app equal? oc₀ (-> oc₁ <-)) (env ((□? (h₀ h₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (app player (-> (app O) <-) (app make-ai-action (app O)))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (match (-> h₁ <-) (horizon oc₁ sc₁)) (env ((□? (h₀ h₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  let
  "\"'(eval\n  (match this-play ((player mark action) (-> (let (co) ...) <-)))\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (app horizon (-> (app win) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  57
  32
  15
  10
  23
  5
  28
  1
  53/72
  30
  #f
  163/32
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval (app b (-> (app coord r c) <-)) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  63
  36
  15
  12
  23
  5
  28
  1
  53/78
  34
  #t
  185/36
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval (app cons (app Tw) (-> (app nil) <-)) (env ()))\""
  63
  36
  15
  12
  23
  5
  28
  1
  53/78
  34
  #t
  185/36
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (app f (app coord r c) (-> x <-))\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app f (-> x <-)) (env ((□? (f xs)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  let
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (let (_) ...) <-)))\n  (env ((□? (bo this-play that-play)))))\""
  5
  4
  0
  1
  0
  0
  0
  1
  0
  3
  #t
  19/4
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) (app make-ai-action (app X)))\n      (app player (app O) (app make-ai-action (app O))))\n     <-))\n  (env ((□? ()))))\""
  29
  14
  7
  8
  6
  2
  8
  1
  3/7
  7
  #f
  9/2
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  match
  "\"'(eval (λ (b co m) (-> (match (app b co) ...) <-)) (env ((□? (b co m)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord rc rc) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  29
  14
  4
  11
  1
  1
  2
  1
  1/12
  14
  #t
  36/7
  ((3/2 3/2 0) (3/2 3/2 0) (2 2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (app horizon (app draw) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  31
  16
  4
  11
  1
  1
  2
  1
  1/14
  16
  #t
  41/8
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app maximin bo (-> ma <-) (app mark⁻¹ ma)) (env ((□? (bo)) (□? (ma)))))\""
  46
  23
  8
  15
  1
  2
  3
  1
  1/21
  22
  #f
  118/23
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app coord (-> rc <-) rc) (env ((□? (rc)) (□? (b m)))))\""
  53
  30
  15
  8
  23
  5
  28
  1
  53/66
  28
  #f
  51/10
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (app maximin bo that-mark (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match (-> (app wins? bo this-mark) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  match
  "\"'(eval\n  (app\n   some\n   (->\n    (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...)\n    <-))\n  (env ((□? (mmo mo₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app\n   or\n   (-> (app oc< oc₀ oc₁) <-)\n   (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n  (env ((□? (h₀ h₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  27
  19
  3
  5
  10
  1
  11
  1
  11/20
  18
  #f
  98/19
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app andmap f (-> rest-xs <-)) (env ((□? (f xs)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  8
  5
  0
  3
  1
  0
  1
  1
  1/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (match (-> move-horizon-v <-) (move _ move-horizon-x) _)\n  (env ((□? (move-horizon-v)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match\n   (-> (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) <-)\n   (#f)\n   _)\n  (env ((□? (mmo mo₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) human-action)\n   (-> (app player (app O) (app make-ai-action (app O))) <-))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app coord (-> rc <-) (app i⁻¹ rc)) (env ((□? (rc)) (□? (b m)))))\""
  56
  32
  15
  9
  23
  5
  28
  1
  53/72
  30
  #f
  163/32
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> mm <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval (λ (r) (-> (app andmap (λ (c) ...) is) <-)) (env ((□? (r)) (□? (b)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (λ (c) (-> (app marked? (app b (app coord r c))) <-))\n  (env ((□? (c)) (□? (r)) (□? (b)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval\n  (app board-lookup co (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  14
  6
  2
  6
  1
  1
  2
  1
  1/6
  6
  #t
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval\n  (match (-> move-coord-v <-) (move move-coord-x _) _)\n  (env ((□? (move-coord-v)))))\""
  65
  35
  12
  18
  21
  4
  25
  1
  19/33
  23
  #f
  163/35
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app (-> f <-) x acc) (env ((□? (f acc l)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord rc rc) <-) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (match (-> h <-) (horizon oc sc)) (env ((□? (h)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (app cons (app Ze) (-> (app cons (app On) (app cons (app Tw) (app nil))) <-))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval (app not (-> (app equal? oc₁ (app lose)) <-)) (env ((□? (oc₀ oc₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  match
  "\"'(eval (λ (i) (-> (match i ...) <-)) (env ((□? (i)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app andmap (λ (r) ...) (-> is <-)) (env ((□? (c)) (□? (b m)))))\""
  5
  3
  0
  2
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (match move-horizon-v ((move _ move-horizon-x) (-> move-horizon-x <-)) _)\n  (env ((□? (move-horizon-v)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (match mmo (some mo₀) ((none) (-> (app some mo₁) <-)))\n  (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  match
  "\"'(eval (λ (oc₀ oc₁) (-> (match oc₀ ...) <-)) (env ((□? (oc₀ oc₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  match
  "\"'(eval\n  (app\n   some\n   (->\n    (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...)\n    <-))\n  (env ((□? (mmo mo₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match oc₀ (win) ((draw) (-> (app equal? oc₁ (app win)) <-)) (lose))\n  (env ((□? (oc₀ oc₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  match
  "\"'(eval\n  (match (app wins? bo mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval\n  (app minimax bo that-mark (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  44
  15
  9
  20
  0
  3
  3
  1
  0
  9
  #f
  27/5
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 4 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval (let (_) (-> (app void) <-)) (env ((□? (bo this-play that-play)))))\""
  47
  17
  9
  21
  0
  3
  3
  1
  0
  11
  #t
  91/17
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   (#f)\n   (_ (-> mo₁ <-)))\n  (env ((□? (mmo mo₁)))))\""
  57
  24
  11
  22
  0
  4
  4
  1
  0
  18
  #t
  65/12
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app equal? (-> co₀ <-) co) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (match (-> a <-) (blank) _) (env ((□? (a)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (match (-> xs <-) (nil) (cons x rest-xs)) (env ((□? (f xs)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval (app player (-> (app X) <-) human-action) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (app horizon (-> (app draw) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  7
  4
  0
  3
  0
  0
  0
  1
  0
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app coord rc (-> rc <-)) (env ((□? (rc)) (□? (b m)))))\""
  60
  34
  15
  11
  23
  5
  28
  1
  53/78
  32
  #f
  173/34
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (app board-mark co (-> this-mark <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval\n  (app full? (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  9
  5
  0
  4
  1
  0
  1
  1
  1/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app oc< oc₀ (-> oc₁ <-)) (env ((□? (h₀ h₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord r c) <-) m)\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  5
  2
  0
  3
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match\n   xs\n   (nil)\n   ((cons x rest-xs) (-> (app or (app f x) (app ormap f rest-xs)) <-)))\n  (env ((□? (f xs)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co this-mark bo) <-)) () ...) ...)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  8
  4
  0
  4
  1
  0
  1
  1
  1/4
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (app board-mark (-> co <-) mark bo)\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app < (-> sc₀ <-) sc₁) (env ((□? (h₀ h₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval (app equal? oc₁ (-> (app win) <-)) (env ((□? (oc₀ oc₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval\n  (app board-lookup co (-> bo <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  31
  21
  3
  7
  10
  1
  11
  1
  11/25
  20
  #f
  36/7
  ((2 2 0) (2 5/2 0) (2 5/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (match (-> xs <-) (nil) (cons x rest-xs)) (env ((□? (f xs)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord rc rc) (-> m <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app mark⁻¹ (-> ma <-)) (env ((□? (bo)) (□? (ma)))))\""
  15
  7
  4
  4
  0
  1
  1
  1
  0
  6
  #f
  36/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app some (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  23
  10
  6
  7
  0
  2
  2
  1
  0
  9
  #t
  51/10
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match\n   h₁\n   ((horizon oc₁ sc₁)\n    (->\n     (app or (app oc< oc₀ oc₁) (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n     <-)))\n  (env ((□? (h₀ h₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval\n  (match move-coord-v ((move move-coord-x _) (-> move-coord-x <-)) _)\n  (env ((□? (move-coord-v)))))\""
  58
  31
  10
  17
  20
  3
  23
  1
  9/14
  17
  #f
  141/31
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval (app cons (-> (app On) <-) (app cons (app Tw) (app nil))) (env ()))\""
  60
  33
  10
  17
  22
  3
  25
  1
  2/3
  19
  #t
  151/33
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match (app b co) (blank) ((marked m*) (-> (app equal? m m*) <-)))\n  (env ((□? (b co m)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app (-> b <-) (app coord r c)) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  30
  14
  4
  12
  1
  1
  2
  1
  1/12
  14
  #t
  36/7
  ((3/2 2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app marked (-> ma <-)) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval (app or (app f x) (-> (app ormap f rest-xs) <-)) (env ((□? (f xs)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₀ <-)) (env ((□? (mmo mo₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  match
  "\"'(eval\n  (match (app wins? bo this-mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  match
  "\"'(eval (λ (mmo mo₁) (-> (match mmo ...) <-)) (env ((□? (mmo mo₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord rc (app i⁻¹ rc)) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  29
  14
  4
  11
  1
  1
  2
  1
  1/12
  14
  #t
  36/7
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (letrec*\n   (...\n    move-horizon\n    (is\n     (->\n      (app cons (app Ze) (app cons (app On) (app cons (app Tw) (app nil))))\n      <-))\n    mark⁻¹\n    ...)\n   ...)\n  (env ()))\""
  31
  16
  4
  11
  3
  1
  4
  1
  3/14
  16
  #t
  41/8
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  let
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> (let (bo) ...) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app andmap (λ (c) ...) (-> is <-)) (env ((□? (r)) (□? (b m)))))\""
  5
  3
  0
  2
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   (#f)\n   (_ (-> mo₀ <-)))\n  (env ((□? (mmo mo₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (app minimax bo (-> that-mark <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) (app make-ai-action (app X)))\n   (-> (app player (app O) (app make-ai-action (app O))) <-))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (match (-> i <-) (Ze) (On) (Tw)) (env ((□? (i)))))\""
  64
  36
  17
  11
  23
  6
  29
  1
  53/75
  31
  #f
  185/36
  ((4 4 0) (4 4 0) (9/2 5 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (match (-> h₀ <-) (horizon oc₀ sc₀)) (env ((□? (h₀ h₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (λ (rc) (-> (app marked-with? b (app coord rc (app i⁻¹ rc)) m) <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval (app make-ai-action (-> (app O) <-)) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app foldl (-> f <-) (app f x acc) xs) (env ((□? (f acc l)))))\""
  22
  11
  4
  7
  3
  1
  4
  1
  3/35
  8
  #f
  58/11
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (-> (app andmap (λ (rc) ...) is) <-))\n  (env ((□? (b m)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval (λ (bo) (-> (app void) <-)) (env ((□? (bo)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (λ (bo this-mark that-mark)\n    (-> (app fold/coord (λ (co mm) ...) (app none)) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  34
  22
  4
  8
  16
  1
  17
  1
  7/10
  15
  #f
  103/22
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app marked? (-> (app b (app coord r c)) <-))\n  (env ((□? (c)) (□? (r)) (□? (b)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (match some-v-v ((some some-v-x) (-> some-v-x <-)) _)\n  (env ((□? (some-v-v)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval (app and (app f x) (-> (app andmap f rest-xs) <-)) (env ((□? (f xs)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval (λ (b) (-> (app andmap (λ (r) ...) is) <-)) (env ((□? (b)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app (-> f <-) x) (env ((□? (f xs)))))\""
  19
  10
  4
  5
  3
  1
  4
  1
  3/28
  6
  #f
  27/5
  ((3 7/2 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app foldl (λ (r x) ...) (-> x <-) is) (env ((□? (f x)))))\""
  30
  15
  7
  8
  3
  2
  5
  1
  1/21
  11
  #t
  79/15
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval (match a (blank) (_ (-> (app #f) <-))) (env ((□? (a)))))\""
  33
  17
  7
  9
  3
  2
  5
  1
  3/77
  13
  #t
  89/17
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match\n   xs\n   (nil)\n   ((cons x rest-xs) (-> (app and (app f x) (app andmap f rest-xs)) <-)))\n  (env ((□? (f xs)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (match\n   mmo\n   ((some mo₀)\n    (->\n     (app\n      some\n      (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n     <-))\n   (none))\n  (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f) (-> (app play-turn bo that-play this-play) <-))\n   _)\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (let (bo)\n    (->\n     (app min-maybe-move mm (app move co (match (app wins? bo this-mark) ...)))\n     <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  let
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> (let (bo) ...) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) human-action)\n   (-> (app player (app O) human-action) <-))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  match
  "\"'(eval\n  (λ (co mm) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (match (-> mmo <-) (some mo₀) (none)) (env ((□? (mmo mo₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (λ (player-one player-two)\n    (-> (app play-turn empty-board player-one player-two) <-))\n  (env ((□? (player-one player-two)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app horizon< (-> (app move-horizon mo₀) <-) (app move-horizon mo₁))\n  (env ((□? (mmo mo₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (app fold/coord (λ (co mm) ...) (-> (app none) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  letrec*
  "\"'(eval\n  (lettypes cons ... player (letrec* (some-v ... zero-player-game) ...))\n  (env ()))\""
  32
  16
  7
  9
  14
  2
  16
  1
  7/8
  8
  #f
  9/2
  ((1 1 0) (1/2 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval (match ma ((X) (-> (app O) <-)) (O)) (env ((□? (ma)))))\""
  35
  18
  7
  10
  14
  2
  16
  1
  7/9
  10
  #t
  41/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (match\n   move-coord-v\n   (move move-coord-x _)\n   (_ (-> (app error \"invalid match for move-coord\") <-)))\n  (env ((□? (move-coord-v)))))\""
  38
  20
  7
  11
  14
  2
  16
  1
  7/10
  12
  #t
  23/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  match
  "\"'(eval\n  (match (app wins? bo this-mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (app\n   max-maybe-move\n   (-> mm <-)\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (let (bo)\n    (->\n     (app max-maybe-move mm (app move co (match (app wins? bo this-mark) ...)))\n     <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  match
  "\"'(eval\n  (λ (move-coord-v) (-> (match move-coord-v ...) <-))\n  (env ((□? (move-coord-v)))))\""
  58
  31
  10
  17
  20
  3
  23
  1
  9/14
  17
  #f
  141/31
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (match (-> this-play <-) (player mark action))\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval\n  (app board-mark co this-mark (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  14
  6
  2
  6
  1
  1
  2
  1
  1/6
  6
  #t
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval\n  (app play-turn empty-board (-> player-one <-) player-two)\n  (env ((□? (player-one player-two)))))\""
  29
  13
  6
  10
  1
  2
  3
  1
  1/13
  12
  #f
  67/13
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app maximin (-> bo <-) ma (app mark⁻¹ ma)) (env ((□? (bo)) (□? (ma)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval (app maximin bo ma (-> (app mark⁻¹ ma) <-)) (env ((□? (bo)) (□? (ma)))))\""
  40
  22
  6
  12
  1
  2
  3
  1
  1/16
  18
  #f
  57/11
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval\n  (app wins? bo (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  64
  31
  11
  22
  1
  4
  5
  1
  1/19
  18
  #f
  168/31
  ((4 4 0) (4 4 0) (4 4 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app board-lookup (-> co <-) bo) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app andmap (λ (rc) ...) (-> is <-)) (env ((□? (b m)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval\n  (app move (-> co <-) (match (app wins? bo this-mark) ...))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  17
  8
  2
  7
  3
  0
  3
  1
  3/8
  8
  #t
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord rc (app i⁻¹ rc)) <-) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  20
  10
  2
  8
  3
  0
  3
  1
  3/10
  10
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) (app make-ai-action (app X))) <-)\n   (app player (app O) (app make-ai-action (app O))))\n  (env ((□? ()))))\""
  23
  12
  2
  9
  3
  0
  3
  1
  1/4
  12
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app\n   or\n   (app oc< oc₀ oc₁)\n   (-> (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)) <-))\n  (env ((□? (h₀ h₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval (λ (co) (-> (app blank) <-)) (env ((□? (co)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval\n  (app full? (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  12
  7
  0
  5
  1
  0
  1
  1
  1/7
  7
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app foldl (λ (r x) ...) x (-> is <-)) (env ((□? (f x)))))\""
  16
  10
  0
  6
  3
  0
  3
  1
  3/10
  10
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (match\n   mmo\n   ((some mo₀)\n    (->\n     (app\n      some\n      (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n     <-))\n   (none))\n  (env ((□? (mmo mo₁)))))\""
  19
  12
  0
  7
  3
  0
  3
  1
  1/4
  12
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (λ (bo)\n    (-> (app move-coord (app some-v (app maximin bo ma (app mark⁻¹ ma)))) <-))\n  (env ((□? (bo)) (□? (ma)))))\""
  74
  43
  10
  21
  22
  3
  25
  1
  39/80
  29
  #f
  201/43
  ((7/2 4 0) (4 4 0) (4 4 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app wins? bo (-> mark <-)) (env ((□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (app board-mark co (-> mark <-) bo)\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval (match ma (X) ((O) (-> (app X) <-))) (env ((□? (ma)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  match
  "\"'(eval\n  (let (_) (-> (match this-play ...) <-))\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (match (-> a <-) (marked _) _) (env ((□? (a)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (match l ((nil) (-> acc <-)) (cons x xs)) (env ((□? (f acc l)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  match
  "\"'(eval\n  (app move co (-> (match (app wins? bo this-mark) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (match h ((horizon oc sc) (-> (app horizon oc (app + sc 1)) <-)))\n  (env ((□? (h)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval\n  (app board-lookup (-> co <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  16
  7
  2
  7
  1
  0
  1
  1
  1/7
  7
  #t
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (app horizon (-> (app lose) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  20
  10
  2
  8
  1
  0
  1
  1
  1/9
  10
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app < sc₀ (-> sc₁ <-)) (env ((□? (h₀ h₁)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval (app player (-> (app X) <-) human-action) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  let
  "\"'(eval\n  (λ (bo this-play that-play) (-> (let (_) ...) <-))\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app equal? m (-> m* <-)) (env ((□? (b co m)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  let
  "\"'(eval\n  (λ () (-> (let (co) ...) <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match l (nil) ((cons x xs) (-> (app foldl f (app f x acc) xs) <-)))\n  (env ((□? (f acc l)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (let (... () (co (-> (app action bo) <-)) () ...) ...)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval\n  (app board-mark (-> co <-) this-mark bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  13
  5
  2
  6
  1
  0
  1
  1
  1/5
  5
  #t
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval (λ (c) (-> (app andmap (λ (r) ...) is) <-)) (env ((□? (c)) (□? (b m)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (-> (app andmap (λ (rc) ...) is) <-)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match (-> (app full? bo) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  match
  "\"'(eval (λ (f xs) (-> (match xs ...) <-)) (env ((□? (f xs)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval\n  (app wins? (-> bo <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  9
  5
  0
  4
  1
  0
  1
  1
  1/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval (λ (co bo) (-> (app bo co) <-)) (env ((□? (co bo)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval (app coord rc (-> (app i⁻¹ rc) <-)) (env ((□? (rc)) (□? (b m)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app blank? (-> (app board-lookup co bo) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval\n  (app play-turn empty-board player-one (-> player-two <-))\n  (env ((□? (player-one player-two)))))\""
  15
  7
  4
  4
  0
  1
  1
  1
  0
  6
  #f
  37/7
  ((1/2 1/2 0) (1 1 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  letrec
  "\"'(eval\n  (let (... () (co (-> (letrec (loop) ...) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (app some-v (-> (app minimax bo that-mark this-mark) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  36
  23
  4
  9
  19
  1
  20
  1
  17/21
  15
  #f
  107/23
  ((5/2 5/2 0) (5/2 5/2 0) (2 5/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app foldl f (app f x acc) (-> xs <-)) (env ((□? (f acc l)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co this-mark bo) <-)) () ...) ...)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  8
  4
  0
  4
  1
  0
  1
  1
  1/4
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord r c) m)\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  30
  14
  4
  12
  1
  1
  2
  1
  1/12
  14
  #t
  36/7
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app (-> action <-) bo) (env ((□? ()) (□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  8
  5
  0
  3
  1
  0
  1
  1
  1/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  app
  "\"'(eval (match (-> (app b co) <-) (blank) (marked m*)) (env ((□? (b co m)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   ((#f) (-> mo₁ <-))\n   _)\n  (env ((□? (mmo mo₁)))))\""
  8
  3
  2
  3
  0
  1
  1
  1
  0
  3
  #t
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  16
  8
  2
  6
  1
  1
  2
  1
  1/8
  8
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval\n  (app board-mark co mark (-> bo <-))\n  (env ((□? (bo this-play that-play)))))\""
  40
  26
  5
  9
  10
  2
  12
  1
  29/90
  25
  #f
  137/26
  ((3 7/2 0) (3 7/2 0) (3 7/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) human-action)\n      (app player (app O) human-action))\n     <-))\n  (env ((□? ()))))\""
  60
  36
  9
  15
  16
  3
  19
  1
  74/165
  29
  #f
  181/36
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (app player (app X) (-> (app make-ai-action (app X)) <-))\n  (env ((□? ()))))\""
  66
  40
  9
  17
  17
  3
  20
  1
  163/390
  33
  #t
  201/40
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (match mmo (some mo₀) ((none) (-> (app some mo₁) <-)))\n  (env ((□? (mmo mo₁)))))\""
  69
  42
  9
  18
  17
  3
  20
  1
  163/420
  35
  #t
  211/42
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval (match i ((Ze) (-> (app Tw) <-)) (On) (Tw)) (env ((□? (i)))))\""
  72
  44
  9
  19
  17
  3
  20
  1
  163/450
  37
  #t
  221/44
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval\n  (app maximin (-> bo <-) that-mark this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  77
  48
  9
  20
  17
  3
  20
  1
  107/330
  41
  #t
  241/48
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  88
  58
  9
  21
  24
  3
  27
  1
  71/190
  51
  #t
  146/29
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord r c) (-> m <-))\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (app board-lookup (-> co <-) bo)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app foldl (λ (c x) ...) x (-> is <-)) (env ((□? (r x)) (□? (f x)))))\""
  5
  3
  0
  2
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  match
  "\"'(eval\n  (let (bo) (-> (match (app wins? bo mark) ...) <-))\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  match
  "\"'(eval\n  (app move co (-> (match (app wins? bo this-mark) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app i⁻¹ (-> rc <-)) (env ((□? (rc)) (□? (b m)))))\""
  53
  30
  15
  8
  23
  5
  28
  1
  53/66
  28
  #f
  51/10
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (match (app wins? bo this-mark) (#f) (_ (-> (app horizon (app lose) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  57
  32
  15
  10
  23
  5
  28
  1
  53/72
  30
  #t
  163/32
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval\n  (app (-> f <-) (app coord r c) x)\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  67
  35
  18
  14
  23
  6
  29
  1
  53/81
  32
  #f
  179/35
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  let
  "\"'(eval (let (co) (-> (let (bo) ...) <-)) (env ((□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (app horizon (app draw) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval\n  (app wins? bo (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  48
  19
  9
  20
  0
  3
  3
  1
  0
  12
  #f
  103/19
  ((4 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app f (-> x <-)) (env ((□? (f xs)))))\""
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (app move-coord (-> (app some-v (app maximin bo ma (app mark⁻¹ ma))) <-))\n  (env ((□? (bo)) (□? (ma)))))\""
  51
  28
  8
  15
  20
  2
  22
  1
  9/13
  17
  #f
  129/28
  ((7/2 4 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  83
  51
  15
  17
  36
  6
  42
  1
  41/60
  35
  #f
  251/51
  ((3 3 0) (4 4 0) (3 3 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (match (app b co) ((blank) (-> (app #f) <-)) (marked m*))\n  (env ((□? (b co m)))))\""
  86
  53
  15
  18
  36
  6
  42
  1
  779/1200
  37
  #t
  261/53
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval\n  (app board-mark (-> co <-) this-mark bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  105
  65
  18
  22
  36
  6
  42
  1
  779/1320
  49
  #t
  326/65
  ((3 3 0) (7/2 4 0) (3 3 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval\n  (app wins? (-> bo <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  9
  5
  0
  4
  1
  0
  1
  1
  1/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  match
  "\"'(eval (λ (some-v-v) (-> (match some-v-v ...) <-)) (env ((□? (some-v-v)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (app board-lookup (-> co <-) bo)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (app player (-> (app O) <-) (app make-ai-action (app O)))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval (app cons (-> (app On) <-) (app cons (app Tw) (app nil))) (env ()))\""
  5
  4
  0
  1
  2
  0
  2
  1
  1/2
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  match
  "\"'(eval\n  (app move co (-> (match (app wins? bo this-mark) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval\n  (app board-mark co this-mark (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  14
  6
  2
  6
  1
  1
  2
  1
  1/6
  6
  #t
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) human-action) <-)\n   (app player (app O) human-action))\n  (env ((□? ()))))\""
  17
  8
  2
  7
  1
  1
  2
  1
  1/8
  8
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (λ (bo)\n    (-> (app move-coord (app some-v (app maximin bo ma (app mark⁻¹ ma)))) <-))\n  (env ((□? (bo)) (□? (ma)))))\""
  73
  41
  12
  20
  22
  4
  26
  1
  20/39
  27
  #f
  191/41
  ((4 4 0) (4 4 0) (4 4 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  match
  "\"'(eval\n  (let (bo) (-> (match (app wins? bo mark) ...) <-))\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval\n  (app board-mark co (-> this-mark <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  45
  16
  9
  20
  0
  3
  3
  1
  0
  9
  #f
  87/16
  ((4 4 0) (4 4 0) (4 4 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (app horizon (-> (app win) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  49
  20
  9
  20
  0
  3
  3
  1
  0
  13
  #t
  107/20
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval (λ (bo) (-> (app void) <-)) (env ((□? (bo)))))\""
  52
  22
  9
  21
  0
  3
  3
  1
  0
  15
  #t
  117/22
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match (-> (app wins? bo mark) <-) (#f) _)\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app ormap (λ (c) ...) (-> is <-)) (env ((□? (b m)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (app f (-> (app coord r c) <-) x)\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  9
  5
  0
  4
  2
  0
  2
  1
  2/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (app maximin bo that-mark (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval\n  (app minimax (-> bo <-) that-mark this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  9
  5
  0
  4
  1
  0
  1
  1
  1/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match\n   h₁\n   ((horizon oc₁ sc₁)\n    (->\n     (app or (app oc< oc₀ oc₁) (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n     <-)))\n  (env ((□? (h₀ h₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord r c) (-> m <-))\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (letrec (loop) (-> (app loop) <-))\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (app board-mark co (-> mark <-) bo)\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (λ (r) (-> (app marked-with? b (app coord r c) m) <-))\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (match (-> xs <-) (nil) (cons x rest-xs)) (env ((□? (f xs)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  let
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (let (_) ...) <-)))\n  (env ((□? (bo this-play that-play)))))\""
  38
  28
  4
  6
  14
  1
  15
  1
  31/56
  18
  #t
  11/2
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  match
  "\"'(eval\n  (app move co (-> (match (app wins? bo this-mark) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord rc rc) (-> m <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app horizon< (-> (app move-horizon mo₀) <-) (app move-horizon mo₁))\n  (env ((□? (mmo mo₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (match (-> move-horizon-v <-) (move _ move-horizon-x) _)\n  (env ((□? (move-horizon-v)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval (λ (co) (-> (app blank) <-)) (env ((□? (co)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match\n   (-> (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) <-)\n   (#f)\n   _)\n  (env ((□? (mmo mo₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval (λ (r) (-> (app andmap (λ (c) ...) is) <-)) (env ((□? (r)) (□? (b)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval\n  (app board-mark co mark (-> bo <-))\n  (env ((□? (bo this-play that-play)))))\""
  27
  19
  3
  5
  10
  1
  11
  1
  11/20
  18
  #f
  98/19
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  match
  "\"'(eval\n  (match h₀ ((horizon oc₀ sc₀) (-> (match h₁ ...) <-)))\n  (env ((□? (h₀ h₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app\n   or\n   (-> (app oc< oc₀ oc₁) <-)\n   (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n  (env ((□? (h₀ h₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval\n  (app move (-> co <-) (match (app wins? bo this-mark) ...))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  13
  5
  2
  6
  1
  0
  1
  1
  1/5
  5
  #t
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (λ (bo this-mark that-mark)\n    (-> (app fold/coord (λ (co mm) ...) (app none)) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  30
  12
  6
  12
  4
  1
  5
  1
  1/3
  8
  #f
  14/3
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) human-action)\n   (-> (app player (app O) human-action) <-))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  lettypes
  "\"'(eval ((top) lettypes (cons ... player) ...) (env ()))\""
  32
  17
  7
  8
  15
  2
  17
  1
  15/17
  8
  #f
  76/17
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  match
  "\"'(eval\n  (let (co) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (app\n   min-maybe-move\n   (-> mm <-)\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (app f (app coord r c) (-> x <-))\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app\n   or\n   (-> (app ormap (λ (r) ...) is) <-)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> (app loop) <-)) _)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval (app cons (app On) (-> (app cons (app Tw) (app nil)) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (match\n   move-coord-v\n   (move move-coord-x _)\n   (_ (-> (app error \"invalid match for move-coord\") <-)))\n  (env ((□? (move-coord-v)))))\""
  5
  4
  0
  1
  2
  0
  2
  1
  1/2
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (λ (bo this-mark that-mark)\n    (-> (app fold/coord (λ (co mm) ...) (app none)) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  36
  24
  4
  8
  18
  1
  19
  1
  8/11
  17
  #f
  113/24
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app wins? (-> bo <-) mark) (env ((□? (bo this-play that-play)))))\""
  44
  29
  4
  11
  19
  1
  20
  1
  17/27
  22
  #t
  138/29
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app board-lookup (-> co <-) bo) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (app some-v (-> (app maximin bo ma (app mark⁻¹ ma)) <-))\n  (env ((□? (bo)) (□? (ma)))))\""
  36
  23
  4
  9
  19
  1
  20
  1
  17/21
  15
  #f
  107/23
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  match
  "\"'(eval (λ (h) (-> (match h ...) <-)) (env ((□? (h)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (match xs ((nil) (-> (app #t) <-)) (cons x rest-xs))\n  (env ((□? (f xs)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (app move-coord (-> (app some-v (app maximin bo ma (app mark⁻¹ ma))) <-))\n  (env ((□? (bo)) (□? (ma)))))\""
  54
  30
  8
  16
  20
  2
  22
  1
  9/14
  19
  #f
  139/30
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (app maximin bo (-> that-mark <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  match
  "\"'(eval\n  (app\n   some\n   (->\n    (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...)\n    <-))\n  (env ((□? (mmo mo₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (let (... () (co (-> (app action bo) <-)) () ...) ...)\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app equal? (-> m <-) m*) (env ((□? (b co m)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app oc< (-> oc₀ <-) oc₁) (env ((□? (h₀ h₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  match
  "\"'(eval (λ (mmo mo₁) (-> (match mmo ...) <-)) (env ((□? (mmo mo₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (app\n   horizon-add1\n   (->\n    (app move-horizon (app some-v (app minimax bo that-mark this-mark)))\n    <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  67
  33
  15
  19
  21
  3
  24
  1
  19/31
  19
  #f
  151/33
  ((4 4 0) (4 4 0) (4 4 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval\n  (app board-lookup (-> co <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  77
  38
  17
  22
  21
  3
  24
  1
  37/68
  24
  #t
  88/19
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  let
  "\"'(eval\n  (match (app wins? bo mark) (#f) (_ (-> (let (_) ...) <-)))\n  (env ((□? (bo this-play that-play)))))\""
  81
  41
  17
  23
  21
  3
  24
  1
  1/2
  27
  #t
  191/41
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval (app horizon oc (-> (app + sc 1) <-)) (env ((□? (h)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app i⁻¹ (-> rc <-)) (env ((□? (rc)) (□? (b m)))))\""
  53
  30
  15
  8
  23
  5
  28
  1
  53/66
  28
  #f
  51/10
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval (app make-ai-action (-> (app O) <-)) (env ((□? ()))))\""
  56
  32
  15
  9
  23
  5
  28
  1
  53/72
  30
  #t
  163/32
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (app board-lookup co (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app bo (-> co <-)) (env ((□? (co bo)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval\n  (match move-coord-v ((move move-coord-x _) (-> move-coord-x <-)) _)\n  (env ((□? (move-coord-v)))))\""
  58
  31
  10
  17
  20
  3
  23
  1
  9/14
  17
  #f
  141/31
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  85
  50
  13
  22
  30
  4
  34
  1
  28/45
  35
  #f
  239/50
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) human-action)\n      (app player (app O) human-action))\n     <-))\n  (env ((□? ()))))\""
  105
  60
  17
  28
  36
  5
  41
  1
  71/115
  39
  #f
  283/60
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (match (-> h <-) (horizon oc sc)) (env ((□? (h)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  match
  "\"'(eval (λ (f xs) (-> (match xs ...) <-)) (env ((□? (f xs)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  8
  5
  0
  3
  1
  0
  1
  1
  1/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) human-action)\n      (app player (app O) (app make-ai-action (app O))))\n     <-))\n  (env ((□? ()))))\""
  32
  15
  7
  10
  7
  2
  9
  1
  7/15
  9
  #f
  23/5
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval (λ (co bo) (-> (app bo co) <-)) (env ((□? (co bo)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₀ <-)) (env ((□? (mmo mo₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval\n  (app play-turn empty-board player-one (-> player-two <-))\n  (env ((□? (player-one player-two)))))\""
  15
  7
  4
  4
  0
  1
  1
  1
  0
  6
  #f
  37/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (app minimax bo (-> that-mark <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app andmap f (-> rest-xs <-)) (env ((□? (f xs)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app marked? (-> (app b (app coord r c)) <-))\n  (env ((□? (c)) (□? (r)) (□? (b)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval\n  (app full? (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  9
  5
  0
  4
  1
  0
  1
  1
  1/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app (-> f <-) x) (env ((□? (f xs)))))\""
  28
  15
  4
  9
  4
  1
  5
  1
  10/63
  11
  #f
  79/15
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval (app maximin bo ma (-> (app mark⁻¹ ma) <-)) (env ((□? (bo)) (□? (ma)))))\""
  68
  37
  10
  21
  5
  3
  8
  1
  17/175
  29
  #f
  193/37
  ((3 3 0) (3 3 0) (4 4 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord rc (app i⁻¹ rc)) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app horizon< (app move-horizon mo₀) (-> (app move-horizon mo₁) <-))\n  (env ((□? (mmo mo₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (λ (rc) (-> (app marked-with? b (app coord rc rc) m) <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (letrec*\n   (...\n    move-horizon\n    (is\n     (->\n      (app cons (app Ze) (app cons (app On) (app cons (app Tw) (app nil))))\n      <-))\n    mark⁻¹\n    ...)\n   ...)\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   ((#f) (-> mo₁ <-))\n   _)\n  (env ((□? (mmo mo₁)))))\""
  10
  5
  2
  3
  2
  1
  3
  1
  2/5
  5
  #t
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  letrec
  "\"'(eval\n  (let (... () (co (-> (letrec (loop) ...) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> mm <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval (match i ((Ze) (-> (app Tw) <-)) (On) (Tw)) (env ((□? (i)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (λ (c x) (-> (app f (app coord r c) x) <-))\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app < sc₀ (-> sc₁ <-)) (env ((□? (h₀ h₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (match\n   mmo\n   ((some mo₀)\n    (->\n     (app\n      some\n      (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n     <-))\n   (none))\n  (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app blank? (-> (app board-lookup co bo) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  match
  "\"'(eval (λ (a) (-> (match a ...) <-)) (env ((□? (a)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval\n  (app board-lookup co (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  14
  6
  2
  6
  1
  1
  2
  1
  1/6
  6
  #t
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app some (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  20
  9
  4
  7
  1
  2
  3
  1
  1/9
  9
  #t
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord r c) <-) m)\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  25
  11
  4
  10
  1
  2
  3
  1
  1/11
  11
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord rc (app i⁻¹ rc)) <-) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  28
  13
  4
  11
  1
  2
  3
  1
  1/13
  13
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (app board-mark (-> co <-) mark bo)\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  53
  30
  15
  8
  23
  5
  28
  1
  53/66
  28
  #f
  51/10
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  71
  41
  20
  10
  27
  7
  34
  1
  87/125
  38
  #f
  210/41
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  match
  "\"'(eval (λ (ma) (-> (match ma ...) <-)) (env ((□? (ma)))))\""
  108
  60
  26
  22
  27
  9
  36
  1
  87/190
  53
  #f
  103/20
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app blank? (-> (app board-lookup co bo) <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  46
  30
  11
  5
  23
  5
  28
  1
  53/66
  28
  #f
  51/10
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (λ (player-one player-two)\n    (-> (app play-turn empty-board player-one player-two) <-))\n  (env ((□? (player-one player-two)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (-> (app ormap (λ (c) ...) is) <-)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval (app or (-> (app f x) <-) (app ormap f rest-xs)) (env ((□? (f xs)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (match move-horizon-v ((move _ move-horizon-x) (-> move-horizon-x <-)) _)\n  (env ((□? (move-horizon-v)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  match
  "\"'(eval (λ (f xs) (-> (match xs ...) <-)) (env ((□? (f xs)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval (app make-ai-action (-> (app X) <-)) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (letrec* (some-v ... zero-player-game) (-> (app zero-player-game) <-))\n  (env ()))\""
  30
  15
  7
  8
  13
  2
  15
  1
  13/15
  8
  #f
  68/15
  ((1/2 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) (app make-ai-action (app X)))\n   (-> (app player (app O) (app make-ai-action (app O))) <-))\n  (env ((□? ()))))\""
  32
  17
  7
  8
  13
  2
  15
  1
  13/17
  10
  #t
  78/17
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  match
  "\"'(eval (λ (mmo mo₁) (-> (match mmo ...) <-)) (env ((□? (mmo mo₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₁ <-) (app lose)) (env ((□? (oc₀ oc₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app andmap (λ (c) ...) (-> is <-)) (env ((□? (r)) (□? (b)))))\""
  5
  3
  0
  2
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app (-> f <-) x acc) (env ((□? (f acc l)))))\""
  25
  13
  4
  8
  5
  1
  6
  1
  17/49
  9
  #f
  69/13
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (match (-> a <-) (blank) _) (env ((□? (a)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  match
  "\"'(eval (λ (oc₀ oc₁) (-> (match oc₀ ...) <-)) (env ((□? (oc₀ oc₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (app some-v (-> (app minimax bo that-mark this-mark) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  36
  23
  4
  9
  19
  1
  20
  1
  17/21
  15
  #f
  107/23
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  match
  "\"'(eval\n  (match (app wins? bo this-mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (app\n   max-maybe-move\n   (-> mm <-)\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  let
  "\"'(eval\n  (λ (bo this-play that-play) (-> (let (_) ...) <-))\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (match (app wins? bo this-mark) (#f) (_ (-> (app horizon (app lose) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  50
  32
  11
  7
  23
  5
  28
  1
  53/72
  30
  #f
  163/32
  ((5/2 5/2 0) (5/2 3 0) (3 3 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval (match i (Ze) (On) ((Tw) (-> (app Ze) <-))) (env ((□? (i)))))\""
  53
  34
  11
  8
  23
  5
  28
  1
  53/78
  32
  #t
  173/34
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval (λ (r) (-> (app andmap (λ (c) ...) is) <-)) (env ((□? (r)) (□? (b m)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (match (-> a <-) (marked _) _) (env ((□? (a)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval (match a (marked _) (_ (-> (app #f) <-))) (env ((□? (a)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval (app player (-> (app O) <-) human-action) (env ((□? ()))))\""
  6
  4
  0
  2
  0
  0
  0
  1
  0
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  14
  7
  2
  5
  0
  1
  1
  1
  0
  7
  #t
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  match
  "\"'(eval\n  (λ (move-horizon-v) (-> (match move-horizon-v ...) <-))\n  (env ((□? (move-horizon-v)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f)\n    (->\n     (app\n      horizon-add1\n      (app move-horizon (app some-v (app maximin bo that-mark this-mark))))\n     <-))\n   _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app some (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  8
  3
  2
  3
  0
  1
  1
  1
  0
  3
  #t
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app ormap (λ (r) ...) (-> is <-)) (env ((□? (b m)))))\""
  12
  6
  2
  4
  2
  1
  3
  1
  1/3
  6
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app and (app equal? oc₀ oc₁) (-> (app < sc₀ sc₁) <-))\n  (env ((□? (h₀ h₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  53
  30
  15
  8
  23
  5
  28
  1
  53/66
  28
  #f
  51/10
  ((3 7/2 0) (9/2 9/2 0) (7/2 7/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app foldl (-> f <-) (app f x acc) xs) (env ((□? (f acc l)))))\""
  72
  39
  19
  14
  26
  6
  32
  1
  76/105
  34
  #f
  67/13
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (match l ((nil) (-> acc <-)) (cons x xs)) (env ((□? (f acc l)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match (-> (app full? bo) <-) (#f) _)\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (app player (app X) (-> (app make-ai-action (app X)) <-))\n  (env ((□? ()))))\""
  7
  4
  0
  3
  1
  0
  1
  1
  1/4
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match (-> (app full? bo) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app andmap (-> f <-) rest-xs) (env ((□? (f xs)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app andmap (λ (r) ...) (-> is <-)) (env ((□? (b)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval\n  (app play-turn (-> bo <-) that-play this-play)\n  (env ((□? (bo this-play that-play)))))\""
  12
  8
  0
  4
  3
  0
  3
  1
  3/8
  8
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (app horizon (app draw) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  16
  10
  0
  6
  3
  0
  3
  1
  3/10
  10
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app horizon< (-> (app move-horizon mo₀) <-) (app move-horizon mo₁))\n  (env ((□? (mmo mo₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   (#f)\n   (_ (-> mo₁ <-)))\n  (env ((□? (mmo mo₁)))))\""
  8
  3
  2
  3
  0
  1
  1
  1
  0
  3
  #t
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (match (-> h₁ <-) (horizon oc₁ sc₁)) (env ((□? (h₀ h₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (app\n   max-maybe-move\n   mm\n   (-> (app move co (match (app wins? bo this-mark) ...)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (app horizon (-> (app draw) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  8
  4
  0
  4
  0
  0
  0
  1
  0
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app f (-> x <-)) (env ((□? (f xs)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  match
  "\"'(eval (λ (f acc l) (-> (match l ...) <-)) (env ((□? (f acc l)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord r c) (-> m <-))\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval\n  (app board-lookup (-> co <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  13
  5
  2
  6
  1
  0
  1
  1
  1/5
  5
  #t
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app coord (-> rc <-) (app i⁻¹ rc)) (env ((□? (rc)) (□? (b m)))))\""
  66
  35
  17
  14
  24
  5
  29
  1
  56/81
  33
  #f
  178/35
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app f (-> x <-)) (env ((□? (f xs)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (match mmo (some mo₀) ((none) (-> (app some mo₁) <-)))\n  (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match (-> (app wins? bo this-mark) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match (app equal? co₀ co) ((#f) (-> (app board-lookup co bo) <-)) _)\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app blank? (-> (app board-lookup co bo) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  match
  "\"'(eval\n  (app\n   some\n   (->\n    (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...)\n    <-))\n  (env ((□? (mmo mo₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  match
  "\"'(eval (λ (a) (-> (match a ...) <-)) (env ((□? (a)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (λ (bo) (-> (app error 'human-action \"not implemented\") <-))\n  (env ((□? (bo)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₀ <-)) (env ((□? (mmo mo₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  let
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> (let (bo) ...) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app (-> bo <-) co) (env ((□? (co bo)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co mark bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  7
  4
  0
  3
  1
  0
  1
  1
  1/4
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app equal? oc₀ (-> oc₁ <-)) (env ((□? (h₀ h₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app (-> action <-) bo) (env ((□? ()) (□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (let (_) (-> (app display \"Cat's game.\\n\") <-))\n  (env ((□? (bo this-play that-play)))))\""
  4
  3
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  14/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match oc₀ (win) ((draw) (-> (app equal? oc₁ (app win)) <-)) (lose))\n  (env ((□? (oc₀ oc₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app coord (-> rc <-) rc) (env ((□? (rc)) (□? (b m)))))\""
  53
  30
  15
  8
  23
  5
  28
  1
  53/66
  28
  #f
  51/10
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (match (-> some-v-v <-) (some some-v-x) _) (env ((□? (some-v-v)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (app\n   min-maybe-move\n   mm\n   (-> (app move co (match (app wins? bo this-mark) ...)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app ormap f (-> rest-xs <-)) (env ((□? (f xs)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval (app make-ai-action (-> (app O) <-)) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (match xs ((nil) (-> (app #f) <-)) (cons x rest-xs))\n  (env ((□? (f xs)))))\""
  6
  4
  0
  2
  0
  0
  0
  1
  0
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (match h ((horizon oc sc) (-> (app horizon oc (app + sc 1)) <-)))\n  (env ((□? (h)))))\""
  9
  6
  0
  3
  0
  0
  0
  1
  0
  6
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  17
  11
  0
  6
  1
  0
  1
  1
  1/11
  11
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (app horizon (-> (app draw) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  21
  13
  0
  8
  1
  0
  1
  1
  1/13
  13
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  74
  43
  15
  16
  24
  5
  29
  1
  8/15
  41
  #f
  218/43
  ((3 7/2 0) (3 7/2 0) (3 7/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app andmap (λ (rc) ...) (-> is <-)) (env ((□? (b m)))))\""
  75
  44
  15
  16
  24
  5
  29
  1
  14/27
  42
  #t
  223/44
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app f x (-> acc <-)) (env ((□? (f acc l)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval (match (-> (app b co) <-) (blank) (marked m*)) (env ((□? (b co m)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app foldl (λ (c x) ...) x (-> is <-)) (env ((□? (r x)) (□? (f x)))))\""
  5
  3
  0
  2
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (app cons (app Ze) (-> (app cons (app On) (app cons (app Tw) (app nil))) <-))\n  (env ()))\""
  7
  5
  0
  2
  4
  0
  4
  1
  4/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval\n  (match (-> move-coord-v <-) (move move-coord-x _) _)\n  (env ((□? (move-coord-v)))))\""
  56
  30
  10
  16
  20
  3
  23
  1
  9/14
  18
  #f
  23/5
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord r c) <-) m)\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  61
  32
  10
  19
  20
  3
  23
  1
  3/5
  20
  #t
  37/8
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval (match a ((marked _) (-> (app #t) <-)) _) (env ((□? (a)))))\""
  64
  34
  10
  20
  20
  3
  23
  1
  9/16
  22
  #t
  79/17
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord rc rc) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  100
  51
  14
  35
  21
  4
  25
  1
  19/44
  39
  #t
  248/51
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  let
  "\"'(eval\n  (λ () (-> (let (co) ...) <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (let (bo)\n    (->\n     (app min-maybe-move mm (app move co (match (app wins? bo this-mark) ...)))\n     <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app marked (-> ma <-)) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (match\n   move-horizon-v\n   (move _ move-horizon-x)\n   (_ (-> (app error \"invalid match for move-horizon\") <-)))\n  (env ((□? (move-horizon-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval (match ma ((X) (-> (app O) <-)) (O)) (env ((□? (ma)))))\""
  6
  4
  0
  2
  0
  0
  0
  1
  0
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₀ <-) oc₁) (env ((□? (h₀ h₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  let
  "\"'(eval (let (co) (-> (let (bo) ...) <-)) (env ((□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₁ <-) (app win)) (env ((□? (oc₀ oc₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match\n   xs\n   (nil)\n   ((cons x rest-xs) (-> (app or (app f x) (app ormap f rest-xs)) <-)))\n  (env ((□? (f xs)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) (app make-ai-action (app X))) <-)\n   (app player (app O) (app make-ai-action (app O))))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (app player (-> (app X) <-) (app make-ai-action (app X)))\n  (env ((□? ()))))\""
  5
  4
  0
  1
  0
  0
  0
  1
  0
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f) (-> (app play-turn bo that-play this-play) <-))\n   _)\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (app play-turn bo (-> that-play <-) this-play)\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (app horizon (app draw) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (λ (rc) (-> (app marked-with? b (app coord rc (app i⁻¹ rc)) m) <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord rc rc) <-) m)\n  (env ((□? (rc)) (□? (b m)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  match
  "\"'(eval\n  (match (app wins? bo mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (app move-horizon (-> (app some-v (app minimax bo that-mark this-mark)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  51
  28
  8
  15
  20
  2
  22
  1
  9/13
  17
  #f
  129/28
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (app player (-> (app O) <-) (app make-ai-action (app O)))\n  (env ((□? ()))))\""
  54
  30
  8
  16
  20
  2
  22
  1
  9/14
  19
  #t
  139/30
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (let (bo)\n    (->\n     (app max-maybe-move mm (app move co (match (app wins? bo this-mark) ...)))\n     <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  match
  "\"'(eval\n  (let (_) (-> (match this-play ...) <-))\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app maximin bo (-> ma <-) (app mark⁻¹ ma)) (env ((□? (bo)) (□? (ma)))))\""
  15
  7
  4
  4
  0
  1
  1
  1
  0
  6
  #f
  36/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match (-> (app equal? co₀ co) <-) (#f) _)\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (match mmo (some mo₀) ((none) (-> (app some mo₁) <-)))\n  (env ((□? (mmo mo₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (λ (b m)\n    (->\n     (app\n      or\n      (app ormap (λ (r) ...) is)\n      (app ormap (λ (c) ...) is)\n      (app andmap (λ (rc) ...) is)\n      (app andmap (λ (rc) ...) is))\n     <-))\n  (env ((□? (b m)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval (match a ((blank) (-> (app #t) <-)) _) (env ((□? (a)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₁ <-)) (env ((□? (mmo mo₁)))))\""
  11
  5
  2
  4
  0
  1
  1
  1
  0
  5
  #t
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> mm <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  46
  30
  11
  5
  23
  5
  28
  1
  53/66
  28
  #f
  51/10
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f)\n    (->\n     (app\n      horizon-add1\n      (app move-horizon (app some-v (app minimax bo that-mark this-mark))))\n     <-))\n   _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (-> (app andmap (λ (rc) ...) is) <-))\n  (env ((□? (b m)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match (-> (app full? bo) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (match (app b co) ((blank) (-> (app #f) <-)) (marked m*))\n  (env ((□? (b co m)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (match\n   mmo\n   ((some mo₀)\n    (->\n     (app\n      some\n      (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n     <-))\n   (none))\n  (env ((□? (mmo mo₁)))))\""
  6
  4
  0
  2
  0
  0
  0
  1
  0
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  match
  "\"'(eval\n  (λ (co mm) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (app player (app O) (-> (app make-ai-action (app O)) <-))\n  (env ((□? ()))))\""
  7
  4
  0
  3
  1
  0
  1
  1
  1/4
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord r c) m)\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  37
  18
  4
  15
  2
  1
  3
  1
  1/8
  18
  #t
  46/9
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval (app and (app f x) (-> (app andmap f rest-xs) <-)) (env ((□? (f xs)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  letrec*
  "\"'(eval\n  (lettypes cons ... player (letrec* (some-v ... zero-player-game) ...))\n  (env ()))\""
  29
  14
  7
  8
  14
  2
  16
  1
  1
  6
  #f
  31/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval (app equal? oc₁ (-> (app lose) <-)) (env ((□? (oc₀ oc₁)))))\""
  32
  16
  7
  9
  14
  2
  16
  1
  7/8
  8
  #t
  9/2
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app action (-> bo <-)) (env ((□? ()) (□? (bo this-play that-play)))))\""
  55
  35
  7
  13
  24
  2
  26
  1
  23/30
  26
  #f
  34/7
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval (app foldl f (-> (app f x acc) <-) xs) (env ((□? (f acc l)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  let
  "\"'(eval\n  (match this-play ((player mark action) (-> (let (co) ...) <-)))\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (app fold/coord (λ (co mm) ...) (-> (app none) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app andmap (λ (c) ...) (-> is <-)) (env ((□? (r)) (□? (b m)))))\""
  8
  5
  0
  3
  2
  0
  2
  1
  2/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app and (-> (app equal? oc₀ oc₁) <-) (app < sc₀ sc₁))\n  (env ((□? (h₀ h₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (match (-> h₀ <-) (horizon oc₀ sc₀)) (env ((□? (h₀ h₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord r c) m)\n  (env ((□? (r)) (□? (c)) (□? (b m)))))\""
  30
  14
  4
  12
  1
  1
  2
  1
  1/12
  14
  #t
  36/7
  ((2 2 0) (3/2 3/2 0) (3/2 2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app board-lookup co (-> bo <-)) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match (-> (app wins? bo this-mark) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app b (-> co <-)) (env ((□? (b co m)))))\""
  22
  9
  5
  8
  0
  1
  1
  1
  0
  8
  #f
  16/3
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app horizon (-> oc <-) (app + sc 1)) (env ((□? (h)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) human-action)\n   (-> (app player (app O) (app make-ai-action (app O))) <-))\n  (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (app play-turn bo that-play (-> this-play <-))\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app foldl (λ (c x) ...) (-> x <-) is) (env ((□? (r x)) (□? (f x)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval (app equal? oc₁ (-> (app win) <-)) (env ((□? (oc₀ oc₁)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (app player (app O) (-> (app make-ai-action (app O)) <-))\n  (env ((□? ()))))\""
  10
  6
  0
  4
  1
  0
  1
  1
  1/6
  6
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  match
  "\"'(eval (λ (b co m) (-> (match (app b co) ...) <-)) (env ((□? (b co m)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval (λ (b) (-> (app andmap (λ (r) ...) is) <-)) (env ((□? (b)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (app some-v (-> (app maximin bo that-mark this-mark) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  36
  23
  4
  9
  19
  1
  20
  1
  17/21
  15
  #f
  107/23
  ((2 5/2 0) (5/2 5/2 0) (2 5/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  match
  "\"'(eval\n  (match (app wins? bo this-mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app\n   or\n   (app oc< oc₀ oc₁)\n   (-> (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)) <-))\n  (env ((□? (h₀ h₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app andmap (λ (rc) ...) (-> is <-)) (env ((□? (b m)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  match
  "\"'(eval\n  (λ (move-coord-v) (-> (match move-coord-v ...) <-))\n  (env ((□? (move-coord-v)))))\""
  60
  32
  10
  18
  20
  3
  23
  1
  18/29
  18
  #f
  73/16
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) human-action) <-)\n   (app player (app O) (app make-ai-action (app O))))\n  (env ((□? ()))))\""
  63
  34
  10
  19
  20
  3
  23
  1
  18/31
  20
  #t
  78/17
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   (#f)\n   (_ (-> mo₀ <-)))\n  (env ((□? (mmo mo₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval\n  (app maximin (-> bo <-) that-mark this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  9
  5
  0
  4
  1
  0
  1
  1
  1/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app foldl (λ (r x) ...) x (-> is <-)) (env ((□? (f x)))))\""
  13
  8
  0
  5
  3
  0
  3
  1
  3/8
  8
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval (λ (c) (-> (app andmap (λ (r) ...) is) <-)) (env ((□? (c)) (□? (b m)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co this-mark bo) <-)) () ...) ...)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  8
  4
  0
  4
  1
  0
  1
  1
  1/4
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (app board-mark co (-> this-mark <-) bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval (app and (-> (app f x) <-) (app andmap f rest-xs)) (env ((□? (f xs)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval\n  (app minimax bo that-mark (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  44
  15
  9
  20
  0
  3
  3
  1
  0
  9
  #f
  27/5
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 4 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval\n  (app wins? bo (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  45
  16
  9
  20
  0
  3
  3
  1
  0
  9
  #f
  87/16
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval (let (_) (-> (app void) <-)) (env ((□? (bo this-play that-play)))))\""
  48
  18
  9
  21
  0
  3
  3
  1
  0
  11
  #t
  97/18
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app maximin (-> bo <-) ma (app mark⁻¹ ma)) (env ((□? (bo)) (□? (ma)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  match
  "\"'(eval (λ (i) (-> (match i ...) <-)) (env ((□? (i)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (match (-> i <-) (Ze) (On) (Tw)) (env ((□? (i)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app foldl (λ (r x) ...) (-> x <-) is) (env ((□? (f x)))))\""
  72
  39
  20
  13
  23
  7
  30
  1
  53/84
  34
  #t
  200/39
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval (app not (-> (app equal? oc₁ (app lose)) <-)) (env ((□? (oc₀ oc₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (λ (c) (-> (app marked-with? b (app coord r c) m) <-))\n  (env ((□? (c)) (□? (r)) (□? (b m)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (app\n   horizon-add1\n   (->\n    (app move-horizon (app some-v (app maximin bo that-mark this-mark)))\n    <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  67
  33
  15
  19
  21
  3
  24
  1
  19/31
  19
  #f
  151/33
  ((4 4 0) (4 4 0) (4 4 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (λ (c) (-> (app marked? (app b (app coord r c))) <-))\n  (env ((□? (c)) (□? (r)) (□? (b)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  match
  "\"'(eval\n  (λ (co mm) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  match
  "\"'(eval (λ (h₀ h₁) (-> (match h₀ ...) <-)) (env ((□? (h₀ h₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (match\n   some-v-v\n   (some some-v-x)\n   (_ (-> (app error \"invalid match for some-v\") <-)))\n  (env ((□? (some-v-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app full? (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  11
  7
  0
  4
  1
  0
  1
  1
  1/7
  7
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  let
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> (let (bo) ...) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (match (-> mmo <-) (some mo₀) (none)) (env ((□? (mmo mo₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (app horizon (-> (app lose) <-) 0)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (-> (app andmap (λ (rc) ...) is) <-)\n   (app andmap (λ (rc) ...) is))\n  (env ((□? (b m)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app (-> b <-) co) (env ((□? (b co m)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co this-mark bo) <-)) () ...) ...)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  8
  4
  0
  4
  1
  0
  1
  1
  1/4
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  match
  "\"'(eval\n  (λ (co) (-> (match (app equal? co₀ co) ...) <-))\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app coord rc (-> rc <-)) (env ((□? (rc)) (□? (b m)))))\""
  53
  30
  15
  8
  23
  5
  28
  1
  53/66
  28
  #f
  51/10
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval (match a (blank) (_ (-> (app #f) <-))) (env ((□? (a)))))\""
  56
  32
  15
  9
  23
  5
  28
  1
  53/72
  30
  #t
  163/32
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app (-> b <-) (app coord r c)) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  84
  46
  19
  19
  24
  6
  30
  1
  14/27
  44
  #t
  235/46
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match\n   xs\n   (nil)\n   ((cons x rest-xs) (-> (app and (app f x) (app andmap f rest-xs)) <-)))\n  (env ((□? (f xs)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match\n   oc₀\n   (win)\n   (draw)\n   ((lose) (-> (app not (app equal? oc₁ (app lose))) <-)))\n  (env ((□? (oc₀ oc₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval (app b (-> (app coord r c) <-)) (env ((□? (c)) (□? (r)) (□? (b)))))\""
  5
  2
  0
  3
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  13
  7
  0
  6
  1
  0
  1
  1
  1/7
  7
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval (app or (app f x) (-> (app ormap f rest-xs) <-)) (env ((□? (f xs)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval (λ (f x) (-> (app foldl (λ (r x) ...) x is) <-)) (env ((□? (f x)))))\""
  26
  17
  4
  5
  10
  1
  11
  1
  3/5
  11
  #f
  79/17
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app foldl f (app f x acc) (-> xs <-)) (env ((□? (f acc l)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app equal? m (-> m* <-)) (env ((□? (b co m)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval\n  (app (-> f <-) (app coord r c) x)\n  (env ((□? (c x)) (□? (r x)) (□? (f x)))))\""
  11
  3
  3
  5
  0
  1
  1
  1
  0
  2
  #f
  16/3
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (app board-mark co this-mark (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app andmap (λ (r) ...) (-> is <-)) (env ((□? (c)) (□? (b m)))))\""
  5
  3
  0
  2
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app wins? bo (-> mark <-)) (env ((□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (match (-> l <-) (nil) (cons x xs)) (env ((□? (f acc l)))))\""
  34
  24
  4
  6
  14
  1
  15
  1
  31/42
  15
  #f
  45/8
  ((9/2 5 0) (9/2 5 0) (9/2 5 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app oc< oc₀ (-> oc₁ <-)) (env ((□? (h₀ h₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval\n  (app full? (-> bo <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  9
  5
  0
  4
  1
  0
  1
  1
  1/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app equal? co₀ (-> co <-)) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval\n  (app board-mark (-> co <-) this-mark bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  13
  5
  2
  6
  1
  0
  1
  1
  1/5
  5
  #t
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app mark⁻¹ (-> ma <-)) (env ((□? (bo)) (□? (ma)))))\""
  28
  12
  6
  10
  1
  1
  2
  1
  1/12
  11
  #f
  61/12
  ((1/2 1 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (match (app equal? co₀ co) (#f) (_ (-> (app marked ma) <-)))\n  (env ((□? (co)) (□? (co₀ ma bo)))))\""
  32
  14
  6
  12
  1
  1
  2
  1
  1/14
  13
  #t
  71/14
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (match (-> xs <-) (nil) (cons x rest-xs)) (env ((□? (f xs)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval\n  (app board-lookup co (-> bo <-))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  28
  19
  3
  6
  10
  1
  11
  1
  11/20
  18
  #f
  98/19
  ((2 5/2 0) (2 2 0) (2 5/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (match (-> oc₀ <-) (win) (draw) (lose)) (env ((□? (oc₀ oc₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval (app player (-> (app X) <-) human-action) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> co <-)))\n  (env ((□? ()) (□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (app horizon< (app move-horizon mo₀) (-> (app move-horizon mo₁) <-))\n  (env ((□? (mmo mo₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (match (-> this-play <-) (player mark action))\n  (env ((□? (bo this-play that-play)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app (-> f <-) x) (env ((□? (f xs)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app < (-> sc₀ <-) sc₁) (env ((□? (h₀ h₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env ((□? (bo this-play that-play)))))\""
  8
  5
  0
  3
  1
  0
  1
  1
  1/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   ((#f) (-> mo₀ <-))\n   _)\n  (env ((□? (mmo mo₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval (match i (Ze) ((On) (-> (app On) <-)) (Tw)) (env ((□? (i)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (app ormap (-> f <-) rest-xs) (env ((□? (f xs)))))\""
  21
  11
  4
  6
  3
  1
  4
  1
  3/35
  8
  #f
  58/11
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (λ (r x) (-> (app foldl (λ (c x) ...) x is) <-))\n  (env ((□? (r x)) (□? (f x)))))\""
  47
  28
  8
  11
  13
  2
  15
  1
  33/70
  19
  #f
  137/28
  ((2 5/2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (match oc₀ ((win) (-> (app #f) <-)) (draw) (lose))\n  (env ((□? (oc₀ oc₁)))))\""
  50
  30
  8
  12
  13
  2
  15
  1
  3/7
  21
  #t
  49/10
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app + (-> sc <-) 1) (env ((□? (h)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval\n  (app play-turn empty-board (-> player-one <-) player-two)\n  (env ((□? (player-one player-two)))))\""
  15
  7
  4
  4
  0
  1
  1
  1
  0
  6
  #f
  37/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app f (-> x <-) acc) (env ((□? (f acc l)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (match (-> mmo <-) (some mo₀) (none)) (env ((□? (mmo mo₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval (match ma (X) ((O) (-> (app X) <-))) (env ((□? (ma)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (match (app wins? bo this-mark) (#f) (_ (-> (app horizon (app win) 0) <-)))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  7
  4
  0
  3
  0
  0
  0
  1
  0
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval (app cons (-> (app Tw) <-) (app nil)) (env ()))\""
  9
  6
  0
  3
  2
  0
  2
  1
  1/3
  6
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...)\n  (env ((□? (bo this-play that-play)))))\""
  17
  11
  0
  6
  3
  0
  3
  1
  3/11
  11
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval (app cons (app Tw) (-> (app nil) <-)) (env ()))\""
  19
  13
  0
  6
  5
  0
  5
  1
  5/13
  13
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match l (nil) ((cons x xs) (-> (app foldl f (app f x acc) xs) <-)))\n  (env ((□? (f acc l)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match (app b co) (blank) ((marked m*) (-> (app equal? m m*) <-)))\n  (env ((□? (b co m)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval\n  (app board-mark (-> co <-) this-mark bo)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  13
  5
  2
  6
  1
  0
  1
  1
  1/5
  5
  #t
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval (app player (-> (app X) <-) human-action) (env ((□? ()))))\""
  16
  7
  2
  7
  1
  0
  1
  1
  1/7
  7
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval\n  (match\n   (-> (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) <-)\n   (#f)\n   _)\n  (env ((□? (mmo mo₁)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (app cons (-> (app Ze) <-) (app cons (app On) (app cons (app Tw) (app nil))))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord rc (app i⁻¹ rc)) (-> m <-))\n  (env ((□? (rc)) (□? (b m)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval\n  (app move (-> co <-) (match (app wins? bo this-mark) ...))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  13
  5
  2
  6
  1
  0
  1
  1
  1/5
  5
  #t
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (app fold/coord (λ (co mm) ...) (-> (app none) <-))\n  (env ((□? (bo this-mark that-mark)))))\""
  16
  7
  2
  7
  1
  0
  1
  1
  1/7
  7
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval (app equal? (-> co₀ <-) co) (env ((□? (co)) (□? (co₀ ma bo)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval (match (-> ma <-) (X) (O)) (env ((□? (ma)))))\""
  28
  11
  6
  11
  0
  2
  2
  1
  0
  9
  #f
  57/11
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (match some-v-v ((some some-v-x) (-> some-v-x <-)) _)\n  (env ((□? (some-v-v)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  ref-or-constructor
  "\"'(eval\n  (app wins? (-> bo <-) this-mark)\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  9
  5
  0
  4
  1
  0
  1
  1
  1/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  app
  "\"'(eval (app coord rc (-> (app i⁻¹ rc) <-)) (env ((□? (rc)) (□? (b m)))))\""
  #f)
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (app move-horizon (-> (app some-v (app maximin bo that-mark this-mark)) <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  51
  28
  8
  15
  20
  2
  22
  1
  9/13
  17
  #f
  129/28
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  5
  353
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) (app make-ai-action (app X)))\n      (app player (app O) (app make-ai-action (app O))))\n     <-))\n  (env ((□? ()))))\""
  76
  38
  15
  23
  26
  4
  30
  1
  2/3
  21
  #f
  173/38
  ((1 1 0) (1 1 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  tic-tac-toe
  2
  353
  ref-or-constructor
  "\"'(eval\n  (app wins? bo (-> this-mark <-))\n  (env ((□? (co mm)) (□? (bo this-mark that-mark)))))\""
  #f)
