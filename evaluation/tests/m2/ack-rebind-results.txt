'(expression:
  (letrec ((ack
            (λ (m n)
              (match
               (app = m 0)
               ((#f)
                (match
                 (app = n 0)
                 ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
                 (_ (app ack (app - m 1) 1))))
               (_ (app + n 1))))))
    (app ack 3 12)))
(list
 'query:
 '(app (-> + <-) n 1)
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: (#<procedure:do-add>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> m <-) (app - n 1))
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   ((#f)
    (match
     (app = n 0)
     ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
     (_ (app ack (app - m 1) 1))))
   (-> _ (app + n 1) <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
(list
 'clos/con:
 (list
  (list
   '(λ (m n)
      (match
       (app = m 0)
       ((#f)
        (match
         (app = n 0)
         ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
         (_ (app ack (app - m 1) 1))))
       (_ (app + n 1))))
   (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> n <-) 1)
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list 'query: '(top) (flatenv '()))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> 1 <-))
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) n 1)
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = n 0) <-)
   ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
   (_ (app ack (app - m 1) 1)))
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (flatenv
    '((match
       (app = n 0)
       ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
       (-> _ (app ack (app - m 1) 1) <-))
      (app ack (app - m 1) (-> (app ack m (app - n 1)) <-)))))
  (list
   '(#t ())
   (flatenv
    '((match
       (app = n 0)
       ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
       (-> _ (app ack (app - m 1) 1) <-))
      (app ack (app - m 1) (-> (app ack m (app - n 1)) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   (-> (#f) (app ack (app - m 1) (app ack m (app - n 1))) <-)
   (_ (app ack (app - m 1) 1)))
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - n (-> 1 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) n 0)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = n 0) <-)
   ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
   (_ (app ack (app - m 1) 1)))
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((match
       (app = n 0)
       (-> (#f) (app ack (app - m 1) (app ack m (app - n 1))) <-)
       (_ (app ack (app - m 1) 1)))
      (letrec (ack) (-> (app ack 3 12) <-)))))
  (list
   '(#f ())
   (flatenv
    '((match
       (app = n 0)
       (-> (#f) (app ack (app - m 1) (app ack m (app - n 1))) <-)
       (_ (app ack (app - m 1) 1)))
      (letrec (ack) (-> (app ack 3 12) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   (->
    (#f)
    (match
     (app = n 0)
     ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
     (_ (app ack (app - m 1) 1)))
    <-)
   (_ (app + n 1)))
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) m 0)
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (flatenv
  '(((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (3 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - n (-> 1 <-))
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app = m (-> 0 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> m <-) (app - n 1))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) n 0)
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = n 0) <-)
   ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
   (_ (app ack (app - m 1) 1)))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (flatenv
    '((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
      (letrec (ack) (-> (app ack 3 12) <-)))))
  (list
   '(#t ())
   (flatenv
    '((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
      (letrec (ack) (-> (app ack 3 12) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) m (app - n 1))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
(list
 'clos/con:
 (list
  (list
   '(λ (m n)
      (match
       (app = m 0)
       ((#f)
        (match
         (app = n 0)
         ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
         (_ (app ack (app - m 1) 1))))
       (_ (app + n 1))))
   (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> n <-) 0)
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) n 0)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> m <-) 0)
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   (->
    (#f)
    (match
     (app = n 0)
     ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
     (_ (app ack (app - m 1) 1)))
    <-)
   (_ (app + n 1)))
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   (-> (#f) (app ack (app - m 1) (app ack m (app - n 1))) <-)
   (_ (app ack (app - m 1) 1)))
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> 1 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> m <-) (app - n 1))
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
   (-> _ (app ack (app - m 1) 1) <-))
 (flatenv
  '(((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (m n)
    (->
     (match
      (app = m 0)
      ((#f)
       (match
        (app = n 0)
        ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
        (_ (app ack (app - m 1) 1))))
      (_ (app + n 1)))
     <-))
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = m (-> 0 <-))
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) n 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = m (-> 0 <-))
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   ((#f)
    (match
     (app = n 0)
     ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
     (_ (app ack (app - m 1) 1))))
   (-> _ (app + n 1) <-))
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
(list
 'clos/con:
 (list
  (list
   '(λ (m n)
      (match
       (app = m 0)
       ((#f)
        (match
         (app = n 0)
         ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
         (_ (app ack (app - m 1) 1))))
       (_ (app + n 1))))
   (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> 1 <-))
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app = m (-> 0 <-))
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> 1 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> + <-) n 1)
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: (#<procedure:do-add>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) 1)
 (flatenv
  '(((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
(list
 'clos/con:
 (list
  (list
   '(λ (m n)
      (match
       (app = m 0)
       ((#f)
        (match
         (app = n 0)
         ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
         (_ (app ack (app - m 1) 1))))
       (_ (app + n 1))))
   (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> m <-) 0)
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) 1)
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) n 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app + (-> n <-) 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   (-> (#f) (app ack (app - m 1) (app ack m (app - n 1))) <-)
   (_ (app ack (app - m 1) 1)))
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) 1)
 (flatenv
  '(((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app + (-> n <-) 1)
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = m 0) <-)
   ((#f)
    (match
     (app = n 0)
     ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
     (_ (app ack (app - m 1) 1))))
   (_ (app + n 1)))
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((match
       (app = n 0)
       ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
       (-> _ (app ack (app - m 1) 1) <-))
      (letrec (ack) (-> (app ack 3 12) <-)))))
  (list
   '(#f ())
   (flatenv
    '((match
       (app = n 0)
       ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
       (-> _ (app ack (app - m 1) 1) <-))
      (letrec (ack) (-> (app ack 3 12) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app ack (-> 3 <-) 12) (flatenv '()))
'(clos/con: ⊥)
'(literals: (3 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - n (-> 1 <-))
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   (-> (#f) (app ack (app - m 1) (app ack m (app - n 1))) <-)
   (_ (app ack (app - m 1) 1)))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> 1 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> m <-) (app - n 1))
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) 1)
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app + n (-> 1 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) m (app - n 1))
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
(list
 'clos/con:
 (list
  (list
   '(λ (m n)
      (match
       (app = m 0)
       ((#f)
        (match
         (app = n 0)
         ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
         (_ (app ack (app - m 1) 1))))
       (_ (app + n 1))))
   (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = n 0) <-)
   ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
   (_ (app ack (app - m 1) 1)))
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (flatenv
    '((match
       (app = n 0)
       (-> (#f) (app ack (app - m 1) (app ack m (app - n 1))) <-)
       (_ (app ack (app - m 1) 1)))
      (match
       (app = n 0)
       ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
       (-> _ (app ack (app - m 1) 1) <-)))))
  (list
   '(#t ())
   (flatenv
    '((match
       (app = n 0)
       (-> (#f) (app ack (app - m 1) (app ack m (app - n 1))) <-)
       (_ (app ack (app - m 1) 1)))
      (match
       (app = n 0)
       ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
       (-> _ (app ack (app - m 1) 1) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = n 0) <-)
   ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
   (_ (app ack (app - m 1) 1)))
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (flatenv
    '((match
       (app = n 0)
       ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
       (-> _ (app ack (app - m 1) 1) <-))
      (match
       (app = n 0)
       (-> (#f) (app ack (app - m 1) (app ack m (app - n 1))) <-)
       (_ (app ack (app - m 1) 1))))))
  (list
   '(#t ())
   (flatenv
    '((match
       (app = n 0)
       ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
       (-> _ (app ack (app - m 1) 1) <-))
      (match
       (app = n 0)
       (-> (#f) (app ack (app - m 1) (app ack m (app - n 1))) <-)
       (_ (app ack (app - m 1) 1))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (flatenv
  '(((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   (->
    (#f)
    (match
     (app = n 0)
     ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
     (_ (app ack (app - m 1) 1)))
    <-)
   (_ (app + n 1)))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   ((#f)
    (match
     (app = n 0)
     ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
     (_ (app ack (app - m 1) 1))))
   (-> _ (app + n 1) <-))
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
(list
 'clos/con:
 (list
  (list
   '(λ (m n)
      (match
       (app = m 0)
       ((#f)
        (match
         (app = n 0)
         ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
         (_ (app ack (app - m 1) 1))))
       (_ (app + n 1))))
   (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = m 0) <-)
   ((#f)
    (match
     (app = n 0)
     ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
     (_ (app ack (app - m 1) 1))))
   (_ (app + n 1)))
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((match
       (app = n 0)
       ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
       (-> _ (app ack (app - m 1) 1) <-))
      (match
       (app = n 0)
       ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
       (-> _ (app ack (app - m 1) 1) <-)))))
  (list
   '(#f ())
   (flatenv
    '((match
       (app = n 0)
       ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
       (-> _ (app ack (app - m 1) 1) <-))
      (match
       (app = n 0)
       ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
       (-> _ (app ack (app - m 1) 1) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app + (-> n <-) 1)
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
   (-> _ (app ack (app - m 1) 1) <-))
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = m 0) <-)
   ((#f)
    (match
     (app = n 0)
     ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
     (_ (app ack (app - m 1) 1))))
   (_ (app + n 1)))
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (flatenv
    '((match
       (app = n 0)
       (-> (#f) (app ack (app - m 1) (app ack m (app - n 1))) <-)
       (_ (app ack (app - m 1) 1)))
      (match
       (app = n 0)
       ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
       (-> _ (app ack (app - m 1) 1) <-)))))
  (list
   '(#t ())
   (flatenv
    '((match
       (app = n 0)
       (-> (#f) (app ack (app - m 1) (app ack m (app - n 1))) <-)
       (_ (app ack (app - m 1) 1)))
      (match
       (app = n 0)
       ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
       (-> _ (app ack (app - m 1) 1) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = n 0) <-)
   ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
   (_ (app ack (app - m 1) 1)))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
      (match
       (app = n 0)
       ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
       (-> _ (app ack (app - m 1) 1) <-)))))
  (list
   '(#f ())
   (flatenv
    '((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
      (match
       (app = n 0)
       ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
       (-> _ (app ack (app - m 1) 1) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> n <-) 1)
 (flatenv
  '(((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (12 ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   (-> (#f) (app ack (app - m 1) (app ack m (app - n 1))) <-)
   (_ (app ack (app - m 1) 1)))
 (flatenv
  '(((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> n <-) 1)
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app = n (-> 0 <-))
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(app + n (-> 1 <-))
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) m (app - n 1))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
(list
 'clos/con:
 (list
  (list
   '(λ (m n)
      (match
       (app = m 0)
       ((#f)
        (match
         (app = n 0)
         ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
         (_ (app ack (app - m 1) 1))))
       (_ (app + n 1))))
   (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) n 1)
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) 1)
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) n 1)
 (flatenv
  '(((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
(list
 'clos/con:
 (list
  (list
   '(λ (m n)
      (match
       (app = m 0)
       ((#f)
        (match
         (app = n 0)
         ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
         (_ (app ack (app - m 1) 1))))
       (_ (app + n 1))))
   (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = n 0) <-)
   ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
   (_ (app ack (app - m 1) 1)))
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((match
       (app = n 0)
       (-> (#f) (app ack (app - m 1) (app ack m (app - n 1))) <-)
       (_ (app ack (app - m 1) 1)))
      (app ack (app - m 1) (-> (app ack m (app - n 1)) <-)))))
  (list
   '(#f ())
   (flatenv
    '((match
       (app = n 0)
       (-> (#f) (app ack (app - m 1) (app ack m (app - n 1))) <-)
       (_ (app ack (app - m 1) 1)))
      (app ack (app - m 1) (-> (app ack m (app - n 1)) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app + (-> n <-) 1)
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> n <-) 0)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = n (-> 0 <-))
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) 1)
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = n 0) <-)
   ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
   (_ (app ack (app - m 1) 1)))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
      (app ack (app - m 1) (-> (app ack m (app - n 1)) <-)))))
  (list
   '(#f ())
   (flatenv
    '((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
      (app ack (app - m 1) (-> (app ack m (app - n 1)) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   (->
    (#f)
    (match
     (app = n 0)
     ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
     (_ (app ack (app - m 1) 1)))
    <-)
   (_ (app + n 1)))
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) m 0)
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app + n (-> 1 <-))
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> m <-) (app - n 1))
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) 1)
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   (-> (#f) (app ack (app - m 1) (app ack m (app - n 1))) <-)
   (_ (app ack (app - m 1) 1)))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> 1 <-))
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app = n (-> 0 <-))
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) 1)
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
(list
 'clos/con:
 (list
  (list
   '(λ (m n)
      (match
       (app = m 0)
       ((#f)
        (match
         (app = n 0)
         ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
         (_ (app ack (app - m 1) 1))))
       (_ (app + n 1))))
   (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> n <-) 0)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack m (-> (app - n 1) <-))
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (3 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> n <-) 1)
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> m <-) (app - n 1))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   (->
    (#f)
    (match
     (app = n 0)
     ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
     (_ (app ack (app - m 1) 1)))
    <-)
   (_ (app + n 1)))
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) 1)
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app + n (-> 1 <-))
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> m <-) 0)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
   (-> _ (app ack (app - m 1) 1) <-))
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   (-> (#f) (app ack (app - m 1) (app ack m (app - n 1))) <-)
   (_ (app ack (app - m 1) 1)))
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) 1)
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
(list
 'clos/con:
 (list
  (list
   '(λ (m n)
      (match
       (app = m 0)
       ((#f)
        (match
         (app = n 0)
         ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
         (_ (app ack (app - m 1) 1))))
       (_ (app + n 1))))
   (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) m 0)
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app ack 3 (-> 12 <-)) (flatenv '()))
'(clos/con: ⊥)
'(literals: (12 ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) n 1)
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) n 0)
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   ((#f)
    (match
     (app = n 0)
     ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
     (_ (app ack (app - m 1) 1))))
   (-> _ (app + n 1) <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
   (-> _ (app ack (app - m 1) 1) <-))
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = n (-> 0 <-))
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (m n)
    (->
     (match
      (app = m 0)
      ((#f)
       (match
        (app = n 0)
        ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
        (_ (app ack (app - m 1) 1))))
      (_ (app + n 1)))
     <-))
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> n <-) 0)
 (flatenv
  '(((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (12 ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) m (app - n 1))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
(list
 'clos/con:
 (list
  (list
   '(λ (m n)
      (match
       (app = m 0)
       ((#f)
        (match
         (app = n 0)
         ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
         (_ (app ack (app - m 1) 1))))
       (_ (app + n 1))))
   (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> n <-) 1)
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) m 0)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> m <-) 0)
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> n <-) 0)
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app + n (-> 1 <-))
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   ((#f)
    (match
     (app = n 0)
     ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
     (_ (app ack (app - m 1) 1))))
   (-> _ (app + n 1) <-))
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - n (-> 1 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (m n)
    (->
     (match
      (app = m 0)
      ((#f)
       (match
        (app = n 0)
        ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
        (_ (app ack (app - m 1) 1))))
      (_ (app + n 1)))
     <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> 1 <-))
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack m (-> (app - n 1) <-))
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> + <-) n 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: (#<procedure:do-add>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> m <-) 0)
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> m <-) (app - n 1))
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> + <-) n 1)
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: (#<procedure:do-add>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> n <-) 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> + <-) n 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: (#<procedure:do-add>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> n <-) 0)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = m (-> 0 <-))
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) 1)
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
(list
 'clos/con:
 (list
  (list
   '(λ (m n)
      (match
       (app = m 0)
       ((#f)
        (match
         (app = n 0)
         ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
         (_ (app ack (app - m 1) 1))))
       (_ (app + n 1))))
   (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> m <-) 0)
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = m 0) <-)
   ((#f)
    (match
     (app = n 0)
     ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
     (_ (app ack (app - m 1) 1))))
   (_ (app + n 1)))
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (flatenv
    '((match
       (app = n 0)
       (-> (#f) (app ack (app - m 1) (app ack m (app - n 1))) <-)
       (_ (app ack (app - m 1) 1)))
      (match
       (app = n 0)
       (-> (#f) (app ack (app - m 1) (app ack m (app - n 1))) <-)
       (_ (app ack (app - m 1) 1))))))
  (list
   '(#t ())
   (flatenv
    '((match
       (app = n 0)
       (-> (#f) (app ack (app - m 1) (app ack m (app - n 1))) <-)
       (_ (app ack (app - m 1) 1)))
      (match
       (app = n 0)
       (-> (#f) (app ack (app - m 1) (app ack m (app - n 1))) <-)
       (_ (app ack (app - m 1) 1))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> n <-) 1)
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) n 0)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (flatenv
  '(((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (3 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - n (-> 1 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
(list
 'clos/con:
 (list
  (list
   '(λ (m n)
      (match
       (app = m 0)
       ((#f)
        (match
         (app = n 0)
         ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
         (_ (app ack (app - m 1) 1))))
       (_ (app + n 1))))
   (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> m <-) (app - n 1))
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (flatenv
  '(((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) m (app - n 1))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
(list
 'clos/con:
 (list
  (list
   '(λ (m n)
      (match
       (app = m 0)
       ((#f)
        (match
         (app = n 0)
         ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
         (_ (app ack (app - m 1) 1))))
       (_ (app + n 1))))
   (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> n <-) 0)
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app = m (-> 0 <-))
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> + <-) n 1)
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: (#<procedure:do-add>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - n (-> 1 <-))
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> n <-) 1)
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = m 0) <-)
   ((#f)
    (match
     (app = n 0)
     ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
     (_ (app ack (app - m 1) 1))))
   (_ (app + n 1)))
 (flatenv
  '(((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
(list
 'clos/con:
 (list
  (list '(#f ()) (flatenv '((letrec (ack) (-> (app ack 3 12) <-)))))
  (list '(#t ()) (flatenv '((letrec (ack) (-> (app ack 3 12) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = n (-> 0 <-))
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> + <-) n 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#<procedure:do-add>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   (->
    (#f)
    (match
     (app = n 0)
     ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
     (_ (app ack (app - m 1) 1)))
    <-)
   (_ (app + n 1)))
 (flatenv
  '(((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (m n)
    (->
     (match
      (app = m 0)
      ((#f)
       (match
        (app = n 0)
        ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
        (_ (app ack (app - m 1) 1))))
      (_ (app + n 1)))
     <-))
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
(list
 'clos/con:
 (list
  (list
   '(λ (m n)
      (match
       (app = m 0)
       ((#f)
        (match
         (app = n 0)
         ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
         (_ (app ack (app - m 1) 1))))
       (_ (app + n 1))))
   (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (m n)
    (->
     (match
      (app = m 0)
      ((#f)
       (match
        (app = n 0)
        ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
        (_ (app ack (app - m 1) 1))))
      (_ (app + n 1)))
     <-))
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app + (-> n <-) 1)
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) m (app - n 1))
 (flatenv
  '(((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
(list
 'clos/con:
 (list
  (list
   '(λ (m n)
      (match
       (app = m 0)
       ((#f)
        (match
         (app = n 0)
         ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
         (_ (app ack (app - m 1) 1))))
       (_ (app + n 1))))
   (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = m (-> 0 <-))
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) n 0)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app = n (-> 0 <-))
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   (->
    (#f)
    (match
     (app = n 0)
     ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
     (_ (app ack (app - m 1) 1)))
    <-)
   (_ (app + n 1)))
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (m n)
    (->
     (match
      (app = m 0)
      ((#f)
       (match
        (app = n 0)
        ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
        (_ (app ack (app - m 1) 1))))
      (_ (app + n 1)))
     <-))
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack m (-> (app - n 1) <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = m (-> 0 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) m 0)
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   (-> (#f) (app ack (app - m 1) (app ack m (app - n 1))) <-)
   (_ (app ack (app - m 1) 1)))
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> + <-) n 1)
 (flatenv
  '(((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#<procedure:do-add>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app + n (-> 1 <-))
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) 1)
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
(list
 'clos/con:
 (list
  (list
   '(λ (m n)
      (match
       (app = m 0)
       ((#f)
        (match
         (app = n 0)
         ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
         (_ (app ack (app - m 1) 1))))
       (_ (app + n 1))))
   (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app + n (-> 1 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) m (app - n 1))
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
(list
 'clos/con:
 (list
  (list
   '(λ (m n)
      (match
       (app = m 0)
       ((#f)
        (match
         (app = n 0)
         ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
         (_ (app ack (app - m 1) 1))))
       (_ (app + n 1))))
   (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack m (-> (app - n 1) <-))
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
   (-> _ (app ack (app - m 1) 1) <-))
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
 (flatenv
  '(((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (flatenv
  '(((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> n <-) 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list 'query: '(app (-> ack <-) 3 12) (flatenv '()))
(list
 'clos/con:
 (list
  (list
   '(λ (m n)
      (match
       (app = m 0)
       ((#f)
        (match
         (app = n 0)
         ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
         (_ (app ack (app - m 1) 1))))
       (_ (app + n 1))))
   (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) m 0)
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app + (-> n <-) 1)
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
(list
 'clos/con:
 (list
  (list
   '(λ (m n)
      (match
       (app = m 0)
       ((#f)
        (match
         (app = n 0)
         ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
         (_ (app ack (app - m 1) 1))))
       (_ (app + n 1))))
   (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) m (app - n 1))
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
(list
 'clos/con:
 (list
  (list
   '(λ (m n)
      (match
       (app = m 0)
       ((#f)
        (match
         (app = n 0)
         ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
         (_ (app ack (app - m 1) 1))))
       (_ (app + n 1))))
   (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> n <-) 0)
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (m n)
    (->
     (match
      (app = m 0)
      ((#f)
       (match
        (app = n 0)
        ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
        (_ (app ack (app - m 1) 1))))
      (_ (app + n 1)))
     <-))
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
(list
 'clos/con:
 (list
  (list
   '(λ (m n)
      (match
       (app = m 0)
       ((#f)
        (match
         (app = n 0)
         ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
         (_ (app ack (app - m 1) 1))))
       (_ (app + n 1))))
   (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) n 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> n <-) 0)
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack m (-> (app - n 1) <-))
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = m 0) <-)
   ((#f)
    (match
     (app = n 0)
     ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
     (_ (app ack (app - m 1) 1))))
   (_ (app + n 1)))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (flatenv
    '((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
      (letrec (ack) (-> (app ack 3 12) <-)))))
  (list
   '(#t ())
   (flatenv
    '((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
      (letrec (ack) (-> (app ack 3 12) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack m (-> (app - n 1) <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app + (-> n <-) 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - n (-> 1 <-))
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app + (-> n <-) 1)
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - n (-> 1 <-))
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> m <-) (app - n 1))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (3 ⊥ ⊥ ⊥))
(list
 'query:
 '(app + n (-> 1 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> 1 <-))
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - n (-> 1 <-))
 (flatenv
  '(((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app = n (-> 0 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app + (-> n <-) 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) 1)
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack m (-> (app - n 1) <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = m 0) <-)
   ((#f)
    (match
     (app = n 0)
     ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
     (_ (app ack (app - m 1) 1))))
   (_ (app + n 1)))
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((match
       (app = n 0)
       (-> (#f) (app ack (app - m 1) (app ack m (app - n 1))) <-)
       (_ (app ack (app - m 1) 1)))
      (letrec (ack) (-> (app ack 3 12) <-)))))
  (list
   '(#f ())
   (flatenv
    '((match
       (app = n 0)
       (-> (#f) (app ack (app - m 1) (app ack m (app - n 1))) <-)
       (_ (app ack (app - m 1) 1)))
      (letrec (ack) (-> (app ack 3 12) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) n 1)
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = m (-> 0 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) 1)
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
(list
 'clos/con:
 (list
  (list
   '(λ (m n)
      (match
       (app = m 0)
       ((#f)
        (match
         (app = n 0)
         ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
         (_ (app ack (app - m 1) 1))))
       (_ (app + n 1))))
   (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> n <-) 0)
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
(list
 'clos/con:
 (list
  (list
   '(λ (m n)
      (match
       (app = m 0)
       ((#f)
        (match
         (app = n 0)
         ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
         (_ (app ack (app - m 1) 1))))
       (_ (app + n 1))))
   (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - n (-> 1 <-))
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
   (-> _ (app ack (app - m 1) 1) <-))
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) n 1)
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) n 0)
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app + (-> n <-) 1)
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack m (-> (app - n 1) <-))
 (flatenv
  '(((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
(list
 'clos/con:
 (list
  (list
   '(λ (m n)
      (match
       (app = m 0)
       ((#f)
        (match
         (app = n 0)
         ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
         (_ (app ack (app - m 1) 1))))
       (_ (app + n 1))))
   (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> 1 <-))
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) m 0)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> n <-) 0)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) n 0)
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) 1)
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = m 0) <-)
   ((#f)
    (match
     (app = n 0)
     ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
     (_ (app ack (app - m 1) 1))))
   (_ (app + n 1)))
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((match
       (app = n 0)
       (-> (#f) (app ack (app - m 1) (app ack m (app - n 1))) <-)
       (_ (app ack (app - m 1) 1)))
      (app ack (app - m 1) (-> (app ack m (app - n 1)) <-)))))
  (list
   '(#f ())
   (flatenv
    '((match
       (app = n 0)
       (-> (#f) (app ack (app - m 1) (app ack m (app - n 1))) <-)
       (_ (app ack (app - m 1) 1)))
      (app ack (app - m 1) (-> (app ack m (app - n 1)) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (3 ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   ((#f)
    (match
     (app = n 0)
     ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
     (_ (app ack (app - m 1) 1))))
   (-> _ (app + n 1) <-))
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   ((#f)
    (match
     (app = n 0)
     ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
     (_ (app ack (app - m 1) 1))))
   (-> _ (app + n 1) <-))
 (flatenv
  '(((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> m <-) (app - n 1))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   (->
    (#f)
    (match
     (app = n 0)
     ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
     (_ (app ack (app - m 1) 1)))
    <-)
   (_ (app + n 1)))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
(list
 'clos/con:
 (list
  (list
   '(λ (m n)
      (match
       (app = m 0)
       ((#f)
        (match
         (app = n 0)
         ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
         (_ (app ack (app - m 1) 1))))
       (_ (app + n 1))))
   (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = m (-> 0 <-))
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) 1)
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
(list
 'clos/con:
 (list
  (list
   '(λ (m n)
      (match
       (app = m 0)
       ((#f)
        (match
         (app = n 0)
         ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
         (_ (app ack (app - m 1) 1))))
       (_ (app + n 1))))
   (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> n <-) 1)
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> + <-) n 1)
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#<procedure:do-add>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
(list
 'clos/con:
 (list
  (list
   '(λ (m n)
      (match
       (app = m 0)
       ((#f)
        (match
         (app = n 0)
         ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
         (_ (app ack (app - m 1) 1))))
       (_ (app + n 1))))
   (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) m 0)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = m (-> 0 <-))
 (flatenv
  '(((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (m n)
    (->
     (match
      (app = m 0)
      ((#f)
       (match
        (app = n 0)
        ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
        (_ (app ack (app - m 1) 1))))
      (_ (app + n 1)))
     <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = m 0) <-)
   ((#f)
    (match
     (app = n 0)
     ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
     (_ (app ack (app - m 1) 1))))
   (_ (app + n 1)))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
      (match
       (app = n 0)
       ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
       (-> _ (app ack (app - m 1) 1) <-)))))
  (list
   '(#f ())
   (flatenv
    '((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
      (match
       (app = n 0)
       ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
       (-> _ (app ack (app - m 1) 1) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = n (-> 0 <-))
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) m 0)
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = m 0) <-)
   ((#f)
    (match
     (app = n 0)
     ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
     (_ (app ack (app - m 1) 1))))
   (_ (app + n 1)))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
      (match
       (app = n 0)
       (-> (#f) (app ack (app - m 1) (app ack m (app - n 1))) <-)
       (_ (app ack (app - m 1) 1))))))
  (list
   '(#f ())
   (flatenv
    '((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
      (match
       (app = n 0)
       (-> (#f) (app ack (app - m 1) (app ack m (app - n 1))) <-)
       (_ (app ack (app - m 1) 1))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = m 0) <-)
   ((#f)
    (match
     (app = n 0)
     ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
     (_ (app ack (app - m 1) 1))))
   (_ (app + n 1)))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
      (app ack (app - m 1) (-> (app ack m (app - n 1)) <-)))))
  (list
   '(#f ())
   (flatenv
    '((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
      (app ack (app - m 1) (-> (app ack m (app - n 1)) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) n 0)
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack m (-> (app - n 1) <-))
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) m 0)
 (flatenv
  '(((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - n (-> 1 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app + n (-> 1 <-))
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(letrec ((->
            ack
            =
            (λ (m n)
              (match
               (app = m 0)
               ((#f)
                (match
                 (app = n 0)
                 ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
                 (_ (app ack (app - m 1) 1))))
               (_ (app + n 1))))
            <-))
    bod)
 (flatenv '()))
(list
 'clos/con:
 (list
  (list
   '(λ (m n)
      (match
       (app = m 0)
       ((#f)
        (match
         (app = n 0)
         ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
         (_ (app ack (app - m 1) 1))))
       (_ (app + n 1))))
   (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) m 0)
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) 1)
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
(list
 'clos/con:
 (list
  (list
   '(λ (m n)
      (match
       (app = m 0)
       ((#f)
        (match
         (app = n 0)
         ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
         (_ (app ack (app - m 1) 1))))
       (_ (app + n 1))))
   (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = n 0) <-)
   ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
   (_ (app ack (app - m 1) 1)))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
      (match
       (app = n 0)
       (-> (#f) (app ack (app - m 1) (app ack m (app - n 1))) <-)
       (_ (app ack (app - m 1) 1))))))
  (list
   '(#f ())
   (flatenv
    '((app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
      (match
       (app = n 0)
       (-> (#f) (app ack (app - m 1) (app ack m (app - n 1))) <-)
       (_ (app ack (app - m 1) 1))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> n <-) 0)
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> m <-) 0)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack m (-> (app - n 1) <-))
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = m 0) <-)
   ((#f)
    (match
     (app = n 0)
     ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
     (_ (app ack (app - m 1) 1))))
   (_ (app + n 1)))
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (flatenv
    '((match
       (app = n 0)
       ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
       (-> _ (app ack (app - m 1) 1) <-))
      (match
       (app = n 0)
       (-> (#f) (app ack (app - m 1) (app ack m (app - n 1))) <-)
       (_ (app ack (app - m 1) 1))))))
  (list
   '(#t ())
   (flatenv
    '((match
       (app = n 0)
       ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
       (-> _ (app ack (app - m 1) 1) <-))
      (match
       (app = n 0)
       (-> (#f) (app ack (app - m 1) (app ack m (app - n 1))) <-)
       (_ (app ack (app - m 1) 1))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = n (-> 0 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = n 0) <-)
   ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
   (_ (app ack (app - m 1) 1)))
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((match
       (app = n 0)
       ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
       (-> _ (app ack (app - m 1) 1) <-))
      (letrec (ack) (-> (app ack 3 12) <-)))))
  (list
   '(#f ())
   (flatenv
    '((match
       (app = n 0)
       ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
       (-> _ (app ack (app - m 1) 1) <-))
      (letrec (ack) (-> (app ack 3 12) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
   (-> _ (app ack (app - m 1) 1) <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
 (flatenv
  '(((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) m (app - n 1))
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
(list
 'clos/con:
 (list
  (list
   '(λ (m n)
      (match
       (app = m 0)
       ((#f)
        (match
         (app = n 0)
         ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
         (_ (app ack (app - m 1) 1))))
       (_ (app + n 1))))
   (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   (->
    (#f)
    (match
     (app = n 0)
     ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
     (_ (app ack (app - m 1) 1)))
    <-)
   (_ (app + n 1)))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (m n)
    (->
     (match
      (app = m 0)
      ((#f)
       (match
        (app = n 0)
        ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
        (_ (app ack (app - m 1) 1))))
      (_ (app + n 1)))
     <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> m <-) 0)
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> m <-) (app - n 1))
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
(list
 'clos/con:
 (list
  (list
   '(λ (m n)
      (match
       (app = m 0)
       ((#f)
        (match
         (app = n 0)
         ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
         (_ (app ack (app - m 1) 1))))
       (_ (app + n 1))))
   (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack m (-> (app - n 1) <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   (-> (#f) (app ack (app - m 1) (app ack m (app - n 1))) <-)
   (_ (app ack (app - m 1) 1)))
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> + <-) n 1)
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: (#<procedure:do-add>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) n 1)
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> 1 <-))
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   (->
    (#f)
    (match
     (app = n 0)
     ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
     (_ (app ack (app - m 1) 1)))
    <-)
   (_ (app + n 1)))
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (m n)
    (->
     (match
      (app = m 0)
      ((#f)
       (match
        (app = n 0)
        ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
        (_ (app ack (app - m 1) 1))))
      (_ (app + n 1)))
     <-))
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
   (-> _ (app ack (app - m 1) 1) <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   (-> (#f) (app ack (app - m 1) (app ack m (app - n 1))) <-)
   (_ (app ack (app - m 1) 1)))
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) m (app - n 1))
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
(list
 'clos/con:
 (list
  (list
   '(λ (m n)
      (match
       (app = m 0)
       ((#f)
        (match
         (app = n 0)
         ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
         (_ (app ack (app - m 1) 1))))
       (_ (app + n 1))))
   (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   ((#f)
    (match
     (app = n 0)
     ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
     (_ (app ack (app - m 1) 1))))
   (-> _ (app + n 1) <-))
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (m n)
    (->
     (match
      (app = m 0)
      ((#f)
       (match
        (app = n 0)
        ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
        (_ (app ack (app - m 1) 1))))
      (_ (app + n 1)))
     <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = n (-> 0 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
(list
 'clos/con:
 (list
  (list
   '(λ (m n)
      (match
       (app = m 0)
       ((#f)
        (match
         (app = n 0)
         ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
         (_ (app ack (app - m 1) 1))))
       (_ (app + n 1))))
   (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) m (app - n 1))
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
(list
 'clos/con:
 (list
  (list
   '(λ (m n)
      (match
       (app = m 0)
       ((#f)
        (match
         (app = n 0)
         ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
         (_ (app ack (app - m 1) 1))))
       (_ (app + n 1))))
   (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - n (-> 1 <-))
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app + (-> n <-) 1)
 (flatenv
  '(((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (12 ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> n <-) 0)
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> m <-) 0)
 (flatenv
  '(((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (3 ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> 1 <-))
 (flatenv
  '(((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> + <-) n 1)
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#<procedure:do-add>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> m <-) 0)
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app + n (-> 1 <-))
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app = n (-> 0 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (m n)
    (->
     (match
      (app = m 0)
      ((#f)
       (match
        (app = n 0)
        ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
        (_ (app ack (app - m 1) 1))))
      (_ (app + n 1)))
     <-))
 (flatenv
  '(((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app + n (-> 1 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app + n (-> 1 <-))
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> m <-) 0)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> + <-) n 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: (#<procedure:do-add>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) 1)
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
(list
 'clos/con:
 (list
  (list
   '(λ (m n)
      (match
       (app = m 0)
       ((#f)
        (match
         (app = n 0)
         ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
         (_ (app ack (app - m 1) 1))))
       (_ (app + n 1))))
   (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) n 0)
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
 (flatenv
  '(((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
(list
 'clos/con:
 (list
  (list
   '(λ (m n)
      (match
       (app = m 0)
       ((#f)
        (match
         (app = n 0)
         ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
         (_ (app ack (app - m 1) 1))))
       (_ (app + n 1))))
   (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack m (-> (app - n 1) <-))
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = m 0) <-)
   ((#f)
    (match
     (app = n 0)
     ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
     (_ (app ack (app - m 1) 1))))
   (_ (app + n 1)))
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (flatenv
    '((match
       (app = n 0)
       ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
       (-> _ (app ack (app - m 1) 1) <-))
      (app ack (app - m 1) (-> (app ack m (app - n 1)) <-)))))
  (list
   '(#t ())
   (flatenv
    '((match
       (app = n 0)
       ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
       (-> _ (app ack (app - m 1) 1) <-))
      (app ack (app - m 1) (-> (app ack m (app - n 1)) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> 1 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   (->
    (#f)
    (match
     (app = n 0)
     ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
     (_ (app ack (app - m 1) 1)))
    <-)
   (_ (app + n 1)))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
   (-> _ (app ack (app - m 1) 1) <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
   (-> _ (app ack (app - m 1) 1) <-))
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   ((#f)
    (match
     (app = n 0)
     ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
     (_ (app ack (app - m 1) 1))))
   (-> _ (app + n 1) <-))
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) n 1)
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = n 0) <-)
   ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
   (_ (app ack (app - m 1) 1)))
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (flatenv
    '((match
       (app = n 0)
       ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
       (-> _ (app ack (app - m 1) 1) <-))
      (match
       (app = n 0)
       ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
       (-> _ (app ack (app - m 1) 1) <-)))))
  (list
   '(#f ())
   (flatenv
    '((match
       (app = n 0)
       ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
       (-> _ (app ack (app - m 1) 1) <-))
      (match
       (app = n 0)
       ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
       (-> _ (app ack (app - m 1) 1) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
   (-> _ (app ack (app - m 1) 1) <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = n (-> 0 <-))
 (flatenv
  '(((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) m 0)
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
(list
 'clos/con:
 (list
  (list
   '(λ (m n)
      (match
       (app = m 0)
       ((#f)
        (match
         (app = n 0)
         ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
         (_ (app ack (app - m 1) 1))))
       (_ (app + n 1))))
   (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> n <-) 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   (-> (#f) (app ack (app - m 1) (app ack m (app - n 1))) <-)
   (_ (app ack (app - m 1) 1)))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) m (app - n 1))
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
(list
 'clos/con:
 (list
  (list
   '(λ (m n)
      (match
       (app = m 0)
       ((#f)
        (match
         (app = n 0)
         ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
         (_ (app ack (app - m 1) 1))))
       (_ (app + n 1))))
   (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   ((#f)
    (match
     (app = n 0)
     ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
     (_ (app ack (app - m 1) 1))))
   (-> _ (app + n 1) <-))
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) m 0)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack m (-> (app - n 1) <-))
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> n <-) 1)
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) n 0)
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   ((#f)
    (match
     (app = n 0)
     ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
     (_ (app ack (app - m 1) 1))))
   (-> _ (app + n 1) <-))
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app + (-> n <-) 1)
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (flatenv
  '(((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> m <-) 0)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (3 ⊥ ⊥ ⊥))
(list 'query: '(letrec (ack) (-> (app ack 3 12) <-)) (flatenv '()))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   (-> (#f) (app ack (app - m 1) (app ack m (app - n 1))) <-)
   (_ (app ack (app - m 1) 1)))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - n (-> 1 <-))
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app = n (-> 0 <-))
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   (-> (#f) (app ack (app - m 1) (app ack m (app - n 1))) <-)
   (_ (app ack (app - m 1) 1)))
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   ((#f)
    (match
     (app = n 0)
     ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
     (_ (app ack (app - m 1) 1))))
   (-> _ (app + n 1) <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> m <-) 1)
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = m (-> 0 <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   (->
    (#f)
    (match
     (app = n 0)
     ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
     (_ (app ack (app - m 1) 1)))
    <-)
   (_ (app + n 1)))
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   (->
    (#f)
    (match
     (app = n 0)
     ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
     (_ (app ack (app - m 1) 1)))
    <-)
   (_ (app + n 1)))
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app + (-> n <-) 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
   (-> _ (app ack (app - m 1) 1) <-))
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) n 1)
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = (-> m <-) 0)
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> m <-) (app - n 1))
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
(list
 'clos/con:
 (list
  (list
   '(λ (m n)
      (match
       (app = m 0)
       ((#f)
        (match
         (app = n 0)
         ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
         (_ (app ack (app - m 1) 1))))
       (_ (app + n 1))))
   (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> n <-) 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) n 0)
 (flatenv
  '(((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) m 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> = <-) n 0)
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> + <-) n 1)
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: (#<procedure:do-add>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = n 0) <-)
   ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
   (_ (app ack (app - m 1) 1)))
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (flatenv
    '((match
       (app = n 0)
       (-> (#f) (app ack (app - m 1) (app ack m (app - n 1))) <-)
       (_ (app ack (app - m 1) 1)))
      (match
       (app = n 0)
       (-> (#f) (app ack (app - m 1) (app ack m (app - n 1))) <-)
       (_ (app ack (app - m 1) 1))))))
  (list
   '(#t ())
   (flatenv
    '((match
       (app = n 0)
       (-> (#f) (app ack (app - m 1) (app ack m (app - n 1))) <-)
       (_ (app ack (app - m 1) 1)))
      (match
       (app = n 0)
       (-> (#f) (app ack (app - m 1) (app ack m (app - n 1))) <-)
       (_ (app ack (app - m 1) 1))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - m (-> 1 <-))
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (m n)
    (->
     (match
      (app = m 0)
      ((#f)
       (match
        (app = n 0)
        ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
        (_ (app ack (app - m 1) 1))))
      (_ (app + n 1)))
     <-))
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app = m (-> 0 <-))
 (flatenv
  '(((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1)))
    ((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   ((#f)
    (match
     (app = n 0)
     ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
     (_ (app ack (app - m 1) 1))))
   (-> _ (app + n 1) <-))
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) m (app - n 1))
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
(list
 'clos/con:
 (list
  (list
   '(λ (m n)
      (match
       (app = m 0)
       ((#f)
        (match
         (app = n 0)
         ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
         (_ (app ack (app - m 1) 1))))
       (_ (app + n 1))))
   (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (app - m 1) (-> 1 <-))
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((match-clause
      (#f)
      (app = n 0)
      ()
      ((_ (app ack (app - m 1) 1)))
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     (app ack m (app - n 1))))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) n 1)
 (flatenv
  '(((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1))
    ((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
   (-> _ (app ack (app - m 1) 1) <-))
 (flatenv
  '(((match-clause
      _
      (app = n 0)
      (((#f) (app ack (app - m 1) (app ack m (app - n 1)))))
      ()
      (match-clause
       (#f)
       (app = m 0)
       ()
       ((_ (app + n 1)))
       (bod (m n) (bin letrec ack (app ack 3 12) () () (top)))))
     app
     ack
     (app - m 1)
     1)
    ((ran
      ack
      ((app - m 1))
      ()
      (match-clause
       (#f)
       (app = n 0)
       ()
       ((_ (app ack (app - m 1) 1)))
       (match-clause
        (#f)
        (app = m 0)
        ()
        ((_ (app + n 1)))
        (bod (m n) (bin letrec ack (app ack 3 12) () () (top))))))
     app
     ack
     m
     (app - n 1)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app + n (-> 1 <-))
 (flatenv
  '(((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = n 0) <-)
   ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
   (_ (app ack (app - m 1) 1)))
 (flatenv
  '(((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
(list
 'clos/con:
 (list
  (list '(#f ()) (flatenv '((letrec (ack) (-> (app ack 3 12) <-)))))
  (list '(#t ()) (flatenv '((letrec (ack) (-> (app ack 3 12) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> m <-) (app - n 1))
 (flatenv
  '(((let-bod
      letrec
      ((ack
        (λ (m n)
          (match
           (app = m 0)
           ((#f)
            (match
             (app = n 0)
             ((#f) (app ack (app - m 1) (app ack m (app - n 1))))
             (_ (app ack (app - m 1) 1))))
           (_ (app + n 1))))))
      (top))
     app
     ack
     3
     12))))
'(clos/con: ⊥)
'(literals: (3 ⊥ ⊥ ⊥))
