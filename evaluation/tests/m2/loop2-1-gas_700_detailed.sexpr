'(clean-cache
  loop2-1
  2
  700
  45
  letrec
  "'(eval ((top) letrec (lp1) ...) (env ()))"
  #f
  425
  365
  44
  16
  208
  29
  237
  1
  689/900
  208
  #f
  554/365
  (213 220 3))
'(clean-cache
  loop2-1
  2
  700
  45
  lambda
  "'(eval (letrec (... () (lp1 (-> (λ (i x) ...) <-)) () ...) ...) (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  loop2-1
  2
  700
  45
  match
  "'(eval (λ (i x) (-> (match (app = 0 i) ...) <-)) (env ((□? (i x)))))"
  #f
  479
  420
  44
  15
  246
  29
  275
  1
  23747/35112
  234
  #f
  53/35
  (202 208 4))
'(clean-cache
  loop2-1
  2
  700
  45
  ref-or-constructor
  "'(eval (match (app = 0 i) (#f) (_ (-> x <-))) (env ((□? (i x)))))"
  #f
  315
  256
  44
  15
  119
  29
  148
  1
  11762/21945
  152
  #f
  195/128
  (158 162 2))
'(clean-cache
  loop2-1
  2
  700
  45
  letrec
  "'(eval\n  (match (app = 0 i) ((#f) (-> (letrec (lp2) ...) <-)) _)\n  (env ((□? (i x)))))"
  #f
  669
  609
  40
  20
  256
  29
  285
  1
  8176279/14202650
  366
  #f
  131/87
  (242 249 4))
'(clean-cache
  loop2-1
  2
  700
  45
  lambda
  "'(eval\n  (letrec (... () (lp2 (-> (λ (j f y) ...) <-)) () ...) ...)\n  (env ((□? (i x)))))"
  (lambda number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  loop2-1
  2
  700
  45
  match
  "'(eval\n  (λ (j f y) (-> (match (app = 0 j) ...) <-))\n  (env ((□? (j f y)) (□? (i x)))))"
  #f
  #f)
'(clean-cache
  loop2-1
  2
  700
  45
  app
  "'(eval\n  (match (app = 0 j) (#f) (_ (-> (app lp1 (app - i 1) y) <-)))\n  (env ((□? (j f y)) (□? (i x)))))"
  #f
  485
  425
  44
  16
  206
  29
  235
  1
  571/980
  240
  #f
  642/425
  (260 267 4))
'(clean-cache
  loop2-1
  2
  700
  45
  ref-or-constructor
  "'(eval (app lp1 (app - i 1) (-> y <-)) (env ((□? (j f y)) (□? (i x)))))"
  #f
  400
  321
  59
  20
  122
  29
  151
  1
  1716781/3712800
  189
  #f
  547/321
  (220 226 3))
'(clean-cache
  loop2-1
  2
  700
  45
  app
  "'(eval (app lp1 (-> (app - i 1) <-) y) (env ((□? (j f y)) (□? (i x)))))"
  #f
  21
  13
  3
  5
  1
  2
  3
  1
  1/5
  9
  #f
  17/13
  (2 2 0))
'(clean-cache
  loop2-1
  2
  700
  45
  number
  "'(eval (app - i (-> 1 <-)) (env ((□? (j f y)) (□? (i x)))))"
  (number char string quoted constructor)
  3
  1
  0
  2
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  loop2-1
  2
  700
  45
  ref-or-constructor
  "'(eval (app - (-> i <-) 1) (env ((□? (j f y)) (□? (i x)))))"
  #f
  21
  13
  3
  5
  1
  2
  3
  1
  1/5
  9
  #f
  17/13
  (1 1 0))
'(clean-cache
  loop2-1
  2
  700
  45
  ref-or-constructor
  "'(eval (app (-> - <-) i 1) (env ((□? (j f y)) (□? (i x)))))"
  #t
  3
  1
  0
  2
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  loop2-1
  2
  700
  45
  ref-or-constructor
  "'(eval (app (-> lp1 <-) (app - i 1) y) (env ((□? (j f y)) (□? (i x)))))"
  (lambda number char string quoted constructor)
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  loop2-1
  2
  700
  45
  app
  "'(eval\n  (match (app = 0 j) ((#f) (-> (app lp2 (app - j 1) f (app f y)) <-)) _)\n  (env ((□? (j f y)) (□? (i x)))))"
  #f
  635
  575
  40
  20
  230
  29
  259
  1
  1044382081/1772490720
  332
  #f
  893/575
  (284 291 6))
'(clean-cache
  loop2-1
  2
  700
  45
  app
  "'(eval\n  (app lp2 (app - j 1) f (-> (app f y) <-))\n  (env ((□? (j f y)) (□? (i x)))))"
  #f
  410
  329
  59
  22
  122
  29
  151
  1
  1079/2400
  192
  #f
  12/7
  (228 235 3))
'(clean-cache
  loop2-1
  2
  700
  45
  ref-or-constructor
  "'(eval (app f (-> y <-)) (env ((□? (j f y)) (□? (i x)))))"
  #f
  400
  321
  59
  20
  122
  29
  151
  1
  18844811/40840800
  189
  #f
  547/321
  (222 227 4))
'(clean-cache
  loop2-1
  2
  700
  45
  ref-or-constructor
  "'(eval (app (-> f <-) y) (env ((□? (j f y)) (□? (i x)))))"
  #f
  14
  7
  3
  4
  0
  0
  0
  1
  0
  7
  #t
  1
  (2 2 0))
'(clean-cache
  loop2-1
  2
  700
  45
  ref-or-constructor
  "'(eval\n  (app lp2 (app - j 1) (-> f <-) (app f y))\n  (env ((□? (j f y)) (□? (i x)))))"
  #f
  13
  6
  3
  4
  0
  0
  0
  1
  0
  6
  #t
  1
  (2 2 0))
'(clean-cache
  loop2-1
  2
  700
  45
  app
  "'(eval\n  (app lp2 (-> (app - j 1) <-) f (app f y))\n  (env ((□? (j f y)) (□? (i x)))))"
  #f
  28
  21
  3
  4
  0
  0
  0
  1
  0
  13
  #f
  29/21
  (3 3 0))
'(clean-cache
  loop2-1
  2
  700
  45
  number
  "'(eval (app - j (-> 1 <-)) (env ((□? (j f y)) (□? (i x)))))"
  (number char string quoted constructor)
  3
  1
  0
  2
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  loop2-1
  2
  700
  45
  ref-or-constructor
  "'(eval (app - (-> j <-) 1) (env ((□? (j f y)) (□? (i x)))))"
  #f
  28
  21
  3
  4
  0
  0
  0
  1
  0
  13
  #f
  29/21
  (4 4 0))
'(clean-cache
  loop2-1
  2
  700
  45
  ref-or-constructor
  "'(eval (app (-> - <-) j 1) (env ((□? (j f y)) (□? (i x)))))"
  #t
  3
  1
  0
  2
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  loop2-1
  2
  700
  45
  ref-or-constructor
  "'(eval\n  (app (-> lp2 <-) (app - j 1) f (app f y))\n  (env ((□? (j f y)) (□? (i x)))))"
  (lambda number char string quoted constructor)
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  loop2-1
  2
  700
  45
  app
  "'(eval (match (-> (app = 0 j) <-) (#f) _) (env ((□? (j f y)) (□? (i x)))))"
  #f
  44
  37
  3
  4
  0
  0
  0
  1
  0
  24
  #f
  50/37
  (6 6 0))
'(clean-cache
  loop2-1
  2
  700
  45
  ref-or-constructor
  "'(eval (app = 0 (-> j <-)) (env ((□? (j f y)) (□? (i x)))))"
  #f
  29
  22
  3
  4
  0
  0
  0
  1
  0
  13
  #f
  31/22
  (4 4 0))
'(clean-cache
  loop2-1
  2
  700
  45
  number
  "'(eval (app = (-> 0 <-) j) (env ((□? (j f y)) (□? (i x)))))"
  (number char string quoted constructor)
  3
  1
  0
  2
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  loop2-1
  2
  700
  45
  ref-or-constructor
  "'(eval (app (-> = <-) 0 j) (env ((□? (j f y)) (□? (i x)))))"
  #t
  3
  1
  0
  2
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  loop2-1
  2
  700
  45
  app
  "'(eval (letrec (lp2) (-> (app lp2 10 (λ (n) ...) x) <-)) (env ((□? (i x)))))"
  #f
  665
  605
  40
  20
  254
  29
  283
  1
  24934627/42607950
  366
  #f
  909/605
  (239 245 4))
'(clean-cache
  loop2-1
  2
  700
  45
  ref-or-constructor
  "'(eval (app lp2 10 (λ (n) ...) (-> x <-)) (env ((□? (i x)))))"
  #f
  315
  256
  44
  15
  119
  29
  148
  1
  46421/83600
  152
  #f
  195/128
  (160 165 2))
'(clean-cache
  loop2-1
  2
  700
  45
  lambda
  "'(eval (app lp2 10 (-> (λ (n) ...) <-) x) (env ((□? (i x)))))"
  (lambda number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  loop2-1
  2
  700
  45
  app
  "'(eval (λ (n) (-> (app + n i) <-)) (env ((□? (n)) (□? (i x)))))"
  #f
  427
  341
  61
  25
  122
  29
  151
  1
  1289/2912
  198
  #f
  563/341
  (275 284 5))
'(clean-cache
  loop2-1
  2
  700
  45
  ref-or-constructor
  "'(eval (app + n (-> i <-)) (env ((□? (n)) (□? (i x)))))"
  #f
  23
  14
  3
  6
  1
  2
  3
  1
  1/6
  9
  #f
  19/14
  (2 2 0))
'(clean-cache
  loop2-1
  2
  700
  45
  ref-or-constructor
  "'(eval (app + (-> n <-) i) (env ((□? (n)) (□? (i x)))))"
  #f
  403
  317
  61
  25
  122
  29
  151
  1
  6479827/13613600
  188
  #f
  525/317
  (247 253 4))
'(clean-cache
  loop2-1
  2
  700
  45
  ref-or-constructor
  "'(eval (app (-> + <-) n i) (env ((□? (n)) (□? (i x)))))"
  #t
  3
  1
  0
  2
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  loop2-1
  2
  700
  45
  number
  "'(eval (app lp2 (-> 10 <-) (λ (n) ...) x) (env ((□? (i x)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  loop2-1
  2
  700
  45
  ref-or-constructor
  "'(eval (app (-> lp2 <-) 10 (λ (n) ...) x) (env ((□? (i x)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  loop2-1
  2
  700
  45
  app
  "'(eval (match (-> (app = 0 i) <-) (#f) _) (env ((□? (i x)))))"
  #f
  31
  23
  3
  5
  4
  2
  6
  1
  2/9
  16
  #f
  30/23
  (2 2 0))
'(clean-cache
  loop2-1
  2
  700
  45
  ref-or-constructor
  "'(eval (app = 0 (-> i <-)) (env ((□? (i x)))))"
  #f
  22
  14
  3
  5
  1
  2
  3
  1
  1/6
  9
  #f
  19/14
  (2 2 0))
'(clean-cache
  loop2-1
  2
  700
  45
  number
  "'(eval (app = (-> 0 <-) i) (env ((□? (i x)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  loop2-1
  2
  700
  45
  ref-or-constructor
  "'(eval (app (-> = <-) 0 i) (env ((□? (i x)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  loop2-1
  2
  700
  45
  app
  "'(eval (letrec (lp1) (-> (app lp1 10 0) <-)) (env ()))"
  #f
  424
  364
  44
  16
  207
  29
  236
  1
  669/880
  208
  #f
  138/91
  (208 213 3))
'(clean-cache
  loop2-1
  2
  700
  45
  number
  "'(eval (app lp1 10 (-> 0 <-)) (env ()))"
  (number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  loop2-1
  2
  700
  45
  number
  "'(eval (app lp1 (-> 10 <-) 0) (env ()))"
  (number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  loop2-1
  2
  700
  45
  ref-or-constructor
  "'(eval (app (-> lp1 <-) 10 0) (env ()))"
  (lambda number char string quoted constructor)
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
