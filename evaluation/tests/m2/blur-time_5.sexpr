'(clean-cache
  blur
  2
  5
  23
  letrec
  "\"'(eval ((top) letrec (id ... lp) ...) (env ()))\""
  59
  34
  17
  8
  31
  4
  35
  1
  53/58
  16
  #f
  77/17
  ((3/2 2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  blur
  2
  23
  match
  "\"'(eval (λ (a n) (-> (match (app <= n 1) ...) <-)) (env ((□? (a n)))))\""
  #f)
'(clean-cache
  blur
  2
  23
  app
  "\"'(eval (match (app <= n 1) (#f) (_ (-> (app id a) <-))) (env ((□? (a n)))))\""
  #f)
'(clean-cache
  blur
  2
  5
  23
  ref-or-constructor
  "\"'(eval (app id (-> a <-)) (env ((□? (a n)))))\""
  66
  36
  26
  4
  35
  19
  54
  1
  15/16
  36
  #t
  5
  ((7/2 7/2 0) (7/2 4 0) (7/2 7/2 0)))
'(clean-cache
  blur
  2
  23
  let*
  "\"'(eval\n  (match (app <= n 1) ((#f) (-> (let* (r ... s) ...) <-)) _)\n  (env ((□? (a n)))))\""
  #f)
'(clean-cache
  blur
  2
  5
  23
  app
  "\"'(eval\n  (let* (... r (s (-> (app (app blur id) (app #f)) <-)) () ...) ...)\n  (env ((□? (a n)))))\""
  30
  11
  12
  7
  2
  2
  4
  1
  2/11
  11
  #t
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  blur
  2
  5
  23
  app
  "\"'(eval (app (app blur id) (-> (app #f) <-)) (env ((□? (a n)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  blur
  2
  5
  23
  app
  "\"'(eval (app (-> (app blur id) <-) (app #f)) (env ((□? (a n)))))\""
  13
  6
  4
  3
  2
  1
  3
  1
  1/3
  6
  #t
  5
  ((0 0 0) (0 1/2 0) (0 0 0)))
'(clean-cache
  blur
  2
  5
  23
  app
  "\"'(eval\n  (let* (... () (r (-> (app (app blur id) (app #t)) <-)) s ...) ...)\n  (env ((□? (a n)))))\""
  30
  11
  12
  7
  2
  2
  4
  1
  2/11
  11
  #t
  5
  ((1 1 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  blur
  2
  5
  23
  app
  "\"'(eval (app (app blur id) (-> (app #t) <-)) (env ((□? (a n)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  blur
  2
  5
  23
  app
  "\"'(eval (app (-> (app blur id) <-) (app #t)) (env ((□? (a n)))))\""
  13
  6
  4
  3
  2
  1
  3
  1
  1/3
  6
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  blur
  2
  23
  app
  "\"'(eval\n  (let* (r ... s) (-> (app not (app (app blur lp) s (app - n 1))) <-))\n  (env ((□? (a n)))))\""
  #f)
'(clean-cache
  blur
  2
  23
  app
  "\"'(eval (app not (-> (app (app blur lp) s (app - n 1)) <-)) (env ((□? (a n)))))\""
  #f)
'(clean-cache
  blur
  2
  5
  23
  app
  "\"'(eval (app (app blur lp) s (-> (app - n 1) <-)) (env ((□? (a n)))))\""
  35
  21
  12
  2
  17
  8
  25
  1
  6/7
  8
  #f
  92/21
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  blur
  2
  5
  23
  ref-or-constructor
  "\"'(eval (app - (-> n <-) 1) (env ((□? (a n)))))\""
  32
  18
  12
  2
  17
  8
  25
  1
  27/28
  7
  #f
  79/18
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  blur
  2
  5
  23
  ref-or-constructor
  "\"'(eval (app (app blur lp) (-> s <-) (app - n 1)) (env ((□? (a n)))))\""
  31
  12
  12
  7
  2
  2
  4
  1
  1/6
  12
  #t
  5
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  blur
  2
  5
  23
  app
  "\"'(eval (app (-> (app blur lp) <-) s (app - n 1)) (env ((□? (a n)))))\""
  13
  6
  4
  3
  2
  1
  3
  1
  1/3
  6
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  blur
  2
  5
  23
  app
  "\"'(eval (match (-> (app <= n 1) <-) (#f) _) (env ((□? (a n)))))\""
  44
  30
  12
  2
  26
  8
  34
  1
  37/44
  11
  #f
  133/30
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  blur
  2
  5
  23
  ref-or-constructor
  "\"'(eval (app <= (-> n <-) 1) (env ((□? (a n)))))\""
  32
  18
  12
  2
  17
  8
  25
  1
  7/8
  7
  #f
  79/18
  ((3/2 2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  blur
  2
  5
  23
  ref-or-constructor
  "\"'(eval (λ (y) (-> y <-)) (env ((□? (y)))))\""
  12
  6
  4
  2
  2
  1
  3
  1
  1/3
  5
  #f
  31/6
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  blur
  2
  23
  ref-or-constructor
  "\"'(eval (λ (x) (-> x <-)) (env ((□? (x)))))\""
  #f)
'(clean-cache
  blur
  2
  5
  23
  app
  "\"'(eval (letrec (id ... lp) (-> (app lp (app #f) 2) <-)) (env ()))\""
  58
  33
  17
  8
  30
  4
  34
  1
  51/56
  16
  #f
  50/11
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  blur
  2
  5
  23
  app
  "\"'(eval (app lp (-> (app #f) <-) 2) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  2
  5
  23
  ref-or-constructor
  "\"'(eval (app <= (-> n <-) 1) (env ((□? (a n)))))\""
  32
  18
  12
  2
  17
  8
  25
  1
  7/8
  7
  #f
  79/18
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  blur
  2
  5
  23
  app
  "\"'(eval (app lp (-> (app #f) <-) 2) (env ()))\""
  34
  20
  12
  2
  19
  8
  27
  1
  9/10
  9
  #t
  89/20
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  2
  5
  23
  ref-or-constructor
  "\"'(eval (app - (-> n <-) 1) (env ((□? (a n)))))\""
  35
  21
  12
  2
  19
  8
  27
  1
  7/8
  9
  #f
  31/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  2
  23
  match
  "\"'(eval (λ (a n) (-> (match (app <= n 1) ...) <-)) (env ((□? (a n)))))\""
  #f)
'(shuffled-cache
  0
  blur
  2
  5
  23
  app
  "\"'(eval (app (app blur lp) s (-> (app - n 1) <-)) (env ((□? (a n)))))\""
  126
  95
  26
  5
  91
  19
  110
  1
  431/444
  69
  #f
  463/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  2
  5
  23
  app
  "\"'(eval (app (-> (app blur lp) <-) s (app - n 1)) (env ((□? (a n)))))\""
  127
  96
  26
  5
  91
  19
  110
  1
  427/444
  70
  #t
  39/8
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  2
  5
  23
  app
  "\"'(eval (app (-> (app blur id) <-) (app #t)) (env ((□? (a n)))))\""
  133
  102
  26
  5
  96
  19
  115
  1
  439/468
  76
  #t
  83/17
  ((1/2 1/2 0) (1/2 1/2 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  2
  5
  23
  ref-or-constructor
  "\"'(eval (app (app blur lp) (-> s <-) (app - n 1)) (env ((□? (a n)))))\""
  134
  103
  26
  5
  96
  19
  115
  1
  109/117
  77
  #t
  503/103
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  2
  5
  23
  app
  "\"'(eval\n  (let* (r ... s) (-> (app not (app (app blur lp) s (app - n 1))) <-))\n  (env ((□? (a n)))))\""
  138
  107
  26
  5
  99
  19
  118
  1
  433/468
  79
  #f
  525/107
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  2
  5
  23
  letrec
  "\"'(eval ((top) letrec (id ... lp) ...) (env ()))\""
  142
  111
  26
  5
  103
  19
  122
  1
  235/252
  80
  #f
  548/111
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  2
  5
  23
  app
  "\"'(eval\n  (let* (... () (r (-> (app (app blur id) (app #t)) <-)) s ...) ...)\n  (env ((□? (a n)))))\""
  154
  123
  26
  5
  114
  19
  133
  1
  503/540
  92
  #t
  608/123
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  blur
  2
  5
  23
  app
  "\"'(eval (app (app blur id) (-> (app #f) <-)) (env ((□? (a n)))))\""
  155
  124
  26
  5
  114
  19
  133
  1
  25/27
  93
  #t
  613/124
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  2
  5
  23
  app
  "\"'(eval (letrec (id ... lp) (-> (app lp (app #f) 2) <-)) (env ()))\""
  155
  124
  26
  5
  114
  19
  133
  1
  25/27
  93
  #f
  613/124
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  2
  5
  23
  app
  "\"'(eval (app not (-> (app (app blur lp) s (app - n 1)) <-)) (env ((□? (a n)))))\""
  156
  125
  26
  5
  114
  19
  133
  1
  497/540
  93
  #f
  619/125
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  2
  5
  23
  ref-or-constructor
  "\"'(eval (λ (y) (-> y <-)) (env ((□? (y)))))\""
  157
  126
  26
  5
  114
  19
  133
  1
  3467/3780
  93
  #f
  625/126
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  blur
  2
  5
  23
  ref-or-constructor
  "\"'(eval (λ (x) (-> x <-)) (env ((□? (x)))))\""
  159
  127
  26
  6
  114
  19
  133
  1
  691/756
  93
  #f
  631/127
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  blur
  2
  5
  23
  let*
  "\"'(eval\n  (match (app <= n 1) ((#f) (-> (let* (r ... s) ...) <-)) _)\n  (env ((□? (a n)))))\""
  161
  129
  26
  6
  115
  19
  134
  1
  1717/1890
  93
  #f
  643/129
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  2
  5
  23
  app
  "\"'(eval (app (app blur id) (-> (app #t) <-)) (env ((□? (a n)))))\""
  162
  130
  26
  6
  115
  19
  134
  1
  3413/3780
  94
  #t
  324/65
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  2
  5
  23
  app
  "\"'(eval (app (-> (app blur id) <-) (app #f)) (env ((□? (a n)))))\""
  163
  131
  26
  6
  115
  19
  134
  1
  848/945
  95
  #t
  653/131
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  2
  5
  23
  app
  "\"'(eval\n  (let* (... r (s (-> (app (app blur id) (app #f)) <-)) () ...) ...)\n  (env ((□? (a n)))))\""
  164
  132
  26
  6
  115
  19
  134
  1
  3371/3780
  96
  #t
  329/66
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  2
  5
  23
  ref-or-constructor
  "\"'(eval (app id (-> a <-)) (env ((□? (a n)))))\""
  165
  133
  26
  6
  115
  19
  134
  1
  335/378
  97
  #t
  663/133
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  2
  5
  23
  app
  "\"'(eval (match (app <= n 1) (#f) (_ (-> (app id a) <-))) (env ((□? (a n)))))\""
  166
  134
  26
  6
  115
  19
  134
  1
  3329/3780
  98
  #t
  334/67
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  2
  5
  23
  app
  "\"'(eval (match (-> (app <= n 1) <-) (#f) _) (env ((□? (a n)))))\""
  167
  135
  26
  6
  115
  19
  134
  1
  827/945
  98
  #f
  674/135
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  2
  5
  23
  app
  "\"'(eval (app (app blur id) (-> (app #t) <-)) (env ((□? (a n)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  2
  5
  23
  app
  "\"'(eval (app lp (-> (app #f) <-) 2) (env ()))\""
  5
  4
  0
  1
  2
  0
  2
  1
  1/2
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  2
  5
  23
  ref-or-constructor
  "\"'(eval (app <= (-> n <-) 1) (env ((□? (a n)))))\""
  39
  25
  12
  2
  22
  8
  30
  1
  13/16
  14
  #f
  114/25
  ((2 2 0) (3/2 3/2 0) (2 2 0)))
'(shuffled-cache
  1
  blur
  2
  5
  23
  app
  "\"'(eval (letrec (id ... lp) (-> (app lp (app #f) 2) <-)) (env ()))\""
  115
  84
  26
  5
  81
  19
  100
  1
  461/480
  66
  #f
  34/7
  ((7/2 7/2 0) (4 4 0) (7/2 7/2 0)))
'(shuffled-cache
  1
  blur
  2
  5
  23
  app
  "\"'(eval (app (-> (app blur id) <-) (app #f)) (env ((□? (a n)))))\""
  116
  85
  26
  5
  81
  19
  100
  1
  229/240
  67
  #t
  413/85
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  2
  5
  23
  letrec
  "\"'(eval ((top) letrec (id ... lp) ...) (env ()))\""
  117
  86
  26
  5
  82
  19
  101
  1
  235/246
  67
  #f
  419/86
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  2
  5
  23
  app
  "\"'(eval (app (app blur id) (-> (app #f) <-)) (env ((□? (a n)))))\""
  118
  87
  26
  5
  82
  19
  101
  1
  467/492
  68
  #t
  424/87
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  2
  5
  23
  app
  "\"'(eval\n  (let* (r ... s) (-> (app not (app (app blur lp) s (app - n 1))) <-))\n  (env ((□? (a n)))))\""
  138
  107
  26
  5
  101
  19
  120
  1
  17/18
  79
  #f
  529/107
  ((1 1 0) (3/2 3/2 0) (1 1 0)))
'(shuffled-cache
  1
  blur
  2
  5
  23
  app
  "\"'(eval\n  (let* (... () (r (-> (app (app blur id) (app #t)) <-)) s ...) ...)\n  (env ((□? (a n)))))\""
  152
  121
  26
  5
  114
  19
  133
  1
  509/540
  93
  #t
  599/121
  ((1/2 1/2 0) (1/2 1/2 0) (1 1 0)))
'(shuffled-cache
  1
  blur
  2
  5
  23
  let*
  "\"'(eval\n  (match (app <= n 1) ((#f) (-> (let* (r ... s) ...) <-)) _)\n  (env ((□? (a n)))))\""
  154
  123
  26
  5
  115
  19
  134
  1
  253/270
  93
  #f
  611/123
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  2
  5
  23
  app
  "\"'(eval (app (app blur lp) s (-> (app - n 1) <-)) (env ((□? (a n)))))\""
  155
  124
  26
  5
  115
  19
  134
  1
  503/540
  93
  #f
  615/124
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  2
  5
  23
  ref-or-constructor
  "\"'(eval (λ (y) (-> y <-)) (env ((□? (y)))))\""
  156
  125
  26
  5
  115
  19
  134
  1
  3509/3780
  93
  #f
  621/125
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  blur
  2
  5
  23
  app
  "\"'(eval (match (app <= n 1) (#f) (_ (-> (app id a) <-))) (env ((□? (a n)))))\""
  157
  126
  26
  5
  115
  19
  134
  1
  872/945
  94
  #t
  313/63
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  2
  5
  23
  app
  "\"'(eval (app (-> (app blur lp) <-) s (app - n 1)) (env ((□? (a n)))))\""
  158
  127
  26
  5
  115
  19
  134
  1
  3467/3780
  95
  #t
  631/127
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  2
  5
  23
  ref-or-constructor
  "\"'(eval (app id (-> a <-)) (env ((□? (a n)))))\""
  159
  128
  26
  5
  115
  19
  134
  1
  1723/1890
  96
  #t
  159/32
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  2
  5
  23
  app
  "\"'(eval (app not (-> (app (app blur lp) s (app - n 1)) <-)) (env ((□? (a n)))))\""
  160
  129
  26
  5
  115
  19
  134
  1
  685/756
  96
  #f
  214/43
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  2
  5
  23
  ref-or-constructor
  "\"'(eval (λ (x) (-> x <-)) (env ((□? (x)))))\""
  162
  130
  26
  6
  115
  19
  134
  1
  3413/3780
  96
  #f
  324/65
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  blur
  2
  5
  23
  ref-or-constructor
  "\"'(eval (app (app blur lp) (-> s <-) (app - n 1)) (env ((□? (a n)))))\""
  163
  131
  26
  6
  115
  19
  134
  1
  848/945
  97
  #t
  653/131
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  2
  5
  23
  app
  "\"'(eval (match (-> (app <= n 1) <-) (#f) _) (env ((□? (a n)))))\""
  164
  132
  26
  6
  115
  19
  134
  1
  3371/3780
  97
  #f
  659/132
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  2
  5
  23
  match
  "\"'(eval (λ (a n) (-> (match (app <= n 1) ...) <-)) (env ((□? (a n)))))\""
  165
  133
  26
  6
  115
  19
  134
  1
  335/378
  97
  #f
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  2
  5
  23
  ref-or-constructor
  "\"'(eval (app - (-> n <-) 1) (env ((□? (a n)))))\""
  166
  134
  26
  6
  115
  19
  134
  1
  3329/3780
  97
  #f
  669/134
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  2
  5
  23
  app
  "\"'(eval (app (-> (app blur id) <-) (app #t)) (env ((□? (a n)))))\""
  167
  135
  26
  6
  115
  19
  134
  1
  827/945
  98
  #t
  674/135
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  2
  5
  23
  app
  "\"'(eval\n  (let* (... r (s (-> (app (app blur id) (app #f)) <-)) () ...) ...)\n  (env ((□? (a n)))))\""
  168
  136
  26
  6
  115
  19
  134
  1
  3287/3780
  99
  #t
  679/136
  ((0 0 0) (0 0 0) (0 0 0)))
