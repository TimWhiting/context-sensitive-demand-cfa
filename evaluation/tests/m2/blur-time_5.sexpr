'(clean-cache
  blur
  2
  5
  43
  letrec
  "'(eval ((top) letrec (id ... lp) ...) (env ()))"
  #f
  157
  117
  33
  7
  94
  19
  113
  1
  989/1140
  91
  #f
  11/9
  ((4 4 0)))
'(clean-cache
  blur
  2
  5
  43
  lambda
  "'(eval (letrec (... blur (lp (-> (λ (a n) ...) <-)) () ...) ...) (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  blur
  2
  5
  43
  match
  "'(eval (λ (a n) (-> (match (app <= n 1) ...) <-)) (env ((□? (a n)))))"
  #f
  132
  101
  26
  5
  94
  19
  113
  1
  35/37
  87
  #f
  115/101
  ((2 2 0)))
'(clean-cache
  blur
  2
  5
  43
  app
  "'(eval (match (app <= n 1) (#f) (_ (-> (app id a) <-))) (env ((□? (a n)))))"
  #f
  89
  51
  31
  7
  43
  19
  62
  1
  17/20
  51
  #t
  1
  ((2 2 0)))
'(clean-cache
  blur
  2
  5
  43
  ref-or-constructor
  "'(eval (app id (-> a <-)) (env ((□? (a n)))))"
  #f
  66
  36
  26
  4
  35
  19
  54
  1
  15/16
  36
  #t
  1
  ((1 1 0)))
'(clean-cache
  blur
  2
  5
  43
  ref-or-constructor
  "'(eval (app (-> id <-) a) (env ((□? (a n)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  blur
  2
  5
  43
  let*
  "'(eval\n  (match (app <= n 1) ((#f) (-> (let* (r ... s) ...) <-)) _)\n  (env ((□? (a n)))))"
  #f
  #f)
'(clean-cache
  blur
  2
  5
  43
  app
  "'(eval\n  (let* (... r (s (-> (app (app blur id) (app #f)) <-)) () ...) ...)\n  (env ((□? (a n)))))"
  #f
  30
  11
  12
  7
  2
  2
  4
  1
  2/11
  11
  #t
  1
  ((0 0 0)))
'(clean-cache
  blur
  2
  5
  43
  app
  "'(eval (app (app blur id) (-> (app #f) <-)) (env ((□? (a n)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  blur
  2
  5
  43
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (a n)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  blur
  2
  5
  43
  app
  "'(eval (app (-> (app blur id) <-) (app #f)) (env ((□? (a n)))))"
  #f
  13
  6
  4
  3
  2
  1
  3
  1
  1/3
  6
  #t
  1
  ((0 0 0)))
'(clean-cache
  blur
  2
  5
  43
  ref-or-constructor
  "'(eval (app blur (-> id <-)) (env ((□? (a n)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  blur
  2
  5
  43
  ref-or-constructor
  "'(eval (app (-> blur <-) id) (env ((□? (a n)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  blur
  2
  5
  43
  app
  "'(eval\n  (let* (... () (r (-> (app (app blur id) (app #t)) <-)) s ...) ...)\n  (env ((□? (a n)))))"
  #f
  30
  11
  12
  7
  2
  2
  4
  1
  2/11
  11
  #t
  1
  ((0 0 0)))
'(clean-cache
  blur
  2
  5
  43
  app
  "'(eval (app (app blur id) (-> (app #t) <-)) (env ((□? (a n)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  blur
  2
  5
  43
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (a n)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  blur
  2
  5
  43
  app
  "'(eval (app (-> (app blur id) <-) (app #t)) (env ((□? (a n)))))"
  #f
  13
  6
  4
  3
  2
  1
  3
  1
  1/3
  6
  #t
  1
  ((0 0 0)))
'(clean-cache
  blur
  2
  5
  43
  ref-or-constructor
  "'(eval (app blur (-> id <-)) (env ((□? (a n)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  blur
  2
  5
  43
  ref-or-constructor
  "'(eval (app (-> blur <-) id) (env ((□? (a n)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  blur
  2
  5
  43
  app
  "'(eval\n  (let* (r ... s) (-> (app not (app (app blur ...) s (app - ...))) <-))\n  (env ((□? (a n)))))"
  #f
  #f)
'(clean-cache
  blur
  2
  5
  43
  app
  "'(eval (app not (-> (app (app blur lp) s (app - n 1)) <-)) (env ((□? (a n)))))"
  #f
  #f)
'(clean-cache
  blur
  2
  5
  43
  app
  "'(eval (app (app blur lp) s (-> (app - n 1) <-)) (env ((□? (a n)))))"
  #f
  35
  21
  12
  2
  17
  8
  25
  1
  6/7
  17
  #f
  25/21
  ((0 0 0)))
'(clean-cache
  blur
  2
  5
  43
  number
  "'(eval (app - n (-> 1 <-)) (env ((□? (a n)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  blur
  2
  5
  43
  ref-or-constructor
  "'(eval (app - (-> n <-) 1) (env ((□? (a n)))))"
  #f
  32
  18
  12
  2
  17
  8
  25
  1
  27/28
  15
  #f
  7/6
  ((0 0 0)))
'(clean-cache
  blur
  2
  5
  43
  ref-or-constructor
  "'(eval (app (-> - <-) n 1) (env ((□? (a n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  blur
  2
  5
  43
  ref-or-constructor
  "'(eval (app (app blur lp) (-> s <-) (app - n 1)) (env ((□? (a n)))))"
  #f
  31
  12
  12
  7
  2
  2
  4
  1
  1/6
  12
  #t
  1
  ((0 0 0)))
'(clean-cache
  blur
  2
  5
  43
  app
  "'(eval (app (-> (app blur lp) <-) s (app - n 1)) (env ((□? (a n)))))"
  #f
  13
  6
  4
  3
  2
  1
  3
  1
  1/3
  6
  #t
  1
  ((0 0 0)))
'(clean-cache
  blur
  2
  5
  43
  ref-or-constructor
  "'(eval (app blur (-> lp <-)) (env ((□? (a n)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  blur
  2
  5
  43
  ref-or-constructor
  "'(eval (app (-> blur <-) lp) (env ((□? (a n)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  blur
  2
  5
  43
  ref-or-constructor
  "'(eval (app (-> not <-) (app (app blur lp) s (app - n 1))) (env ((□? (a n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  blur
  2
  5
  43
  app
  "'(eval (match (-> (app <= n 1) <-) (#f) _) (env ((□? (a n)))))"
  #f
  44
  30
  12
  2
  26
  8
  34
  1
  37/44
  25
  #f
  7/6
  ((0 0 0)))
'(clean-cache
  blur
  2
  5
  43
  number
  "'(eval (app <= n (-> 1 <-)) (env ((□? (a n)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  blur
  2
  5
  43
  ref-or-constructor
  "'(eval (app <= (-> n <-) 1) (env ((□? (a n)))))"
  #f
  32
  18
  12
  2
  17
  8
  25
  1
  7/8
  15
  #f
  7/6
  ((0 0 0)))
'(clean-cache
  blur
  2
  5
  43
  ref-or-constructor
  "'(eval (app (-> <= <-) n 1) (env ((□? (a n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  blur
  2
  5
  43
  lambda
  "'(eval (letrec (... id (blur (-> (λ (y) ...) <-)) lp ...) ...) (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  blur
  2
  5
  43
  ref-or-constructor
  "'(eval (λ (y) (-> y <-)) (env ((□? (y)))))"
  #f
  12
  6
  4
  2
  2
  1
  3
  1
  1/3
  5
  #f
  7/6
  ((0 0 0)))
'(clean-cache
  blur
  2
  5
  43
  lambda
  "'(eval (letrec (... () (id (-> (λ (x) ...) <-)) blur ...) ...) (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  blur
  2
  5
  43
  ref-or-constructor
  "'(eval (λ (x) (-> x <-)) (env ((□? (x)))))"
  #f
  94
  53
  31
  10
  44
  19
  63
  1
  47/54
  52
  #f
  54/53
  ((2 2 0)))
'(clean-cache
  blur
  2
  5
  43
  app
  "'(eval (letrec (id ... lp) (-> (app lp (app #f) 2) <-)) (env ()))"
  #f
  156
  116
  33
  7
  93
  19
  112
  1
  959/1110
  91
  #f
  141/116
  ((4 4 0)))
'(clean-cache
  blur
  2
  5
  43
  number
  "'(eval (app lp (app #f) (-> 2 <-)) (env ()))"
  (number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  blur
  2
  5
  43
  app
  "'(eval (app lp (-> (app #f) <-) 2) (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  blur
  2
  5
  43
  constructor
  "'(eval (app (-> #f <-)) (env ()))"
  (constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  blur
  2
  5
  43
  ref-or-constructor
  "'(eval (app (-> lp <-) (app #f) 2) (env ()))"
  (lambda number char string quoted constructor)
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
