'(clean-cache
  sat-3
  2
  5
  59
  letrec*
  "\"'(eval ((top) letrec* (println ... sat-solve-7) ...) (env ()))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  4
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  2
  59
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  #f)
'(clean-cache
  sat-3
  2
  59
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  #f)
'(clean-cache
  sat-3
  2
  59
  app
  "\"'(eval\n  (λ (n2) (-> (app try (λ (n3) ...)) <-))\n  (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  #f)
'(clean-cache
  sat-3
  2
  59
  app
  "\"'(eval\n  (λ (n3) (-> (app try (λ (n4) ...)) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  #f)
'(clean-cache
  sat-3
  2
  59
  app
  "\"'(eval\n  (λ (n4) (-> (app try (λ (n5) ...)) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  #f)
'(clean-cache
  sat-3
  2
  59
  app
  "\"'(eval\n  (λ (n5) (-> (app try (λ (n6) ...)) <-))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  #f)
'(clean-cache
  sat-3
  2
  59
  app
  "\"'(eval\n  (λ (n6) (-> (app try (λ (n7) ...)) <-))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  #f)
'(clean-cache
  sat-3
  2
  59
  app
  "\"'(eval\n  (λ (n7) (-> (app p n1 n2 n3 n4 n5 n6 n7) <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  #f)
'(clean-cache
  sat-3
  2
  5
  59
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 n4 n5 n6 (-> n7 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  20
  7
  3
  10
  1
  0
  1
  1
  1/7
  6
  #f
  8/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  2
  5
  59
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 n4 n5 (-> n6 <-) n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  20
  7
  3
  10
  1
  0
  1
  1
  1/7
  6
  #f
  8/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  2
  5
  59
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 n4 (-> n5 <-) n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  20
  7
  3
  10
  1
  0
  1
  1
  1/7
  6
  #f
  8/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  2
  5
  59
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 (-> n4 <-) n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  20
  7
  3
  10
  1
  0
  1
  1
  1/7
  6
  #f
  8/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  2
  5
  59
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 (-> n3 <-) n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  20
  7
  3
  10
  1
  0
  1
  1
  1/7
  6
  #f
  8/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  2
  5
  59
  ref-or-constructor
  "\"'(eval\n  (app p n1 (-> n2 <-) n3 n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  20
  7
  3
  10
  1
  0
  1
  1
  1/7
  6
  #f
  8/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  2
  5
  59
  ref-or-constructor
  "\"'(eval\n  (app p (-> n1 <-) n2 n3 n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  20
  7
  3
  10
  1
  0
  1
  1
  1/7
  6
  #f
  8/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  2
  5
  59
  ref-or-constructor
  "\"'(eval\n  (app (-> p <-) n1 n2 n3 n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  13
  3
  2
  8
  2
  2
  4
  1
  2/3
  3
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  2
  59
  let
  "\"'(eval (λ (f) (-> (let (_) ...) <-)) (env ((□? (f)))))\""
  #f)
'(clean-cache
  sat-3
  2
  5
  59
  app
  "\"'(eval\n  (let (... () (_ (-> (app println \"trying\") <-)) () ...) ...)\n  (env ((□? (f)))))\""
  9
  6
  0
  3
  1
  0
  1
  1
  1/6
  6
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  2
  59
  app
  "\"'(eval\n  (let (_) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  #f)
'(clean-cache
  sat-3
  2
  59
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  #f)
'(clean-cache
  sat-3
  2
  5
  59
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  2
  5
  59
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  24
  8
  8
  8
  0
  1
  1
  1
  0
  7
  #f
  7/4
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-3
  2
  59
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  #f)
'(clean-cache
  sat-3
  2
  5
  59
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  2
  5
  59
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  24
  8
  8
  8
  0
  1
  1
  1
  0
  7
  #f
  7/4
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-3
  2
  59
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4 x5 x6 x7)\n    (->\n     (app\n      and\n      (app or x1 x2)\n      (app or x1 (app not x2) (app not x3))\n      (app or x3 x4)\n      (app or (app not x4) x1)\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  #f)
'(clean-cache
  sat-3
  2
  5
  59
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  74
  34
  11
  29
  5
  2
  7
  1
  5/17
  23
  #f
  45/34
  ((4 4 0) (4 4 0) (9/2 9/2 0)))
'(clean-cache
  sat-3
  2
  5
  59
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  39
  12
  6
  21
  3
  2
  5
  1
  3/10
  10
  #f
  7/6
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-3
  2
  5
  59
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  35
  12
  6
  17
  3
  2
  5
  1
  3/10
  10
  #f
  7/6
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-3
  2
  59
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  #f)
'(clean-cache
  sat-3
  2
  5
  59
  app
  "\"'(eval\n  (app or (app not x2) (-> (app not x3) <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  44
  18
  6
  20
  5
  2
  7
  1
  5/14
  14
  #f
  11/9
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-3
  2
  5
  59
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  37
  12
  6
  19
  3
  2
  5
  1
  3/10
  10
  #f
  7/6
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-3
  2
  5
  59
  app
  "\"'(eval\n  (app or (-> (app not x2) <-) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  46
  18
  6
  22
  5
  2
  7
  1
  5/14
  14
  #f
  11/9
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-3
  2
  5
  59
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  39
  12
  6
  21
  3
  2
  5
  1
  3/10
  10
  #f
  7/6
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-3
  2
  5
  59
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (-> (app or (app not x4) x1) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  79
  38
  11
  30
  10
  5
  15
  1
  8/19
  25
  #f
  51/38
  ((4 4 0) (4 4 0) (4 4 0)))
'(clean-cache
  sat-3
  2
  5
  59
  ref-or-constructor
  "\"'(eval (app or (app not x4) (-> x1 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  40
  12
  6
  22
  8
  5
  13
  1
  4/5
  10
  #f
  7/6
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-3
  2
  5
  59
  app
  "\"'(eval (app or (-> (app not x4) <-) x1) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  42
  18
  6
  18
  5
  2
  7
  1
  5/14
  14
  #f
  11/9
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-3
  2
  5
  59
  ref-or-constructor
  "\"'(eval (app not (-> x4 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  35
  12
  6
  17
  3
  2
  5
  1
  3/10
  10
  #f
  7/6
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-3
  2
  59
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or x3 x4) <-)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  #f)
'(clean-cache
  sat-3
  2
  5
  59
  ref-or-constructor
  "\"'(eval (app or x3 (-> x4 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  35
  12
  6
  17
  3
  2
  5
  1
  3/10
  10
  #f
  7/6
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-3
  2
  5
  59
  ref-or-constructor
  "\"'(eval (app or (-> x3 <-) x4) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  37
  12
  6
  19
  3
  2
  5
  1
  3/10
  10
  #f
  7/6
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-3
  2
  59
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  #f)
'(clean-cache
  sat-3
  2
  5
  59
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  44
  18
  6
  20
  5
  2
  7
  1
  5/14
  14
  #f
  11/9
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-3
  2
  5
  59
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  37
  12
  6
  19
  3
  2
  5
  1
  3/10
  10
  #f
  7/6
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-3
  2
  5
  59
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  46
  18
  6
  22
  5
  2
  7
  1
  5/14
  14
  #f
  11/9
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-3
  2
  5
  59
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  39
  12
  6
  21
  3
  2
  5
  1
  3/10
  10
  #f
  7/6
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-3
  2
  5
  59
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  40
  12
  6
  22
  8
  5
  13
  1
  4/5
  10
  #f
  7/6
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-3
  2
  5
  59
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 x2) <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  91
  42
  15
  34
  20
  11
  31
  1
  29/51
  31
  #f
  53/42
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  sat-3
  2
  5
  59
  ref-or-constructor
  "\"'(eval (app or x1 (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  39
  12
  6
  21
  3
  2
  5
  1
  3/10
  10
  #f
  7/6
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-3
  2
  5
  59
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  40
  12
  6
  22
  8
  5
  13
  1
  4/5
  10
  #f
  7/6
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-3
  2
  5
  59
  let
  "\"'(eval (λ (s) (-> (let (_) ...) <-)) (env ((□? (s)))))\""
  4
  3
  0
  1
  0
  0
  0
  1
  0
  3
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  2
  5
  59
  app
  "\"'(eval (let (... () (_ (-> (app display s) <-)) () ...) ...) (env ((□? (s)))))\""
  11
  6
  2
  3
  0
  1
  1
  1
  0
  6
  #t
  7/6
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  2
  5
  59
  ref-or-constructor
  "\"'(eval (app display (-> s <-)) (env ((□? (s)))))\""
  6
  2
  2
  2
  0
  1
  1
  1
  0
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  2
  5
  59
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env ((□? (s)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  2
  5
  59
  let
  "\"'(eval (letrec* (println ... sat-solve-7) (-> (let (_) ...) <-)) (env ()))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  3
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  2
  59
  app
  "\"'(eval\n  (let (... () (_ (-> (app display (app sat-solve-7 phi)) <-)) () ...) ...)\n  (env ()))\""
  #f)
'(clean-cache
  sat-3
  2
  59
  app
  "\"'(eval (app display (-> (app sat-solve-7 phi) <-)) (env ()))\""
  #f)
'(clean-cache
  sat-3
  2
  5
  59
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  2
  5
  59
  ref-or-constructor
  "\"'(eval\n  (app (-> p <-) n1 n2 n3 n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  13
  3
  2
  8
  2
  2
  4
  1
  2/3
  3
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  2
  5
  59
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  52
  15
  8
  29
  10
  7
  17
  1
  10/13
  13
  #f
  17/15
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  sat-3
  2
  59
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or x3 x4) <-)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  #f)
'(shuffled-cache
  0
  sat-3
  2
  5
  59
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (-> (app or (app not x4) x1) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  79
  38
  11
  30
  10
  5
  15
  1
  8/19
  25
  #f
  51/38
  ((9/2 9/2 0) (4 4 0) (4 4 0)))
'(shuffled-cache
  0
  sat-3
  2
  59
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  #f)
'(shuffled-cache
  0
  sat-3
  2
  5
  59
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  40
  12
  6
  22
  8
  5
  13
  1
  4/5
  10
  #f
  7/6
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  sat-3
  2
  59
  app
  "\"'(eval\n  (let (_) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  #f)
'(shuffled-cache
  0
  sat-3
  2
  5
  59
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  74
  34
  11
  29
  5
  2
  7
  1
  5/17
  23
  #f
  45/34
  ((4 4 0) (4 4 0) (9/2 9/2 0)))
'(shuffled-cache
  0
  sat-3
  2
  59
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  #f)
'(shuffled-cache
  0
  sat-3
  2
  5
  59
  app
  "\"'(eval\n  (app or (-> (app not x2) <-) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  46
  18
  6
  22
  5
  2
  7
  1
  5/14
  14
  #f
  11/9
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  sat-3
  2
  5
  59
  app
  "\"'(eval (let (... () (_ (-> (app display s) <-)) () ...) ...) (env ((□? (s)))))\""
  55
  24
  8
  23
  7
  3
  10
  1
  1/3
  20
  #t
  29/24
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  2
  5
  59
  ref-or-constructor
  "\"'(eval\n  (app p n1 (-> n2 <-) n3 n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  65
  26
  9
  30
  7
  3
  10
  1
  1/3
  21
  #f
  16/13
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-3
  2
  59
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  #f)
'(shuffled-cache
  0
  sat-3
  2
  5
  59
  let
  "\"'(eval (λ (s) (-> (let (_) ...) <-)) (env ((□? (s)))))\""
  4
  3
  0
  1
  0
  0
  0
  1
  0
  3
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  2
  5
  59
  ref-or-constructor
  "\"'(eval\n  (app p (-> n1 <-) n2 n3 n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  24
  10
  3
  11
  1
  0
  1
  1
  1/10
  9
  #f
  11/10
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  2
  5
  59
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env ()))\""
  26
  12
  3
  11
  3
  0
  3
  1
  1/4
  11
  #t
  13/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  2
  59
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  #f)
'(shuffled-cache
  0
  sat-3
  2
  59
  app
  "\"'(eval\n  (λ (n5) (-> (app try (λ (n6) ...)) <-))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  #f)
'(shuffled-cache
  0
  sat-3
  2
  5
  59
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  2
  5
  59
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 (-> n3 <-) n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  22
  9
  3
  10
  1
  0
  1
  1
  1/7
  8
  #f
  10/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-3
  2
  5
  59
  ref-or-constructor
  "\"'(eval (app or x1 (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  78
  27
  14
  37
  5
  6
  11
  1
  17/60
  22
  #f
  32/27
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  0
  sat-3
  2
  5
  59
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 (-> n4 <-) n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  120
  50
  24
  46
  13
  10
  23
  1
  139/420
  42
  #f
  29/25
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  0
  sat-3
  2
  59
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  #f)
'(shuffled-cache
  0
  sat-3
  2
  5
  59
  ref-or-constructor
  "\"'(eval (app display (-> s <-)) (env ((□? (s)))))\""
  6
  2
  2
  2
  0
  1
  1
  1
  0
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  2
  59
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  #f)
'(shuffled-cache
  0
  sat-3
  2
  5
  59
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  37
  12
  6
  19
  3
  2
  5
  1
  3/10
  10
  #f
  7/6
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  sat-3
  2
  5
  59
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 n4 (-> n5 <-) n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  64
  23
  10
  31
  3
  2
  5
  1
  1/4
  18
  #f
  28/23
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  sat-3
  2
  59
  app
  "\"'(eval\n  (λ (n4) (-> (app try (λ (n5) ...)) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  #f)
'(shuffled-cache
  0
  sat-3
  2
  59
  app
  "\"'(eval\n  (λ (n7) (-> (app p n1 n2 n3 n4 n5 n6 n7) <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  #f)
'(shuffled-cache
  0
  sat-3
  2
  5
  59
  ref-or-constructor
  "\"'(eval (app not (-> x4 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  35
  12
  6
  17
  3
  2
  5
  1
  3/10
  10
  #f
  7/6
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  sat-3
  2
  59
  app
  "\"'(eval\n  (λ (n2) (-> (app try (λ (n3) ...)) <-))\n  (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  #f)
'(shuffled-cache
  0
  sat-3
  2
  5
  59
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  46
  18
  6
  22
  5
  2
  7
  1
  5/14
  14
  #f
  11/9
  ((1 1 0) (1 1 0) (2 2 0)))
'(shuffled-cache
  0
  sat-3
  2
  5
  59
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  63
  21
  14
  28
  5
  3
  8
  1
  5/16
  17
  #t
  9/7
  ((1 1 0) (1/2 1/2 0) (1 1 0)))
'(shuffled-cache
  0
  sat-3
  2
  5
  59
  app
  "\"'(eval\n  (let (... () (_ (-> (app println \"trying\") <-)) () ...) ...)\n  (env ((□? (f)))))\""
  70
  27
  14
  29
  9
  3
  12
  1
  9/22
  23
  #t
  11/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  2
  59
  app
  "\"'(eval\n  (λ (n6) (-> (app try (λ (n7) ...)) <-))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  #f)
'(shuffled-cache
  0
  sat-3
  2
  59
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4 x5 x6 x7)\n    (->\n     (app\n      and\n      (app or x1 x2)\n      (app or x1 (app not x2) (app not x3))\n      (app or x3 x4)\n      (app or (app not x4) x1)\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  #f)
'(shuffled-cache
  0
  sat-3
  2
  5
  59
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 n4 n5 n6 (-> n7 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  20
  7
  3
  10
  1
  0
  1
  1
  1/7
  6
  #f
  8/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-3
  2
  5
  59
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  59
  23
  10
  26
  3
  2
  5
  1
  1/4
  18
  #f
  28/23
  ((4 4 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  0
  sat-3
  2
  5
  59
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 n4 n5 (-> n6 <-) n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  97
  46
  20
  31
  11
  6
  17
  1
  23/70
  38
  #f
  27/23
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  0
  sat-3
  2
  5
  59
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env ((□? (s)))))\""
  100
  48
  20
  32
  11
  6
  17
  1
  23/80
  40
  #t
  7/6
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  2
  5
  59
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  101
  49
  20
  32
  11
  6
  17
  1
  17/60
  41
  #t
  57/49
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  2
  59
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  #f)
'(shuffled-cache
  0
  sat-3
  2
  5
  59
  ref-or-constructor
  "\"'(eval (app or (-> x3 <-) x4) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  37
  12
  6
  19
  3
  2
  5
  1
  3/10
  10
  #f
  7/6
  ((1 1 0) (1 1 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  sat-3
  2
  59
  let
  "\"'(eval (λ (f) (-> (let (_) ...) <-)) (env ((□? (f)))))\""
  #f)
'(shuffled-cache
  0
  sat-3
  2
  5
  59
  ref-or-constructor
  "\"'(eval (app or (app not x4) (-> x1 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  40
  12
  6
  22
  8
  5
  13
  1
  4/5
  10
  #f
  7/6
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  sat-3
  2
  5
  59
  let
  "\"'(eval (letrec* (println ... sat-solve-7) (-> (let (_) ...) <-)) (env ()))\""
  43
  15
  6
  22
  11
  5
  16
  1
  11/13
  13
  #t
  17/15
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  2
  59
  app
  "\"'(eval\n  (λ (n3) (-> (app try (λ (n4) ...)) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  #f)
'(shuffled-cache
  0
  sat-3
  2
  5
  59
  ref-or-constructor
  "\"'(eval (app or x3 (-> x4 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  35
  12
  6
  17
  3
  2
  5
  1
  3/10
  10
  #f
  7/6
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  sat-3
  2
  5
  59
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  66
  27
  11
  28
  3
  2
  5
  1
  3/13
  19
  #f
  35/27
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  0
  sat-3
  2
  5
  59
  letrec*
  "\"'(eval ((top) letrec* (println ... sat-solve-7) ...) (env ()))\""
  70
  31
  11
  28
  7
  2
  9
  1
  7/17
  23
  #t
  39/31
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  2
  59
  app
  "\"'(eval (app display (-> (app sat-solve-7 phi) <-)) (env ()))\""
  #f)
'(shuffled-cache
  0
  sat-3
  2
  5
  59
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  39
  12
  6
  21
  3
  2
  5
  1
  3/10
  10
  #f
  7/6
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  sat-3
  2
  59
  app
  "\"'(eval\n  (let (... () (_ (-> (app display (app sat-solve-7 phi)) <-)) () ...) ...)\n  (env ()))\""
  #f)
'(shuffled-cache
  0
  sat-3
  2
  5
  59
  app
  "\"'(eval\n  (app or (app not x2) (-> (app not x3) <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  44
  18
  6
  20
  5
  2
  7
  1
  5/14
  14
  #f
  11/9
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  sat-3
  2
  5
  59
  app
  "\"'(eval (app or (-> (app not x4) <-) x1) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  85
  43
  15
  27
  13
  6
  19
  1
  7/19
  32
  #f
  54/43
  ((4 4 0) (4 4 0) (4 4 0)))
'(shuffled-cache
  0
  sat-3
  2
  59
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  #f)
'(shuffled-cache
  0
  sat-3
  2
  5
  59
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  24
  8
  8
  8
  0
  1
  1
  1
  0
  7
  #f
  7/4
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  sat-3
  2
  59
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 x2) <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  #f)
'(shuffled-cache
  0
  sat-3
  2
  59
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  #f)
'(shuffled-cache
  1
  sat-3
  2
  5
  59
  ref-or-constructor
  "\"'(eval (app or (-> x3 <-) x4) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  37
  12
  6
  19
  3
  2
  5
  1
  3/10
  10
  #f
  7/6
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  sat-3
  2
  59
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  #f)
'(shuffled-cache
  1
  sat-3
  2
  59
  app
  "\"'(eval\n  (λ (n2) (-> (app try (λ (n3) ...)) <-))\n  (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  #f)
'(shuffled-cache
  1
  sat-3
  2
  5
  59
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 n4 n5 (-> n6 <-) n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  20
  7
  3
  10
  1
  0
  1
  1
  1/7
  6
  #f
  8/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-3
  2
  5
  59
  app
  "\"'(eval (let (... () (_ (-> (app display s) <-)) () ...) ...) (env ((□? (s)))))\""
  29
  13
  5
  11
  3
  1
  4
  1
  2/11
  12
  #t
  15/13
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  2
  59
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  #f)
'(shuffled-cache
  1
  sat-3
  2
  5
  59
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 n4 (-> n5 <-) n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  20
  7
  3
  10
  1
  0
  1
  1
  1/7
  6
  #f
  8/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-3
  2
  59
  app
  "\"'(eval\n  (let (_) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  #f)
'(shuffled-cache
  1
  sat-3
  2
  5
  59
  ref-or-constructor
  "\"'(eval\n  (app p (-> n1 <-) n2 n3 n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  20
  7
  3
  10
  1
  0
  1
  1
  1/7
  6
  #f
  8/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  2
  59
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (-> (app or (app not x4) x1) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  #f)
'(shuffled-cache
  1
  sat-3
  2
  5
  59
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  40
  12
  6
  22
  8
  5
  13
  1
  4/5
  10
  #f
  7/6
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  sat-3
  2
  5
  59
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  56
  14
  14
  28
  9
  6
  15
  1
  3/4
  12
  #t
  8/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-3
  2
  5
  59
  app
  "\"'(eval (app or (-> (app not x4) <-) x1) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  90
  35
  19
  36
  11
  6
  17
  1
  9/20
  25
  #f
  51/35
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  1
  sat-3
  2
  59
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  #f)
'(shuffled-cache
  1
  sat-3
  2
  5
  59
  ref-or-constructor
  "\"'(eval (app display (-> s <-)) (env ((□? (s)))))\""
  6
  2
  2
  2
  0
  1
  1
  1
  0
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  2
  5
  59
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 (-> n3 <-) n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  27
  10
  5
  12
  1
  1
  2
  1
  1/9
  9
  #f
  11/10
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-3
  2
  59
  let
  "\"'(eval (λ (f) (-> (let (_) ...) <-)) (env ((□? (f)))))\""
  #f)
'(shuffled-cache
  1
  sat-3
  2
  5
  59
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  74
  34
  11
  29
  5
  2
  7
  1
  5/17
  23
  #f
  45/34
  ((9/2 9/2 0) (4 4 0) (4 4 0)))
'(shuffled-cache
  1
  sat-3
  2
  59
  app
  "\"'(eval\n  (λ (n5) (-> (app try (λ (n6) ...)) <-))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  #f)
'(shuffled-cache
  1
  sat-3
  2
  5
  59
  app
  "\"'(eval\n  (app or (app not x2) (-> (app not x3) <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  44
  18
  6
  20
  5
  2
  7
  1
  5/14
  14
  #f
  11/9
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  sat-3
  2
  5
  59
  ref-or-constructor
  "\"'(eval (app not (-> x4 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  83
  41
  15
  27
  13
  6
  19
  1
  7/17
  31
  #f
  51/41
  ((7/2 7/2 0) (7/2 7/2 0) (4 4 0)))
'(shuffled-cache
  1
  sat-3
  2
  59
  ref-or-constructor
  "\"'(eval (app or (app not x4) (-> x1 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  #f)
'(shuffled-cache
  1
  sat-3
  2
  5
  59
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  39
  12
  6
  21
  3
  2
  5
  1
  3/10
  10
  #f
  7/6
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  sat-3
  2
  5
  59
  app
  "\"'(eval\n  (let (... () (_ (-> (app println \"trying\") <-)) () ...) ...)\n  (env ((□? (f)))))\""
  46
  18
  6
  22
  7
  2
  9
  1
  7/16
  16
  #t
  10/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  2
  5
  59
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  103
  56
  15
  32
  22
  6
  28
  1
  23/56
  44
  #f
  69/56
  ((4 4 0) (4 4 0) (4 4 0)))
'(shuffled-cache
  1
  sat-3
  2
  59
  app
  "\"'(eval\n  (let (... () (_ (-> (app display (app sat-solve-7 phi)) <-)) () ...) ...)\n  (env ()))\""
  #f)
'(shuffled-cache
  1
  sat-3
  2
  5
  59
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env ((□? (s)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  2
  5
  59
  ref-or-constructor
  "\"'(eval (app or x3 (-> x4 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  38
  14
  6
  18
  3
  2
  5
  1
  1/4
  12
  #f
  8/7
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  sat-3
  2
  5
  59
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  84
  41
  15
  28
  13
  6
  19
  1
  7/19
  32
  #f
  50/41
  ((4 4 0) (4 4 0) (4 4 0)))
'(shuffled-cache
  1
  sat-3
  2
  5
  59
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  103
  46
  23
  34
  13
  7
  20
  1
  7/22
  36
  #f
  32/23
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  sat-3
  2
  5
  59
  ref-or-constructor
  "\"'(eval\n  (app (-> p <-) n1 n2 n3 n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  109
  49
  25
  35
  15
  9
  24
  1
  9/25
  39
  #t
  67/49
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-3
  2
  5
  59
  letrec*
  "\"'(eval ((top) letrec* (println ... sat-solve-7) ...) (env ()))\""
  113
  53
  25
  35
  19
  9
  28
  1
  13/29
  43
  #t
  71/53
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  2
  59
  app
  "\"'(eval\n  (app or (-> (app not x2) <-) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  #f)
'(shuffled-cache
  1
  sat-3
  2
  59
  app
  "\"'(eval\n  (λ (n4) (-> (app try (λ (n5) ...)) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  #f)
'(shuffled-cache
  1
  sat-3
  2
  5
  59
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  35
  12
  6
  17
  3
  2
  5
  1
  3/10
  10
  #f
  7/6
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  sat-3
  2
  5
  59
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  71
  31
  11
  29
  5
  2
  7
  1
  5/17
  22
  #f
  40/31
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  1
  sat-3
  2
  59
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or x3 x4) <-)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  #f)
'(shuffled-cache
  1
  sat-3
  2
  59
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  #f)
'(shuffled-cache
  1
  sat-3
  2
  5
  59
  let
  "\"'(eval (λ (s) (-> (let (_) ...) <-)) (env ((□? (s)))))\""
  4
  3
  0
  1
  0
  0
  0
  1
  0
  3
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  2
  5
  59
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  43
  15
  6
  22
  3
  2
  5
  1
  3/13
  13
  #f
  17/15
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  sat-3
  2
  59
  app
  "\"'(eval\n  (λ (n7) (-> (app p n1 n2 n3 n4 n5 n6 n7) <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  #f)
'(shuffled-cache
  1
  sat-3
  2
  5
  59
  let
  "\"'(eval (letrec* (println ... sat-solve-7) (-> (let (_) ...) <-)) (env ()))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  3
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  2
  5
  59
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env ()))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  3
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  2
  5
  59
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  40
  15
  6
  19
  6
  2
  8
  1
  6/13
  13
  #f
  17/15
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  sat-3
  2
  5
  59
  ref-or-constructor
  "\"'(eval\n  (app p n1 (-> n2 <-) n3 n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  87
  34
  16
  37
  14
  6
  20
  1
  8/15
  29
  #f
  39/34
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  1
  sat-3
  2
  59
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  #f)
'(shuffled-cache
  1
  sat-3
  2
  5
  59
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 x2) <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  91
  42
  15
  34
  20
  11
  31
  1
  29/51
  31
  #f
  53/42
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  1
  sat-3
  2
  5
  59
  ref-or-constructor
  "\"'(eval (app or x1 (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  91
  42
  15
  34
  20
  11
  31
  1
  29/51
  31
  #f
  53/42
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  2
  59
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4 x5 x6 x7)\n    (->\n     (app\n      and\n      (app or x1 x2)\n      (app or x1 (app not x2) (app not x3))\n      (app or x3 x4)\n      (app or (app not x4) x1)\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  #f)
'(shuffled-cache
  1
  sat-3
  2
  5
  59
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  2
  5
  59
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  41
  14
  6
  21
  3
  2
  5
  1
  3/10
  12
  #f
  8/7
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  sat-3
  2
  5
  59
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  82
  37
  15
  30
  11
  6
  17
  1
  24/65
  29
  #f
  45/37
  ((4 4 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  1
  sat-3
  2
  59
  app
  "\"'(eval\n  (λ (n3) (-> (app try (λ (n4) ...)) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  #f)
'(shuffled-cache
  1
  sat-3
  2
  59
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  #f)
'(shuffled-cache
  1
  sat-3
  2
  59
  app
  "\"'(eval (app display (-> (app sat-solve-7 phi) <-)) (env ()))\""
  #f)
'(shuffled-cache
  1
  sat-3
  2
  5
  59
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 n4 n5 n6 (-> n7 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  20
  7
  3
  10
  1
  0
  1
  1
  1/7
  6
  #f
  8/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-3
  2
  5
  59
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 (-> n4 <-) n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  40
  15
  8
  17
  1
  0
  1
  1
  1/9
  13
  #f
  17/15
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  sat-3
  2
  59
  app
  "\"'(eval\n  (λ (n6) (-> (app try (λ (n7) ...)) <-))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  #f)
'(shuffled-cache
  1
  sat-3
  2
  5
  59
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
