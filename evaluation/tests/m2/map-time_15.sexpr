'(clean-cache
  map
  2
  52
  lettypes
  "\"'(eval ((top) lettypes (cons ... nil) ...) (env ()))\""
  #f)
'(clean-cache
  map
  2
  52
  letrec*
  "\"'(eval (lettypes cons ... nil (letrec* (car ... my-map) ...)) (env ()))\""
  #f)
'(clean-cache
  map
  2
  52
  let
  "\"'(eval (λ (f l) (-> (let (_) ...) <-)) (env ((□? (f l)))))\""
  #f)
'(clean-cache
  map
  2
  15
  52
  app
  "\"'(eval\n  (let (... () (_ (-> (app debug-trace) <-)) () ...) ...)\n  (env ((□? (f l)))))\""
  8
  5
  0
  3
  1
  0
  1
  1
  1/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  2
  52
  letrec
  "\"'(eval (let (_) (-> (letrec (lp) ...) <-)) (env ((□? (f l)))))\""
  #f)
'(clean-cache
  map
  2
  52
  match
  "\"'(eval\n  (λ (lst) (-> (match (app not (app pair? lst)) ...) <-))\n  (env ((□? (lst)) (□? (f l)))))\""
  #f)
'(clean-cache
  map
  2
  15
  52
  app
  "\"'(eval\n  (match (app not (app pair? lst)) (#f) (_ (-> (app nil) <-)))\n  (env ((□? (lst)) (□? (f l)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  2
  15
  52
  app
  "\"'(eval\n  (match\n   (app not (app pair? lst))\n   ((#f)\n    (-> (app cons (app (app id f) (app car lst)) (app lp (app cdr lst))) <-))\n   _)\n  (env ((□? (lst)) (□? (f l)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  2
  52
  app
  "\"'(eval\n  (app cons (app (app id f) (app car lst)) (-> (app lp (app cdr lst)) <-))\n  (env ((□? (lst)) (□? (f l)))))\""
  #f)
'(clean-cache
  map
  2
  52
  app
  "\"'(eval (app lp (-> (app cdr lst) <-)) (env ((□? (lst)) (□? (f l)))))\""
  #f)
'(clean-cache
  map
  2
  52
  ref-or-constructor
  "\"'(eval (app cdr (-> lst <-)) (env ((□? (lst)) (□? (f l)))))\""
  #f)
'(clean-cache
  map
  2
  52
  app
  "\"'(eval\n  (app cons (-> (app (app id f) (app car lst)) <-) (app lp (app cdr lst)))\n  (env ((□? (lst)) (□? (f l)))))\""
  #f)
'(clean-cache
  map
  2
  52
  app
  "\"'(eval (app (app id f) (-> (app car lst) <-)) (env ((□? (lst)) (□? (f l)))))\""
  #f)
'(clean-cache
  map
  2
  52
  ref-or-constructor
  "\"'(eval (app car (-> lst <-)) (env ((□? (lst)) (□? (f l)))))\""
  #f)
'(clean-cache
  map
  2
  15
  52
  app
  "\"'(eval (app (-> (app id f) <-) (app car lst)) (env ((□? (lst)) (□? (f l)))))\""
  33
  20
  7
  6
  11
  6
  17
  1
  25/36
  16
  #f
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  map
  2
  15
  52
  ref-or-constructor
  "\"'(eval (app id (-> f <-)) (env ((□? (lst)) (□? (f l)))))\""
  22
  12
  7
  3
  11
  6
  17
  1
  9/10
  11
  #f
  61/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  2
  52
  app
  "\"'(eval\n  (match (-> (app not (app pair? lst)) <-) (#f) _)\n  (env ((□? (lst)) (□? (f l)))))\""
  #f)
'(clean-cache
  map
  2
  52
  app
  "\"'(eval (app not (-> (app pair? lst) <-)) (env ((□? (lst)) (□? (f l)))))\""
  #f)
'(clean-cache
  map
  2
  52
  ref-or-constructor
  "\"'(eval (app pair? (-> lst <-)) (env ((□? (lst)) (□? (f l)))))\""
  #f)
'(clean-cache
  map
  2
  52
  app
  "\"'(eval (letrec (lp) (-> (app lp l) <-)) (env ((□? (f l)))))\""
  #f)
'(clean-cache
  map
  2
  15
  52
  ref-or-constructor
  "\"'(eval (app lp (-> l <-)) (env ((□? (f l)))))\""
  9
  5
  3
  1
  4
  3
  7
  1
  4/5
  4
  #f
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  2
  15
  52
  let
  "\"'(eval (λ (xx) (-> (let (_) ...) <-)) (env ((□? (xx)))))\""
  31
  17
  7
  7
  11
  6
  17
  1
  49/60
  13
  #f
  89/17
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  map
  2
  15
  52
  app
  "\"'(eval\n  (let (... () (_ (-> (app debug-trace) <-)) () ...) ...)\n  (env ((□? (xx)))))\""
  8
  5
  0
  3
  1
  0
  1
  1
  1/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  2
  15
  52
  ref-or-constructor
  "\"'(eval (let (_) (-> xx <-)) (env ((□? (xx)))))\""
  28
  15
  7
  6
  11
  6
  17
  1
  13/15
  13
  #f
  77/15
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  map
  2
  15
  52
  app
  "\"'(eval (λ () (-> (app #f) <-)) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  2
  52
  match
  "\"'(eval (λ (pair?-v) (-> (match pair?-v ...) <-)) (env ((□? (pair?-v)))))\""
  #f)
'(clean-cache
  map
  2
  15
  52
  app
  "\"'(eval\n  (match pair?-v (cons pair?-c pair?-d) (_ (-> (app #f) <-)))\n  (env ((□? (pair?-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  2
  15
  52
  app
  "\"'(eval\n  (match pair?-v ((cons pair?-c pair?-d) (-> (app #t) <-)) _)\n  (env ((□? (pair?-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  2
  52
  ref-or-constructor
  "\"'(eval (match (-> pair?-v <-) (cons pair?-c pair?-d) _) (env ((□? (pair?-v)))))\""
  #f)
'(clean-cache
  map
  2
  52
  match
  "\"'(eval (λ (cdr-v) (-> (match cdr-v ...) <-)) (env ((□? (cdr-v)))))\""
  #f)
'(clean-cache
  map
  2
  52
  ref-or-constructor
  "\"'(eval (match cdr-v ((cons cdr-c cdr-d) (-> cdr-d <-))) (env ((□? (cdr-v)))))\""
  #f)
'(clean-cache
  map
  2
  52
  ref-or-constructor
  "\"'(eval (match (-> cdr-v <-) (cons cdr-c cdr-d)) (env ((□? (cdr-v)))))\""
  #f)
'(clean-cache
  map
  2
  52
  match
  "\"'(eval (λ (car-v) (-> (match car-v ...) <-)) (env ((□? (car-v)))))\""
  #f)
'(clean-cache
  map
  2
  52
  ref-or-constructor
  "\"'(eval (match car-v ((cons car-c car-d) (-> car-c <-))) (env ((□? (car-v)))))\""
  #f)
'(clean-cache
  map
  2
  52
  ref-or-constructor
  "\"'(eval (match (-> car-v <-) (cons car-c car-d)) (env ((□? (car-v)))))\""
  #f)
'(clean-cache
  map
  2
  52
  let
  "\"'(eval (letrec* (car ... my-map) (-> (let (_) ...) <-)) (env ()))\""
  #f)
'(clean-cache
  map
  2
  52
  app
  "\"'(eval\n  (let (...\n        ()\n        (_\n         (->\n          (app\n           my-map\n           (app id (λ (a) ...))\n           (app cons 1 (app cons 2 (app cons 3 (app nil)))))\n          <-))\n        ()\n        ...)\n    ...)\n  (env ()))\""
  #f)
'(clean-cache
  map
  2
  15
  52
  app
  "\"'(eval\n  (app\n   my-map\n   (app id (λ (a) ...))\n   (-> (app cons 1 (app cons 2 (app cons 3 (app nil)))) <-))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  2
  15
  52
  app
  "\"'(eval (app cons 1 (-> (app cons 2 (app cons 3 (app nil))) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  2
  15
  52
  app
  "\"'(eval (app cons 2 (-> (app cons 3 (app nil)) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  2
  15
  52
  app
  "\"'(eval (app cons 3 (-> (app nil) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  2
  15
  52
  app
  "\"'(eval\n  (app\n   my-map\n   (-> (app id (λ (a) ...)) <-)\n   (app cons 1 (app cons 2 (app cons 3 (app nil)))))\n  (env ()))\""
  13
  6
  4
  3
  6
  3
  9
  1
  1
  6
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  2
  15
  52
  app
  "\"'(eval (λ (a) (-> (app + 1 a) <-)) (env ((□? (a)))))\""
  140
  95
  32
  13
  51
  18
  69
  1
  37/50
  41
  #f
  508/95
  ((25/2 25/2 0) (25/2 25/2 0) (13 13 0)))
'(clean-cache
  map
  2
  15
  52
  ref-or-constructor
  "\"'(eval (app + 1 (-> a <-)) (env ((□? (a)))))\""
  128
  83
  32
  13
  45
  18
  63
  1
  61/80
  37
  #f
  456/83
  ((25/2 25/2 0) (12 12 0) (12 12 0)))
'(clean-cache
  map
  2
  52
  app
  "\"'(eval\n  (let (_)\n    (->\n     (app\n      my-map\n      (app id (λ (b) ...))\n      (app cons 7 (app cons 8 (app cons 9 (app nil)))))\n     <-))\n  (env ()))\""
  #f)
'(clean-cache
  map
  2
  15
  52
  app
  "\"'(eval\n  (app\n   my-map\n   (app id (λ (b) ...))\n   (-> (app cons 7 (app cons 8 (app cons 9 (app nil)))) <-))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  2
  15
  52
  app
  "\"'(eval (app cons 7 (-> (app cons 8 (app cons 9 (app nil))) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  2
  15
  52
  app
  "\"'(eval (app cons 8 (-> (app cons 9 (app nil)) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  2
  15
  52
  app
  "\"'(eval (app cons 9 (-> (app nil) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  2
  15
  52
  app
  "\"'(eval\n  (app\n   my-map\n   (-> (app id (λ (b) ...)) <-)\n   (app cons 7 (app cons 8 (app cons 9 (app nil)))))\n  (env ()))\""
  13
  6
  4
  3
  6
  3
  9
  1
  1
  6
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  2
  15
  52
  app
  "\"'(eval (λ (b) (-> (app + 1 b) <-)) (env ((□? (b)))))\""
  140
  95
  32
  13
  51
  18
  69
  1
  37/50
  41
  #f
  508/95
  ((25/2 25/2 0) (25/2 25/2 0) (25/2 25/2 0)))
'(clean-cache
  map
  2
  15
  52
  ref-or-constructor
  "\"'(eval (app + 1 (-> b <-)) (env ((□? (b)))))\""
  128
  83
  32
  13
  45
  18
  63
  1
  61/80
  37
  #f
  456/83
  ((12 12 0) (12 12 0) (12 12 0)))
'(shuffled-cache
  0
  map
  2
  52
  app
  "\"'(eval (app not (-> (app pair? lst) <-)) (env ((□? (lst)) (□? (f l)))))\""
  #f)
'(shuffled-cache
  0
  map
  2
  15
  52
  ref-or-constructor
  "\"'(eval (app id (-> f <-)) (env ((□? (lst)) (□? (f l)))))\""
  22
  12
  7
  3
  11
  6
  17
  1
  9/10
  11
  #f
  61/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  2
  15
  52
  let
  "\"'(eval (letrec* (car ... my-map) (-> (let (_) ...) <-)) (env ()))\""
  136
  105
  18
  13
  81
  12
  93
  1
  79/85
  61
  #f
  131/21
  ((13 13 0) (13 13 0) (13 13 0)))
'(shuffled-cache
  0
  map
  2
  15
  52
  letrec
  "\"'(eval (let (_) (-> (letrec (lp) ...) <-)) (env ((□? (f l)))))\""
  150
  118
  18
  14
  93
  12
  105
  1
  627/680
  69
  #f
  363/59
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  map
  2
  15
  52
  app
  "\"'(eval (app cons 3 (-> (app nil) <-)) (env ()))\""
  150
  118
  18
  14
  93
  12
  105
  1
  627/680
  69
  #t
  363/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  2
  15
  52
  app
  "\"'(eval\n  (let (... () (_ (-> (app debug-trace) <-)) () ...) ...)\n  (env ((□? (xx)))))\""
  158
  123
  18
  17
  94
  12
  106
  1
  637/730
  74
  #t
  751/123
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  2
  15
  52
  let
  "\"'(eval (λ (xx) (-> (let (_) ...) <-)) (env ((□? (xx)))))\""
  182
  146
  18
  18
  106
  12
  118
  1
  326/365
  87
  #f
  6
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  map
  2
  15
  52
  app
  "\"'(eval (app cons 9 (-> (app nil) <-)) (env ()))\""
  182
  146
  18
  18
  106
  12
  118
  1
  326/365
  87
  #t
  6
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  2
  15
  52
  ref-or-constructor
  "\"'(eval (app pair? (-> lst <-)) (env ((□? (lst)) (□? (f l)))))\""
  182
  146
  18
  18
  106
  12
  118
  1
  326/365
  87
  #f
  6
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  2
  15
  52
  app
  "\"'(eval (app cons 2 (-> (app cons 3 (app nil)) <-)) (env ()))\""
  182
  146
  18
  18
  106
  12
  118
  1
  326/365
  87
  #t
  6
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  2
  52
  app
  "\"'(eval\n  (app cons (-> (app (app id f) (app car lst)) <-) (app lp (app cdr lst)))\n  (env ((□? (lst)) (□? (f l)))))\""
  #f)
'(shuffled-cache
  0
  map
  2
  15
  52
  app
  "\"'(eval (app (-> (app id f) <-) (app car lst)) (env ((□? (lst)) (□? (f l)))))\""
  33
  20
  7
  6
  11
  6
  17
  1
  25/36
  16
  #f
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  map
  2
  15
  52
  app
  "\"'(eval\n  (app\n   my-map\n   (app id (λ (b) ...))\n   (-> (app cons 7 (app cons 8 (app cons 9 (app nil)))) <-))\n  (env ()))\""
  35
  22
  7
  6
  13
  6
  19
  1
  31/42
  18
  #t
  57/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  2
  52
  app
  "\"'(eval (app (app id f) (-> (app car lst) <-)) (env ((□? (lst)) (□? (f l)))))\""
  #f)
'(shuffled-cache
  0
  map
  2
  15
  52
  ref-or-constructor
  "\"'(eval (app + 1 (-> b <-)) (env ((□? (b)))))\""
  128
  83
  32
  13
  45
  18
  63
  1
  61/80
  37
  #f
  456/83
  ((12 12 0) (12 12 0) (12 12 0)))
'(shuffled-cache
  0
  map
  2
  15
  52
  ref-or-constructor
  "\"'(eval (app cdr (-> lst <-)) (env ((□? (lst)) (□? (f l)))))\""
  129
  84
  32
  13
  45
  18
  63
  1
  61/80
  37
  #f
  116/21
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  map
  2
  15
  52
  app
  "\"'(eval (app lp (-> (app cdr lst) <-)) (env ((□? (lst)) (□? (f l)))))\""
  134
  89
  32
  13
  45
  18
  63
  1
  721/960
  41
  #f
  491/89
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  map
  2
  15
  52
  ref-or-constructor
  "\"'(eval (app lp (-> l <-)) (env ((□? (f l)))))\""
  135
  90
  32
  13
  45
  18
  63
  1
  353/480
  42
  #t
  248/45
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  2
  52
  ref-or-constructor
  "\"'(eval (let (_) (-> xx <-)) (env ((□? (xx)))))\""
  #f)
'(shuffled-cache
  0
  map
  2
  15
  52
  app
  "\"'(eval (λ () (-> (app #f) <-)) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  2
  15
  52
  app
  "\"'(eval\n  (app\n   my-map\n   (app id (λ (a) ...))\n   (-> (app cons 1 (app cons 2 (app cons 3 (app nil)))) <-))\n  (env ()))\""
  5
  4
  0
  1
  2
  0
  2
  1
  1/2
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  2
  15
  52
  app
  "\"'(eval (app cons 1 (-> (app cons 2 (app cons 3 (app nil))) <-)) (env ()))\""
  7
  6
  0
  1
  4
  0
  4
  1
  2/3
  6
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  2
  52
  app
  "\"'(eval\n  (let (...\n        ()\n        (_\n         (->\n          (app\n           my-map\n           (app id (λ (a) ...))\n           (app cons 1 (app cons 2 (app cons 3 (app nil)))))\n          <-))\n        ()\n        ...)\n    ...)\n  (env ()))\""
  #f)
'(shuffled-cache
  0
  map
  2
  15
  52
  app
  "\"'(eval\n  (match pair?-v (cons pair?-c pair?-d) (_ (-> (app #f) <-)))\n  (env ((□? (pair?-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  2
  52
  app
  "\"'(eval\n  (let (_)\n    (->\n     (app\n      my-map\n      (app id (λ (b) ...))\n      (app cons 7 (app cons 8 (app cons 9 (app nil)))))\n     <-))\n  (env ()))\""
  #f)
'(shuffled-cache
  0
  map
  2
  52
  match
  "\"'(eval (λ (cdr-v) (-> (match cdr-v ...) <-)) (env ((□? (cdr-v)))))\""
  #f)
'(shuffled-cache
  0
  map
  2
  52
  app
  "\"'(eval (letrec (lp) (-> (app lp l) <-)) (env ((□? (f l)))))\""
  #f)
'(shuffled-cache
  0
  map
  2
  15
  52
  app
  "\"'(eval\n  (app\n   my-map\n   (-> (app id (λ (a) ...)) <-)\n   (app cons 1 (app cons 2 (app cons 3 (app nil)))))\n  (env ()))\""
  13
  6
  4
  3
  6
  3
  9
  1
  1
  6
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  2
  52
  ref-or-constructor
  "\"'(eval (match (-> pair?-v <-) (cons pair?-c pair?-d) _) (env ((□? (pair?-v)))))\""
  #f)
'(shuffled-cache
  0
  map
  2
  52
  match
  "\"'(eval (λ (pair?-v) (-> (match pair?-v ...) <-)) (env ((□? (pair?-v)))))\""
  #f)
'(shuffled-cache
  0
  map
  2
  52
  ref-or-constructor
  "\"'(eval (app car (-> lst <-)) (env ((□? (lst)) (□? (f l)))))\""
  #f)
'(shuffled-cache
  0
  map
  2
  52
  ref-or-constructor
  "\"'(eval (match (-> cdr-v <-) (cons cdr-c cdr-d)) (env ((□? (cdr-v)))))\""
  #f)
'(shuffled-cache
  0
  map
  2
  52
  app
  "\"'(eval\n  (app cons (app (app id f) (app car lst)) (-> (app lp (app cdr lst)) <-))\n  (env ((□? (lst)) (□? (f l)))))\""
  #f)
'(shuffled-cache
  0
  map
  2
  15
  52
  app
  "\"'(eval\n  (let (... () (_ (-> (app debug-trace) <-)) () ...) ...)\n  (env ((□? (f l)))))\""
  8
  5
  0
  3
  1
  0
  1
  1
  1/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  2
  52
  match
  "\"'(eval\n  (λ (lst) (-> (match (app not (app pair? lst)) ...) <-))\n  (env ((□? (lst)) (□? (f l)))))\""
  #f)
'(shuffled-cache
  0
  map
  2
  15
  52
  app
  "\"'(eval\n  (match\n   (app not (app pair? lst))\n   ((#f)\n    (-> (app cons (app (app id f) (app car lst)) (app lp (app cdr lst))) <-))\n   _)\n  (env ((□? (lst)) (□? (f l)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  2
  52
  letrec*
  "\"'(eval (lettypes cons ... nil (letrec* (car ... my-map) ...)) (env ()))\""
  #f)
'(shuffled-cache
  0
  map
  2
  15
  52
  app
  "\"'(eval (λ (b) (-> (app + 1 b) <-)) (env ((□? (b)))))\""
  140
  95
  32
  13
  51
  18
  69
  1
  37/50
  41
  #f
  508/95
  ((25/2 25/2 0) (25/2 25/2 0) (25/2 25/2 0)))
'(shuffled-cache
  0
  map
  2
  15
  52
  app
  "\"'(eval (app cons 8 (-> (app cons 9 (app nil)) <-)) (env ()))\""
  140
  95
  32
  13
  51
  18
  69
  1
  37/50
  41
  #t
  508/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  2
  15
  52
  ref-or-constructor
  "\"'(eval (match car-v ((cons car-c car-d) (-> car-c <-))) (env ((□? (car-v)))))\""
  143
  97
  32
  14
  51
  18
  69
  1
  767/1050
  41
  #f
  520/97
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  map
  2
  52
  ref-or-constructor
  "\"'(eval (app + 1 (-> a <-)) (env ((□? (a)))))\""
  #f)
'(shuffled-cache
  0
  map
  2
  52
  ref-or-constructor
  "\"'(eval (match cdr-v ((cons cdr-c cdr-d) (-> cdr-d <-))) (env ((□? (cdr-v)))))\""
  #f)
'(shuffled-cache
  0
  map
  2
  52
  app
  "\"'(eval\n  (match (-> (app not (app pair? lst)) <-) (#f) _)\n  (env ((□? (lst)) (□? (f l)))))\""
  #f)
'(shuffled-cache
  0
  map
  2
  15
  52
  app
  "\"'(eval\n  (app\n   my-map\n   (-> (app id (λ (b) ...)) <-)\n   (app cons 7 (app cons 8 (app cons 9 (app nil)))))\n  (env ()))\""
  13
  6
  4
  3
  6
  3
  9
  1
  1
  6
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  2
  52
  match
  "\"'(eval (λ (car-v) (-> (match car-v ...) <-)) (env ((□? (car-v)))))\""
  #f)
'(shuffled-cache
  0
  map
  2
  52
  lettypes
  "\"'(eval ((top) lettypes (cons ... nil) ...) (env ()))\""
  #f)
'(shuffled-cache
  0
  map
  2
  15
  52
  app
  "\"'(eval (app cons 7 (-> (app cons 8 (app cons 9 (app nil))) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  2
  15
  52
  app
  "\"'(eval (λ (a) (-> (app + 1 a) <-)) (env ((□? (a)))))\""
  142
  97
  32
  13
  53
  18
  71
  1
  279/370
  43
  #f
  518/97
  ((13 13 0) (13 13 0) (25/2 25/2 0)))
'(shuffled-cache
  0
  map
  2
  15
  52
  app
  "\"'(eval\n  (match pair?-v ((cons pair?-c pair?-d) (-> (app #t) <-)) _)\n  (env ((□? (pair?-v)))))\""
  145
  99
  32
  14
  53
  18
  71
  1
  93/130
  45
  #t
  16/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  2
  15
  52
  let
  "\"'(eval (λ (f l) (-> (let (_) ...) <-)) (env ((□? (f l)))))\""
  174
  124
  34
  16
  75
  19
  94
  1
  489/610
  61
  #f
  333/62
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  map
  2
  15
  52
  ref-or-constructor
  "\"'(eval (match (-> car-v <-) (cons car-c car-d)) (env ((□? (car-v)))))\""
  176
  125
  34
  17
  75
  19
  94
  1
  731/915
  61
  #f
  674/125
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  map
  2
  15
  52
  app
  "\"'(eval\n  (match (app not (app pair? lst)) (#f) (_ (-> (app nil) <-)))\n  (env ((□? (lst)) (□? (f l)))))\""
  182
  131
  34
  17
  75
  19
  94
  1
  237/305
  67
  #t
  704/131
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  2
  15
  52
  app
  "\"'(eval\n  (match pair?-v ((cons pair?-c pair?-d) (-> (app #t) <-)) _)\n  (env ((□? (pair?-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  2
  52
  ref-or-constructor
  "\"'(eval (match cdr-v ((cons cdr-c cdr-d) (-> cdr-d <-))) (env ((□? (cdr-v)))))\""
  #f)
'(shuffled-cache
  1
  map
  2
  52
  app
  "\"'(eval\n  (match (-> (app not (app pair? lst)) <-) (#f) _)\n  (env ((□? (lst)) (□? (f l)))))\""
  #f)
'(shuffled-cache
  1
  map
  2
  52
  app
  "\"'(eval (app not (-> (app pair? lst) <-)) (env ((□? (lst)) (□? (f l)))))\""
  #f)
'(shuffled-cache
  1
  map
  2
  52
  ref-or-constructor
  "\"'(eval (match (-> pair?-v <-) (cons pair?-c pair?-d) _) (env ((□? (pair?-v)))))\""
  #f)
'(shuffled-cache
  1
  map
  2
  52
  app
  "\"'(eval (app (app id f) (-> (app car lst) <-)) (env ((□? (lst)) (□? (f l)))))\""
  #f)
'(shuffled-cache
  1
  map
  2
  52
  ref-or-constructor
  "\"'(eval (match (-> cdr-v <-) (cons cdr-c cdr-d)) (env ((□? (cdr-v)))))\""
  #f)
'(shuffled-cache
  1
  map
  2
  15
  52
  ref-or-constructor
  "\"'(eval (app lp (-> l <-)) (env ((□? (f l)))))\""
  9
  5
  3
  1
  4
  3
  7
  1
  4/5
  4
  #f
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  2
  15
  52
  app
  "\"'(eval\n  (match\n   (app not (app pair? lst))\n   ((#f)\n    (-> (app cons (app (app id f) (app car lst)) (app lp (app cdr lst))) <-))\n   _)\n  (env ((□? (lst)) (□? (f l)))))\""
  16
  9
  3
  4
  4
  3
  7
  1
  4/7
  8
  #t
  16/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  2
  15
  52
  app
  "\"'(eval\n  (let (_)\n    (->\n     (app\n      my-map\n      (app id (λ (b) ...))\n      (app cons 7 (app cons 8 (app cons 9 (app nil)))))\n     <-))\n  (env ()))\""
  128
  102
  14
  12
  69
  9
  78
  1
  4633/5130
  59
  #f
  19/3
  ((13 13 0) (13 13 0) (13 13 0)))
'(shuffled-cache
  1
  map
  2
  15
  52
  ref-or-constructor
  "\"'(eval (match (-> car-v <-) (cons car-c car-d)) (env ((□? (car-v)))))\""
  140
  110
  16
  14
  69
  10
  79
  1
  4633/5310
  61
  #f
  357/55
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  1
  map
  2
  15
  52
  app
  "\"'(eval\n  (app\n   my-map\n   (app id (λ (a) ...))\n   (-> (app cons 1 (app cons 2 (app cons 3 (app nil)))) <-))\n  (env ()))\""
  140
  110
  16
  14
  69
  10
  79
  1
  4633/5310
  61
  #t
  357/55
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  2
  15
  52
  app
  "\"'(eval\n  (match pair?-v (cons pair?-c pair?-d) (_ (-> (app #f) <-)))\n  (env ((□? (pair?-v)))))\""
  143
  112
  16
  15
  69
  10
  79
  1
  77/90
  63
  #t
  181/28
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  2
  15
  52
  app
  "\"'(eval\n  (app\n   my-map\n   (-> (app id (λ (a) ...)) <-)\n   (app cons 1 (app cons 2 (app cons 3 (app nil)))))\n  (env ()))\""
  154
  118
  20
  16
  75
  13
  88
  1
  391/450
  69
  #t
  377/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  2
  15
  52
  lettypes
  "\"'(eval ((top) lettypes (cons ... nil) ...) (env ()))\""
  157
  121
  20
  16
  78
  13
  91
  1
  5353/6120
  69
  #f
  772/121
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  2
  15
  52
  app
  "\"'(eval (app cons 9 (-> (app nil) <-)) (env ()))\""
  157
  121
  20
  16
  78
  13
  91
  1
  5353/6120
  69
  #t
  772/121
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  2
  15
  52
  app
  "\"'(eval\n  (app cons (-> (app (app id f) (app car lst)) <-) (app lp (app cdr lst)))\n  (env ((□? (lst)) (□? (f l)))))\""
  289
  224
  43
  22
  135
  25
  160
  1
  670/801
  115
  #f
  639/112
  ((29/2 29/2 0) (29/2 29/2 0) (29/2 29/2 0)))
'(shuffled-cache
  1
  map
  2
  15
  52
  app
  "\"'(eval\n  (app\n   my-map\n   (app id (λ (b) ...))\n   (-> (app cons 7 (app cons 8 (app cons 9 (app nil)))) <-))\n  (env ()))\""
  289
  224
  43
  22
  135
  25
  160
  1
  670/801
  115
  #t
  639/112
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  2
  15
  52
  let
  "\"'(eval (λ (f l) (-> (let (_) ...) <-)) (env ((□? (f l)))))\""
  304
  238
  43
  23
  148
  25
  173
  1
  371/445
  123
  #f
  1355/238
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  map
  2
  15
  52
  letrec
  "\"'(eval (let (_) (-> (letrec (lp) ...) <-)) (env ((□? (f l)))))\""
  305
  239
  43
  23
  148
  25
  173
  1
  1108/1335
  123
  #f
  1362/239
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  2
  15
  52
  app
  "\"'(eval (letrec (lp) (-> (app lp l) <-)) (env ((□? (f l)))))\""
  306
  240
  43
  23
  148
  25
  173
  1
  1103/1335
  123
  #f
  1369/240
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  2
  15
  52
  app
  "\"'(eval (app cons 3 (-> (app nil) <-)) (env ()))\""
  306
  240
  43
  23
  148
  25
  173
  1
  1103/1335
  123
  #t
  1369/240
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  2
  15
  52
  app
  "\"'(eval\n  (let (...\n        ()\n        (_\n         (->\n          (app\n           my-map\n           (app id (λ (a) ...))\n           (app cons 1 (app cons 2 (app cons 3 (app nil)))))\n          <-))\n        ()\n        ...)\n    ...)\n  (env ()))\""
  308
  242
  43
  23
  150
  25
  175
  1
  83/100
  123
  #f
  1381/242
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  2
  15
  52
  app
  "\"'(eval\n  (app\n   my-map\n   (-> (app id (λ (b) ...)) <-)\n   (app cons 7 (app cons 8 (app cons 9 (app nil)))))\n  (env ()))\""
  308
  242
  43
  23
  150
  25
  175
  1
  83/100
  123
  #t
  1381/242
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  2
  15
  52
  app
  "\"'(eval (app cons 2 (-> (app cons 3 (app nil)) <-)) (env ()))\""
  308
  242
  43
  23
  150
  25
  175
  1
  83/100
  123
  #t
  1381/242
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  2
  15
  52
  app
  "\"'(eval\n  (match (app not (app pair? lst)) (#f) (_ (-> (app nil) <-)))\n  (env ((□? (lst)) (□? (f l)))))\""
  316
  250
  43
  23
  150
  25
  175
  1
  6623/8100
  131
  #t
  1421/250
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  2
  15
  52
  app
  "\"'(eval (app cons 1 (-> (app cons 2 (app cons 3 (app nil))) <-)) (env ()))\""
  316
  250
  43
  23
  150
  25
  175
  1
  6623/8100
  131
  #t
  1421/250
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  2
  15
  52
  ref-or-constructor
  "\"'(eval (app pair? (-> lst <-)) (env ((□? (lst)) (□? (f l)))))\""
  316
  250
  43
  23
  150
  25
  175
  1
  6623/8100
  131
  #f
  1421/250
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  2
  15
  52
  match
  "\"'(eval (λ (cdr-v) (-> (match cdr-v ...) <-)) (env ((□? (cdr-v)))))\""
  320
  253
  43
  24
  150
  25
  175
  1
  3289/4050
  131
  #f
  1450/253
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  1
  map
  2
  15
  52
  app
  "\"'(eval (λ (a) (-> (app + 1 a) <-)) (env ((□? (a)))))\""
  328
  260
  43
  25
  150
  25
  175
  1
  1607/2025
  133
  #f
  74/13
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  map
  2
  15
  52
  ref-or-constructor
  "\"'(eval (app car (-> lst <-)) (env ((□? (lst)) (□? (f l)))))\""
  329
  261
  43
  25
  150
  25
  175
  1
  1607/2025
  133
  #f
  497/87
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  map
  2
  15
  52
  app
  "\"'(eval\n  (let (... () (_ (-> (app debug-trace) <-)) () ...) ...)\n  (env ((□? (f l)))))\""
  338
  269
  43
  26
  157
  25
  182
  1
  3394/4275
  141
  #t
  1531/269
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  2
  15
  52
  app
  "\"'(eval (app cons 7 (-> (app cons 8 (app cons 9 (app nil))) <-)) (env ()))\""
  338
  269
  43
  26
  157
  25
  182
  1
  3394/4275
  141
  #t
  1531/269
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  2
  15
  52
  match
  "\"'(eval (λ (pair?-v) (-> (match pair?-v ...) <-)) (env ((□? (pair?-v)))))\""
  355
  285
  43
  27
  162
  25
  187
  1
  6623/8550
  150
  #f
  1642/285
  ((5 5 0) (5 5 0) (5 5 0)))
'(shuffled-cache
  1
  map
  2
  15
  52
  ref-or-constructor
  "\"'(eval (let (_) (-> xx <-)) (env ((□? (xx)))))\""
  356
  286
  43
  27
  162
  25
  187
  1
  1321/1710
  150
  #f
  824/143
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  2
  15
  52
  app
  "\"'(eval (app cons 8 (-> (app cons 9 (app nil)) <-)) (env ()))\""
  356
  286
  43
  27
  162
  25
  187
  1
  1321/1710
  150
  #t
  824/143
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  2
  15
  52
  app
  "\"'(eval (app (-> (app id f) <-) (app car lst)) (env ((□? (lst)) (□? (f l)))))\""
  358
  288
  43
  27
  162
  25
  187
  1
  11224/14535
  151
  #f
  553/96
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  2
  15
  52
  ref-or-constructor
  "\"'(eval (app + 1 (-> a <-)) (env ((□? (a)))))\""
  358
  288
  43
  27
  162
  25
  187
  1
  11224/14535
  151
  #f
  553/96
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  2
  15
  52
  match
  "\"'(eval (λ (car-v) (-> (match car-v ...) <-)) (env ((□? (car-v)))))\""
  361
  291
  43
  27
  162
  25
  187
  1
  11122/14535
  151
  #f
  1678/291
  ((3/2 3/2 0) (3/2 3/2 0) (2 2 0)))
'(shuffled-cache
  1
  map
  2
  15
  52
  ref-or-constructor
  "\"'(eval (app + 1 (-> b <-)) (env ((□? (b)))))\""
  363
  292
  43
  28
  162
  25
  187
  1
  22193/29070
  151
  #f
  841/146
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  map
  2
  15
  52
  let
  "\"'(eval (λ (xx) (-> (let (_) ...) <-)) (env ((□? (xx)))))\""
  365
  294
  43
  28
  162
  25
  187
  1
  110557/145350
  151
  #f
  121/21
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  2
  15
  52
  app
  "\"'(eval\n  (let (... () (_ (-> (app debug-trace) <-)) () ...) ...)\n  (env ((□? (xx)))))\""
  377
  306
  43
  28
  172
  25
  197
  1
  111781/148410
  163
  #t
  877/153
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  2
  15
  52
  app
  "\"'(eval\n  (app cons (app (app id f) (app car lst)) (-> (app lp (app cdr lst)) <-))\n  (env ((□? (lst)) (□? (f l)))))\""
  441
  370
  43
  28
  209
  25
  234
  1
  16319/22440
  207
  #f
  2113/370
  ((15/2 15/2 0) (15/2 15/2 0) (15/2 15/2 0)))
'(shuffled-cache
  1
  map
  2
  15
  52
  letrec*
  "\"'(eval (lettypes cons ... nil (letrec* (car ... my-map) ...)) (env ()))\""
  441
  370
  43
  28
  209
  25
  234
  1
  16319/22440
  207
  #f
  2113/370
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  2
  15
  52
  ref-or-constructor
  "\"'(eval (app id (-> f <-)) (env ((□? (lst)) (□? (f l)))))\""
  442
  371
  43
  28
  209
  25
  234
  1
  16319/22440
  207
  #f
  2119/371
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  2
  15
  52
  ref-or-constructor
  "\"'(eval (app cdr (-> lst <-)) (env ((□? (lst)) (□? (f l)))))\""
  443
  372
  43
  28
  209
  25
  234
  1
  16319/22440
  207
  #f
  355/62
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  map
  2
  15
  52
  let
  "\"'(eval (letrec* (car ... my-map) (-> (let (_) ...) <-)) (env ()))\""
  443
  372
  43
  28
  209
  25
  234
  1
  16319/22440
  207
  #f
  355/62
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  2
  15
  52
  app
  "\"'(eval (app lp (-> (app cdr lst) <-)) (env ((□? (lst)) (□? (f l)))))\""
  449
  378
  43
  28
  209
  25
  234
  1
  536623/740520
  212
  #f
  1082/189
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  map
  2
  15
  52
  app
  "\"'(eval (λ (b) (-> (app + 1 b) <-)) (env ((□? (b)))))\""
  450
  379
  43
  28
  209
  25
  234
  1
  1606129/2221560
  212
  #f
  2168/379
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  2
  15
  52
  match
  "\"'(eval\n  (λ (lst) (-> (match (app not (app pair? lst)) ...) <-))\n  (env ((□? (lst)) (□? (f l)))))\""
  501
  430
  43
  28
  219
  25
  244
  1
  2348831/3332340
  246
  #f
  1237/215
  ((17/2 17/2 0) (17/2 17/2 0) (17/2 17/2 0)))
'(shuffled-cache
  1
  map
  2
  15
  52
  app
  "\"'(eval (λ () (-> (app #f) <-)) (env ((□? ()))))\""
  504
  432
  43
  29
  219
  25
  244
  1
  2337611/3332340
  248
  #t
  23/4
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  2
  15
  52
  ref-or-constructor
  "\"'(eval (match car-v ((cons car-c car-d) (-> car-c <-))) (env ((□? (car-v)))))\""
  505
  433
  43
  29
  219
  25
  244
  1
  2332001/3332340
  248
  #f
  2488/433
  ((0 0 0) (0 0 0) (0 0 0)))
