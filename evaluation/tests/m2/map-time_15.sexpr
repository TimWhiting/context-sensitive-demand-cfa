'(clean-cache
  map
  2
  15
  52
  lettypes
  "\"'(eval ((top) lettypes (cons ... nil) ...) (env ()))\""
  30
  20
  5
  5
  19
  1
  20
  1
  19/20
  7
  #f
  87/20
  ((1/2 1/2 0) (1 1 0) (1 1 0)))
'(clean-cache
  map
  2
  15
  52
  letrec*
  "\"'(eval (lettypes cons ... nil (letrec* (car ... my-map) ...)) (env ()))\""
  29
  19
  5
  5
  18
  1
  19
  1
  18/19
  7
  #f
  83/19
  ((3/2 2 0) (1 1 0) (1/2 1/2 0)))
'(clean-cache
  map
  2
  15
  52
  let
  "\"'(eval (λ (f l) (-> (let (_) ...) <-)) (env ((□? (f l)))))\""
  24
  14
  5
  5
  3
  1
  4
  1
  3/14
  5
  #f
  61/14
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  map
  2
  15
  52
  app
  "\"'(eval\n  (let (... () (_ (-> (app debug-trace) <-)) () ...) ...)\n  (env ((□? (f l)))))\""
  8
  5
  0
  3
  1
  0
  1
  1
  1/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  2
  15
  52
  letrec
  "\"'(eval (let (_) (-> (letrec (lp) ...) <-)) (env ((□? (f l)))))\""
  23
  13
  5
  5
  3
  1
  4
  1
  3/13
  5
  #f
  57/13
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  map
  2
  52
  match
  "\"'(eval\n  (λ (lst) (-> (match (app not (app pair? lst)) ...) <-))\n  (env ((□? (lst)) (□? (f l)))))\""
  #f)
'(clean-cache
  map
  2
  15
  52
  app
  "\"'(eval\n  (match (app not (app pair? lst)) (#f) (_ (-> (app nil) <-)))\n  (env ((□? (lst)) (□? (f l)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  2
  15
  52
  app
  "\"'(eval\n  (match\n   (app not (app pair? lst))\n   ((#f)\n    (-> (app cons (app (app id f) (app car lst)) (app lp (app cdr lst))) <-))\n   _)\n  (env ((□? (lst)) (□? (f l)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  2
  15
  52
  app
  "\"'(eval\n  (app cons (app (app id f) (app car lst)) (-> (app lp (app cdr lst)) <-))\n  (env ((□? (lst)) (□? (f l)))))\""
  22
  12
  5
  5
  3
  1
  4
  1
  1/4
  5
  #f
  53/12
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  map
  2
  52
  app
  "\"'(eval (app lp (-> (app cdr lst) <-)) (env ((□? (lst)) (□? (f l)))))\""
  #f)
'(clean-cache
  map
  2
  52
  ref-or-constructor
  "\"'(eval (app cdr (-> lst <-)) (env ((□? (lst)) (□? (f l)))))\""
  #f)
'(clean-cache
  map
  2
  52
  app
  "\"'(eval\n  (app cons (-> (app (app id f) (app car lst)) <-) (app lp (app cdr lst)))\n  (env ((□? (lst)) (□? (f l)))))\""
  #f)
'(clean-cache
  map
  2
  52
  app
  "\"'(eval (app (app id f) (-> (app car lst) <-)) (env ((□? (lst)) (□? (f l)))))\""
  #f)
'(clean-cache
  map
  2
  52
  ref-or-constructor
  "\"'(eval (app car (-> lst <-)) (env ((□? (lst)) (□? (f l)))))\""
  #f)
'(clean-cache
  map
  2
  15
  52
  app
  "\"'(eval (app (-> (app id f) <-) (app car lst)) (env ((□? (lst)) (□? (f l)))))\""
  33
  20
  7
  6
  11
  6
  17
  1
  25/36
  16
  #f
  26/5
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  map
  2
  15
  52
  ref-or-constructor
  "\"'(eval (app id (-> f <-)) (env ((□? (lst)) (□? (f l)))))\""
  22
  12
  7
  3
  11
  6
  17
  1
  9/10
  11
  #f
  61/12
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  map
  2
  52
  app
  "\"'(eval\n  (match (-> (app not (app pair? lst)) <-) (#f) _)\n  (env ((□? (lst)) (□? (f l)))))\""
  #f)
'(clean-cache
  map
  2
  52
  app
  "\"'(eval (app not (-> (app pair? lst) <-)) (env ((□? (lst)) (□? (f l)))))\""
  #f)
'(clean-cache
  map
  2
  52
  ref-or-constructor
  "\"'(eval (app pair? (-> lst <-)) (env ((□? (lst)) (□? (f l)))))\""
  #f)
'(clean-cache
  map
  2
  15
  52
  app
  "\"'(eval (letrec (lp) (-> (app lp l) <-)) (env ((□? (f l)))))\""
  22
  12
  5
  5
  3
  1
  4
  1
  1/4
  5
  #f
  53/12
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  map
  2
  15
  52
  ref-or-constructor
  "\"'(eval (app lp (-> l <-)) (env ((□? (f l)))))\""
  9
  5
  3
  1
  4
  3
  7
  1
  4/5
  4
  #f
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  2
  15
  52
  let
  "\"'(eval (λ (xx) (-> (let (_) ...) <-)) (env ((□? (xx)))))\""
  31
  17
  7
  7
  11
  6
  17
  1
  49/60
  13
  #f
  89/17
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  map
  2
  15
  52
  app
  "\"'(eval\n  (let (... () (_ (-> (app debug-trace) <-)) () ...) ...)\n  (env ((□? (xx)))))\""
  8
  5
  0
  3
  1
  0
  1
  1
  1/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  2
  15
  52
  ref-or-constructor
  "\"'(eval (let (_) (-> xx <-)) (env ((□? (xx)))))\""
  28
  15
  7
  6
  11
  6
  17
  1
  13/15
  13
  #f
  77/15
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  map
  2
  15
  52
  app
  "\"'(eval (λ () (-> (app #f) <-)) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  2
  52
  match
  "\"'(eval (λ (pair?-v) (-> (match pair?-v ...) <-)) (env ((□? (pair?-v)))))\""
  #f)
'(clean-cache
  map
  2
  15
  52
  app
  "\"'(eval\n  (match pair?-v (cons pair?-c pair?-d) (_ (-> (app #f) <-)))\n  (env ((□? (pair?-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  2
  15
  52
  app
  "\"'(eval\n  (match pair?-v ((cons pair?-c pair?-d) (-> (app #t) <-)) _)\n  (env ((□? (pair?-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  2
  52
  ref-or-constructor
  "\"'(eval (match (-> pair?-v <-) (cons pair?-c pair?-d) _) (env ((□? (pair?-v)))))\""
  #f)
'(clean-cache
  map
  2
  52
  match
  "\"'(eval (λ (cdr-v) (-> (match cdr-v ...) <-)) (env ((□? (cdr-v)))))\""
  #f)
'(clean-cache
  map
  2
  52
  ref-or-constructor
  "\"'(eval (match cdr-v ((cons cdr-c cdr-d) (-> cdr-d <-))) (env ((□? (cdr-v)))))\""
  #f)
'(clean-cache
  map
  2
  52
  ref-or-constructor
  "\"'(eval (match (-> cdr-v <-) (cons cdr-c cdr-d)) (env ((□? (cdr-v)))))\""
  #f)
'(clean-cache
  map
  2
  52
  match
  "\"'(eval (λ (car-v) (-> (match car-v ...) <-)) (env ((□? (car-v)))))\""
  #f)
'(clean-cache
  map
  2
  52
  ref-or-constructor
  "\"'(eval (match car-v ((cons car-c car-d) (-> car-c <-))) (env ((□? (car-v)))))\""
  #f)
'(clean-cache
  map
  2
  52
  ref-or-constructor
  "\"'(eval (match (-> car-v <-) (cons car-c car-d)) (env ((□? (car-v)))))\""
  #f)
'(clean-cache
  map
  2
  15
  52
  let
  "\"'(eval (letrec* (car ... my-map) (-> (let (_) ...) <-)) (env ()))\""
  28
  18
  5
  5
  17
  1
  18
  1
  17/18
  7
  #f
  79/18
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  map
  2
  15
  52
  app
  "\"'(eval\n  (let (...\n        ()\n        (_\n         (->\n          (app\n           my-map\n           (app id (λ (a) ...))\n           (app cons 1 (app cons 2 (app cons 3 (app nil)))))\n          <-))\n        ()\n        ...)\n    ...)\n  (env ()))\""
  27
  17
  5
  5
  16
  1
  17
  1
  16/17
  7
  #f
  75/17
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  map
  2
  15
  52
  app
  "\"'(eval\n  (app\n   my-map\n   (app id (λ (a) ...))\n   (-> (app cons 1 (app cons 2 (app cons 3 (app nil)))) <-))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  2
  15
  52
  app
  "\"'(eval (app cons 1 (-> (app cons 2 (app cons 3 (app nil))) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  2
  15
  52
  app
  "\"'(eval (app cons 2 (-> (app cons 3 (app nil)) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  2
  15
  52
  app
  "\"'(eval (app cons 3 (-> (app nil) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  2
  15
  52
  app
  "\"'(eval\n  (app\n   my-map\n   (-> (app id (λ (a) ...)) <-)\n   (app cons 1 (app cons 2 (app cons 3 (app nil)))))\n  (env ()))\""
  13
  6
  4
  3
  6
  3
  9
  1
  1
  6
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  2
  52
  app
  "\"'(eval (λ (a) (-> (app + 1 a) <-)) (env ((□? (a)))))\""
  #f)
'(clean-cache
  map
  2
  52
  ref-or-constructor
  "\"'(eval (app + 1 (-> a <-)) (env ((□? (a)))))\""
  #f)
'(clean-cache
  map
  2
  15
  52
  app
  "\"'(eval\n  (let (_)\n    (->\n     (app\n      my-map\n      (app id (λ (b) ...))\n      (app cons 7 (app cons 8 (app cons 9 (app nil)))))\n     <-))\n  (env ()))\""
  27
  17
  5
  5
  16
  1
  17
  1
  16/17
  7
  #f
  75/17
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  map
  2
  15
  52
  app
  "\"'(eval\n  (app\n   my-map\n   (app id (λ (b) ...))\n   (-> (app cons 7 (app cons 8 (app cons 9 (app nil)))) <-))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  2
  15
  52
  app
  "\"'(eval (app cons 7 (-> (app cons 8 (app cons 9 (app nil))) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  2
  15
  52
  app
  "\"'(eval (app cons 8 (-> (app cons 9 (app nil)) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  2
  15
  52
  app
  "\"'(eval (app cons 9 (-> (app nil) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  2
  15
  52
  app
  "\"'(eval\n  (app\n   my-map\n   (-> (app id (λ (b) ...)) <-)\n   (app cons 7 (app cons 8 (app cons 9 (app nil)))))\n  (env ()))\""
  13
  6
  4
  3
  6
  3
  9
  1
  1
  6
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  2
  52
  app
  "\"'(eval (λ (b) (-> (app + 1 b) <-)) (env ((□? (b)))))\""
  #f)
'(clean-cache
  map
  2
  52
  ref-or-constructor
  "\"'(eval (app + 1 (-> b <-)) (env ((□? (b)))))\""
  #f)
'(shuffled-cache
  0
  map
  2
  15
  52
  app
  "\"'(eval (app cons 7 (-> (app cons 8 (app cons 9 (app nil))) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  2
  52
  ref-or-constructor
  "\"'(eval (app + 1 (-> b <-)) (env ((□? (b)))))\""
  #f)
'(shuffled-cache
  0
  map
  2
  15
  52
  app
  "\"'(eval (app cons 9 (-> (app nil) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  2
  52
  ref-or-constructor
  "\"'(eval (app cdr (-> lst <-)) (env ((□? (lst)) (□? (f l)))))\""
  #f)
'(shuffled-cache
  0
  map
  2
  15
  52
  app
  "\"'(eval\n  (app cons (app (app id f) (app car lst)) (-> (app lp (app cdr lst)) <-))\n  (env ((□? (lst)) (□? (f l)))))\""
  22
  12
  5
  5
  3
  1
  4
  1
  1/4
  5
  #f
  53/12
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  map
  2
  15
  52
  letrec*
  "\"'(eval (lettypes cons ... nil (letrec* (car ... my-map) ...)) (env ()))\""
  42
  30
  5
  7
  20
  1
  21
  1
  5/7
  11
  #f
  131/30
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  map
  2
  15
  52
  app
  "\"'(eval\n  (app\n   my-map\n   (app id (λ (a) ...))\n   (-> (app cons 1 (app cons 2 (app cons 3 (app nil)))) <-))\n  (env ()))\""
  44
  32
  5
  7
  22
  1
  23
  1
  17/23
  13
  #t
  141/32
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  2
  15
  52
  app
  "\"'(eval\n  (app\n   my-map\n   (-> (app id (λ (b) ...)) <-)\n   (app cons 7 (app cons 8 (app cons 9 (app nil)))))\n  (env ()))\""
  55
  38
  9
  8
  28
  4
  32
  1
  23/29
  19
  #t
  9/2
  ((1/2 1/2 0) (0 0 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  map
  2
  52
  match
  "\"'(eval\n  (λ (lst) (-> (match (app not (app pair? lst)) ...) <-))\n  (env ((□? (lst)) (□? (f l)))))\""
  #f)
'(shuffled-cache
  0
  map
  2
  15
  52
  app
  "\"'(eval (app cons 3 (-> (app nil) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  2
  52
  app
  "\"'(eval\n  (match (-> (app not (app pair? lst)) <-) (#f) _)\n  (env ((□? (lst)) (□? (f l)))))\""
  #f)
'(shuffled-cache
  0
  map
  2
  15
  52
  let
  "\"'(eval (λ (xx) (-> (let (_) ...) <-)) (env ((□? (xx)))))\""
  31
  17
  7
  7
  11
  6
  17
  1
  49/60
  13
  #f
  89/17
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  map
  2
  15
  52
  let
  "\"'(eval (λ (f l) (-> (let (_) ...) <-)) (env ((□? (f l)))))\""
  68
  42
  16
  10
  34
  11
  45
  1
  125/144
  22
  #f
  33/7
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  map
  2
  15
  52
  lettypes
  "\"'(eval ((top) lettypes (cons ... nil) ...) (env ()))\""
  76
  49
  16
  11
  41
  11
  52
  1
  41/45
  24
  #f
  228/49
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  2
  52
  app
  "\"'(eval (app (app id f) (-> (app car lst) <-)) (env ((□? (lst)) (□? (f l)))))\""
  #f)
'(shuffled-cache
  0
  map
  2
  15
  52
  app
  "\"'(eval\n  (match pair?-v ((cons pair?-c pair?-d) (-> (app #t) <-)) _)\n  (env ((□? (pair?-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  2
  15
  52
  app
  "\"'(eval\n  (app\n   my-map\n   (app id (λ (b) ...))\n   (-> (app cons 7 (app cons 8 (app cons 9 (app nil)))) <-))\n  (env ()))\""
  5
  4
  0
  1
  2
  0
  2
  1
  1/2
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  2
  52
  match
  "\"'(eval (λ (cdr-v) (-> (match cdr-v ...) <-)) (env ((□? (cdr-v)))))\""
  #f)
'(shuffled-cache
  0
  map
  2
  15
  52
  app
  "\"'(eval\n  (let (... () (_ (-> (app debug-trace) <-)) () ...) ...)\n  (env ((□? (f l)))))\""
  8
  5
  0
  3
  1
  0
  1
  1
  1/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  2
  15
  52
  app
  "\"'(eval (app cons 2 (-> (app cons 3 (app nil)) <-)) (env ()))\""
  10
  7
  0
  3
  3
  0
  3
  1
  3/7
  7
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  2
  52
  app
  "\"'(eval (λ (a) (-> (app + 1 a) <-)) (env ((□? (a)))))\""
  #f)
'(shuffled-cache
  0
  map
  2
  15
  52
  ref-or-constructor
  "\"'(eval (app id (-> f <-)) (env ((□? (lst)) (□? (f l)))))\""
  22
  12
  7
  3
  11
  6
  17
  1
  9/10
  11
  #f
  61/12
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  map
  2
  52
  ref-or-constructor
  "\"'(eval (match car-v ((cons car-c car-d) (-> car-c <-))) (env ((□? (car-v)))))\""
  #f)
'(shuffled-cache
  0
  map
  2
  15
  52
  let
  "\"'(eval (letrec* (car ... my-map) (-> (let (_) ...) <-)) (env ()))\""
  28
  18
  5
  5
  17
  1
  18
  1
  17/18
  7
  #f
  79/18
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  map
  2
  15
  52
  app
  "\"'(eval (letrec (lp) (-> (app lp l) <-)) (env ((□? (f l)))))\""
  38
  26
  5
  7
  17
  1
  18
  1
  13/18
  11
  #f
  115/26
  ((1/2 1/2 0) (1/2 1/2 0) (1 1 0)))
'(shuffled-cache
  0
  map
  2
  52
  match
  "\"'(eval (λ (pair?-v) (-> (match pair?-v ...) <-)) (env ((□? (pair?-v)))))\""
  #f)
'(shuffled-cache
  0
  map
  2
  15
  52
  ref-or-constructor
  "\"'(eval (let (_) (-> xx <-)) (env ((□? (xx)))))\""
  28
  15
  7
  6
  11
  6
  17
  1
  13/15
  13
  #f
  77/15
  ((3/2 3/2 0) (3/2 3/2 0) (2 2 0)))
'(shuffled-cache
  0
  map
  2
  52
  ref-or-constructor
  "\"'(eval (match (-> car-v <-) (cons car-c car-d)) (env ((□? (car-v)))))\""
  #f)
'(shuffled-cache
  0
  map
  2
  52
  ref-or-constructor
  "\"'(eval (match (-> cdr-v <-) (cons cdr-c cdr-d)) (env ((□? (cdr-v)))))\""
  #f)
'(shuffled-cache
  0
  map
  2
  15
  52
  app
  "\"'(eval\n  (match\n   (app not (app pair? lst))\n   ((#f)\n    (-> (app cons (app (app id f) (app car lst)) (app lp (app cdr lst))) <-))\n   _)\n  (env ((□? (lst)) (□? (f l)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  2
  15
  52
  app
  "\"'(eval\n  (match pair?-v (cons pair?-c pair?-d) (_ (-> (app #f) <-)))\n  (env ((□? (pair?-v)))))\""
  7
  4
  0
  3
  0
  0
  0
  1
  0
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  2
  15
  52
  app
  "\"'(eval\n  (let (_)\n    (->\n     (app\n      my-map\n      (app id (λ (b) ...))\n      (app cons 7 (app cons 8 (app cons 9 (app nil)))))\n     <-))\n  (env ()))\""
  32
  21
  5
  6
  16
  1
  17
  1
  16/21
  11
  #f
  95/21
  ((1 1 0) (1/2 1/2 0) (1/2 1 0)))
'(shuffled-cache
  0
  map
  2
  15
  52
  app
  "\"'(eval (app cons 8 (-> (app cons 9 (app nil)) <-)) (env ()))\""
  34
  23
  5
  6
  18
  1
  19
  1
  18/23
  13
  #t
  105/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  2
  52
  app
  "\"'(eval (app not (-> (app pair? lst) <-)) (env ((□? (lst)) (□? (f l)))))\""
  #f)
'(shuffled-cache
  0
  map
  2
  52
  ref-or-constructor
  "\"'(eval (app car (-> lst <-)) (env ((□? (lst)) (□? (f l)))))\""
  #f)
'(shuffled-cache
  0
  map
  2
  15
  52
  app
  "\"'(eval\n  (match (app not (app pair? lst)) (#f) (_ (-> (app nil) <-)))\n  (env ((□? (lst)) (□? (f l)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  2
  52
  ref-or-constructor
  "\"'(eval (app pair? (-> lst <-)) (env ((□? (lst)) (□? (f l)))))\""
  #f)
'(shuffled-cache
  0
  map
  2
  52
  match
  "\"'(eval (λ (car-v) (-> (match car-v ...) <-)) (env ((□? (car-v)))))\""
  #f)
'(shuffled-cache
  0
  map
  2
  15
  52
  letrec
  "\"'(eval (let (_) (-> (letrec (lp) ...) <-)) (env ((□? (f l)))))\""
  23
  13
  5
  5
  3
  1
  4
  1
  3/13
  5
  #f
  57/13
  ((1 1 0) (1 1 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  map
  2
  15
  52
  ref-or-constructor
  "\"'(eval (app lp (-> l <-)) (env ((□? (f l)))))\""
  71
  46
  14
  11
  25
  8
  33
  1
  35/54
  21
  #f
  211/46
  ((7/2 4 0) (7/2 4 0) (4 4 0)))
'(shuffled-cache
  0
  map
  2
  52
  app
  "\"'(eval (λ (b) (-> (app + 1 b) <-)) (env ((□? (b)))))\""
  #f)
'(shuffled-cache
  0
  map
  2
  52
  app
  "\"'(eval\n  (app cons (-> (app (app id f) (app car lst)) <-) (app lp (app cdr lst)))\n  (env ((□? (lst)) (□? (f l)))))\""
  #f)
'(shuffled-cache
  0
  map
  2
  52
  ref-or-constructor
  "\"'(eval (match (-> pair?-v <-) (cons pair?-c pair?-d) _) (env ((□? (pair?-v)))))\""
  #f)
'(shuffled-cache
  0
  map
  2
  52
  ref-or-constructor
  "\"'(eval (app + 1 (-> a <-)) (env ((□? (a)))))\""
  #f)
'(shuffled-cache
  0
  map
  2
  52
  ref-or-constructor
  "\"'(eval (match cdr-v ((cons cdr-c cdr-d) (-> cdr-d <-))) (env ((□? (cdr-v)))))\""
  #f)
'(shuffled-cache
  0
  map
  2
  15
  52
  app
  "\"'(eval (λ () (-> (app #f) <-)) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  2
  15
  52
  app
  "\"'(eval\n  (app\n   my-map\n   (-> (app id (λ (a) ...)) <-)\n   (app cons 1 (app cons 2 (app cons 3 (app nil)))))\n  (env ()))\""
  16
  8
  4
  4
  6
  3
  9
  1
  3/4
  8
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  2
  52
  app
  "\"'(eval (app lp (-> (app cdr lst) <-)) (env ((□? (lst)) (□? (f l)))))\""
  #f)
'(shuffled-cache
  0
  map
  2
  15
  52
  app
  "\"'(eval\n  (let (... () (_ (-> (app debug-trace) <-)) () ...) ...)\n  (env ((□? (xx)))))\""
  8
  5
  0
  3
  1
  0
  1
  1
  1/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  2
  15
  52
  app
  "\"'(eval (app cons 1 (-> (app cons 2 (app cons 3 (app nil))) <-)) (env ()))\""
  10
  7
  0
  3
  3
  0
  3
  1
  3/7
  7
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  2
  15
  52
  app
  "\"'(eval (app (-> (app id f) <-) (app car lst)) (env ((□? (lst)) (□? (f l)))))\""
  43
  27
  7
  9
  14
  6
  20
  1
  34/57
  23
  #f
  139/27
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  map
  2
  15
  52
  app
  "\"'(eval\n  (let (...\n        ()\n        (_\n         (->\n          (app\n           my-map\n           (app id (λ (a) ...))\n           (app cons 1 (app cons 2 (app cons 3 (app nil)))))\n          <-))\n        ()\n        ...)\n    ...)\n  (env ()))\""
  74
  46
  16
  12
  32
  11
  43
  1
  7/9
  30
  #f
  111/23
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  map
  2
  52
  ref-or-constructor
  "\"'(eval (match (-> car-v <-) (cons car-c car-d)) (env ((□? (car-v)))))\""
  #f)
'(shuffled-cache
  1
  map
  2
  52
  app
  "\"'(eval\n  (match (-> (app not (app pair? lst)) <-) (#f) _)\n  (env ((□? (lst)) (□? (f l)))))\""
  #f)
'(shuffled-cache
  1
  map
  2
  52
  app
  "\"'(eval (app (app id f) (-> (app car lst) <-)) (env ((□? (lst)) (□? (f l)))))\""
  #f)
'(shuffled-cache
  1
  map
  2
  15
  52
  letrec*
  "\"'(eval (lettypes cons ... nil (letrec* (car ... my-map) ...)) (env ()))\""
  29
  19
  5
  5
  18
  1
  19
  1
  18/19
  7
  #f
  83/19
  ((1/2 1/2 0) (1/2 1/2 0) (1 1 0)))
'(shuffled-cache
  1
  map
  2
  15
  52
  app
  "\"'(eval (letrec (lp) (-> (app lp l) <-)) (env ((□? (f l)))))\""
  39
  27
  5
  7
  18
  1
  19
  1
  14/19
  11
  #f
  119/27
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  map
  2
  52
  ref-or-constructor
  "\"'(eval (app car (-> lst <-)) (env ((□? (lst)) (□? (f l)))))\""
  #f)
'(shuffled-cache
  1
  map
  2
  52
  match
  "\"'(eval\n  (λ (lst) (-> (match (app not (app pair? lst)) ...) <-))\n  (env ((□? (lst)) (□? (f l)))))\""
  #f)
'(shuffled-cache
  1
  map
  2
  15
  52
  app
  "\"'(eval (app cons 1 (-> (app cons 2 (app cons 3 (app nil))) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  2
  15
  52
  app
  "\"'(eval\n  (let (_)\n    (->\n     (app\n      my-map\n      (app id (λ (b) ...))\n      (app cons 7 (app cons 8 (app cons 9 (app nil)))))\n     <-))\n  (env ()))\""
  29
  19
  5
  5
  18
  1
  19
  1
  18/19
  9
  #f
  85/19
  ((1/2 1/2 0) (1/2 1 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  map
  2
  52
  app
  "\"'(eval (app lp (-> (app cdr lst) <-)) (env ((□? (lst)) (□? (f l)))))\""
  #f)
'(shuffled-cache
  1
  map
  2
  15
  52
  app
  "\"'(eval\n  (let (... () (_ (-> (app debug-trace) <-)) () ...) ...)\n  (env ((□? (xx)))))\""
  8
  5
  0
  3
  1
  0
  1
  1
  1/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  2
  52
  ref-or-constructor
  "\"'(eval (app pair? (-> lst <-)) (env ((□? (lst)) (□? (f l)))))\""
  #f)
'(shuffled-cache
  1
  map
  2
  52
  ref-or-constructor
  "\"'(eval (match (-> pair?-v <-) (cons pair?-c pair?-d) _) (env ((□? (pair?-v)))))\""
  #f)
'(shuffled-cache
  1
  map
  2
  15
  52
  app
  "\"'(eval (app cons 8 (-> (app cons 9 (app nil)) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  2
  15
  52
  app
  "\"'(eval (app cons 9 (-> (app nil) <-)) (env ()))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  2
  15
  52
  ref-or-constructor
  "\"'(eval (app lp (-> l <-)) (env ((□? (f l)))))\""
  13
  9
  3
  1
  8
  3
  11
  1
  8/9
  8
  #f
  46/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  2
  15
  52
  app
  "\"'(eval\n  (app\n   my-map\n   (app id (λ (a) ...))\n   (-> (app cons 1 (app cons 2 (app cons 3 (app nil)))) <-))\n  (env ()))\""
  13
  9
  3
  1
  8
  3
  11
  1
  8/9
  8
  #t
  46/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  2
  15
  52
  let
  "\"'(eval (letrec* (car ... my-map) (-> (let (_) ...) <-)) (env ()))\""
  48
  29
  12
  7
  27
  8
  35
  1
  77/81
  15
  #f
  133/29
  ((3/2 2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  map
  2
  52
  app
  "\"'(eval (λ (a) (-> (app + 1 a) <-)) (env ((□? (a)))))\""
  #f)
'(shuffled-cache
  1
  map
  2
  15
  52
  app
  "\"'(eval (app (-> (app id f) <-) (app car lst)) (env ((□? (lst)) (□? (f l)))))\""
  33
  20
  7
  6
  11
  6
  17
  1
  25/36
  16
  #f
  26/5
  ((2 2 0) (2 5/2 0) (2 2 0)))
'(shuffled-cache
  1
  map
  2
  15
  52
  let
  "\"'(eval (λ (xx) (-> (let (_) ...) <-)) (env ((□? (xx)))))\""
  36
  22
  7
  7
  11
  6
  17
  1
  2/3
  16
  #f
  58/11
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  map
  2
  52
  app
  "\"'(eval (λ (b) (-> (app + 1 b) <-)) (env ((□? (b)))))\""
  #f)
'(shuffled-cache
  1
  map
  2
  15
  52
  app
  "\"'(eval\n  (let (... () (_ (-> (app debug-trace) <-)) () ...) ...)\n  (env ((□? (f l)))))\""
  8
  5
  0
  3
  1
  0
  1
  1
  1/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  2
  52
  app
  "\"'(eval\n  (app cons (-> (app (app id f) (app car lst)) <-) (app lp (app cdr lst)))\n  (env ((□? (lst)) (□? (f l)))))\""
  #f)
'(shuffled-cache
  1
  map
  2
  15
  52
  app
  "\"'(eval\n  (match\n   (app not (app pair? lst))\n   ((#f)\n    (-> (app cons (app (app id f) (app car lst)) (app lp (app cdr lst))) <-))\n   _)\n  (env ((□? (lst)) (□? (f l)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  2
  52
  ref-or-constructor
  "\"'(eval (app + 1 (-> b <-)) (env ((□? (b)))))\""
  #f)
'(shuffled-cache
  1
  map
  2
  15
  52
  app
  "\"'(eval\n  (let (...\n        ()\n        (_\n         (->\n          (app\n           my-map\n           (app id (λ (a) ...))\n           (app cons 1 (app cons 2 (app cons 3 (app nil)))))\n          <-))\n        ()\n        ...)\n    ...)\n  (env ()))\""
  27
  17
  5
  5
  16
  1
  17
  1
  16/17
  7
  #f
  75/17
  ((1 1 0) (1 1 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  map
  2
  15
  52
  lettypes
  "\"'(eval ((top) lettypes (cons ... nil) ...) (env ()))\""
  43
  32
  5
  6
  31
  1
  32
  1
  21/22
  12
  #f
  35/8
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  map
  2
  52
  app
  "\"'(eval (app not (-> (app pair? lst) <-)) (env ((□? (lst)) (□? (f l)))))\""
  #f)
'(shuffled-cache
  1
  map
  2
  15
  52
  app
  "\"'(eval\n  (app\n   my-map\n   (-> (app id (λ (a) ...)) <-)\n   (app cons 1 (app cons 2 (app cons 3 (app nil)))))\n  (env ()))\""
  13
  6
  4
  3
  6
  3
  9
  1
  1
  6
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  2
  52
  ref-or-constructor
  "\"'(eval (app + 1 (-> a <-)) (env ((□? (a)))))\""
  #f)
'(shuffled-cache
  1
  map
  2
  15
  52
  app
  "\"'(eval (app cons 3 (-> (app nil) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  2
  15
  52
  app
  "\"'(eval\n  (match (app not (app pair? lst)) (#f) (_ (-> (app nil) <-)))\n  (env ((□? (lst)) (□? (f l)))))\""
  6
  4
  0
  2
  2
  0
  2
  1
  1/2
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  2
  15
  52
  app
  "\"'(eval\n  (match pair?-v (cons pair?-c pair?-d) (_ (-> (app #f) <-)))\n  (env ((□? (pair?-v)))))\""
  9
  6
  0
  3
  2
  0
  2
  1
  1/3
  6
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  2
  15
  52
  app
  "\"'(eval\n  (app cons (app (app id f) (app car lst)) (-> (app lp (app cdr lst)) <-))\n  (env ((□? (lst)) (□? (f l)))))\""
  29
  18
  5
  6
  5
  1
  6
  1
  5/18
  11
  #f
  83/18
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  map
  2
  52
  ref-or-constructor
  "\"'(eval (app cdr (-> lst <-)) (env ((□? (lst)) (□? (f l)))))\""
  #f)
'(shuffled-cache
  1
  map
  2
  15
  52
  app
  "\"'(eval (app cons 7 (-> (app cons 8 (app cons 9 (app nil))) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  2
  52
  ref-or-constructor
  "\"'(eval (match (-> cdr-v <-) (cons cdr-c cdr-d)) (env ((□? (cdr-v)))))\""
  #f)
'(shuffled-cache
  1
  map
  2
  15
  52
  app
  "\"'(eval (λ () (-> (app #f) <-)) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  2
  15
  52
  ref-or-constructor
  "\"'(eval (app id (-> f <-)) (env ((□? (lst)) (□? (f l)))))\""
  25
  14
  7
  4
  11
  6
  17
  1
  3/4
  13
  #f
  71/14
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  map
  2
  15
  52
  ref-or-constructor
  "\"'(eval (let (_) (-> xx <-)) (env ((□? (xx)))))\""
  31
  17
  7
  7
  11
  6
  17
  1
  13/18
  15
  #f
  87/17
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  map
  2
  52
  match
  "\"'(eval (λ (pair?-v) (-> (match pair?-v ...) <-)) (env ((□? (pair?-v)))))\""
  #f)
'(shuffled-cache
  1
  map
  2
  52
  ref-or-constructor
  "\"'(eval (match car-v ((cons car-c car-d) (-> car-c <-))) (env ((□? (car-v)))))\""
  #f)
'(shuffled-cache
  1
  map
  2
  15
  52
  let
  "\"'(eval (λ (f l) (-> (let (_) ...) <-)) (env ((□? (f l)))))\""
  24
  14
  5
  5
  3
  1
  4
  1
  3/14
  5
  #f
  61/14
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  map
  2
  52
  match
  "\"'(eval (λ (car-v) (-> (match car-v ...) <-)) (env ((□? (car-v)))))\""
  #f)
'(shuffled-cache
  1
  map
  2
  15
  52
  app
  "\"'(eval\n  (app\n   my-map\n   (-> (app id (λ (b) ...)) <-)\n   (app cons 7 (app cons 8 (app cons 9 (app nil)))))\n  (env ()))\""
  13
  6
  4
  3
  6
  3
  9
  1
  1
  6
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  2
  15
  52
  app
  "\"'(eval\n  (app\n   my-map\n   (app id (λ (b) ...))\n   (-> (app cons 7 (app cons 8 (app cons 9 (app nil)))) <-))\n  (env ()))\""
  15
  8
  4
  3
  8
  3
  11
  1
  1
  8
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  2
  52
  match
  "\"'(eval (λ (cdr-v) (-> (match cdr-v ...) <-)) (env ((□? (cdr-v)))))\""
  #f)
'(shuffled-cache
  1
  map
  2
  52
  ref-or-constructor
  "\"'(eval (match cdr-v ((cons cdr-c cdr-d) (-> cdr-d <-))) (env ((□? (cdr-v)))))\""
  #f)
'(shuffled-cache
  1
  map
  2
  15
  52
  app
  "\"'(eval\n  (match pair?-v ((cons pair?-c pair?-d) (-> (app #t) <-)) _)\n  (env ((□? (pair?-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  2
  15
  52
  app
  "\"'(eval (app cons 2 (-> (app cons 3 (app nil)) <-)) (env ()))\""
  5
  4
  0
  1
  2
  0
  2
  1
  1/2
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  2
  15
  52
  letrec
  "\"'(eval (let (_) (-> (letrec (lp) ...) <-)) (env ((□? (f l)))))\""
  28
  17
  5
  6
  5
  1
  6
  1
  5/17
  9
  #f
  77/17
  ((1 1 0) (1 1 0) (1 1 0)))
