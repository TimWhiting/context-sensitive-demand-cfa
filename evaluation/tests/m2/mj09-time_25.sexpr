'(clean-cache
  mj09
  2
  25
  21
  let
  "\"'(eval ((top) let (h) ...) (env ()))\""
  41
  26
  10
  5
  26
  10
  36
  1
  1
  11
  #f
  115/26
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  2
  25
  21
  let
  "\"'(eval (λ (b) (-> (let (g) ...) <-)) (env ((□? (b)))))\""
  123
  86
  20
  17
  48
  17
  65
  1
  10351/15750
  35
  #f
  197/43
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  mj09
  2
  25
  21
  ref-or-constructor
  "\"'(eval (λ (z) (-> z <-)) (env ((□? (z)) (□? (b)))))\""
  101
  66
  20
  15
  36
  17
  53
  1
  421/630
  29
  #f
  152/33
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  mj09
  2
  25
  21
  let
  "\"'(eval (let (g) (-> (let (f) ...) <-)) (env ((□? (b)))))\""
  120
  83
  20
  17
  46
  17
  63
  1
  9931/15120
  35
  #f
  382/83
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  mj09
  2
  25
  21
  match
  "\"'(eval (λ (k) (-> (match b ...) <-)) (env ((□? (k)) (□? (b)))))\""
  77
  53
  14
  10
  26
  13
  39
  1
  47/72
  25
  #f
  244/53
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  mj09
  2
  25
  21
  app
  "\"'(eval (match b (#f) (_ (-> (app k 1) <-))) (env ((□? (k)) (□? (b)))))\""
  19
  9
  5
  5
  0
  0
  0
  1
  0
  5
  #f
  41/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  2
  25
  21
  ref-or-constructor
  "\"'(eval (app (-> k <-) 1) (env ((□? (k)) (□? (b)))))\""
  6
  2
  2
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  2
  25
  21
  app
  "\"'(eval (match b ((#f) (-> (app k 2) <-)) _) (env ((□? (k)) (□? (b)))))\""
  19
  9
  5
  5
  0
  0
  0
  1
  0
  5
  #f
  41/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  2
  25
  21
  ref-or-constructor
  "\"'(eval (app (-> k <-) 2) (env ((□? (k)) (□? (b)))))\""
  6
  2
  2
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  2
  25
  21
  ref-or-constructor
  "\"'(eval (match (-> b <-) (#f) _) (env ((□? (k)) (□? (b)))))\""
  10
  5
  3
  2
  4
  3
  7
  1
  4/5
  4
  #f
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  2
  25
  21
  let
  "\"'(eval (let (f) (-> (let (y) ...) <-)) (env ((□? (b)))))\""
  117
  80
  20
  17
  44
  17
  61
  1
  9511/14490
  35
  #f
  37/8
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  mj09
  2
  25
  21
  app
  "\"'(eval\n  (let (... () (y (-> (app f (λ (x) ...)) <-)) () ...) ...)\n  (env ((□? (b)))))\""
  85
  60
  14
  11
  32
  13
  45
  1
  7159/10710
  29
  #f
  14/3
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  mj09
  2
  25
  21
  ref-or-constructor
  "\"'(eval (λ (x) (-> x <-)) (env ((□? (x)) (□? (b)))))\""
  12
  5
  3
  4
  0
  0
  0
  1
  0
  2
  #f
  22/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  2
  25
  21
  app
  "\"'(eval (let (y) (-> (app g y) <-)) (env ((□? (b)))))\""
  114
  77
  20
  17
  42
  17
  59
  1
  9091/13860
  35
  #f
  358/77
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  mj09
  2
  25
  21
  ref-or-constructor
  "\"'(eval (app g (-> y <-)) (env ((□? (b)))))\""
  88
  63
  14
  11
  34
  13
  47
  1
  7579/11340
  29
  #f
  292/63
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  mj09
  2
  25
  21
  let
  "\"'(eval (let (h) (-> (let (x ... y) ...) <-)) (env ()))\""
  40
  25
  10
  5
  25
  10
  35
  1
  1
  11
  #f
  111/25
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  2
  25
  21
  app
  "\"'(eval (let (... x (y (-> (app h (app #f)) <-)) () ...) ...) (env ()))\""
  38
  23
  10
  5
  23
  10
  33
  1
  1
  11
  #f
  103/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  2
  25
  21
  app
  "\"'(eval (app h (-> (app #f) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  2
  25
  21
  app
  "\"'(eval (let (... () (x (-> (app h (app #t)) <-)) y ...) ...) (env ()))\""
  38
  23
  10
  5
  23
  10
  33
  1
  1
  11
  #f
  103/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  2
  25
  21
  app
  "\"'(eval (app h (-> (app #t) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  2
  25
  21
  ref-or-constructor
  "\"'(eval (let (x ... y) (-> y <-)) (env ()))\""
  39
  24
  10
  5
  24
  10
  34
  1
  1
  11
  #f
  107/24
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  25
  21
  ref-or-constructor
  "\"'(eval (match (-> b <-) (#f) _) (env ((□? (k)) (□? (b)))))\""
  10
  5
  3
  2
  4
  3
  7
  1
  4/5
  4
  #f
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  25
  21
  let
  "\"'(eval (let (h) (-> (let (x ... y) ...) <-)) (env ()))\""
  45
  28
  10
  7
  27
  10
  37
  1
  53/54
  13
  #f
  127/28
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  25
  21
  match
  "\"'(eval (λ (k) (-> (match b ...) <-)) (env ((□? (k)) (□? (b)))))\""
  99
  70
  16
  13
  43
  15
  58
  1
  1139/1350
  30
  #f
  317/70
  ((2 2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  mj09
  2
  25
  21
  let
  "\"'(eval (λ (b) (-> (let (g) ...) <-)) (env ((□? (b)))))\""
  115
  82
  18
  15
  54
  17
  71
  1
  15937/18900
  33
  #f
  184/41
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  mj09
  2
  25
  21
  app
  "\"'(eval (let (y) (-> (app g y) <-)) (env ((□? (b)))))\""
  116
  83
  18
  15
  54
  17
  71
  1
  15727/18900
  33
  #f
  372/83
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  25
  21
  app
  "\"'(eval (app h (-> (app #f) <-)) (env ()))\""
  116
  83
  18
  15
  54
  17
  71
  1
  15727/18900
  33
  #t
  372/83
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  25
  21
  ref-or-constructor
  "\"'(eval (λ (z) (-> z <-)) (env ((□? (z)) (□? (b)))))\""
  121
  84
  19
  18
  54
  17
  71
  1
  15517/18900
  33
  #f
  94/21
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  25
  21
  ref-or-constructor
  "\"'(eval (λ (x) (-> x <-)) (env ((□? (x)) (□? (b)))))\""
  126
  85
  20
  21
  54
  17
  71
  1
  7741/9450
  33
  #f
  76/17
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  25
  21
  ref-or-constructor
  "\"'(eval (app g (-> y <-)) (env ((□? (b)))))\""
  127
  86
  20
  21
  54
  17
  71
  1
  3818/4725
  33
  #f
  192/43
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  25
  21
  let
  "\"'(eval (let (f) (-> (let (y) ...) <-)) (env ((□? (b)))))\""
  128
  87
  20
  21
  54
  17
  71
  1
  7531/9450
  33
  #f
  388/87
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  25
  21
  ref-or-constructor
  "\"'(eval (app (-> k <-) 2) (env ((□? (k)) (□? (b)))))\""
  128
  87
  20
  21
  54
  17
  71
  1
  7531/9450
  33
  #t
  388/87
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  25
  21
  app
  "\"'(eval (let (... () (x (-> (app h (app #t)) <-)) y ...) ...) (env ()))\""
  131
  90
  20
  21
  57
  17
  74
  1
  16427/20160
  34
  #f
  401/90
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  25
  21
  let
  "\"'(eval ((top) let (h) ...) (env ()))\""
  132
  91
  20
  21
  58
  17
  75
  1
  17057/20790
  34
  #f
  405/91
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  25
  21
  app
  "\"'(eval (match b (#f) (_ (-> (app k 1) <-))) (env ((□? (k)) (□? (b)))))\""
  132
  91
  20
  21
  58
  17
  75
  1
  17057/20790
  34
  #f
  405/91
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  25
  21
  app
  "\"'(eval (match b ((#f) (-> (app k 2) <-)) _) (env ((□? (k)) (□? (b)))))\""
  132
  91
  20
  21
  58
  17
  75
  1
  17057/20790
  34
  #f
  405/91
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  25
  21
  ref-or-constructor
  "\"'(eval (app (-> k <-) 1) (env ((□? (k)) (□? (b)))))\""
  133
  92
  20
  21
  58
  17
  75
  1
  2837/3465
  35
  #t
  411/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  25
  21
  app
  "\"'(eval\n  (let (... () (y (-> (app f (λ (x) ...)) <-)) () ...) ...)\n  (env ((□? (b)))))\""
  134
  93
  20
  21
  58
  17
  75
  1
  934/1155
  35
  #f
  415/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  25
  21
  app
  "\"'(eval (let (... x (y (-> (app h (app #f)) <-)) () ...) ...) (env ()))\""
  134
  93
  20
  21
  58
  17
  75
  1
  934/1155
  35
  #f
  415/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  25
  21
  ref-or-constructor
  "\"'(eval (let (x ... y) (-> y <-)) (env ()))\""
  134
  93
  20
  21
  58
  17
  75
  1
  934/1155
  35
  #f
  415/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  25
  21
  let
  "\"'(eval (let (g) (-> (let (f) ...) <-)) (env ((□? (b)))))\""
  135
  94
  20
  21
  58
  17
  75
  1
  2767/3465
  35
  #f
  419/94
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  25
  21
  app
  "\"'(eval (app h (-> (app #t) <-)) (env ()))\""
  135
  94
  20
  21
  58
  17
  75
  1
  2767/3465
  35
  #t
  419/94
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  25
  21
  ref-or-constructor
  "\"'(eval (match (-> b <-) (#f) _) (env ((□? (k)) (□? (b)))))\""
  10
  5
  3
  2
  4
  3
  7
  1
  4/5
  4
  #f
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  25
  21
  app
  "\"'(eval (app h (-> (app #t) <-)) (env ()))\""
  10
  5
  3
  2
  4
  3
  7
  1
  4/5
  4
  #t
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  25
  21
  ref-or-constructor
  "\"'(eval (app (-> k <-) 2) (env ((□? (k)) (□? (b)))))\""
  20
  8
  8
  4
  6
  7
  13
  1
  5/7
  7
  #t
  21/4
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  25
  21
  let
  "\"'(eval (let (f) (-> (let (y) ...) <-)) (env ((□? (b)))))\""
  65
  37
  18
  10
  34
  17
  51
  1
  127/138
  19
  #f
  170/37
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  mj09
  2
  25
  21
  let
  "\"'(eval ((top) let (h) ...) (env ()))\""
  75
  46
  18
  11
  43
  17
  60
  1
  89/93
  21
  #f
  104/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  25
  21
  match
  "\"'(eval (λ (k) (-> (match b ...) <-)) (env ((□? (k)) (□? (b)))))\""
  106
  75
  18
  13
  53
  17
  70
  1
  1121/1302
  31
  #f
  338/75
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  mj09
  2
  25
  21
  ref-or-constructor
  "\"'(eval (let (x ... y) (-> y <-)) (env ()))\""
  106
  75
  18
  13
  53
  17
  70
  1
  1121/1302
  31
  #f
  338/75
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  25
  21
  ref-or-constructor
  "\"'(eval (app (-> k <-) 1) (env ((□? (k)) (□? (b)))))\""
  107
  76
  18
  13
  53
  17
  70
  1
  559/651
  32
  #t
  86/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  25
  21
  let
  "\"'(eval (let (g) (-> (let (f) ...) <-)) (env ((□? (b)))))\""
  109
  78
  18
  13
  54
  17
  71
  1
  184/217
  32
  #f
  176/39
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  25
  21
  app
  "\"'(eval (app h (-> (app #f) <-)) (env ()))\""
  109
  78
  18
  13
  54
  17
  71
  1
  184/217
  32
  #t
  176/39
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  25
  21
  app
  "\"'(eval (let (y) (-> (app g y) <-)) (env ((□? (b)))))\""
  110
  79
  18
  13
  54
  17
  71
  1
  545/651
  32
  #f
  356/79
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  25
  21
  app
  "\"'(eval\n  (let (... () (y (-> (app f (λ (x) ...)) <-)) () ...) ...)\n  (env ((□? (b)))))\""
  111
  80
  18
  13
  54
  17
  71
  1
  538/651
  32
  #f
  9/2
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  25
  21
  let
  "\"'(eval (λ (b) (-> (let (g) ...) <-)) (env ((□? (b)))))\""
  113
  82
  18
  13
  55
  17
  72
  1
  177/217
  32
  #f
  184/41
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  25
  21
  let
  "\"'(eval (let (h) (-> (let (x ... y) ...) <-)) (env ()))\""
  113
  82
  18
  13
  55
  17
  72
  1
  177/217
  32
  #f
  184/41
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  25
  21
  ref-or-constructor
  "\"'(eval (app g (-> y <-)) (env ((□? (b)))))\""
  114
  83
  18
  13
  55
  17
  72
  1
  524/651
  32
  #f
  372/83
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  25
  21
  app
  "\"'(eval (let (... () (x (-> (app h (app #t)) <-)) y ...) ...) (env ()))\""
  117
  86
  18
  13
  58
  17
  75
  1
  1139/1386
  33
  #f
  385/86
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  25
  21
  app
  "\"'(eval (let (... x (y (-> (app h (app #f)) <-)) () ...) ...) (env ()))\""
  117
  86
  18
  13
  58
  17
  75
  1
  1139/1386
  33
  #f
  385/86
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  25
  21
  ref-or-constructor
  "\"'(eval (λ (x) (-> x <-)) (env ((□? (x)) (□? (b)))))\""
  122
  87
  19
  16
  58
  17
  75
  1
  1135/1386
  33
  #f
  389/87
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  25
  21
  app
  "\"'(eval (match b ((#f) (-> (app k 2) <-)) _) (env ((□? (k)) (□? (b)))))\""
  126
  90
  19
  17
  58
  17
  75
  1
  33827/41580
  34
  #f
  67/15
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  25
  21
  ref-or-constructor
  "\"'(eval (λ (z) (-> z <-)) (env ((□? (z)) (□? (b)))))\""
  131
  91
  20
  20
  58
  17
  75
  1
  3037/3780
  34
  #f
  58/13
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  25
  21
  app
  "\"'(eval (match b (#f) (_ (-> (app k 1) <-))) (env ((□? (k)) (□? (b)))))\""
  135
  94
  20
  21
  58
  17
  75
  1
  2767/3465
  35
  #f
  419/94
  ((0 0 0) (0 0 0) (0 0 0)))
