'(clean-cache
  mj09
  2
  25
  21
  let
  "\"'(eval ((top) let (h) ...) (env ()))\""
  41
  26
  10
  5
  26
  10
  36
  1
  1
  11
  #f
  115/26
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  mj09
  2
  25
  21
  let
  "\"'(eval (λ (b) (-> (let (g) ...) <-)) (env ((□? (b)))))\""
  137
  98
  20
  19
  60
  17
  77
  1
  2179/3150
  39
  #f
  223/49
  ((10 10 0) (9 9 0) (17/2 9 0)))
'(clean-cache
  mj09
  2
  25
  21
  ref-or-constructor
  "\"'(eval (λ (z) (-> z <-)) (env ((□? (z)) (□? (b)))))\""
  115
  78
  20
  17
  48
  17
  65
  1
  8543/11970
  33
  #f
  178/39
  ((8 17/2 0) (19/2 19/2 0) (17/2 17/2 0)))
'(clean-cache
  mj09
  2
  25
  21
  let
  "\"'(eval (let (g) (-> (let (f) ...) <-)) (env ((□? (b)))))\""
  134
  95
  20
  19
  58
  17
  75
  1
  2095/3024
  39
  #f
  434/95
  ((17/2 17/2 0) (17/2 17/2 0) (17/2 17/2 0)))
'(clean-cache
  mj09
  2
  25
  21
  match
  "\"'(eval (λ (k) (-> (match b ...) <-)) (env ((□? (k)) (□? (b)))))\""
  77
  53
  14
  10
  26
  13
  39
  1
  47/72
  25
  #f
  244/53
  ((5 11/2 0) (11/2 11/2 0) (6 13/2 0)))
'(clean-cache
  mj09
  2
  25
  21
  app
  "\"'(eval (match b (#f) (_ (-> (app k 1) <-))) (env ((□? (k)) (□? (b)))))\""
  19
  9
  5
  5
  0
  0
  0
  1
  0
  5
  #f
  41/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  mj09
  2
  25
  21
  ref-or-constructor
  "\"'(eval (app (-> k <-) 1) (env ((□? (k)) (□? (b)))))\""
  6
  2
  2
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  2
  25
  21
  app
  "\"'(eval (match b ((#f) (-> (app k 2) <-)) _) (env ((□? (k)) (□? (b)))))\""
  19
  9
  5
  5
  0
  0
  0
  1
  0
  5
  #f
  41/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  mj09
  2
  25
  21
  ref-or-constructor
  "\"'(eval (app (-> k <-) 2) (env ((□? (k)) (□? (b)))))\""
  6
  2
  2
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  2
  25
  21
  ref-or-constructor
  "\"'(eval (match (-> b <-) (#f) _) (env ((□? (k)) (□? (b)))))\""
  10
  5
  3
  2
  4
  3
  7
  1
  4/5
  4
  #f
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  2
  25
  21
  let
  "\"'(eval (let (f) (-> (let (y) ...) <-)) (env ((□? (b)))))\""
  131
  92
  20
  19
  56
  17
  73
  1
  2011/2898
  39
  #f
  211/46
  ((17/2 9 0) (17/2 9 0) (17/2 17/2 0)))
'(clean-cache
  mj09
  2
  25
  21
  app
  "\"'(eval\n  (let (... () (y (-> (app f (λ (x) ...)) <-)) () ...) ...)\n  (env ((□? (b)))))\""
  85
  60
  14
  11
  32
  13
  45
  1
  7159/10710
  29
  #f
  14/3
  ((13/2 13/2 0) (15/2 8 0) (13/2 13/2 0)))
'(clean-cache
  mj09
  2
  25
  21
  ref-or-constructor
  "\"'(eval (λ (x) (-> x <-)) (env ((□? (x)) (□? (b)))))\""
  12
  5
  3
  4
  0
  0
  0
  1
  0
  2
  #f
  22/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  mj09
  2
  25
  21
  app
  "\"'(eval (let (y) (-> (app g y) <-)) (env ((□? (b)))))\""
  128
  89
  20
  19
  54
  17
  71
  1
  1927/2772
  39
  #f
  410/89
  ((8 17/2 0) (8 17/2 0) (8 17/2 0)))
'(clean-cache
  mj09
  2
  25
  21
  ref-or-constructor
  "\"'(eval (app g (-> y <-)) (env ((□? (b)))))\""
  88
  63
  14
  11
  34
  13
  47
  1
  7579/11340
  29
  #f
  292/63
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(clean-cache
  mj09
  2
  25
  21
  let
  "\"'(eval (let (h) (-> (let (x ... y) ...) <-)) (env ()))\""
  40
  25
  10
  5
  25
  10
  35
  1
  1
  11
  #f
  111/25
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  mj09
  2
  25
  21
  app
  "\"'(eval (let (... x (y (-> (app h (app #f)) <-)) () ...) ...) (env ()))\""
  38
  23
  10
  5
  23
  10
  33
  1
  1
  11
  #f
  103/23
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  mj09
  2
  25
  21
  app
  "\"'(eval (app h (-> (app #f) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  2
  25
  21
  app
  "\"'(eval (let (... () (x (-> (app h (app #t)) <-)) y ...) ...) (env ()))\""
  38
  23
  10
  5
  23
  10
  33
  1
  1
  11
  #f
  103/23
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  mj09
  2
  25
  21
  app
  "\"'(eval (app h (-> (app #t) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  2
  25
  21
  ref-or-constructor
  "\"'(eval (let (x ... y) (-> y <-)) (env ()))\""
  39
  24
  10
  5
  24
  10
  34
  1
  1
  11
  #f
  107/24
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  mj09
  2
  25
  21
  match
  "\"'(eval (λ (k) (-> (match b ...) <-)) (env ((□? (k)) (□? (b)))))\""
  77
  53
  14
  10
  26
  13
  39
  1
  47/72
  25
  #f
  244/53
  ((11/2 11/2 0) (11/2 11/2 0) (11/2 11/2 0)))
'(shuffled-cache
  0
  mj09
  2
  25
  21
  ref-or-constructor
  "\"'(eval (app (-> k <-) 2) (env ((□? (k)) (□? (b)))))\""
  77
  53
  14
  10
  26
  13
  39
  1
  47/72
  25
  #t
  244/53
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  25
  21
  app
  "\"'(eval (app h (-> (app #f) <-)) (env ()))\""
  77
  53
  14
  10
  26
  13
  39
  1
  47/72
  25
  #t
  244/53
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  25
  21
  app
  "\"'(eval (match b (#f) (_ (-> (app k 1) <-))) (env ((□? (k)) (□? (b)))))\""
  77
  53
  14
  10
  26
  13
  39
  1
  47/72
  25
  #f
  244/53
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  25
  21
  ref-or-constructor
  "\"'(eval (app g (-> y <-)) (env ((□? (b)))))\""
  88
  62
  14
  12
  34
  13
  47
  1
  4031/5670
  27
  #f
  141/31
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  mj09
  2
  25
  21
  app
  "\"'(eval (match b ((#f) (-> (app k 2) <-)) _) (env ((□? (k)) (□? (b)))))\""
  88
  62
  14
  12
  34
  13
  47
  1
  4031/5670
  27
  #f
  141/31
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  25
  21
  ref-or-constructor
  "\"'(eval (let (x ... y) (-> y <-)) (env ()))\""
  104
  74
  16
  14
  46
  15
  61
  1
  15307/18270
  31
  #f
  167/37
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  25
  21
  app
  "\"'(eval (let (... () (x (-> (app h (app #t)) <-)) y ...) ...) (env ()))\""
  117
  84
  18
  15
  56
  17
  73
  1
  8336/9765
  34
  #f
  377/84
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  25
  21
  app
  "\"'(eval\n  (let (... () (y (-> (app f (λ (x) ...)) <-)) () ...) ...)\n  (env ((□? (b)))))\""
  118
  85
  18
  15
  56
  17
  73
  1
  8231/9765
  34
  #f
  381/85
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  25
  21
  ref-or-constructor
  "\"'(eval (app (-> k <-) 1) (env ((□? (k)) (□? (b)))))\""
  119
  86
  18
  15
  56
  17
  73
  1
  16427/19530
  35
  #t
  9/2
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  25
  21
  app
  "\"'(eval (let (y) (-> (app g y) <-)) (env ((□? (b)))))\""
  120
  87
  18
  15
  56
  17
  73
  1
  16217/19530
  35
  #f
  391/87
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  25
  21
  app
  "\"'(eval (app h (-> (app #t) <-)) (env ()))\""
  120
  87
  18
  15
  56
  17
  73
  1
  16217/19530
  35
  #t
  391/87
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  25
  21
  let
  "\"'(eval (let (f) (-> (let (y) ...) <-)) (env ((□? (b)))))\""
  121
  88
  18
  15
  56
  17
  73
  1
  16007/19530
  35
  #f
  395/88
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  25
  21
  ref-or-constructor
  "\"'(eval (λ (z) (-> z <-)) (env ((□? (z)) (□? (b)))))\""
  126
  89
  19
  18
  56
  17
  73
  1
  15797/19530
  35
  #f
  399/89
  ((0 1/2 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  25
  21
  let
  "\"'(eval (let (h) (-> (let (x ... y) ...) <-)) (env ()))\""
  127
  90
  19
  18
  57
  17
  74
  1
  16427/20160
  35
  #f
  403/90
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  25
  21
  ref-or-constructor
  "\"'(eval (λ (x) (-> x <-)) (env ((□? (x)) (□? (b)))))\""
  132
  91
  20
  21
  57
  17
  74
  1
  683/840
  35
  #f
  407/91
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  mj09
  2
  25
  21
  let
  "\"'(eval (λ (b) (-> (let (g) ...) <-)) (env ((□? (b)))))\""
  133
  92
  20
  21
  57
  17
  74
  1
  899/1120
  35
  #f
  411/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  25
  21
  let
  "\"'(eval (let (g) (-> (let (f) ...) <-)) (env ((□? (b)))))\""
  134
  93
  20
  21
  57
  17
  74
  1
  1331/1680
  35
  #f
  415/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  25
  21
  let
  "\"'(eval ((top) let (h) ...) (env ()))\""
  135
  94
  20
  21
  58
  17
  75
  1
  2767/3465
  35
  #f
  419/94
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  25
  21
  ref-or-constructor
  "\"'(eval (match (-> b <-) (#f) _) (env ((□? (k)) (□? (b)))))\""
  135
  94
  20
  21
  58
  17
  75
  1
  2767/3465
  35
  #f
  419/94
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  25
  21
  app
  "\"'(eval (let (... x (y (-> (app h (app #f)) <-)) () ...) ...) (env ()))\""
  135
  94
  20
  21
  58
  17
  75
  1
  2767/3465
  35
  #f
  419/94
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  25
  21
  ref-or-constructor
  "\"'(eval (app (-> k <-) 1) (env ((□? (k)) (□? (b)))))\""
  6
  2
  2
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  25
  21
  ref-or-constructor
  "\"'(eval (app (-> k <-) 2) (env ((□? (k)) (□? (b)))))\""
  7
  3
  2
  2
  0
  0
  0
  1
  0
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  25
  21
  let
  "\"'(eval (let (f) (-> (let (y) ...) <-)) (env ((□? (b)))))\""
  159
  108
  27
  24
  70
  23
  93
  1
  1661/2415
  47
  #f
  169/36
  ((23/2 12 0) (12 12 0) (12 12 0)))
'(shuffled-cache
  1
  mj09
  2
  25
  21
  ref-or-constructor
  "\"'(eval (λ (z) (-> z <-)) (env ((□? (z)) (□? (b)))))\""
  163
  109
  27
  27
  70
  23
  93
  1
  1654/2415
  47
  #f
  511/109
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  25
  21
  match
  "\"'(eval (λ (k) (-> (match b ...) <-)) (env ((□? (k)) (□? (b)))))\""
  174
  118
  27
  29
  70
  23
  93
  1
  7043/10626
  51
  #f
  551/118
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  mj09
  2
  25
  21
  let
  "\"'(eval (λ (b) (-> (let (g) ...) <-)) (env ((□? (b)))))\""
  179
  123
  27
  29
  74
  23
  97
  1
  7813/11550
  51
  #f
  571/123
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  25
  21
  ref-or-constructor
  "\"'(eval (λ (x) (-> x <-)) (env ((□? (x)) (□? (b)))))\""
  184
  124
  28
  32
  74
  23
  97
  1
  38897/57750
  51
  #f
  575/124
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  mj09
  2
  25
  21
  app
  "\"'(eval (app h (-> (app #f) <-)) (env ()))\""
  184
  124
  28
  32
  74
  23
  97
  1
  38897/57750
  51
  #t
  575/124
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  25
  21
  let
  "\"'(eval ((top) let (h) ...) (env ()))\""
  192
  131
  28
  33
  81
  23
  104
  1
  26956/35805
  53
  #f
  605/131
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  25
  21
  app
  "\"'(eval (match b ((#f) (-> (app k 2) <-)) _) (env ((□? (k)) (□? (b)))))\""
  197
  135
  28
  34
  81
  23
  104
  1
  53563/71610
  55
  #f
  626/135
  ((1 3/2 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  mj09
  2
  25
  21
  app
  "\"'(eval (let (... () (x (-> (app h (app #t)) <-)) y ...) ...) (env ()))\""
  200
  138
  28
  34
  84
  23
  107
  1
  29284/38115
  56
  #f
  213/46
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  25
  21
  let
  "\"'(eval (let (h) (-> (let (x ... y) ...) <-)) (env ()))\""
  200
  138
  28
  34
  84
  23
  107
  1
  29284/38115
  56
  #f
  213/46
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  25
  21
  app
  "\"'(eval\n  (let (... () (y (-> (app f (λ (x) ...)) <-)) () ...) ...)\n  (env ((□? (b)))))\""
  200
  138
  28
  34
  84
  23
  107
  1
  29284/38115
  56
  #f
  213/46
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  25
  21
  let
  "\"'(eval (let (g) (-> (let (f) ...) <-)) (env ((□? (b)))))\""
  201
  139
  28
  34
  84
  23
  107
  1
  3211/4235
  56
  #f
  643/139
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  25
  21
  app
  "\"'(eval (let (y) (-> (app g y) <-)) (env ((□? (b)))))\""
  201
  139
  28
  34
  84
  23
  107
  1
  3211/4235
  56
  #f
  643/139
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  25
  21
  ref-or-constructor
  "\"'(eval (let (x ... y) (-> y <-)) (env ()))\""
  201
  139
  28
  34
  84
  23
  107
  1
  3211/4235
  56
  #f
  643/139
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  25
  21
  app
  "\"'(eval (let (... x (y (-> (app h (app #f)) <-)) () ...) ...) (env ()))\""
  201
  139
  28
  34
  84
  23
  107
  1
  3211/4235
  56
  #f
  643/139
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  25
  21
  ref-or-constructor
  "\"'(eval (app g (-> y <-)) (env ((□? (b)))))\""
  201
  139
  28
  34
  84
  23
  107
  1
  3211/4235
  56
  #f
  643/139
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  25
  21
  app
  "\"'(eval (match b (#f) (_ (-> (app k 1) <-))) (env ((□? (k)) (□? (b)))))\""
  206
  143
  28
  35
  84
  23
  107
  1
  11859/15730
  58
  #f
  664/143
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  mj09
  2
  25
  21
  ref-or-constructor
  "\"'(eval (match (-> b <-) (#f) _) (env ((□? (k)) (□? (b)))))\""
  207
  144
  28
  35
  84
  23
  107
  1
  881/1170
  58
  #f
  335/72
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  25
  21
  app
  "\"'(eval (app h (-> (app #t) <-)) (env ()))\""
  207
  144
  28
  35
  84
  23
  107
  1
  881/1170
  58
  #t
  335/72
  ((0 0 0) (0 0 0) (0 0 0)))
