'(clean-cache
  mj09
  2
  25
  21
  let
  "\"'(eval ((top) let (h) ...) (env ()))\""
  41
  26
  10
  5
  26
  10
  36
  1
  1
  26
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  2
  25
  21
  let
  "\"'(eval (λ (b) (-> (let (g) ...) <-)) (env ((□? (b)))))\""
  123
  86
  20
  17
  48
  17
  65
  1
  10351/15750
  71
  #f
  51/43
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  mj09
  2
  25
  21
  ref-or-constructor
  "\"'(eval (λ (z) (-> z <-)) (env ((□? (z)) (□? (b)))))\""
  101
  66
  20
  15
  36
  17
  53
  1
  421/630
  55
  #f
  37/33
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  mj09
  2
  25
  21
  let
  "\"'(eval (let (g) (-> (let (f) ...) <-)) (env ((□? (b)))))\""
  120
  83
  20
  17
  46
  17
  63
  1
  9931/15120
  69
  #f
  98/83
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  mj09
  2
  25
  21
  match
  "\"'(eval (λ (k) (-> (match b ...) <-)) (env ((□? (k)) (□? (b)))))\""
  77
  53
  14
  10
  26
  13
  39
  1
  47/72
  45
  #f
  54/53
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  mj09
  2
  25
  21
  app
  "\"'(eval (match b (#f) (_ (-> (app k 1) <-))) (env ((□? (k)) (□? (b)))))\""
  19
  9
  5
  5
  0
  0
  0
  1
  0
  9
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  2
  25
  21
  ref-or-constructor
  "\"'(eval (app (-> k <-) 1) (env ((□? (k)) (□? (b)))))\""
  6
  2
  2
  2
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  2
  25
  21
  app
  "\"'(eval (match b ((#f) (-> (app k 2) <-)) _) (env ((□? (k)) (□? (b)))))\""
  19
  9
  5
  5
  0
  0
  0
  1
  0
  9
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  2
  25
  21
  ref-or-constructor
  "\"'(eval (app (-> k <-) 2) (env ((□? (k)) (□? (b)))))\""
  6
  2
  2
  2
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  2
  25
  21
  ref-or-constructor
  "\"'(eval (match (-> b <-) (#f) _) (env ((□? (k)) (□? (b)))))\""
  10
  5
  3
  2
  4
  3
  7
  1
  4/5
  4
  #f
  6/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  2
  25
  21
  let
  "\"'(eval (let (f) (-> (let (y) ...) <-)) (env ((□? (b)))))\""
  117
  80
  20
  17
  44
  17
  61
  1
  9511/14490
  67
  #f
  47/40
  ((3 3 0) (7/2 7/2 0) (3 3 0)))
'(clean-cache
  mj09
  2
  25
  21
  app
  "\"'(eval\n  (let (... () (y (-> (app f (λ (x) ...)) <-)) () ...) ...)\n  (env ((□? (b)))))\""
  85
  60
  14
  11
  32
  13
  45
  1
  7159/10710
  51
  #f
  11/10
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  mj09
  2
  25
  21
  ref-or-constructor
  "\"'(eval (λ (x) (-> x <-)) (env ((□? (x)) (□? (b)))))\""
  12
  5
  3
  4
  0
  0
  0
  1
  0
  4
  #f
  6/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  2
  25
  21
  app
  "\"'(eval (let (y) (-> (app g y) <-)) (env ((□? (b)))))\""
  114
  77
  20
  17
  42
  17
  59
  1
  9091/13860
  65
  #f
  90/77
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  mj09
  2
  25
  21
  ref-or-constructor
  "\"'(eval (app g (-> y <-)) (env ((□? (b)))))\""
  88
  63
  14
  11
  34
  13
  47
  1
  7579/11340
  53
  #f
  10/9
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  mj09
  2
  25
  21
  let
  "\"'(eval (let (h) (-> (let (x ... y) ...) <-)) (env ()))\""
  40
  25
  10
  5
  25
  10
  35
  1
  1
  25
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  2
  25
  21
  app
  "\"'(eval (let (... x (y (-> (app h (app #f)) <-)) () ...) ...) (env ()))\""
  38
  23
  10
  5
  23
  10
  33
  1
  1
  23
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  2
  25
  21
  app
  "\"'(eval (app h (-> (app #f) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  2
  25
  21
  app
  "\"'(eval (let (... () (x (-> (app h (app #t)) <-)) y ...) ...) (env ()))\""
  38
  23
  10
  5
  23
  10
  33
  1
  1
  23
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  2
  25
  21
  app
  "\"'(eval (app h (-> (app #t) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  2
  25
  21
  ref-or-constructor
  "\"'(eval (let (x ... y) (-> y <-)) (env ()))\""
  39
  24
  10
  5
  24
  10
  34
  1
  1
  24
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  25
  21
  let
  "\"'(eval (let (g) (-> (let (f) ...) <-)) (env ((□? (b)))))\""
  120
  83
  20
  17
  46
  17
  63
  1
  9931/15120
  69
  #f
  98/83
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  0
  mj09
  2
  25
  21
  app
  "\"'(eval (match b (#f) (_ (-> (app k 1) <-))) (env ((□? (k)) (□? (b)))))\""
  129
  89
  20
  20
  46
  17
  63
  1
  21151/33264
  75
  #t
  105/89
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  25
  21
  app
  "\"'(eval (let (... x (y (-> (app h (app #f)) <-)) () ...) ...) (env ()))\""
  135
  94
  20
  21
  51
  17
  68
  1
  6847/9702
  80
  #t
  55/47
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  25
  21
  ref-or-constructor
  "\"'(eval (let (x ... y) (-> y <-)) (env ()))\""
  136
  95
  20
  21
  52
  17
  69
  1
  14387/20097
  81
  #t
  111/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  25
  21
  ref-or-constructor
  "\"'(eval (match (-> b <-) (#f) _) (env ((□? (k)) (□? (b)))))\""
  137
  96
  20
  21
  52
  17
  69
  1
  283/396
  81
  #f
  113/96
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  25
  21
  let
  "\"'(eval ((top) let (h) ...) (env ()))\""
  139
  98
  20
  21
  54
  17
  71
  1
  8999/12276
  83
  #t
  115/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  25
  21
  app
  "\"'(eval (let (... () (x (-> (app h (app #t)) <-)) y ...) ...) (env ()))\""
  143
  102
  20
  21
  58
  17
  75
  1
  9857/13068
  87
  #t
  7/6
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  25
  21
  app
  "\"'(eval (app h (-> (app #f) <-)) (env ()))\""
  143
  102
  20
  21
  58
  17
  75
  1
  9857/13068
  87
  #t
  7/6
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  25
  21
  let
  "\"'(eval (let (h) (-> (let (x ... y) ...) <-)) (env ()))\""
  143
  102
  20
  21
  58
  17
  75
  1
  9857/13068
  87
  #t
  7/6
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  25
  21
  ref-or-constructor
  "\"'(eval (app (-> k <-) 2) (env ((□? (k)) (□? (b)))))\""
  144
  103
  20
  21
  58
  17
  75
  1
  16399/21780
  88
  #t
  121/103
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  25
  21
  ref-or-constructor
  "\"'(eval (λ (x) (-> x <-)) (env ((□? (x)) (□? (b)))))\""
  149
  104
  21
  24
  58
  17
  75
  1
  114353/152460
  88
  #f
  123/104
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  25
  21
  app
  "\"'(eval (app h (-> (app #t) <-)) (env ()))\""
  149
  104
  21
  24
  58
  17
  75
  1
  114353/152460
  88
  #t
  123/104
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  25
  21
  let
  "\"'(eval (let (f) (-> (let (y) ...) <-)) (env ((□? (b)))))\""
  149
  104
  21
  24
  58
  17
  75
  1
  114353/152460
  88
  #f
  123/104
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  25
  21
  ref-or-constructor
  "\"'(eval (λ (z) (-> z <-)) (env ((□? (z)) (□? (b)))))\""
  153
  105
  21
  27
  58
  17
  75
  1
  7603/10164
  88
  #f
  25/21
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  25
  21
  app
  "\"'(eval (let (y) (-> (app g y) <-)) (env ((□? (b)))))\""
  153
  105
  21
  27
  58
  17
  75
  1
  7603/10164
  88
  #f
  25/21
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  25
  21
  app
  "\"'(eval (match b ((#f) (-> (app k 2) <-)) _) (env ((□? (k)) (□? (b)))))\""
  160
  110
  21
  29
  58
  17
  75
  1
  48427/65340
  93
  #t
  13/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  25
  21
  match
  "\"'(eval (λ (k) (-> (match b ...) <-)) (env ((□? (k)) (□? (b)))))\""
  165
  115
  21
  29
  58
  17
  75
  1
  84178/114345
  97
  #f
  136/115
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  25
  21
  ref-or-constructor
  "\"'(eval (app (-> k <-) 1) (env ((□? (k)) (□? (b)))))\""
  165
  115
  21
  29
  58
  17
  75
  1
  84178/114345
  97
  #t
  136/115
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  25
  21
  app
  "\"'(eval\n  (let (... () (y (-> (app f (λ (x) ...)) <-)) () ...) ...)\n  (env ((□? (b)))))\""
  165
  115
  21
  29
  58
  17
  75
  1
  84178/114345
  97
  #f
  136/115
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  25
  21
  ref-or-constructor
  "\"'(eval (app g (-> y <-)) (env ((□? (b)))))\""
  165
  115
  21
  29
  58
  17
  75
  1
  84178/114345
  97
  #f
  136/115
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  25
  21
  let
  "\"'(eval (λ (b) (-> (let (g) ...) <-)) (env ((□? (b)))))\""
  166
  116
  21
  29
  58
  17
  75
  1
  83023/114345
  97
  #f
  69/58
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  25
  21
  app
  "\"'(eval (app h (-> (app #t) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  25
  21
  app
  "\"'(eval\n  (let (... () (y (-> (app f (λ (x) ...)) <-)) () ...) ...)\n  (env ((□? (b)))))\""
  85
  60
  14
  11
  32
  13
  45
  1
  7159/10710
  51
  #f
  11/10
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  mj09
  2
  25
  21
  app
  "\"'(eval (match b (#f) (_ (-> (app k 1) <-))) (env ((□? (k)) (□? (b)))))\""
  94
  66
  14
  14
  32
  13
  45
  1
  75263/117810
  57
  #t
  73/66
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  25
  21
  app
  "\"'(eval (match b ((#f) (-> (app k 2) <-)) _) (env ((□? (k)) (□? (b)))))\""
  101
  71
  14
  16
  32
  13
  45
  1
  24439/39270
  62
  #t
  78/71
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  25
  21
  ref-or-constructor
  "\"'(eval (app (-> k <-) 2) (env ((□? (k)) (□? (b)))))\""
  102
  72
  14
  16
  32
  13
  45
  1
  8123/13090
  63
  #t
  10/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  25
  21
  app
  "\"'(eval (app h (-> (app #f) <-)) (env ()))\""
  102
  72
  14
  16
  32
  13
  45
  1
  8123/13090
  63
  #t
  10/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  25
  21
  ref-or-constructor
  "\"'(eval (λ (x) (-> x <-)) (env ((□? (x)) (□? (b)))))\""
  107
  73
  15
  19
  32
  13
  45
  1
  36361/58905
  63
  #f
  82/73
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  25
  21
  ref-or-constructor
  "\"'(eval (λ (z) (-> z <-)) (env ((□? (z)) (□? (b)))))\""
  120
  78
  20
  22
  36
  17
  53
  1
  42136/65835
  67
  #f
  44/39
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  25
  21
  app
  "\"'(eval (let (y) (-> (app g y) <-)) (env ((□? (b)))))\""
  129
  85
  20
  24
  42
  17
  59
  1
  25688/38115
  73
  #f
  96/85
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  25
  21
  let
  "\"'(eval (λ (b) (-> (let (g) ...) <-)) (env ((□? (b)))))\""
  136
  92
  20
  24
  48
  17
  65
  1
  60616/86625
  79
  #f
  26/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  25
  21
  let
  "\"'(eval (let (f) (-> (let (y) ...) <-)) (env ((□? (b)))))\""
  137
  93
  20
  24
  48
  17
  65
  1
  59461/86625
  79
  #f
  106/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  25
  21
  let
  "\"'(eval (let (g) (-> (let (f) ...) <-)) (env ((□? (b)))))\""
  138
  94
  20
  24
  48
  17
  65
  1
  58306/86625
  79
  #f
  54/47
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  25
  21
  match
  "\"'(eval (λ (k) (-> (match b ...) <-)) (env ((□? (k)) (□? (b)))))\""
  143
  99
  20
  24
  48
  17
  65
  1
  1282/1925
  83
  #f
  38/33
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  25
  21
  ref-or-constructor
  "\"'(eval (app (-> k <-) 1) (env ((□? (k)) (□? (b)))))\""
  143
  99
  20
  24
  48
  17
  65
  1
  1282/1925
  83
  #t
  38/33
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  25
  21
  ref-or-constructor
  "\"'(eval (match (-> b <-) (#f) _) (env ((□? (k)) (□? (b)))))\""
  144
  100
  20
  24
  48
  17
  65
  1
  57613/86625
  83
  #f
  29/25
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  25
  21
  let
  "\"'(eval (let (h) (-> (let (x ... y) ...) <-)) (env ()))\""
  151
  106
  20
  25
  54
  17
  71
  1
  153341/207900
  89
  #t
  61/53
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  25
  21
  app
  "\"'(eval (let (... x (y (-> (app h (app #f)) <-)) () ...) ...) (env ()))\""
  151
  106
  20
  25
  54
  17
  71
  1
  153341/207900
  89
  #t
  61/53
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  25
  21
  app
  "\"'(eval (let (... () (x (-> (app h (app #t)) <-)) y ...) ...) (env ()))\""
  154
  109
  20
  25
  57
  17
  74
  1
  42089/55440
  92
  #t
  125/109
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  25
  21
  let
  "\"'(eval ((top) let (h) ...) (env ()))\""
  155
  110
  20
  25
  58
  17
  75
  1
  87643/114345
  93
  #t
  63/55
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  25
  21
  ref-or-constructor
  "\"'(eval (let (x ... y) (-> y <-)) (env ()))\""
  155
  110
  20
  25
  58
  17
  75
  1
  87643/114345
  93
  #t
  63/55
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  25
  21
  ref-or-constructor
  "\"'(eval (app g (-> y <-)) (env ((□? (b)))))\""
  156
  111
  20
  25
  58
  17
  75
  1
  86488/114345
  93
  #f
  128/111
  ((0 0 0) (0 0 0) (0 0 0)))
