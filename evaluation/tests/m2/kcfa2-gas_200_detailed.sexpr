'(clean-cache
  kcfa2
  2
  200
  37
  app
  "'(eval ((top) app (λ (f1) ...) (λ (x1) ...)) (env ()))"
  #f
  38
  22
  8
  8
  22
  8
  30
  1
  1
  22
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa2
  2
  200
  37
  lambda
  "'(eval (app (λ (f1) ...) (-> (λ (x1) ...) <-)) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa2
  2
  200
  37
  app
  "'(eval (λ (x1) (-> (app (λ (f2) ...) (λ (x2) ...)) <-)) (env ((□? (x1)))))"
  #f
  #f)
'(clean-cache
  kcfa2
  2
  200
  37
  lambda
  "'(eval (app (λ (f2) ...) (-> (λ (x2) ...) <-)) (env ((□? (x1)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa2
  2
  200
  37
  app
  "'(eval\n  (λ (x2) (-> (app (λ (z) ...) (λ (y1 y2) ...)) <-))\n  (env ((□? (x2)) (□? (x1)))))"
  #f
  53
  24
  12
  17
  5
  3
  8
  1
  5/12
  20
  #f
  17/12
  (1 1 0))
'(clean-cache
  kcfa2
  2
  200
  37
  lambda
  "'(eval (app (λ (z) ...) (-> (λ (y1 y2) ...) <-)) (env ((□? (x2)) (□? (x1)))))"
  #t
  3
  1
  0
  2
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa2
  2
  200
  37
  ref-or-constructor
  "'(eval (λ (y1 y2) (-> y1 <-)) (env ((□? (y1 y2)) (□? (x2)) (□? (x1)))))"
  #f
  35
  12
  9
  14
  5
  3
  8
  1
  5/8
  10
  #f
  4/3
  (0 0 0))
'(clean-cache
  kcfa2
  2
  200
  37
  lambda
  "'(eval (app (-> (λ (z) ...) <-) (λ (y1 y2) ...)) (env ((□? (x2)) (□? (x1)))))"
  #t
  3
  1
  0
  2
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa2
  2
  200
  37
  app
  "'(eval (λ (z) (-> (app z x1 x2) <-)) (env ((□? (z)) (□? (x2)) (□? (x1)))))"
  #f
  54
  25
  12
  17
  5
  3
  8
  1
  5/11
  21
  #f
  37/25
  (2 2 0))
'(clean-cache
  kcfa2
  2
  200
  37
  ref-or-constructor
  "'(eval (app z x1 (-> x2 <-)) (env ((□? (z)) (□? (x2)) (□? (x1)))))"
  #f
  17
  8
  4
  5
  0
  0
  0
  1
  0
  7
  #f
  9/8
  (0 0 0))
'(clean-cache
  kcfa2
  2
  200
  37
  ref-or-constructor
  "'(eval (app z (-> x1 <-) x2) (env ((□? (z)) (□? (x2)) (□? (x1)))))"
  #f
  13
  6
  3
  4
  5
  3
  8
  1
  5/6
  5
  #f
  7/6
  (0 0 0))
'(clean-cache
  kcfa2
  2
  200
  37
  ref-or-constructor
  "'(eval (app (-> z <-) x1 x2) (env ((□? (z)) (□? (x2)) (□? (x1)))))"
  #f
  6
  2
  1
  3
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa2
  2
  200
  37
  lambda
  "'(eval (app (-> (λ (f2) ...) <-) (λ (x2) ...)) (env ((□? (x1)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa2
  2
  200
  37
  let
  "'(eval (λ (f2) (-> (let (b) ...) <-)) (env ((□? (f2)) (□? (x1)))))"
  #f
  #f)
'(clean-cache
  kcfa2
  2
  200
  37
  app
  "'(eval\n  (let (... () (b (-> (app f2 (app #t)) <-)) () ...) ...)\n  (env ((□? (f2)) (□? (x1)))))"
  #f
  #f)
'(clean-cache
  kcfa2
  2
  200
  37
  app
  "'(eval (app f2 (-> (app #t) <-)) (env ((□? (f2)) (□? (x1)))))"
  #f
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa2
  2
  200
  37
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (f2)) (□? (x1)))))"
  #t
  3
  1
  0
  2
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa2
  2
  200
  37
  ref-or-constructor
  "'(eval (app (-> f2 <-) (app #t)) (env ((□? (f2)) (□? (x1)))))"
  #f
  5
  2
  1
  2
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa2
  2
  200
  37
  let
  "'(eval (let (b) (-> (let (c) ...) <-)) (env ((□? (f2)) (□? (x1)))))"
  #f
  #f)
'(clean-cache
  kcfa2
  2
  200
  37
  app
  "'(eval\n  (let (... () (c (-> (app f2 (app #f)) <-)) () ...) ...)\n  (env ((□? (f2)) (□? (x1)))))"
  #f
  #f)
'(clean-cache
  kcfa2
  2
  200
  37
  app
  "'(eval (app f2 (-> (app #f) <-)) (env ((□? (f2)) (□? (x1)))))"
  #f
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa2
  2
  200
  37
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (f2)) (□? (x1)))))"
  #t
  3
  1
  0
  2
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa2
  2
  200
  37
  ref-or-constructor
  "'(eval (app (-> f2 <-) (app #f)) (env ((□? (f2)) (□? (x1)))))"
  #f
  5
  2
  1
  2
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa2
  2
  200
  37
  app
  "'(eval (let (c) (-> (app f2 (app #t)) <-)) (env ((□? (f2)) (□? (x1)))))"
  #f
  #f)
'(clean-cache
  kcfa2
  2
  200
  37
  app
  "'(eval (app f2 (-> (app #t) <-)) (env ((□? (f2)) (□? (x1)))))"
  #f
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa2
  2
  200
  37
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (f2)) (□? (x1)))))"
  #t
  3
  1
  0
  2
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa2
  2
  200
  37
  ref-or-constructor
  "'(eval (app (-> f2 <-) (app #t)) (env ((□? (f2)) (□? (x1)))))"
  #f
  5
  2
  1
  2
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa2
  2
  200
  37
  lambda
  "'(eval (app (-> (λ (f1) ...) <-) (λ (x1) ...)) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa2
  2
  200
  37
  let
  "'(eval (λ (f1) (-> (let (a) ...) <-)) (env ((□? (f1)))))"
  #f
  62
  37
  12
  13
  20
  8
  28
  1
  4/7
  37
  #t
  43/37
  (1 1 0))
'(clean-cache
  kcfa2
  2
  200
  37
  app
  "'(eval\n  (let (... () (a (-> (app f1 (app #t)) <-)) () ...) ...)\n  (env ((□? (f1)))))"
  #f
  60
  35
  12
  13
  19
  8
  27
  1
  23/40
  35
  #t
  41/35
  (1 1 0))
'(clean-cache
  kcfa2
  2
  200
  37
  app
  "'(eval (app f1 (-> (app #t) <-)) (env ((□? (f1)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa2
  2
  200
  37
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (f1)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa2
  2
  200
  37
  ref-or-constructor
  "'(eval (app (-> f1 <-) (app #t)) (env ((□? (f1)))))"
  #f
  4
  2
  1
  1
  1
  1
  2
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa2
  2
  200
  37
  app
  "'(eval (let (a) (-> (app f1 (app #f)) <-)) (env ((□? (f1)))))"
  #f
  60
  35
  12
  13
  19
  8
  27
  1
  23/40
  35
  #t
  41/35
  (1 1 0))
'(clean-cache
  kcfa2
  2
  200
  37
  app
  "'(eval (app f1 (-> (app #f) <-)) (env ((□? (f1)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa2
  2
  200
  37
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (f1)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa2
  2
  200
  37
  ref-or-constructor
  "'(eval (app (-> f1 <-) (app #f)) (env ((□? (f1)))))"
  #f
  4
  2
  1
  1
  1
  1
  2
  1
  1/2
  2
  #t
  1
  (0 0 0))
