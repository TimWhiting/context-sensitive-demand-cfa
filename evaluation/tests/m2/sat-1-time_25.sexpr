'(clean-cache
  sat-1
  2
  34
  letrec*
  "\"'(eval ((top) letrec* (phi ... sat-solve-4) ...) (env ()))\""
  #f)
'(clean-cache
  sat-1
  2
  34
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  #f)
'(clean-cache
  sat-1
  2
  34
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  #f)
'(clean-cache
  sat-1
  2
  34
  app
  "\"'(eval\n  (λ (n2) (-> (app try (λ (n3) ...)) <-))\n  (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  #f)
'(clean-cache
  sat-1
  2
  34
  app
  "\"'(eval\n  (λ (n3) (-> (app try (λ (n4) ...)) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  #f)
'(clean-cache
  sat-1
  2
  34
  app
  "\"'(eval\n  (λ (n4) (-> (app p n1 n2 n3 n4) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  #f)
'(clean-cache
  sat-1
  2
  25
  34
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 (-> n4 <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  17
  7
  3
  7
  1
  0
  1
  1
  1/7
  6
  #f
  8/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-1
  2
  25
  34
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 (-> n3 <-) n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  17
  7
  3
  7
  1
  0
  1
  1
  1/7
  6
  #f
  8/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  2
  25
  34
  ref-or-constructor
  "\"'(eval\n  (app p n1 (-> n2 <-) n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  17
  7
  3
  7
  1
  0
  1
  1
  1/7
  6
  #f
  8/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  2
  25
  34
  ref-or-constructor
  "\"'(eval\n  (app p (-> n1 <-) n2 n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  17
  7
  3
  7
  1
  0
  1
  1
  1/7
  6
  #f
  8/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  2
  25
  34
  ref-or-constructor
  "\"'(eval\n  (app (-> p <-) n1 n2 n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  10
  3
  2
  5
  2
  2
  4
  1
  2/3
  3
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  2
  34
  app
  "\"'(eval\n  (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  #f)
'(clean-cache
  sat-1
  2
  34
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  #f)
'(clean-cache
  sat-1
  2
  25
  34
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  2
  25
  34
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  15
  5
  5
  5
  0
  1
  1
  1
  0
  4
  #f
  8/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  2
  34
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  #f)
'(clean-cache
  sat-1
  2
  25
  34
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  2
  25
  34
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  15
  5
  5
  5
  0
  1
  1
  1
  0
  4
  #f
  8/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  2
  34
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4)\n    (->\n     (app\n      and\n      (app or x1 (app not x2) (app not x3))\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  #f)
'(clean-cache
  sat-1
  2
  25
  34
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  65
  40
  11
  14
  11
  2
  13
  1
  13/34
  25
  #f
  11/8
  ((4 4 0) (4 4 0) (4 4 0)))
'(clean-cache
  sat-1
  2
  25
  34
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  30
  12
  6
  12
  3
  2
  5
  1
  3/10
  10
  #f
  7/6
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-1
  2
  25
  34
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env ((□? (x1 x2 x3 x4)))))\""
  27
  12
  6
  9
  3
  2
  5
  1
  3/10
  10
  #f
  7/6
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-1
  2
  25
  34
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))\""
  79
  48
  15
  16
  13
  6
  19
  1
  1/3
  34
  #f
  31/24
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(clean-cache
  sat-1
  2
  25
  34
  app
  "\"'(eval (app or (app not x2) (-> (app not x3) <-)) (env ((□? (x1 x2 x3 x4)))))\""
  35
  18
  6
  11
  5
  2
  7
  1
  5/14
  14
  #f
  11/9
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-1
  2
  25
  34
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  28
  12
  6
  10
  3
  2
  5
  1
  3/10
  10
  #f
  7/6
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-1
  2
  25
  34
  app
  "\"'(eval (app or (-> (app not x2) <-) (app not x3)) (env ((□? (x1 x2 x3 x4)))))\""
  37
  18
  6
  13
  5
  2
  7
  1
  5/14
  14
  #f
  11/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-1
  2
  25
  34
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  30
  12
  6
  12
  3
  2
  5
  1
  3/10
  10
  #f
  7/6
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-1
  2
  25
  34
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))\""
  136
  80
  30
  26
  32
  19
  51
  1
  157/378
  56
  #f
  13/10
  ((9 9 0) (9 9 0) (9 9 0)))
'(clean-cache
  sat-1
  2
  25
  34
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  35
  18
  6
  11
  5
  2
  7
  1
  5/14
  14
  #f
  11/9
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-1
  2
  25
  34
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  28
  12
  6
  10
  3
  2
  5
  1
  3/10
  10
  #f
  7/6
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-1
  2
  25
  34
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))\""
  37
  18
  6
  13
  5
  2
  7
  1
  5/14
  14
  #f
  11/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-1
  2
  25
  34
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  30
  12
  6
  12
  3
  2
  5
  1
  3/10
  10
  #f
  7/6
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-1
  2
  25
  34
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))\""
  31
  12
  6
  13
  8
  5
  13
  1
  4/5
  10
  #f
  7/6
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-1
  2
  34
  app
  "\"'(eval (letrec* (phi ... sat-solve-4) (-> (app sat-solve-4 phi) <-)) (env ()))\""
  #f)
'(shuffled-cache
  0
  sat-1
  2
  34
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  #f)
'(shuffled-cache
  0
  sat-1
  2
  34
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  #f)
'(shuffled-cache
  0
  sat-1
  2
  25
  34
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env ((□? (x1 x2 x3 x4)))))\""
  27
  12
  6
  9
  3
  2
  5
  1
  3/10
  10
  #f
  7/6
  ((3/2 3/2 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  sat-1
  2
  25
  34
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  70
  43
  15
  12
  17
  6
  23
  1
  25/51
  32
  #f
  54/43
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  sat-1
  2
  34
  app
  "\"'(eval\n  (λ (n3) (-> (app try (λ (n4) ...)) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  #f)
'(shuffled-cache
  0
  sat-1
  2
  25
  34
  app
  "\"'(eval (app or (-> (app not x2) <-) (app not x3)) (env ((□? (x1 x2 x3 x4)))))\""
  37
  18
  6
  13
  5
  2
  7
  1
  5/14
  14
  #f
  11/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-1
  2
  25
  34
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  72
  41
  15
  16
  13
  6
  19
  1
  7/17
  31
  #f
  51/41
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  sat-1
  2
  34
  app
  "\"'(eval\n  (λ (n2) (-> (app try (λ (n3) ...)) <-))\n  (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  #f)
'(shuffled-cache
  0
  sat-1
  2
  25
  34
  ref-or-constructor
  "\"'(eval\n  (app (-> p <-) n1 n2 n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  10
  3
  2
  5
  2
  2
  4
  1
  2/3
  3
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  2
  34
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4)\n    (->\n     (app\n      and\n      (app or x1 (app not x2) (app not x3))\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  #f)
'(shuffled-cache
  0
  sat-1
  2
  25
  34
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  28
  12
  6
  10
  3
  2
  5
  1
  3/10
  10
  #f
  7/6
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-1
  2
  34
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  #f)
'(shuffled-cache
  0
  sat-1
  2
  25
  34
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  2
  25
  34
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  67
  42
  11
  14
  11
  2
  13
  1
  13/34
  27
  #f
  19/14
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  0
  sat-1
  2
  25
  34
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  68
  43
  11
  14
  11
  2
  13
  1
  13/36
  27
  #f
  59/43
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  2
  25
  34
  app
  "\"'(eval\n  (λ (n4) (-> (app p n1 n2 n3 n4) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  282
  181
  57
  44
  94
  25
  119
  1
  94783/130680
  117
  #f
  245/181
  ((49/2 49/2 0) (49/2 49/2 0) (49/2 49/2 0)))
'(shuffled-cache
  0
  sat-1
  2
  25
  34
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))\""
  286
  185
  57
  44
  94
  25
  119
  1
  90823/130680
  118
  #f
  252/185
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  2
  25
  34
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))\""
  287
  186
  57
  44
  94
  25
  119
  1
  89833/130680
  118
  #f
  127/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  2
  25
  34
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  438
  312
  62
  64
  134
  26
  160
  1
  185876/272745
  189
  #f
  87/52
  ((41/2 41/2 0) (20 20 0) (41/2 41/2 0)))
'(shuffled-cache
  0
  sat-1
  2
  25
  34
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  439
  313
  62
  64
  134
  26
  160
  1
  3233/4785
  189
  #f
  524/313
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  2
  25
  34
  app
  "\"'(eval (letrec* (phi ... sat-solve-4) (-> (app sat-solve-4 phi) <-)) (env ()))\""
  453
  326
  62
  65
  147
  26
  173
  1
  1552403/2258520
  193
  #f
  549/326
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-1
  2
  25
  34
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  453
  326
  62
  65
  147
  26
  173
  1
  1552403/2258520
  193
  #f
  549/326
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  2
  25
  34
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  454
  327
  62
  65
  147
  26
  173
  1
  1549967/2258520
  193
  #f
  568/327
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-1
  2
  25
  34
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  455
  328
  62
  65
  147
  26
  173
  1
  772591/1129260
  193
  #f
  587/328
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-1
  2
  25
  34
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  456
  329
  62
  65
  147
  26
  173
  1
  771373/1129260
  194
  #t
  84/47
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  2
  25
  34
  app
  "\"'(eval (app or (app not x2) (-> (app not x3) <-)) (env ((□? (x1 x2 x3 x4)))))\""
  459
  332
  62
  65
  147
  26
  173
  1
  755423/1129260
  195
  #f
  593/332
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  2
  25
  34
  ref-or-constructor
  "\"'(eval\n  (app p (-> n1 <-) n2 n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  505
  365
  63
  77
  147
  26
  173
  1
  25853/38940
  215
  #f
  693/365
  ((27/2 27/2 0) (27/2 27/2 0) (27/2 27/2 0)))
'(shuffled-cache
  0
  sat-1
  2
  25
  34
  letrec*
  "\"'(eval ((top) letrec* (phi ... sat-solve-4) ...) (env ()))\""
  506
  366
  63
  77
  148
  26
  174
  1
  26513/39600
  215
  #f
  695/366
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  2
  25
  34
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))\""
  509
  369
  63
  77
  148
  26
  174
  1
  25963/39600
  216
  #f
  700/369
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  2
  25
  34
  app
  "\"'(eval\n  (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  521
  381
  63
  77
  148
  26
  174
  1
  50423/79200
  221
  #f
  245/127
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  0
  sat-1
  2
  25
  34
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 (-> n4 <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  528
  385
  66
  77
  148
  26
  174
  1
  151189/237600
  224
  #f
  148/77
  ((4 4 0) (4 4 0) (4 4 0)))
'(shuffled-cache
  0
  sat-1
  2
  34
  ref-or-constructor
  "\"'(eval\n  (app p n1 (-> n2 <-) n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  #f)
'(shuffled-cache
  0
  sat-1
  2
  25
  34
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))\""
  136
  80
  30
  26
  32
  19
  51
  1
  157/378
  56
  #f
  13/10
  ((17/2 17/2 0) (17/2 17/2 0) (9 9 0)))
'(shuffled-cache
  0
  sat-1
  2
  25
  34
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 (-> n3 <-) n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  143
  82
  31
  30
  32
  19
  51
  1
  521/1260
  57
  #f
  107/82
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-1
  2
  25
  34
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 (-> n4 <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  17
  7
  3
  7
  1
  0
  1
  1
  1/7
  6
  #f
  8/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-1
  2
  34
  app
  "\"'(eval\n  (λ (n4) (-> (app p n1 n2 n3 n4) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  #f)
'(shuffled-cache
  1
  sat-1
  2
  25
  34
  ref-or-constructor
  "\"'(eval\n  (app p (-> n1 <-) n2 n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  17
  7
  3
  7
  1
  0
  1
  1
  1/7
  6
  #f
  8/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  2
  25
  34
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  62
  27
  14
  21
  8
  5
  13
  1
  29/72
  22
  #f
  32/27
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  sat-1
  2
  25
  34
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  129
  66
  33
  30
  30
  19
  49
  1
  64/135
  53
  #f
  79/66
  ((11/2 11/2 0) (11/2 11/2 0) (11/2 11/2 0)))
'(shuffled-cache
  1
  sat-1
  2
  25
  34
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  130
  67
  33
  30
  30
  19
  49
  1
  4/9
  53
  #f
  81/67
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  2
  34
  app
  "\"'(eval\n  (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  #f)
'(shuffled-cache
  1
  sat-1
  2
  34
  app
  "\"'(eval\n  (λ (n2) (-> (app try (λ (n3) ...)) <-))\n  (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  #f)
'(shuffled-cache
  1
  sat-1
  2
  25
  34
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  15
  5
  5
  5
  0
  1
  1
  1
  0
  4
  #f
  8/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  2
  25
  34
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 (-> n3 <-) n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  30
  14
  8
  8
  1
  1
  2
  1
  1/12
  12
  #f
  11/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-1
  2
  25
  34
  app
  "\"'(eval (app or (app not x2) (-> (app not x3) <-)) (env ((□? (x1 x2 x3 x4)))))\""
  60
  31
  12
  17
  6
  3
  9
  1
  11/38
  25
  #f
  57/31
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  sat-1
  2
  25
  34
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  61
  32
  12
  17
  6
  3
  9
  1
  11/40
  25
  #f
  69/32
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  2
  25
  34
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  62
  33
  12
  17
  6
  3
  9
  1
  11/42
  25
  #f
  71/33
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  2
  25
  34
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  70
  40
  12
  18
  9
  3
  12
  1
  83/294
  32
  #t
  39/20
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  2
  34
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4)\n    (->\n     (app\n      and\n      (app or x1 (app not x2) (app not x3))\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  #f)
'(shuffled-cache
  1
  sat-1
  2
  25
  34
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  35
  18
  6
  11
  5
  2
  7
  1
  5/14
  14
  #f
  11/9
  ((1/2 1/2 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  sat-1
  2
  25
  34
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  72
  41
  15
  16
  13
  6
  19
  1
  7/17
  31
  #f
  51/41
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  sat-1
  2
  25
  34
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  73
  42
  15
  16
  13
  6
  19
  1
  69/170
  32
  #t
  26/21
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  2
  34
  app
  "\"'(eval (letrec* (phi ... sat-solve-4) (-> (app sat-solve-4 phi) <-)) (env ()))\""
  #f)
'(shuffled-cache
  1
  sat-1
  2
  34
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  #f)
'(shuffled-cache
  1
  sat-1
  2
  25
  34
  ref-or-constructor
  "\"'(eval\n  (app p n1 (-> n2 <-) n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  17
  7
  3
  7
  1
  0
  1
  1
  1/7
  6
  #f
  8/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  2
  34
  app
  "\"'(eval\n  (λ (n3) (-> (app try (λ (n4) ...)) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  #f)
'(shuffled-cache
  1
  sat-1
  2
  25
  34
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))\""
  31
  12
  6
  13
  8
  5
  13
  1
  4/5
  10
  #f
  7/6
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-1
  2
  25
  34
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  124
  70
  26
  28
  26
  11
  37
  1
  83/150
  47
  #f
  93/70
  ((9 9 0) (9 9 0) (9 9 0)))
'(shuffled-cache
  1
  sat-1
  2
  25
  34
  ref-or-constructor
  "\"'(eval\n  (app (-> p <-) n1 n2 n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  133
  73
  28
  32
  28
  13
  41
  1
  196/345
  50
  #t
  96/73
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  2
  25
  34
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env ((□? (x1 x2 x3 x4)))))\""
  134
  74
  28
  32
  28
  13
  41
  1
  129/230
  50
  #f
  49/37
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  2
  25
  34
  app
  "\"'(eval (app or (-> (app not x2) <-) (app not x3)) (env ((□? (x1 x2 x3 x4)))))\""
  141
  81
  28
  32
  32
  13
  45
  1
  427/780
  53
  #f
  109/81
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  2
  25
  34
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))\""
  264
  164
  57
  43
  76
  25
  101
  1
  2953/4860
  109
  #f
  219/164
  ((16 16 0) (33/2 33/2 0) (33/2 33/2 0)))
'(shuffled-cache
  1
  sat-1
  2
  25
  34
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  434
  308
  62
  64
  134
  26
  160
  1
  74275/109098
  186
  #f
  47/28
  ((43/2 43/2 0) (43/2 43/2 0) (43/2 43/2 0)))
'(shuffled-cache
  1
  sat-1
  2
  25
  34
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))\""
  438
  312
  62
  64
  134
  26
  160
  1
  12007/18183
  187
  #f
  131/78
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  2
  25
  34
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  445
  319
  62
  64
  134
  26
  160
  1
  484835/763686
  190
  #f
  538/319
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-1
  2
  25
  34
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))\""
  448
  322
  62
  64
  134
  26
  160
  1
  1385/2233
  191
  #f
  543/322
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  2
  25
  34
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  460
  334
  62
  64
  145
  26
  171
  1
  51320/83259
  195
  #f
  283/167
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-1
  2
  25
  34
  letrec*
  "\"'(eval ((top) letrec* (phi ... sat-solve-4) ...) (env ()))\""
  464
  337
  62
  65
  148
  26
  174
  1
  43927/68904
  195
  #f
  572/337
  ((0 0 0) (0 0 0) (0 0 0)))
