'(expression: (let ((x (λ (y) y))) (let ((_ (app x 1))) (app x 2))))

(list 'query: '(top) (menv '()))

(list
 (list 'eval '(app x (-> 2 <-)) (menv '()))
 (list 'eval '(app (-> x <-) 2) (menv '()))
 (list 'eval '(let (_) (-> (app x 2) <-)) (menv '()))
 (list 'eval '(let (x) (-> (let ((_ (app x 1))) (app x 2)) <-)) (menv '()))
 (list 'eval '(let ((-> x = (λ (y) y) <-)) bod) (menv '()))
 (list 'eval '(top) (menv '()))
 (list 'eval '(λ (y) (-> y <-)) (menv '(((let (_) (-> (app x 2) <-))))))
 (list 'expr '(app (-> x <-) 2) (menv '()))
 (list 'expr '(app (-> x <-) 1) (menv '()))
 (list 'expr '(let ((-> x = (λ (y) y) <-)) bod) (menv '())))
10


(list 'query: '(let (x) (-> (let ((_ (app x 1))) (app x 2)) <-)) (menv '()))

(list
 (list 'eval '(app x (-> 2 <-)) (menv '()))
 (list 'eval '(app (-> x <-) 2) (menv '()))
 (list 'eval '(let (_) (-> (app x 2) <-)) (menv '()))
 (list 'eval '(let (x) (-> (let ((_ (app x 1))) (app x 2)) <-)) (menv '()))
 (list 'eval '(let ((-> x = (λ (y) y) <-)) bod) (menv '()))
 (list 'eval '(λ (y) (-> y <-)) (menv '(((let (_) (-> (app x 2) <-))))))
 (list 'expr '(app (-> x <-) 2) (menv '()))
 (list 'expr '(app (-> x <-) 1) (menv '()))
 (list 'expr '(let ((-> x = (λ (y) y) <-)) bod) (menv '())))
9


(list 'query: '(let ((-> _ = (app x 1) <-)) bod) (menv '()))

(list
 (list 'eval '(app x (-> 1 <-)) (menv '()))
 (list 'eval '(app (-> x <-) 1) (menv '()))
 (list 'eval '(let ((-> _ = (app x 1) <-)) bod) (menv '()))
 (list 'eval '(let ((-> x = (λ (y) y) <-)) bod) (menv '()))
 (list 'eval '(λ (y) (-> y <-)) (menv '(((let ((-> _ = (app x 1) <-)) bod)))))
 (list 'expr '(app (-> x <-) 2) (menv '()))
 (list 'expr '(app (-> x <-) 1) (menv '()))
 (list 'expr '(let ((-> x = (λ (y) y) <-)) bod) (menv '())))
8


(list 'query: '(let (_) (-> (app x 2) <-)) (menv '()))

(list
 (list 'eval '(app x (-> 2 <-)) (menv '()))
 (list 'eval '(app (-> x <-) 2) (menv '()))
 (list 'eval '(let (_) (-> (app x 2) <-)) (menv '()))
 (list 'eval '(let ((-> x = (λ (y) y) <-)) bod) (menv '()))
 (list 'eval '(λ (y) (-> y <-)) (menv '(((let (_) (-> (app x 2) <-))))))
 (list 'expr '(app (-> x <-) 2) (menv '()))
 (list 'expr '(app (-> x <-) 1) (menv '()))
 (list 'expr '(let ((-> x = (λ (y) y) <-)) bod) (menv '())))
8

