'(clean-cache
  ack
  2
  15
  20
  letrec*
  "\"'(eval ((top) letrec* (ack) ...) (env ()))\""
  417
  409
  5
  3
  394
  2
  396
  1
  1637/1680
  112
  #f
  1778/409
  ((12 12 0) (12 12 0) (12 12 0)))
'(clean-cache
  ack
  2
  15
  20
  match
  "\"'(eval (λ (m n) (-> (match (app = m 0) ...) <-)) (env ((□? (m n)))))\""
  438
  431
  5
  2
  424
  2
  426
  1
  14034/14245
  123
  #f
  1879/431
  ((25/2 25/2 0) (25/2 25/2 0) (13 13 0)))
'(clean-cache
  ack
  2
  15
  20
  app
  "\"'(eval (match (app = m 0) (#f) (_ (-> (app + n 1) <-))) (env ((□? (m n)))))\""
  387
  380
  5
  2
  376
  2
  378
  1
  4621/4662
  104
  #f
  165/38
  ((21/2 21/2 0) (10 10 0) (10 10 0)))
'(clean-cache
  ack
  2
  15
  20
  ref-or-constructor
  "\"'(eval (app + (-> n <-) 1) (env ((□? (m n)))))\""
  369
  362
  5
  2
  361
  2
  363
  1
  332/333
  98
  #f
  786/181
  ((10 10 0) (10 10 0) (19/2 19/2 0)))
'(clean-cache
  ack
  2
  15
  20
  match
  "\"'(eval\n  (match (app = m 0) ((#f) (-> (match (app = n 0) ...) <-)) _)\n  (env ((□? (m n)))))\""
  430
  423
  5
  2
  416
  2
  418
  1
  26525/26936
  124
  #f
  616/141
  ((25/2 25/2 0) (25/2 25/2 0) (25/2 25/2 0)))
'(clean-cache
  ack
  2
  20
  app
  "\"'(eval\n  (match (app = n 0) (#f) (_ (-> (app ack (app - m 1) 1) <-)))\n  (env ((□? (m n)))))\""
  #f)
'(clean-cache
  ack
  2
  15
  20
  app
  "\"'(eval (app ack (-> (app - m 1) <-) 1) (env ((□? (m n)))))\""
  128
  122
  5
  1
  118
  2
  120
  1
  34/35
  27
  #f
  515/122
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  ack
  2
  15
  20
  ref-or-constructor
  "\"'(eval (app - (-> m <-) 1) (env ((□? (m n)))))\""
  125
  119
  5
  1
  118
  2
  120
  1
  139/140
  26
  #f
  502/119
  ((4 4 0) (4 4 0) (4 4 0)))
'(clean-cache
  ack
  2
  20
  app
  "\"'(eval\n  (match\n   (app = n 0)\n   ((#f) (-> (app ack (app - m 1) (app ack m (app - n 1))) <-))\n   _)\n  (env ((□? (m n)))))\""
  #f)
'(clean-cache
  ack
  2
  20
  app
  "\"'(eval\n  (app ack (app - m 1) (-> (app ack m (app - n 1)) <-))\n  (env ((□? (m n)))))\""
  #f)
'(clean-cache
  ack
  2
  15
  20
  app
  "\"'(eval (app ack m (-> (app - n 1) <-)) (env ((□? (m n)))))\""
  372
  365
  5
  2
  361
  2
  363
  1
  257/259
  99
  #f
  317/73
  ((21/2 21/2 0) (10 10 0) (10 10 0)))
'(clean-cache
  ack
  2
  15
  20
  ref-or-constructor
  "\"'(eval (app - (-> n <-) 1) (env ((□? (m n)))))\""
  369
  362
  5
  2
  361
  2
  363
  1
  517/518
  98
  #f
  786/181
  ((19/2 19/2 0) (19/2 19/2 0) (19/2 19/2 0)))
'(clean-cache
  ack
  2
  15
  20
  ref-or-constructor
  "\"'(eval (app ack (-> m <-) (app - n 1)) (env ((□? (m n)))))\""
  125
  119
  5
  1
  118
  2
  120
  1
  139/140
  26
  #f
  502/119
  ((4 4 0) (4 4 0) (4 4 0)))
'(clean-cache
  ack
  2
  15
  20
  app
  "\"'(eval\n  (app ack (-> (app - m 1) <-) (app ack m (app - n 1)))\n  (env ((□? (m n)))))\""
  128
  122
  5
  1
  118
  2
  120
  1
  34/35
  27
  #f
  515/122
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  ack
  2
  15
  20
  ref-or-constructor
  "\"'(eval (app - (-> m <-) 1) (env ((□? (m n)))))\""
  125
  119
  5
  1
  118
  2
  120
  1
  139/140
  26
  #f
  502/119
  ((4 4 0) (4 4 0) (4 4 0)))
'(clean-cache
  ack
  2
  15
  20
  app
  "\"'(eval (match (-> (app = n 0) <-) (#f) _) (env ((□? (m n)))))\""
  384
  377
  5
  2
  373
  2
  375
  1
  1284/1295
  103
  #f
  1639/377
  ((21/2 21/2 0) (10 10 0) (10 10 0)))
'(clean-cache
  ack
  2
  15
  20
  ref-or-constructor
  "\"'(eval (app = (-> n <-) 0) (env ((□? (m n)))))\""
  369
  362
  5
  2
  361
  2
  363
  1
  369/370
  98
  #f
  786/181
  ((19/2 19/2 0) (19/2 19/2 0) (19/2 19/2 0)))
'(clean-cache
  ack
  2
  15
  20
  app
  "\"'(eval (match (-> (app = m 0) <-) (#f) _) (env ((□? (m n)))))\""
  167
  161
  5
  1
  157
  2
  159
  1
  179/196
  40
  #f
  98/23
  ((5 5 0) (5 5 0) (5 5 0)))
'(clean-cache
  ack
  2
  15
  20
  ref-or-constructor
  "\"'(eval (app = (-> m <-) 0) (env ((□? (m n)))))\""
  125
  119
  5
  1
  118
  2
  120
  1
  10/11
  26
  #f
  502/119
  ((4 4 0) (4 4 0) (4 4 0)))
'(clean-cache
  ack
  2
  15
  20
  app
  "\"'(eval (letrec* (ack) (-> (app ack 3 12) <-)) (env ()))\""
  416
  408
  5
  3
  393
  2
  395
  1
  1595/1638
  112
  #f
  887/204
  ((25/2 25/2 0) (25/2 25/2 0) (25/2 25/2 0)))
'(shuffled-cache
  0
  ack
  2
  20
  app
  "\"'(eval\n  (match\n   (app = n 0)\n   ((#f) (-> (app ack (app - m 1) (app ack m (app - n 1))) <-))\n   _)\n  (env ((□? (m n)))))\""
  #f)
'(shuffled-cache
  0
  ack
  2
  15
  20
  match
  "\"'(eval (λ (m n) (-> (match (app = m 0) ...) <-)) (env ((□? (m n)))))\""
  438
  431
  5
  2
  424
  2
  426
  1
  14034/14245
  123
  #f
  1879/431
  ((25/2 25/2 0) (25/2 25/2 0) (25/2 25/2 0)))
'(shuffled-cache
  0
  ack
  2
  15
  20
  ref-or-constructor
  "\"'(eval (app - (-> m <-) 1) (env ((□? (m n)))))\""
  439
  432
  5
  2
  424
  2
  426
  1
  28013/28490
  123
  #f
  1883/432
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  ack
  2
  15
  20
  app
  "\"'(eval (app ack m (-> (app - n 1) <-)) (env ((□? (m n)))))\""
  440
  433
  5
  2
  424
  2
  426
  1
  1997/2035
  123
  #f
  1887/433
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  2
  15
  20
  app
  "\"'(eval (letrec* (ack) (-> (app ack 3 12) <-)) (env ()))\""
  443
  436
  5
  2
  427
  2
  429
  1
  2299/2340
  124
  #f
  475/109
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  2
  15
  20
  app
  "\"'(eval (match (app = m 0) (#f) (_ (-> (app + n 1) <-))) (env ((□? (m n)))))\""
  443
  436
  5
  2
  427
  2
  429
  1
  2299/2340
  124
  #f
  475/109
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  2
  15
  20
  ref-or-constructor
  "\"'(eval (app - (-> m <-) 1) (env ((□? (m n)))))\""
  444
  437
  5
  2
  427
  2
  429
  1
  16063/16380
  124
  #f
  1904/437
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  ack
  2
  15
  20
  app
  "\"'(eval (app ack (-> (app - m 1) <-) 1) (env ((□? (m n)))))\""
  445
  438
  5
  2
  427
  2
  429
  1
  16033/16380
  124
  #f
  318/73
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  2
  15
  20
  ref-or-constructor
  "\"'(eval (app ack (-> m <-) (app - n 1)) (env ((□? (m n)))))\""
  446
  439
  5
  2
  427
  2
  429
  1
  1231/1260
  124
  #f
  1912/439
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  ack
  2
  15
  20
  ref-or-constructor
  "\"'(eval (app = (-> m <-) 0) (env ((□? (m n)))))\""
  446
  439
  5
  2
  427
  2
  429
  1
  1231/1260
  124
  #f
  1912/439
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  2
  15
  20
  app
  "\"'(eval\n  (app ack (app - m 1) (-> (app ack m (app - n 1)) <-))\n  (env ((□? (m n)))))\""
  447
  440
  5
  2
  427
  2
  429
  1
  15973/16380
  124
  #f
  479/110
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  2
  15
  20
  app
  "\"'(eval\n  (match (app = n 0) (#f) (_ (-> (app ack (app - m 1) 1) <-)))\n  (env ((□? (m n)))))\""
  456
  449
  5
  2
  435
  2
  437
  1
  3539/3640
  130
  #f
  1958/449
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  2
  15
  20
  match
  "\"'(eval\n  (match (app = m 0) ((#f) (-> (match (app = n 0) ...) <-)) _)\n  (env ((□? (m n)))))\""
  456
  449
  5
  2
  435
  2
  437
  1
  3539/3640
  130
  #f
  1958/449
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  2
  15
  20
  ref-or-constructor
  "\"'(eval (app + (-> n <-) 1) (env ((□? (m n)))))\""
  457
  450
  5
  2
  435
  2
  437
  1
  10597/10920
  130
  #f
  109/25
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  ack
  2
  15
  20
  app
  "\"'(eval (match (-> (app = m 0) <-) (#f) _) (env ((□? (m n)))))\""
  457
  450
  5
  2
  435
  2
  437
  1
  10597/10920
  130
  #f
  109/25
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  2
  15
  20
  ref-or-constructor
  "\"'(eval (app = (-> n <-) 0) (env ((□? (m n)))))\""
  458
  451
  5
  2
  435
  2
  437
  1
  1511/1560
  130
  #f
  1966/451
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  ack
  2
  15
  20
  app
  "\"'(eval\n  (app ack (-> (app - m 1) <-) (app ack m (app - n 1)))\n  (env ((□? (m n)))))\""
  459
  452
  5
  2
  435
  2
  437
  1
  3519/3640
  130
  #f
  985/226
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  2
  15
  20
  letrec*
  "\"'(eval ((top) letrec* (ack) ...) (env ()))\""
  460
  453
  5
  2
  436
  2
  438
  1
  10837/11200
  130
  #f
  658/151
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  2
  15
  20
  app
  "\"'(eval (match (-> (app = n 0) <-) (#f) _) (env ((□? (m n)))))\""
  461
  454
  5
  2
  436
  2
  438
  1
  10817/11200
  130
  #f
  990/227
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  ack
  2
  15
  20
  ref-or-constructor
  "\"'(eval (app - (-> n <-) 1) (env ((□? (m n)))))\""
  462
  455
  5
  2
  436
  2
  438
  1
  10797/11200
  130
  #f
  1984/455
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  ack
  2
  15
  20
  match
  "\"'(eval (λ (m n) (-> (match (app = m 0) ...) <-)) (env ((□? (m n)))))\""
  438
  431
  5
  2
  424
  2
  426
  1
  14034/14245
  123
  #f
  1879/431
  ((25/2 25/2 0) (25/2 25/2 0) (25/2 13 0)))
'(shuffled-cache
  1
  ack
  2
  15
  20
  app
  "\"'(eval (match (-> (app = n 0) <-) (#f) _) (env ((□? (m n)))))\""
  439
  432
  5
  2
  424
  2
  426
  1
  28013/28490
  123
  #f
  1885/432
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  ack
  2
  15
  20
  ref-or-constructor
  "\"'(eval (app - (-> m <-) 1) (env ((□? (m n)))))\""
  440
  433
  5
  2
  424
  2
  426
  1
  1997/2035
  123
  #f
  1889/433
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  ack
  2
  15
  20
  ref-or-constructor
  "\"'(eval (app - (-> n <-) 1) (env ((□? (m n)))))\""
  441
  434
  5
  2
  424
  2
  426
  1
  27903/28490
  123
  #f
  1893/434
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  ack
  2
  15
  20
  app
  "\"'(eval\n  (app ack (-> (app - m 1) <-) (app ack m (app - n 1)))\n  (env ((□? (m n)))))\""
  442
  435
  5
  2
  424
  2
  426
  1
  13924/14245
  123
  #f
  1897/435
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  2
  15
  20
  ref-or-constructor
  "\"'(eval (app ack (-> m <-) (app - n 1)) (env ((□? (m n)))))\""
  443
  436
  5
  2
  424
  2
  426
  1
  27793/28490
  123
  #f
  1901/436
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  ack
  2
  15
  20
  ref-or-constructor
  "\"'(eval (app - (-> m <-) 1) (env ((□? (m n)))))\""
  444
  437
  5
  2
  424
  2
  426
  1
  13869/14245
  123
  #f
  1905/437
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  ack
  2
  15
  20
  app
  "\"'(eval\n  (app ack (app - m 1) (-> (app ack m (app - n 1)) <-))\n  (env ((□? (m n)))))\""
  445
  438
  5
  2
  424
  2
  426
  1
  27683/28490
  123
  #f
  1909/438
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  2
  15
  20
  app
  "\"'(eval (match (-> (app = m 0) <-) (#f) _) (env ((□? (m n)))))\""
  445
  438
  5
  2
  424
  2
  426
  1
  27683/28490
  123
  #f
  1909/438
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  2
  15
  20
  app
  "\"'(eval (match (app = m 0) (#f) (_ (-> (app + n 1) <-))) (env ((□? (m n)))))\""
  445
  438
  5
  2
  424
  2
  426
  1
  27683/28490
  123
  #f
  1909/438
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  2
  15
  20
  letrec*
  "\"'(eval ((top) letrec* (ack) ...) (env ()))\""
  449
  442
  5
  2
  428
  2
  430
  1
  16363/16800
  124
  #f
  963/221
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  2
  15
  20
  ref-or-constructor
  "\"'(eval (app = (-> n <-) 0) (env ((□? (m n)))))\""
  450
  443
  5
  2
  428
  2
  430
  1
  16333/16800
  124
  #f
  1930/443
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  ack
  2
  15
  20
  ref-or-constructor
  "\"'(eval (app + (-> n <-) 1) (env ((□? (m n)))))\""
  451
  444
  5
  2
  428
  2
  430
  1
  2329/2400
  124
  #f
  967/222
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  ack
  2
  15
  20
  ref-or-constructor
  "\"'(eval (app = (-> m <-) 0) (env ((□? (m n)))))\""
  451
  444
  5
  2
  428
  2
  430
  1
  2329/2400
  124
  #f
  967/222
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  2
  15
  20
  app
  "\"'(eval\n  (match\n   (app = n 0)\n   ((#f) (-> (app ack (app - m 1) (app ack m (app - n 1))) <-))\n   _)\n  (env ((□? (m n)))))\""
  453
  446
  5
  2
  429
  2
  431
  1
  30217/31200
  125
  #f
  1943/446
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  2
  15
  20
  app
  "\"'(eval\n  (match (app = n 0) (#f) (_ (-> (app ack (app - m 1) 1) <-)))\n  (env ((□? (m n)))))\""
  462
  455
  5
  2
  437
  2
  439
  1
  140601/145600
  131
  #f
  397/91
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  2
  15
  20
  app
  "\"'(eval (app ack (-> (app - m 1) <-) 1) (env ((□? (m n)))))\""
  463
  456
  5
  2
  437
  2
  439
  1
  140341/145600
  131
  #f
  663/152
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  2
  15
  20
  app
  "\"'(eval (app ack m (-> (app - n 1) <-)) (env ((□? (m n)))))\""
  464
  457
  5
  2
  437
  2
  439
  1
  140081/145600
  131
  #f
  1993/457
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  2
  15
  20
  match
  "\"'(eval\n  (match (app = m 0) ((#f) (-> (match (app = n 0) ...) <-)) _)\n  (env ((□? (m n)))))\""
  464
  457
  5
  2
  437
  2
  439
  1
  140081/145600
  131
  #f
  1993/457
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  2
  15
  20
  app
  "\"'(eval (letrec* (ack) (-> (app ack 3 12) <-)) (env ()))\""
  464
  457
  5
  2
  437
  2
  439
  1
  140081/145600
  131
  #f
  1993/457
  ((0 0 0) (0 0 0) (0 0 0)))
