'(clean-cache
  ack
  2
  15
  40
  letrec*
  "'(eval ((top) letrec* (ack) ...) (env ()))"
  #f
  417
  409
  5
  3
  394
  2
  396
  1
  1637/1680
  242
  #f
  576/409
  ((12 12 0)))
'(clean-cache
  ack
  2
  15
  40
  lambda
  "'(eval (letrec* (... () (ack (-> (λ (m n) ...) <-)) () ...) ...) (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  ack
  2
  15
  40
  match
  "'(eval (λ (m n) (-> (match (app = m 0) ...) <-)) (env ((□? (m n)))))"
  #f
  438
  431
  5
  2
  424
  2
  426
  1
  14034/14245
  273
  #f
  589/431
  ((12 12 0)))
'(clean-cache
  ack
  2
  15
  40
  app
  "'(eval (match (app = m 0) (#f) (_ (-> (app + n 1) <-))) (env ((□? (m n)))))"
  #f
  387
  380
  5
  2
  376
  2
  378
  1
  4621/4662
  239
  #f
  521/380
  ((10 10 0)))
'(clean-cache
  ack
  2
  15
  40
  number
  "'(eval (app + n (-> 1 <-)) (env ((□? (m n)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  ack
  2
  15
  40
  ref-or-constructor
  "'(eval (app + (-> n <-) 1) (env ((□? (m n)))))"
  #f
  369
  362
  5
  2
  361
  2
  363
  1
  332/333
  223
  #f
  501/362
  ((9 9 0)))
'(clean-cache
  ack
  2
  15
  40
  ref-or-constructor
  "'(eval (app (-> + <-) n 1) (env ((□? (m n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  ack
  2
  15
  40
  match
  "'(eval\n  (match (app = m 0) ((#f) (-> (match (app = n 0) ...) <-)) _)\n  (env ((□? (m n)))))"
  #f
  430
  423
  5
  2
  416
  2
  418
  1
  26525/26936
  265
  #f
  581/423
  ((12 12 0)))
'(clean-cache
  ack
  2
  15
  40
  app
  "'(eval\n  (match (app = n 0) (#f) (_ (-> (app ack (app - m 1) 1) <-)))\n  (env ((□? (m n)))))"
  #f
  #f)
'(clean-cache
  ack
  2
  15
  40
  number
  "'(eval (app ack (app - m 1) (-> 1 <-)) (env ((□? (m n)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  ack
  2
  15
  40
  app
  "'(eval (app ack (-> (app - m 1) <-) 1) (env ((□? (m n)))))"
  #f
  128
  122
  5
  1
  118
  2
  120
  1
  34/35
  75
  #f
  169/122
  ((4 4 0)))
'(clean-cache
  ack
  2
  15
  40
  number
  "'(eval (app - m (-> 1 <-)) (env ((□? (m n)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  ack
  2
  15
  40
  ref-or-constructor
  "'(eval (app - (-> m <-) 1) (env ((□? (m n)))))"
  #f
  125
  119
  5
  1
  118
  2
  120
  1
  139/140
  73
  #f
  165/119
  ((4 4 0)))
'(clean-cache
  ack
  2
  15
  40
  ref-or-constructor
  "'(eval (app (-> - <-) m 1) (env ((□? (m n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  ack
  2
  15
  40
  ref-or-constructor
  "'(eval (app (-> ack <-) (app - m 1) 1) (env ((□? (m n)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  ack
  2
  15
  40
  app
  "'(eval\n  (match\n   (app = n 0)\n   ((#f) (-> (app ack (app - m 1) (app ack m (app - ...))) <-))\n   _)\n  (env ((□? (m n)))))"
  #f
  425
  417
  5
  3
  383
  2
  385
  1
  105419/113960
  244
  #f
  590/417
  ((15 15 0)))
'(clean-cache
  ack
  2
  15
  40
  app
  "'(eval\n  (app ack (app - m 1) (-> (app ack m (app - n 1)) <-))\n  (env ((□? (m n)))))"
  #f
  #f)
'(clean-cache
  ack
  2
  15
  40
  app
  "'(eval (app ack m (-> (app - n 1) <-)) (env ((□? (m n)))))"
  #f
  372
  365
  5
  2
  361
  2
  363
  1
  257/259
  225
  #f
  101/73
  ((9 9 0)))
'(clean-cache
  ack
  2
  15
  40
  number
  "'(eval (app - n (-> 1 <-)) (env ((□? (m n)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  ack
  2
  15
  40
  ref-or-constructor
  "'(eval (app - (-> n <-) 1) (env ((□? (m n)))))"
  #f
  369
  362
  5
  2
  361
  2
  363
  1
  517/518
  223
  #f
  501/362
  ((9 9 0)))
'(clean-cache
  ack
  2
  15
  40
  ref-or-constructor
  "'(eval (app (-> - <-) n 1) (env ((□? (m n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  ack
  2
  15
  40
  ref-or-constructor
  "'(eval (app ack (-> m <-) (app - n 1)) (env ((□? (m n)))))"
  #f
  125
  119
  5
  1
  118
  2
  120
  1
  139/140
  73
  #f
  165/119
  ((3 3 0)))
'(clean-cache
  ack
  2
  15
  40
  ref-or-constructor
  "'(eval (app (-> ack <-) m (app - n 1)) (env ((□? (m n)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  ack
  2
  15
  40
  app
  "'(eval\n  (app ack (-> (app - m 1) <-) (app ack m (app - n 1)))\n  (env ((□? (m n)))))"
  #f
  128
  122
  5
  1
  118
  2
  120
  1
  34/35
  75
  #f
  169/122
  ((4 4 0)))
'(clean-cache
  ack
  2
  15
  40
  number
  "'(eval (app - m (-> 1 <-)) (env ((□? (m n)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  ack
  2
  15
  40
  ref-or-constructor
  "'(eval (app - (-> m <-) 1) (env ((□? (m n)))))"
  #f
  125
  119
  5
  1
  118
  2
  120
  1
  139/140
  73
  #f
  165/119
  ((3 3 0)))
'(clean-cache
  ack
  2
  15
  40
  ref-or-constructor
  "'(eval (app (-> - <-) m 1) (env ((□? (m n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  ack
  2
  15
  40
  ref-or-constructor
  "'(eval\n  (app (-> ack <-) (app - m 1) (app ack m (app - n 1)))\n  (env ((□? (m n)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  ack
  2
  15
  40
  app
  "'(eval (match (-> (app = n 0) <-) (#f) _) (env ((□? (m n)))))"
  #f
  384
  377
  5
  2
  373
  2
  375
  1
  1284/1295
  236
  #f
  518/377
  ((9 9 0)))
'(clean-cache
  ack
  2
  15
  40
  number
  "'(eval (app = n (-> 0 <-)) (env ((□? (m n)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  ack
  2
  15
  40
  ref-or-constructor
  "'(eval (app = (-> n <-) 0) (env ((□? (m n)))))"
  #f
  369
  362
  5
  2
  361
  2
  363
  1
  369/370
  223
  #f
  501/362
  ((9 9 0)))
'(clean-cache
  ack
  2
  15
  40
  ref-or-constructor
  "'(eval (app (-> = <-) n 0) (env ((□? (m n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  ack
  2
  15
  40
  app
  "'(eval (match (-> (app = m 0) <-) (#f) _) (env ((□? (m n)))))"
  #f
  167
  161
  5
  1
  157
  2
  159
  1
  179/196
  105
  #f
  31/23
  ((5 5 0)))
'(clean-cache
  ack
  2
  15
  40
  number
  "'(eval (app = m (-> 0 <-)) (env ((□? (m n)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  ack
  2
  15
  40
  ref-or-constructor
  "'(eval (app = (-> m <-) 0) (env ((□? (m n)))))"
  #f
  125
  119
  5
  1
  118
  2
  120
  1
  10/11
  73
  #f
  165/119
  ((3 3 0)))
'(clean-cache
  ack
  2
  15
  40
  ref-or-constructor
  "'(eval (app (-> = <-) m 0) (env ((□? (m n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  ack
  2
  15
  40
  app
  "'(eval (letrec* (ack) (-> (app ack 3 12) <-)) (env ()))"
  #f
  416
  408
  5
  3
  393
  2
  395
  1
  1595/1638
  242
  #f
  287/204
  ((12 12 0)))
'(clean-cache
  ack
  2
  15
  40
  number
  "'(eval (app ack 3 (-> 12 <-)) (env ()))"
  (number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  ack
  2
  15
  40
  number
  "'(eval (app ack (-> 3 <-) 12) (env ()))"
  (number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  ack
  2
  15
  40
  ref-or-constructor
  "'(eval (app (-> ack <-) 3 12) (env ()))"
  (lambda number char string quoted constructor)
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
