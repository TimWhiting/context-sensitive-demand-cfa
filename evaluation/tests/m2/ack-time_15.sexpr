'(clean-cache
  ack
  2
  15
  20
  letrec*
  "\"'(eval ((top) letrec* (ack) ...) (env ()))\""
  417
  409
  5
  3
  394
  2
  396
  1
  1637/1680
  242
  #f
  576/409
  ((12 12 0) (12 12 0) (12 12 0)))
'(clean-cache
  ack
  2
  15
  20
  match
  "\"'(eval (λ (m n) (-> (match (app = m 0) ...) <-)) (env ((□? (m n)))))\""
  438
  431
  5
  2
  424
  2
  426
  1
  14034/14245
  273
  #f
  589/431
  ((25/2 25/2 0) (25/2 25/2 0) (25/2 25/2 0)))
'(clean-cache
  ack
  2
  15
  20
  app
  "\"'(eval (match (app = m 0) (#f) (_ (-> (app + n 1) <-))) (env ((□? (m n)))))\""
  387
  380
  5
  2
  376
  2
  378
  1
  4621/4662
  239
  #f
  521/380
  ((10 10 0) (10 10 0) (10 10 0)))
'(clean-cache
  ack
  2
  15
  20
  ref-or-constructor
  "\"'(eval (app + (-> n <-) 1) (env ((□? (m n)))))\""
  369
  362
  5
  2
  361
  2
  363
  1
  332/333
  223
  #f
  501/362
  ((9 9 0) (9 9 0) (9 9 0)))
'(clean-cache
  ack
  2
  15
  20
  match
  "\"'(eval\n  (match (app = m 0) ((#f) (-> (match (app = n 0) ...) <-)) _)\n  (env ((□? (m n)))))\""
  430
  423
  5
  2
  416
  2
  418
  1
  26525/26936
  265
  #f
  581/423
  ((12 12 0) (12 12 0) (23/2 23/2 0)))
'(clean-cache
  ack
  2
  20
  app
  "\"'(eval\n  (match (app = n 0) (#f) (_ (-> (app ack (app - m 1) 1) <-)))\n  (env ((□? (m n)))))\""
  #f)
'(clean-cache
  ack
  2
  15
  20
  app
  "\"'(eval (app ack (-> (app - m 1) <-) 1) (env ((□? (m n)))))\""
  128
  122
  5
  1
  118
  2
  120
  1
  34/35
  75
  #f
  169/122
  ((4 4 0) (4 4 0) (9/2 9/2 0)))
'(clean-cache
  ack
  2
  15
  20
  ref-or-constructor
  "\"'(eval (app - (-> m <-) 1) (env ((□? (m n)))))\""
  125
  119
  5
  1
  118
  2
  120
  1
  139/140
  73
  #f
  165/119
  ((4 4 0) (4 4 0) (4 4 0)))
'(clean-cache
  ack
  2
  20
  app
  "\"'(eval\n  (match\n   (app = n 0)\n   ((#f) (-> (app ack (app - m 1) (app ack m (app - n 1))) <-))\n   _)\n  (env ((□? (m n)))))\""
  #f)
'(clean-cache
  ack
  2
  20
  app
  "\"'(eval\n  (app ack (app - m 1) (-> (app ack m (app - n 1)) <-))\n  (env ((□? (m n)))))\""
  #f)
'(clean-cache
  ack
  2
  15
  20
  app
  "\"'(eval (app ack m (-> (app - n 1) <-)) (env ((□? (m n)))))\""
  372
  365
  5
  2
  361
  2
  363
  1
  257/259
  225
  #f
  101/73
  ((19/2 19/2 0) (19/2 19/2 0) (19/2 19/2 0)))
'(clean-cache
  ack
  2
  15
  20
  ref-or-constructor
  "\"'(eval (app - (-> n <-) 1) (env ((□? (m n)))))\""
  369
  362
  5
  2
  361
  2
  363
  1
  517/518
  223
  #f
  501/362
  ((9 9 0) (19/2 19/2 0) (9 9 0)))
'(clean-cache
  ack
  2
  15
  20
  ref-or-constructor
  "\"'(eval (app ack (-> m <-) (app - n 1)) (env ((□? (m n)))))\""
  125
  119
  5
  1
  118
  2
  120
  1
  139/140
  73
  #f
  165/119
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(clean-cache
  ack
  2
  15
  20
  app
  "\"'(eval\n  (app ack (-> (app - m 1) <-) (app ack m (app - n 1)))\n  (env ((□? (m n)))))\""
  128
  122
  5
  1
  118
  2
  120
  1
  34/35
  75
  #f
  169/122
  ((4 4 0) (4 4 0) (9/2 9/2 0)))
'(clean-cache
  ack
  2
  15
  20
  ref-or-constructor
  "\"'(eval (app - (-> m <-) 1) (env ((□? (m n)))))\""
  125
  119
  5
  1
  118
  2
  120
  1
  139/140
  73
  #f
  165/119
  ((4 4 0) (7/2 7/2 0) (4 4 0)))
'(clean-cache
  ack
  2
  15
  20
  app
  "\"'(eval (match (-> (app = n 0) <-) (#f) _) (env ((□? (m n)))))\""
  384
  377
  5
  2
  373
  2
  375
  1
  1284/1295
  236
  #f
  518/377
  ((10 10 0) (10 10 0) (23/2 23/2 0)))
'(clean-cache
  ack
  2
  15
  20
  ref-or-constructor
  "\"'(eval (app = (-> n <-) 0) (env ((□? (m n)))))\""
  369
  362
  5
  2
  361
  2
  363
  1
  369/370
  223
  #f
  501/362
  ((19/2 19/2 0) (19/2 19/2 0) (19/2 19/2 0)))
'(clean-cache
  ack
  2
  15
  20
  app
  "\"'(eval (match (-> (app = m 0) <-) (#f) _) (env ((□? (m n)))))\""
  167
  161
  5
  1
  157
  2
  159
  1
  179/196
  105
  #f
  31/23
  ((5 5 0) (5 5 0) (5 5 0)))
'(clean-cache
  ack
  2
  15
  20
  ref-or-constructor
  "\"'(eval (app = (-> m <-) 0) (env ((□? (m n)))))\""
  125
  119
  5
  1
  118
  2
  120
  1
  10/11
  73
  #f
  165/119
  ((4 4 0) (4 4 0) (4 4 0)))
'(clean-cache
  ack
  2
  15
  20
  app
  "\"'(eval (letrec* (ack) (-> (app ack 3 12) <-)) (env ()))\""
  416
  408
  5
  3
  393
  2
  395
  1
  1595/1638
  242
  #f
  287/204
  ((12 12 0) (12 12 0) (25/2 25/2 0)))
'(shuffled-cache
  0
  ack
  2
  15
  20
  app
  "\"'(eval (match (app = m 0) (#f) (_ (-> (app + n 1) <-))) (env ((□? (m n)))))\""
  387
  380
  5
  2
  376
  2
  378
  1
  4621/4662
  239
  #f
  521/380
  ((21/2 21/2 0) (10 10 0) (10 10 0)))
'(shuffled-cache
  0
  ack
  2
  15
  20
  app
  "\"'(eval (app ack (-> (app - m 1) <-) 1) (env ((□? (m n)))))\""
  388
  381
  5
  2
  376
  2
  378
  1
  2306/2331
  239
  #f
  523/381
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  2
  15
  20
  ref-or-constructor
  "\"'(eval (app - (-> m <-) 1) (env ((□? (m n)))))\""
  389
  382
  5
  2
  376
  2
  378
  1
  4603/4662
  239
  #f
  525/382
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  ack
  2
  15
  20
  ref-or-constructor
  "\"'(eval (app + (-> n <-) 1) (env ((□? (m n)))))\""
  389
  382
  5
  2
  376
  2
  378
  1
  4603/4662
  239
  #f
  525/382
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  2
  15
  20
  ref-or-constructor
  "\"'(eval (app - (-> m <-) 1) (env ((□? (m n)))))\""
  390
  383
  5
  2
  376
  2
  378
  1
  2297/2331
  239
  #f
  527/383
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  ack
  2
  15
  20
  match
  "\"'(eval\n  (match (app = m 0) ((#f) (-> (match (app = n 0) ...) <-)) _)\n  (env ((□? (m n)))))\""
  423
  416
  5
  2
  408
  2
  410
  1
  25204/25641
  262
  #f
  285/208
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  ack
  2
  15
  20
  app
  "\"'(eval (app ack m (-> (app - n 1) <-)) (env ((□? (m n)))))\""
  424
  417
  5
  2
  408
  2
  410
  1
  7187/7326
  262
  #f
  572/417
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  2
  15
  20
  match
  "\"'(eval (λ (m n) (-> (match (app = m 0) ...) <-)) (env ((□? (m n)))))\""
  441
  434
  5
  2
  424
  2
  426
  1
  27903/28490
  273
  #f
  85/62
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  ack
  2
  15
  20
  app
  "\"'(eval\n  (match\n   (app = n 0)\n   ((#f) (-> (app ack (app - m 1) (app ack m (app - n 1))) <-))\n   _)\n  (env ((□? (m n)))))\""
  443
  436
  5
  2
  425
  2
  427
  1
  361969/370370
  274
  #f
  299/218
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  2
  15
  20
  app
  "\"'(eval (letrec* (ack) (-> (app ack 3 12) <-)) (env ()))\""
  446
  439
  5
  2
  428
  2
  430
  1
  208399/212940
  275
  #f
  603/439
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  2
  15
  20
  app
  "\"'(eval\n  (match (app = n 0) (#f) (_ (-> (app ack (app - m 1) 1) <-)))\n  (env ((□? (m n)))))\""
  455
  448
  5
  2
  436
  2
  438
  1
  138521/141960
  281
  #f
  615/448
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  2
  15
  20
  ref-or-constructor
  "\"'(eval (app - (-> n <-) 1) (env ((□? (m n)))))\""
  456
  449
  5
  2
  436
  2
  438
  1
  46087/47320
  281
  #f
  617/449
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  ack
  2
  15
  20
  letrec*
  "\"'(eval ((top) letrec* (ack) ...) (env ()))\""
  457
  450
  5
  2
  437
  2
  439
  1
  141901/145600
  281
  #f
  619/450
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  2
  15
  20
  ref-or-constructor
  "\"'(eval (app ack (-> m <-) (app - n 1)) (env ((□? (m n)))))\""
  458
  451
  5
  2
  437
  2
  439
  1
  141641/145600
  281
  #f
  621/451
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  ack
  2
  15
  20
  ref-or-constructor
  "\"'(eval (app = (-> m <-) 0) (env ((□? (m n)))))\""
  459
  452
  5
  2
  437
  2
  439
  1
  141381/145600
  281
  #f
  623/452
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  ack
  2
  15
  20
  app
  "\"'(eval\n  (app ack (app - m 1) (-> (app ack m (app - n 1)) <-))\n  (env ((□? (m n)))))\""
  460
  453
  5
  2
  437
  2
  439
  1
  141121/145600
  281
  #f
  625/453
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  2
  15
  20
  app
  "\"'(eval\n  (app ack (-> (app - m 1) <-) (app ack m (app - n 1)))\n  (env ((□? (m n)))))\""
  461
  454
  5
  2
  437
  2
  439
  1
  20123/20800
  281
  #f
  627/454
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  2
  15
  20
  app
  "\"'(eval (match (-> (app = n 0) <-) (#f) _) (env ((□? (m n)))))\""
  462
  455
  5
  2
  437
  2
  439
  1
  140601/145600
  281
  #f
  629/455
  ((1/2 1/2 0) (0 0 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  ack
  2
  15
  20
  ref-or-constructor
  "\"'(eval (app = (-> n <-) 0) (env ((□? (m n)))))\""
  463
  456
  5
  2
  437
  2
  439
  1
  140341/145600
  281
  #f
  631/456
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  ack
  2
  15
  20
  app
  "\"'(eval (match (-> (app = m 0) <-) (#f) _) (env ((□? (m n)))))\""
  464
  457
  5
  2
  437
  2
  439
  1
  140081/145600
  281
  #f
  633/457
  ((0 0 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  ack
  2
  15
  20
  match
  "\"'(eval\n  (match (app = m 0) ((#f) (-> (match (app = n 0) ...) <-)) _)\n  (env ((□? (m n)))))\""
  430
  423
  5
  2
  416
  2
  418
  1
  26525/26936
  265
  #f
  581/423
  ((12 12 0) (12 12 0) (12 12 0)))
'(shuffled-cache
  1
  ack
  2
  15
  20
  app
  "\"'(eval (app ack (-> (app - m 1) <-) 1) (env ((□? (m n)))))\""
  431
  424
  5
  2
  416
  2
  418
  1
  26473/26936
  265
  #f
  11/8
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  2
  15
  20
  app
  "\"'(eval\n  (match\n   (app = n 0)\n   ((#f) (-> (app ack (app - m 1) (app ack m (app - n 1))) <-))\n   _)\n  (env ((□? (m n)))))\""
  431
  424
  5
  2
  416
  2
  418
  1
  26473/26936
  265
  #f
  11/8
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  2
  15
  20
  ref-or-constructor
  "\"'(eval (app = (-> m <-) 0) (env ((□? (m n)))))\""
  432
  425
  5
  2
  416
  2
  418
  1
  26417/26936
  265
  #f
  117/85
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  ack
  2
  15
  20
  app
  "\"'(eval\n  (app ack (-> (app - m 1) <-) (app ack m (app - n 1)))\n  (env ((□? (m n)))))\""
  433
  426
  5
  2
  416
  2
  418
  1
  26365/26936
  265
  #f
  587/426
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  2
  15
  20
  app
  "\"'(eval\n  (app ack (app - m 1) (-> (app ack m (app - n 1)) <-))\n  (env ((□? (m n)))))\""
  434
  427
  5
  2
  416
  2
  418
  1
  3759/3848
  265
  #f
  589/427
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  2
  15
  20
  letrec*
  "\"'(eval ((top) letrec* (ack) ...) (env ()))\""
  443
  436
  5
  2
  425
  2
  427
  1
  5701/5824
  270
  #f
  301/218
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  2
  15
  20
  ref-or-constructor
  "\"'(eval (app - (-> n <-) 1) (env ((□? (m n)))))\""
  444
  437
  5
  2
  425
  2
  427
  1
  28453/29120
  270
  #f
  604/437
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  ack
  2
  15
  20
  ref-or-constructor
  "\"'(eval (app = (-> n <-) 0) (env ((□? (m n)))))\""
  444
  437
  5
  2
  425
  2
  427
  1
  28453/29120
  270
  #f
  604/437
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  2
  15
  20
  ref-or-constructor
  "\"'(eval (app - (-> m <-) 1) (env ((□? (m n)))))\""
  445
  438
  5
  2
  425
  2
  427
  1
  28401/29120
  270
  #f
  101/73
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  ack
  2
  15
  20
  ref-or-constructor
  "\"'(eval (app - (-> m <-) 1) (env ((□? (m n)))))\""
  446
  439
  5
  2
  425
  2
  427
  1
  28349/29120
  270
  #f
  608/439
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  ack
  2
  15
  20
  app
  "\"'(eval (letrec* (ack) (-> (app ack 3 12) <-)) (env ()))\""
  446
  439
  5
  2
  425
  2
  427
  1
  28349/29120
  270
  #f
  608/439
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  2
  15
  20
  app
  "\"'(eval (match (-> (app = m 0) <-) (#f) _) (env ((□? (m n)))))\""
  447
  440
  5
  2
  425
  2
  427
  1
  28297/29120
  270
  #f
  61/44
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  ack
  2
  15
  20
  match
  "\"'(eval (λ (m n) (-> (match (app = m 0) ...) <-)) (env ((□? (m n)))))\""
  448
  441
  5
  2
  425
  2
  427
  1
  807/832
  270
  #f
  68/49
  ((1/2 1/2 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  2
  15
  20
  ref-or-constructor
  "\"'(eval (app ack (-> m <-) (app - n 1)) (env ((□? (m n)))))\""
  449
  442
  5
  2
  425
  2
  427
  1
  28193/29120
  270
  #f
  307/221
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  ack
  2
  15
  20
  app
  "\"'(eval (match (-> (app = n 0) <-) (#f) _) (env ((□? (m n)))))\""
  449
  442
  5
  2
  425
  2
  427
  1
  28193/29120
  270
  #f
  307/221
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  2
  15
  20
  app
  "\"'(eval (match (app = m 0) (#f) (_ (-> (app + n 1) <-))) (env ((□? (m n)))))\""
  462
  455
  5
  2
  437
  2
  439
  1
  140601/145600
  281
  #f
  629/455
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  ack
  2
  15
  20
  app
  "\"'(eval\n  (match (app = n 0) (#f) (_ (-> (app ack (app - m 1) 1) <-)))\n  (env ((□? (m n)))))\""
  462
  455
  5
  2
  437
  2
  439
  1
  140601/145600
  281
  #f
  629/455
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  2
  15
  20
  ref-or-constructor
  "\"'(eval (app + (-> n <-) 1) (env ((□? (m n)))))\""
  463
  456
  5
  2
  437
  2
  439
  1
  140341/145600
  281
  #f
  631/456
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  ack
  2
  15
  20
  app
  "\"'(eval (app ack m (-> (app - n 1) <-)) (env ((□? (m n)))))\""
  464
  457
  5
  2
  437
  2
  439
  1
  140081/145600
  281
  #f
  633/457
  ((0 0 0) (0 0 0) (0 0 0)))
