'(clean-cache
  ack
  2
  15
  20
  letrec*
  "\"'(eval ((top) letrec* (ack) ...) (env ()))\""
  45
  38
  5
  2
  38
  2
  40
  1
  1
  11
  #f
  167/38
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  ack
  2
  20
  match
  "\"'(eval (λ (m n) (-> (match (app = m 0) ...) <-)) (env ((□? (m n)))))\""
  #f)
'(clean-cache
  ack
  2
  20
  app
  "\"'(eval (match (app = m 0) (#f) (_ (-> (app + n 1) <-))) (env ((□? (m n)))))\""
  #f)
'(clean-cache
  ack
  2
  20
  ref-or-constructor
  "\"'(eval (app + (-> n <-) 1) (env ((□? (m n)))))\""
  #f)
'(clean-cache
  ack
  2
  20
  match
  "\"'(eval\n  (match (app = m 0) ((#f) (-> (match (app = n 0) ...) <-)) _)\n  (env ((□? (m n)))))\""
  #f)
'(clean-cache
  ack
  2
  20
  app
  "\"'(eval\n  (match (app = n 0) (#f) (_ (-> (app ack (app - m 1) 1) <-)))\n  (env ((□? (m n)))))\""
  #f)
'(clean-cache
  ack
  2
  15
  20
  app
  "\"'(eval (app ack (-> (app - m 1) <-) 1) (env ((□? (m n)))))\""
  128
  122
  5
  1
  118
  2
  120
  1
  34/35
  27
  #f
  515/122
  ((11 11 0) (23/2 23/2 0) (23/2 12 0)))
'(clean-cache
  ack
  2
  15
  20
  ref-or-constructor
  "\"'(eval (app - (-> m <-) 1) (env ((□? (m n)))))\""
  125
  119
  5
  1
  118
  2
  120
  1
  139/140
  26
  #f
  502/119
  ((23/2 23/2 0) (19/2 10 0) (10 10 0)))
'(clean-cache
  ack
  2
  20
  app
  "\"'(eval\n  (match\n   (app = n 0)\n   ((#f) (-> (app ack (app - m 1) (app ack m (app - n 1))) <-))\n   _)\n  (env ((□? (m n)))))\""
  #f)
'(clean-cache
  ack
  2
  20
  app
  "\"'(eval\n  (app ack (app - m 1) (-> (app ack m (app - n 1)) <-))\n  (env ((□? (m n)))))\""
  #f)
'(clean-cache
  ack
  2
  20
  app
  "\"'(eval (app ack m (-> (app - n 1) <-)) (env ((□? (m n)))))\""
  #f)
'(clean-cache
  ack
  2
  20
  ref-or-constructor
  "\"'(eval (app - (-> n <-) 1) (env ((□? (m n)))))\""
  #f)
'(clean-cache
  ack
  2
  15
  20
  ref-or-constructor
  "\"'(eval (app ack (-> m <-) (app - n 1)) (env ((□? (m n)))))\""
  125
  119
  5
  1
  118
  2
  120
  1
  139/140
  26
  #f
  502/119
  ((21/2 11 0) (10 21/2 0) (21/2 21/2 0)))
'(clean-cache
  ack
  2
  15
  20
  app
  "\"'(eval\n  (app ack (-> (app - m 1) <-) (app ack m (app - n 1)))\n  (env ((□? (m n)))))\""
  128
  122
  5
  1
  118
  2
  120
  1
  34/35
  27
  #f
  515/122
  ((23/2 23/2 0) (11 23/2 0) (11 11 0)))
'(clean-cache
  ack
  2
  15
  20
  ref-or-constructor
  "\"'(eval (app - (-> m <-) 1) (env ((□? (m n)))))\""
  125
  119
  5
  1
  118
  2
  120
  1
  139/140
  26
  #f
  502/119
  ((11 11 0) (21/2 21/2 0) (10 21/2 0)))
'(clean-cache
  ack
  2
  20
  app
  "\"'(eval (match (-> (app = n 0) <-) (#f) _) (env ((□? (m n)))))\""
  #f)
'(clean-cache
  ack
  2
  20
  ref-or-constructor
  "\"'(eval (app = (-> n <-) 0) (env ((□? (m n)))))\""
  #f)
'(clean-cache
  ack
  2
  15
  20
  app
  "\"'(eval (match (-> (app = m 0) <-) (#f) _) (env ((□? (m n)))))\""
  167
  161
  5
  1
  157
  2
  159
  1
  179/196
  40
  #f
  98/23
  ((25/2 25/2 0) (27/2 14 0) (25/2 13 0)))
'(clean-cache
  ack
  2
  15
  20
  ref-or-constructor
  "\"'(eval (app = (-> m <-) 0) (env ((□? (m n)))))\""
  125
  119
  5
  1
  118
  2
  120
  1
  10/11
  26
  #f
  502/119
  ((21/2 21/2 0) (10 21/2 0) (10 10 0)))
'(clean-cache
  ack
  2
  15
  20
  app
  "\"'(eval (letrec* (ack) (-> (app ack 3 12) <-)) (env ()))\""
  44
  37
  5
  2
  37
  2
  39
  1
  1
  11
  #f
  163/37
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  ack
  2
  20
  match
  "\"'(eval (λ (m n) (-> (match (app = m 0) ...) <-)) (env ((□? (m n)))))\""
  #f)
'(shuffled-cache
  0
  ack
  2
  20
  ref-or-constructor
  "\"'(eval (app - (-> n <-) 1) (env ((□? (m n)))))\""
  #f)
'(shuffled-cache
  0
  ack
  2
  15
  20
  ref-or-constructor
  "\"'(eval (app = (-> m <-) 0) (env ((□? (m n)))))\""
  125
  119
  5
  1
  118
  2
  120
  1
  10/11
  26
  #f
  502/119
  ((11 11 0) (23/2 23/2 0) (11 11 0)))
'(shuffled-cache
  0
  ack
  2
  20
  ref-or-constructor
  "\"'(eval (app + (-> n <-) 1) (env ((□? (m n)))))\""
  #f)
'(shuffled-cache
  0
  ack
  2
  20
  ref-or-constructor
  "\"'(eval (app ack (-> m <-) (app - n 1)) (env ((□? (m n)))))\""
  #f)
'(shuffled-cache
  0
  ack
  2
  20
  app
  "\"'(eval\n  (match (app = n 0) (#f) (_ (-> (app ack (app - m 1) 1) <-)))\n  (env ((□? (m n)))))\""
  #f)
'(shuffled-cache
  0
  ack
  2
  15
  20
  app
  "\"'(eval\n  (app ack (-> (app - m 1) <-) (app ack m (app - n 1)))\n  (env ((□? (m n)))))\""
  128
  122
  5
  1
  118
  2
  120
  1
  34/35
  27
  #f
  515/122
  ((23/2 23/2 0) (11 11 0) (23/2 12 0)))
'(shuffled-cache
  0
  ack
  2
  15
  20
  app
  "\"'(eval (match (-> (app = m 0) <-) (#f) _) (env ((□? (m n)))))\""
  168
  162
  5
  1
  157
  2
  159
  1
  89/98
  40
  #f
  115/27
  ((5/2 5/2 0) (5/2 3 0) (5/2 3 0)))
'(shuffled-cache
  0
  ack
  2
  15
  20
  app
  "\"'(eval\n  (app ack (app - m 1) (-> (app ack m (app - n 1)) <-))\n  (env ((□? (m n)))))\""
  411
  404
  5
  2
  398
  2
  400
  1
  5629/5698
  107
  #f
  1763/404
  ((29/2 15 0) (29/2 15 0) (15 15 0)))
'(shuffled-cache
  0
  ack
  2
  15
  20
  app
  "\"'(eval (match (app = m 0) (#f) (_ (-> (app + n 1) <-))) (env ((□? (m n)))))\""
  421
  414
  5
  2
  407
  2
  409
  1
  5615/5698
  110
  #f
  301/69
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  ack
  2
  15
  20
  app
  "\"'(eval (letrec* (ack) (-> (app ack 3 12) <-)) (env ()))\""
  459
  452
  5
  2
  445
  2
  447
  1
  77/78
  120
  #f
  495/113
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  ack
  2
  15
  20
  app
  "\"'(eval (match (-> (app = n 0) <-) (#f) _) (env ((□? (m n)))))\""
  460
  453
  5
  2
  445
  2
  447
  1
  269/273
  120
  #f
  662/151
  ((3/2 3/2 0) (2 2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  ack
  2
  15
  20
  app
  "\"'(eval (app ack m (-> (app - n 1) <-)) (env ((□? (m n)))))\""
  461
  454
  5
  2
  445
  2
  447
  1
  179/182
  120
  #f
  995/227
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  ack
  2
  15
  20
  match
  "\"'(eval\n  (match (app = m 0) ((#f) (-> (match (app = n 0) ...) <-)) _)\n  (env ((□? (m n)))))\""
  462
  455
  5
  2
  445
  2
  447
  1
  268/273
  120
  #f
  1994/455
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  ack
  2
  15
  20
  letrec*
  "\"'(eval ((top) letrec* (ack) ...) (env ()))\""
  463
  456
  5
  2
  446
  2
  448
  1
  55/56
  120
  #f
  333/76
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  2
  15
  20
  ref-or-constructor
  "\"'(eval (app - (-> m <-) 1) (env ((□? (m n)))))\""
  464
  457
  5
  2
  446
  2
  448
  1
  549/560
  120
  #f
  2002/457
  ((3/2 3/2 0) (3/2 3/2 0) (1 1 0)))
'(shuffled-cache
  0
  ack
  2
  15
  20
  app
  "\"'(eval\n  (match\n   (app = n 0)\n   ((#f) (-> (app ack (app - m 1) (app ack m (app - n 1))) <-))\n   _)\n  (env ((□? (m n)))))\""
  466
  459
  5
  2
  447
  2
  449
  1
  7123/7280
  121
  #f
  2011/459
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  ack
  2
  15
  20
  ref-or-constructor
  "\"'(eval (app = (-> n <-) 0) (env ((□? (m n)))))\""
  467
  460
  5
  2
  447
  2
  449
  1
  711/728
  121
  #f
  403/92
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  ack
  2
  15
  20
  ref-or-constructor
  "\"'(eval (app - (-> m <-) 1) (env ((□? (m n)))))\""
  467
  460
  5
  2
  447
  2
  449
  1
  711/728
  121
  #f
  403/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  2
  15
  20
  app
  "\"'(eval (app ack (-> (app - m 1) <-) 1) (env ((□? (m n)))))\""
  468
  461
  5
  2
  447
  2
  449
  1
  7097/7280
  121
  #f
  2019/461
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  ack
  2
  20
  match
  "\"'(eval\n  (match (app = m 0) ((#f) (-> (match (app = n 0) ...) <-)) _)\n  (env ((□? (m n)))))\""
  #f)
'(shuffled-cache
  1
  ack
  2
  20
  app
  "\"'(eval\n  (match (app = n 0) (#f) (_ (-> (app ack (app - m 1) 1) <-)))\n  (env ((□? (m n)))))\""
  #f)
'(shuffled-cache
  1
  ack
  2
  15
  20
  app
  "\"'(eval (app ack (-> (app - m 1) <-) 1) (env ((□? (m n)))))\""
  128
  122
  5
  1
  118
  2
  120
  1
  34/35
  27
  #f
  515/122
  ((11 11 0) (21/2 21/2 0) (23/2 23/2 0)))
'(shuffled-cache
  1
  ack
  2
  15
  20
  app
  "\"'(eval\n  (app ack (-> (app - m 1) <-) (app ack m (app - n 1)))\n  (env ((□? (m n)))))\""
  129
  123
  5
  1
  118
  2
  120
  1
  27/28
  27
  #f
  173/41
  ((1/2 1/2 0) (1/2 1/2 0) (1 1 0)))
'(shuffled-cache
  1
  ack
  2
  15
  20
  app
  "\"'(eval (match (-> (app = m 0) <-) (#f) _) (env ((□? (m n)))))\""
  169
  163
  5
  1
  157
  2
  159
  1
  177/196
  40
  #f
  694/163
  ((3 3 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  ack
  2
  15
  20
  ref-or-constructor
  "\"'(eval (app - (-> m <-) 1) (env ((□? (m n)))))\""
  169
  163
  5
  1
  157
  2
  159
  1
  177/196
  40
  #f
  694/163
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  2
  20
  app
  "\"'(eval (match (app = m 0) (#f) (_ (-> (app + n 1) <-))) (env ((□? (m n)))))\""
  #f)
'(shuffled-cache
  1
  ack
  2
  20
  ref-or-constructor
  "\"'(eval (app = (-> n <-) 0) (env ((□? (m n)))))\""
  #f)
'(shuffled-cache
  1
  ack
  2
  20
  app
  "\"'(eval\n  (app ack (app - m 1) (-> (app ack m (app - n 1)) <-))\n  (env ((□? (m n)))))\""
  #f)
'(shuffled-cache
  1
  ack
  2
  15
  20
  ref-or-constructor
  "\"'(eval (app - (-> m <-) 1) (env ((□? (m n)))))\""
  125
  119
  5
  1
  118
  2
  120
  1
  139/140
  26
  #f
  502/119
  ((21/2 21/2 0) (10 21/2 0) (21/2 21/2 0)))
'(shuffled-cache
  1
  ack
  2
  20
  ref-or-constructor
  "\"'(eval (app - (-> n <-) 1) (env ((□? (m n)))))\""
  #f)
'(shuffled-cache
  1
  ack
  2
  15
  20
  ref-or-constructor
  "\"'(eval (app = (-> m <-) 0) (env ((□? (m n)))))\""
  125
  119
  5
  1
  118
  2
  120
  1
  10/11
  26
  #f
  502/119
  ((12 25/2 0) (10 21/2 0) (10 10 0)))
'(shuffled-cache
  1
  ack
  2
  20
  app
  "\"'(eval\n  (match\n   (app = n 0)\n   ((#f) (-> (app ack (app - m 1) (app ack m (app - n 1))) <-))\n   _)\n  (env ((□? (m n)))))\""
  #f)
'(shuffled-cache
  1
  ack
  2
  20
  app
  "\"'(eval (match (-> (app = n 0) <-) (#f) _) (env ((□? (m n)))))\""
  #f)
'(shuffled-cache
  1
  ack
  2
  20
  app
  "\"'(eval (app ack m (-> (app - n 1) <-)) (env ((□? (m n)))))\""
  #f)
'(shuffled-cache
  1
  ack
  2
  20
  match
  "\"'(eval (λ (m n) (-> (match (app = m 0) ...) <-)) (env ((□? (m n)))))\""
  #f)
'(shuffled-cache
  1
  ack
  2
  20
  ref-or-constructor
  "\"'(eval (app + (-> n <-) 1) (env ((□? (m n)))))\""
  #f)
'(shuffled-cache
  1
  ack
  2
  15
  20
  letrec*
  "\"'(eval ((top) letrec* (ack) ...) (env ()))\""
  45
  38
  5
  2
  38
  2
  40
  1
  1
  11
  #f
  167/38
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  ack
  2
  20
  ref-or-constructor
  "\"'(eval (app ack (-> m <-) (app - n 1)) (env ((□? (m n)))))\""
  #f)
'(shuffled-cache
  1
  ack
  2
  15
  20
  app
  "\"'(eval (letrec* (ack) (-> (app ack 3 12) <-)) (env ()))\""
  44
  37
  5
  2
  37
  2
  39
  1
  1
  11
  #f
  163/37
  ((1 1 0) (1 1 0) (1 1 0)))
