'(clean-cache
  sat-1
  2
  34
  letrec*
  "\"'(eval ((top) letrec* (phi ... sat-solve-4) ...) (env ()))\""
  #f)
'(clean-cache
  sat-1
  2
  34
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  #f)
'(clean-cache
  sat-1
  2
  34
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  #f)
'(clean-cache
  sat-1
  2
  34
  app
  "\"'(eval\n  (λ (n2) (-> (app try (λ (n3) ...)) <-))\n  (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  #f)
'(clean-cache
  sat-1
  2
  34
  app
  "\"'(eval\n  (λ (n3) (-> (app try (λ (n4) ...)) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  #f)
'(clean-cache
  sat-1
  2
  34
  app
  "\"'(eval\n  (λ (n4) (-> (app p n1 n2 n3 n4) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  #f)
'(clean-cache
  sat-1
  2
  5
  34
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 (-> n4 <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  17
  7
  3
  7
  1
  0
  1
  1
  1/7
  6
  #f
  36/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-1
  2
  5
  34
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 (-> n3 <-) n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  17
  7
  3
  7
  1
  0
  1
  1
  1/7
  6
  #f
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  2
  5
  34
  ref-or-constructor
  "\"'(eval\n  (app p n1 (-> n2 <-) n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  17
  7
  3
  7
  1
  0
  1
  1
  1/7
  6
  #f
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  2
  5
  34
  ref-or-constructor
  "\"'(eval\n  (app p (-> n1 <-) n2 n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  17
  7
  3
  7
  1
  0
  1
  1
  1/7
  6
  #f
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  2
  5
  34
  ref-or-constructor
  "\"'(eval\n  (app (-> p <-) n1 n2 n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  10
  3
  2
  5
  2
  2
  4
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  2
  34
  app
  "\"'(eval\n  (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  #f)
'(clean-cache
  sat-1
  2
  34
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  #f)
'(clean-cache
  sat-1
  2
  5
  34
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  2
  5
  34
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  15
  5
  5
  5
  0
  1
  1
  1
  0
  4
  #f
  28/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  2
  34
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  #f)
'(clean-cache
  sat-1
  2
  5
  34
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  2
  5
  34
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  15
  5
  5
  5
  0
  1
  1
  1
  0
  4
  #f
  28/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  2
  34
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4)\n    (->\n     (app\n      and\n      (app or x1 (app not x2) (app not x3))\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  #f)
'(clean-cache
  sat-1
  2
  5
  34
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  65
  40
  11
  14
  11
  2
  13
  1
  13/34
  25
  #f
  43/8
  ((4 4 0) (4 4 0) (4 4 0)))
'(clean-cache
  sat-1
  2
  5
  34
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  30
  12
  6
  12
  3
  2
  5
  1
  3/10
  10
  #f
  31/6
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-1
  2
  5
  34
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env ((□? (x1 x2 x3 x4)))))\""
  27
  12
  6
  9
  3
  2
  5
  1
  3/10
  10
  #f
  31/6
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-1
  2
  5
  34
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))\""
  79
  48
  15
  16
  13
  6
  19
  1
  1/3
  34
  #f
  127/24
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(clean-cache
  sat-1
  2
  5
  34
  app
  "\"'(eval (app or (app not x2) (-> (app not x3) <-)) (env ((□? (x1 x2 x3 x4)))))\""
  35
  18
  6
  11
  5
  2
  7
  1
  5/14
  14
  #f
  47/9
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-1
  2
  5
  34
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  28
  12
  6
  10
  3
  2
  5
  1
  3/10
  10
  #f
  31/6
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-1
  2
  5
  34
  app
  "\"'(eval (app or (-> (app not x2) <-) (app not x3)) (env ((□? (x1 x2 x3 x4)))))\""
  37
  18
  6
  13
  5
  2
  7
  1
  5/14
  14
  #f
  47/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-1
  2
  5
  34
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  30
  12
  6
  12
  3
  2
  5
  1
  3/10
  10
  #f
  31/6
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-1
  2
  34
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))\""
  #f)
'(clean-cache
  sat-1
  2
  5
  34
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  35
  18
  6
  11
  5
  2
  7
  1
  5/14
  14
  #f
  47/9
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-1
  2
  5
  34
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  28
  12
  6
  10
  3
  2
  5
  1
  3/10
  10
  #f
  31/6
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-1
  2
  5
  34
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))\""
  37
  18
  6
  13
  5
  2
  7
  1
  5/14
  14
  #f
  47/9
  ((1/2 1/2 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-1
  2
  5
  34
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  30
  12
  6
  12
  3
  2
  5
  1
  3/10
  10
  #f
  31/6
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-1
  2
  5
  34
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))\""
  31
  12
  6
  13
  8
  5
  13
  1
  4/5
  10
  #f
  31/6
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-1
  2
  34
  app
  "\"'(eval (letrec* (phi ... sat-solve-4) (-> (app sat-solve-4 phi) <-)) (env ()))\""
  #f)
'(shuffled-cache
  0
  sat-1
  2
  34
  app
  "\"'(eval\n  (λ (n4) (-> (app p n1 n2 n3 n4) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  #f)
'(shuffled-cache
  0
  sat-1
  2
  5
  34
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))\""
  79
  48
  15
  16
  13
  6
  19
  1
  1/3
  34
  #f
  127/24
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  0
  sat-1
  2
  34
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  #f)
'(shuffled-cache
  0
  sat-1
  2
  5
  34
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  35
  18
  6
  11
  5
  2
  7
  1
  5/14
  14
  #f
  47/9
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  sat-1
  2
  5
  34
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))\""
  61
  33
  11
  17
  10
  5
  15
  1
  8/17
  23
  #f
  175/33
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  sat-1
  2
  34
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4)\n    (->\n     (app\n      and\n      (app or x1 (app not x2) (app not x3))\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  #f)
'(shuffled-cache
  0
  sat-1
  2
  34
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  #f)
'(shuffled-cache
  0
  sat-1
  2
  34
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  #f)
'(shuffled-cache
  0
  sat-1
  2
  34
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))\""
  #f)
'(shuffled-cache
  0
  sat-1
  2
  34
  app
  "\"'(eval\n  (λ (n2) (-> (app try (λ (n3) ...)) <-))\n  (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  #f)
'(shuffled-cache
  0
  sat-1
  2
  5
  34
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  28
  12
  6
  10
  3
  2
  5
  1
  3/10
  10
  #f
  31/6
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-1
  2
  5
  34
  ref-or-constructor
  "\"'(eval\n  (app (-> p <-) n1 n2 n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  37
  15
  8
  14
  5
  4
  9
  1
  5/13
  13
  #t
  77/15
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  2
  34
  app
  "\"'(eval\n  (λ (n3) (-> (app try (λ (n4) ...)) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  #f)
'(shuffled-cache
  0
  sat-1
  2
  5
  34
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))\""
  37
  18
  6
  13
  5
  2
  7
  1
  5/14
  14
  #f
  47/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-1
  2
  5
  34
  app
  "\"'(eval (app or (app not x2) (-> (app not x3) <-)) (env ((□? (x1 x2 x3 x4)))))\""
  74
  43
  15
  16
  13
  6
  19
  1
  7/19
  32
  #f
  226/43
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  sat-1
  2
  5
  34
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 (-> n3 <-) n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  81
  45
  16
  20
  13
  6
  19
  1
  7/19
  33
  #f
  79/15
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-1
  2
  5
  34
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  91
  50
  21
  20
  13
  7
  20
  1
  7/22
  37
  #f
  271/50
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-1
  2
  5
  34
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  92
  51
  21
  20
  13
  7
  20
  1
  69/220
  38
  #t
  92/17
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  2
  34
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env ((□? (x1 x2 x3 x4)))))\""
  #f)
'(shuffled-cache
  0
  sat-1
  2
  5
  34
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  30
  12
  6
  12
  3
  2
  5
  1
  3/10
  10
  #f
  31/6
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-1
  2
  5
  34
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  31
  13
  6
  12
  3
  2
  5
  1
  3/10
  11
  #t
  67/13
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  2
  34
  letrec*
  "\"'(eval ((top) letrec* (phi ... sat-solve-4) ...) (env ()))\""
  #f)
'(shuffled-cache
  0
  sat-1
  2
  5
  34
  app
  "\"'(eval (app or (-> (app not x2) <-) (app not x3)) (env ((□? (x1 x2 x3 x4)))))\""
  37
  18
  6
  13
  5
  2
  7
  1
  5/14
  14
  #f
  47/9
  ((1/2 1/2 0) (1 1 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-1
  2
  5
  34
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 (-> n4 <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  61
  33
  10
  18
  9
  2
  11
  1
  3/8
  24
  #f
  58/11
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  sat-1
  2
  34
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  #f)
'(shuffled-cache
  0
  sat-1
  2
  5
  34
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  15
  5
  5
  5
  0
  1
  1
  1
  0
  4
  #f
  28/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  2
  34
  app
  "\"'(eval (letrec* (phi ... sat-solve-4) (-> (app sat-solve-4 phi) <-)) (env ()))\""
  #f)
'(shuffled-cache
  0
  sat-1
  2
  5
  34
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  28
  12
  6
  10
  3
  2
  5
  1
  3/10
  10
  #f
  31/6
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-1
  2
  34
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  #f)
'(shuffled-cache
  0
  sat-1
  2
  5
  34
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  30
  12
  6
  12
  3
  2
  5
  1
  3/10
  10
  #f
  31/6
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-1
  2
  5
  34
  ref-or-constructor
  "\"'(eval\n  (app p (-> n1 <-) n2 n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  68
  30
  16
  22
  18
  11
  29
  1
  23/36
  25
  #f
  31/6
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  sat-1
  2
  5
  34
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  69
  31
  16
  22
  18
  11
  29
  1
  23/39
  25
  #f
  161/31
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  2
  34
  app
  "\"'(eval\n  (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  #f)
'(shuffled-cache
  0
  sat-1
  2
  5
  34
  ref-or-constructor
  "\"'(eval\n  (app p n1 (-> n2 <-) n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  17
  7
  3
  7
  1
  0
  1
  1
  1/7
  6
  #f
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  2
  5
  34
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  65
  40
  11
  14
  11
  2
  13
  1
  13/34
  25
  #f
  43/8
  ((4 4 0) (4 4 0) (4 4 0)))
'(shuffled-cache
  1
  sat-1
  2
  34
  app
  "\"'(eval\n  (λ (n3) (-> (app try (λ (n4) ...)) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  #f)
'(shuffled-cache
  1
  sat-1
  2
  5
  34
  app
  "\"'(eval (app or (-> (app not x2) <-) (app not x3)) (env ((□? (x1 x2 x3 x4)))))\""
  37
  18
  6
  13
  5
  2
  7
  1
  5/14
  14
  #f
  47/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-1
  2
  5
  34
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  38
  19
  6
  13
  5
  2
  7
  1
  1/3
  14
  #f
  100/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  2
  34
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4)\n    (->\n     (app\n      and\n      (app or x1 (app not x2) (app not x3))\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  #f)
'(shuffled-cache
  1
  sat-1
  2
  34
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  #f)
'(shuffled-cache
  1
  sat-1
  2
  5
  34
  ref-or-constructor
  "\"'(eval\n  (app p (-> n1 <-) n2 n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  17
  7
  3
  7
  1
  0
  1
  1
  1/7
  6
  #f
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  2
  5
  34
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 (-> n4 <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  37
  15
  8
  14
  1
  0
  1
  1
  1/9
  13
  #f
  77/15
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  sat-1
  2
  5
  34
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  38
  16
  8
  14
  1
  0
  1
  1
  1/9
  14
  #t
  41/8
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  2
  5
  34
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  106
  51
  24
  31
  18
  11
  29
  1
  64/147
  43
  #f
  263/51
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  1
  sat-1
  2
  34
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env ((□? (x1 x2 x3 x4)))))\""
  #f)
'(shuffled-cache
  1
  sat-1
  2
  5
  34
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  15
  5
  5
  5
  0
  1
  1
  1
  0
  4
  #f
  28/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  2
  5
  34
  ref-or-constructor
  "\"'(eval\n  (app p n1 (-> n2 <-) n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  34
  16
  8
  10
  1
  1
  2
  1
  1/12
  14
  #f
  23/4
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-1
  2
  5
  34
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  83
  40
  21
  22
  12
  7
  19
  1
  37/102
  34
  #f
  6
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  1
  sat-1
  2
  5
  34
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  89
  45
  21
  23
  13
  7
  20
  1
  121/357
  39
  #t
  53/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  2
  5
  34
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  95
  51
  21
  23
  13
  7
  20
  1
  121/378
  41
  #f
  299/51
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  sat-1
  2
  5
  34
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  101
  56
  21
  24
  15
  7
  22
  1
  163/483
  44
  #f
  163/28
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  2
  5
  34
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))\""
  104
  59
  21
  24
  15
  7
  22
  1
  163/546
  45
  #f
  343/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  2
  5
  34
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))\""
  112
  67
  21
  24
  15
  7
  22
  1
  163/672
  48
  #f
  388/67
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  2
  5
  34
  app
  "\"'(eval (app or (app not x2) (-> (app not x3) <-)) (env ((□? (x1 x2 x3 x4)))))\""
  113
  68
  21
  24
  15
  7
  22
  1
  163/672
  48
  #f
  197/34
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  2
  34
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  #f)
'(shuffled-cache
  1
  sat-1
  2
  34
  app
  "\"'(eval\n  (λ (n2) (-> (app try (λ (n3) ...)) <-))\n  (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  #f)
'(shuffled-cache
  1
  sat-1
  2
  34
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  #f)
'(shuffled-cache
  1
  sat-1
  2
  5
  34
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  15
  5
  5
  5
  0
  1
  1
  1
  0
  4
  #f
  28/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  2
  5
  34
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 (-> n3 <-) n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  30
  14
  8
  8
  1
  1
  2
  1
  1/12
  12
  #f
  39/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-1
  2
  34
  app
  "\"'(eval (letrec* (phi ... sat-solve-4) (-> (app sat-solve-4 phi) <-)) (env ()))\""
  #f)
'(shuffled-cache
  1
  sat-1
  2
  5
  34
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  28
  12
  6
  10
  3
  2
  5
  1
  3/10
  10
  #f
  31/6
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-1
  2
  5
  34
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))\""
  54
  27
  11
  16
  8
  5
  13
  1
  6/13
  19
  #f
  143/27
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  sat-1
  2
  34
  letrec*
  "\"'(eval ((top) letrec* (phi ... sat-solve-4) ...) (env ()))\""
  #f)
'(shuffled-cache
  1
  sat-1
  2
  34
  app
  "\"'(eval\n  (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  #f)
'(shuffled-cache
  1
  sat-1
  2
  5
  34
  ref-or-constructor
  "\"'(eval\n  (app (-> p <-) n1 n2 n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  10
  3
  2
  5
  2
  2
  4
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  2
  34
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))\""
  #f)
'(shuffled-cache
  1
  sat-1
  2
  34
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  #f)
'(shuffled-cache
  1
  sat-1
  2
  34
  app
  "\"'(eval\n  (λ (n4) (-> (app p n1 n2 n3 n4) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  #f)
