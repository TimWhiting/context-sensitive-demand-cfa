'(clean-cache
  sat-1
  2
  5
  58
  letrec*
  "'(eval ((top) letrec* (phi ... sat-solve-4) ...) (env ()))"
  #f
  #f)
'(clean-cache
  sat-1
  2
  5
  58
  lambda
  "'(eval\n  (letrec* (... try (sat-solve-4 (-> (λ (p) ...) <-)) () ...) ...)\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  5
  58
  app
  "'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))"
  #f
  #f)
'(clean-cache
  sat-1
  2
  5
  58
  lambda
  "'(eval (app try (-> (λ (n1) ...) <-)) (env ((□? (p)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  5
  58
  app
  "'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))"
  #f
  #f)
'(clean-cache
  sat-1
  2
  5
  58
  lambda
  "'(eval (app try (-> (λ (n2) ...) <-)) (env ((□? (n1)) (□? (p)))))"
  #t
  3
  1
  0
  2
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  5
  58
  app
  "'(eval\n  (λ (n2) (-> (app try (λ (n3) ...)) <-))\n  (env ((□? (n2)) (□? (n1)) (□? (p)))))"
  #f
  #f)
'(clean-cache
  sat-1
  2
  5
  58
  lambda
  "'(eval (app try (-> (λ (n3) ...) <-)) (env ((□? (n2)) (□? (n1)) (□? (p)))))"
  #t
  4
  1
  0
  3
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  5
  58
  app
  "'(eval\n  (λ (n3) (-> (app try (λ (n4) ...)) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))"
  #f
  #f)
'(clean-cache
  sat-1
  2
  5
  58
  lambda
  "'(eval\n  (app try (-> (λ (n4) ...) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))"
  #t
  5
  1
  0
  4
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  5
  58
  app
  "'(eval\n  (λ (n4) (-> (app p n1 n2 n3 n4) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))"
  #f
  #f)
'(clean-cache
  sat-1
  2
  5
  58
  ref-or-constructor
  "'(eval\n  (app p n1 n2 n3 (-> n4 <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))"
  #f
  17
  7
  3
  7
  1
  0
  1
  1
  1/7
  6
  #f
  8/7
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  5
  58
  ref-or-constructor
  "'(eval\n  (app p n1 n2 (-> n3 <-) n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))"
  #f
  17
  7
  3
  7
  1
  0
  1
  1
  1/7
  6
  #f
  8/7
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  5
  58
  ref-or-constructor
  "'(eval\n  (app p n1 (-> n2 <-) n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))"
  #f
  17
  7
  3
  7
  1
  0
  1
  1
  1/7
  6
  #f
  8/7
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  5
  58
  ref-or-constructor
  "'(eval\n  (app p (-> n1 <-) n2 n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))"
  #f
  17
  7
  3
  7
  1
  0
  1
  1
  1/7
  6
  #f
  8/7
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  5
  58
  ref-or-constructor
  "'(eval\n  (app (-> p <-) n1 n2 n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))"
  #f
  10
  3
  2
  5
  2
  2
  4
  1
  2/3
  3
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  5
  58
  ref-or-constructor
  "'(eval\n  (app (-> try <-) (λ (n4) ...))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))"
  #t
  6
  2
  0
  4
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  5
  58
  ref-or-constructor
  "'(eval (app (-> try <-) (λ (n3) ...)) (env ((□? (n2)) (□? (n1)) (□? (p)))))"
  #t
  5
  2
  0
  3
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  5
  58
  ref-or-constructor
  "'(eval (app (-> try <-) (λ (n2) ...)) (env ((□? (n1)) (□? (p)))))"
  #t
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  5
  58
  ref-or-constructor
  "'(eval (app (-> try <-) (λ (n1) ...)) (env ((□? (p)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  5
  58
  lambda
  "'(eval\n  (letrec* (... phi (try (-> (λ (f) ...) <-)) sat-solve-4 ...) ...)\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  5
  58
  app
  "'(eval\n  (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))"
  #f
  #f)
'(clean-cache
  sat-1
  2
  5
  58
  app
  "'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))"
  #f
  #f)
'(clean-cache
  sat-1
  2
  5
  58
  app
  "'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  5
  58
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (f)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  5
  58
  ref-or-constructor
  "'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))"
  #f
  15
  5
  5
  5
  0
  1
  1
  1
  0
  4
  #f
  8/5
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  5
  58
  app
  "'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))"
  #f
  #f)
'(clean-cache
  sat-1
  2
  5
  58
  app
  "'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  5
  58
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (f)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  5
  58
  ref-or-constructor
  "'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))"
  #f
  15
  5
  5
  5
  0
  1
  1
  1
  0
  4
  #f
  8/5
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  5
  58
  ref-or-constructor
  "'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env ((□? (f)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  5
  58
  lambda
  "'(eval\n  (letrec* (... () (phi (-> (λ (x1 x2 x3 x4) ...) <-)) try ...) ...)\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  5
  58
  app
  "'(eval\n  (λ (x1 x2 x3 x4)\n    (->\n     (app\n      and\n      (app or x1 (app not x2) (app not x3))\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env ((□? (x1 x2 x3 x4)))))"
  #f
  #f)
'(clean-cache
  sat-1
  2
  5
  58
  app
  "'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env ((□? (x1 x2 x3 x4)))))"
  #f
  65
  40
  11
  14
  11
  2
  13
  1
  13/34
  25
  #f
  11/8
  ((4 4 0)))
'(clean-cache
  sat-1
  2
  5
  58
  ref-or-constructor
  "'(eval (app or x4 (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))"
  #f
  30
  12
  6
  12
  3
  2
  5
  1
  3/10
  10
  #f
  7/6
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  5
  58
  ref-or-constructor
  "'(eval (app or (-> x4 <-) x2) (env ((□? (x1 x2 x3 x4)))))"
  #f
  27
  12
  6
  9
  3
  2
  5
  1
  3/10
  10
  #f
  7/6
  ((1 1 0)))
'(clean-cache
  sat-1
  2
  5
  58
  ref-or-constructor
  "'(eval (app (-> or <-) x4 x2) (env ((□? (x1 x2 x3 x4)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  5
  58
  app
  "'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))"
  #f
  79
  48
  15
  16
  13
  6
  19
  1
  1/3
  34
  #f
  31/24
  ((3 3 0)))
'(clean-cache
  sat-1
  2
  5
  58
  app
  "'(eval (app or (app not x2) (-> (app not x3) <-)) (env ((□? (x1 x2 x3 x4)))))"
  #f
  35
  18
  6
  11
  5
  2
  7
  1
  5/14
  14
  #f
  11/9
  ((1 1 0)))
'(clean-cache
  sat-1
  2
  5
  58
  ref-or-constructor
  "'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4)))))"
  #f
  28
  12
  6
  10
  3
  2
  5
  1
  3/10
  10
  #f
  7/6
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  5
  58
  ref-or-constructor
  "'(eval (app (-> not <-) x3) (env ((□? (x1 x2 x3 x4)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  5
  58
  app
  "'(eval (app or (-> (app not x2) <-) (app not x3)) (env ((□? (x1 x2 x3 x4)))))"
  #f
  37
  18
  6
  13
  5
  2
  7
  1
  5/14
  14
  #f
  11/9
  ((1 1 0)))
'(clean-cache
  sat-1
  2
  5
  58
  ref-or-constructor
  "'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))"
  #f
  30
  12
  6
  12
  3
  2
  5
  1
  3/10
  10
  #f
  7/6
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  5
  58
  ref-or-constructor
  "'(eval (app (-> not <-) x2) (env ((□? (x1 x2 x3 x4)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  5
  58
  ref-or-constructor
  "'(eval (app (-> or <-) (app not x2) (app not x3)) (env ((□? (x1 x2 x3 x4)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  5
  58
  app
  "'(eval\n  (app\n   and\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))"
  #f
  #f)
'(clean-cache
  sat-1
  2
  5
  58
  app
  "'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env ((□? (x1 x2 x3 x4)))))"
  #f
  35
  18
  6
  11
  5
  2
  7
  1
  5/14
  14
  #f
  11/9
  ((1 1 0)))
'(clean-cache
  sat-1
  2
  5
  58
  ref-or-constructor
  "'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4)))))"
  #f
  28
  12
  6
  10
  3
  2
  5
  1
  3/10
  10
  #f
  7/6
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  5
  58
  ref-or-constructor
  "'(eval (app (-> not <-) x3) (env ((□? (x1 x2 x3 x4)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  5
  58
  app
  "'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))"
  #f
  37
  18
  6
  13
  5
  2
  7
  1
  5/14
  14
  #f
  11/9
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  5
  58
  ref-or-constructor
  "'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))"
  #f
  30
  12
  6
  12
  3
  2
  5
  1
  3/10
  10
  #f
  7/6
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  5
  58
  ref-or-constructor
  "'(eval (app (-> not <-) x2) (env ((□? (x1 x2 x3 x4)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  5
  58
  ref-or-constructor
  "'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))"
  #f
  31
  12
  6
  13
  8
  5
  13
  1
  4/5
  10
  #f
  7/6
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  5
  58
  ref-or-constructor
  "'(eval\n  (app (-> or <-) x1 (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  5
  58
  ref-or-constructor
  "'(eval\n  (app\n   (-> and <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  5
  58
  app
  "'(eval (letrec* (phi ... sat-solve-4) (-> (app sat-solve-4 phi) <-)) (env ()))"
  #f
  #f)
'(clean-cache
  sat-1
  2
  5
  58
  ref-or-constructor
  "'(eval (app sat-solve-4 (-> phi <-)) (env ()))"
  #t
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  sat-1
  2
  5
  58
  ref-or-constructor
  "'(eval (app (-> sat-solve-4 <-) phi) (env ()))"
  #t
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
