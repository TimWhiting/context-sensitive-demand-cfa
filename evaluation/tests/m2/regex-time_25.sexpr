'(clean-cache
  regex
  2
  25
  255
  lettypes
  "\"'(eval ((top) lettypes (cons ... nil) ...) (env ()))\""
  29
  18
  7
  4
  18
  5
  23
  1
  1
  7
  #f
  79/18
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  regex
  2
  25
  255
  letrec*
  "\"'(eval (lettypes cons ... nil (letrec* (car ... check-expect) ...)) (env ()))\""
  28
  17
  7
  4
  17
  5
  22
  1
  1
  7
  #f
  75/17
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  regex
  2
  25
  255
  app
  "\"'(eval\n  (λ (check expect) (-> (app equal? check expect) <-))\n  (env ((□? (check expect)))))\""
  26
  15
  7
  4
  12
  5
  17
  1
  11/13
  6
  #f
  22/5
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval (app equal? check (-> expect <-)) (env ((□? (check expect)))))\""
  6
  3
  2
  1
  2
  2
  4
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval (app equal? (-> check <-) expect) (env ((□? (check expect)))))\""
  22
  11
  7
  4
  10
  5
  15
  1
  10/11
  4
  #f
  48/11
  ((1 1 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  regex
  2
  25
  255
  match
  "\"'(eval\n  (λ (pattern data) (-> (match (app null? data) ...) <-))\n  (env ((□? (pattern data)))))\""
  142
  97
  27
  18
  85
  6
  91
  1
  51/56
  62
  #f
  470/97
  ((31/2 16 0) (15 31/2 0) (31/2 31/2 0)))
'(clean-cache
  regex
  2
  25
  255
  app
  "\"'(eval\n  (match\n   (app null? data)\n   (#f)\n   (_ (-> (app regex-empty? (app regex-empty pattern)) <-)))\n  (env ((□? (pattern data)))))\""
  42
  16
  14
  12
  6
  2
  8
  1
  9/26
  7
  #f
  71/16
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  regex
  2
  25
  255
  app
  "\"'(eval\n  (app regex-empty? (-> (app regex-empty pattern) <-))\n  (env ((□? (pattern data)))))\""
  36
  11
  14
  11
  6
  2
  8
  1
  6/11
  5
  #f
  49/11
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval (app regex-empty (-> pattern <-)) (env ((□? (pattern data)))))\""
  50
  23
  17
  10
  22
  4
  26
  1
  14/15
  11
  #t
  103/23
  ((5/2 5/2 0) (3 3 0) (5/2 5/2 0)))
'(clean-cache
  regex
  2
  25
  255
  app
  "\"'(eval\n  (match\n   (app null? data)\n   ((#f)\n    (->\n     (app\n      regex-match\n      (app regex-derivative pattern (app car data))\n      (app cdr data))\n     <-))\n   _)\n  (env ((□? (pattern data)))))\""
  19
  10
  5
  4
  5
  3
  8
  1
  1/2
  4
  #f
  22/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  regex
  2
  25
  255
  app
  "\"'(eval\n  (app\n   regex-match\n   (app regex-derivative pattern (app car data))\n   (-> (app cdr data) <-))\n  (env ((□? (pattern data)))))\""
  50
  32
  11
  7
  26
  3
  29
  1
  8/9
  24
  #f
  83/16
  ((7 15/2 0) (7 7 0) (8 8 0)))
'(clean-cache
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval (app cdr (-> data <-)) (env ((□? (pattern data)))))\""
  42
  25
  11
  6
  24
  3
  27
  1
  59/60
  23
  #f
  128/25
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(clean-cache
  regex
  2
  25
  255
  app
  "\"'(eval\n  (app\n   regex-match\n   (-> (app regex-derivative pattern (app car data)) <-)\n   (app cdr data))\n  (env ((□? (pattern data)))))\""
  37
  12
  14
  11
  6
  2
  8
  1
  1/2
  5
  #f
  53/12
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  regex
  2
  25
  255
  app
  "\"'(eval\n  (app regex-derivative pattern (-> (app car data) <-))\n  (env ((□? (pattern data)))))\""
  76
  45
  20
  11
  39
  4
  43
  1
  235/264
  36
  #f
  232/45
  ((19/2 19/2 0) (10 10 0) (10 21/2 0)))
'(clean-cache
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval (app car (-> data <-)) (env ((□? (pattern data)))))\""
  42
  25
  11
  6
  24
  3
  27
  1
  15/16
  23
  #f
  128/25
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(clean-cache
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval\n  (app regex-derivative (-> pattern <-) (app car data))\n  (env ((□? (pattern data)))))\""
  50
  23
  17
  10
  22
  4
  26
  1
  14/15
  11
  #t
  103/23
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 3 0)))
'(clean-cache
  regex
  2
  25
  255
  app
  "\"'(eval (match (-> (app null? data) <-) (#f) _) (env ((□? (pattern data)))))\""
  74
  53
  13
  8
  44
  4
  48
  1
  257/300
  44
  #f
  272/53
  ((21/2 11 0) (21/2 11 0) (11 11 0)))
'(clean-cache
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval (app null? (-> data <-)) (env ((□? (pattern data)))))\""
  42
  25
  11
  6
  24
  3
  27
  1
  15/16
  23
  #f
  128/25
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(clean-cache
  regex
  2
  255
  let
  "\"'(eval (λ (re c) (-> (let (_) ...) <-)) (env ((□? (re c)))))\""
  #f)
'(clean-cache
  regex
  2
  25
  255
  app
  "\"'(eval\n  (let (... () (_ (-> (app debug-trace) <-)) () ...) ...)\n  (env ((□? (re c)))))\""
  7
  4
  0
  3
  1
  0
  1
  1
  1/4
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  255
  match
  "\"'(eval (let (_) (-> (match (app regex-empty? re) ...) <-)) (env ((□? (re c)))))\""
  #f)
'(clean-cache
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval\n  (match (app regex-empty? re) (#f) (_ (-> regex-NULL <-)))\n  (env ((□? (re c)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  255
  match
  "\"'(eval\n  (match\n   (app regex-empty? re)\n   ((#f) (-> (match (app regex-null? re) ...) <-))\n   _)\n  (env ((□? (re c)))))\""
  #f)
'(clean-cache
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval\n  (match (app regex-null? re) (#f) (_ (-> regex-NULL <-)))\n  (env ((□? (re c)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  255
  match
  "\"'(eval\n  (match (app regex-null? re) ((#f) (-> (match (app eq? c re) ...) <-)) _)\n  (env ((□? (re c)))))\""
  #f)
'(clean-cache
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval (match (app eq? c re) (#f) (_ (-> regex-BLANK <-))) (env ((□? (re c)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  255
  match
  "\"'(eval\n  (match (app eq? c re) ((#f) (-> (match (app regex-atom? re) ...) <-)) _)\n  (env ((□? (re c)))))\""
  #f)
'(clean-cache
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval\n  (match (app regex-atom? re) (#f) (_ (-> regex-NULL <-)))\n  (env ((□? (re c)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  25
  255
  match
  "\"'(eval\n  (match\n   (app regex-atom? re)\n   ((#f) (-> (match (app match-seq re (λ (pat1 pat2) ...)) ...) <-))\n   _)\n  (env ((□? (re c)))))\""
  32
  17
  6
  9
  10
  2
  12
  1
  10/17
  8
  #f
  76/17
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval\n  (match (app match-seq re (λ (pat1 pat2) ...)) (#f) (c-x (-> c-x <-)))\n  (env ((□? (re c)))))\""
  32
  17
  6
  9
  10
  2
  12
  1
  10/17
  8
  #f
  76/17
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  regex
  2
  25
  255
  match
  "\"'(eval\n  (match\n   (app match-seq re (λ (pat1 pat2) ...))\n   ((#f) (-> (match (app match-alt re (λ (pat1 pat2) ...)) ...) <-))\n   c-x)\n  (env ((□? (re c)))))\""
  32
  17
  6
  9
  10
  2
  12
  1
  10/17
  8
  #f
  76/17
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval\n  (match (app match-alt re (λ (pat1 pat2) ...)) (#f) (c-x (-> c-x <-)))\n  (env ((□? (re c)))))\""
  32
  17
  6
  9
  10
  2
  12
  1
  10/17
  8
  #f
  76/17
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  regex
  2
  25
  255
  match
  "\"'(eval\n  (match\n   (app match-alt re (λ (pat1 pat2) ...))\n   ((#f) (-> (match (app match-rep re (λ (pat) ...)) ...) <-))\n   c-x)\n  (env ((□? (re c)))))\""
  34
  17
  7
  10
  10
  2
  12
  1
  10/17
  8
  #f
  76/17
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval\n  (match (app match-rep re (λ (pat) ...)) (#f) (c-x (-> c-x <-)))\n  (env ((□? (re c)))))\""
  34
  17
  7
  10
  10
  2
  12
  1
  10/17
  8
  #f
  76/17
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval\n  (match (app match-rep re (λ (pat) ...)) ((#f) (-> regex-NULL <-)) c-x)\n  (env ((□? (re c)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  25
  255
  app
  "\"'(eval\n  (match (-> (app match-rep re (λ (pat) ...)) <-) (#f) c-x)\n  (env ((□? (re c)))))\""
  33
  16
  7
  10
  10
  2
  12
  1
  5/8
  8
  #f
  9/2
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  regex
  2
  25
  255
  app
  "\"'(eval\n  (λ (pat) (-> (app seq (app regex-derivative pat c) (app rep pat)) <-))\n  (env ((□? (pat)) (□? (re c)))))\""
  35
  11
  13
  11
  6
  2
  8
  1
  6/11
  5
  #f
  49/11
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  regex
  2
  25
  255
  app
  "\"'(eval\n  (app seq (app regex-derivative pat c) (-> (app rep pat) <-))\n  (env ((□? (pat)) (□? (re c)))))\""
  30
  11
  10
  9
  6
  2
  8
  1
  6/11
  5
  #f
  49/11
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval (app rep (-> pat <-)) (env ((□? (pat)) (□? (re c)))))\""
  57
  17
  23
  17
  13
  3
  16
  1
  13/17
  8
  #f
  76/17
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  regex
  2
  25
  255
  app
  "\"'(eval\n  (app seq (-> (app regex-derivative pat c) <-) (app rep pat))\n  (env ((□? (pat)) (□? (re c)))))\""
  37
  12
  14
  11
  6
  2
  8
  1
  1/2
  5
  #f
  53/12
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 2 0)))
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-derivative pat (-> c <-)) (env ((□? (pat)) (□? (re c)))))\""
  #f)
'(clean-cache
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval (app regex-derivative (-> pat <-) c) (env ((□? (pat)) (□? (re c)))))\""
  57
  17
  23
  17
  13
  3
  16
  1
  13/17
  8
  #f
  76/17
  ((2 5/2 0) (5/2 5/2 0) (2 5/2 0)))
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app match-rep (-> re <-) (λ (pat) ...)) (env ((□? (re c)))))\""
  #f)
'(clean-cache
  regex
  2
  25
  255
  app
  "\"'(eval\n  (match (-> (app match-alt re (λ (pat1 pat2) ...)) <-) (#f) c-x)\n  (env ((□? (re c)))))\""
  31
  16
  6
  9
  10
  2
  12
  1
  5/8
  8
  #f
  9/2
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  regex
  2
  25
  255
  app
  "\"'(eval\n  (λ (pat1 pat2)\n    (->\n     (app alt (app regex-derivative pat1 c) (app regex-derivative pat2 c))\n     <-))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  34
  11
  12
  11
  6
  2
  8
  1
  6/11
  5
  #f
  49/11
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  regex
  2
  25
  255
  app
  "\"'(eval\n  (app alt (app regex-derivative pat1 c) (-> (app regex-derivative pat2 c) <-))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  37
  12
  14
  11
  6
  2
  8
  1
  1/2
  5
  #f
  53/12
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 2 0)))
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval\n  (app regex-derivative pat2 (-> c <-))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  #f)
'(clean-cache
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval\n  (app regex-derivative (-> pat2 <-) c)\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  59
  21
  22
  16
  17
  3
  20
  1
  15/19
  9
  #f
  31/7
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  regex
  2
  25
  255
  app
  "\"'(eval\n  (app alt (-> (app regex-derivative pat1 c) <-) (app regex-derivative pat2 c))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  37
  12
  14
  11
  6
  2
  8
  1
  1/2
  5
  #f
  53/12
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval\n  (app regex-derivative pat1 (-> c <-))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  #f)
'(clean-cache
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval\n  (app regex-derivative (-> pat1 <-) c)\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  57
  17
  23
  17
  13
  3
  16
  1
  13/17
  8
  #f
  76/17
  ((2 2 0) (5/2 5/2 0) (2 5/2 0)))
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app match-alt (-> re <-) (λ (pat1 pat2) ...)) (env ((□? (re c)))))\""
  #f)
'(clean-cache
  regex
  2
  25
  255
  app
  "\"'(eval\n  (match (-> (app match-seq re (λ (pat1 pat2) ...)) <-) (#f) c-x)\n  (env ((□? (re c)))))\""
  31
  16
  6
  9
  10
  2
  12
  1
  5/8
  8
  #f
  9/2
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  regex
  2
  25
  255
  app
  "\"'(eval\n  (λ (pat1 pat2)\n    (->\n     (app\n      alt\n      (app seq (app regex-derivative pat1 c) pat2)\n      (app seq (app regex-empty pat1) (app regex-derivative pat2 c)))\n     <-))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  34
  11
  12
  11
  6
  2
  8
  1
  6/11
  5
  #f
  49/11
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  regex
  2
  25
  255
  app
  "\"'(eval\n  (app\n   alt\n   (app seq (app regex-derivative pat1 c) pat2)\n   (-> (app seq (app regex-empty pat1) (app regex-derivative pat2 c)) <-))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  35
  11
  13
  11
  6
  2
  8
  1
  6/11
  5
  #f
  49/11
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  regex
  2
  25
  255
  app
  "\"'(eval\n  (app seq (app regex-empty pat1) (-> (app regex-derivative pat2 c) <-))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  37
  12
  14
  11
  6
  2
  8
  1
  1/2
  5
  #f
  53/12
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval\n  (app regex-derivative pat2 (-> c <-))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  #f)
'(clean-cache
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval\n  (app regex-derivative (-> pat2 <-) c)\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  59
  21
  22
  16
  17
  3
  20
  1
  15/19
  9
  #f
  31/7
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  regex
  2
  25
  255
  app
  "\"'(eval\n  (app seq (-> (app regex-empty pat1) <-) (app regex-derivative pat2 c))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  36
  11
  14
  11
  6
  2
  8
  1
  6/11
  5
  #f
  49/11
  ((3/2 3/2 0) (2 2 0) (3/2 3/2 0)))
'(clean-cache
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval (app regex-empty (-> pat1 <-)) (env ((□? (pat1 pat2)) (□? (re c)))))\""
  57
  17
  23
  17
  13
  3
  16
  1
  13/17
  8
  #f
  76/17
  ((2 5/2 0) (5/2 5/2 0) (2 5/2 0)))
'(clean-cache
  regex
  2
  25
  255
  app
  "\"'(eval\n  (app\n   alt\n   (-> (app seq (app regex-derivative pat1 c) pat2) <-)\n   (app seq (app regex-empty pat1) (app regex-derivative pat2 c)))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  35
  11
  13
  11
  6
  2
  8
  1
  6/11
  5
  #f
  49/11
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval\n  (app seq (app regex-derivative pat1 c) (-> pat2 <-))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  59
  21
  22
  16
  17
  3
  20
  1
  15/19
  9
  #f
  31/7
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  regex
  2
  25
  255
  app
  "\"'(eval\n  (app seq (-> (app regex-derivative pat1 c) <-) pat2)\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  37
  12
  14
  11
  6
  2
  8
  1
  1/2
  5
  #f
  53/12
  ((3/2 2 0) (3/2 2 0) (3/2 3/2 0)))
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval\n  (app regex-derivative pat1 (-> c <-))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  #f)
'(clean-cache
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval\n  (app regex-derivative (-> pat1 <-) c)\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  57
  17
  23
  17
  13
  3
  16
  1
  13/17
  8
  #f
  76/17
  ((5/2 3 0) (2 2 0) (5/2 5/2 0)))
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app match-seq (-> re <-) (λ (pat1 pat2) ...)) (env ((□? (re c)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval (match (-> (app regex-atom? re) <-) (#f) _) (env ((□? (re c)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-atom? (-> re <-)) (env ((□? (re c)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval (match (-> (app eq? c re) <-) (#f) _) (env ((□? (re c)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app eq? c (-> re <-)) (env ((□? (re c)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app eq? (-> c <-) re) (env ((□? (re c)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval (match (-> (app regex-null? re) <-) (#f) _) (env ((□? (re c)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-null? (-> re <-)) (env ((□? (re c)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval (match (-> (app regex-empty? re) <-) (#f) _) (env ((□? (re c)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-empty? (-> re <-)) (env ((□? (re c)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  match
  "\"'(eval (λ (re) (-> (match (app regex-empty? re) ...) <-)) (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  25
  255
  app
  "\"'(eval\n  (match (app regex-empty? re) (#f) (_ (-> (app #t) <-)))\n  (env ((□? (re)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  255
  match
  "\"'(eval\n  (match\n   (app regex-empty? re)\n   ((#f) (-> (match (app regex-null? re) ...) <-))\n   _)\n  (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  25
  255
  app
  "\"'(eval\n  (match (app regex-null? re) (#f) (_ (-> (app #f) <-)))\n  (env ((□? (re)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  255
  match
  "\"'(eval\n  (match\n   (app regex-null? re)\n   ((#f) (-> (match (app regex-atom? re) ...) <-))\n   _)\n  (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  25
  255
  app
  "\"'(eval\n  (match (app regex-atom? re) (#f) (_ (-> (app #f) <-)))\n  (env ((□? (re)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  25
  255
  match
  "\"'(eval\n  (match\n   (app regex-atom? re)\n   ((#f) (-> (match (app match-seq re (λ (pat1 pat2) ...)) ...) <-))\n   _)\n  (env ((□? (re)))))\""
  32
  17
  6
  9
  10
  2
  12
  1
  10/17
  8
  #f
  76/17
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval\n  (match (app match-seq re (λ (pat1 pat2) ...)) (#f) (c-x (-> c-x <-)))\n  (env ((□? (re)))))\""
  32
  17
  6
  9
  10
  2
  12
  1
  10/17
  8
  #f
  76/17
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  regex
  2
  25
  255
  match
  "\"'(eval\n  (match\n   (app match-seq re (λ (pat1 pat2) ...))\n   ((#f) (-> (match (app match-alt re (λ (pat1 pat2) ...)) ...) <-))\n   c-x)\n  (env ((□? (re)))))\""
  32
  17
  6
  9
  10
  2
  12
  1
  10/17
  8
  #f
  76/17
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval\n  (match (app match-alt re (λ (pat1 pat2) ...)) (#f) (c-x (-> c-x <-)))\n  (env ((□? (re)))))\""
  32
  17
  6
  9
  10
  2
  12
  1
  10/17
  8
  #f
  76/17
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  regex
  2
  25
  255
  match
  "\"'(eval\n  (match\n   (app match-alt re (λ (pat1 pat2) ...))\n   ((#f) (-> (match (app regex-rep? re) ...) <-))\n   c-x)\n  (env ((□? (re)))))\""
  27
  12
  7
  8
  5
  2
  7
  1
  5/12
  5
  #f
  53/12
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  regex
  2
  25
  255
  app
  "\"'(eval (match (app regex-rep? re) (#f) (_ (-> (app #t) <-))) (env ((□? (re)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  25
  255
  app
  "\"'(eval (match (app regex-rep? re) ((#f) (-> (app #f) <-)) _) (env ((□? (re)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  25
  255
  app
  "\"'(eval (match (-> (app regex-rep? re) <-) (#f) _) (env ((□? (re)))))\""
  26
  11
  7
  8
  5
  2
  7
  1
  5/11
  5
  #f
  49/11
  ((1/2 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-rep? (-> re <-)) (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  25
  255
  app
  "\"'(eval\n  (match (-> (app match-alt re (λ (pat1 pat2) ...)) <-) (#f) c-x)\n  (env ((□? (re)))))\""
  31
  16
  6
  9
  10
  2
  12
  1
  5/8
  8
  #f
  9/2
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  regex
  2
  25
  255
  app
  "\"'(eval\n  (λ (pat1 pat2)\n    (-> (app alt (app regex-empty pat1) (app regex-empty pat2)) <-))\n  (env ((□? (pat1 pat2)) (□? (re)))))\""
  34
  11
  12
  11
  6
  2
  8
  1
  6/11
  5
  #f
  49/11
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  regex
  2
  25
  255
  app
  "\"'(eval\n  (app alt (app regex-empty pat1) (-> (app regex-empty pat2) <-))\n  (env ((□? (pat1 pat2)) (□? (re)))))\""
  36
  11
  14
  11
  6
  2
  8
  1
  6/11
  5
  #f
  49/11
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval (app regex-empty (-> pat2 <-)) (env ((□? (pat1 pat2)) (□? (re)))))\""
  59
  21
  22
  16
  17
  3
  20
  1
  15/19
  9
  #f
  31/7
  ((5/2 5/2 0) (5/2 5/2 0) (2 2 0)))
'(clean-cache
  regex
  2
  25
  255
  app
  "\"'(eval\n  (app alt (-> (app regex-empty pat1) <-) (app regex-empty pat2))\n  (env ((□? (pat1 pat2)) (□? (re)))))\""
  36
  11
  14
  11
  6
  2
  8
  1
  6/11
  5
  #f
  49/11
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval (app regex-empty (-> pat1 <-)) (env ((□? (pat1 pat2)) (□? (re)))))\""
  57
  17
  23
  17
  13
  3
  16
  1
  13/17
  8
  #f
  76/17
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app match-alt (-> re <-) (λ (pat1 pat2) ...)) (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  25
  255
  app
  "\"'(eval\n  (match (-> (app match-seq re (λ (pat1 pat2) ...)) <-) (#f) c-x)\n  (env ((□? (re)))))\""
  31
  16
  6
  9
  10
  2
  12
  1
  5/8
  8
  #f
  9/2
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  regex
  2
  25
  255
  app
  "\"'(eval\n  (λ (pat1 pat2)\n    (-> (app seq (app regex-empty pat1) (app regex-empty pat2)) <-))\n  (env ((□? (pat1 pat2)) (□? (re)))))\""
  35
  11
  13
  11
  6
  2
  8
  1
  6/11
  5
  #f
  49/11
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  regex
  2
  25
  255
  app
  "\"'(eval\n  (app seq (app regex-empty pat1) (-> (app regex-empty pat2) <-))\n  (env ((□? (pat1 pat2)) (□? (re)))))\""
  36
  11
  14
  11
  6
  2
  8
  1
  6/11
  5
  #f
  49/11
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval (app regex-empty (-> pat2 <-)) (env ((□? (pat1 pat2)) (□? (re)))))\""
  59
  21
  22
  16
  17
  3
  20
  1
  15/19
  9
  #f
  31/7
  ((5/2 5/2 0) (5/2 5/2 0) (2 2 0)))
'(clean-cache
  regex
  2
  25
  255
  app
  "\"'(eval\n  (app seq (-> (app regex-empty pat1) <-) (app regex-empty pat2))\n  (env ((□? (pat1 pat2)) (□? (re)))))\""
  36
  11
  14
  11
  6
  2
  8
  1
  6/11
  5
  #f
  49/11
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval (app regex-empty (-> pat1 <-)) (env ((□? (pat1 pat2)) (□? (re)))))\""
  57
  17
  23
  17
  13
  3
  16
  1
  13/17
  8
  #f
  76/17
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app match-seq (-> re <-) (λ (pat1 pat2) ...)) (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval (match (-> (app regex-atom? re) <-) (#f) _) (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-atom? (-> re <-)) (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval (match (-> (app regex-null? re) <-) (#f) _) (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-null? (-> re <-)) (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval (match (-> (app regex-empty? re) <-) (#f) _) (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-empty? (-> re <-)) (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  25
  255
  match
  "\"'(eval (λ (pat) (-> (match (app regex-null? pat) ...) <-)) (env ((□? (pat)))))\""
  94
  37
  33
  24
  21
  5
  26
  1
  2/3
  14
  #f
  162/37
  ((5 5 0) (5 5 0) (5 5 0)))
'(clean-cache
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval\n  (match (app regex-null? pat) (#f) (_ (-> regex-BLANK <-)))\n  (env ((□? (pat)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  25
  255
  match
  "\"'(eval\n  (match\n   (app regex-null? pat)\n   ((#f) (-> (match (app regex-empty? pat) ...) <-))\n   _)\n  (env ((□? (pat)))))\""
  92
  37
  32
  23
  21
  5
  26
  1
  2/3
  14
  #f
  162/37
  ((5 5 0) (5 5 0) (5 5 0)))
'(clean-cache
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval\n  (match (app regex-empty? pat) (#f) (_ (-> regex-BLANK <-)))\n  (env ((□? (pat)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  25
  255
  app
  "\"'(eval\n  (match\n   (app regex-empty? pat)\n   ((#f) (-> (app cons 'rep (app cons pat (app nil))) <-))\n   _)\n  (env ((□? (pat)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  25
  255
  app
  "\"'(eval (app cons 'rep (-> (app cons pat (app nil)) <-)) (env ((□? (pat)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  25
  255
  app
  "\"'(eval (app cons pat (-> (app nil) <-)) (env ((□? (pat)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval (app cons (-> pat <-) (app nil)) (env ((□? (pat)))))\""
  64
  20
  25
  19
  13
  4
  17
  1
  13/18
  8
  #f
  22/5
  ((5/2 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  regex
  2
  25
  255
  app
  "\"'(eval (match (-> (app regex-empty? pat) <-) (#f) _) (env ((□? (pat)))))\""
  89
  34
  32
  23
  20
  5
  25
  1
  49/72
  14
  #f
  75/17
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval (app regex-empty? (-> pat <-)) (env ((□? (pat)))))\""
  64
  20
  25
  19
  13
  4
  17
  1
  13/18
  8
  #f
  22/5
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  regex
  2
  25
  255
  app
  "\"'(eval (match (-> (app regex-null? pat) <-) (#f) _) (env ((□? (pat)))))\""
  91
  34
  33
  24
  20
  5
  25
  1
  49/72
  14
  #f
  75/17
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval (app regex-null? (-> pat <-)) (env ((□? (pat)))))\""
  64
  20
  25
  19
  13
  4
  17
  1
  13/18
  8
  #f
  22/5
  ((5/2 5/2 0) (5/2 3 0) (3 3 0)))
'(clean-cache
  regex
  2
  25
  255
  match
  "\"'(eval\n  (λ (pat1 pat2) (-> (match (app regex-null? pat1) ...) <-))\n  (env ((□? (pat1 pat2)))))\""
  122
  61
  38
  23
  29
  6
  35
  1
  242/595
  22
  #f
  266/61
  ((8 17/2 0) (8 8 0) (8 17/2 0)))
'(clean-cache
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval\n  (match (app regex-null? pat1) (#f) (_ (-> pat2 <-)))\n  (env ((□? (pat1 pat2)))))\""
  91
  34
  38
  19
  17
  6
  23
  1
  14/31
  14
  #f
  75/17
  ((6 6 0) (6 6 0) (13/2 13/2 0)))
'(clean-cache
  regex
  2
  25
  255
  match
  "\"'(eval\n  (match\n   (app regex-null? pat1)\n   ((#f) (-> (match (app regex-null? pat2) ...) <-))\n   _)\n  (env ((□? (pat1 pat2)))))\""
  122
  61
  38
  23
  29
  6
  35
  1
  242/595
  22
  #f
  266/61
  ((17/2 17/2 0) (17/2 17/2 0) (17/2 17/2 0)))
'(clean-cache
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval\n  (match (app regex-null? pat2) (#f) (_ (-> pat1 <-)))\n  (env ((□? (pat1 pat2)))))\""
  91
  34
  38
  19
  17
  6
  23
  1
  14/31
  14
  #f
  75/17
  ((6 6 0) (6 6 0) (6 6 0)))
'(clean-cache
  regex
  2
  25
  255
  app
  "\"'(eval\n  (match\n   (app regex-null? pat2)\n   ((#f) (-> (app cons 'alt (app cons pat1 (app cons pat2 (app nil)))) <-))\n   _)\n  (env ((□? (pat1 pat2)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  25
  255
  app
  "\"'(eval\n  (app cons 'alt (-> (app cons pat1 (app cons pat2 (app nil))) <-))\n  (env ((□? (pat1 pat2)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  25
  255
  app
  "\"'(eval\n  (app cons pat1 (-> (app cons pat2 (app nil)) <-))\n  (env ((□? (pat1 pat2)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  25
  255
  app
  "\"'(eval (app cons pat2 (-> (app nil) <-)) (env ((□? (pat1 pat2)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval (app cons (-> pat2 <-) (app nil)) (env ((□? (pat1 pat2)))))\""
  91
  34
  38
  19
  17
  6
  23
  1
  14/31
  14
  #f
  75/17
  ((6 13/2 0) (13/2 13/2 0) (6 13/2 0)))
'(clean-cache
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval\n  (app cons (-> pat1 <-) (app cons pat2 (app nil)))\n  (env ((□? (pat1 pat2)))))\""
  91
  34
  38
  19
  17
  6
  23
  1
  14/31
  14
  #f
  75/17
  ((6 13/2 0) (11/2 6 0) (6 6 0)))
'(clean-cache
  regex
  2
  25
  255
  app
  "\"'(eval (match (-> (app regex-null? pat2) <-) (#f) _) (env ((□? (pat1 pat2)))))\""
  118
  57
  38
  23
  29
  6
  35
  1
  44/105
  22
  #f
  250/57
  ((15/2 15/2 0) (15/2 8 0) (8 17/2 0)))
'(clean-cache
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval (app regex-null? (-> pat2 <-)) (env ((□? (pat1 pat2)))))\""
  91
  34
  38
  19
  17
  6
  23
  1
  14/31
  14
  #f
  75/17
  ((6 6 0) (6 6 0) (6 6 0)))
'(clean-cache
  regex
  2
  25
  255
  app
  "\"'(eval (match (-> (app regex-null? pat1) <-) (#f) _) (env ((□? (pat1 pat2)))))\""
  118
  57
  38
  23
  29
  6
  35
  1
  44/105
  22
  #f
  250/57
  ((8 8 0) (8 17/2 0) (9 9 0)))
'(clean-cache
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval (app regex-null? (-> pat1 <-)) (env ((□? (pat1 pat2)))))\""
  91
  34
  38
  19
  17
  6
  23
  1
  14/31
  14
  #f
  75/17
  ((6 6 0) (6 13/2 0) (6 6 0)))
'(clean-cache
  regex
  2
  25
  255
  match
  "\"'(eval\n  (λ (pat1 pat2) (-> (match (app regex-null? pat1) ...) <-))\n  (env ((□? (pat1 pat2)))))\""
  135
  77
  34
  24
  36
  5
  41
  1
  533/1395
  26
  #f
  334/77
  ((21/2 11 0) (19/2 19/2 0) (21/2 21/2 0)))
'(clean-cache
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval\n  (match (app regex-null? pat1) (#f) (_ (-> regex-NULL <-)))\n  (env ((□? (pat1 pat2)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  25
  255
  match
  "\"'(eval\n  (match\n   (app regex-null? pat1)\n   ((#f) (-> (match (app regex-null? pat2) ...) <-))\n   _)\n  (env ((□? (pat1 pat2)))))\""
  204
  109
  58
  37
  64
  9
  73
  1
  14915/24486
  39
  #f
  475/109
  ((29/2 29/2 0) (14 14 0) (29/2 29/2 0)))
'(clean-cache
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval\n  (match (app regex-null? pat2) (#f) (_ (-> regex-NULL <-)))\n  (env ((□? (pat1 pat2)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  25
  255
  match
  "\"'(eval\n  (match\n   (app regex-null? pat2)\n   ((#f) (-> (match (app regex-empty? pat1) ...) <-))\n   _)\n  (env ((□? (pat1 pat2)))))\""
  124
  76
  26
  22
  35
  4
  39
  1
  73/243
  25
  #f
  329/76
  ((17/2 9 0) (17/2 9 0) (17/2 17/2 0)))
'(clean-cache
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval\n  (match (app regex-empty? pat1) (#f) (_ (-> pat2 <-)))\n  (env ((□? (pat1 pat2)))))\""
  161
  69
  58
  34
  42
  9
  51
  1
  19/30
  27
  #f
  101/23
  ((21/2 21/2 0) (21/2 11 0) (12 12 0)))
'(clean-cache
  regex
  2
  25
  255
  match
  "\"'(eval\n  (match\n   (app regex-empty? pat1)\n   ((#f) (-> (match (app regex-empty? pat2) ...) <-))\n   _)\n  (env ((□? (pat1 pat2)))))\""
  204
  109
  58
  37
  64
  9
  73
  1
  7474/12243
  39
  #f
  475/109
  ((29/2 29/2 0) (31/2 31/2 0) (29/2 29/2 0)))
'(clean-cache
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval\n  (match (app regex-empty? pat2) (#f) (_ (-> pat1 <-)))\n  (env ((□? (pat1 pat2)))))\""
  85
  42
  26
  17
  19
  4
  23
  1
  1/3
  15
  #f
  61/14
  ((11/2 6 0) (11/2 11/2 0) (11/2 11/2 0)))
'(clean-cache
  regex
  2
  25
  255
  app
  "\"'(eval\n  (match\n   (app regex-empty? pat2)\n   ((#f) (-> (app cons 'seq (app cons pat1 (app cons pat2 (app nil)))) <-))\n   _)\n  (env ((□? (pat1 pat2)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  25
  255
  app
  "\"'(eval\n  (app cons 'seq (-> (app cons pat1 (app cons pat2 (app nil))) <-))\n  (env ((□? (pat1 pat2)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  25
  255
  app
  "\"'(eval\n  (app cons pat1 (-> (app cons pat2 (app nil)) <-))\n  (env ((□? (pat1 pat2)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  25
  255
  app
  "\"'(eval (app cons pat2 (-> (app nil) <-)) (env ((□? (pat1 pat2)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval (app cons (-> pat2 <-) (app nil)) (env ((□? (pat1 pat2)))))\""
  161
  69
  58
  34
  42
  9
  51
  1
  19/30
  27
  #f
  101/23
  ((21/2 21/2 0) (21/2 21/2 0) (21/2 21/2 0)))
'(clean-cache
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval\n  (app cons (-> pat1 <-) (app cons pat2 (app nil)))\n  (env ((□? (pat1 pat2)))))\""
  85
  42
  26
  17
  19
  4
  23
  1
  1/3
  15
  #f
  61/14
  ((11/2 6 0) (11/2 11/2 0) (11/2 11/2 0)))
'(clean-cache
  regex
  2
  25
  255
  app
  "\"'(eval (match (-> (app regex-empty? pat2) <-) (#f) _) (env ((□? (pat1 pat2)))))\""
  197
  102
  58
  37
  62
  9
  71
  1
  1852/3003
  39
  #f
  149/34
  ((15 15 0) (27/2 27/2 0) (27/2 14 0)))
'(clean-cache
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval (app regex-empty? (-> pat2 <-)) (env ((□? (pat1 pat2)))))\""
  161
  69
  58
  34
  42
  9
  51
  1
  19/30
  27
  #f
  101/23
  ((21/2 21/2 0) (23/2 23/2 0) (21/2 21/2 0)))
'(clean-cache
  regex
  2
  25
  255
  app
  "\"'(eval (match (-> (app regex-empty? pat1) <-) (#f) _) (env ((□? (pat1 pat2)))))\""
  119
  71
  26
  22
  35
  4
  39
  1
  73/234
  25
  #f
  309/71
  ((8 17/2 0) (17/2 9 0) (8 8 0)))
'(clean-cache
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval (app regex-empty? (-> pat1 <-)) (env ((□? (pat1 pat2)))))\""
  85
  42
  26
  17
  19
  4
  23
  1
  1/3
  15
  #f
  61/14
  ((11/2 11/2 0) (11/2 11/2 0) (11/2 11/2 0)))
'(clean-cache
  regex
  2
  25
  255
  app
  "\"'(eval (match (-> (app regex-null? pat2) <-) (#f) _) (env ((□? (pat1 pat2)))))\""
  197
  102
  58
  37
  62
  9
  71
  1
  14783/24024
  39
  #f
  149/34
  ((27/2 14 0) (27/2 27/2 0) (15 15 0)))
'(clean-cache
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval (app regex-null? (-> pat2 <-)) (env ((□? (pat1 pat2)))))\""
  161
  69
  58
  34
  42
  9
  51
  1
  19/30
  27
  #f
  101/23
  ((21/2 21/2 0) (21/2 21/2 0) (11 11 0)))
'(clean-cache
  regex
  2
  25
  255
  app
  "\"'(eval (match (-> (app regex-null? pat1) <-) (#f) _) (env ((□? (pat1 pat2)))))\""
  130
  72
  34
  24
  36
  5
  41
  1
  533/1350
  26
  #f
  157/36
  ((9 19/2 0) (19/2 19/2 0) (9 9 0)))
'(clean-cache
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval (app regex-null? (-> pat1 <-)) (env ((□? (pat1 pat2)))))\""
  85
  42
  26
  17
  19
  4
  23
  1
  1/3
  15
  #f
  61/14
  ((11/2 11/2 0) (11/2 6 0) (13/2 13/2 0)))
'(clean-cache
  regex
  2
  25
  255
  app
  "\"'(eval\n  (λ (re f) (-> (app and (app regex-rep? re) (app f (app cadr re))) <-))\n  (env ((□? (re f)))))\""
  28
  13
  7
  8
  5
  2
  7
  1
  5/13
  6
  #f
  58/13
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  regex
  2
  25
  255
  app
  "\"'(eval\n  (app and (app regex-rep? re) (-> (app f (app cadr re)) <-))\n  (env ((□? (re f)))))\""
  46
  17
  15
  14
  9
  3
  12
  1
  9/14
  9
  #f
  77/17
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  regex
  2
  25
  255
  app
  "\"'(eval (app f (-> (app cadr re) <-)) (env ((□? (re f)))))\""
  50
  14
  21
  15
  10
  3
  13
  1
  5/7
  6
  #f
  31/7
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app cadr (-> re <-)) (env ((□? (re f)))))\""
  #f)
'(clean-cache
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app cadr re)) (env ((□? (re f)))))\""
  6
  2
  2
  2
  0
  1
  1
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  25
  255
  app
  "\"'(eval\n  (app and (-> (app regex-rep? re) <-) (app f (app cadr re)))\n  (env ((□? (re f)))))\""
  26
  11
  7
  8
  5
  2
  7
  1
  5/11
  5
  #f
  49/11
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-rep? (-> re <-)) (env ((□? (re f)))))\""
  #f)
'(clean-cache
  regex
  2
  25
  255
  app
  "\"'(eval\n  (λ (re f)\n    (-> (app and (app regex-alt? re) (app f (app cadr re) (app caddr re))) <-))\n  (env ((□? (re f)))))\""
  26
  13
  6
  7
  5
  2
  7
  1
  5/13
  6
  #f
  58/13
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  regex
  2
  25
  255
  app
  "\"'(eval\n  (app and (app regex-alt? re) (-> (app f (app cadr re) (app caddr re)) <-))\n  (env ((□? (re f)))))\""
  62
  30
  15
  17
  16
  3
  19
  1
  9/17
  14
  #f
  68/15
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(clean-cache
  regex
  2
  25
  255
  app
  "\"'(eval (app f (app cadr re) (-> (app caddr re) <-)) (env ((□? (re f)))))\""
  52
  18
  20
  14
  14
  3
  17
  1
  3/4
  7
  #f
  79/18
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app caddr (-> re <-)) (env ((□? (re f)))))\""
  #f)
'(clean-cache
  regex
  2
  25
  255
  app
  "\"'(eval (app f (-> (app cadr re) <-) (app caddr re)) (env ((□? (re f)))))\""
  50
  14
  21
  15
  10
  3
  13
  1
  5/7
  6
  #f
  31/7
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app cadr (-> re <-)) (env ((□? (re f)))))\""
  #f)
'(clean-cache
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app cadr re) (app caddr re)) (env ((□? (re f)))))\""
  9
  3
  3
  3
  0
  1
  1
  1
  0
  2
  #f
  16/3
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  regex
  2
  25
  255
  app
  "\"'(eval\n  (app and (-> (app regex-alt? re) <-) (app f (app cadr re) (app caddr re)))\n  (env ((□? (re f)))))\""
  24
  11
  6
  7
  5
  2
  7
  1
  5/11
  5
  #f
  49/11
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-alt? (-> re <-)) (env ((□? (re f)))))\""
  #f)
'(clean-cache
  regex
  2
  25
  255
  app
  "\"'(eval\n  (λ (re f)\n    (-> (app and (app regex-seq? re) (app f (app cadr re) (app caddr re))) <-))\n  (env ((□? (re f)))))\""
  26
  13
  6
  7
  5
  2
  7
  1
  5/13
  6
  #f
  58/13
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  regex
  2
  25
  255
  app
  "\"'(eval\n  (app and (app regex-seq? re) (-> (app f (app cadr re) (app caddr re)) <-))\n  (env ((□? (re f)))))\""
  71
  31
  20
  20
  17
  4
  21
  1
  7/11
  15
  #f
  141/31
  ((4 4 0) (4 4 0) (4 4 0)))
'(clean-cache
  regex
  2
  25
  255
  app
  "\"'(eval (app f (app cadr re) (-> (app caddr re) <-)) (env ((□? (re f)))))\""
  52
  18
  20
  14
  14
  3
  17
  1
  3/4
  7
  #f
  79/18
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app caddr (-> re <-)) (env ((□? (re f)))))\""
  #f)
'(clean-cache
  regex
  2
  25
  255
  app
  "\"'(eval (app f (-> (app cadr re) <-) (app caddr re)) (env ((□? (re f)))))\""
  50
  14
  21
  15
  10
  3
  13
  1
  5/7
  6
  #f
  31/7
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app cadr (-> re <-)) (env ((□? (re f)))))\""
  #f)
'(clean-cache
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app cadr re) (app caddr re)) (env ((□? (re f)))))\""
  9
  3
  3
  3
  0
  1
  1
  1
  0
  2
  #f
  16/3
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  regex
  2
  25
  255
  app
  "\"'(eval\n  (app and (-> (app regex-seq? re) <-) (app f (app cadr re) (app caddr re)))\n  (env ((□? (re f)))))\""
  24
  11
  6
  7
  5
  2
  7
  1
  5/11
  5
  #f
  49/11
  ((1/2 1/2 0) (1/2 1/2 0) (1 2 0)))
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-seq? (-> re <-)) (env ((□? (re f)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval\n  (λ (re) (-> (app or (app char? re) (app symbol? re)) <-))\n  (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval (app or (app char? re) (-> (app symbol? re) <-)) (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app symbol? (-> re <-)) (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval (app or (-> (app char? re) <-) (app symbol? re)) (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app char? (-> re <-)) (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval (λ (re) (-> (app eq? re (app #t)) <-)) (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  25
  255
  app
  "\"'(eval (app eq? re (-> (app #t) <-)) (env ((□? (re)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app eq? (-> re <-) (app #t)) (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval (λ (re) (-> (app eq? re (app #f)) <-)) (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  25
  255
  app
  "\"'(eval (app eq? re (-> (app #f) <-)) (env ((□? (re)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app eq? (-> re <-) (app #f)) (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval\n  (λ (re) (-> (app and (app pair? re) (app eq? (app car re) 'rep)) <-))\n  (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval\n  (app and (app pair? re) (-> (app eq? (app car re) 'rep) <-))\n  (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval (app eq? (-> (app car re) <-) 'rep) (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app car (-> re <-)) (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval\n  (app and (-> (app pair? re) <-) (app eq? (app car re) 'rep))\n  (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app pair? (-> re <-)) (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval\n  (λ (re) (-> (app and (app pair? re) (app eq? (app car re) 'seq)) <-))\n  (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval\n  (app and (app pair? re) (-> (app eq? (app car re) 'seq) <-))\n  (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval (app eq? (-> (app car re) <-) 'seq) (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app car (-> re <-)) (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval\n  (app and (-> (app pair? re) <-) (app eq? (app car re) 'seq))\n  (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app pair? (-> re <-)) (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval\n  (λ (re) (-> (app and (app pair? re) (app eq? (app car re) 'alt)) <-))\n  (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval\n  (app and (app pair? re) (-> (app eq? (app car re) 'alt) <-))\n  (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval (app eq? (-> (app car re) <-) 'alt) (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app car (-> re <-)) (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval\n  (app and (-> (app pair? re) <-) (app eq? (app car re) 'alt))\n  (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app pair? (-> re <-)) (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  25
  255
  app
  "\"'(eval\n  (letrec* (... regex-NULL (regex-BLANK (-> (app #t) <-)) regex-alt? ...) ...)\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  25
  255
  app
  "\"'(eval\n  (letrec* (... caddr (regex-NULL (-> (app #f) <-)) regex-BLANK ...) ...)\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval (λ (p) (-> (app car (app cdr (app cdr p))) <-)) (env ((□? (p)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval (app car (-> (app cdr (app cdr p)) <-)) (env ((□? (p)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval (app cdr (-> (app cdr p) <-)) (env ((□? (p)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app cdr (-> p <-)) (env ((□? (p)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval (λ (p) (-> (app car (app cdr p)) <-)) (env ((□? (p)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval (app car (-> (app cdr p) <-)) (env ((□? (p)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app cdr (-> p <-)) (env ((□? (p)))))\""
  #f)
'(clean-cache
  regex
  2
  25
  255
  match
  "\"'(eval (λ (null?-v) (-> (match null?-v ...) <-)) (env ((□? (null?-v)))))\""
  69
  48
  13
  8
  38
  4
  42
  1
  37/44
  40
  #f
  247/48
  ((11 11 0) (11 11 0) (13 27/2 0)))
'(clean-cache
  regex
  2
  25
  255
  app
  "\"'(eval (match null?-v (nil) (_ (-> (app #f) <-))) (env ((□? (null?-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  25
  255
  app
  "\"'(eval (match null?-v ((nil) (-> (app #t) <-)) _) (env ((□? (null?-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval (match (-> null?-v <-) (nil) _) (env ((□? (null?-v)))))\""
  52
  31
  13
  8
  29
  4
  33
  1
  95/102
  26
  #f
  158/31
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  regex
  2
  255
  match
  "\"'(eval (λ (pair?-v) (-> (match pair?-v ...) <-)) (env ((□? (pair?-v)))))\""
  #f)
'(clean-cache
  regex
  2
  25
  255
  app
  "\"'(eval\n  (match pair?-v (cons pair?-c pair?-d) (_ (-> (app #f) <-)))\n  (env ((□? (pair?-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  25
  255
  app
  "\"'(eval\n  (match pair?-v ((cons pair?-c pair?-d) (-> (app #t) <-)) _)\n  (env ((□? (pair?-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (match (-> pair?-v <-) (cons pair?-c pair?-d) _) (env ((□? (pair?-v)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval\n  (λ (cadr-v) (-> (app car (app cdr (app cdr cadr-v))) <-))\n  (env ((□? (cadr-v)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval (app car (-> (app cdr (app cdr cadr-v)) <-)) (env ((□? (cadr-v)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval (app cdr (-> (app cdr cadr-v) <-)) (env ((□? (cadr-v)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app cdr (-> cadr-v <-)) (env ((□? (cadr-v)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval (λ (cadr-v) (-> (app car (app cdr cadr-v)) <-)) (env ((□? (cadr-v)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval (app car (-> (app cdr cadr-v) <-)) (env ((□? (cadr-v)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app cdr (-> cadr-v <-)) (env ((□? (cadr-v)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  match
  "\"'(eval (λ (cdr-v) (-> (match cdr-v ...) <-)) (env ((□? (cdr-v)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (match cdr-v ((cons cdr-c cdr-d) (-> cdr-d <-))) (env ((□? (cdr-v)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (match (-> cdr-v <-) (cons cdr-c cdr-d)) (env ((□? (cdr-v)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  match
  "\"'(eval (λ (car-v) (-> (match car-v ...) <-)) (env ((□? (car-v)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (match car-v ((cons car-c car-d) (-> car-c <-))) (env ((□? (car-v)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (match (-> car-v <-) (cons car-c car-d)) (env ((□? (car-v)))))\""
  #f)
'(clean-cache
  regex
  2
  25
  255
  app
  "\"'(eval\n  (letrec*\n   (car ... check-expect)\n   (->\n    (app\n     check-expect\n     (app\n      regex-match\n      (app\n       cons\n       'seq\n       (app\n        cons\n        'foo\n        (app cons (app cons 'rep (app cons 'bar (app nil))) (app nil))))\n      (app cons 'foo (app cons 'bar (app nil))))\n     (app #f))\n    <-))\n  (env ()))\""
  27
  16
  7
  4
  16
  5
  21
  1
  1
  7
  #f
  71/16
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  regex
  2
  25
  255
  app
  "\"'(eval\n  (app\n   check-expect\n   (app\n    regex-match\n    (app\n     cons\n     'seq\n     (app\n      cons\n      'foo\n      (app cons (app cons 'rep (app cons 'bar (app nil))) (app nil))))\n    (app cons 'foo (app cons 'bar (app nil))))\n   (-> (app #f) <-))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  25
  255
  app
  "\"'(eval\n  (app\n   check-expect\n   (->\n    (app\n     regex-match\n     (app\n      cons\n      'seq\n      (app\n       cons\n       'foo\n       (app cons (app cons 'rep (app cons 'bar (app nil))) (app nil))))\n     (app cons 'foo (app cons 'bar (app nil))))\n    <-)\n   (app #f))\n  (env ()))\""
  18
  10
  5
  3
  10
  3
  13
  1
  1
  4
  #f
  22/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  regex
  2
  25
  255
  app
  "\"'(eval\n  (app\n   regex-match\n   (app\n    cons\n    'seq\n    (app\n     cons\n     'foo\n     (app cons (app cons 'rep (app cons 'bar (app nil))) (app nil))))\n   (-> (app cons 'foo (app cons 'bar (app nil))) <-))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  25
  255
  app
  "\"'(eval (app cons 'foo (-> (app cons 'bar (app nil)) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  25
  255
  app
  "\"'(eval (app cons 'bar (-> (app nil) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  25
  255
  app
  "\"'(eval\n  (app\n   regex-match\n   (->\n    (app\n     cons\n     'seq\n     (app\n      cons\n      'foo\n      (app cons (app cons 'rep (app cons 'bar (app nil))) (app nil))))\n    <-)\n   (app cons 'foo (app cons 'bar (app nil))))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  25
  255
  app
  "\"'(eval\n  (app\n   cons\n   'seq\n   (->\n    (app\n     cons\n     'foo\n     (app cons (app cons 'rep (app cons 'bar (app nil))) (app nil)))\n    <-))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  25
  255
  app
  "\"'(eval\n  (app\n   cons\n   'foo\n   (-> (app cons (app cons 'rep (app cons 'bar (app nil))) (app nil)) <-))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  25
  255
  app
  "\"'(eval\n  (app cons (app cons 'rep (app cons 'bar (app nil))) (-> (app nil) <-))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  25
  255
  app
  "\"'(eval\n  (app cons (-> (app cons 'rep (app cons 'bar (app nil))) <-) (app nil))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  25
  255
  app
  "\"'(eval (app cons 'rep (-> (app cons 'bar (app nil)) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  25
  255
  app
  "\"'(eval (app cons 'bar (-> (app nil) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval\n  (λ (cadr-v) (-> (app car (app cdr (app cdr cadr-v))) <-))\n  (env ((□? (cadr-v)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  match
  "\"'(eval (let (_) (-> (match (app regex-empty? re) ...) <-)) (env ((□? (re c)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval (app eq? (-> (app car re) <-) 'rep) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  25
  255
  letrec*
  "\"'(eval (lettypes cons ... nil (letrec* (car ... check-expect) ...)) (env ()))\""
  28
  17
  7
  4
  17
  5
  22
  1
  1
  7
  #f
  75/17
  ((1 3/2 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  regex
  2
  25
  255
  app
  "\"'(eval (app f (-> (app cadr re) <-)) (env ((□? (re f)))))\""
  77
  31
  28
  18
  27
  8
  35
  1
  27/31
  13
  #f
  137/31
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  regex
  2
  25
  255
  app
  "\"'(eval\n  (app cons (app cons 'rep (app cons 'bar (app nil))) (-> (app nil) <-))\n  (env ()))\""
  79
  33
  28
  18
  29
  8
  37
  1
  29/33
  15
  #t
  49/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval (app regex-empty? (-> pat1 <-)) (env ((□? (pat1 pat2)))))\""
  163
  75
  54
  34
  48
  12
  60
  1
  37/57
  30
  #f
  22/5
  ((6 6 0) (6 6 0) (11/2 6 0)))
'(shuffled-cache
  0
  regex
  2
  25
  255
  match
  "\"'(eval\n  (match\n   (app regex-null? pat2)\n   ((#f) (-> (match (app regex-empty? pat1) ...) <-))\n   _)\n  (env ((□? (pat1 pat2)))))\""
  192
  100
  54
  38
  60
  12
  72
  1
  37/60
  38
  #f
  219/50
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  regex
  2
  25
  255
  app
  "\"'(eval\n  (app seq (app regex-empty pat1) (-> (app regex-empty pat2) <-))\n  (env ((□? (pat1 pat2)) (□? (re)))))\""
  202
  109
  54
  39
  64
  12
  76
  1
  37/62
  41
  #f
  477/109
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app cdr (-> cadr-v <-)) (env ((□? (cadr-v)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  25
  255
  app
  "\"'(eval (match (-> (app regex-rep? re) <-) (#f) _) (env ((□? (re)))))\""
  26
  11
  7
  8
  5
  2
  7
  1
  5/11
  5
  #f
  49/11
  ((1 1 0) (1/2 1 0) (1 1 0)))
'(shuffled-cache
  0
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval\n  (match (app regex-null? re) (#f) (_ (-> regex-NULL <-)))\n  (env ((□? (re c)))))\""
  30
  14
  7
  9
  7
  2
  9
  1
  1/2
  8
  #t
  32/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app cadr (-> re <-)) (env ((□? (re f)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  25
  255
  app
  "\"'(eval\n  (match (-> (app match-seq re (λ (pat1 pat2) ...)) <-) (#f) c-x)\n  (env ((□? (re)))))\""
  31
  16
  6
  9
  10
  2
  12
  1
  5/8
  8
  #f
  9/2
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval\n  (app regex-derivative pat1 (-> c <-))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  25
  255
  match
  "\"'(eval\n  (match\n   (app regex-atom? re)\n   ((#f) (-> (match (app match-seq re (λ (pat1 pat2) ...)) ...) <-))\n   _)\n  (env ((□? (re c)))))\""
  32
  17
  6
  9
  10
  2
  12
  1
  10/17
  8
  #f
  76/17
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval (λ (re) (-> (app eq? re (app #f)) <-)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval\n  (λ (re) (-> (app and (app pair? re) (app eq? (app car re) 'alt)) <-))\n  (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval (app regex-empty? (-> pat <-)) (env ((□? (pat)))))\""
  64
  20
  25
  19
  13
  4
  17
  1
  13/18
  8
  #f
  22/5
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  0
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval\n  (match (app regex-null? pat1) (#f) (_ (-> pat2 <-)))\n  (env ((□? (pat1 pat2)))))\""
  151
  54
  63
  34
  30
  10
  40
  1
  27/49
  22
  #f
  119/27
  ((13/2 13/2 0) (13/2 13/2 0) (7 7 0)))
'(shuffled-cache
  0
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app cadr re) (app caddr re)) (env ((□? (re f)))))\""
  157
  57
  66
  34
  30
  11
  41
  1
  27/52
  24
  #f
  254/57
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval\n  (app regex-derivative pat2 (-> c <-))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  25
  255
  app
  "\"'(eval\n  (λ (pat1 pat2)\n    (->\n     (app\n      alt\n      (app seq (app regex-derivative pat1 c) pat2)\n      (app seq (app regex-empty pat1) (app regex-derivative pat2 c)))\n     <-))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  34
  11
  12
  11
  6
  2
  8
  1
  6/11
  5
  #f
  49/11
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval\n  (match (app regex-empty? re) (#f) (_ (-> regex-NULL <-)))\n  (env ((□? (re c)))))\""
  37
  14
  12
  11
  8
  2
  10
  1
  4/7
  8
  #t
  32/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (match (-> car-v <-) (cons car-c car-d)) (env ((□? (car-v)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval (match (app eq? c re) (#f) (_ (-> regex-BLANK <-))) (env ((□? (re c)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval\n  (match (app regex-null? pat1) (#f) (_ (-> regex-NULL <-)))\n  (env ((□? (pat1 pat2)))))\""
  8
  6
  0
  2
  4
  0
  4
  1
  2/3
  6
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  25
  255
  app
  "\"'(eval\n  (app cons 'alt (-> (app cons pat1 (app cons pat2 (app nil))) <-))\n  (env ((□? (pat1 pat2)))))\""
  11
  8
  0
  3
  4
  0
  4
  1
  1/2
  8
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app cdr (-> p <-)) (env ((□? (p)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  let
  "\"'(eval (λ (re c) (-> (let (_) ...) <-)) (env ((□? (re c)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval\n  (match (app match-rep re (λ (pat) ...)) (#f) (c-x (-> c-x <-)))\n  (env ((□? (re c)))))\""
  34
  17
  7
  10
  10
  2
  12
  1
  10/17
  8
  #f
  76/17
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval (app regex-empty (-> pat1 <-)) (env ((□? (pat1 pat2)) (□? (re c)))))\""
  86
  34
  30
  22
  23
  5
  28
  1
  23/34
  16
  #f
  76/17
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  regex
  2
  25
  255
  match
  "\"'(eval\n  (match\n   (app match-seq re (λ (pat1 pat2) ...))\n   ((#f) (-> (match (app match-alt re (λ (pat1 pat2) ...)) ...) <-))\n   c-x)\n  (env ((□? (re)))))\""
  107
  50
  32
  25
  32
  6
  38
  1
  5/8
  23
  #f
  223/50
  ((1/2 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  regex
  2
  25
  255
  app
  "\"'(eval (app cons 'bar (-> (app nil) <-)) (env ()))\""
  109
  52
  32
  25
  34
  6
  40
  1
  16/25
  25
  #t
  233/52
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  25
  255
  app
  "\"'(eval\n  (match\n   (app regex-empty? pat2)\n   ((#f) (-> (app cons 'seq (app cons pat1 (app cons pat2 (app nil)))) <-))\n   _)\n  (env ((□? (pat1 pat2)))))\""
  112
  54
  32
  26
  34
  6
  40
  1
  8/13
  27
  #t
  9/2
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (match (-> cdr-v <-) (cons cdr-c cdr-d)) (env ((□? (cdr-v)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  25
  255
  app
  "\"'(eval\n  (match (-> (app match-alt re (λ (pat1 pat2) ...)) <-) (#f) c-x)\n  (env ((□? (re)))))\""
  31
  16
  6
  9
  10
  2
  12
  1
  5/8
  8
  #f
  9/2
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app caddr (-> re <-)) (env ((□? (re f)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app eq? (-> c <-) re) (env ((□? (re c)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  match
  "\"'(eval\n  (match\n   (app regex-null? re)\n   ((#f) (-> (match (app regex-atom? re) ...) <-))\n   _)\n  (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  25
  255
  app
  "\"'(eval (match (-> (app regex-null? pat1) <-) (#f) _) (env ((□? (pat1 pat2)))))\""
  118
  57
  38
  23
  29
  6
  35
  1
  44/105
  22
  #f
  250/57
  ((17/2 17/2 0) (17/2 17/2 0) (9 9 0)))
'(shuffled-cache
  0
  regex
  2
  25
  255
  app
  "\"'(eval (app f (-> (app cadr re) <-) (app caddr re)) (env ((□? (re f)))))\""
  167
  71
  59
  37
  39
  9
  48
  1
  834/1645
  28
  #f
  312/71
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  regex
  2
  25
  255
  app
  "\"'(eval (match (app regex-rep? re) ((#f) (-> (app #f) <-)) _) (env ((□? (re)))))\""
  169
  73
  59
  37
  39
  9
  48
  1
  834/1715
  30
  #t
  322/73
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval (app cdr (-> (app cdr cadr-v) <-)) (env ((□? (cadr-v)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  25
  255
  app
  "\"'(eval\n  (app\n   cons\n   'foo\n   (-> (app cons (app cons 'rep (app cons 'bar (app nil))) (app nil)) <-))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval\n  (app regex-derivative (-> pat2 <-) c)\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  61
  23
  22
  16
  19
  3
  22
  1
  17/21
  11
  #f
  103/23
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  regex
  2
  25
  255
  app
  "\"'(eval (match (-> (app regex-null? pat2) <-) (#f) _) (env ((□? (pat1 pat2)))))\""
  188
  92
  60
  36
  56
  9
  65
  1
  331/540
  38
  #f
  203/46
  ((19/2 19/2 0) (19/2 10 0) (21/2 21/2 0)))
'(shuffled-cache
  0
  regex
  2
  25
  255
  app
  "\"'(eval\n  (app\n   alt\n   (app seq (app regex-derivative pat1 c) pat2)\n   (-> (app seq (app regex-empty pat1) (app regex-derivative pat2 c)) <-))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  188
  92
  60
  36
  56
  9
  65
  1
  331/540
  38
  #f
  203/46
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  25
  255
  app
  "\"'(eval\n  (app cons 'seq (-> (app cons pat1 (app cons pat2 (app nil))) <-))\n  (env ((□? (pat1 pat2)))))\""
  190
  94
  60
  36
  56
  9
  65
  1
  331/560
  40
  #t
  208/47
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app caddr (-> re <-)) (env ((□? (re f)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval (app equal? (-> check <-) expect) (env ((□? (check expect)))))\""
  22
  11
  7
  4
  10
  5
  15
  1
  10/11
  4
  #f
  48/11
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  regex
  2
  25
  255
  app
  "\"'(eval\n  (app\n   check-expect\n   (->\n    (app\n     regex-match\n     (app\n      cons\n      'seq\n      (app\n       cons\n       'foo\n       (app cons (app cons 'rep (app cons 'bar (app nil))) (app nil))))\n     (app cons 'foo (app cons 'bar (app nil))))\n    <-)\n   (app #f))\n  (env ()))\""
  22
  11
  7
  4
  10
  5
  15
  1
  10/11
  4
  #f
  48/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval\n  (match (app regex-null? pat2) (#f) (_ (-> regex-NULL <-)))\n  (env ((□? (pat1 pat2)))))\""
  26
  14
  7
  5
  12
  5
  17
  1
  6/7
  7
  #t
  9/2
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  25
  255
  app
  "\"'(eval\n  (match (-> (app match-alt re (λ (pat1 pat2) ...)) <-) (#f) c-x)\n  (env ((□? (re c)))))\""
  57
  30
  13
  14
  22
  7
  29
  1
  11/15
  15
  #f
  9/2
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  regex
  2
  25
  255
  match
  "\"'(eval\n  (match\n   (app regex-null? pat1)\n   ((#f) (-> (match (app regex-null? pat2) ...) <-))\n   _)\n  (env ((□? (pat1 pat2)))))\""
  254
  139
  71
  44
  86
  16
  102
  1
  25079/38346
  54
  #f
  610/139
  ((29/2 15 0) (29/2 15 0) (15 31/2 0)))
'(shuffled-cache
  0
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval\n  (app regex-derivative (-> pat2 <-) c)\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  265
  148
  73
  44
  92
  16
  108
  1
  25079/39732
  57
  #f
  649/148
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval\n  (match (app match-seq re (λ (pat1 pat2) ...)) (#f) (c-x (-> c-x <-)))\n  (env ((□? (re)))))\""
  285
  163
  75
  47
  100
  17
  117
  1
  27851/45738
  63
  #f
  715/163
  ((1 1 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval (app car (-> data <-)) (env ((□? (pattern data)))))\""
  365
  242
  75
  48
  172
  17
  189
  1
  95923/140910
  111
  #f
  551/121
  ((21/2 11 0) (21/2 21/2 0) (21/2 11 0)))
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app car (-> re <-)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  25
  255
  app
  "\"'(eval\n  (match (app regex-null? re) (#f) (_ (-> (app #f) <-)))\n  (env ((□? (re)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval (app regex-null? (-> pat1 <-)) (env ((□? (pat1 pat2)))))\""
  87
  44
  26
  17
  19
  4
  23
  1
  4/13
  17
  #f
  193/44
  ((11/2 11/2 0) (11/2 11/2 0) (11/2 11/2 0)))
'(shuffled-cache
  0
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval\n  (match (app regex-null? pat) (#f) (_ (-> regex-BLANK <-)))\n  (env ((□? (pat)))))\""
  90
  47
  26
  17
  21
  4
  25
  1
  10/29
  20
  #t
  208/47
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-null? (-> pat1 <-)) (env ((□? (pat1 pat2)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval (app regex-null? (-> pat2 <-)) (env ((□? (pat1 pat2)))))\""
  280
  176
  62
  42
  93
  10
  103
  1
  112/225
  66
  #f
  35/8
  ((11 23/2 0) (21/2 11 0) (23/2 23/2 0)))
'(shuffled-cache
  0
  regex
  2
  25
  255
  app
  "\"'(eval\n  (app\n   alt\n   (-> (app seq (app regex-derivative pat1 c) pat2) <-)\n   (app seq (app regex-empty pat1) (app regex-derivative pat2 c)))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  280
  176
  62
  42
  93
  10
  103
  1
  112/225
  66
  #f
  35/8
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  25
  255
  app
  "\"'(eval\n  (app and (-> (app regex-rep? re) <-) (app f (app cadr re)))\n  (env ((□? (re f)))))\""
  302
  187
  69
  46
  98
  12
  110
  1
  127/258
  71
  #f
  819/187
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  regex
  2
  25
  255
  app
  "\"'(eval\n  (λ (pat1 pat2)\n    (-> (app seq (app regex-empty pat1) (app regex-empty pat2)) <-))\n  (env ((□? (pat1 pat2)) (□? (re)))))\""
  312
  196
  69
  47
  101
  12
  113
  1
  167/352
  74
  #f
  429/98
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval (match (-> null?-v <-) (nil) _) (env ((□? (null?-v)))))\""
  351
  228
  74
  49
  131
  15
  146
  1
  655/1224
  99
  #f
  1019/228
  ((5 5 0) (5 5 0) (5 5 0)))
'(shuffled-cache
  0
  regex
  2
  25
  255
  app
  "\"'(eval\n  (λ (re f)\n    (-> (app and (app regex-alt? re) (app f (app cadr re) (app caddr re))) <-))\n  (env ((□? (re f)))))\""
  367
  240
  76
  51
  135
  16
  151
  1
  97/192
  104
  #f
  67/15
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval\n  (app and (app pair? re) (-> (app eq? (app car re) 'alt) <-))\n  (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval (app or (app char? re) (-> (app symbol? re) <-)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  25
  255
  match
  "\"'(eval (λ (pat) (-> (match (app regex-null? pat) ...) <-)) (env ((□? (pat)))))\""
  94
  37
  33
  24
  21
  5
  26
  1
  2/3
  14
  #f
  162/37
  ((9/2 5 0) (9/2 5 0) (9/2 5 0)))
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app cadr (-> re <-)) (env ((□? (re f)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval\n  (λ (re) (-> (app and (app pair? re) (app eq? (app car re) 'seq)) <-))\n  (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval (app cons (-> pat2 <-) (app nil)) (env ((□? (pat1 pat2)))))\""
  91
  34
  38
  19
  17
  6
  23
  1
  14/31
  14
  #f
  75/17
  ((13/2 13/2 0) (6 13/2 0) (13/2 13/2 0)))
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app pair? (-> re <-)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval (app cons (-> pat2 <-) (app nil)) (env ((□? (pat1 pat2)))))\""
  161
  69
  58
  34
  42
  9
  51
  1
  19/30
  27
  #f
  101/23
  ((21/2 21/2 0) (11 11 0) (11 23/2 0)))
'(shuffled-cache
  0
  regex
  2
  25
  255
  app
  "\"'(eval\n  (app and (-> (app regex-alt? re) <-) (app f (app cadr re) (app caddr re)))\n  (env ((□? (re f)))))\""
  181
  80
  64
  37
  47
  11
  58
  1
  110/183
  32
  #f
  22/5
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  regex
  2
  25
  255
  app
  "\"'(eval (app f (app cadr re) (-> (app caddr re) <-)) (env ((□? (re f)))))\""
  182
  81
  64
  37
  47
  11
  58
  1
  110/183
  32
  #f
  356/81
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval (λ (re) (-> (app eq? re (app #t)) <-)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval (app car (-> (app cdr cadr-v) <-)) (env ((□? (cadr-v)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval (app car (-> (app cdr (app cdr cadr-v)) <-)) (env ((□? (cadr-v)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  25
  255
  lettypes
  "\"'(eval ((top) lettypes (cons ... nil) ...) (env ()))\""
  29
  18
  7
  4
  18
  5
  23
  1
  1
  7
  #f
  79/18
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-null? (-> re <-)) (env ((□? (re c)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval (app regex-empty (-> pat2 <-)) (env ((□? (pat1 pat2)) (□? (re)))))\""
  59
  21
  22
  16
  17
  3
  20
  1
  15/19
  9
  #f
  31/7
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (match car-v ((cons car-c car-d) (-> car-c <-))) (env ((□? (car-v)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  25
  255
  app
  "\"'(eval (app f (-> (app cadr re) <-) (app caddr re)) (env ((□? (re f)))))\""
  50
  14
  21
  15
  10
  3
  13
  1
  5/7
  6
  #f
  31/7
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  regex
  2
  25
  255
  app
  "\"'(eval\n  (match pair?-v (cons pair?-c pair?-d) (_ (-> (app #f) <-)))\n  (env ((□? (pair?-v)))))\""
  53
  16
  21
  16
  10
  3
  13
  1
  5/8
  8
  #t
  9/2
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app char? (-> re <-)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  25
  255
  app
  "\"'(eval\n  (app alt (-> (app regex-empty pat1) <-) (app regex-empty pat2))\n  (env ((□? (pat1 pat2)) (□? (re)))))\""
  36
  11
  14
  11
  6
  2
  8
  1
  6/11
  5
  #f
  49/11
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval (app eq? (-> (app car re) <-) 'alt) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  25
  255
  match
  "\"'(eval\n  (λ (pattern data) (-> (match (app null? data) ...) <-))\n  (env ((□? (pattern data)))))\""
  142
  97
  27
  18
  85
  6
  91
  1
  51/56
  62
  #f
  470/97
  ((33/2 17 0) (31/2 16 0) (31/2 16 0)))
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval (app or (-> (app char? re) <-) (app symbol? re)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval\n  (match (app match-seq re (λ (pat1 pat2) ...)) (#f) (c-x (-> c-x <-)))\n  (env ((□? (re c)))))\""
  32
  17
  6
  9
  10
  2
  12
  1
  10/17
  8
  #f
  76/17
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  regex
  2
  25
  255
  match
  "\"'(eval\n  (match\n   (app match-seq re (λ (pat1 pat2) ...))\n   ((#f) (-> (match (app match-alt re (λ (pat1 pat2) ...)) ...) <-))\n   c-x)\n  (env ((□? (re c)))))\""
  54
  33
  8
  13
  19
  3
  22
  1
  17/31
  15
  #f
  49/11
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  regex
  2
  25
  255
  app
  "\"'(eval\n  (app alt (-> (app regex-derivative pat1 c) <-) (app regex-derivative pat2 c))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  90
  45
  22
  23
  25
  5
  30
  1
  23/43
  20
  #f
  40/9
  ((2 2 0) (3/2 3/2 0) (2 2 0)))
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval (match (-> (app regex-empty? re) <-) (#f) _) (env ((□? (re c)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  25
  255
  match
  "\"'(eval\n  (match\n   (app match-alt re (λ (pat1 pat2) ...))\n   ((#f) (-> (match (app regex-rep? re) ...) <-))\n   c-x)\n  (env ((□? (re)))))\""
  27
  12
  7
  8
  5
  2
  7
  1
  5/12
  5
  #f
  53/12
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  regex
  2
  25
  255
  app
  "\"'(eval\n  (λ (check expect) (-> (app equal? check expect) <-))\n  (env ((□? (check expect)))))\""
  53
  27
  14
  12
  17
  7
  24
  1
  16/25
  11
  #f
  119/27
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  regex
  2
  255
  match
  "\"'(eval\n  (match (app regex-null? re) ((#f) (-> (match (app eq? c re) ...) <-)) _)\n  (env ((□? (re c)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  25
  255
  app
  "\"'(eval\n  (λ (pat) (-> (app seq (app regex-derivative pat c) (app rep pat)) <-))\n  (env ((□? (pat)) (□? (re c)))))\""
  35
  11
  13
  11
  6
  2
  8
  1
  6/11
  5
  #f
  49/11
  ((1 1 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  regex
  2
  25
  255
  app
  "\"'(eval\n  (app cons pat1 (-> (app cons pat2 (app nil)) <-))\n  (env ((□? (pat1 pat2)))))\""
  37
  13
  13
  11
  6
  2
  8
  1
  6/13
  7
  #t
  59/13
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  25
  255
  app
  "\"'(eval\n  (app and (app regex-seq? re) (-> (app f (app cadr re) (app caddr re)) <-))\n  (env ((□? (re f)))))\""
  83
  42
  20
  21
  21
  4
  25
  1
  25/52
  20
  #f
  95/21
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app car (-> re <-)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  match
  "\"'(eval\n  (match\n   (app regex-empty? re)\n   ((#f) (-> (match (app regex-null? re) ...) <-))\n   _)\n  (env ((□? (re c)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  25
  255
  app
  "\"'(eval\n  (letrec*\n   (car ... check-expect)\n   (->\n    (app\n     check-expect\n     (app\n      regex-match\n      (app\n       cons\n       'seq\n       (app\n        cons\n        'foo\n        (app cons (app cons 'rep (app cons 'bar (app nil))) (app nil))))\n      (app cons 'foo (app cons 'bar (app nil))))\n     (app #f))\n    <-))\n  (env ()))\""
  27
  16
  7
  4
  16
  5
  21
  1
  1
  7
  #f
  71/16
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval\n  (match (app regex-empty? pat) (#f) (_ (-> regex-BLANK <-)))\n  (env ((□? (pat)))))\""
  31
  19
  7
  5
  18
  5
  23
  1
  18/19
  10
  #t
  86/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-alt? (-> re <-)) (env ((□? (re f)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-rep? (-> re <-)) (env ((□? (re f)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app cadr re)) (env ((□? (re f)))))\""
  6
  2
  2
  2
  0
  1
  1
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  25
  255
  app
  "\"'(eval\n  (match (app regex-empty? re) (#f) (_ (-> (app #t) <-)))\n  (env ((□? (re)))))\""
  9
  4
  2
  3
  0
  1
  1
  1
  0
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app match-alt (-> re <-) (λ (pat1 pat2) ...)) (env ((□? (re c)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  25
  255
  app
  "\"'(eval\n  (match pair?-v ((cons pair?-c pair?-d) (-> (app #t) <-)) _)\n  (env ((□? (pair?-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  25
  255
  app
  "\"'(eval\n  (app and (-> (app regex-seq? re) <-) (app f (app cadr re) (app caddr re)))\n  (env ((□? (re f)))))\""
  27
  13
  6
  8
  5
  2
  7
  1
  5/13
  7
  #f
  59/13
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  regex
  2
  25
  255
  match
  "\"'(eval\n  (λ (pat1 pat2) (-> (match (app regex-null? pat1) ...) <-))\n  (env ((□? (pat1 pat2)))))\""
  162
  90
  40
  32
  41
  7
  48
  1
  379/990
  33
  #f
  131/30
  ((8 17/2 0) (15/2 15/2 0) (15/2 15/2 0)))
'(shuffled-cache
  0
  regex
  2
  25
  255
  app
  "\"'(eval (app cons 'bar (-> (app nil) <-)) (env ()))\""
  164
  92
  40
  32
  43
  7
  50
  1
  424/1035
  35
  #t
  403/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  25
  255
  match
  "\"'(eval\n  (match\n   (app regex-null? pat1)\n   ((#f) (-> (match (app regex-null? pat2) ...) <-))\n   _)\n  (env ((□? (pat1 pat2)))))\""
  226
  143
  44
  39
  64
  8
  72
  1
  67/189
  51
  #f
  623/143
  ((4 4 0) (4 4 0) (4 4 0)))
'(shuffled-cache
  0
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval (app regex-empty (-> pat1 <-)) (env ((□? (pat1 pat2)) (□? (re)))))\""
  294
  178
  67
  49
  90
  11
  101
  1
  7727/15540
  67
  #f
  779/178
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  0
  regex
  2
  25
  255
  app
  "\"'(eval\n  (λ (re f) (-> (app and (app regex-rep? re) (app f (app cadr re))) <-))\n  (env ((□? (re f)))))\""
  311
  190
  70
  51
  94
  12
  106
  1
  8147/17640
  72
  #f
  416/95
  ((1/2 1/2 0) (1 1 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  regex
  2
  25
  255
  app
  "\"'(eval (app cons pat2 (-> (app nil) <-)) (env ((□? (pat1 pat2)))))\""
  315
  194
  70
  51
  94
  12
  106
  1
  8147/18060
  76
  #t
  426/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  25
  255
  app
  "\"'(eval\n  (app seq (app regex-empty pat1) (-> (app regex-derivative pat2 c) <-))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  326
  204
  70
  52
  98
  12
  110
  1
  8147/18480
  79
  #f
  895/204
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval\n  (app and (-> (app pair? re) <-) (app eq? (app car re) 'alt))\n  (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval (app rep (-> pat <-)) (env ((□? (pat)) (□? (re c)))))\""
  57
  17
  23
  17
  13
  3
  16
  1
  13/17
  8
  #f
  76/17
  ((3/2 3/2 0) (3/2 3/2 0) (5/2 3 0)))
'(shuffled-cache
  0
  regex
  2
  25
  255
  app
  "\"'(eval\n  (λ (re f)\n    (-> (app and (app regex-seq? re) (app f (app cadr re) (app caddr re))) <-))\n  (env ((□? (re f)))))\""
  79
  30
  29
  20
  18
  5
  23
  1
  3/5
  14
  #f
  67/15
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  regex
  2
  25
  255
  app
  "\"'(eval (match (-> (app regex-null? pat1) <-) (#f) _) (env ((□? (pat1 pat2)))))\""
  220
  116
  63
  41
  64
  10
  74
  1
  481/900
  45
  #f
  509/116
  ((8 17/2 0) (17/2 17/2 0) (9 9 0)))
'(shuffled-cache
  0
  regex
  2
  25
  255
  match
  "\"'(eval (λ (null?-v) (-> (match null?-v ...) <-)) (env ((□? (null?-v)))))\""
  276
  165
  68
  43
  103
  13
  116
  1
  1427/2370
  84
  #f
  23/5
  ((17/2 17/2 0) (17/2 17/2 0) (10 21/2 0)))
'(shuffled-cache
  0
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval\n  (match (app regex-null? pat2) (#f) (_ (-> pat1 <-)))\n  (env ((□? (pat1 pat2)))))\""
  308
  190
  72
  46
  112
  14
  126
  1
  289/528
  92
  #f
  867/190
  ((2 5/2 0) (2 2 0) (7/2 7/2 0)))
'(shuffled-cache
  0
  regex
  2
  25
  255
  app
  "\"'(eval (app eq? re (-> (app #t) <-)) (env ((□? (re)))))\""
  311
  192
  72
  47
  112
  14
  126
  1
  289/540
  94
  #t
  877/192
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval\n  (λ (re) (-> (app and (app pair? re) (app eq? (app car re) 'rep)) <-))\n  (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval (λ (p) (-> (app car (app cdr (app cdr p))) <-)) (env ((□? (p)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval (app regex-empty (-> pattern <-)) (env ((□? (pattern data)))))\""
  50
  23
  17
  10
  22
  4
  26
  1
  14/15
  11
  #t
  103/23
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  regex
  2
  25
  255
  app
  "\"'(eval\n  (match\n   (app regex-empty? pat)\n   ((#f) (-> (app cons 'rep (app cons pat (app nil))) <-))\n   _)\n  (env ((□? (pat)))))\""
  52
  25
  17
  10
  22
  4
  26
  1
  14/17
  13
  #t
  113/25
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval\n  (match (app regex-empty? pat2) (#f) (_ (-> pat1 <-)))\n  (env ((□? (pat1 pat2)))))\""
  111
  65
  29
  17
  39
  6
  45
  1
  14/31
  26
  #f
  22/5
  ((5 5 0) (7/2 7/2 0) (7/2 4 0)))
'(shuffled-cache
  0
  regex
  2
  25
  255
  app
  "\"'(eval\n  (app regex-derivative pattern (-> (app car data) <-))\n  (env ((□? (pattern data)))))\""
  175
  103
  46
  26
  76
  8
  84
  1
  35/53
  61
  #f
  479/103
  ((11/2 11/2 0) (6 6 0) (11/2 11/2 0)))
'(shuffled-cache
  0
  regex
  2
  25
  255
  app
  "\"'(eval\n  (app regex-empty? (-> (app regex-empty pattern) <-))\n  (env ((□? (pattern data)))))\""
  189
  117
  46
  26
  89
  8
  97
  1
  15/22
  67
  #f
  541/117
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  regex
  2
  25
  255
  app
  "\"'(eval\n  (app seq (-> (app regex-derivative pat1 c) <-) pat2)\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  189
  117
  46
  26
  89
  8
  97
  1
  15/22
  67
  #f
  541/117
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval\n  (app cons (-> pat1 <-) (app cons pat2 (app nil)))\n  (env ((□? (pat1 pat2)))))\""
  238
  148
  58
  32
  102
  10
  112
  1
  209/355
  78
  #f
  169/37
  ((4 4 0) (4 4 0) (4 4 0)))
'(shuffled-cache
  0
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval\n  (app cons (-> pat1 <-) (app cons pat2 (app nil)))\n  (env ((□? (pat1 pat2)))))\""
  239
  149
  58
  32
  102
  10
  112
  1
  209/360
  78
  #f
  680/149
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  25
  255
  app
  "\"'(eval\n  (letrec* (... caddr (regex-NULL (-> (app #f) <-)) regex-BLANK ...) ...)\n  (env ()))\""
  241
  151
  58
  32
  104
  10
  114
  1
  219/370
  80
  #t
  690/151
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval (match (-> (app regex-atom? re) <-) (#f) _) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  25
  255
  app
  "\"'(eval (match (-> (app null? data) <-) (#f) _) (env ((□? (pattern data)))))\""
  74
  53
  13
  8
  44
  4
  48
  1
  257/300
  44
  #f
  272/53
  ((11 11 0) (21/2 11 0) (21/2 11 0)))
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app eq? c (-> re <-)) (env ((□? (re c)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  25
  255
  app
  "\"'(eval\n  (app cons pat1 (-> (app cons pat2 (app nil)) <-))\n  (env ((□? (pat1 pat2)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  25
  255
  app
  "\"'(eval (app f (app cadr re) (-> (app caddr re) <-)) (env ((□? (re f)))))\""
  55
  20
  20
  15
  14
  3
  17
  1
  2/3
  9
  #f
  89/20
  ((2 2 0) (2 2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval\n  (app regex-derivative (-> pat1 <-) c)\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  84
  38
  26
  20
  27
  4
  31
  1
  20/29
  17
  #f
  169/38
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  regex
  2
  25
  255
  app
  "\"'(eval\n  (app\n   regex-match\n   (-> (app regex-derivative pattern (app car data)) <-)\n   (app cdr data))\n  (env ((□? (pattern data)))))\""
  118
  50
  40
  28
  33
  6
  39
  1
  26/41
  22
  #f
  111/25
  ((3/2 3/2 0) (3/2 3/2 0) (2 2 0)))
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-derivative pat (-> c <-)) (env ((□? (pat)) (□? (re c)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  25
  255
  app
  "\"'(eval\n  (app\n   cons\n   'seq\n   (->\n    (app\n     cons\n     'foo\n     (app cons (app cons 'rep (app cons 'bar (app nil))) (app nil)))\n    <-))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval (app null? (-> data <-)) (env ((□? (pattern data)))))\""
  44
  27
  11
  6
  26
  3
  29
  1
  17/18
  25
  #f
  46/9
  ((3 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  0
  regex
  2
  25
  255
  app
  "\"'(eval\n  (app and (app regex-rep? re) (-> (app f (app cadr re)) <-))\n  (env ((□? (re f)))))\""
  90
  44
  26
  20
  35
  6
  41
  1
  13/16
  34
  #f
  215/44
  ((5/2 5/2 0) (3 3 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval (app eq? (-> (app car re) <-) 'seq) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval (app car (-> (app cdr p) <-)) (env ((□? (p)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  match
  "\"'(eval (λ (re) (-> (match (app regex-empty? re) ...) <-)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval\n  (app seq (app regex-derivative pat1 c) (-> pat2 <-))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  59
  21
  22
  16
  17
  3
  20
  1
  15/19
  9
  #f
  31/7
  ((5/2 5/2 0) (5/2 5/2 0) (2 2 0)))
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app eq? (-> re <-) (app #t)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  25
  255
  app
  "\"'(eval (app cons 'foo (-> (app cons 'bar (app nil)) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval\n  (match (app match-alt re (λ (pat1 pat2) ...)) (#f) (c-x (-> c-x <-)))\n  (env ((□? (re)))))\""
  34
  19
  6
  9
  12
  2
  14
  1
  12/19
  10
  #f
  86/19
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  regex
  2
  25
  255
  app
  "\"'(eval\n  (app alt (app regex-empty pat1) (-> (app regex-empty pat2) <-))\n  (env ((□? (pat1 pat2)) (□? (re)))))\""
  69
  30
  20
  19
  18
  4
  22
  1
  3/5
  15
  #f
  9/2
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval\n  (app regex-derivative (-> pattern <-) (app car data))\n  (env ((□? (pattern data)))))\""
  104
  52
  30
  22
  39
  7
  46
  1
  28/41
  25
  #t
  233/52
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  regex
  2
  25
  255
  app
  "\"'(eval\n  (app\n   regex-match\n   (app\n    cons\n    'seq\n    (app\n     cons\n     'foo\n     (app cons (app cons 'rep (app cons 'bar (app nil))) (app nil))))\n   (-> (app cons 'foo (app cons 'bar (app nil))) <-))\n  (env ()))\""
  106
  54
  30
  22
  41
  7
  48
  1
  30/43
  27
  #t
  9/2
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  25
  255
  match
  "\"'(eval\n  (match\n   (app match-alt re (λ (pat1 pat2) ...))\n   ((#f) (-> (match (app match-rep re (λ (pat) ...)) ...) <-))\n   c-x)\n  (env ((□? (re c)))))\""
  129
  70
  33
  26
  50
  8
  58
  1
  37/57
  34
  #f
  157/35
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  regex
  2
  25
  255
  app
  "\"'(eval (match (-> (app regex-empty? pat2) <-) (#f) _) (env ((□? (pat1 pat2)))))\""
  285
  169
  70
  46
  109
  14
  123
  1
  66641/108570
  70
  #f
  746/169
  ((15 31/2 0) (27/2 27/2 0) (27/2 27/2 0)))
'(shuffled-cache
  0
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval (app equal? check (-> expect <-)) (env ((□? (check expect)))))\""
  291
  172
  72
  47
  111
  16
  127
  1
  68951/112035
  73
  #t
  761/172
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval\n  (app regex-derivative pat2 (-> c <-))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  25
  255
  app
  "\"'(eval (match (-> (app regex-null? pat2) <-) (#f) _) (env ((□? (pat1 pat2)))))\""
  197
  102
  58
  37
  62
  9
  71
  1
  14783/24024
  39
  #f
  149/34
  ((14 29/2 0) (14 14 0) (29/2 29/2 0)))
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app car (-> re <-)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval\n  (app and (-> (app pair? re) <-) (app eq? (app car re) 'rep))\n  (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  25
  255
  app
  "\"'(eval (app cons pat2 (-> (app nil) <-)) (env ((□? (pat1 pat2)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app symbol? (-> re <-)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval (match (-> (app regex-null? re) <-) (#f) _) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  25
  255
  match
  "\"'(eval\n  (match\n   (app regex-atom? re)\n   ((#f) (-> (match (app match-seq re (λ (pat1 pat2) ...)) ...) <-))\n   _)\n  (env ((□? (re)))))\""
  32
  17
  6
  9
  10
  2
  12
  1
  10/17
  8
  #f
  76/17
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval\n  (app regex-derivative pat1 (-> c <-))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app pair? (-> re <-)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  25
  255
  app
  "\"'(eval (app cons pat (-> (app nil) <-)) (env ((□? (pat)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (match (-> pair?-v <-) (cons pair?-c pair?-d) _) (env ((□? (pair?-v)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval\n  (match (app match-rep re (λ (pat) ...)) ((#f) (-> regex-NULL <-)) c-x)\n  (env ((□? (re c)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  25
  255
  app
  "\"'(eval\n  (app\n   regex-match\n   (->\n    (app\n     cons\n     'seq\n     (app\n      cons\n      'foo\n      (app cons (app cons 'rep (app cons 'bar (app nil))) (app nil))))\n    <-)\n   (app cons 'foo (app cons 'bar (app nil))))\n  (env ()))\""
  6
  5
  0
  1
  4
  0
  4
  1
  4/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-atom? (-> re <-)) (env ((□? (re c)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  match
  "\"'(eval (λ (cdr-v) (-> (match cdr-v ...) <-)) (env ((□? (cdr-v)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval\n  (λ (re) (-> (app or (app char? re) (app symbol? re)) <-))\n  (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  25
  255
  app
  "\"'(eval\n  (app alt (app regex-derivative pat1 c) (-> (app regex-derivative pat2 c) <-))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  37
  12
  14
  11
  6
  2
  8
  1
  1/2
  5
  #f
  53/12
  ((3/2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  regex
  2
  25
  255
  app
  "\"'(eval\n  (match\n   (app null? data)\n   ((#f)\n    (->\n     (app\n      regex-match\n      (app regex-derivative pattern (app car data))\n      (app cdr data))\n     <-))\n   _)\n  (env ((□? (pattern data)))))\""
  55
  22
  19
  14
  11
  5
  16
  1
  1/2
  9
  #f
  97/22
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  regex
  2
  25
  255
  app
  "\"'(eval\n  (app seq (-> (app regex-empty pat1) <-) (app regex-derivative pat2 c))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  76
  32
  26
  18
  16
  6
  22
  1
  13/29
  13
  #f
  141/32
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  regex
  2
  255
  match
  "\"'(eval\n  (match (app eq? c re) ((#f) (-> (match (app regex-atom? re) ...) <-)) _)\n  (env ((□? (re c)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  25
  255
  app
  "\"'(eval\n  (match\n   (app null? data)\n   (#f)\n   (_ (-> (app regex-empty? (app regex-empty pattern)) <-)))\n  (env ((□? (pattern data)))))\""
  42
  16
  14
  12
  6
  2
  8
  1
  9/26
  7
  #f
  71/16
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  regex
  2
  25
  255
  app
  "\"'(eval (match null?-v ((nil) (-> (app #t) <-)) _) (env ((□? (null?-v)))))\""
  45
  18
  14
  13
  6
  2
  8
  1
  3/10
  9
  #t
  9/2
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  25
  255
  match
  "\"'(eval\n  (match\n   (app regex-null? pat)\n   ((#f) (-> (match (app regex-empty? pat) ...) <-))\n   _)\n  (env ((□? (pat)))))\""
  123
  54
  39
  30
  26
  6
  32
  1
  14/27
  22
  #f
  119/27
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  0
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval (app cons (-> pat <-) (app nil)) (env ((□? (pat)))))\""
  124
  55
  39
  30
  26
  6
  32
  1
  56/111
  22
  #f
  22/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval (λ (cadr-v) (-> (app car (app cdr cadr-v)) <-)) (env ((□? (cadr-v)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  25
  255
  app
  "\"'(eval\n  (app\n   check-expect\n   (app\n    regex-match\n    (app\n     cons\n     'seq\n     (app\n      cons\n      'foo\n      (app cons (app cons 'rep (app cons 'bar (app nil))) (app nil))))\n    (app cons 'foo (app cons 'bar (app nil))))\n   (-> (app #f) <-))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval\n  (match (app regex-empty? pat1) (#f) (_ (-> pat2 <-)))\n  (env ((□? (pat1 pat2)))))\""
  163
  71
  58
  34
  44
  9
  53
  1
  101/156
  29
  #f
  313/71
  ((21/2 21/2 0) (11 11 0) (21/2 21/2 0)))
'(shuffled-cache
  0
  regex
  2
  25
  255
  app
  "\"'(eval\n  (app and (app regex-alt? re) (-> (app f (app cadr re) (app caddr re)) <-))\n  (env ((□? (re f)))))\""
  206
  100
  65
  41
  59
  11
  70
  1
  116/195
  42
  #f
  111/25
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval (match (-> (app regex-atom? re) <-) (#f) _) (env ((□? (re c)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  25
  255
  app
  "\"'(eval\n  (match\n   (app regex-null? pat2)\n   ((#f) (-> (app cons 'alt (app cons pat1 (app cons pat2 (app nil)))) <-))\n   _)\n  (env ((□? (pat1 pat2)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  25
  255
  app
  "\"'(eval\n  (let (... () (_ (-> (app debug-trace) <-)) () ...) ...)\n  (env ((□? (re c)))))\""
  10
  6
  0
  4
  1
  0
  1
  1
  1/6
  6
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  255
  match
  "\"'(eval\n  (match\n   (app regex-empty? re)\n   ((#f) (-> (match (app regex-null? re) ...) <-))\n   _)\n  (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval\n  (match (app regex-atom? re) (#f) (_ (-> regex-NULL <-)))\n  (env ((□? (re c)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app cdr (-> cadr-v <-)) (env ((□? (cadr-v)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (match cdr-v ((cons cdr-c cdr-d) (-> cdr-d <-))) (env ((□? (cdr-v)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval (app cdr (-> data <-)) (env ((□? (pattern data)))))\""
  42
  25
  11
  6
  24
  3
  27
  1
  59/60
  23
  #f
  128/25
  ((7/2 7/2 0) (7/2 7/2 0) (4 4 0)))
'(shuffled-cache
  0
  regex
  2
  25
  255
  match
  "\"'(eval\n  (λ (pat1 pat2) (-> (match (app regex-null? pat1) ...) <-))\n  (env ((□? (pat1 pat2)))))\""
  163
  86
  49
  28
  53
  9
  62
  1
  4001/6860
  45
  #f
  197/43
  ((9 9 0) (9 9 0) (9 9 0)))
'(shuffled-cache
  0
  regex
  2
  25
  255
  app
  "\"'(eval (match (-> (app regex-null? pat) <-) (#f) _) (env ((□? (pat)))))\""
  223
  118
  66
  39
  71
  12
  83
  1
  299/504
  57
  #f
  267/59
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app match-seq (-> re <-) (λ (pat1 pat2) ...)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app cadr re) (app caddr re)) (env ((□? (re f)))))\""
  9
  3
  3
  3
  0
  1
  1
  1
  0
  2
  #f
  16/3
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval (app cdr (-> (app cdr p) <-)) (env ((□? (p)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app pair? (-> re <-)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval\n  (app and (-> (app pair? re) <-) (app eq? (app car re) 'seq))\n  (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval (app car (-> (app cdr (app cdr p)) <-)) (env ((□? (p)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  25
  255
  app
  "\"'(eval (match (app regex-rep? re) (#f) (_ (-> (app #t) <-))) (env ((□? (re)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval\n  (app and (app pair? re) (-> (app eq? (app car re) 'rep) <-))\n  (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval (match (-> (app regex-null? re) <-) (#f) _) (env ((□? (re c)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval (match (-> (app eq? c re) <-) (#f) _) (env ((□? (re c)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-atom? (-> re <-)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-null? (-> re <-)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval (app regex-null? (-> pat <-)) (env ((□? (pat)))))\""
  64
  20
  25
  19
  13
  4
  17
  1
  13/18
  8
  #f
  22/5
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  0
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval (app regex-derivative (-> pat <-) c) (env ((□? (pat)) (□? (re c)))))\""
  65
  21
  25
  19
  13
  4
  17
  1
  13/19
  8
  #f
  92/21
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app eq? (-> re <-) (app #f)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-empty? (-> re <-)) (env ((□? (re c)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval (app regex-empty (-> pat1 <-)) (env ((□? (pat1 pat2)) (□? (re)))))\""
  57
  17
  23
  17
  13
  3
  16
  1
  13/17
  8
  #f
  76/17
  ((5/2 5/2 0) (5/2 5/2 0) (2 5/2 0)))
'(shuffled-cache
  0
  regex
  2
  25
  255
  app
  "\"'(eval (match (-> (app regex-empty? pat) <-) (#f) _) (env ((□? (pat)))))\""
  104
  45
  34
  25
  27
  5
  32
  1
  52/87
  19
  #f
  199/45
  ((7/2 4 0) (3 7/2 0) (3 3 0)))
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app match-seq (-> re <-) (λ (pat1 pat2) ...)) (env ((□? (re c)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  25
  255
  app
  "\"'(eval\n  (app cons (-> (app cons 'rep (app cons 'bar (app nil))) <-) (app nil))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app cadr (-> re <-)) (env ((□? (re f)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval (match (-> (app regex-empty? re) <-) (#f) _) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  25
  255
  app
  "\"'(eval\n  (λ (pat1 pat2)\n    (-> (app alt (app regex-empty pat1) (app regex-empty pat2)) <-))\n  (env ((□? (pat1 pat2)) (□? (re)))))\""
  34
  11
  12
  11
  6
  2
  8
  1
  6/11
  5
  #f
  49/11
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  regex
  2
  255
  match
  "\"'(eval (λ (pair?-v) (-> (match pair?-v ...) <-)) (env ((□? (pair?-v)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  25
  255
  app
  "\"'(eval (match (-> (app regex-empty? pat1) <-) (#f) _) (env ((□? (pat1 pat2)))))\""
  119
  71
  26
  22
  35
  4
  39
  1
  73/234
  25
  #f
  309/71
  ((17/2 17/2 0) (17/2 17/2 0) (17/2 17/2 0)))
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-seq? (-> re <-)) (env ((□? (re f)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-empty? (-> re <-)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  25
  255
  app
  "\"'(eval\n  (match (-> (app match-rep re (λ (pat) ...)) <-) (#f) c-x)\n  (env ((□? (re c)))))\""
  33
  16
  7
  10
  10
  2
  12
  1
  5/8
  8
  #f
  9/2
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  regex
  2
  25
  255
  app
  "\"'(eval\n  (λ (pat1 pat2)\n    (->\n     (app alt (app regex-derivative pat1 c) (app regex-derivative pat2 c))\n     <-))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  65
  27
  19
  19
  16
  4
  20
  1
  16/27
  13
  #f
  121/27
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  regex
  2
  25
  255
  app
  "\"'(eval\n  (app seq (app regex-derivative pat c) (-> (app rep pat) <-))\n  (env ((□? (pat)) (□? (re c)))))\""
  80
  37
  21
  22
  21
  5
  26
  1
  9/17
  17
  #f
  165/37
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval\n  (match (app match-alt re (λ (pat1 pat2) ...)) (#f) (c-x (-> c-x <-)))\n  (env ((□? (re c)))))\""
  102
  53
  23
  26
  30
  6
  36
  1
  25/48
  24
  #f
  236/53
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval (λ (p) (-> (app car (app cdr p)) <-)) (env ((□? (p)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  match
  "\"'(eval (λ (car-v) (-> (match car-v ...) <-)) (env ((□? (car-v)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  25
  255
  app
  "\"'(eval\n  (app seq (-> (app regex-empty pat1) <-) (app regex-empty pat2))\n  (env ((□? (pat1 pat2)) (□? (re)))))\""
  36
  11
  14
  11
  6
  2
  8
  1
  6/11
  5
  #f
  49/11
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  regex
  2
  25
  255
  app
  "\"'(eval (app cons 'rep (-> (app cons 'bar (app nil)) <-)) (env ()))\""
  38
  13
  14
  11
  8
  2
  10
  1
  8/13
  7
  #t
  59/13
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app cdr (-> p <-)) (env ((□? (p)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval\n  (app and (app pair? re) (-> (app eq? (app car re) 'seq) <-))\n  (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval (app regex-empty? (-> pat2 <-)) (env ((□? (pat1 pat2)))))\""
  161
  69
  58
  34
  42
  9
  51
  1
  19/30
  27
  #f
  101/23
  ((12 12 0) (21/2 11 0) (21/2 11 0)))
'(shuffled-cache
  0
  regex
  2
  25
  255
  app
  "\"'(eval\n  (app seq (-> (app regex-derivative pat c) <-) (app rep pat))\n  (env ((□? (pat)) (□? (re c)))))\""
  172
  79
  58
  35
  46
  9
  55
  1
  31/52
  30
  #f
  346/79
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  regex
  2
  25
  255
  app
  "\"'(eval (app cons 'rep (-> (app cons pat (app nil)) <-)) (env ((□? (pat)))))\""
  174
  81
  58
  35
  46
  9
  55
  1
  31/54
  32
  #t
  356/81
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app match-rep (-> re <-) (λ (pat) ...)) (env ((□? (re c)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  25
  255
  app
  "\"'(eval\n  (match (-> (app match-seq re (λ (pat1 pat2) ...)) <-) (#f) c-x)\n  (env ((□? (re c)))))\""
  31
  16
  6
  9
  10
  2
  12
  1
  5/8
  8
  #f
  9/2
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval (app regex-empty (-> pat2 <-)) (env ((□? (pat1 pat2)) (□? (re)))))\""
  85
  36
  28
  21
  26
  5
  31
  1
  12/17
  16
  #f
  40/9
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  regex
  2
  25
  255
  match
  "\"'(eval\n  (match\n   (app regex-empty? pat1)\n   ((#f) (-> (match (app regex-empty? pat2) ...) <-))\n   _)\n  (env ((□? (pat1 pat2)))))\""
  249
  142
  66
  41
  84
  11
  95
  1
  305/483
  53
  #f
  621/142
  ((29/2 29/2 0) (29/2 29/2 0) (29/2 29/2 0)))
'(shuffled-cache
  0
  regex
  2
  25
  255
  app
  "\"'(eval (match null?-v (nil) (_ (-> (app #f) <-))) (env ((□? (null?-v)))))\""
  252
  144
  66
  42
  84
  11
  95
  1
  305/497
  55
  #t
  631/144
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  25
  255
  app
  "\"'(eval\n  (match (app regex-atom? re) (#f) (_ (-> (app #f) <-)))\n  (env ((□? (re)))))\""
  254
  146
  66
  42
  84
  11
  95
  1
  305/511
  57
  #t
  641/146
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-rep? (-> re <-)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  25
  255
  app
  "\"'(eval (app eq? re (-> (app #f) <-)) (env ((□? (re)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval\n  (app regex-derivative (-> pat1 <-) c)\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  60
  19
  23
  18
  13
  3
  16
  1
  13/19
  10
  #f
  86/19
  ((2 2 0) (5/2 5/2 0) (2 2 0)))
'(shuffled-cache
  0
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval (app regex-null? (-> pat2 <-)) (env ((□? (pat1 pat2)))))\""
  159
  63
  61
  35
  36
  9
  45
  1
  29/50
  28
  #f
  40/9
  ((15/2 15/2 0) (15/2 8 0) (15/2 8 0)))
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app match-alt (-> re <-) (λ (pat1 pat2) ...)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  25
  255
  app
  "\"'(eval\n  (letrec* (... regex-NULL (regex-BLANK (-> (app #t) <-)) regex-alt? ...) ...)\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  25
  255
  app
  "\"'(eval\n  (app\n   regex-match\n   (app regex-derivative pattern (app car data))\n   (-> (app cdr data) <-))\n  (env ((□? (pattern data)))))\""
  52
  34
  11
  7
  28
  3
  31
  1
  46/51
  26
  #f
  88/17
  ((7 15/2 0) (7 15/2 0) (15/2 15/2 0)))
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-rep? (-> re <-)) (env ((□? (re f)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  match
  "\"'(eval\n  (match\n   (app regex-null? re)\n   ((#f) (-> (match (app regex-atom? re) ...) <-))\n   _)\n  (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  25
  255
  match
  "\"'(eval\n  (match\n   (app regex-null? pat1)\n   ((#f) (-> (match (app regex-null? pat2) ...) <-))\n   _)\n  (env ((□? (pat1 pat2)))))\""
  122
  61
  38
  23
  29
  6
  35
  1
  242/595
  22
  #f
  266/61
  ((17/2 17/2 0) (17/2 9 0) (17/2 9 0)))
'(shuffled-cache
  1
  regex
  2
  255
  match
  "\"'(eval\n  (match (app regex-null? re) ((#f) (-> (match (app eq? c re) ...) <-)) _)\n  (env ((□? (re c)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval\n  (match (app regex-null? pat1) (#f) (_ (-> pat2 <-)))\n  (env ((□? (pat1 pat2)))))\""
  91
  34
  38
  19
  17
  6
  23
  1
  14/31
  14
  #f
  75/17
  ((13/2 13/2 0) (6 13/2 0) (13/2 13/2 0)))
'(shuffled-cache
  1
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval (match (app eq? c re) (#f) (_ (-> regex-BLANK <-))) (env ((□? (re c)))))\""
  94
  37
  38
  19
  19
  6
  25
  1
  8/17
  17
  #t
  165/37
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval\n  (app and (-> (app pair? re) <-) (app eq? (app car re) 'seq))\n  (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  25
  255
  app
  "\"'(eval\n  (app seq (-> (app regex-empty pat1) <-) (app regex-derivative pat2 c))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  36
  11
  14
  11
  6
  2
  8
  1
  6/11
  5
  #f
  49/11
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  regex
  2
  25
  255
  lettypes
  "\"'(eval ((top) lettypes (cons ... nil) ...) (env ()))\""
  64
  29
  21
  14
  24
  7
  31
  1
  24/29
  12
  #f
  128/29
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  regex
  2
  25
  255
  app
  "\"'(eval\n  (app\n   check-expect\n   (->\n    (app\n     regex-match\n     (app\n      cons\n      'seq\n      (app\n       cons\n       'foo\n       (app cons (app cons 'rep (app cons 'bar (app nil))) (app nil))))\n     (app cons 'foo (app cons 'bar (app nil))))\n    <-)\n   (app #f))\n  (env ()))\""
  64
  29
  21
  14
  24
  7
  31
  1
  24/29
  12
  #f
  128/29
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app pair? (-> re <-)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  match
  "\"'(eval (λ (re) (-> (match (app regex-empty? re) ...) <-)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval\n  (match (app regex-null? pat2) (#f) (_ (-> regex-NULL <-)))\n  (env ((□? (pat1 pat2)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval (λ (p) (-> (app car (app cdr (app cdr p))) <-)) (env ((□? (p)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  25
  255
  app
  "\"'(eval (app f (app cadr re) (-> (app caddr re) <-)) (env ((□? (re f)))))\""
  52
  18
  20
  14
  14
  3
  17
  1
  3/4
  7
  #f
  79/18
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  regex
  2
  25
  255
  match
  "\"'(eval\n  (match\n   (app match-alt re (λ (pat1 pat2) ...))\n   ((#f) (-> (match (app regex-rep? re) ...) <-))\n   c-x)\n  (env ((□? (re)))))\""
  76
  30
  27
  19
  19
  5
  24
  1
  17/28
  12
  #f
  22/5
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval (app cdr (-> data <-)) (env ((□? (pattern data)))))\""
  105
  56
  30
  19
  44
  7
  51
  1
  173/240
  34
  #f
  263/56
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval (match (-> (app regex-empty? re) <-) (#f) _) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app cdr (-> cadr-v <-)) (env ((□? (cadr-v)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  match
  "\"'(eval\n  (match\n   (app regex-empty? re)\n   ((#f) (-> (match (app regex-null? re) ...) <-))\n   _)\n  (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  25
  255
  app
  "\"'(eval\n  (app alt (app regex-empty pat1) (-> (app regex-empty pat2) <-))\n  (env ((□? (pat1 pat2)) (□? (re)))))\""
  36
  11
  14
  11
  6
  2
  8
  1
  6/11
  5
  #f
  49/11
  ((3/2 3/2 0) (2 2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  regex
  2
  25
  255
  app
  "\"'(eval\n  (match (app regex-empty? re) (#f) (_ (-> (app #t) <-)))\n  (env ((□? (re)))))\""
  38
  13
  14
  11
  6
  2
  8
  1
  6/13
  7
  #t
  59/13
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval\n  (app regex-derivative (-> pat1 <-) c)\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  92
  30
  37
  25
  19
  5
  24
  1
  19/30
  15
  #f
  9/2
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval (app equal? (-> check <-) expect) (env ((□? (check expect)))))\""
  113
  41
  44
  28
  29
  10
  39
  1
  29/41
  19
  #f
  183/41
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  regex
  2
  25
  255
  app
  "\"'(eval (match null?-v (nil) (_ (-> (app #f) <-))) (env ((□? (null?-v)))))\""
  116
  43
  44
  29
  29
  10
  39
  1
  29/43
  21
  #t
  193/43
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  25
  255
  app
  "\"'(eval\n  (app seq (-> (app regex-derivative pat1 c) <-) pat2)\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  143
  59
  51
  33
  38
  11
  49
  1
  11/17
  27
  #f
  263/59
  ((3/2 2 0) (2 2 0) (3/2 2 0)))
'(shuffled-cache
  1
  regex
  2
  25
  255
  match
  "\"'(eval (λ (null?-v) (-> (match null?-v ...) <-)) (env ((□? (null?-v)))))\""
  233
  147
  51
  35
  111
  11
  122
  1
  3697/4970
  81
  #f
  100/21
  ((18 37/2 0) (39/2 20 0) (18 18 0)))
'(shuffled-cache
  1
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval (app regex-derivative (-> pat <-) c) (env ((□? (pat)) (□? (re c)))))\""
  247
  158
  53
  36
  118
  11
  129
  1
  3767/5320
  86
  #f
  749/158
  ((1/2 1/2 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  regex
  2
  25
  255
  app
  "\"'(eval\n  (app\n   alt\n   (-> (app seq (app regex-derivative pat1 c) pat2) <-)\n   (app seq (app regex-empty pat1) (app regex-derivative pat2 c)))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  279
  173
  66
  40
  127
  13
  140
  1
  74/105
  93
  #f
  816/173
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval (app regex-null? (-> pat1 <-)) (env ((□? (pat1 pat2)))))\""
  344
  233
  66
  45
  158
  13
  171
  1
  12851/19530
  112
  #f
  1075/233
  ((15/2 15/2 0) (15/2 15/2 0) (7 15/2 0)))
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval\n  (app and (app pair? re) (-> (app eq? (app car re) 'alt) <-))\n  (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval\n  (app regex-derivative pat1 (-> c <-))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval (app regex-null? (-> pat2 <-)) (env ((□? (pat1 pat2)))))\""
  161
  69
  58
  34
  42
  9
  51
  1
  19/30
  27
  #f
  101/23
  ((11 11 0) (12 25/2 0) (21/2 11 0)))
'(shuffled-cache
  1
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval\n  (match (app match-alt re (λ (pat1 pat2) ...)) (#f) (c-x (-> c-x <-)))\n  (env ((□? (re)))))\""
  188
  86
  64
  38
  52
  11
  63
  1
  125/201
  35
  #f
  379/86
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval\n  (match (app regex-null? re) (#f) (_ (-> regex-NULL <-)))\n  (env ((□? (re c)))))\""
  191
  89
  64
  38
  54
  11
  65
  1
  131/210
  38
  #t
  394/89
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  25
  255
  app
  "\"'(eval (match (-> (app regex-null? pat1) <-) (#f) _) (env ((□? (pat1 pat2)))))\""
  282
  169
  68
  45
  99
  12
  111
  1
  1441/2580
  65
  #f
  57/13
  ((17/2 17/2 0) (8 8 0) (19/2 19/2 0)))
'(shuffled-cache
  1
  regex
  2
  25
  255
  app
  "\"'(eval (app cons 'foo (-> (app cons 'bar (app nil)) <-)) (env ()))\""
  284
  171
  68
  45
  101
  12
  113
  1
  1501/2640
  67
  #t
  751/171
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  25
  255
  app
  "\"'(eval\n  (letrec*\n   (car ... check-expect)\n   (->\n    (app\n     check-expect\n     (app\n      regex-match\n      (app\n       cons\n       'seq\n       (app\n        cons\n        'foo\n        (app cons (app cons 'rep (app cons 'bar (app nil))) (app nil))))\n      (app cons 'foo (app cons 'bar (app nil))))\n     (app #f))\n    <-))\n  (env ()))\""
  310
  187
  75
  48
  117
  17
  134
  1
  1981/3120
  74
  #f
  822/187
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval (match (-> (app regex-atom? re) <-) (#f) _) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval (app cons (-> pat2 <-) (app nil)) (env ((□? (pat1 pat2)))))\""
  91
  34
  38
  19
  17
  6
  23
  1
  14/31
  14
  #f
  75/17
  ((6 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(shuffled-cache
  1
  regex
  2
  25
  255
  app
  "\"'(eval\n  (app\n   check-expect\n   (app\n    regex-match\n    (app\n     cons\n     'seq\n     (app\n      cons\n      'foo\n      (app cons (app cons 'rep (app cons 'bar (app nil))) (app nil))))\n    (app cons 'foo (app cons 'bar (app nil))))\n   (-> (app #f) <-))\n  (env ()))\""
  93
  36
  38
  19
  19
  6
  25
  1
  16/33
  16
  #t
  40/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  25
  255
  app
  "\"'(eval\n  (app and (-> (app regex-alt? re) <-) (app f (app cadr re) (app caddr re)))\n  (env ((□? (re f)))))\""
  117
  47
  44
  26
  24
  8
  32
  1
  21/44
  21
  #f
  209/47
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app cadr re)) (env ((□? (re f)))))\""
  122
  49
  46
  27
  24
  9
  33
  1
  21/46
  23
  #t
  219/49
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app eq? (-> c <-) re) (env ((□? (re c)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval\n  (match (app regex-null? pat1) (#f) (_ (-> regex-NULL <-)))\n  (env ((□? (pat1 pat2)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval (app eq? (-> (app car re) <-) 'rep) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  25
  255
  app
  "\"'(eval (app eq? re (-> (app #t) <-)) (env ((□? (re)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval\n  (match (app regex-atom? re) (#f) (_ (-> regex-NULL <-)))\n  (env ((□? (re c)))))\""
  7
  5
  0
  2
  2
  0
  2
  1
  2/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  25
  255
  app
  "\"'(eval\n  (app cons pat1 (-> (app cons pat2 (app nil)) <-))\n  (env ((□? (pat1 pat2)))))\""
  10
  7
  0
  3
  2
  0
  2
  1
  2/7
  7
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval (app car (-> (app cdr (app cdr cadr-v)) <-)) (env ((□? (cadr-v)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  25
  255
  app
  "\"'(eval (app cons 'bar (-> (app nil) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  25
  255
  app
  "\"'(eval\n  (app and (-> (app regex-rep? re) <-) (app f (app cadr re)))\n  (env ((□? (re f)))))\""
  28
  13
  7
  8
  7
  2
  9
  1
  7/13
  7
  #f
  59/13
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app car (-> re <-)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  25
  255
  app
  "\"'(eval\n  (λ (re f) (-> (app and (app regex-rep? re) (app f (app cadr re))) <-))\n  (env ((□? (re f)))))\""
  28
  13
  7
  8
  5
  2
  7
  1
  5/13
  6
  #f
  58/13
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  regex
  2
  255
  let
  "\"'(eval (λ (re c) (-> (let (_) ...) <-)) (env ((□? (re c)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  25
  255
  app
  "\"'(eval (app f (-> (app cadr re) <-) (app caddr re)) (env ((□? (re f)))))\""
  50
  14
  21
  15
  10
  3
  13
  1
  5/7
  6
  #f
  31/7
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval (app regex-empty? (-> pat2 <-)) (env ((□? (pat1 pat2)))))\""
  180
  81
  62
  37
  50
  10
  60
  1
  107/174
  31
  #f
  355/81
  ((10 10 0) (21/2 11 0) (10 10 0)))
'(shuffled-cache
  1
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval (app regex-empty? (-> pat <-)) (env ((□? (pat)))))\""
  210
  107
  64
  39
  64
  10
  74
  1
  59/96
  40
  #f
  468/107
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval\n  (app and (-> (app pair? re) <-) (app eq? (app car re) 'alt))\n  (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval (app regex-null? (-> pat1 <-)) (env ((□? (pat1 pat2)))))\""
  91
  34
  38
  19
  17
  6
  23
  1
  14/31
  14
  #f
  75/17
  ((13/2 13/2 0) (7 15/2 0) (13/2 13/2 0)))
'(shuffled-cache
  1
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval (app regex-empty (-> pat2 <-)) (env ((□? (pat1 pat2)) (□? (re)))))\""
  147
  55
  60
  32
  34
  9
  43
  1
  29/50
  23
  #f
  243/55
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval (app regex-empty (-> pat1 <-)) (env ((□? (pat1 pat2)) (□? (re c)))))\""
  181
  79
  66
  36
  50
  10
  60
  1
  37/60
  32
  #f
  348/79
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  regex
  2
  25
  255
  app
  "\"'(eval\n  (match\n   (app regex-null? pat2)\n   ((#f) (-> (app cons 'alt (app cons pat1 (app cons pat2 (app nil)))) <-))\n   _)\n  (env ((□? (pat1 pat2)))))\""
  188
  84
  66
  38
  51
  10
  61
  1
  149/248
  37
  #t
  94/21
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  25
  255
  app
  "\"'(eval (app eq? re (-> (app #f) <-)) (env ((□? (re)))))\""
  191
  86
  66
  39
  51
  10
  61
  1
  149/256
  39
  #t
  193/43
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app car (-> re <-)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  25
  255
  app
  "\"'(eval\n  (match (-> (app match-alt re (λ (pat1 pat2) ...)) <-) (#f) c-x)\n  (env ((□? (re c)))))\""
  31
  16
  6
  9
  10
  2
  12
  1
  5/8
  8
  #f
  9/2
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  regex
  2
  255
  match
  "\"'(eval (let (_) (-> (match (app regex-empty? re) ...) <-)) (env ((□? (re c)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval (app regex-empty (-> pattern <-)) (env ((□? (pattern data)))))\""
  50
  23
  17
  10
  22
  4
  26
  1
  14/15
  11
  #t
  103/23
  ((5/2 3 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app pair? (-> re <-)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app match-seq (-> re <-) (λ (pat1 pat2) ...)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval (app regex-empty? (-> pat1 <-)) (env ((□? (pat1 pat2)))))\""
  85
  42
  26
  17
  19
  4
  23
  1
  1/3
  15
  #f
  61/14
  ((11/2 6 0) (6 6 0) (6 6 0)))
'(shuffled-cache
  1
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval\n  (app regex-derivative (-> pattern <-) (app car data))\n  (env ((□? (pattern data)))))\""
  109
  63
  29
  17
  39
  6
  45
  1
  14/29
  24
  #t
  92/21
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval (λ (re) (-> (app eq? re (app #t)) <-)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app cdr (-> p <-)) (env ((□? (p)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  25
  255
  app
  "\"'(eval\n  (app cons 'seq (-> (app cons pat1 (app cons pat2 (app nil))) <-))\n  (env ((□? (pat1 pat2)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval\n  (match (app regex-empty? pat1) (#f) (_ (-> pat2 <-)))\n  (env ((□? (pat1 pat2)))))\""
  171
  77
  58
  36
  44
  9
  53
  1
  671/1092
  35
  #f
  349/77
  ((23/2 23/2 0) (11 11 0) (25/2 25/2 0)))
'(shuffled-cache
  1
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app cadr re) (app caddr re)) (env ((□? (re f)))))\""
  176
  79
  61
  36
  44
  10
  54
  1
  671/1134
  37
  #t
  359/79
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  regex
  2
  25
  255
  app
  "\"'(eval\n  (λ (check expect) (-> (app equal? check expect) <-))\n  (env ((□? (check expect)))))\""
  201
  94
  68
  39
  56
  15
  71
  1
  902/1407
  43
  #f
  425/94
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  regex
  2
  25
  255
  app
  "\"'(eval\n  (match (-> (app match-seq re (λ (pat1 pat2) ...)) <-) (#f) c-x)\n  (env ((□? (re)))))\""
  226
  109
  74
  43
  65
  17
  82
  1
  1091/1722
  50
  #f
  492/109
  ((3/2 3/2 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval\n  (app and (app pair? re) (-> (app eq? (app car re) 'seq) <-))\n  (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app pair? (-> re <-)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  25
  255
  app
  "\"'(eval (match (-> (app regex-null? pat2) <-) (#f) _) (env ((□? (pat1 pat2)))))\""
  118
  57
  38
  23
  29
  6
  35
  1
  44/105
  22
  #f
  250/57
  ((19/2 19/2 0) (8 8 0) (17/2 17/2 0)))
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval (app eq? (-> (app car re) <-) 'alt) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval (app car (-> (app cdr (app cdr p)) <-)) (env ((□? (p)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval\n  (match (app match-rep re (λ (pat) ...)) (#f) (c-x (-> c-x <-)))\n  (env ((□? (re c)))))\""
  34
  17
  7
  10
  10
  2
  12
  1
  10/17
  8
  #f
  76/17
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app cadr (-> re <-)) (env ((□? (re f)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  25
  255
  app
  "\"'(eval (match (app regex-rep? re) (#f) (_ (-> (app #t) <-))) (env ((□? (re)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval\n  (app cons (-> pat1 <-) (app cons pat2 (app nil)))\n  (env ((□? (pat1 pat2)))))\""
  93
  36
  38
  19
  17
  6
  23
  1
  14/33
  16
  #f
  40/9
  ((8 8 0) (6 13/2 0) (13/2 13/2 0)))
'(shuffled-cache
  1
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval\n  (match (app match-seq re (λ (pat1 pat2) ...)) (#f) (c-x (-> c-x <-)))\n  (env ((□? (re)))))\""
  124
  53
  44
  27
  27
  8
  35
  1
  12/25
  24
  #f
  236/53
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  regex
  2
  25
  255
  match
  "\"'(eval\n  (match\n   (app regex-empty? pat1)\n   ((#f) (-> (match (app regex-empty? pat2) ...) <-))\n   _)\n  (env ((□? (pat1 pat2)))))\""
  305
  191
  68
  46
  105
  12
  117
  1
  103417/196350
  69
  #f
  833/191
  ((31/2 16 0) (16 33/2 0) (16 33/2 0)))
'(shuffled-cache
  1
  regex
  2
  25
  255
  app
  "\"'(eval\n  (letrec* (... regex-NULL (regex-BLANK (-> (app #t) <-)) regex-alt? ...) ...)\n  (env ()))\""
  307
  193
  68
  46
  107
  12
  119
  1
  108037/200970
  71
  #t
  843/193
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app match-rep (-> re <-) (λ (pat) ...)) (env ((□? (re c)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  match
  "\"'(eval\n  (match (app eq? c re) ((#f) (-> (match (app regex-atom? re) ...) <-)) _)\n  (env ((□? (re c)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  25
  255
  match
  "\"'(eval\n  (λ (pat1 pat2) (-> (match (app regex-null? pat1) ...) <-))\n  (env ((□? (pat1 pat2)))))\""
  122
  61
  38
  23
  29
  6
  35
  1
  242/595
  22
  #f
  266/61
  ((9 19/2 0) (19/2 10 0) (17/2 17/2 0)))
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval\n  (λ (re) (-> (app and (app pair? re) (app eq? (app car re) 'rep)) <-))\n  (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval (app cons (-> pat <-) (app nil)) (env ((□? (pat)))))\""
  64
  20
  25
  19
  13
  4
  17
  1
  13/18
  8
  #f
  22/5
  ((3 3 0) (5/2 3 0) (3 3 0)))
'(shuffled-cache
  1
  regex
  2
  25
  255
  app
  "\"'(eval\n  (λ (pat1 pat2)\n    (->\n     (app\n      alt\n      (app seq (app regex-derivative pat1 c) pat2)\n      (app seq (app regex-empty pat1) (app regex-derivative pat2 c)))\n     <-))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  96
  31
  37
  28
  19
  6
  25
  1
  19/29
  13
  #f
  137/31
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  regex
  2
  25
  255
  app
  "\"'(eval\n  (app cons pat1 (-> (app cons pat2 (app nil)) <-))\n  (env ((□? (pat1 pat2)))))\""
  98
  33
  37
  28
  19
  6
  25
  1
  19/31
  15
  #t
  49/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  25
  255
  app
  "\"'(eval (match (-> (app regex-null? pat1) <-) (#f) _) (env ((□? (pat1 pat2)))))\""
  222
  118
  63
  41
  64
  10
  74
  1
  175/342
  45
  #f
  517/118
  ((11 11 0) (11 23/2 0) (23/2 23/2 0)))
'(shuffled-cache
  1
  regex
  2
  25
  255
  app
  "\"'(eval\n  (match (-> (app match-rep re (λ (pat) ...)) <-) (#f) c-x)\n  (env ((□? (re c)))))\""
  246
  132
  70
  44
  73
  12
  85
  1
  229/426
  51
  #f
  193/44
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval\n  (app regex-derivative (-> pat1 <-) c)\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  260
  143
  72
  45
  80
  12
  92
  1
  235/456
  56
  #f
  628/143
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  regex
  2
  25
  255
  match
  "\"'(eval\n  (match\n   (app regex-atom? re)\n   ((#f) (-> (match (app match-seq re (λ (pat1 pat2) ...)) ...) <-))\n   _)\n  (env ((□? (re c)))))\""
  281
  159
  74
  48
  89
  13
  102
  1
  277/540
  63
  #f
  233/53
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app caddr (-> re <-)) (env ((□? (re f)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app match-seq (-> re <-) (λ (pat1 pat2) ...)) (env ((□? (re c)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  25
  255
  app
  "\"'(eval\n  (app seq (app regex-empty pat1) (-> (app regex-empty pat2) <-))\n  (env ((□? (pat1 pat2)) (□? (re)))))\""
  36
  11
  14
  11
  6
  2
  8
  1
  6/11
  5
  #f
  49/11
  ((3/2 2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  regex
  2
  25
  255
  app
  "\"'(eval\n  (λ (pat) (-> (app seq (app regex-derivative pat c) (app rep pat)) <-))\n  (env ((□? (pat)) (□? (re c)))))\""
  65
  22
  27
  16
  12
  4
  16
  1
  6/11
  10
  #f
  49/11
  ((2 2 0) (3/2 3/2 0) (3/2 2 0)))
'(shuffled-cache
  1
  regex
  2
  25
  255
  app
  "\"'(eval\n  (app\n   cons\n   'foo\n   (-> (app cons (app cons 'rep (app cons 'bar (app nil))) (app nil)) <-))\n  (env ()))\""
  67
  24
  27
  16
  14
  4
  18
  1
  7/12
  12
  #t
  9/2
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  25
  255
  app
  "\"'(eval (app f (-> (app cadr re) <-) (app caddr re)) (env ((□? (re f)))))\""
  116
  38
  48
  30
  24
  7
  31
  1
  12/19
  18
  #f
  85/19
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  regex
  2
  25
  255
  app
  "\"'(eval (match (-> (app regex-null? pat) <-) (#f) _) (env ((□? (pat)))))\""
  154
  69
  52
  33
  40
  8
  48
  1
  41/69
  30
  #f
  102/23
  ((7/2 7/2 0) (3 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  1
  regex
  2
  255
  match
  "\"'(eval (λ (pair?-v) (-> (match pair?-v ...) <-)) (env ((□? (pair?-v)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  match
  "\"'(eval (λ (cdr-v) (-> (match cdr-v ...) <-)) (env ((□? (cdr-v)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval\n  (app and (-> (app pair? re) <-) (app eq? (app car re) 'rep))\n  (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval (app or (app char? re) (-> (app symbol? re) <-)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-alt? (-> re <-)) (env ((□? (re f)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  25
  255
  app
  "\"'(eval (app cons pat (-> (app nil) <-)) (env ((□? (pat)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  25
  255
  app
  "\"'(eval (match (-> (app regex-empty? pat) <-) (#f) _) (env ((□? (pat)))))\""
  93
  38
  32
  23
  21
  5
  26
  1
  25/39
  18
  #f
  85/19
  ((5 5 0) (5 5 0) (5 5 0)))
'(shuffled-cache
  1
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval (app regex-null? (-> pat2 <-)) (env ((□? (pat1 pat2)))))\""
  169
  71
  63
  35
  37
  10
  47
  1
  329/636
  31
  #f
  315/71
  ((6 13/2 0) (6 6 0) (6 13/2 0)))
'(shuffled-cache
  1
  regex
  2
  25
  255
  match
  "\"'(eval\n  (match\n   (app regex-atom? re)\n   ((#f) (-> (match (app match-seq re (λ (pat1 pat2) ...)) ...) <-))\n   _)\n  (env ((□? (re)))))\""
  196
  88
  69
  39
  47
  12
  59
  1
  449/840
  39
  #f
  391/88
  ((1 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  regex
  2
  25
  255
  app
  "\"'(eval\n  (app regex-derivative pattern (-> (app car data) <-))\n  (env ((□? (pattern data)))))\""
  245
  133
  72
  40
  86
  14
  100
  1
  307/516
  73
  #f
  621/133
  ((9 19/2 0) (19/2 19/2 0) (19/2 10 0)))
'(shuffled-cache
  1
  regex
  2
  25
  255
  app
  "\"'(eval (match (-> (app regex-empty? pat1) <-) (#f) _) (env ((□? (pat1 pat2)))))\""
  336
  216
  72
  48
  128
  14
  142
  1
  41513/75660
  100
  #f
  245/54
  ((10 23/2 0) (9 9 0) (9 9 0)))
'(shuffled-cache
  1
  regex
  2
  25
  255
  app
  "\"'(eval\n  (match (-> (app match-alt re (λ (pat1 pat2) ...)) <-) (#f) c-x)\n  (env ((□? (re)))))\""
  356
  231
  74
  51
  137
  15
  152
  1
  46973/85800
  107
  #f
  349/77
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval\n  (match (app regex-null? pat) (#f) (_ (-> regex-BLANK <-)))\n  (env ((□? (pat)))))\""
  359
  234
  74
  51
  139
  15
  154
  1
  48533/88140
  110
  #t
  59/13
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (match car-v ((cons car-c car-d) (-> car-c <-))) (env ((□? (car-v)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval\n  (app seq (app regex-derivative pat1 c) (-> pat2 <-))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  59
  21
  22
  16
  17
  3
  20
  1
  15/19
  9
  #f
  31/7
  ((2 2 0) (2 5/2 0) (2 5/2 0)))
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-atom? (-> re <-)) (env ((□? (re c)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app cadr (-> re <-)) (env ((□? (re f)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  25
  255
  match
  "\"'(eval\n  (λ (pattern data) (-> (match (app null? data) ...) <-))\n  (env ((□? (pattern data)))))\""
  142
  97
  27
  18
  85
  6
  91
  1
  51/56
  62
  #f
  470/97
  ((15 31/2 0) (16 16 0) (16 16 0)))
'(shuffled-cache
  1
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval\n  (match (app match-seq re (λ (pat1 pat2) ...)) (#f) (c-x (-> c-x <-)))\n  (env ((□? (re c)))))\""
  173
  114
  33
  26
  95
  8
  103
  1
  193/236
  70
  #f
  91/19
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval (match (-> (app eq? c re) <-) (#f) _) (env ((□? (re c)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval\n  (match (app match-rep re (λ (pat) ...)) ((#f) (-> regex-NULL <-)) c-x)\n  (env ((□? (re c)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  25
  255
  app
  "\"'(eval (app cons 'bar (-> (app nil) <-)) (env ()))\""
  6
  5
  0
  1
  4
  0
  4
  1
  4/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app eq? c (-> re <-)) (env ((□? (re c)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval (app cons (-> pat2 <-) (app nil)) (env ((□? (pat1 pat2)))))\""
  161
  69
  58
  34
  42
  9
  51
  1
  19/30
  27
  #f
  101/23
  ((21/2 11 0) (21/2 11 0) (21/2 11 0)))
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval\n  (app regex-derivative pat2 (-> c <-))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval (match (-> (app regex-null? re) <-) (#f) _) (env ((□? (re c)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  25
  255
  app
  "\"'(eval\n  (app and (app regex-alt? re) (-> (app f (app cadr re) (app caddr re)) <-))\n  (env ((□? (re f)))))\""
  62
  30
  15
  17
  16
  3
  19
  1
  9/17
  14
  #f
  68/15
  ((7/2 7/2 0) (4 4 0) (7/2 7/2 0)))
'(shuffled-cache
  1
  regex
  2
  25
  255
  app
  "\"'(eval\n  (let (... () (_ (-> (app debug-trace) <-)) () ...) ...)\n  (env ((□? (re c)))))\""
  68
  34
  15
  19
  17
  3
  20
  1
  10/21
  18
  #t
  78/17
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  25
  255
  app
  "\"'(eval\n  (app cons (app cons 'rep (app cons 'bar (app nil))) (-> (app nil) <-))\n  (env ()))\""
  70
  36
  15
  19
  19
  3
  22
  1
  12/23
  20
  #t
  83/18
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app eq? (-> re <-) (app #t)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval\n  (match (app regex-empty? pat) (#f) (_ (-> regex-BLANK <-)))\n  (env ((□? (pat)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval (λ (re) (-> (app eq? re (app #f)) <-)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval\n  (λ (cadr-v) (-> (app car (app cdr (app cdr cadr-v))) <-))\n  (env ((□? (cadr-v)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval (app cdr (-> (app cdr p) <-)) (env ((□? (p)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (match (-> cdr-v <-) (cons cdr-c cdr-d)) (env ((□? (cdr-v)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval\n  (app cons (-> pat1 <-) (app cons pat2 (app nil)))\n  (env ((□? (pat1 pat2)))))\""
  85
  42
  26
  17
  19
  4
  23
  1
  1/3
  15
  #f
  61/14
  ((6 13/2 0) (6 6 0) (6 6 0)))
'(shuffled-cache
  1
  regex
  2
  25
  255
  app
  "\"'(eval\n  (match\n   (app regex-empty? pat2)\n   ((#f) (-> (app cons 'seq (app cons pat1 (app cons pat2 (app nil)))) <-))\n   _)\n  (env ((□? (pat1 pat2)))))\""
  94
  47
  26
  21
  19
  4
  23
  1
  4/13
  20
  #t
  211/47
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  25
  255
  app
  "\"'(eval (match (app regex-rep? re) ((#f) (-> (app #f) <-)) _) (env ((□? (re)))))\""
  96
  49
  26
  21
  19
  4
  23
  1
  2/7
  22
  #t
  221/49
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  25
  255
  app
  "\"'(eval\n  (match (app regex-null? re) (#f) (_ (-> (app #f) <-)))\n  (env ((□? (re)))))\""
  98
  51
  26
  21
  19
  4
  23
  1
  4/15
  24
  #t
  77/17
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app match-alt (-> re <-) (λ (pat1 pat2) ...)) (env ((□? (re c)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval (app regex-empty (-> pat1 <-)) (env ((□? (pat1 pat2)) (□? (re)))))\""
  57
  17
  23
  17
  13
  3
  16
  1
  13/17
  8
  #f
  76/17
  ((2 2 0) (2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  regex
  2
  25
  255
  app
  "\"'(eval (match (-> (app regex-null? pat2) <-) (#f) _) (env ((□? (pat1 pat2)))))\""
  232
  128
  64
  40
  80
  10
  90
  1
  321/496
  49
  #f
  561/128
  ((31/2 31/2 0) (14 29/2 0) (14 29/2 0)))
'(shuffled-cache
  1
  regex
  2
  25
  255
  app
  "\"'(eval\n  (match pair?-v (cons pair?-c pair?-d) (_ (-> (app #f) <-)))\n  (env ((□? (pair?-v)))))\""
  235
  130
  64
  41
  80
  10
  90
  1
  321/512
  51
  #t
  571/130
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval\n  (match (app regex-empty? re) (#f) (_ (-> regex-NULL <-)))\n  (env ((□? (re c)))))\""
  238
  133
  64
  41
  82
  10
  92
  1
  337/536
  54
  #t
  586/133
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval\n  (λ (re) (-> (app and (app pair? re) (app eq? (app car re) 'alt)) <-))\n  (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval (app null? (-> data <-)) (env ((□? (pattern data)))))\""
  42
  25
  11
  6
  24
  3
  27
  1
  15/16
  23
  #f
  128/25
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-atom? (-> re <-)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  match
  "\"'(eval (λ (car-v) (-> (match car-v ...) <-)) (env ((□? (car-v)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval\n  (match (app match-alt re (λ (pat1 pat2) ...)) (#f) (c-x (-> c-x <-)))\n  (env ((□? (re c)))))\""
  32
  17
  6
  9
  10
  2
  12
  1
  10/17
  8
  #f
  76/17
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval\n  (app regex-derivative (-> pat2 <-) c)\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  83
  36
  28
  19
  26
  5
  31
  1
  12/17
  15
  #f
  53/12
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  regex
  2
  25
  255
  app
  "\"'(eval (app cons pat2 (-> (app nil) <-)) (env ((□? (pat1 pat2)))))\""
  86
  38
  28
  20
  26
  5
  31
  1
  2/3
  17
  #t
  169/38
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app car (-> re <-)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  25
  255
  app
  "\"'(eval\n  (app seq (app regex-derivative pat c) (-> (app rep pat) <-))\n  (env ((□? (pat)) (□? (re c)))))\""
  30
  11
  10
  9
  6
  2
  8
  1
  6/11
  5
  #f
  49/11
  ((1 3/2 0) (3/2 3/2 0) (1 1 0)))
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app caddr (-> re <-)) (env ((□? (re f)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval (match (-> (app regex-null? re) <-) (#f) _) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  25
  255
  app
  "\"'(eval\n  (app and (app regex-rep? re) (-> (app f (app cadr re)) <-))\n  (env ((□? (re f)))))\""
  46
  17
  15
  14
  9
  3
  12
  1
  9/14
  9
  #f
  77/17
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval (λ (p) (-> (app car (app cdr p)) <-)) (env ((□? (p)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval\n  (app and (app pair? re) (-> (app eq? (app car re) 'rep) <-))\n  (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  25
  255
  app
  "\"'(eval (app cons 'rep (-> (app cons pat (app nil)) <-)) (env ((□? (pat)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  255
  match
  "\"'(eval\n  (match\n   (app regex-empty? re)\n   ((#f) (-> (match (app regex-null? re) ...) <-))\n   _)\n  (env ((□? (re c)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  25
  255
  app
  "\"'(eval (app f (-> (app cadr re) <-)) (env ((□? (re f)))))\""
  50
  14
  21
  15
  10
  3
  13
  1
  5/7
  6
  #f
  31/7
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval (app regex-empty (-> pat1 <-)) (env ((□? (pat1 pat2)) (□? (re)))))\""
  66
  25
  23
  18
  17
  3
  20
  1
  12/19
  11
  #f
  111/25
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  regex
  2
  25
  255
  app
  "\"'(eval\n  (λ (pat1 pat2)\n    (->\n     (app alt (app regex-derivative pat1 c) (app regex-derivative pat2 c))\n     <-))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  98
  36
  35
  27
  23
  5
  28
  1
  3/5
  16
  #f
  40/9
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval\n  (match (app regex-null? pat2) (#f) (_ (-> pat1 <-)))\n  (env ((□? (pat1 pat2)))))\""
  178
  80
  61
  37
  45
  9
  54
  1
  59/114
  33
  #f
  353/80
  ((13/2 7 0) (7 7 0) (13/2 7 0)))
'(shuffled-cache
  1
  regex
  2
  25
  255
  app
  "\"'(eval\n  (app alt (-> (app regex-derivative pat1 c) <-) (app regex-derivative pat2 c))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  178
  80
  61
  37
  45
  9
  54
  1
  59/114
  33
  #f
  353/80
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  25
  255
  app
  "\"'(eval\n  (app\n   cons\n   'seq\n   (->\n    (app\n     cons\n     'foo\n     (app cons (app cons 'rep (app cons 'bar (app nil))) (app nil)))\n    <-))\n  (env ()))\""
  180
  82
  61
  37
  47
  9
  56
  1
  63/118
  35
  #t
  363/82
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  25
  255
  app
  "\"'(eval\n  (match\n   (app regex-empty? pat)\n   ((#f) (-> (app cons 'rep (app cons pat (app nil))) <-))\n   _)\n  (env ((□? (pat)))))\""
  182
  84
  61
  37
  47
  9
  56
  1
  63/122
  37
  #t
  373/84
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app cdr (-> p <-)) (env ((□? (p)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (match (-> car-v <-) (cons car-c car-d)) (env ((□? (car-v)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval\n  (app regex-derivative (-> pat2 <-) c)\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  59
  21
  22
  16
  17
  3
  20
  1
  15/19
  9
  #f
  31/7
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  regex
  2
  25
  255
  app
  "\"'(eval\n  (app\n   regex-match\n   (app regex-derivative pattern (app car data))\n   (-> (app cdr data) <-))\n  (env ((□? (pattern data)))))\""
  94
  52
  25
  17
  42
  5
  47
  1
  128/155
  32
  #f
  127/26
  ((17/2 17/2 0) (15/2 8 0) (8 8 0)))
'(shuffled-cache
  1
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval (app equal? check (-> expect <-)) (env ((□? (check expect)))))\""
  100
  55
  27
  18
  44
  7
  51
  1
  69/85
  35
  #t
  269/55
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-rep? (-> re <-)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  25
  255
  app
  "\"'(eval (app cons 'rep (-> (app cons 'bar (app nil)) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  25
  255
  match
  "\"'(eval (λ (pat) (-> (match (app regex-null? pat) ...) <-)) (env ((□? (pat)))))\""
  96
  39
  33
  24
  23
  5
  28
  1
  56/81
  16
  #f
  172/39
  ((9/2 5 0) (5 5 0) (5 5 0)))
'(shuffled-cache
  1
  regex
  2
  25
  255
  app
  "\"'(eval\n  (app cons (-> (app cons 'rep (app cons 'bar (app nil))) <-) (app nil))\n  (env ()))\""
  98
  41
  33
  24
  25
  5
  30
  1
  62/87
  18
  #t
  182/41
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-empty? (-> re <-)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  25
  255
  match
  "\"'(eval\n  (match\n   (app regex-null? pat)\n   ((#f) (-> (match (app regex-empty? pat) ...) <-))\n   _)\n  (env ((□? (pat)))))\""
  92
  37
  32
  23
  21
  5
  26
  1
  2/3
  14
  #f
  162/37
  ((11/2 6 0) (5 5 0) (5 5 0)))
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval (app cdr (-> (app cdr cadr-v) <-)) (env ((□? (cadr-v)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-empty? (-> re <-)) (env ((□? (re c)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  25
  255
  app
  "\"'(eval\n  (app alt (app regex-derivative pat1 c) (-> (app regex-derivative pat2 c) <-))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  37
  12
  14
  11
  6
  2
  8
  1
  1/2
  5
  #f
  53/12
  ((3/2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval\n  (λ (re) (-> (app and (app pair? re) (app eq? (app car re) 'seq)) <-))\n  (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  25
  255
  app
  "\"'(eval (match (-> (app regex-rep? re) <-) (#f) _) (env ((□? (re)))))\""
  26
  11
  7
  8
  5
  2
  7
  1
  5/11
  5
  #f
  49/11
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app cadr (-> re <-)) (env ((□? (re f)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  25
  255
  app
  "\"'(eval\n  (match\n   (app null? data)\n   (#f)\n   (_ (-> (app regex-empty? (app regex-empty pattern)) <-)))\n  (env ((□? (pattern data)))))\""
  42
  16
  14
  12
  6
  2
  8
  1
  9/26
  7
  #f
  71/16
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval (app eq? (-> (app car re) <-) 'seq) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  25
  255
  app
  "\"'(eval (app f (app cadr re) (-> (app caddr re) <-)) (env ((□? (re f)))))\""
  52
  18
  20
  14
  14
  3
  17
  1
  3/4
  7
  #f
  79/18
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  regex
  2
  25
  255
  app
  "\"'(eval\n  (app seq (-> (app regex-derivative pat c) <-) (app rep pat))\n  (env ((□? (pat)) (□? (re c)))))\""
  88
  30
  34
  24
  20
  5
  25
  1
  9/14
  12
  #f
  22/5
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  regex
  2
  25
  255
  app
  "\"'(eval\n  (match\n   (app null? data)\n   ((#f)\n    (->\n     (app\n      regex-match\n      (app regex-derivative pattern (app car data))\n      (app cdr data))\n     <-))\n   _)\n  (env ((□? (pattern data)))))\""
  106
  40
  39
  27
  25
  8
  33
  1
  23/38
  16
  #f
  22/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app char? (-> re <-)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  25
  255
  app
  "\"'(eval\n  (λ (re f)\n    (-> (app and (app regex-seq? re) (app f (app cadr re) (app caddr re))) <-))\n  (env ((□? (re f)))))\""
  26
  13
  6
  7
  5
  2
  7
  1
  5/13
  6
  #f
  58/13
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-null? (-> re <-)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app cdr (-> cadr-v <-)) (env ((□? (cadr-v)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval (λ (cadr-v) (-> (app car (app cdr cadr-v)) <-)) (env ((□? (cadr-v)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval (app regex-empty (-> pat2 <-)) (env ((□? (pat1 pat2)) (□? (re)))))\""
  59
  21
  22
  16
  17
  3
  20
  1
  15/19
  9
  #f
  31/7
  ((2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  regex
  2
  25
  255
  app
  "\"'(eval\n  (app and (app regex-seq? re) (-> (app f (app cadr re) (app caddr re)) <-))\n  (env ((□? (re f)))))\""
  127
  52
  42
  33
  34
  7
  41
  1
  29/41
  24
  #f
  9/2
  ((9/2 9/2 0) (4 4 0) (4 4 0)))
'(shuffled-cache
  1
  regex
  2
  25
  255
  app
  "\"'(eval\n  (match (app regex-atom? re) (#f) (_ (-> (app #f) <-)))\n  (env ((□? (re)))))\""
  129
  54
  42
  33
  34
  7
  41
  1
  29/43
  26
  #t
  122/27
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  25
  255
  app
  "\"'(eval\n  (app and (-> (app regex-seq? re) <-) (app f (app cadr re) (app caddr re)))\n  (env ((□? (re f)))))\""
  153
  70
  48
  35
  47
  9
  56
  1
  19/27
  34
  #f
  158/35
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  regex
  2
  25
  255
  match
  "\"'(eval\n  (match\n   (app match-seq re (λ (pat1 pat2) ...))\n   ((#f) (-> (match (app match-alt re (λ (pat1 pat2) ...)) ...) <-))\n   c-x)\n  (env ((□? (re c)))))\""
  173
  85
  50
  38
  55
  10
  65
  1
  44/67
  40
  #f
  382/85
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval (app car (-> (app cdr p) <-)) (env ((□? (p)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  25
  255
  app
  "\"'(eval\n  (app seq (app regex-empty pat1) (-> (app regex-derivative pat2 c) <-))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  37
  12
  14
  11
  6
  2
  8
  1
  1/2
  5
  #f
  53/12
  ((3/2 2 0) (2 2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  regex
  2
  25
  255
  app
  "\"'(eval (match (-> (app regex-empty? pat2) <-) (#f) _) (env ((□? (pat1 pat2)))))\""
  197
  102
  58
  37
  62
  9
  71
  1
  1852/3003
  39
  #f
  149/34
  ((27/2 27/2 0) (29/2 29/2 0) (27/2 27/2 0)))
'(shuffled-cache
  1
  regex
  2
  25
  255
  app
  "\"'(eval\n  (app alt (-> (app regex-empty pat1) <-) (app regex-empty pat2))\n  (env ((□? (pat1 pat2)) (□? (re)))))\""
  207
  111
  58
  38
  66
  9
  75
  1
  59363/99792
  42
  #f
  162/37
  ((1 1 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval\n  (app regex-derivative pat1 (-> c <-))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval (app or (-> (app char? re) <-) (app symbol? re)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app eq? (-> re <-) (app #f)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval (match (-> (app regex-atom? re) <-) (#f) _) (env ((□? (re c)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  25
  255
  app
  "\"'(eval\n  (app cons 'alt (-> (app cons pat1 (app cons pat2 (app nil))) <-))\n  (env ((□? (pat1 pat2)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  25
  255
  app
  "\"'(eval\n  (app\n   regex-match\n   (->\n    (app\n     cons\n     'seq\n     (app\n      cons\n      'foo\n      (app cons (app cons 'rep (app cons 'bar (app nil))) (app nil))))\n    <-)\n   (app cons 'foo (app cons 'bar (app nil))))\n  (env ()))\""
  5
  4
  0
  1
  2
  0
  2
  1
  1/2
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  25
  255
  app
  "\"'(eval\n  (app\n   alt\n   (app seq (app regex-derivative pat1 c) pat2)\n   (-> (app seq (app regex-empty pat1) (app regex-derivative pat2 c)) <-))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  39
  15
  13
  11
  8
  2
  10
  1
  8/15
  9
  #f
  23/5
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  regex
  2
  25
  255
  match
  "\"'(eval\n  (match\n   (app regex-null? pat2)\n   ((#f) (-> (match (app regex-empty? pat1) ...) <-))\n   _)\n  (env ((□? (pat1 pat2)))))\""
  151
  92
  34
  25
  43
  5
  48
  1
  281/756
  34
  #f
  201/46
  ((19/2 19/2 0) (19/2 19/2 0) (19/2 10 0)))
'(shuffled-cache
  1
  regex
  2
  25
  255
  app
  "\"'(eval (match null?-v ((nil) (-> (app #t) <-)) _) (env ((□? (null?-v)))))\""
  154
  94
  34
  26
  43
  5
  48
  1
  281/792
  36
  #t
  206/47
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (match (-> pair?-v <-) (cons pair?-c pair?-d) _) (env ((□? (pair?-v)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-seq? (-> re <-)) (env ((□? (re f)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  25
  255
  match
  "\"'(eval\n  (λ (pat1 pat2) (-> (match (app regex-null? pat1) ...) <-))\n  (env ((□? (pat1 pat2)))))\""
  135
  77
  34
  24
  36
  5
  41
  1
  533/1395
  26
  #f
  334/77
  ((19/2 10 0) (19/2 10 0) (19/2 19/2 0)))
'(shuffled-cache
  1
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval (match (-> null?-v <-) (nil) _) (env ((□? (null?-v)))))\""
  186
  108
  47
  31
  65
  9
  74
  1
  2491/4320
  52
  #f
  41/9
  ((5 5 0) (5 5 0) (5 5 0)))
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (match cdr-v ((cons cdr-c cdr-d) (-> cdr-d <-))) (env ((□? (cdr-v)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  25
  255
  app
  "\"'(eval\n  (match pair?-v ((cons pair?-c pair?-d) (-> (app #t) <-)) _)\n  (env ((□? (pair?-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval (app rep (-> pat <-)) (env ((□? (pat)) (□? (re c)))))\""
  60
  19
  23
  18
  13
  3
  16
  1
  13/19
  10
  #f
  86/19
  ((2 2 0) (5/2 5/2 0) (2 5/2 0)))
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app match-alt (-> re <-) (λ (pat1 pat2) ...)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app cadr re) (app caddr re)) (env ((□? (re f)))))\""
  9
  3
  3
  3
  0
  1
  1
  1
  0
  2
  #f
  16/3
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  regex
  2
  25
  255
  app
  "\"'(eval\n  (app seq (-> (app regex-empty pat1) <-) (app regex-empty pat2))\n  (env ((□? (pat1 pat2)) (□? (re)))))\""
  43
  14
  17
  12
  6
  3
  9
  1
  3/7
  7
  #f
  65/14
  ((3/2 2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  regex
  2
  25
  255
  app
  "\"'(eval\n  (letrec* (... caddr (regex-NULL (-> (app #f) <-)) regex-BLANK ...) ...)\n  (env ()))\""
  45
  16
  17
  12
  8
  3
  11
  1
  1/2
  9
  #t
  75/16
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  25
  255
  app
  "\"'(eval (app cons pat2 (-> (app nil) <-)) (env ((□? (pat1 pat2)))))\""
  48
  18
  17
  13
  8
  3
  11
  1
  4/9
  11
  #t
  85/18
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  25
  255
  app
  "\"'(eval\n  (λ (re f)\n    (-> (app and (app regex-alt? re) (app f (app cadr re) (app caddr re))) <-))\n  (env ((□? (re f)))))\""
  81
  38
  23
  20
  21
  5
  26
  1
  17/31
  21
  #f
  175/38
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval (app regex-null? (-> pat <-)) (env ((□? (pat)))))\""
  138
  58
  48
  32
  34
  9
  43
  1
  30/49
  29
  #f
  263/58
  ((3 7/2 0) (7/2 7/2 0) (3 3 0)))
'(shuffled-cache
  1
  regex
  2
  25
  255
  letrec*
  "\"'(eval (lettypes cons ... nil (letrec* (car ... check-expect) ...)) (env ()))\""
  165
  75
  55
  35
  51
  14
  65
  1
  47/66
  36
  #f
  338/75
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  regex
  2
  25
  255
  match
  "\"'(eval\n  (match\n   (app regex-null? pat1)\n   ((#f) (-> (match (app regex-null? pat2) ...) <-))\n   _)\n  (env ((□? (pat1 pat2)))))\""
  320
  192
  80
  48
  120
  18
  138
  1
  139/206
  75
  #f
  845/192
  ((27/2 14 0) (14 14 0) (27/2 14 0)))
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app symbol? (-> re <-)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval\n  (match (app regex-empty? pat2) (#f) (_ (-> pat1 <-)))\n  (env ((□? (pat1 pat2)))))\""
  85
  42
  26
  17
  19
  4
  23
  1
  1/3
  15
  #f
  61/14
  ((11/2 11/2 0) (6 6 0) (6 6 0)))
'(shuffled-cache
  1
  regex
  2
  25
  255
  app
  "\"'(eval\n  (app regex-empty? (-> (app regex-empty pattern) <-))\n  (env ((□? (pattern data)))))\""
  95
  51
  26
  18
  23
  4
  27
  1
  4/13
  18
  #f
  74/17
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval (app car (-> (app cdr cadr-v) <-)) (env ((□? (cadr-v)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  25
  255
  app
  "\"'(eval\n  (λ (pat1 pat2)\n    (-> (app alt (app regex-empty pat1) (app regex-empty pat2)) <-))\n  (env ((□? (pat1 pat2)) (□? (re)))))\""
  34
  11
  12
  11
  6
  2
  8
  1
  6/11
  5
  #f
  49/11
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-derivative pat (-> c <-)) (env ((□? (pat)) (□? (re c)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  25
  255
  match
  "\"'(eval\n  (match\n   (app match-seq re (λ (pat1 pat2) ...))\n   ((#f) (-> (match (app match-alt re (λ (pat1 pat2) ...)) ...) <-))\n   c-x)\n  (env ((□? (re)))))\""
  32
  17
  6
  9
  10
  2
  12
  1
  10/17
  8
  #f
  76/17
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-null? (-> re <-)) (env ((□? (re c)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  25
  255
  app
  "\"'(eval\n  (app\n   regex-match\n   (-> (app regex-derivative pattern (app car data)) <-)\n   (app cdr data))\n  (env ((□? (pattern data)))))\""
  37
  12
  14
  11
  6
  2
  8
  1
  1/2
  5
  #f
  53/12
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  regex
  2
  25
  255
  match
  "\"'(eval\n  (match\n   (app match-alt re (λ (pat1 pat2) ...))\n   ((#f) (-> (match (app match-rep re (λ (pat) ...)) ...) <-))\n   c-x)\n  (env ((□? (re c)))))\""
  69
  29
  21
  19
  16
  4
  20
  1
  16/29
  13
  #f
  129/29
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval\n  (app regex-derivative pat2 (-> c <-))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  25
  255
  app
  "\"'(eval\n  (λ (pat1 pat2)\n    (-> (app seq (app regex-empty pat1) (app regex-empty pat2)) <-))\n  (env ((□? (pat1 pat2)) (□? (re)))))\""
  35
  11
  13
  11
  6
  2
  8
  1
  6/11
  5
  #f
  49/11
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval (match (-> (app regex-empty? re) <-) (#f) _) (env ((□? (re c)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  25
  255
  app
  "\"'(eval (match (-> (app null? data) <-) (#f) _) (env ((□? (pattern data)))))\""
  74
  53
  13
  8
  44
  4
  48
  1
  257/300
  44
  #f
  272/53
  ((21/2 11 0) (21/2 11 0) (21/2 11 0)))
'(shuffled-cache
  1
  regex
  2
  25
  255
  app
  "\"'(eval\n  (app\n   regex-match\n   (app\n    cons\n    'seq\n    (app\n     cons\n     'foo\n     (app cons (app cons 'rep (app cons 'bar (app nil))) (app nil))))\n   (-> (app cons 'foo (app cons 'bar (app nil))) <-))\n  (env ()))\""
  74
  53
  13
  8
  44
  4
  48
  1
  257/300
  44
  #t
  272/53
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval\n  (λ (re) (-> (app or (app char? re) (app symbol? re)) <-))\n  (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  25
  255
  ref-or-constructor
  "\"'(eval (app car (-> data <-)) (env ((□? (pattern data)))))\""
  42
  25
  11
  6
  24
  3
  27
  1
  15/16
  23
  #f
  128/25
  ((7/2 7/2 0) (7/2 7/2 0) (4 4 0)))
'(shuffled-cache
  1
  regex
  2
  25
  255
  app
  "\"'(eval\n  (match (-> (app match-seq re (λ (pat1 pat2) ...)) <-) (#f) c-x)\n  (env ((□? (re c)))))\""
  73
  41
  17
  15
  34
  5
  39
  1
  25/32
  31
  #f
  200/41
  ((1 1 0) (1 1 0) (1 1 0)))
