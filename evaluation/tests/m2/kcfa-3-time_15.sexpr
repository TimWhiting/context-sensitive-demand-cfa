'(clean-cache
  kcfa-3
  2
  15
  31
  app
  "\"'(eval ((top) app (λ (f1) ...) (λ (x1) ...)) (env ()))\""
  46
  27
  9
  10
  27
  9
  36
  1
  1
  27
  #t
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  kcfa-3
  2
  15
  31
  app
  "\"'(eval (λ (x1) (-> (app (λ (f2) ...) (λ (x2) ...)) <-)) (env ((□? (x1)))))\""
  116
  72
  18
  26
  43
  13
  56
  1
  5081/7560
  58
  #f
  49/9
  ((4 4 0) (4 4 0) (4 4 0)))
'(clean-cache
  kcfa-3
  2
  15
  31
  app
  "\"'(eval\n  (λ (x2) (-> (app (λ (f3) ...) (λ (x3) ...)) <-))\n  (env ((□? (x2)) (□? (x1)))))\""
  80
  42
  15
  23
  5
  3
  8
  1
  5/18
  35
  #f
  229/42
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  kcfa-3
  2
  15
  31
  app
  "\"'(eval\n  (λ (x3) (-> (app (λ (z) ...) (λ (y1 y2 y3) ...)) <-))\n  (env ((□? (x3)) (□? (x2)) (□? (x1)))))\""
  56
  24
  12
  20
  5
  3
  8
  1
  5/12
  20
  #f
  65/12
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  kcfa-3
  2
  15
  31
  ref-or-constructor
  "\"'(eval\n  (λ (y1 y2 y3) (-> y1 <-))\n  (env ((□? (y1 y2 y3)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  38
  12
  9
  17
  5
  3
  8
  1
  5/8
  10
  #f
  16/3
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  kcfa-3
  2
  15
  31
  app
  "\"'(eval\n  (λ (z) (-> (app z x1 x2 x3) <-))\n  (env ((□? (z)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  57
  25
  12
  20
  5
  3
  8
  1
  5/11
  21
  #f
  137/25
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  kcfa-3
  2
  15
  31
  ref-or-constructor
  "\"'(eval (app z x1 x2 (-> x3 <-)) (env ((□? (z)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  15
  6
  3
  6
  0
  0
  0
  1
  0
  5
  #f
  31/6
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  kcfa-3
  2
  15
  31
  ref-or-constructor
  "\"'(eval (app z x1 (-> x2 <-) x3) (env ((□? (z)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  15
  6
  3
  6
  0
  0
  0
  1
  0
  5
  #f
  31/6
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  kcfa-3
  2
  15
  31
  ref-or-constructor
  "\"'(eval (app z (-> x1 <-) x2 x3) (env ((□? (z)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  14
  6
  3
  5
  5
  3
  8
  1
  5/6
  5
  #f
  31/6
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  kcfa-3
  2
  15
  31
  ref-or-constructor
  "\"'(eval (app (-> z <-) x1 x2 x3) (env ((□? (z)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  7
  2
  1
  4
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  kcfa-3
  2
  15
  31
  let
  "\"'(eval (λ (f3) (-> (let (_) ...) <-)) (env ((□? (f3)) (□? (x2)) (□? (x1)))))\""
  120
  61
  24
  35
  5
  3
  8
  1
  5/16
  50
  #f
  334/61
  ((13/2 13/2 0) (13/2 13/2 0) (7 7 0)))
'(clean-cache
  kcfa-3
  2
  15
  31
  app
  "\"'(eval\n  (let (... () (_ (-> (app f3 (app #t)) <-)) () ...) ...)\n  (env ((□? (f3)) (□? (x2)) (□? (x1)))))\""
  112
  55
  24
  33
  5
  3
  8
  1
  1/3
  46
  #f
  302/55
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(clean-cache
  kcfa-3
  2
  15
  31
  app
  "\"'(eval (app f3 (-> (app #t) <-)) (env ((□? (f3)) (□? (x2)) (□? (x1)))))\""
  5
  2
  0
  3
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  kcfa-3
  2
  15
  31
  ref-or-constructor
  "\"'(eval (app (-> f3 <-) (app #t)) (env ((□? (f3)) (□? (x2)) (□? (x1)))))\""
  6
  2
  1
  3
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  kcfa-3
  2
  15
  31
  app
  "\"'(eval\n  (let (_) (-> (app f3 (app #f)) <-))\n  (env ((□? (f3)) (□? (x2)) (□? (x1)))))\""
  112
  55
  24
  33
  5
  3
  8
  1
  1/3
  46
  #f
  302/55
  ((6 6 0) (13/2 13/2 0) (6 6 0)))
'(clean-cache
  kcfa-3
  2
  15
  31
  app
  "\"'(eval (app f3 (-> (app #f) <-)) (env ((□? (f3)) (□? (x2)) (□? (x1)))))\""
  5
  2
  0
  3
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  kcfa-3
  2
  15
  31
  ref-or-constructor
  "\"'(eval (app (-> f3 <-) (app #f)) (env ((□? (f3)) (□? (x2)) (□? (x1)))))\""
  6
  2
  1
  3
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  kcfa-3
  2
  15
  31
  let
  "\"'(eval (λ (f2) (-> (let (_) ...) <-)) (env ((□? (f2)) (□? (x1)))))\""
  179
  105
  30
  44
  37
  13
  50
  1
  31/66
  84
  #f
  192/35
  ((14 14 0) (14 14 0) (14 14 0)))
'(clean-cache
  kcfa-3
  2
  15
  31
  app
  "\"'(eval\n  (let (... () (_ (-> (app f2 (app #t)) <-)) () ...) ...)\n  (env ((□? (f2)) (□? (x1)))))\""
  167
  93
  30
  44
  33
  13
  46
  1
  10/21
  78
  #f
  514/93
  ((27/2 27/2 0) (27/2 27/2 0) (27/2 27/2 0)))
'(clean-cache
  kcfa-3
  2
  15
  31
  app
  "\"'(eval (app f2 (-> (app #t) <-)) (env ((□? (f2)) (□? (x1)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  kcfa-3
  2
  15
  31
  ref-or-constructor
  "\"'(eval (app (-> f2 <-) (app #t)) (env ((□? (f2)) (□? (x1)))))\""
  5
  2
  1
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  kcfa-3
  2
  15
  31
  app
  "\"'(eval (let (_) (-> (app f2 (app #f)) <-)) (env ((□? (f2)) (□? (x1)))))\""
  167
  93
  30
  44
  33
  13
  46
  1
  10/21
  78
  #f
  514/93
  ((14 14 0) (27/2 27/2 0) (27/2 27/2 0)))
'(clean-cache
  kcfa-3
  2
  15
  31
  app
  "\"'(eval (app f2 (-> (app #f) <-)) (env ((□? (f2)) (□? (x1)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  kcfa-3
  2
  15
  31
  ref-or-constructor
  "\"'(eval (app (-> f2 <-) (app #f)) (env ((□? (f2)) (□? (x1)))))\""
  5
  2
  1
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  kcfa-3
  2
  15
  31
  let
  "\"'(eval (λ (f1) (-> (let (_) ...) <-)) (env ((□? (f1)))))\""
  78
  47
  14
  17
  25
  9
  34
  1
  29/52
  47
  #t
  244/47
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  kcfa-3
  2
  15
  31
  app
  "\"'(eval\n  (let (... () (_ (-> (app f1 (app #t)) <-)) () ...) ...)\n  (env ((□? (f1)))))\""
  76
  45
  14
  17
  24
  9
  33
  1
  14/25
  45
  #t
  26/5
  ((3 3 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  kcfa-3
  2
  15
  31
  app
  "\"'(eval (app f1 (-> (app #t) <-)) (env ((□? (f1)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  kcfa-3
  2
  15
  31
  ref-or-constructor
  "\"'(eval (app (-> f1 <-) (app #t)) (env ((□? (f1)))))\""
  4
  2
  1
  1
  1
  1
  2
  1
  1/2
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  kcfa-3
  2
  15
  31
  app
  "\"'(eval (let (_) (-> (app f1 (app #f)) <-)) (env ((□? (f1)))))\""
  76
  45
  14
  17
  24
  9
  33
  1
  14/25
  45
  #t
  26/5
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  kcfa-3
  2
  15
  31
  app
  "\"'(eval (app f1 (-> (app #f) <-)) (env ((□? (f1)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  kcfa-3
  2
  15
  31
  ref-or-constructor
  "\"'(eval (app (-> f1 <-) (app #f)) (env ((□? (f1)))))\""
  4
  2
  1
  1
  1
  1
  2
  1
  1/2
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  kcfa-3
  2
  15
  31
  app
  "\"'(eval (app f1 (-> (app #t) <-)) (env ((□? (f1)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  kcfa-3
  2
  15
  31
  app
  "\"'(eval (app f3 (-> (app #f) <-)) (env ((□? (f3)) (□? (x2)) (□? (x1)))))\""
  8
  4
  0
  4
  0
  0
  0
  1
  0
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  kcfa-3
  2
  15
  31
  ref-or-constructor
  "\"'(eval (app z x1 x2 (-> x3 <-)) (env ((□? (z)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  20
  10
  3
  7
  0
  0
  0
  1
  0
  9
  #f
  51/10
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  kcfa-3
  2
  15
  31
  app
  "\"'(eval\n  (let (... () (_ (-> (app f3 (app #t)) <-)) () ...) ...)\n  (env ((□? (f3)) (□? (x2)) (□? (x1)))))\""
  149
  77
  33
  39
  5
  3
  8
  1
  4/21
  67
  #f
  415/77
  ((15/2 15/2 0) (15/2 15/2 0) (15/2 15/2 0)))
'(shuffled-cache
  0
  kcfa-3
  2
  15
  31
  let
  "\"'(eval (λ (f3) (-> (let (_) ...) <-)) (env ((□? (f3)) (□? (x2)) (□? (x1)))))\""
  241
  130
  51
  60
  5
  3
  8
  1
  1/6
  109
  #f
  707/130
  ((17/2 17/2 0) (17/2 17/2 0) (17/2 17/2 0)))
'(shuffled-cache
  0
  kcfa-3
  2
  15
  31
  ref-or-constructor
  "\"'(eval (app (-> f3 <-) (app #f)) (env ((□? (f3)) (□? (x2)) (□? (x1)))))\""
  241
  130
  51
  60
  5
  3
  8
  1
  1/6
  109
  #t
  707/130
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  kcfa-3
  2
  15
  31
  ref-or-constructor
  "\"'(eval (app (-> f1 <-) (app #t)) (env ((□? (f1)))))\""
  244
  132
  52
  60
  6
  4
  10
  1
  5/26
  111
  #t
  239/44
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  kcfa-3
  2
  31
  app
  "\"'(eval\n  (λ (z) (-> (app z x1 x2 x3) <-))\n  (env ((□? (z)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  #f)
'(shuffled-cache
  0
  kcfa-3
  2
  15
  31
  let
  "\"'(eval (λ (f2) (-> (let (_) ...) <-)) (env ((□? (f2)) (□? (x1)))))\""
  179
  105
  30
  44
  37
  13
  50
  1
  31/66
  84
  #f
  192/35
  ((29/2 29/2 0) (29/2 29/2 0) (29/2 29/2 0)))
'(shuffled-cache
  0
  kcfa-3
  2
  15
  31
  app
  "\"'(eval\n  (let (... () (_ (-> (app f1 (app #t)) <-)) () ...) ...)\n  (env ((□? (f1)))))\""
  189
  112
  31
  46
  43
  14
  57
  1
  629/1134
  91
  #t
  611/112
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  kcfa-3
  2
  15
  31
  ref-or-constructor
  "\"'(eval (app (-> f3 <-) (app #t)) (env ((□? (f3)) (□? (x2)) (□? (x1)))))\""
  202
  116
  34
  52
  43
  14
  57
  1
  1873/3528
  95
  #t
  635/116
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  kcfa-3
  2
  15
  31
  app
  "\"'(eval\n  (λ (x2) (-> (app (λ (f3) ...) (λ (x3) ...)) <-))\n  (env ((□? (x2)) (□? (x1)))))\""
  263
  150
  43
  70
  43
  14
  57
  1
  571/1176
  122
  #f
  137/25
  ((13 13 0) (13 13 0) (13 13 0)))
'(shuffled-cache
  0
  kcfa-3
  2
  15
  31
  app
  "\"'(eval ((top) app (λ (f1) ...) (λ (x1) ...)) (env ()))\""
  273
  158
  43
  72
  51
  14
  65
  1
  1501/2688
  130
  #t
  431/79
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  kcfa-3
  2
  15
  31
  ref-or-constructor
  "\"'(eval (app z (-> x1 <-) x2 x3) (env ((□? (z)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  276
  159
  43
  74
  51
  14
  65
  1
  22487/40320
  130
  #f
  868/159
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  kcfa-3
  2
  15
  31
  ref-or-constructor
  "\"'(eval (app (-> f2 <-) (app #t)) (env ((□? (f2)) (□? (x1)))))\""
  277
  160
  43
  74
  51
  14
  65
  1
  22487/41580
  131
  #t
  175/32
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  kcfa-3
  2
  15
  31
  app
  "\"'(eval (app f2 (-> (app #t) <-)) (env ((□? (f2)) (□? (x1)))))\""
  283
  166
  43
  74
  51
  14
  65
  1
  22487/44100
  137
  #t
  905/166
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  kcfa-3
  2
  15
  31
  app
  "\"'(eval (let (_) (-> (app f2 (app #f)) <-)) (env ((□? (f2)) (□? (x1)))))\""
  283
  166
  43
  74
  51
  14
  65
  1
  22487/44100
  137
  #f
  905/166
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  kcfa-3
  2
  15
  31
  app
  "\"'(eval (app f3 (-> (app #t) <-)) (env ((□? (f3)) (□? (x2)) (□? (x1)))))\""
  288
  171
  43
  74
  51
  14
  65
  1
  22487/46620
  142
  #t
  310/57
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  kcfa-3
  2
  31
  ref-or-constructor
  "\"'(eval (app z x1 (-> x2 <-) x3) (env ((□? (z)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  #f)
'(shuffled-cache
  0
  kcfa-3
  2
  15
  31
  ref-or-constructor
  "\"'(eval (app (-> f2 <-) (app #f)) (env ((□? (f2)) (□? (x1)))))\""
  5
  2
  1
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  kcfa-3
  2
  15
  31
  app
  "\"'(eval (λ (x1) (-> (app (λ (f2) ...) (λ (x2) ...)) <-)) (env ((□? (x1)))))\""
  120
  73
  18
  29
  43
  13
  56
  1
  563/840
  59
  #f
  399/73
  ((11/2 11/2 0) (11/2 11/2 0) (11/2 11/2 0)))
'(shuffled-cache
  0
  kcfa-3
  2
  15
  31
  app
  "\"'(eval (app f2 (-> (app #f) <-)) (env ((□? (f2)) (□? (x1)))))\""
  126
  79
  18
  29
  43
  13
  56
  1
  563/910
  65
  #t
  429/79
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  kcfa-3
  2
  15
  31
  let
  "\"'(eval (λ (f1) (-> (let (_) ...) <-)) (env ((□? (f1)))))\""
  133
  84
  19
  30
  47
  14
  61
  1
  457/700
  70
  #t
  227/42
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  kcfa-3
  2
  15
  31
  app
  "\"'(eval (let (_) (-> (app f1 (app #f)) <-)) (env ((□? (f1)))))\""
  134
  85
  19
  30
  47
  14
  61
  1
  334/525
  71
  #t
  27/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  kcfa-3
  2
  15
  31
  app
  "\"'(eval (app f1 (-> (app #f) <-)) (env ((□? (f1)))))\""
  135
  86
  19
  30
  47
  14
  61
  1
  1301/2100
  72
  #t
  232/43
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  kcfa-3
  2
  15
  31
  app
  "\"'(eval\n  (let (... () (_ (-> (app f2 (app #t)) <-)) () ...) ...)\n  (env ((□? (f2)) (□? (x1)))))\""
  253
  157
  39
  57
  73
  22
  95
  1
  431/840
  135
  #f
  845/157
  ((14 14 0) (14 14 0) (14 14 0)))
'(shuffled-cache
  0
  kcfa-3
  2
  15
  31
  ref-or-constructor
  "\"'(eval (app (-> z <-) x1 x2 x3) (env ((□? (z)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  269
  161
  42
  66
  73
  22
  95
  1
  56227/110880
  139
  #t
  869/161
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  kcfa-3
  2
  15
  31
  app
  "\"'(eval\n  (λ (x3) (-> (app (λ (z) ...) (λ (y1 y2 y3) ...)) <-))\n  (env ((□? (x3)) (□? (x2)) (□? (x1)))))\""
  300
  177
  48
  75
  73
  22
  95
  1
  107519/221760
  151
  #f
  319/59
  ((7/2 7/2 0) (3 3 0) (7/2 7/2 0)))
'(shuffled-cache
  0
  kcfa-3
  2
  15
  31
  ref-or-constructor
  "\"'(eval (app (-> f1 <-) (app #f)) (env ((□? (f1)))))\""
  301
  178
  48
  75
  73
  22
  95
  1
  52027/110880
  152
  #t
  481/89
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  kcfa-3
  2
  31
  app
  "\"'(eval\n  (let (_) (-> (app f3 (app #f)) <-))\n  (env ((□? (f3)) (□? (x2)) (□? (x1)))))\""
  #f)
'(shuffled-cache
  0
  kcfa-3
  2
  15
  31
  ref-or-constructor
  "\"'(eval\n  (λ (y1 y2 y3) (-> y1 <-))\n  (env ((□? (y1 y2 y3)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  38
  12
  9
  17
  5
  3
  8
  1
  5/8
  10
  #f
  16/3
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  kcfa-3
  2
  15
  31
  let
  "\"'(eval (λ (f2) (-> (let (_) ...) <-)) (env ((□? (f2)) (□? (x1)))))\""
  179
  105
  30
  44
  37
  13
  50
  1
  31/66
  84
  #f
  192/35
  ((29/2 29/2 0) (14 14 0) (14 14 0)))
'(shuffled-cache
  1
  kcfa-3
  2
  15
  31
  ref-or-constructor
  "\"'(eval\n  (λ (y1 y2 y3) (-> y1 <-))\n  (env ((□? (y1 y2 y3)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  207
  112
  36
  59
  37
  13
  50
  1
  317/693
  89
  #f
  615/112
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  kcfa-3
  2
  15
  31
  app
  "\"'(eval (app f1 (-> (app #t) <-)) (env ((□? (f1)))))\""
  208
  113
  36
  59
  37
  13
  50
  1
  1205/2772
  90
  #t
  620/113
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  kcfa-3
  2
  31
  let
  "\"'(eval (λ (f3) (-> (let (_) ...) <-)) (env ((□? (f3)) (□? (x2)) (□? (x1)))))\""
  #f)
'(shuffled-cache
  1
  kcfa-3
  2
  15
  31
  ref-or-constructor
  "\"'(eval (app (-> f3 <-) (app #t)) (env ((□? (f3)) (□? (x2)) (□? (x1)))))\""
  6
  2
  1
  3
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  kcfa-3
  2
  15
  31
  app
  "\"'(eval\n  (let (_) (-> (app f3 (app #f)) <-))\n  (env ((□? (f3)) (□? (x2)) (□? (x1)))))\""
  113
  56
  24
  33
  5
  3
  8
  1
  5/16
  47
  #f
  309/56
  ((6 6 0) (6 6 0) (6 6 0)))
'(shuffled-cache
  1
  kcfa-3
  2
  15
  31
  app
  "\"'(eval\n  (λ (x2) (-> (app (λ (f3) ...) (λ (x3) ...)) <-))\n  (env ((□? (x2)) (□? (x1)))))\""
  130
  68
  24
  38
  5
  3
  8
  1
  5/19
  56
  #f
  11/2
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  kcfa-3
  2
  15
  31
  app
  "\"'(eval (app f3 (-> (app #t) <-)) (env ((□? (f3)) (□? (x2)) (□? (x1)))))\""
  135
  73
  24
  38
  5
  3
  8
  1
  5/21
  61
  #t
  399/73
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  kcfa-3
  2
  15
  31
  app
  "\"'(eval\n  (λ (x3) (-> (app (λ (z) ...) (λ (y1 y2 y3) ...)) <-))\n  (env ((□? (x3)) (□? (x2)) (□? (x1)))))\""
  178
  92
  33
  53
  5
  3
  8
  1
  5/21
  76
  #f
  126/23
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  1
  kcfa-3
  2
  15
  31
  app
  "\"'(eval (app f2 (-> (app #f) <-)) (env ((□? (f2)) (□? (x1)))))\""
  185
  96
  33
  56
  5
  3
  8
  1
  5/23
  80
  #t
  131/24
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  kcfa-3
  2
  15
  31
  ref-or-constructor
  "\"'(eval (app (-> f1 <-) (app #t)) (env ((□? (f1)))))\""
  188
  98
  34
  56
  6
  4
  10
  1
  6/25
  82
  #t
  267/49
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  kcfa-3
  2
  31
  ref-or-constructor
  "\"'(eval (app z x1 x2 (-> x3 <-)) (env ((□? (z)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  #f)
'(shuffled-cache
  1
  kcfa-3
  2
  15
  31
  app
  "\"'(eval\n  (let (... () (_ (-> (app f1 (app #t)) <-)) () ...) ...)\n  (env ((□? (f1)))))\""
  76
  45
  14
  17
  24
  9
  33
  1
  14/25
  45
  #t
  26/5
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  kcfa-3
  2
  15
  31
  app
  "\"'(eval ((top) app (λ (f1) ...) (λ (x1) ...)) (env ()))\""
  114
  70
  19
  25
  49
  14
  63
  1
  139/186
  70
  #t
  359/70
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  kcfa-3
  2
  15
  31
  ref-or-constructor
  "\"'(eval (app z x1 (-> x2 <-) x3) (env ((□? (z)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  129
  76
  22
  31
  49
  14
  63
  1
  23/36
  75
  #f
  195/38
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  kcfa-3
  2
  15
  31
  ref-or-constructor
  "\"'(eval (app (-> f2 <-) (app #f)) (env ((□? (f2)) (□? (x1)))))\""
  132
  78
  23
  31
  49
  14
  63
  1
  17/27
  77
  #t
  200/39
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  kcfa-3
  2
  15
  31
  let
  "\"'(eval (λ (f1) (-> (let (_) ...) <-)) (env ((□? (f1)))))\""
  133
  79
  23
  31
  49
  14
  63
  1
  133/216
  78
  #t
  405/79
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  kcfa-3
  2
  15
  31
  app
  "\"'(eval (λ (x1) (-> (app (λ (f2) ...) (λ (x2) ...)) <-)) (env ((□? (x1)))))\""
  217
  136
  37
  44
  63
  20
  83
  1
  56569/99792
  121
  #f
  181/34
  ((21/2 21/2 0) (21/2 21/2 0) (21/2 21/2 0)))
'(shuffled-cache
  1
  kcfa-3
  2
  31
  app
  "\"'(eval\n  (let (... () (_ (-> (app f2 (app #t)) <-)) () ...) ...)\n  (env ((□? (f2)) (□? (x1)))))\""
  #f)
'(shuffled-cache
  1
  kcfa-3
  2
  15
  31
  app
  "\"'(eval (let (_) (-> (app f2 (app #f)) <-)) (env ((□? (f2)) (□? (x1)))))\""
  167
  93
  30
  44
  33
  13
  46
  1
  10/21
  78
  #f
  514/93
  ((14 14 0) (27/2 27/2 0) (27/2 27/2 0)))
'(shuffled-cache
  1
  kcfa-3
  2
  15
  31
  ref-or-constructor
  "\"'(eval (app z (-> x1 <-) x2 x3) (env ((□? (z)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  171
  94
  30
  47
  33
  13
  46
  1
  209/441
  78
  #f
  260/47
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  kcfa-3
  2
  15
  31
  app
  "\"'(eval\n  (λ (z) (-> (app z x1 x2 x3) <-))\n  (env ((□? (z)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  215
  114
  39
  62
  33
  13
  46
  1
  5857/13230
  94
  #f
  316/57
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  kcfa-3
  2
  15
  31
  app
  "\"'(eval (app f2 (-> (app #t) <-)) (env ((□? (f2)) (□? (x1)))))\""
  221
  120
  39
  62
  33
  13
  46
  1
  5857/14490
  100
  #t
  331/60
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  kcfa-3
  2
  15
  31
  ref-or-constructor
  "\"'(eval (app (-> f2 <-) (app #t)) (env ((□? (f2)) (□? (x1)))))\""
  222
  121
  39
  62
  33
  13
  46
  1
  5857/15120
  101
  #t
  669/121
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  kcfa-3
  2
  15
  31
  app
  "\"'(eval (app f3 (-> (app #f) <-)) (env ((□? (f3)) (□? (x2)) (□? (x1)))))\""
  229
  125
  39
  65
  33
  13
  46
  1
  5857/16380
  105
  #t
  689/125
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  kcfa-3
  2
  15
  31
  app
  "\"'(eval (app f1 (-> (app #f) <-)) (env ((□? (f1)))))\""
  230
  126
  39
  65
  33
  13
  46
  1
  2771/8190
  106
  #t
  347/63
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  kcfa-3
  2
  15
  31
  ref-or-constructor
  "\"'(eval (app (-> z <-) x1 x2 x3) (env ((□? (z)) (□? (x3)) (□? (x2)) (□? (x1)))))\""
  230
  126
  39
  65
  33
  13
  46
  1
  2771/8190
  106
  #t
  347/63
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  kcfa-3
  2
  15
  31
  ref-or-constructor
  "\"'(eval (app (-> f1 <-) (app #f)) (env ((□? (f1)))))\""
  233
  128
  40
  65
  34
  14
  48
  1
  1543/4410
  108
  #t
  11/2
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  kcfa-3
  2
  31
  app
  "\"'(eval\n  (let (... () (_ (-> (app f3 (app #t)) <-)) () ...) ...)\n  (env ((□? (f3)) (□? (x2)) (□? (x1)))))\""
  #f)
'(shuffled-cache
  1
  kcfa-3
  2
  15
  31
  ref-or-constructor
  "\"'(eval (app (-> f3 <-) (app #f)) (env ((□? (f3)) (□? (x2)) (□? (x1)))))\""
  6
  2
  1
  3
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  kcfa-3
  2
  15
  31
  app
  "\"'(eval (let (_) (-> (app f1 (app #f)) <-)) (env ((□? (f1)))))\""
  82
  47
  15
  20
  24
  9
  33
  1
  41/75
  47
  #t
  244/47
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
