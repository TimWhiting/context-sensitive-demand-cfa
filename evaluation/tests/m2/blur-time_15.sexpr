'(clean-cache
  blur
  2
  15
  23
  letrec
  "\"'(eval ((top) letrec (id ... lp) ...) (env ()))\""
  157
  117
  33
  7
  94
  19
  113
  1
  989/1140
  79
  #f
  193/39
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  blur
  2
  15
  23
  match
  "\"'(eval (λ (a n) (-> (match (app <= n 1) ...) <-)) (env ((□? (a n)))))\""
  132
  101
  26
  5
  94
  19
  113
  1
  35/37
  73
  #f
  497/101
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  blur
  2
  15
  23
  app
  "\"'(eval (match (app <= n 1) (#f) (_ (-> (app id a) <-))) (env ((□? (a n)))))\""
  89
  51
  31
  7
  43
  19
  62
  1
  17/20
  51
  #t
  5
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  blur
  2
  15
  23
  ref-or-constructor
  "\"'(eval (app id (-> a <-)) (env ((□? (a n)))))\""
  66
  36
  26
  4
  35
  19
  54
  1
  15/16
  36
  #t
  5
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  blur
  2
  15
  23
  let*
  "\"'(eval\n  (match (app <= n 1) ((#f) (-> (let* (r ... s) ...) <-)) _)\n  (env ((□? (a n)))))\""
  161
  123
  31
  7
  85
  19
  104
  1
  1559/2100
  81
  #f
  613/123
  ((11/2 11/2 0) (11/2 11/2 0) (11/2 11/2 0)))
'(clean-cache
  blur
  2
  15
  23
  app
  "\"'(eval\n  (let* (... r (s (-> (app (app blur id) (app #f)) <-)) () ...) ...)\n  (env ((□? (a n)))))\""
  30
  11
  12
  7
  2
  2
  4
  1
  2/11
  11
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  blur
  2
  15
  23
  app
  "\"'(eval (app (app blur id) (-> (app #f) <-)) (env ((□? (a n)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  blur
  2
  15
  23
  app
  "\"'(eval (app (-> (app blur id) <-) (app #f)) (env ((□? (a n)))))\""
  13
  6
  4
  3
  2
  1
  3
  1
  1/3
  6
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  blur
  2
  15
  23
  app
  "\"'(eval\n  (let* (... () (r (-> (app (app blur id) (app #t)) <-)) s ...) ...)\n  (env ((□? (a n)))))\""
  30
  11
  12
  7
  2
  2
  4
  1
  2/11
  11
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  blur
  2
  15
  23
  app
  "\"'(eval (app (app blur id) (-> (app #t) <-)) (env ((□? (a n)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  blur
  2
  15
  23
  app
  "\"'(eval (app (-> (app blur id) <-) (app #t)) (env ((□? (a n)))))\""
  13
  6
  4
  3
  2
  1
  3
  1
  1/3
  6
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  blur
  2
  15
  23
  app
  "\"'(eval\n  (let* (r ... s) (-> (app not (app (app blur lp) s (app - n 1))) <-))\n  (env ((□? (a n)))))\""
  159
  121
  31
  7
  84
  19
  103
  1
  521/700
  81
  #f
  601/121
  ((11/2 11/2 0) (11/2 11/2 0) (11/2 11/2 0)))
'(clean-cache
  blur
  2
  15
  23
  app
  "\"'(eval (app not (-> (app (app blur lp) s (app - n 1)) <-)) (env ((□? (a n)))))\""
  155
  117
  31
  7
  82
  19
  101
  1
  1571/2100
  79
  #f
  193/39
  ((5 5 0) (5 5 0) (5 5 0)))
'(clean-cache
  blur
  2
  15
  23
  app
  "\"'(eval (app (app blur lp) s (-> (app - n 1) <-)) (env ((□? (a n)))))\""
  35
  21
  12
  2
  17
  8
  25
  1
  6/7
  8
  #f
  92/21
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  blur
  2
  15
  23
  ref-or-constructor
  "\"'(eval (app - (-> n <-) 1) (env ((□? (a n)))))\""
  32
  18
  12
  2
  17
  8
  25
  1
  27/28
  7
  #f
  79/18
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  blur
  2
  15
  23
  ref-or-constructor
  "\"'(eval (app (app blur lp) (-> s <-) (app - n 1)) (env ((□? (a n)))))\""
  31
  12
  12
  7
  2
  2
  4
  1
  1/6
  12
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  blur
  2
  15
  23
  app
  "\"'(eval (app (-> (app blur lp) <-) s (app - n 1)) (env ((□? (a n)))))\""
  13
  6
  4
  3
  2
  1
  3
  1
  1/3
  6
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  blur
  2
  15
  23
  app
  "\"'(eval (match (-> (app <= n 1) <-) (#f) _) (env ((□? (a n)))))\""
  44
  30
  12
  2
  26
  8
  34
  1
  37/44
  11
  #f
  133/30
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  blur
  2
  15
  23
  ref-or-constructor
  "\"'(eval (app <= (-> n <-) 1) (env ((□? (a n)))))\""
  32
  18
  12
  2
  17
  8
  25
  1
  7/8
  7
  #f
  79/18
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  blur
  2
  15
  23
  ref-or-constructor
  "\"'(eval (λ (y) (-> y <-)) (env ((□? (y)))))\""
  12
  6
  4
  2
  2
  1
  3
  1
  1/3
  5
  #f
  31/6
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  blur
  2
  15
  23
  ref-or-constructor
  "\"'(eval (λ (x) (-> x <-)) (env ((□? (x)))))\""
  94
  53
  31
  10
  44
  19
  63
  1
  47/54
  52
  #f
  266/53
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  blur
  2
  15
  23
  app
  "\"'(eval (letrec (id ... lp) (-> (app lp (app #f) 2) <-)) (env ()))\""
  156
  116
  33
  7
  93
  19
  112
  1
  959/1110
  79
  #f
  573/116
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  blur
  2
  15
  23
  app
  "\"'(eval (app lp (-> (app #f) <-) 2) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  2
  15
  23
  ref-or-constructor
  "\"'(eval (app (app blur lp) (-> s <-) (app - n 1)) (env ((□? (a n)))))\""
  31
  12
  12
  7
  2
  2
  4
  1
  1/6
  12
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  2
  15
  23
  app
  "\"'(eval (app (-> (app blur id) <-) (app #f)) (env ((□? (a n)))))\""
  31
  12
  12
  7
  2
  2
  4
  1
  1/6
  12
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  2
  15
  23
  ref-or-constructor
  "\"'(eval (app <= (-> n <-) 1) (env ((□? (a n)))))\""
  92
  54
  31
  7
  43
  19
  62
  1
  175/228
  43
  #f
  259/54
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  blur
  2
  15
  23
  app
  "\"'(eval\n  (let* (r ... s) (-> (app not (app (app blur lp) s (app - n 1))) <-))\n  (env ((□? (a n)))))\""
  137
  98
  31
  8
  84
  19
  103
  1
  497/555
  76
  #f
  241/49
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  blur
  2
  15
  23
  app
  "\"'(eval\n  (let* (... r (s (-> (app (app blur id) (app #f)) <-)) () ...) ...)\n  (env ((□? (a n)))))\""
  137
  98
  31
  8
  84
  19
  103
  1
  497/555
  76
  #t
  241/49
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  2
  15
  23
  app
  "\"'(eval (match (app <= n 1) (#f) (_ (-> (app id a) <-))) (env ((□? (a n)))))\""
  141
  102
  31
  8
  87
  19
  106
  1
  494/555
  80
  #t
  251/51
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  2
  15
  23
  let*
  "\"'(eval\n  (match (app <= n 1) ((#f) (-> (let* (r ... s) ...) <-)) _)\n  (env ((□? (a n)))))\""
  144
  105
  31
  8
  89
  19
  108
  1
  53/60
  81
  #f
  173/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  2
  15
  23
  letrec
  "\"'(eval ((top) letrec (id ... lp) ...) (env ()))\""
  153
  114
  31
  8
  98
  19
  117
  1
  539/600
  88
  #t
  281/57
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  2
  15
  23
  match
  "\"'(eval (λ (a n) (-> (match (app <= n 1) ...) <-)) (env ((□? (a n)))))\""
  154
  115
  31
  8
  98
  19
  117
  1
  2141/2400
  88
  #f
  568/115
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  2
  15
  23
  ref-or-constructor
  "\"'(eval (λ (x) (-> x <-)) (env ((□? (x)))))\""
  165
  123
  31
  11
  104
  19
  123
  1
  373/420
  95
  #f
  203/41
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  2
  15
  23
  app
  "\"'(eval (match (-> (app <= n 1) <-) (#f) _) (env ((□? (a n)))))\""
  166
  124
  31
  11
  104
  19
  123
  1
  247/280
  95
  #f
  615/124
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  2
  15
  23
  ref-or-constructor
  "\"'(eval (app id (-> a <-)) (env ((□? (a n)))))\""
  166
  124
  31
  11
  104
  19
  123
  1
  247/280
  95
  #t
  615/124
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  2
  15
  23
  app
  "\"'(eval (letrec (id ... lp) (-> (app lp (app #f) 2) <-)) (env ()))\""
  166
  124
  31
  11
  104
  19
  123
  1
  247/280
  95
  #t
  615/124
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  2
  15
  23
  app
  "\"'(eval (app lp (-> (app #f) <-) 2) (env ()))\""
  166
  124
  31
  11
  104
  19
  123
  1
  247/280
  95
  #t
  615/124
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  2
  15
  23
  ref-or-constructor
  "\"'(eval (λ (y) (-> y <-)) (env ((□? (y)))))\""
  171
  129
  31
  11
  107
  19
  126
  1
  113/129
  99
  #f
  641/129
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  2
  15
  23
  app
  "\"'(eval (app (app blur id) (-> (app #t) <-)) (env ((□? (a n)))))\""
  171
  129
  31
  11
  107
  19
  126
  1
  113/129
  99
  #t
  641/129
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  2
  15
  23
  app
  "\"'(eval (app (app blur lp) s (-> (app - n 1) <-)) (env ((□? (a n)))))\""
  172
  130
  31
  11
  107
  19
  126
  1
  449/516
  99
  #f
  129/26
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  2
  15
  23
  app
  "\"'(eval (app (app blur id) (-> (app #f) <-)) (env ((□? (a n)))))\""
  172
  130
  31
  11
  107
  19
  126
  1
  449/516
  99
  #t
  129/26
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  2
  15
  23
  app
  "\"'(eval (app not (-> (app (app blur lp) s (app - n 1)) <-)) (env ((□? (a n)))))\""
  173
  131
  31
  11
  107
  19
  126
  1
  223/258
  99
  #f
  651/131
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  2
  15
  23
  ref-or-constructor
  "\"'(eval (app - (-> n <-) 1) (env ((□? (a n)))))\""
  174
  132
  31
  11
  107
  19
  126
  1
  443/516
  99
  #f
  655/132
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  2
  15
  23
  app
  "\"'(eval (app (-> (app blur lp) <-) s (app - n 1)) (env ((□? (a n)))))\""
  175
  133
  31
  11
  107
  19
  126
  1
  110/129
  100
  #t
  660/133
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  2
  15
  23
  app
  "\"'(eval (app (-> (app blur id) <-) (app #t)) (env ((□? (a n)))))\""
  178
  136
  31
  11
  109
  19
  128
  1
  147/176
  103
  #t
  675/136
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  blur
  2
  15
  23
  app
  "\"'(eval\n  (let* (... () (r (-> (app (app blur id) (app #t)) <-)) s ...) ...)\n  (env ((□? (a n)))))\""
  184
  142
  31
  11
  114
  19
  133
  1
  451/540
  109
  #t
  705/142
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  2
  15
  23
  app
  "\"'(eval\n  (let* (r ... s) (-> (app not (app (app blur lp) s (app - n 1))) <-))\n  (env ((□? (a n)))))\""
  159
  121
  31
  7
  84
  19
  103
  1
  521/700
  81
  #f
  601/121
  ((11/2 11/2 0) (11/2 11/2 0) (11/2 11/2 0)))
'(shuffled-cache
  1
  blur
  2
  15
  23
  ref-or-constructor
  "\"'(eval (app id (-> a <-)) (env ((□? (a n)))))\""
  162
  124
  31
  7
  86
  19
  105
  1
  1673/2220
  84
  #t
  154/31
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  2
  15
  23
  app
  "\"'(eval (app (app blur id) (-> (app #f) <-)) (env ((□? (a n)))))\""
  164
  126
  31
  7
  86
  19
  105
  1
  1643/2220
  86
  #t
  313/63
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  2
  15
  23
  let*
  "\"'(eval\n  (match (app <= n 1) ((#f) (-> (let* (r ... s) ...) <-)) _)\n  (env ((□? (a n)))))\""
  166
  128
  31
  7
  87
  19
  106
  1
  1639/2220
  86
  #f
  319/64
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  2
  15
  23
  app
  "\"'(eval (app (app blur lp) s (-> (app - n 1) <-)) (env ((□? (a n)))))\""
  166
  128
  31
  7
  87
  19
  106
  1
  1639/2220
  86
  #f
  319/64
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  2
  15
  23
  ref-or-constructor
  "\"'(eval (app <= (-> n <-) 1) (env ((□? (a n)))))\""
  167
  129
  31
  7
  87
  19
  106
  1
  543/740
  86
  #f
  214/43
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  2
  15
  23
  app
  "\"'(eval\n  (let* (... () (r (-> (app (app blur id) (app #t)) <-)) s ...) ...)\n  (env ((□? (a n)))))\""
  186
  148
  31
  7
  103
  19
  122
  1
  1433/1960
  105
  #t
  737/148
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  2
  15
  23
  app
  "\"'(eval (app (-> (app blur id) <-) (app #f)) (env ((□? (a n)))))\""
  187
  149
  31
  7
  103
  19
  122
  1
  713/980
  106
  #t
  742/149
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  2
  15
  23
  ref-or-constructor
  "\"'(eval (λ (x) (-> x <-)) (env ((□? (x)))))\""
  190
  151
  31
  8
  104
  19
  123
  1
  6403/8820
  107
  #f
  753/151
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  2
  15
  23
  ref-or-constructor
  "\"'(eval (app (app blur lp) (-> s <-) (app - n 1)) (env ((□? (a n)))))\""
  190
  151
  31
  8
  104
  19
  123
  1
  6403/8820
  107
  #t
  753/151
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  2
  15
  23
  app
  "\"'(eval\n  (let* (... r (s (-> (app (app blur id) (app #f)) <-)) () ...) ...)\n  (env ((□? (a n)))))\""
  191
  152
  31
  8
  104
  19
  123
  1
  12743/17640
  108
  #t
  379/76
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  2
  15
  23
  app
  "\"'(eval (app (-> (app blur id) <-) (app #t)) (env ((□? (a n)))))\""
  192
  153
  31
  8
  104
  19
  123
  1
  317/441
  109
  #t
  763/153
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  2
  15
  23
  ref-or-constructor
  "\"'(eval (λ (y) (-> y <-)) (env ((□? (y)))))\""
  193
  154
  31
  8
  104
  19
  123
  1
  361/504
  109
  #f
  769/154
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  2
  15
  23
  match
  "\"'(eval (λ (a n) (-> (match (app <= n 1) ...) <-)) (env ((□? (a n)))))\""
  199
  160
  31
  8
  109
  19
  128
  1
  911/1260
  111
  #f
  799/160
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  2
  15
  23
  ref-or-constructor
  "\"'(eval (app - (-> n <-) 1) (env ((□? (a n)))))\""
  199
  160
  31
  8
  109
  19
  128
  1
  911/1260
  111
  #f
  799/160
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  2
  15
  23
  app
  "\"'(eval (letrec (id ... lp) (-> (app lp (app #f) 2) <-)) (env ()))\""
  202
  163
  31
  8
  112
  19
  131
  1
  487/660
  112
  #f
  816/163
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  2
  15
  23
  app
  "\"'(eval (app lp (-> (app #f) <-) 2) (env ()))\""
  202
  163
  31
  8
  112
  19
  131
  1
  487/660
  112
  #t
  816/163
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  2
  15
  23
  app
  "\"'(eval (app (-> (app blur lp) <-) s (app - n 1)) (env ((□? (a n)))))\""
  202
  163
  31
  8
  112
  19
  131
  1
  487/660
  112
  #t
  816/163
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  2
  15
  23
  app
  "\"'(eval (app (app blur id) (-> (app #t) <-)) (env ((□? (a n)))))\""
  204
  165
  31
  8
  112
  19
  131
  1
  959/1320
  114
  #t
  826/165
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  2
  15
  23
  app
  "\"'(eval (match (-> (app <= n 1) <-) (#f) _) (env ((□? (a n)))))\""
  205
  166
  31
  8
  112
  19
  131
  1
  1909/2640
  114
  #f
  416/83
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  2
  15
  23
  letrec
  "\"'(eval ((top) letrec (id ... lp) ...) (env ()))\""
  206
  167
  31
  8
  113
  19
  132
  1
  1969/2700
  114
  #f
  838/167
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  2
  15
  23
  app
  "\"'(eval (match (app <= n 1) (#f) (_ (-> (app id a) <-))) (env ((□? (a n)))))\""
  209
  170
  31
  8
  115
  19
  134
  1
  2293/3150
  117
  #t
  853/170
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  blur
  2
  15
  23
  app
  "\"'(eval (app not (-> (app (app blur lp) s (app - n 1)) <-)) (env ((□? (a n)))))\""
  209
  170
  31
  8
  115
  19
  134
  1
  2293/3150
  117
  #f
  853/170
  ((0 0 0) (0 0 0) (0 0 0)))
