'(clean-cache
  regex
  2
  5
  255
  lettypes
  "\"'(eval ((top) lettypes (cons ... nil) ...) (env ()))\""
  29
  18
  7
  4
  18
  5
  23
  1
  1
  7
  #f
  79/18
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  regex
  2
  5
  255
  letrec*
  "\"'(eval (lettypes cons ... nil (letrec* (car ... check-expect) ...)) (env ()))\""
  28
  17
  7
  4
  17
  5
  22
  1
  1
  7
  #f
  75/17
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  regex
  2
  5
  255
  app
  "\"'(eval\n  (λ (check expect) (-> (app equal? check expect) <-))\n  (env ((□? (check expect)))))\""
  26
  15
  7
  4
  12
  5
  17
  1
  11/13
  6
  #f
  22/5
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval (app equal? check (-> expect <-)) (env ((□? (check expect)))))\""
  6
  3
  2
  1
  2
  2
  4
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval (app equal? (-> check <-) expect) (env ((□? (check expect)))))\""
  22
  11
  7
  4
  10
  5
  15
  1
  10/11
  4
  #f
  48/11
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  regex
  2
  255
  match
  "\"'(eval\n  (λ (pattern data) (-> (match (app null? data) ...) <-))\n  (env ((□? (pattern data)))))\""
  #f)
'(clean-cache
  regex
  2
  5
  255
  app
  "\"'(eval\n  (match\n   (app null? data)\n   (#f)\n   (_ (-> (app regex-empty? (app regex-empty pattern)) <-)))\n  (env ((□? (pattern data)))))\""
  42
  16
  14
  12
  6
  2
  8
  1
  9/26
  7
  #f
  71/16
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  regex
  2
  5
  255
  app
  "\"'(eval\n  (app regex-empty? (-> (app regex-empty pattern) <-))\n  (env ((□? (pattern data)))))\""
  36
  11
  14
  11
  6
  2
  8
  1
  6/11
  5
  #f
  49/11
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval (app regex-empty (-> pattern <-)) (env ((□? (pattern data)))))\""
  50
  23
  17
  10
  22
  4
  26
  1
  14/15
  11
  #t
  103/23
  ((3 3 0) (7/2 9/2 0) (3 3 0)))
'(clean-cache
  regex
  2
  5
  255
  app
  "\"'(eval\n  (match\n   (app null? data)\n   ((#f)\n    (->\n     (app\n      regex-match\n      (app regex-derivative pattern (app car data))\n      (app cdr data))\n     <-))\n   _)\n  (env ((□? (pattern data)))))\""
  19
  10
  5
  4
  5
  3
  8
  1
  1/2
  4
  #f
  22/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval\n  (app\n   regex-match\n   (app regex-derivative pattern (app car data))\n   (-> (app cdr data) <-))\n  (env ((□? (pattern data)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app cdr (-> data <-)) (env ((□? (pattern data)))))\""
  #f)
'(clean-cache
  regex
  2
  5
  255
  app
  "\"'(eval\n  (app\n   regex-match\n   (-> (app regex-derivative pattern (app car data)) <-)\n   (app cdr data))\n  (env ((□? (pattern data)))))\""
  37
  12
  14
  11
  6
  2
  8
  1
  1/2
  5
  #f
  53/12
  ((5/2 5/2 0) (5/2 7/2 0) (5/2 5/2 0)))
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval\n  (app regex-derivative pattern (-> (app car data) <-))\n  (env ((□? (pattern data)))))\""
  #f)
'(clean-cache
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval (app car (-> data <-)) (env ((□? (pattern data)))))\""
  42
  25
  11
  6
  24
  3
  27
  1
  15/16
  23
  #f
  128/25
  ((4 4 0) (7/2 4 0) (4 4 0)))
'(clean-cache
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval\n  (app regex-derivative (-> pattern <-) (app car data))\n  (env ((□? (pattern data)))))\""
  50
  23
  17
  10
  22
  4
  26
  1
  14/15
  11
  #t
  103/23
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval (match (-> (app null? data) <-) (#f) _) (env ((□? (pattern data)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app null? (-> data <-)) (env ((□? (pattern data)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  let
  "\"'(eval (λ (re c) (-> (let (_) ...) <-)) (env ((□? (re c)))))\""
  #f)
'(clean-cache
  regex
  2
  5
  255
  app
  "\"'(eval\n  (let (... () (_ (-> (app debug-trace) <-)) () ...) ...)\n  (env ((□? (re c)))))\""
  7
  4
  0
  3
  1
  0
  1
  1
  1/4
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  255
  match
  "\"'(eval (let (_) (-> (match (app regex-empty? re) ...) <-)) (env ((□? (re c)))))\""
  #f)
'(clean-cache
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval\n  (match (app regex-empty? re) (#f) (_ (-> regex-NULL <-)))\n  (env ((□? (re c)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  255
  match
  "\"'(eval\n  (match\n   (app regex-empty? re)\n   ((#f) (-> (match (app regex-null? re) ...) <-))\n   _)\n  (env ((□? (re c)))))\""
  #f)
'(clean-cache
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval\n  (match (app regex-null? re) (#f) (_ (-> regex-NULL <-)))\n  (env ((□? (re c)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  255
  match
  "\"'(eval\n  (match (app regex-null? re) ((#f) (-> (match (app eq? c re) ...) <-)) _)\n  (env ((□? (re c)))))\""
  #f)
'(clean-cache
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval (match (app eq? c re) (#f) (_ (-> regex-BLANK <-))) (env ((□? (re c)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  255
  match
  "\"'(eval\n  (match (app eq? c re) ((#f) (-> (match (app regex-atom? re) ...) <-)) _)\n  (env ((□? (re c)))))\""
  #f)
'(clean-cache
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval\n  (match (app regex-atom? re) (#f) (_ (-> regex-NULL <-)))\n  (env ((□? (re c)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  5
  255
  match
  "\"'(eval\n  (match\n   (app regex-atom? re)\n   ((#f) (-> (match (app match-seq re (λ (pat1 pat2) ...)) ...) <-))\n   _)\n  (env ((□? (re c)))))\""
  32
  17
  6
  9
  10
  2
  12
  1
  10/17
  8
  #f
  76/17
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval\n  (match (app match-seq re (λ (pat1 pat2) ...)) (#f) (c-x (-> c-x <-)))\n  (env ((□? (re c)))))\""
  32
  17
  6
  9
  10
  2
  12
  1
  10/17
  8
  #f
  76/17
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  regex
  2
  5
  255
  match
  "\"'(eval\n  (match\n   (app match-seq re (λ (pat1 pat2) ...))\n   ((#f) (-> (match (app match-alt re (λ (pat1 pat2) ...)) ...) <-))\n   c-x)\n  (env ((□? (re c)))))\""
  32
  17
  6
  9
  10
  2
  12
  1
  10/17
  8
  #f
  76/17
  ((3/2 3/2 0) (1 1 0) (1 1 0)))
'(clean-cache
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval\n  (match (app match-alt re (λ (pat1 pat2) ...)) (#f) (c-x (-> c-x <-)))\n  (env ((□? (re c)))))\""
  32
  17
  6
  9
  10
  2
  12
  1
  10/17
  8
  #f
  76/17
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  regex
  2
  5
  255
  match
  "\"'(eval\n  (match\n   (app match-alt re (λ (pat1 pat2) ...))\n   ((#f) (-> (match (app match-rep re (λ (pat) ...)) ...) <-))\n   c-x)\n  (env ((□? (re c)))))\""
  34
  17
  7
  10
  10
  2
  12
  1
  10/17
  8
  #f
  76/17
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval\n  (match (app match-rep re (λ (pat) ...)) (#f) (c-x (-> c-x <-)))\n  (env ((□? (re c)))))\""
  34
  17
  7
  10
  10
  2
  12
  1
  10/17
  8
  #f
  76/17
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval\n  (match (app match-rep re (λ (pat) ...)) ((#f) (-> regex-NULL <-)) c-x)\n  (env ((□? (re c)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  5
  255
  app
  "\"'(eval\n  (match (-> (app match-rep re (λ (pat) ...)) <-) (#f) c-x)\n  (env ((□? (re c)))))\""
  33
  16
  7
  10
  10
  2
  12
  1
  5/8
  8
  #f
  9/2
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  regex
  2
  5
  255
  app
  "\"'(eval\n  (λ (pat) (-> (app seq (app regex-derivative pat c) (app rep pat)) <-))\n  (env ((□? (pat)) (□? (re c)))))\""
  35
  11
  13
  11
  6
  2
  8
  1
  6/11
  5
  #f
  49/11
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  regex
  2
  5
  255
  app
  "\"'(eval\n  (app seq (app regex-derivative pat c) (-> (app rep pat) <-))\n  (env ((□? (pat)) (□? (re c)))))\""
  30
  11
  10
  9
  6
  2
  8
  1
  6/11
  5
  #f
  49/11
  ((3/2 3/2 0) (2 3 0) (3/2 3/2 0)))
'(clean-cache
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval (app rep (-> pat <-)) (env ((□? (pat)) (□? (re c)))))\""
  57
  17
  23
  17
  13
  3
  16
  1
  13/17
  8
  #f
  76/17
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  regex
  2
  5
  255
  app
  "\"'(eval\n  (app seq (-> (app regex-derivative pat c) <-) (app rep pat))\n  (env ((□? (pat)) (□? (re c)))))\""
  37
  12
  14
  11
  6
  2
  8
  1
  1/2
  5
  #f
  53/12
  ((2 5/2 0) (2 2 0) (2 2 0)))
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-derivative pat (-> c <-)) (env ((□? (pat)) (□? (re c)))))\""
  #f)
'(clean-cache
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval (app regex-derivative (-> pat <-) c) (env ((□? (pat)) (□? (re c)))))\""
  57
  17
  23
  17
  13
  3
  16
  1
  13/17
  8
  #f
  76/17
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app match-rep (-> re <-) (λ (pat) ...)) (env ((□? (re c)))))\""
  #f)
'(clean-cache
  regex
  2
  5
  255
  app
  "\"'(eval\n  (match (-> (app match-alt re (λ (pat1 pat2) ...)) <-) (#f) c-x)\n  (env ((□? (re c)))))\""
  31
  16
  6
  9
  10
  2
  12
  1
  5/8
  8
  #f
  9/2
  ((1 1 0) (1 3/2 0) (1 1 0)))
'(clean-cache
  regex
  2
  5
  255
  app
  "\"'(eval\n  (λ (pat1 pat2)\n    (->\n     (app alt (app regex-derivative pat1 c) (app regex-derivative pat2 c))\n     <-))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  34
  11
  12
  11
  6
  2
  8
  1
  6/11
  5
  #f
  49/11
  ((2 2 0) (5/2 5/2 0) (2 2 0)))
'(clean-cache
  regex
  2
  5
  255
  app
  "\"'(eval\n  (app alt (app regex-derivative pat1 c) (-> (app regex-derivative pat2 c) <-))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  37
  12
  14
  11
  6
  2
  8
  1
  1/2
  5
  #f
  53/12
  ((2 2 0) (2 2 0) (5/2 5/2 0)))
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval\n  (app regex-derivative pat2 (-> c <-))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  #f)
'(clean-cache
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval\n  (app regex-derivative (-> pat2 <-) c)\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  59
  21
  22
  16
  17
  3
  20
  1
  15/19
  9
  #f
  31/7
  ((3 7/2 0) (3 7/2 0) (3 3 0)))
'(clean-cache
  regex
  2
  5
  255
  app
  "\"'(eval\n  (app alt (-> (app regex-derivative pat1 c) <-) (app regex-derivative pat2 c))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  37
  12
  14
  11
  6
  2
  8
  1
  1/2
  5
  #f
  53/12
  ((2 2 0) (5/2 5/2 0) (5/2 3 0)))
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval\n  (app regex-derivative pat1 (-> c <-))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  #f)
'(clean-cache
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval\n  (app regex-derivative (-> pat1 <-) c)\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  57
  17
  23
  17
  13
  3
  16
  1
  13/17
  8
  #f
  76/17
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app match-alt (-> re <-) (λ (pat1 pat2) ...)) (env ((□? (re c)))))\""
  #f)
'(clean-cache
  regex
  2
  5
  255
  app
  "\"'(eval\n  (match (-> (app match-seq re (λ (pat1 pat2) ...)) <-) (#f) c-x)\n  (env ((□? (re c)))))\""
  31
  16
  6
  9
  10
  2
  12
  1
  5/8
  8
  #f
  9/2
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  regex
  2
  5
  255
  app
  "\"'(eval\n  (λ (pat1 pat2)\n    (->\n     (app\n      alt\n      (app seq (app regex-derivative pat1 c) pat2)\n      (app seq (app regex-empty pat1) (app regex-derivative pat2 c)))\n     <-))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  34
  11
  12
  11
  6
  2
  8
  1
  6/11
  5
  #f
  49/11
  ((3/2 3/2 0) (3/2 3/2 0) (2 2 0)))
'(clean-cache
  regex
  2
  5
  255
  app
  "\"'(eval\n  (app\n   alt\n   (app seq (app regex-derivative pat1 c) pat2)\n   (-> (app seq (app regex-empty pat1) (app regex-derivative pat2 c)) <-))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  35
  11
  13
  11
  6
  2
  8
  1
  6/11
  5
  #f
  49/11
  ((2 5/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  regex
  2
  5
  255
  app
  "\"'(eval\n  (app seq (app regex-empty pat1) (-> (app regex-derivative pat2 c) <-))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  37
  12
  14
  11
  6
  2
  8
  1
  1/2
  5
  #f
  53/12
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval\n  (app regex-derivative pat2 (-> c <-))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  #f)
'(clean-cache
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval\n  (app regex-derivative (-> pat2 <-) c)\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  59
  21
  22
  16
  17
  3
  20
  1
  15/19
  9
  #f
  31/7
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  regex
  2
  5
  255
  app
  "\"'(eval\n  (app seq (-> (app regex-empty pat1) <-) (app regex-derivative pat2 c))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  36
  11
  14
  11
  6
  2
  8
  1
  6/11
  5
  #f
  49/11
  ((2 5/2 0) (2 2 0) (2 2 0)))
'(clean-cache
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval (app regex-empty (-> pat1 <-)) (env ((□? (pat1 pat2)) (□? (re c)))))\""
  57
  17
  23
  17
  13
  3
  16
  1
  13/17
  8
  #f
  76/17
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  regex
  2
  5
  255
  app
  "\"'(eval\n  (app\n   alt\n   (-> (app seq (app regex-derivative pat1 c) pat2) <-)\n   (app seq (app regex-empty pat1) (app regex-derivative pat2 c)))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  35
  11
  13
  11
  6
  2
  8
  1
  6/11
  5
  #f
  49/11
  ((3/2 3/2 0) (2 2 0) (3/2 3/2 0)))
'(clean-cache
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval\n  (app seq (app regex-derivative pat1 c) (-> pat2 <-))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  59
  21
  22
  16
  17
  3
  20
  1
  15/19
  9
  #f
  31/7
  ((5/2 5/2 0) (3 7/2 0) (5/2 5/2 0)))
'(clean-cache
  regex
  2
  5
  255
  app
  "\"'(eval\n  (app seq (-> (app regex-derivative pat1 c) <-) pat2)\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  37
  12
  14
  11
  6
  2
  8
  1
  1/2
  5
  #f
  53/12
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval\n  (app regex-derivative pat1 (-> c <-))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  #f)
'(clean-cache
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval\n  (app regex-derivative (-> pat1 <-) c)\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  57
  17
  23
  17
  13
  3
  16
  1
  13/17
  8
  #f
  76/17
  ((5/2 5/2 0) (5/2 5/2 0) (7/2 7/2 0)))
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app match-seq (-> re <-) (λ (pat1 pat2) ...)) (env ((□? (re c)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval (match (-> (app regex-atom? re) <-) (#f) _) (env ((□? (re c)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-atom? (-> re <-)) (env ((□? (re c)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval (match (-> (app eq? c re) <-) (#f) _) (env ((□? (re c)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app eq? c (-> re <-)) (env ((□? (re c)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app eq? (-> c <-) re) (env ((□? (re c)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval (match (-> (app regex-null? re) <-) (#f) _) (env ((□? (re c)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-null? (-> re <-)) (env ((□? (re c)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval (match (-> (app regex-empty? re) <-) (#f) _) (env ((□? (re c)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-empty? (-> re <-)) (env ((□? (re c)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  match
  "\"'(eval (λ (re) (-> (match (app regex-empty? re) ...) <-)) (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  5
  255
  app
  "\"'(eval\n  (match (app regex-empty? re) (#f) (_ (-> (app #t) <-)))\n  (env ((□? (re)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  255
  match
  "\"'(eval\n  (match\n   (app regex-empty? re)\n   ((#f) (-> (match (app regex-null? re) ...) <-))\n   _)\n  (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  5
  255
  app
  "\"'(eval\n  (match (app regex-null? re) (#f) (_ (-> (app #f) <-)))\n  (env ((□? (re)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  255
  match
  "\"'(eval\n  (match\n   (app regex-null? re)\n   ((#f) (-> (match (app regex-atom? re) ...) <-))\n   _)\n  (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  5
  255
  app
  "\"'(eval\n  (match (app regex-atom? re) (#f) (_ (-> (app #f) <-)))\n  (env ((□? (re)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  5
  255
  match
  "\"'(eval\n  (match\n   (app regex-atom? re)\n   ((#f) (-> (match (app match-seq re (λ (pat1 pat2) ...)) ...) <-))\n   _)\n  (env ((□? (re)))))\""
  32
  17
  6
  9
  10
  2
  12
  1
  10/17
  8
  #f
  76/17
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval\n  (match (app match-seq re (λ (pat1 pat2) ...)) (#f) (c-x (-> c-x <-)))\n  (env ((□? (re)))))\""
  32
  17
  6
  9
  10
  2
  12
  1
  10/17
  8
  #f
  76/17
  ((3/2 3/2 0) (1 1 0) (1 1 0)))
'(clean-cache
  regex
  2
  5
  255
  match
  "\"'(eval\n  (match\n   (app match-seq re (λ (pat1 pat2) ...))\n   ((#f) (-> (match (app match-alt re (λ (pat1 pat2) ...)) ...) <-))\n   c-x)\n  (env ((□? (re)))))\""
  32
  17
  6
  9
  10
  2
  12
  1
  10/17
  8
  #f
  76/17
  ((1 1 0) (1 1 0) (1 3/2 0)))
'(clean-cache
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval\n  (match (app match-alt re (λ (pat1 pat2) ...)) (#f) (c-x (-> c-x <-)))\n  (env ((□? (re)))))\""
  32
  17
  6
  9
  10
  2
  12
  1
  10/17
  8
  #f
  76/17
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  regex
  2
  5
  255
  match
  "\"'(eval\n  (match\n   (app match-alt re (λ (pat1 pat2) ...))\n   ((#f) (-> (match (app regex-rep? re) ...) <-))\n   c-x)\n  (env ((□? (re)))))\""
  27
  12
  7
  8
  5
  2
  7
  1
  5/12
  5
  #f
  53/12
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  regex
  2
  5
  255
  app
  "\"'(eval (match (app regex-rep? re) (#f) (_ (-> (app #t) <-))) (env ((□? (re)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  5
  255
  app
  "\"'(eval (match (app regex-rep? re) ((#f) (-> (app #f) <-)) _) (env ((□? (re)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  5
  255
  app
  "\"'(eval (match (-> (app regex-rep? re) <-) (#f) _) (env ((□? (re)))))\""
  26
  11
  7
  8
  5
  2
  7
  1
  5/11
  5
  #f
  49/11
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-rep? (-> re <-)) (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  5
  255
  app
  "\"'(eval\n  (match (-> (app match-alt re (λ (pat1 pat2) ...)) <-) (#f) c-x)\n  (env ((□? (re)))))\""
  31
  16
  6
  9
  10
  2
  12
  1
  5/8
  8
  #f
  9/2
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  regex
  2
  5
  255
  app
  "\"'(eval\n  (λ (pat1 pat2)\n    (-> (app alt (app regex-empty pat1) (app regex-empty pat2)) <-))\n  (env ((□? (pat1 pat2)) (□? (re)))))\""
  34
  11
  12
  11
  6
  2
  8
  1
  6/11
  5
  #f
  49/11
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  regex
  2
  5
  255
  app
  "\"'(eval\n  (app alt (app regex-empty pat1) (-> (app regex-empty pat2) <-))\n  (env ((□? (pat1 pat2)) (□? (re)))))\""
  36
  11
  14
  11
  6
  2
  8
  1
  6/11
  5
  #f
  49/11
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval (app regex-empty (-> pat2 <-)) (env ((□? (pat1 pat2)) (□? (re)))))\""
  59
  21
  22
  16
  17
  3
  20
  1
  15/19
  9
  #f
  31/7
  ((5/2 5/2 0) (3 3 0) (5/2 5/2 0)))
'(clean-cache
  regex
  2
  5
  255
  app
  "\"'(eval\n  (app alt (-> (app regex-empty pat1) <-) (app regex-empty pat2))\n  (env ((□? (pat1 pat2)) (□? (re)))))\""
  36
  11
  14
  11
  6
  2
  8
  1
  6/11
  5
  #f
  49/11
  ((3/2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval (app regex-empty (-> pat1 <-)) (env ((□? (pat1 pat2)) (□? (re)))))\""
  57
  17
  23
  17
  13
  3
  16
  1
  13/17
  8
  #f
  76/17
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app match-alt (-> re <-) (λ (pat1 pat2) ...)) (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  5
  255
  app
  "\"'(eval\n  (match (-> (app match-seq re (λ (pat1 pat2) ...)) <-) (#f) c-x)\n  (env ((□? (re)))))\""
  31
  16
  6
  9
  10
  2
  12
  1
  5/8
  8
  #f
  9/2
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  regex
  2
  5
  255
  app
  "\"'(eval\n  (λ (pat1 pat2)\n    (-> (app seq (app regex-empty pat1) (app regex-empty pat2)) <-))\n  (env ((□? (pat1 pat2)) (□? (re)))))\""
  35
  11
  13
  11
  6
  2
  8
  1
  6/11
  5
  #f
  49/11
  ((3/2 3/2 0) (2 5/2 0) (2 2 0)))
'(clean-cache
  regex
  2
  5
  255
  app
  "\"'(eval\n  (app seq (app regex-empty pat1) (-> (app regex-empty pat2) <-))\n  (env ((□? (pat1 pat2)) (□? (re)))))\""
  36
  11
  14
  11
  6
  2
  8
  1
  6/11
  5
  #f
  49/11
  ((2 2 0) (3/2 2 0) (2 2 0)))
'(clean-cache
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval (app regex-empty (-> pat2 <-)) (env ((□? (pat1 pat2)) (□? (re)))))\""
  59
  21
  22
  16
  17
  3
  20
  1
  15/19
  9
  #f
  31/7
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 3 0)))
'(clean-cache
  regex
  2
  5
  255
  app
  "\"'(eval\n  (app seq (-> (app regex-empty pat1) <-) (app regex-empty pat2))\n  (env ((□? (pat1 pat2)) (□? (re)))))\""
  36
  11
  14
  11
  6
  2
  8
  1
  6/11
  5
  #f
  49/11
  ((3/2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval (app regex-empty (-> pat1 <-)) (env ((□? (pat1 pat2)) (□? (re)))))\""
  57
  17
  23
  17
  13
  3
  16
  1
  13/17
  8
  #f
  76/17
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app match-seq (-> re <-) (λ (pat1 pat2) ...)) (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval (match (-> (app regex-atom? re) <-) (#f) _) (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-atom? (-> re <-)) (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval (match (-> (app regex-null? re) <-) (#f) _) (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-null? (-> re <-)) (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval (match (-> (app regex-empty? re) <-) (#f) _) (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-empty? (-> re <-)) (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  match
  "\"'(eval (λ (pat) (-> (match (app regex-null? pat) ...) <-)) (env ((□? (pat)))))\""
  #f)
'(clean-cache
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval\n  (match (app regex-null? pat) (#f) (_ (-> regex-BLANK <-)))\n  (env ((□? (pat)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  255
  match
  "\"'(eval\n  (match\n   (app regex-null? pat)\n   ((#f) (-> (match (app regex-empty? pat) ...) <-))\n   _)\n  (env ((□? (pat)))))\""
  #f)
'(clean-cache
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval\n  (match (app regex-empty? pat) (#f) (_ (-> regex-BLANK <-)))\n  (env ((□? (pat)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  5
  255
  app
  "\"'(eval\n  (match\n   (app regex-empty? pat)\n   ((#f) (-> (app cons 'rep (app cons pat (app nil))) <-))\n   _)\n  (env ((□? (pat)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  5
  255
  app
  "\"'(eval (app cons 'rep (-> (app cons pat (app nil)) <-)) (env ((□? (pat)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  5
  255
  app
  "\"'(eval (app cons pat (-> (app nil) <-)) (env ((□? (pat)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval (app cons (-> pat <-) (app nil)) (env ((□? (pat)))))\""
  64
  20
  25
  19
  13
  4
  17
  1
  13/18
  8
  #f
  22/5
  ((3 7/2 0) (4 4 0) (3 3 0)))
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval (match (-> (app regex-empty? pat) <-) (#f) _) (env ((□? (pat)))))\""
  #f)
'(clean-cache
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval (app regex-empty? (-> pat <-)) (env ((□? (pat)))))\""
  64
  20
  25
  19
  13
  4
  17
  1
  13/18
  8
  #f
  22/5
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval (match (-> (app regex-null? pat) <-) (#f) _) (env ((□? (pat)))))\""
  #f)
'(clean-cache
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval (app regex-null? (-> pat <-)) (env ((□? (pat)))))\""
  64
  20
  25
  19
  13
  4
  17
  1
  13/18
  8
  #f
  22/5
  ((3 3 0) (7/2 4 0) (3 3 0)))
'(clean-cache
  regex
  2
  255
  match
  "\"'(eval\n  (λ (pat1 pat2) (-> (match (app regex-null? pat1) ...) <-))\n  (env ((□? (pat1 pat2)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval\n  (match (app regex-null? pat1) (#f) (_ (-> pat2 <-)))\n  (env ((□? (pat1 pat2)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  match
  "\"'(eval\n  (match\n   (app regex-null? pat1)\n   ((#f) (-> (match (app regex-null? pat2) ...) <-))\n   _)\n  (env ((□? (pat1 pat2)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval\n  (match (app regex-null? pat2) (#f) (_ (-> pat1 <-)))\n  (env ((□? (pat1 pat2)))))\""
  #f)
'(clean-cache
  regex
  2
  5
  255
  app
  "\"'(eval\n  (match\n   (app regex-null? pat2)\n   ((#f) (-> (app cons 'alt (app cons pat1 (app cons pat2 (app nil)))) <-))\n   _)\n  (env ((□? (pat1 pat2)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  5
  255
  app
  "\"'(eval\n  (app cons 'alt (-> (app cons pat1 (app cons pat2 (app nil))) <-))\n  (env ((□? (pat1 pat2)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  5
  255
  app
  "\"'(eval\n  (app cons pat1 (-> (app cons pat2 (app nil)) <-))\n  (env ((□? (pat1 pat2)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  5
  255
  app
  "\"'(eval (app cons pat2 (-> (app nil) <-)) (env ((□? (pat1 pat2)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app cons (-> pat2 <-) (app nil)) (env ((□? (pat1 pat2)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval\n  (app cons (-> pat1 <-) (app cons pat2 (app nil)))\n  (env ((□? (pat1 pat2)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval (match (-> (app regex-null? pat2) <-) (#f) _) (env ((□? (pat1 pat2)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-null? (-> pat2 <-)) (env ((□? (pat1 pat2)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval (match (-> (app regex-null? pat1) <-) (#f) _) (env ((□? (pat1 pat2)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-null? (-> pat1 <-)) (env ((□? (pat1 pat2)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  match
  "\"'(eval\n  (λ (pat1 pat2) (-> (match (app regex-null? pat1) ...) <-))\n  (env ((□? (pat1 pat2)))))\""
  #f)
'(clean-cache
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval\n  (match (app regex-null? pat1) (#f) (_ (-> regex-NULL <-)))\n  (env ((□? (pat1 pat2)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  255
  match
  "\"'(eval\n  (match\n   (app regex-null? pat1)\n   ((#f) (-> (match (app regex-null? pat2) ...) <-))\n   _)\n  (env ((□? (pat1 pat2)))))\""
  #f)
'(clean-cache
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval\n  (match (app regex-null? pat2) (#f) (_ (-> regex-NULL <-)))\n  (env ((□? (pat1 pat2)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  255
  match
  "\"'(eval\n  (match\n   (app regex-null? pat2)\n   ((#f) (-> (match (app regex-empty? pat1) ...) <-))\n   _)\n  (env ((□? (pat1 pat2)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval\n  (match (app regex-empty? pat1) (#f) (_ (-> pat2 <-)))\n  (env ((□? (pat1 pat2)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  match
  "\"'(eval\n  (match\n   (app regex-empty? pat1)\n   ((#f) (-> (match (app regex-empty? pat2) ...) <-))\n   _)\n  (env ((□? (pat1 pat2)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval\n  (match (app regex-empty? pat2) (#f) (_ (-> pat1 <-)))\n  (env ((□? (pat1 pat2)))))\""
  #f)
'(clean-cache
  regex
  2
  5
  255
  app
  "\"'(eval\n  (match\n   (app regex-empty? pat2)\n   ((#f) (-> (app cons 'seq (app cons pat1 (app cons pat2 (app nil)))) <-))\n   _)\n  (env ((□? (pat1 pat2)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  5
  255
  app
  "\"'(eval\n  (app cons 'seq (-> (app cons pat1 (app cons pat2 (app nil))) <-))\n  (env ((□? (pat1 pat2)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  5
  255
  app
  "\"'(eval\n  (app cons pat1 (-> (app cons pat2 (app nil)) <-))\n  (env ((□? (pat1 pat2)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  5
  255
  app
  "\"'(eval (app cons pat2 (-> (app nil) <-)) (env ((□? (pat1 pat2)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app cons (-> pat2 <-) (app nil)) (env ((□? (pat1 pat2)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval\n  (app cons (-> pat1 <-) (app cons pat2 (app nil)))\n  (env ((□? (pat1 pat2)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval (match (-> (app regex-empty? pat2) <-) (#f) _) (env ((□? (pat1 pat2)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-empty? (-> pat2 <-)) (env ((□? (pat1 pat2)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval (match (-> (app regex-empty? pat1) <-) (#f) _) (env ((□? (pat1 pat2)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-empty? (-> pat1 <-)) (env ((□? (pat1 pat2)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval (match (-> (app regex-null? pat2) <-) (#f) _) (env ((□? (pat1 pat2)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-null? (-> pat2 <-)) (env ((□? (pat1 pat2)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval (match (-> (app regex-null? pat1) <-) (#f) _) (env ((□? (pat1 pat2)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-null? (-> pat1 <-)) (env ((□? (pat1 pat2)))))\""
  #f)
'(clean-cache
  regex
  2
  5
  255
  app
  "\"'(eval\n  (λ (re f) (-> (app and (app regex-rep? re) (app f (app cadr re))) <-))\n  (env ((□? (re f)))))\""
  28
  13
  7
  8
  5
  2
  7
  1
  5/13
  6
  #f
  58/13
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  regex
  2
  5
  255
  app
  "\"'(eval\n  (app and (app regex-rep? re) (-> (app f (app cadr re)) <-))\n  (env ((□? (re f)))))\""
  46
  17
  15
  14
  9
  3
  12
  1
  9/14
  9
  #f
  77/17
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  regex
  2
  5
  255
  app
  "\"'(eval (app f (-> (app cadr re) <-)) (env ((□? (re f)))))\""
  50
  14
  21
  15
  10
  3
  13
  1
  5/7
  6
  #f
  31/7
  ((2 2 0) (2 2 0) (5/2 5/2 0)))
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app cadr (-> re <-)) (env ((□? (re f)))))\""
  #f)
'(clean-cache
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app cadr re)) (env ((□? (re f)))))\""
  6
  2
  2
  2
  0
  1
  1
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  5
  255
  app
  "\"'(eval\n  (app and (-> (app regex-rep? re) <-) (app f (app cadr re)))\n  (env ((□? (re f)))))\""
  26
  11
  7
  8
  5
  2
  7
  1
  5/11
  5
  #f
  49/11
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-rep? (-> re <-)) (env ((□? (re f)))))\""
  #f)
'(clean-cache
  regex
  2
  5
  255
  app
  "\"'(eval\n  (λ (re f)\n    (-> (app and (app regex-alt? re) (app f (app cadr re) (app caddr re))) <-))\n  (env ((□? (re f)))))\""
  26
  13
  6
  7
  5
  2
  7
  1
  5/13
  6
  #f
  58/13
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  regex
  2
  5
  255
  app
  "\"'(eval\n  (app and (app regex-alt? re) (-> (app f (app cadr re) (app caddr re)) <-))\n  (env ((□? (re f)))))\""
  62
  30
  15
  17
  16
  3
  19
  1
  9/17
  14
  #f
  68/15
  ((4 9/2 0) (7/2 7/2 0) (4 4 0)))
'(clean-cache
  regex
  2
  5
  255
  app
  "\"'(eval (app f (app cadr re) (-> (app caddr re) <-)) (env ((□? (re f)))))\""
  52
  18
  20
  14
  14
  3
  17
  1
  3/4
  7
  #f
  79/18
  ((2 2 0) (5/2 5/2 0) (2 2 0)))
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app caddr (-> re <-)) (env ((□? (re f)))))\""
  #f)
'(clean-cache
  regex
  2
  5
  255
  app
  "\"'(eval (app f (-> (app cadr re) <-) (app caddr re)) (env ((□? (re f)))))\""
  50
  14
  21
  15
  10
  3
  13
  1
  5/7
  6
  #f
  31/7
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app cadr (-> re <-)) (env ((□? (re f)))))\""
  #f)
'(clean-cache
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app cadr re) (app caddr re)) (env ((□? (re f)))))\""
  9
  3
  3
  3
  0
  1
  1
  1
  0
  2
  #f
  16/3
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  regex
  2
  5
  255
  app
  "\"'(eval\n  (app and (-> (app regex-alt? re) <-) (app f (app cadr re) (app caddr re)))\n  (env ((□? (re f)))))\""
  24
  11
  6
  7
  5
  2
  7
  1
  5/11
  5
  #f
  49/11
  ((1/2 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-alt? (-> re <-)) (env ((□? (re f)))))\""
  #f)
'(clean-cache
  regex
  2
  5
  255
  app
  "\"'(eval\n  (λ (re f)\n    (-> (app and (app regex-seq? re) (app f (app cadr re) (app caddr re))) <-))\n  (env ((□? (re f)))))\""
  26
  13
  6
  7
  5
  2
  7
  1
  5/13
  6
  #f
  58/13
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  regex
  2
  5
  255
  app
  "\"'(eval\n  (app and (app regex-seq? re) (-> (app f (app cadr re) (app caddr re)) <-))\n  (env ((□? (re f)))))\""
  71
  31
  20
  20
  17
  4
  21
  1
  7/11
  15
  #f
  141/31
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  regex
  2
  5
  255
  app
  "\"'(eval (app f (app cadr re) (-> (app caddr re) <-)) (env ((□? (re f)))))\""
  52
  18
  20
  14
  14
  3
  17
  1
  3/4
  7
  #f
  79/18
  ((2 2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app caddr (-> re <-)) (env ((□? (re f)))))\""
  #f)
'(clean-cache
  regex
  2
  5
  255
  app
  "\"'(eval (app f (-> (app cadr re) <-) (app caddr re)) (env ((□? (re f)))))\""
  50
  14
  21
  15
  10
  3
  13
  1
  5/7
  6
  #f
  31/7
  ((5/2 5/2 0) (2 2 0) (2 2 0)))
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app cadr (-> re <-)) (env ((□? (re f)))))\""
  #f)
'(clean-cache
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app cadr re) (app caddr re)) (env ((□? (re f)))))\""
  9
  3
  3
  3
  0
  1
  1
  1
  0
  2
  #f
  16/3
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  regex
  2
  5
  255
  app
  "\"'(eval\n  (app and (-> (app regex-seq? re) <-) (app f (app cadr re) (app caddr re)))\n  (env ((□? (re f)))))\""
  24
  11
  6
  7
  5
  2
  7
  1
  5/11
  5
  #f
  49/11
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-seq? (-> re <-)) (env ((□? (re f)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval\n  (λ (re) (-> (app or (app char? re) (app symbol? re)) <-))\n  (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval (app or (app char? re) (-> (app symbol? re) <-)) (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app symbol? (-> re <-)) (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval (app or (-> (app char? re) <-) (app symbol? re)) (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app char? (-> re <-)) (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval (λ (re) (-> (app eq? re (app #t)) <-)) (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  5
  255
  app
  "\"'(eval (app eq? re (-> (app #t) <-)) (env ((□? (re)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app eq? (-> re <-) (app #t)) (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval (λ (re) (-> (app eq? re (app #f)) <-)) (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  5
  255
  app
  "\"'(eval (app eq? re (-> (app #f) <-)) (env ((□? (re)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app eq? (-> re <-) (app #f)) (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval\n  (λ (re) (-> (app and (app pair? re) (app eq? (app car re) 'rep)) <-))\n  (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval\n  (app and (app pair? re) (-> (app eq? (app car re) 'rep) <-))\n  (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval (app eq? (-> (app car re) <-) 'rep) (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app car (-> re <-)) (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval\n  (app and (-> (app pair? re) <-) (app eq? (app car re) 'rep))\n  (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app pair? (-> re <-)) (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval\n  (λ (re) (-> (app and (app pair? re) (app eq? (app car re) 'seq)) <-))\n  (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval\n  (app and (app pair? re) (-> (app eq? (app car re) 'seq) <-))\n  (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval (app eq? (-> (app car re) <-) 'seq) (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app car (-> re <-)) (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval\n  (app and (-> (app pair? re) <-) (app eq? (app car re) 'seq))\n  (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app pair? (-> re <-)) (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval\n  (λ (re) (-> (app and (app pair? re) (app eq? (app car re) 'alt)) <-))\n  (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval\n  (app and (app pair? re) (-> (app eq? (app car re) 'alt) <-))\n  (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval (app eq? (-> (app car re) <-) 'alt) (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app car (-> re <-)) (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval\n  (app and (-> (app pair? re) <-) (app eq? (app car re) 'alt))\n  (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app pair? (-> re <-)) (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  5
  255
  app
  "\"'(eval\n  (letrec* (... regex-NULL (regex-BLANK (-> (app #t) <-)) regex-alt? ...) ...)\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  5
  255
  app
  "\"'(eval\n  (letrec* (... caddr (regex-NULL (-> (app #f) <-)) regex-BLANK ...) ...)\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval (λ (p) (-> (app car (app cdr (app cdr p))) <-)) (env ((□? (p)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval (app car (-> (app cdr (app cdr p)) <-)) (env ((□? (p)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval (app cdr (-> (app cdr p) <-)) (env ((□? (p)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app cdr (-> p <-)) (env ((□? (p)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval (λ (p) (-> (app car (app cdr p)) <-)) (env ((□? (p)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval (app car (-> (app cdr p) <-)) (env ((□? (p)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app cdr (-> p <-)) (env ((□? (p)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  match
  "\"'(eval (λ (null?-v) (-> (match null?-v ...) <-)) (env ((□? (null?-v)))))\""
  #f)
'(clean-cache
  regex
  2
  5
  255
  app
  "\"'(eval (match null?-v (nil) (_ (-> (app #f) <-))) (env ((□? (null?-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  5
  255
  app
  "\"'(eval (match null?-v ((nil) (-> (app #t) <-)) _) (env ((□? (null?-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (match (-> null?-v <-) (nil) _) (env ((□? (null?-v)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  match
  "\"'(eval (λ (pair?-v) (-> (match pair?-v ...) <-)) (env ((□? (pair?-v)))))\""
  #f)
'(clean-cache
  regex
  2
  5
  255
  app
  "\"'(eval\n  (match pair?-v (cons pair?-c pair?-d) (_ (-> (app #f) <-)))\n  (env ((□? (pair?-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  5
  255
  app
  "\"'(eval\n  (match pair?-v ((cons pair?-c pair?-d) (-> (app #t) <-)) _)\n  (env ((□? (pair?-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (match (-> pair?-v <-) (cons pair?-c pair?-d) _) (env ((□? (pair?-v)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval\n  (λ (cadr-v) (-> (app car (app cdr (app cdr cadr-v))) <-))\n  (env ((□? (cadr-v)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval (app car (-> (app cdr (app cdr cadr-v)) <-)) (env ((□? (cadr-v)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval (app cdr (-> (app cdr cadr-v) <-)) (env ((□? (cadr-v)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app cdr (-> cadr-v <-)) (env ((□? (cadr-v)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval (λ (cadr-v) (-> (app car (app cdr cadr-v)) <-)) (env ((□? (cadr-v)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval (app car (-> (app cdr cadr-v) <-)) (env ((□? (cadr-v)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app cdr (-> cadr-v <-)) (env ((□? (cadr-v)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  match
  "\"'(eval (λ (cdr-v) (-> (match cdr-v ...) <-)) (env ((□? (cdr-v)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (match cdr-v ((cons cdr-c cdr-d) (-> cdr-d <-))) (env ((□? (cdr-v)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (match (-> cdr-v <-) (cons cdr-c cdr-d)) (env ((□? (cdr-v)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  match
  "\"'(eval (λ (car-v) (-> (match car-v ...) <-)) (env ((□? (car-v)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (match car-v ((cons car-c car-d) (-> car-c <-))) (env ((□? (car-v)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (match (-> car-v <-) (cons car-c car-d)) (env ((□? (car-v)))))\""
  #f)
'(clean-cache
  regex
  2
  5
  255
  app
  "\"'(eval\n  (letrec*\n   (car ... check-expect)\n   (->\n    (app\n     check-expect\n     (app\n      regex-match\n      (app\n       cons\n       'seq\n       (app\n        cons\n        'foo\n        (app cons (app cons 'rep (app cons 'bar (app nil))) (app nil))))\n      (app cons 'foo (app cons 'bar (app nil))))\n     (app #f))\n    <-))\n  (env ()))\""
  27
  16
  7
  4
  16
  5
  21
  1
  1
  7
  #f
  71/16
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  regex
  2
  5
  255
  app
  "\"'(eval\n  (app\n   check-expect\n   (app\n    regex-match\n    (app\n     cons\n     'seq\n     (app\n      cons\n      'foo\n      (app cons (app cons 'rep (app cons 'bar (app nil))) (app nil))))\n    (app cons 'foo (app cons 'bar (app nil))))\n   (-> (app #f) <-))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  5
  255
  app
  "\"'(eval\n  (app\n   check-expect\n   (->\n    (app\n     regex-match\n     (app\n      cons\n      'seq\n      (app\n       cons\n       'foo\n       (app cons (app cons 'rep (app cons 'bar (app nil))) (app nil))))\n     (app cons 'foo (app cons 'bar (app nil))))\n    <-)\n   (app #f))\n  (env ()))\""
  18
  10
  5
  3
  10
  3
  13
  1
  1
  4
  #f
  22/5
  ((1/2 1/2 0) (1/2 1/2 0) (1 1 0)))
'(clean-cache
  regex
  2
  5
  255
  app
  "\"'(eval\n  (app\n   regex-match\n   (app\n    cons\n    'seq\n    (app\n     cons\n     'foo\n     (app cons (app cons 'rep (app cons 'bar (app nil))) (app nil))))\n   (-> (app cons 'foo (app cons 'bar (app nil))) <-))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  5
  255
  app
  "\"'(eval (app cons 'foo (-> (app cons 'bar (app nil)) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  5
  255
  app
  "\"'(eval (app cons 'bar (-> (app nil) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  5
  255
  app
  "\"'(eval\n  (app\n   regex-match\n   (->\n    (app\n     cons\n     'seq\n     (app\n      cons\n      'foo\n      (app cons (app cons 'rep (app cons 'bar (app nil))) (app nil))))\n    <-)\n   (app cons 'foo (app cons 'bar (app nil))))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  5
  255
  app
  "\"'(eval\n  (app\n   cons\n   'seq\n   (->\n    (app\n     cons\n     'foo\n     (app cons (app cons 'rep (app cons 'bar (app nil))) (app nil)))\n    <-))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  5
  255
  app
  "\"'(eval\n  (app\n   cons\n   'foo\n   (-> (app cons (app cons 'rep (app cons 'bar (app nil))) (app nil)) <-))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  5
  255
  app
  "\"'(eval\n  (app cons (app cons 'rep (app cons 'bar (app nil))) (-> (app nil) <-))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  5
  255
  app
  "\"'(eval\n  (app cons (-> (app cons 'rep (app cons 'bar (app nil))) <-) (app nil))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  5
  255
  app
  "\"'(eval (app cons 'rep (-> (app cons 'bar (app nil)) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  5
  255
  app
  "\"'(eval (app cons 'bar (-> (app nil) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  5
  255
  app
  "\"'(eval\n  (λ (check expect) (-> (app equal? check expect) <-))\n  (env ((□? (check expect)))))\""
  26
  15
  7
  4
  12
  5
  17
  1
  11/13
  6
  #f
  22/5
  ((1 1 0) (1 3/2 0) (1 3/2 0)))
'(shuffled-cache
  0
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval\n  (match (app match-seq re (λ (pat1 pat2) ...)) (#f) (c-x (-> c-x <-)))\n  (env ((□? (re)))))\""
  58
  32
  13
  13
  22
  7
  29
  1
  7/10
  14
  #f
  71/16
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  regex
  2
  5
  255
  app
  "\"'(eval\n  (app seq (-> (app regex-empty pat1) <-) (app regex-derivative pat2 c))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  92
  43
  27
  22
  28
  9
  37
  1
  27/41
  19
  #f
  191/43
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval (app cdr (-> (app cdr p) <-)) (env ((□? (p)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  5
  255
  app
  "\"'(eval\n  (match\n   (app regex-null? pat2)\n   ((#f) (-> (app cons 'alt (app cons pat1 (app cons pat2 (app nil)))) <-))\n   _)\n  (env ((□? (pat1 pat2)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app cons (-> pat2 <-) (app nil)) (env ((□? (pat1 pat2)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  match
  "\"'(eval (λ (null?-v) (-> (match null?-v ...) <-)) (env ((□? (null?-v)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  match
  "\"'(eval\n  (λ (pat1 pat2) (-> (match (app regex-null? pat1) ...) <-))\n  (env ((□? (pat1 pat2)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval\n  (match (app match-alt re (λ (pat1 pat2) ...)) (#f) (c-x (-> c-x <-)))\n  (env ((□? (re)))))\""
  32
  17
  6
  9
  10
  2
  12
  1
  10/17
  8
  #f
  76/17
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  regex
  2
  5
  255
  app
  "\"'(eval\n  (match\n   (app null? data)\n   (#f)\n   (_ (-> (app regex-empty? (app regex-empty pattern)) <-)))\n  (env ((□? (pattern data)))))\""
  73
  33
  20
  20
  16
  4
  20
  1
  29/60
  15
  #f
  49/11
  ((2 2 0) (2 5/2 0) (2 5/2 0)))
'(shuffled-cache
  0
  regex
  2
  5
  255
  app
  "\"'(eval (app eq? re (-> (app #f) <-)) (env ((□? (re)))))\""
  76
  35
  20
  21
  16
  4
  20
  1
  29/64
  17
  #t
  157/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  5
  255
  app
  "\"'(eval\n  (letrec* (... regex-NULL (regex-BLANK (-> (app #t) <-)) regex-alt? ...) ...)\n  (env ()))\""
  78
  37
  20
  21
  18
  4
  22
  1
  33/68
  19
  #t
  167/37
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  5
  255
  match
  "\"'(eval\n  (match\n   (app match-alt re (λ (pat1 pat2) ...))\n   ((#f) (-> (match (app regex-rep? re) ...) <-))\n   c-x)\n  (env ((□? (re)))))\""
  95
  48
  23
  24
  22
  5
  27
  1
  37/86
  23
  #f
  215/48
  ((1 1 0) (1/2 1/2 0) (1 1 0)))
'(shuffled-cache
  0
  regex
  2
  5
  255
  app
  "\"'(eval (app cons 'rep (-> (app cons 'bar (app nil)) <-)) (env ()))\""
  97
  50
  23
  24
  24
  5
  29
  1
  41/90
  25
  #t
  9/2
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  255
  match
  "\"'(eval (λ (cdr-v) (-> (match cdr-v ...) <-)) (env ((□? (cdr-v)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  5
  255
  app
  "\"'(eval\n  (app and (-> (app regex-rep? re) <-) (app f (app cadr re)))\n  (env ((□? (re f)))))\""
  26
  11
  7
  8
  5
  2
  7
  1
  5/11
  5
  #f
  49/11
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval (λ (p) (-> (app car (app cdr p)) <-)) (env ((□? (p)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval (app eq? (-> (app car re) <-) 'rep) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app cadr (-> re <-)) (env ((□? (re f)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval\n  (app cons (-> pat1 <-) (app cons pat2 (app nil)))\n  (env ((□? (pat1 pat2)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval (match (-> (app regex-atom? re) <-) (#f) _) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval (app regex-empty? (-> pat <-)) (env ((□? (pat)))))\""
  64
  20
  25
  19
  13
  4
  17
  1
  13/18
  8
  #f
  22/5
  ((7/2 4 0) (3 3 0) (7/2 7/2 0)))
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (match (-> cdr-v <-) (cons cdr-c cdr-d)) (env ((□? (cdr-v)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval\n  (match (app match-alt re (λ (pat1 pat2) ...)) (#f) (c-x (-> c-x <-)))\n  (env ((□? (re c)))))\""
  32
  17
  6
  9
  10
  2
  12
  1
  10/17
  8
  #f
  76/17
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval (app equal? (-> check <-) expect) (env ((□? (check expect)))))\""
  54
  28
  13
  13
  20
  7
  27
  1
  5/7
  12
  #f
  31/7
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval\n  (app\n   regex-match\n   (app regex-derivative pattern (app car data))\n   (-> (app cdr data) <-))\n  (env ((□? (pattern data)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval\n  (match (app match-rep re (λ (pat) ...)) ((#f) (-> regex-NULL <-)) c-x)\n  (env ((□? (re c)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  5
  255
  app
  "\"'(eval\n  (app cons 'seq (-> (app cons pat1 (app cons pat2 (app nil))) <-))\n  (env ((□? (pat1 pat2)))))\""
  7
  5
  0
  2
  2
  0
  2
  1
  2/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  255
  match
  "\"'(eval\n  (match\n   (app regex-null? re)\n   ((#f) (-> (match (app regex-atom? re) ...) <-))\n   _)\n  (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  match
  "\"'(eval (let (_) (-> (match (app regex-empty? re) ...) <-)) (env ((□? (re c)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  5
  255
  app
  "\"'(eval\n  (letrec* (... caddr (regex-NULL (-> (app #f) <-)) regex-BLANK ...) ...)\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval\n  (match (app regex-empty? pat1) (#f) (_ (-> pat2 <-)))\n  (env ((□? (pat1 pat2)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  5
  255
  app
  "\"'(eval\n  (app\n   alt\n   (app seq (app regex-derivative pat1 c) pat2)\n   (-> (app seq (app regex-empty pat1) (app regex-derivative pat2 c)) <-))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  35
  11
  13
  11
  6
  2
  8
  1
  6/11
  5
  #f
  49/11
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  regex
  2
  5
  255
  app
  "\"'(eval\n  (app and (-> (app regex-alt? re) <-) (app f (app cadr re) (app caddr re)))\n  (env ((□? (re f)))))\""
  59
  22
  19
  18
  11
  4
  15
  1
  1/2
  10
  #f
  49/11
  ((1 1 0) (1 1 0) (1/2 1 0)))
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval (app eq? (-> (app car re) <-) 'seq) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  5
  255
  app
  "\"'(eval\n  (app and (-> (app regex-seq? re) <-) (app f (app cadr re) (app caddr re)))\n  (env ((□? (re f)))))\""
  24
  11
  6
  7
  5
  2
  7
  1
  5/11
  5
  #f
  49/11
  ((1 1 0) (1/2 1 0) (1 1 0)))
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-empty? (-> re <-)) (env ((□? (re c)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app char? (-> re <-)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app car (-> re <-)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval (app regex-empty (-> pat2 <-)) (env ((□? (pat1 pat2)) (□? (re)))))\""
  59
  21
  22
  16
  17
  3
  20
  1
  15/19
  9
  #f
  31/7
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 3 0)))
'(shuffled-cache
  0
  regex
  2
  5
  255
  app
  "\"'(eval (app f (app cadr re) (-> (app caddr re) <-)) (env ((□? (re f)))))\""
  60
  22
  22
  16
  17
  3
  20
  1
  15/19
  9
  #f
  97/22
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval\n  (app and (-> (app pair? re) <-) (app eq? (app car re) 'alt))\n  (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app match-seq (-> re <-) (λ (pat1 pat2) ...)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval\n  (app regex-derivative (-> pat2 <-) c)\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  59
  21
  22
  16
  17
  3
  20
  1
  15/19
  9
  #f
  31/7
  ((5/2 5/2 0) (5/2 3 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  regex
  2
  5
  255
  app
  "\"'(eval\n  (app seq (app regex-empty pat1) (-> (app regex-derivative pat2 c) <-))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  93
  33
  36
  24
  23
  5
  28
  1
  21/31
  14
  #f
  146/33
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  regex
  2
  5
  255
  match
  "\"'(eval\n  (match\n   (app regex-atom? re)\n   ((#f) (-> (match (app match-seq re (λ (pat1 pat2) ...)) ...) <-))\n   _)\n  (env ((□? (re c)))))\""
  120
  50
  42
  28
  33
  7
  40
  1
  31/48
  22
  #f
  111/25
  ((1 1 0) (3/2 3/2 0) (1 1 0)))
'(shuffled-cache
  0
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval\n  (app seq (app regex-derivative pat1 c) (-> pat2 <-))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  136
  64
  44
  28
  43
  7
  50
  1
  11/17
  27
  #f
  283/64
  ((1 1 0) (1 1 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app cadr (-> re <-)) (env ((□? (re f)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  5
  255
  app
  "\"'(eval\n  (app and (app regex-seq? re) (-> (app f (app cadr re) (app caddr re)) <-))\n  (env ((□? (re f)))))\""
  71
  31
  20
  20
  17
  4
  21
  1
  7/11
  15
  #f
  141/31
  ((5 5 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  0
  regex
  2
  5
  255
  app
  "\"'(eval (app eq? re (-> (app #t) <-)) (env ((□? (re)))))\""
  74
  33
  20
  21
  17
  4
  21
  1
  7/12
  17
  #t
  151/33
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-empty? (-> re <-)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  5
  255
  app
  "\"'(eval\n  (app\n   cons\n   'seq\n   (->\n    (app\n     cons\n     'foo\n     (app cons (app cons 'rep (app cons 'bar (app nil))) (app nil)))\n    <-))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  5
  255
  app
  "\"'(eval\n  (app cons (app cons 'rep (app cons 'bar (app nil))) (-> (app nil) <-))\n  (env ()))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  255
  match
  "\"'(eval\n  (λ (pat1 pat2) (-> (match (app regex-null? pat1) ...) <-))\n  (env ((□? (pat1 pat2)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  5
  255
  app
  "\"'(eval (app f (-> (app cadr re) <-) (app caddr re)) (env ((□? (re f)))))\""
  50
  14
  21
  15
  10
  3
  13
  1
  5/7
  6
  #f
  31/7
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval\n  (match (app regex-empty? re) (#f) (_ (-> regex-NULL <-)))\n  (env ((□? (re c)))))\""
  54
  17
  21
  16
  12
  3
  15
  1
  12/17
  9
  #t
  77/17
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval (λ (re) (-> (app eq? re (app #f)) <-)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  5
  255
  app
  "\"'(eval\n  (match (-> (app match-rep re (λ (pat) ...)) <-) (#f) c-x)\n  (env ((□? (re c)))))\""
  33
  16
  7
  10
  10
  2
  12
  1
  5/8
  8
  #f
  9/2
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval\n  (match (app regex-null? pat) (#f) (_ (-> regex-BLANK <-)))\n  (env ((□? (pat)))))\""
  37
  19
  7
  11
  12
  2
  14
  1
  12/19
  11
  #t
  87/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval (match (-> (app regex-null? pat1) <-) (#f) _) (env ((□? (pat1 pat2)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  5
  255
  app
  "\"'(eval\n  (match (app regex-atom? re) (#f) (_ (-> (app #f) <-)))\n  (env ((□? (re)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app eq? (-> re <-) (app #t)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval (match (-> (app regex-empty? re) <-) (#f) _) (env ((□? (re c)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  match
  "\"'(eval (λ (pat) (-> (match (app regex-null? pat) ...) <-)) (env ((□? (pat)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  5
  255
  app
  "\"'(eval\n  (app seq (app regex-derivative pat c) (-> (app rep pat) <-))\n  (env ((□? (pat)) (□? (re c)))))\""
  30
  11
  10
  9
  6
  2
  8
  1
  6/11
  5
  #f
  49/11
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  regex
  2
  5
  255
  app
  "\"'(eval\n  (match pair?-v (cons pair?-c pair?-d) (_ (-> (app #f) <-)))\n  (env ((□? (pair?-v)))))\""
  33
  13
  10
  10
  6
  2
  8
  1
  6/13
  7
  #t
  59/13
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-null? (-> pat2 <-)) (env ((□? (pat1 pat2)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  5
  255
  app
  "\"'(eval (app cons 'foo (-> (app cons 'bar (app nil)) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval (app car (-> (app cdr (app cdr p)) <-)) (env ((□? (p)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-atom? (-> re <-)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  5
  255
  match
  "\"'(eval\n  (match\n   (app match-seq re (λ (pat1 pat2) ...))\n   ((#f) (-> (match (app match-alt re (λ (pat1 pat2) ...)) ...) <-))\n   c-x)\n  (env ((□? (re)))))\""
  32
  17
  6
  9
  10
  2
  12
  1
  10/17
  8
  #f
  76/17
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  regex
  2
  5
  255
  app
  "\"'(eval\n  (app seq (app regex-empty pat1) (-> (app regex-empty pat2) <-))\n  (env ((□? (pat1 pat2)) (□? (re)))))\""
  67
  28
  20
  19
  16
  4
  20
  1
  4/7
  13
  #f
  125/28
  ((2 2 0) (3/2 3/2 0) (2 2 0)))
'(shuffled-cache
  0
  regex
  2
  5
  255
  app
  "\"'(eval\n  (app seq (-> (app regex-derivative pat1 c) <-) pat2)\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  89
  39
  27
  23
  21
  5
  26
  1
  1/2
  17
  #f
  173/39
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval (app regex-empty (-> pat1 <-)) (env ((□? (pat1 pat2)) (□? (re c)))))\""
  144
  61
  50
  33
  38
  8
  46
  1
  33/53
  27
  #f
  271/61
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  0
  regex
  2
  5
  255
  app
  "\"'(eval\n  (let (... () (_ (-> (app debug-trace) <-)) () ...) ...)\n  (env ((□? (re c)))))\""
  150
  65
  50
  35
  39
  8
  47
  1
  34/57
  31
  #t
  291/65
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  5
  255
  match
  "\"'(eval\n  (match\n   (app regex-atom? re)\n   ((#f) (-> (match (app match-seq re (λ (pat1 pat2) ...)) ...) <-))\n   _)\n  (env ((□? (re)))))\""
  170
  80
  52
  38
  47
  9
  56
  1
  4/7
  37
  #f
  357/80
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  regex
  2
  5
  255
  app
  "\"'(eval\n  (app cons 'alt (-> (app cons pat1 (app cons pat2 (app nil))) <-))\n  (env ((□? (pat1 pat2)))))\""
  173
  82
  52
  39
  47
  9
  56
  1
  5/9
  39
  #t
  367/82
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval\n  (app regex-derivative pat1 (-> c <-))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app pair? (-> re <-)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  5
  255
  app
  "\"'(eval (match null?-v (nil) (_ (-> (app #f) <-))) (env ((□? (null?-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  5
  255
  app
  "\"'(eval\n  (app\n   cons\n   'foo\n   (-> (app cons (app cons 'rep (app cons 'bar (app nil))) (app nil)) <-))\n  (env ()))\""
  5
  4
  0
  1
  2
  0
  2
  1
  1/2
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  255
  match
  "\"'(eval\n  (λ (pattern data) (-> (match (app null? data) ...) <-))\n  (env ((□? (pattern data)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval\n  (app and (-> (app pair? re) <-) (app eq? (app car re) 'rep))\n  (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  5
  255
  app
  "\"'(eval (app f (-> (app cadr re) <-)) (env ((□? (re f)))))\""
  50
  14
  21
  15
  10
  3
  13
  1
  5/7
  6
  #f
  31/7
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  regex
  2
  5
  255
  app
  "\"'(eval (match (app regex-rep? re) ((#f) (-> (app #f) <-)) _) (env ((□? (re)))))\""
  53
  16
  21
  16
  10
  3
  13
  1
  5/8
  8
  #t
  9/2
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval\n  (app cons (-> pat1 <-) (app cons pat2 (app nil)))\n  (env ((□? (pat1 pat2)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval\n  (λ (cadr-v) (-> (app car (app cdr (app cdr cadr-v))) <-))\n  (env ((□? (cadr-v)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval\n  (app regex-derivative pat2 (-> c <-))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval\n  (λ (re) (-> (app and (app pair? re) (app eq? (app car re) 'seq)) <-))\n  (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval (app car (-> data <-)) (env ((□? (pattern data)))))\""
  42
  25
  11
  6
  24
  3
  27
  1
  15/16
  23
  #f
  128/25
  ((7/2 7/2 0) (4 4 0) (7/2 7/2 0)))
'(shuffled-cache
  0
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval\n  (app regex-derivative (-> pat2 <-) c)\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  86
  45
  25
  16
  40
  5
  45
  1
  27/32
  31
  #f
  24/5
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval (app cdr (-> data <-)) (env ((□? (pattern data)))))\""
  87
  46
  25
  16
  40
  5
  45
  1
  107/128
  31
  #f
  223/46
  ((1/2 1/2 0) (1/2 1/2 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval (match (-> (app regex-null? pat2) <-) (#f) _) (env ((□? (pat1 pat2)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app car (-> re <-)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval (match (-> (app regex-null? re) <-) (#f) _) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  5
  255
  app
  "\"'(eval\n  (λ (re f)\n    (-> (app and (app regex-alt? re) (app f (app cadr re) (app caddr re))) <-))\n  (env ((□? (re f)))))\""
  26
  13
  6
  7
  5
  2
  7
  1
  5/13
  6
  #f
  58/13
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  regex
  2
  255
  match
  "\"'(eval (λ (re) (-> (match (app regex-empty? re) ...) <-)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  5
  255
  app
  "\"'(eval\n  (λ (pat1 pat2)\n    (->\n     (app\n      alt\n      (app seq (app regex-derivative pat1 c) pat2)\n      (app seq (app regex-empty pat1) (app regex-derivative pat2 c)))\n     <-))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  34
  11
  12
  11
  6
  2
  8
  1
  6/11
  5
  #f
  49/11
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval (app regex-null? (-> pat <-)) (env ((□? (pat)))))\""
  96
  31
  37
  28
  19
  6
  25
  1
  19/29
  13
  #f
  137/31
  ((7/2 7/2 0) (7/2 7/2 0) (3 3 0)))
'(shuffled-cache
  0
  regex
  2
  5
  255
  app
  "\"'(eval\n  (app cons pat1 (-> (app cons pat2 (app nil)) <-))\n  (env ((□? (pat1 pat2)))))\""
  98
  33
  37
  28
  19
  6
  25
  1
  19/31
  15
  #t
  49/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  255
  let
  "\"'(eval (λ (re c) (-> (let (_) ...) <-)) (env ((□? (re c)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval (app regex-empty (-> pattern <-)) (env ((□? (pattern data)))))\""
  50
  23
  17
  10
  22
  4
  26
  1
  14/15
  11
  #t
  103/23
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  0
  regex
  2
  5
  255
  app
  "\"'(eval\n  (λ (re f)\n    (-> (app and (app regex-seq? re) (app f (app cadr re) (app caddr re))) <-))\n  (env ((□? (re f)))))\""
  76
  36
  23
  17
  27
  6
  33
  1
  19/28
  17
  #f
  161/36
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app match-alt (-> re <-) (λ (pat1 pat2) ...)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-null? (-> re <-)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  match
  "\"'(eval (λ (car-v) (-> (match car-v ...) <-)) (env ((□? (car-v)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-atom? (-> re <-)) (env ((□? (re c)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app caddr (-> re <-)) (env ((□? (re f)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  match
  "\"'(eval\n  (match\n   (app regex-null? pat1)\n   ((#f) (-> (match (app regex-null? pat2) ...) <-))\n   _)\n  (env ((□? (pat1 pat2)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval (match (-> (app regex-null? re) <-) (#f) _) (env ((□? (re c)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval\n  (match (app match-rep re (λ (pat) ...)) (#f) (c-x (-> c-x <-)))\n  (env ((□? (re c)))))\""
  34
  17
  7
  10
  10
  2
  12
  1
  10/17
  8
  #f
  76/17
  ((1 1 0) (3/2 3/2 0) (1 1 0)))
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app symbol? (-> re <-)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  5
  255
  app
  "\"'(eval\n  (app\n   check-expect\n   (->\n    (app\n     regex-match\n     (app\n      cons\n      'seq\n      (app\n       cons\n       'foo\n       (app cons (app cons 'rep (app cons 'bar (app nil))) (app nil))))\n     (app cons 'foo (app cons 'bar (app nil))))\n    <-)\n   (app #f))\n  (env ()))\""
  18
  10
  5
  3
  10
  3
  13
  1
  1
  4
  #f
  22/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  regex
  2
  255
  match
  "\"'(eval\n  (match\n   (app regex-empty? pat1)\n   ((#f) (-> (match (app regex-empty? pat2) ...) <-))\n   _)\n  (env ((□? (pat1 pat2)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-rep? (-> re <-)) (env ((□? (re f)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  5
  255
  app
  "\"'(eval\n  (λ (pat1 pat2)\n    (-> (app alt (app regex-empty pat1) (app regex-empty pat2)) <-))\n  (env ((□? (pat1 pat2)) (□? (re)))))\""
  34
  11
  12
  11
  6
  2
  8
  1
  6/11
  5
  #f
  49/11
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app eq? c (-> re <-)) (env ((□? (re c)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval\n  (match (app regex-empty? pat2) (#f) (_ (-> pat1 <-)))\n  (env ((□? (pat1 pat2)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval (match (-> (app null? data) <-) (#f) _) (env ((□? (pattern data)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app pair? (-> re <-)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  5
  255
  app
  "\"'(eval\n  (match\n   (app regex-empty? pat2)\n   ((#f) (-> (app cons 'seq (app cons pat1 (app cons pat2 (app nil)))) <-))\n   _)\n  (env ((□? (pat1 pat2)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval (match (-> (app eq? c re) <-) (#f) _) (env ((□? (re c)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  5
  255
  lettypes
  "\"'(eval ((top) lettypes (cons ... nil) ...) (env ()))\""
  29
  18
  7
  4
  18
  5
  23
  1
  1
  7
  #f
  79/18
  ((1 3/2 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  regex
  2
  5
  255
  app
  "\"'(eval\n  (app seq (-> (app regex-empty pat1) <-) (app regex-empty pat2))\n  (env ((□? (pat1 pat2)) (□? (re)))))\""
  64
  29
  21
  14
  24
  7
  31
  1
  24/29
  12
  #f
  128/29
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval\n  (app regex-derivative (-> pat1 <-) c)\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  118
  46
  44
  28
  37
  10
  47
  1
  37/46
  20
  #f
  102/23
  ((5/2 5/2 0) (5/2 3 0) (3 3 0)))
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (match (-> pair?-v <-) (cons pair?-c pair?-d) _) (env ((□? (pair?-v)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval\n  (match (app regex-empty? pat) (#f) (_ (-> regex-BLANK <-)))\n  (env ((□? (pat)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  255
  match
  "\"'(eval\n  (match\n   (app regex-empty? re)\n   ((#f) (-> (match (app regex-null? re) ...) <-))\n   _)\n  (env ((□? (re c)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  5
  255
  app
  "\"'(eval (match (app regex-rep? re) (#f) (_ (-> (app #t) <-))) (env ((□? (re)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  255
  match
  "\"'(eval\n  (match\n   (app regex-null? pat1)\n   ((#f) (-> (match (app regex-null? pat2) ...) <-))\n   _)\n  (env ((□? (pat1 pat2)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  5
  255
  app
  "\"'(eval\n  (match (-> (app match-alt re (λ (pat1 pat2) ...)) <-) (#f) c-x)\n  (env ((□? (re c)))))\""
  31
  16
  6
  9
  10
  2
  12
  1
  5/8
  8
  #f
  9/2
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval\n  (λ (re) (-> (app and (app pair? re) (app eq? (app car re) 'alt)) <-))\n  (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  5
  255
  app
  "\"'(eval\n  (letrec*\n   (car ... check-expect)\n   (->\n    (app\n     check-expect\n     (app\n      regex-match\n      (app\n       cons\n       'seq\n       (app\n        cons\n        'foo\n        (app cons (app cons 'rep (app cons 'bar (app nil))) (app nil))))\n      (app cons 'foo (app cons 'bar (app nil))))\n     (app #f))\n    <-))\n  (env ()))\""
  27
  16
  7
  4
  16
  5
  21
  1
  1
  7
  #f
  71/16
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app caddr (-> re <-)) (env ((□? (re f)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval (λ (p) (-> (app car (app cdr (app cdr p))) <-)) (env ((□? (p)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app eq? (-> re <-) (app #f)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval\n  (match (app regex-atom? re) (#f) (_ (-> regex-NULL <-)))\n  (env ((□? (re c)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  5
  255
  app
  "\"'(eval (app cons 'bar (-> (app nil) <-)) (env ()))\""
  6
  5
  0
  1
  4
  0
  4
  1
  4/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval (app eq? (-> (app car re) <-) 'alt) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app car (-> re <-)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval (app cons (-> pat <-) (app nil)) (env ((□? (pat)))))\""
  64
  20
  25
  19
  13
  4
  17
  1
  13/18
  8
  #f
  22/5
  ((3 3 0) (3 3 0) (7/2 7/2 0)))
'(shuffled-cache
  0
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval (app regex-empty (-> pat2 <-)) (env ((□? (pat1 pat2)) (□? (re)))))\""
  92
  39
  30
  23
  28
  5
  33
  1
  22/31
  15
  #f
  57/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval (app regex-empty (-> pat1 <-)) (env ((□? (pat1 pat2)) (□? (re)))))\""
  101
  48
  30
  23
  34
  5
  39
  1
  11/17
  18
  #f
  35/8
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  regex
  2
  5
  255
  app
  "\"'(eval\n  (app seq (-> (app regex-derivative pat c) <-) (app rep pat))\n  (env ((□? (pat)) (□? (re c)))))\""
  138
  65
  44
  29
  44
  7
  51
  1
  15/23
  25
  #f
  57/13
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  0
  regex
  2
  5
  255
  app
  "\"'(eval (app cons 'bar (-> (app nil) <-)) (env ()))\""
  140
  67
  44
  29
  46
  7
  53
  1
  2/3
  27
  #t
  295/67
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  5
  255
  app
  "\"'(eval\n  (app alt (-> (app regex-derivative pat1 c) <-) (app regex-derivative pat2 c))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  151
  77
  44
  30
  50
  7
  57
  1
  47/75
  30
  #f
  338/77
  ((1/2 1/2 0) (1/2 1 0) (1 1 0)))
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval\n  (app and (app pair? re) (-> (app eq? (app car re) 'seq) <-))\n  (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (match cdr-v ((cons cdr-c cdr-d) (-> cdr-d <-))) (env ((□? (cdr-v)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval (app regex-empty (-> pat1 <-)) (env ((□? (pat1 pat2)) (□? (re)))))\""
  57
  17
  23
  17
  13
  3
  16
  1
  13/17
  8
  #f
  76/17
  ((5/2 3 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval\n  (app regex-derivative (-> pat1 <-) c)\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  73
  28
  25
  20
  20
  3
  23
  1
  7/11
  13
  #f
  125/28
  ((1 1 0) (1/2 1/2 0) (1 1 0)))
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval\n  (app and (-> (app pair? re) <-) (app eq? (app car re) 'seq))\n  (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval (match (-> (app regex-null? pat) <-) (#f) _) (env ((□? (pat)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-rep? (-> re <-)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  5
  255
  app
  "\"'(eval\n  (match\n   (app regex-empty? pat)\n   ((#f) (-> (app cons 'rep (app cons pat (app nil))) <-))\n   _)\n  (env ((□? (pat)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval\n  (app regex-derivative pat1 (-> c <-))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval (λ (cadr-v) (-> (app car (app cdr cadr-v)) <-)) (env ((□? (cadr-v)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval\n  (match (app regex-null? pat2) (#f) (_ (-> regex-NULL <-)))\n  (env ((□? (pat1 pat2)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval (app regex-derivative (-> pat <-) c) (env ((□? (pat)) (□? (re c)))))\""
  61
  20
  23
  18
  15
  3
  18
  1
  3/4
  11
  #f
  91/20
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval (app car (-> (app cdr p) <-)) (env ((□? (p)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval (app car (-> (app cdr (app cdr cadr-v)) <-)) (env ((□? (cadr-v)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app match-seq (-> re <-) (λ (pat1 pat2) ...)) (env ((□? (re c)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  5
  255
  match
  "\"'(eval\n  (match\n   (app match-alt re (λ (pat1 pat2) ...))\n   ((#f) (-> (match (app match-rep re (λ (pat) ...)) ...) <-))\n   c-x)\n  (env ((□? (re c)))))\""
  34
  17
  7
  10
  10
  2
  12
  1
  10/17
  8
  #f
  76/17
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  regex
  2
  255
  match
  "\"'(eval\n  (match\n   (app regex-null? pat2)\n   ((#f) (-> (match (app regex-empty? pat1) ...) <-))\n   _)\n  (env ((□? (pat1 pat2)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app cons (-> pat2 <-) (app nil)) (env ((□? (pat1 pat2)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (match (-> null?-v <-) (nil) _) (env ((□? (null?-v)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval (match (-> (app regex-empty? re) <-) (#f) _) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval\n  (match (app match-seq re (λ (pat1 pat2) ...)) (#f) (c-x (-> c-x <-)))\n  (env ((□? (re c)))))\""
  32
  17
  6
  9
  10
  2
  12
  1
  10/17
  8
  #f
  76/17
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-seq? (-> re <-)) (env ((□? (re f)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  5
  255
  app
  "\"'(eval\n  (match (app regex-null? re) (#f) (_ (-> (app #f) <-)))\n  (env ((□? (re)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  5
  255
  app
  "\"'(eval\n  (match (app regex-empty? re) (#f) (_ (-> (app #t) <-)))\n  (env ((□? (re)))))\""
  5
  4
  0
  1
  0
  0
  0
  1
  0
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app eq? (-> c <-) re) (env ((□? (re c)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval (app car (-> (app cdr cadr-v) <-)) (env ((□? (cadr-v)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  match
  "\"'(eval\n  (match (app eq? c re) ((#f) (-> (match (app regex-atom? re) ...) <-)) _)\n  (env ((□? (re c)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  5
  255
  app
  "\"'(eval\n  (match (-> (app match-alt re (λ (pat1 pat2) ...)) <-) (#f) c-x)\n  (env ((□? (re)))))\""
  31
  16
  6
  9
  10
  2
  12
  1
  5/8
  8
  #f
  9/2
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  regex
  2
  5
  255
  app
  "\"'(eval\n  (app\n   check-expect\n   (app\n    regex-match\n    (app\n     cons\n     'seq\n     (app\n      cons\n      'foo\n      (app cons (app cons 'rep (app cons 'bar (app nil))) (app nil))))\n    (app cons 'foo (app cons 'bar (app nil))))\n   (-> (app #f) <-))\n  (env ()))\""
  33
  18
  6
  9
  12
  2
  14
  1
  2/3
  10
  #t
  41/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  255
  match
  "\"'(eval\n  (match\n   (app regex-empty? re)\n   ((#f) (-> (match (app regex-null? re) ...) <-))\n   _)\n  (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  5
  255
  app
  "\"'(eval\n  (λ (pat) (-> (app seq (app regex-derivative pat c) (app rep pat)) <-))\n  (env ((□? (pat)) (□? (re c)))))\""
  35
  11
  13
  11
  6
  2
  8
  1
  6/11
  5
  #f
  49/11
  ((3/2 3/2 0) (2 2 0) (3/2 2 0)))
'(shuffled-cache
  0
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app cadr re)) (env ((□? (re f)))))\""
  40
  13
  15
  12
  6
  3
  9
  1
  6/13
  7
  #t
  59/13
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app cdr (-> p <-)) (env ((□? (p)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  5
  255
  app
  "\"'(eval\n  (app regex-empty? (-> (app regex-empty pattern) <-))\n  (env ((□? (pattern data)))))\""
  36
  11
  14
  11
  6
  2
  8
  1
  6/11
  5
  #f
  49/11
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  regex
  2
  5
  255
  app
  "\"'(eval\n  (app alt (-> (app regex-empty pat1) <-) (app regex-empty pat2))\n  (env ((□? (pat1 pat2)) (□? (re)))))\""
  46
  20
  14
  12
  10
  2
  12
  1
  6/13
  8
  #f
  22/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app cdr (-> cadr-v <-)) (env ((□? (cadr-v)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-null? (-> pat1 <-)) (env ((□? (pat1 pat2)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-null? (-> re <-)) (env ((□? (re c)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval (match (app eq? c re) (#f) (_ (-> regex-BLANK <-))) (env ((□? (re c)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  5
  255
  app
  "\"'(eval\n  (app\n   regex-match\n   (-> (app regex-derivative pattern (app car data)) <-)\n   (app cdr data))\n  (env ((□? (pattern data)))))\""
  40
  15
  14
  11
  8
  2
  10
  1
  8/15
  8
  #f
  68/15
  ((3/2 2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  regex
  2
  5
  255
  app
  "\"'(eval\n  (app\n   alt\n   (-> (app seq (app regex-derivative pat1 c) pat2) <-)\n   (app seq (app regex-empty pat1) (app regex-derivative pat2 c)))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  69
  26
  27
  16
  14
  4
  18
  1
  7/13
  13
  #f
  9/2
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-empty? (-> pat2 <-)) (env ((□? (pat1 pat2)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  match
  "\"'(eval (λ (pair?-v) (-> (match pair?-v ...) <-)) (env ((□? (pair?-v)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval\n  (app regex-derivative (-> pattern <-) (app car data))\n  (env ((□? (pattern data)))))\""
  50
  23
  17
  10
  22
  4
  26
  1
  14/15
  11
  #t
  103/23
  ((3 7/2 0) (7/2 7/2 0) (3 3 0)))
'(shuffled-cache
  0
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval\n  (match (app regex-null? re) (#f) (_ (-> regex-NULL <-)))\n  (env ((□? (re c)))))\""
  53
  26
  17
  10
  24
  4
  28
  1
  8/9
  14
  #t
  59/13
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  5
  255
  match
  "\"'(eval\n  (match\n   (app match-seq re (λ (pat1 pat2) ...))\n   ((#f) (-> (match (app match-alt re (λ (pat1 pat2) ...)) ...) <-))\n   c-x)\n  (env ((□? (re c)))))\""
  84
  43
  23
  18
  34
  6
  40
  1
  26/35
  22
  #f
  194/43
  ((3/2 3/2 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-null? (-> pat1 <-)) (env ((□? (pat1 pat2)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval (app cdr (-> (app cdr cadr-v) <-)) (env ((□? (cadr-v)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval\n  (app and (app pair? re) (-> (app eq? (app car re) 'alt) <-))\n  (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval\n  (match (app regex-null? pat1) (#f) (_ (-> regex-NULL <-)))\n  (env ((□? (pat1 pat2)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  5
  255
  app
  "\"'(eval\n  (λ (re f) (-> (app and (app regex-rep? re) (app f (app cadr re))) <-))\n  (env ((□? (re f)))))\""
  32
  16
  7
  9
  7
  2
  9
  1
  7/16
  9
  #f
  73/16
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  regex
  2
  255
  match
  "\"'(eval\n  (match\n   (app regex-null? pat)\n   ((#f) (-> (match (app regex-empty? pat) ...) <-))\n   _)\n  (env ((□? (pat)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval\n  (app regex-derivative pattern (-> (app car data) <-))\n  (env ((□? (pattern data)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval\n  (app and (app pair? re) (-> (app eq? (app car re) 'rep) <-))\n  (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app pair? (-> re <-)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval (match (-> (app regex-empty? pat2) <-) (#f) _) (env ((□? (pat1 pat2)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  5
  255
  app
  "\"'(eval\n  (λ (pat1 pat2)\n    (-> (app seq (app regex-empty pat1) (app regex-empty pat2)) <-))\n  (env ((□? (pat1 pat2)) (□? (re)))))\""
  35
  11
  13
  11
  6
  2
  8
  1
  6/11
  5
  #f
  49/11
  ((3/2 3/2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  regex
  2
  5
  255
  app
  "\"'(eval (app cons 'rep (-> (app cons pat (app nil)) <-)) (env ((□? (pat)))))\""
  37
  13
  13
  11
  6
  2
  8
  1
  6/13
  7
  #t
  59/13
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  5
  255
  app
  "\"'(eval\n  (app cons (-> (app cons 'rep (app cons 'bar (app nil))) <-) (app nil))\n  (env ()))\""
  39
  15
  13
  11
  8
  2
  10
  1
  8/15
  9
  #t
  23/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  5
  255
  app
  "\"'(eval (app cons pat2 (-> (app nil) <-)) (env ((□? (pat1 pat2)))))\""
  41
  17
  13
  11
  8
  2
  10
  1
  8/17
  11
  #t
  79/17
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  255
  match
  "\"'(eval\n  (match (app regex-null? re) ((#f) (-> (match (app eq? c re) ...) <-)) _)\n  (env ((□? (re c)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval (app equal? check (-> expect <-)) (env ((□? (check expect)))))\""
  6
  3
  2
  1
  2
  2
  4
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-empty? (-> pat1 <-)) (env ((□? (pat1 pat2)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  5
  255
  app
  "\"'(eval\n  (app and (app regex-alt? re) (-> (app f (app cadr re) (app caddr re)) <-))\n  (env ((□? (re f)))))\""
  62
  30
  15
  17
  16
  3
  19
  1
  9/17
  14
  #f
  68/15
  ((4 4 0) (4 9/2 0) (7/2 4 0)))
'(shuffled-cache
  0
  regex
  2
  5
  255
  app
  "\"'(eval (app cons pat (-> (app nil) <-)) (env ((□? (pat)))))\""
  64
  32
  15
  17
  16
  3
  19
  1
  9/19
  16
  #t
  73/16
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval (match (-> (app regex-atom? re) <-) (#f) _) (env ((□? (re c)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app cadr re) (app caddr re)) (env ((□? (re f)))))\""
  9
  3
  3
  3
  0
  1
  1
  1
  0
  2
  #f
  16/3
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app cdr (-> p <-)) (env ((□? (p)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  5
  255
  letrec*
  "\"'(eval (lettypes cons ... nil (letrec* (car ... check-expect) ...)) (env ()))\""
  28
  17
  7
  4
  17
  5
  22
  1
  1
  7
  #f
  75/17
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  regex
  2
  5
  255
  app
  "\"'(eval\n  (app cons pat1 (-> (app cons pat2 (app nil)) <-))\n  (env ((□? (pat1 pat2)))))\""
  31
  19
  7
  5
  17
  5
  22
  1
  17/19
  9
  #t
  85/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval\n  (λ (re) (-> (app or (app char? re) (app symbol? re)) <-))\n  (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (match (-> car-v <-) (cons car-c car-d)) (env ((□? (car-v)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  5
  255
  app
  "\"'(eval\n  (match (-> (app match-seq re (λ (pat1 pat2) ...)) <-) (#f) c-x)\n  (env ((□? (re)))))\""
  31
  16
  6
  9
  10
  2
  12
  1
  5/8
  8
  #f
  9/2
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  regex
  2
  5
  255
  app
  "\"'(eval (match (-> (app regex-rep? re) <-) (#f) _) (env ((□? (re)))))\""
  47
  26
  9
  12
  14
  3
  17
  1
  1/2
  12
  #f
  58/13
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (match car-v ((cons car-c car-d) (-> car-c <-))) (env ((□? (car-v)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  5
  255
  app
  "\"'(eval (app f (-> (app cadr re) <-) (app caddr re)) (env ((□? (re f)))))\""
  50
  14
  21
  15
  10
  3
  13
  1
  5/7
  6
  #f
  31/7
  ((2 2 0) (2 2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app match-alt (-> re <-) (λ (pat1 pat2) ...)) (env ((□? (re c)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval (app rep (-> pat <-)) (env ((□? (pat)) (□? (re c)))))\""
  57
  17
  23
  17
  13
  3
  16
  1
  13/17
  8
  #f
  76/17
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval\n  (match (app regex-null? pat2) (#f) (_ (-> pat1 <-)))\n  (env ((□? (pat1 pat2)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  5
  255
  app
  "\"'(eval\n  (λ (pat1 pat2)\n    (->\n     (app alt (app regex-derivative pat1 c) (app regex-derivative pat2 c))\n     <-))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  34
  11
  12
  11
  6
  2
  8
  1
  6/11
  5
  #f
  49/11
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval (app or (app char? re) (-> (app symbol? re) <-)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  5
  255
  app
  "\"'(eval\n  (app alt (app regex-empty pat1) (-> (app regex-empty pat2) <-))\n  (env ((□? (pat1 pat2)) (□? (re)))))\""
  36
  11
  14
  11
  6
  2
  8
  1
  6/11
  5
  #f
  49/11
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  regex
  2
  5
  255
  app
  "\"'(eval (match (-> (app regex-empty? pat) <-) (#f) _) (env ((□? (pat)))))\""
  111
  44
  39
  28
  25
  6
  31
  1
  113/186
  18
  #f
  97/22
  ((5 5 0) (5 5 0) (9/2 5 0)))
'(shuffled-cache
  0
  regex
  2
  5
  255
  app
  "\"'(eval\n  (match\n   (app null? data)\n   ((#f)\n    (->\n     (app\n      regex-match\n      (app regex-derivative pattern (app car data))\n      (app cdr data))\n     <-))\n   _)\n  (env ((□? (pattern data)))))\""
  129
  54
  44
  31
  30
  9
  39
  1
  143/246
  22
  #f
  119/27
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  regex
  2
  5
  255
  app
  "\"'(eval\n  (match pair?-v ((cons pair?-c pair?-d) (-> (app #t) <-)) _)\n  (env ((□? (pair?-v)))))\""
  132
  56
  44
  32
  30
  9
  39
  1
  143/258
  24
  #t
  31/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app cdr (-> cadr-v <-)) (env ((□? (cadr-v)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app cadr re) (app caddr re)) (env ((□? (re f)))))\""
  9
  3
  3
  3
  0
  1
  1
  1
  0
  2
  #f
  16/3
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app match-rep (-> re <-) (λ (pat) ...)) (env ((□? (re c)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval (app null? (-> data <-)) (env ((□? (pattern data)))))\""
  42
  25
  11
  6
  24
  3
  27
  1
  15/16
  23
  #f
  128/25
  ((4 4 0) (7/2 7/2 0) (7/2 4 0)))
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval (λ (re) (-> (app eq? re (app #t)) <-)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  5
  255
  app
  "\"'(eval (match null?-v ((nil) (-> (app #t) <-)) _) (env ((□? (null?-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval (match (-> (app regex-null? pat1) <-) (#f) _) (env ((□? (pat1 pat2)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  5
  255
  app
  "\"'(eval\n  (app and (app regex-rep? re) (-> (app f (app cadr re)) <-))\n  (env ((□? (re f)))))\""
  46
  17
  15
  14
  9
  3
  12
  1
  9/14
  9
  #f
  77/17
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval\n  (λ (re) (-> (app and (app pair? re) (app eq? (app car re) 'rep)) <-))\n  (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  5
  255
  app
  "\"'(eval (app f (app cadr re) (-> (app caddr re) <-)) (env ((□? (re f)))))\""
  52
  18
  20
  14
  14
  3
  17
  1
  3/4
  7
  #f
  79/18
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval (match (-> (app regex-null? pat2) <-) (#f) _) (env ((□? (pat1 pat2)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  5
  255
  app
  "\"'(eval\n  (match (-> (app match-seq re (λ (pat1 pat2) ...)) <-) (#f) c-x)\n  (env ((□? (re c)))))\""
  31
  16
  6
  9
  10
  2
  12
  1
  5/8
  8
  #f
  9/2
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval (match (-> (app regex-empty? pat1) <-) (#f) _) (env ((□? (pat1 pat2)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval (app or (-> (app char? re) <-) (app symbol? re)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  5
  255
  app
  "\"'(eval (app cons pat2 (-> (app nil) <-)) (env ((□? (pat1 pat2)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-null? (-> pat2 <-)) (env ((□? (pat1 pat2)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-alt? (-> re <-)) (env ((□? (re f)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  5
  255
  app
  "\"'(eval\n  (app\n   regex-match\n   (app\n    cons\n    'seq\n    (app\n     cons\n     'foo\n     (app cons (app cons 'rep (app cons 'bar (app nil))) (app nil))))\n   (-> (app cons 'foo (app cons 'bar (app nil))) <-))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  5
  255
  app
  "\"'(eval\n  (app alt (app regex-derivative pat1 c) (-> (app regex-derivative pat2 c) <-))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  39
  14
  14
  11
  8
  2
  10
  1
  4/7
  7
  #f
  9/2
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval\n  (app regex-derivative pat2 (-> c <-))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-derivative pat (-> c <-)) (env ((□? (pat)) (□? (re c)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  5
  255
  app
  "\"'(eval\n  (app\n   regex-match\n   (->\n    (app\n     cons\n     'seq\n     (app\n      cons\n      'foo\n      (app cons (app cons 'rep (app cons 'bar (app nil))) (app nil))))\n    <-)\n   (app cons 'foo (app cons 'bar (app nil))))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval\n  (match (app regex-null? pat1) (#f) (_ (-> pat2 <-)))\n  (env ((□? (pat1 pat2)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app cadr (-> re <-)) (env ((□? (re f)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app eq? (-> re <-) (app #t)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  5
  255
  app
  "\"'(eval\n  (λ (check expect) (-> (app equal? check expect) <-))\n  (env ((□? (check expect)))))\""
  26
  15
  7
  4
  12
  5
  17
  1
  11/13
  6
  #f
  22/5
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app car (-> re <-)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  5
  255
  app
  "\"'(eval (app cons 'rep (-> (app cons pat (app nil)) <-)) (env ((□? (pat)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  5
  255
  app
  "\"'(eval\n  (match (app regex-null? re) (#f) (_ (-> (app #f) <-)))\n  (env ((□? (re)))))\""
  6
  4
  0
  2
  0
  0
  0
  1
  0
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval (λ (re) (-> (app eq? re (app #f)) <-)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  5
  255
  app
  "\"'(eval\n  (app\n   cons\n   'seq\n   (->\n    (app\n     cons\n     'foo\n     (app cons (app cons 'rep (app cons 'bar (app nil))) (app nil)))\n    <-))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  255
  match
  "\"'(eval (λ (null?-v) (-> (match null?-v ...) <-)) (env ((□? (null?-v)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval\n  (app regex-derivative (-> pat2 <-) c)\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  59
  21
  22
  16
  17
  3
  20
  1
  15/19
  9
  #f
  31/7
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-empty? (-> re <-)) (env ((□? (re c)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-rep? (-> re <-)) (env ((□? (re f)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-null? (-> pat1 <-)) (env ((□? (pat1 pat2)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval (app or (app char? re) (-> (app symbol? re) <-)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval (λ (p) (-> (app car (app cdr p)) <-)) (env ((□? (p)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval (match (-> (app regex-null? re) <-) (#f) _) (env ((□? (re c)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app cdr (-> cadr-v <-)) (env ((□? (cadr-v)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval (app or (-> (app char? re) <-) (app symbol? re)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  5
  255
  app
  "\"'(eval\n  (λ (pat1 pat2)\n    (-> (app alt (app regex-empty pat1) (app regex-empty pat2)) <-))\n  (env ((□? (pat1 pat2)) (□? (re)))))\""
  34
  11
  12
  11
  6
  2
  8
  1
  6/11
  5
  #f
  49/11
  ((3/2 2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval (app regex-empty (-> pat1 <-)) (env ((□? (pat1 pat2)) (□? (re c)))))\""
  89
  28
  35
  26
  19
  5
  24
  1
  19/28
  13
  #f
  125/28
  ((5/2 5/2 0) (5/2 5/2 0) (3 3 0)))
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app caddr (-> re <-)) (env ((□? (re f)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (match (-> car-v <-) (cons car-c car-d)) (env ((□? (car-v)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval (match (-> (app regex-null? pat) <-) (#f) _) (env ((□? (pat)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval\n  (match (app regex-null? pat) (#f) (_ (-> regex-BLANK <-)))\n  (env ((□? (pat)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  5
  255
  letrec*
  "\"'(eval (lettypes cons ... nil (letrec* (car ... check-expect) ...)) (env ()))\""
  32
  20
  7
  5
  19
  5
  24
  1
  19/20
  10
  #f
  9/2
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app caddr (-> re <-)) (env ((□? (re f)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  let
  "\"'(eval (λ (re c) (-> (let (_) ...) <-)) (env ((□? (re c)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  5
  255
  app
  "\"'(eval\n  (match (-> (app match-alt re (λ (pat1 pat2) ...)) <-) (#f) c-x)\n  (env ((□? (re c)))))\""
  31
  16
  6
  9
  10
  2
  12
  1
  5/8
  8
  #f
  9/2
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  regex
  2
  5
  255
  lettypes
  "\"'(eval ((top) lettypes (cons ... nil) ...) (env ()))\""
  60
  34
  13
  13
  28
  7
  35
  1
  14/17
  15
  #f
  151/34
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval (app cdr (-> (app cdr cadr-v) <-)) (env ((□? (cadr-v)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval\n  (match (app regex-null? re) (#f) (_ (-> regex-NULL <-)))\n  (env ((□? (re c)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval (app regex-empty (-> pattern <-)) (env ((□? (pattern data)))))\""
  53
  26
  17
  10
  24
  4
  28
  1
  8/9
  14
  #t
  59/13
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  1
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval\n  (match (app match-seq re (λ (pat1 pat2) ...)) (#f) (c-x (-> c-x <-)))\n  (env ((□? (re)))))\""
  84
  43
  23
  18
  34
  6
  40
  1
  26/35
  22
  #f
  194/43
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  regex
  2
  5
  255
  match
  "\"'(eval\n  (match\n   (app match-seq re (λ (pat1 pat2) ...))\n   ((#f) (-> (match (app match-alt re (λ (pat1 pat2) ...)) ...) <-))\n   c-x)\n  (env ((□? (re c)))))\""
  106
  59
  25
  22
  43
  7
  50
  1
  33/49
  29
  #f
  265/59
  ((1/2 1/2 0) (1/2 1/2 0) (1 1 0)))
'(shuffled-cache
  1
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval\n  (match (app match-seq re (λ (pat1 pat2) ...)) (#f) (c-x (-> c-x <-)))\n  (env ((□? (re c)))))\""
  118
  70
  25
  23
  47
  7
  54
  1
  33/52
  34
  #f
  157/35
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-rep? (-> re <-)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval (match (-> (app regex-empty? pat2) <-) (#f) _) (env ((□? (pat1 pat2)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app cadr (-> re <-)) (env ((□? (re f)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  5
  255
  app
  "\"'(eval\n  (match (-> (app match-alt re (λ (pat1 pat2) ...)) <-) (#f) c-x)\n  (env ((□? (re)))))\""
  31
  16
  6
  9
  10
  2
  12
  1
  5/8
  8
  #f
  9/2
  ((1 1 0) (1 3/2 0) (1 1 0)))
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval\n  (app and (app regex-seq? re) (-> (app f (app cadr re) (app caddr re)) <-))\n  (env ((□? (re f)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval (app rep (-> pat <-)) (env ((□? (pat)) (□? (re c)))))\""
  151
  64
  49
  38
  40
  9
  49
  1
  37/55
  31
  #f
  289/64
  ((3 3 0) (3 7/2 0) (3 3 0)))
'(shuffled-cache
  1
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval\n  (app regex-derivative (-> pat1 <-) c)\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  164
  75
  51
  38
  47
  9
  56
  1
  19/30
  36
  #f
  338/75
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  regex
  2
  5
  255
  app
  "\"'(eval\n  (letrec* (... regex-NULL (regex-BLANK (-> (app #t) <-)) regex-alt? ...) ...)\n  (env ()))\""
  166
  77
  51
  38
  49
  9
  58
  1
  20/31
  38
  #t
  348/77
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  5
  255
  app
  "\"'(eval\n  (letrec*\n   (car ... check-expect)\n   (->\n    (app\n     check-expect\n     (app\n      regex-match\n      (app\n       cons\n       'seq\n       (app\n        cons\n        'foo\n        (app cons (app cons 'rep (app cons 'bar (app nil))) (app nil))))\n      (app cons 'foo (app cons 'bar (app nil))))\n     (app #f))\n    <-))\n  (env ()))\""
  192
  93
  58
  41
  65
  14
  79
  1
  28/39
  45
  #f
  419/93
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval (match (-> (app regex-null? pat1) <-) (#f) _) (env ((□? (pat1 pat2)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval\n  (app regex-derivative (-> pat1 <-) c)\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  57
  17
  23
  17
  13
  3
  16
  1
  13/17
  8
  #f
  76/17
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval (app regex-empty (-> pat1 <-)) (env ((□? (pat1 pat2)) (□? (re)))))\""
  68
  23
  25
  20
  15
  3
  18
  1
  13/19
  11
  #f
  103/23
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval\n  (match (app match-alt re (λ (pat1 pat2) ...)) (#f) (c-x (-> c-x <-)))\n  (env ((□? (re)))))\""
  92
  38
  31
  23
  24
  5
  29
  1
  11/17
  17
  #f
  169/38
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  regex
  2
  5
  255
  app
  "\"'(eval\n  (app cons 'seq (-> (app cons pat1 (app cons pat2 (app nil))) <-))\n  (env ((□? (pat1 pat2)))))\""
  95
  40
  31
  24
  24
  5
  29
  1
  11/18
  19
  #t
  179/40
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  255
  match
  "\"'(eval\n  (match\n   (app regex-null? re)\n   ((#f) (-> (match (app regex-atom? re) ...) <-))\n   _)\n  (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  5
  255
  app
  "\"'(eval (match (app regex-rep? re) (#f) (_ (-> (app #t) <-))) (env ((□? (re)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval (app car (-> (app cdr (app cdr p)) <-)) (env ((□? (p)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval\n  (app cons (-> pat1 <-) (app cons pat2 (app nil)))\n  (env ((□? (pat1 pat2)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app eq? (-> c <-) re) (env ((□? (re c)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  5
  255
  app
  "\"'(eval\n  (λ (re f)\n    (-> (app and (app regex-seq? re) (app f (app cadr re) (app caddr re))) <-))\n  (env ((□? (re f)))))\""
  26
  13
  6
  7
  5
  2
  7
  1
  5/13
  6
  #f
  58/13
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  regex
  2
  5
  255
  app
  "\"'(eval\n  (letrec* (... caddr (regex-NULL (-> (app #f) <-)) regex-BLANK ...) ...)\n  (env ()))\""
  28
  15
  6
  7
  7
  2
  9
  1
  7/15
  8
  #t
  68/15
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  255
  match
  "\"'(eval\n  (match\n   (app regex-null? pat1)\n   ((#f) (-> (match (app regex-null? pat2) ...) <-))\n   _)\n  (env ((□? (pat1 pat2)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app match-seq (-> re <-) (λ (pat1 pat2) ...)) (env ((□? (re c)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  5
  255
  app
  "\"'(eval (app cons 'bar (-> (app nil) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  5
  255
  app
  "\"'(eval\n  (app alt (app regex-empty pat1) (-> (app regex-empty pat2) <-))\n  (env ((□? (pat1 pat2)) (□? (re)))))\""
  38
  13
  14
  11
  8
  2
  10
  1
  8/13
  7
  #f
  59/13
  ((3/2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  regex
  2
  255
  match
  "\"'(eval\n  (match\n   (app regex-empty? re)\n   ((#f) (-> (match (app regex-null? re) ...) <-))\n   _)\n  (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  5
  255
  app
  "\"'(eval (app f (-> (app cadr re) <-)) (env ((□? (re f)))))\""
  50
  14
  21
  15
  10
  3
  13
  1
  5/7
  6
  #f
  31/7
  ((2 2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  regex
  2
  5
  255
  app
  "\"'(eval (app cons 'bar (-> (app nil) <-)) (env ()))\""
  52
  16
  21
  15
  12
  3
  15
  1
  3/4
  8
  #t
  9/2
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  5
  255
  app
  "\"'(eval\n  (app regex-empty? (-> (app regex-empty pattern) <-))\n  (env ((□? (pattern data)))))\""
  87
  27
  35
  25
  18
  5
  23
  1
  2/3
  13
  #f
  121/27
  ((2 2 0) (3/2 3/2 0) (2 2 0)))
'(shuffled-cache
  1
  regex
  2
  5
  255
  app
  "\"'(eval\n  (λ (pat) (-> (app seq (app regex-derivative pat c) (app rep pat)) <-))\n  (env ((□? (pat)) (□? (re c)))))\""
  116
  38
  48
  30
  24
  7
  31
  1
  12/19
  18
  #f
  85/19
  ((5/2 5/2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  regex
  2
  5
  255
  match
  "\"'(eval\n  (match\n   (app match-alt re (λ (pat1 pat2) ...))\n   ((#f) (-> (match (app regex-rep? re) ...) <-))\n   c-x)\n  (env ((□? (re)))))\""
  138
  50
  55
  33
  29
  9
  38
  1
  29/50
  23
  #f
  223/50
  ((1 1 0) (3/2 3/2 0) (1 1 0)))
'(shuffled-cache
  1
  regex
  2
  5
  255
  app
  "\"'(eval (app cons pat2 (-> (app nil) <-)) (env ((□? (pat1 pat2)))))\""
  140
  52
  55
  33
  29
  9
  38
  1
  29/52
  25
  #t
  233/52
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval (app regex-derivative (-> pat <-) c) (env ((□? (pat)) (□? (re c)))))\""
  154
  63
  57
  34
  35
  9
  44
  1
  13/22
  31
  #f
  283/63
  ((1 1 0) (3/2 2 0) (1 1 0)))
'(shuffled-cache
  1
  regex
  2
  5
  255
  app
  "\"'(eval\n  (λ (pat1 pat2)\n    (-> (app seq (app regex-empty pat1) (app regex-empty pat2)) <-))\n  (env ((□? (pat1 pat2)) (□? (re)))))\""
  164
  72
  57
  35
  39
  9
  48
  1
  32/57
  34
  #f
  161/36
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app cadr re) (app caddr re)) (env ((□? (re f)))))\""
  170
  75
  60
  35
  39
  10
  49
  1
  8/15
  36
  #f
  338/75
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  regex
  2
  5
  255
  app
  "\"'(eval\n  (app alt (-> (app regex-derivative pat1 c) <-) (app regex-derivative pat2 c))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  191
  86
  67
  38
  44
  11
  55
  1
  1/2
  40
  #f
  193/43
  ((3/2 3/2 0) (2 2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval\n  (app and (app pair? re) (-> (app eq? (app car re) 'rep) <-))\n  (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval\n  (app and (app pair? re) (-> (app eq? (app car re) 'alt) <-))\n  (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  5
  255
  app
  "\"'(eval (app cons 'rep (-> (app cons 'bar (app nil)) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval\n  (app regex-derivative pat1 (-> c <-))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  match
  "\"'(eval\n  (match\n   (app regex-empty? pat1)\n   ((#f) (-> (match (app regex-empty? pat2) ...) <-))\n   _)\n  (env ((□? (pat1 pat2)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app match-alt (-> re <-) (λ (pat1 pat2) ...)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval\n  (λ (pat1 pat2)\n    (->\n     (app alt (app regex-derivative pat1 c) (app regex-derivative pat2 c))\n     <-))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-alt? (-> re <-)) (env ((□? (re f)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-seq? (-> re <-)) (env ((□? (re f)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-null? (-> re <-)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  match
  "\"'(eval\n  (λ (pat1 pat2) (-> (match (app regex-null? pat1) ...) <-))\n  (env ((□? (pat1 pat2)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval\n  (app and (app pair? re) (-> (app eq? (app car re) 'seq) <-))\n  (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app pair? (-> re <-)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval (app regex-empty (-> pat2 <-)) (env ((□? (pat1 pat2)) (□? (re)))))\""
  59
  21
  22
  16
  17
  3
  20
  1
  15/19
  9
  #f
  31/7
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  regex
  2
  5
  255
  app
  "\"'(eval\n  (app\n   regex-match\n   (app\n    cons\n    'seq\n    (app\n     cons\n     'foo\n     (app cons (app cons 'rep (app cons 'bar (app nil))) (app nil))))\n   (-> (app cons 'foo (app cons 'bar (app nil))) <-))\n  (env ()))\""
  61
  23
  22
  16
  19
  3
  22
  1
  17/21
  11
  #t
  103/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app cons (-> pat2 <-) (app nil)) (env ((□? (pat1 pat2)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval (match (-> (app regex-empty? pat1) <-) (#f) _) (env ((□? (pat1 pat2)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app cadr re)) (env ((□? (re f)))))\""
  6
  2
  2
  2
  0
  1
  1
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  5
  255
  app
  "\"'(eval\n  (app seq (app regex-derivative pat c) (-> (app rep pat) <-))\n  (env ((□? (pat)) (□? (re c)))))\""
  35
  13
  12
  10
  6
  3
  9
  1
  6/13
  7
  #f
  59/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  regex
  2
  5
  255
  app
  "\"'(eval\n  (match (app regex-empty? re) (#f) (_ (-> (app #t) <-)))\n  (env ((□? (re)))))\""
  37
  15
  12
  10
  6
  3
  9
  1
  2/5
  9
  #t
  23/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  255
  match
  "\"'(eval (λ (car-v) (-> (match car-v ...) <-)) (env ((□? (car-v)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval\n  (app and (-> (app pair? re) <-) (app eq? (app car re) 'rep))\n  (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval (app cdr (-> data <-)) (env ((□? (pattern data)))))\""
  42
  25
  11
  6
  24
  3
  27
  1
  59/60
  23
  #f
  128/25
  ((4 4 0) (7/2 7/2 0) (4 4 0)))
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval (match (-> (app regex-null? pat2) <-) (#f) _) (env ((□? (pat1 pat2)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app cadr re) (app caddr re)) (env ((□? (re f)))))\""
  9
  3
  3
  3
  0
  1
  1
  1
  0
  2
  #f
  16/3
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  regex
  2
  5
  255
  app
  "\"'(eval\n  (match pair?-v (cons pair?-c pair?-d) (_ (-> (app #f) <-)))\n  (env ((□? (pair?-v)))))\""
  12
  5
  3
  4
  0
  1
  1
  1
  0
  4
  #t
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-empty? (-> pat2 <-)) (env ((□? (pat1 pat2)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  match
  "\"'(eval\n  (λ (pat1 pat2) (-> (match (app regex-null? pat1) ...) <-))\n  (env ((□? (pat1 pat2)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  5
  255
  match
  "\"'(eval\n  (match\n   (app match-seq re (λ (pat1 pat2) ...))\n   ((#f) (-> (match (app match-alt re (λ (pat1 pat2) ...)) ...) <-))\n   c-x)\n  (env ((□? (re)))))\""
  32
  17
  6
  9
  10
  2
  12
  1
  10/17
  8
  #f
  76/17
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval\n  (match (app regex-null? pat1) (#f) (_ (-> pat2 <-)))\n  (env ((□? (pat1 pat2)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  5
  255
  app
  "\"'(eval\n  (match pair?-v ((cons pair?-c pair?-d) (-> (app #t) <-)) _)\n  (env ((□? (pair?-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  255
  match
  "\"'(eval (λ (pair?-v) (-> (match pair?-v ...) <-)) (env ((□? (pair?-v)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval (app cons (-> pat <-) (app nil)) (env ((□? (pat)))))\""
  64
  20
  25
  19
  13
  4
  17
  1
  13/18
  8
  #f
  22/5
  ((3 3 0) (7/2 7/2 0) (3 3 0)))
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval (app eq? (-> (app car re) <-) 'seq) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-empty? (-> re <-)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval (λ (p) (-> (app car (app cdr (app cdr p))) <-)) (env ((□? (p)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-null? (-> pat2 <-)) (env ((□? (pat1 pat2)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app match-alt (-> re <-) (λ (pat1 pat2) ...)) (env ((□? (re c)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval (λ (cadr-v) (-> (app car (app cdr cadr-v)) <-)) (env ((□? (cadr-v)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  5
  255
  app
  "\"'(eval\n  (λ (pat1 pat2)\n    (->\n     (app\n      alt\n      (app seq (app regex-derivative pat1 c) pat2)\n      (app seq (app regex-empty pat1) (app regex-derivative pat2 c)))\n     <-))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  34
  11
  12
  11
  6
  2
  8
  1
  6/11
  5
  #f
  49/11
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 2 0)))
'(shuffled-cache
  1
  regex
  2
  5
  255
  app
  "\"'(eval (app f (app cadr re) (-> (app caddr re) <-)) (env ((□? (re f)))))\""
  86
  29
  32
  25
  20
  5
  25
  1
  2/3
  12
  #f
  128/29
  ((2 5/2 0) (2 2 0) (5/2 3 0)))
'(shuffled-cache
  1
  regex
  2
  5
  255
  app
  "\"'(eval (match (-> (app regex-rep? re) <-) (#f) _) (env ((□? (re)))))\""
  108
  40
  39
  29
  25
  7
  32
  1
  23/38
  17
  #f
  177/40
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval (match (-> (app null? data) <-) (#f) _) (env ((□? (pattern data)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  5
  255
  app
  "\"'(eval\n  (app and (app regex-rep? re) (-> (app f (app cadr re)) <-))\n  (env ((□? (re f)))))\""
  46
  17
  15
  14
  9
  3
  12
  1
  9/14
  9
  #f
  77/17
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval (app regex-empty (-> pat2 <-)) (env ((□? (pat1 pat2)) (□? (re)))))\""
  104
  38
  37
  29
  26
  6
  32
  1
  8/11
  18
  #f
  85/19
  ((5/2 5/2 0) (5/2 3 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  regex
  2
  5
  255
  app
  "\"'(eval\n  (app\n   check-expect\n   (->\n    (app\n     regex-match\n     (app\n      cons\n      'seq\n      (app\n       cons\n       'foo\n       (app cons (app cons 'rep (app cons 'bar (app nil))) (app nil))))\n     (app cons 'foo (app cons 'bar (app nil))))\n    <-)\n   (app #f))\n  (env ()))\""
  121
  48
  42
  31
  36
  9
  45
  1
  34/43
  22
  #f
  107/24
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app match-seq (-> re <-) (λ (pat1 pat2) ...)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app char? (-> re <-)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval\n  (app seq (app regex-derivative pat1 c) (-> pat2 <-))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  59
  21
  22
  16
  17
  3
  20
  1
  15/19
  9
  #f
  31/7
  ((5/2 5/2 0) (3 3 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  regex
  2
  5
  255
  app
  "\"'(eval\n  (app cons 'alt (-> (app cons pat1 (app cons pat2 (app nil))) <-))\n  (env ((□? (pat1 pat2)))))\""
  62
  23
  22
  17
  17
  3
  20
  1
  5/7
  11
  #t
  103/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app car (-> re <-)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval (app car (-> (app cdr p) <-)) (env ((□? (p)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval\n  (match (app regex-null? pat2) (#f) (_ (-> regex-NULL <-)))\n  (env ((□? (pat1 pat2)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval\n  (app\n   regex-match\n   (app regex-derivative pattern (app car data))\n   (-> (app cdr data) <-))\n  (env ((□? (pattern data)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval\n  (match (app regex-empty? re) (#f) (_ (-> regex-NULL <-)))\n  (env ((□? (re c)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  5
  255
  app
  "\"'(eval\n  (app cons pat1 (-> (app cons pat2 (app nil)) <-))\n  (env ((□? (pat1 pat2)))))\""
  7
  5
  0
  2
  2
  0
  2
  1
  2/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval (app regex-empty? (-> pat <-)) (env ((□? (pat)))))\""
  70
  25
  25
  20
  15
  4
  19
  1
  15/23
  13
  #f
  113/25
  ((3 7/2 0) (3 3 0) (7/2 7/2 0)))
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval\n  (app regex-derivative pattern (-> (app car data) <-))\n  (env ((□? (pattern data)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  match
  "\"'(eval (λ (cdr-v) (-> (match cdr-v ...) <-)) (env ((□? (cdr-v)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  5
  255
  app
  "\"'(eval\n  (app seq (-> (app regex-derivative pat1 c) <-) pat2)\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  37
  12
  14
  11
  6
  2
  8
  1
  1/2
  5
  #f
  53/12
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval (match (-> (app regex-null? pat2) <-) (#f) _) (env ((□? (pat1 pat2)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app match-rep (-> re <-) (λ (pat) ...)) (env ((□? (re c)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  match
  "\"'(eval\n  (match\n   (app regex-null? pat)\n   ((#f) (-> (match (app regex-empty? pat) ...) <-))\n   _)\n  (env ((□? (pat)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  5
  255
  app
  "\"'(eval\n  (app alt (-> (app regex-empty pat1) <-) (app regex-empty pat2))\n  (env ((□? (pat1 pat2)) (□? (re)))))\""
  36
  11
  14
  11
  6
  2
  8
  1
  6/11
  5
  #f
  49/11
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval (app equal? check (-> expect <-)) (env ((□? (check expect)))))\""
  42
  14
  16
  12
  8
  4
  12
  1
  4/7
  8
  #t
  32/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  5
  255
  app
  "\"'(eval\n  (match\n   (app null? data)\n   (#f)\n   (_ (-> (app regex-empty? (app regex-empty pattern)) <-)))\n  (env ((□? (pattern data)))))\""
  58
  28
  16
  14
  12
  4
  16
  1
  7/18
  13
  #f
  125/28
  ((1/2 1/2 0) (1/2 1 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval (app regex-null? (-> pat <-)) (env ((□? (pat)))))\""
  119
  48
  41
  30
  25
  8
  33
  1
  5/9
  21
  #f
  71/16
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  1
  regex
  2
  5
  255
  app
  "\"'(eval\n  (let (... () (_ (-> (app debug-trace) <-)) () ...) ...)\n  (env ((□? (re c)))))\""
  125
  52
  41
  32
  26
  8
  34
  1
  21/40
  25
  #t
  233/52
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app cdr (-> p <-)) (env ((□? (p)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  match
  "\"'(eval (λ (re) (-> (match (app regex-empty? re) ...) <-)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval\n  (app regex-derivative (-> pat2 <-) c)\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  59
  21
  22
  16
  17
  3
  20
  1
  15/19
  9
  #f
  31/7
  ((3 3 0) (5/2 5/2 0) (5/2 3 0)))
'(shuffled-cache
  1
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval (app regex-empty (-> pat1 <-)) (env ((□? (pat1 pat2)) (□? (re)))))\""
  85
  36
  28
  21
  28
  4
  32
  1
  11/15
  15
  #f
  53/12
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval\n  (app and (-> (app pair? re) <-) (app eq? (app car re) 'alt))\n  (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (match cdr-v ((cons cdr-c cdr-d) (-> cdr-d <-))) (env ((□? (cdr-v)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval (app equal? (-> check <-) expect) (env ((□? (check expect)))))\""
  22
  11
  7
  4
  10
  5
  15
  1
  10/11
  4
  #f
  48/11
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval (match (-> (app regex-null? re) <-) (#f) _) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (match car-v ((cons car-c car-d) (-> car-c <-))) (env ((□? (car-v)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  5
  255
  app
  "\"'(eval\n  (app and (app regex-alt? re) (-> (app f (app cadr re) (app caddr re)) <-))\n  (env ((□? (re f)))))\""
  62
  30
  15
  17
  16
  3
  19
  1
  9/17
  14
  #f
  68/15
  ((4 4 0) (4 4 0) (7/2 7/2 0)))
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval (app cdr (-> (app cdr p) <-)) (env ((□? (p)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval (app car (-> (app cdr cadr-v) <-)) (env ((□? (cadr-v)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  5
  255
  app
  "\"'(eval (app cons pat2 (-> (app nil) <-)) (env ((□? (pat1 pat2)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  5
  255
  app
  "\"'(eval\n  (app cons (-> (app cons 'rep (app cons 'bar (app nil))) <-) (app nil))\n  (env ()))\""
  5
  4
  0
  1
  2
  0
  2
  1
  1/2
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app pair? (-> re <-)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  5
  255
  app
  "\"'(eval\n  (app cons pat1 (-> (app cons pat2 (app nil)) <-))\n  (env ((□? (pat1 pat2)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval (app car (-> (app cdr (app cdr cadr-v)) <-)) (env ((□? (cadr-v)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-atom? (-> re <-)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval (match (-> null?-v <-) (nil) _) (env ((□? (null?-v)))))\""
  52
  31
  13
  8
  29
  4
  33
  1
  95/102
  26
  #f
  158/31
  ((9/2 5 0) (9/2 5 0) (9/2 9/2 0)))
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval\n  (match (app regex-empty? pat1) (#f) (_ (-> pat2 <-)))\n  (env ((□? (pat1 pat2)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval\n  (match (app match-rep re (λ (pat) ...)) ((#f) (-> regex-NULL <-)) c-x)\n  (env ((□? (re c)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval\n  (match (app regex-atom? re) (#f) (_ (-> regex-NULL <-)))\n  (env ((□? (re c)))))\""
  5
  4
  0
  1
  2
  0
  2
  1
  1/2
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-atom? (-> re <-)) (env ((□? (re c)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  match
  "\"'(eval\n  (match (app eq? c re) ((#f) (-> (match (app regex-atom? re) ...) <-)) _)\n  (env ((□? (re c)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  5
  255
  app
  "\"'(eval\n  (match\n   (app regex-null? pat2)\n   ((#f) (-> (app cons 'alt (app cons pat1 (app cons pat2 (app nil)))) <-))\n   _)\n  (env ((□? (pat1 pat2)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval (match (-> (app regex-atom? re) <-) (#f) _) (env ((□? (re c)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  5
  255
  app
  "\"'(eval\n  (app seq (app regex-empty pat1) (-> (app regex-derivative pat2 c) <-))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  37
  12
  14
  11
  6
  2
  8
  1
  1/2
  5
  #f
  53/12
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval (app null? (-> data <-)) (env ((□? (pattern data)))))\""
  78
  37
  25
  16
  30
  5
  35
  1
  3/4
  28
  #f
  181/37
  ((4 4 0) (9/2 9/2 0) (4 4 0)))
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval (match (-> (app eq? c re) <-) (#f) _) (env ((□? (re c)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval\n  (λ (cadr-v) (-> (app car (app cdr (app cdr cadr-v))) <-))\n  (env ((□? (cadr-v)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  match
  "\"'(eval\n  (match\n   (app regex-null? pat1)\n   ((#f) (-> (match (app regex-null? pat2) ...) <-))\n   _)\n  (env ((□? (pat1 pat2)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  5
  255
  app
  "\"'(eval\n  (app\n   alt\n   (-> (app seq (app regex-derivative pat1 c) pat2) <-)\n   (app seq (app regex-empty pat1) (app regex-derivative pat2 c)))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  35
  11
  13
  11
  6
  2
  8
  1
  6/11
  5
  #f
  49/11
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval\n  (match (app match-rep re (λ (pat) ...)) (#f) (c-x (-> c-x <-)))\n  (env ((□? (re c)))))\""
  67
  28
  20
  19
  16
  4
  20
  1
  4/7
  13
  #f
  125/28
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app car (-> re <-)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  5
  255
  app
  "\"'(eval\n  (match\n   (app regex-empty? pat2)\n   ((#f) (-> (app cons 'seq (app cons pat1 (app cons pat2 (app nil)))) <-))\n   _)\n  (env ((□? (pat1 pat2)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval (match (-> (app regex-empty? re) <-) (#f) _) (env ((□? (re c)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  5
  255
  app
  "\"'(eval\n  (app\n   regex-match\n   (-> (app regex-derivative pattern (app car data)) <-)\n   (app cdr data))\n  (env ((□? (pattern data)))))\""
  37
  12
  14
  11
  6
  2
  8
  1
  1/2
  5
  #f
  53/12
  ((2 5/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  regex
  2
  5
  255
  app
  "\"'(eval (match (app regex-rep? re) ((#f) (-> (app #f) <-)) _) (env ((□? (re)))))\""
  39
  14
  14
  11
  6
  2
  8
  1
  3/7
  7
  #t
  9/2
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval\n  (app and (-> (app pair? re) <-) (app eq? (app car re) 'seq))\n  (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval\n  (match (app match-alt re (λ (pat1 pat2) ...)) (#f) (c-x (-> c-x <-)))\n  (env ((□? (re c)))))\""
  32
  17
  6
  9
  10
  2
  12
  1
  10/17
  8
  #f
  76/17
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  regex
  2
  5
  255
  app
  "\"'(eval (app eq? re (-> (app #f) <-)) (env ((□? (re)))))\""
  35
  19
  6
  10
  10
  2
  12
  1
  10/19
  10
  #t
  86/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval (app car (-> data <-)) (env ((□? (pattern data)))))\""
  77
  44
  17
  16
  34
  5
  39
  1
  5/7
  33
  #f
  107/22
  ((7/2 4 0) (4 9/2 0) (4 4 0)))
'(shuffled-cache
  1
  regex
  2
  5
  255
  app
  "\"'(eval\n  (app\n   cons\n   'foo\n   (-> (app cons (app cons 'rep (app cons 'bar (app nil))) (app nil)) <-))\n  (env ()))\""
  79
  46
  17
  16
  36
  5
  41
  1
  27/37
  35
  #t
  112/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-derivative pat (-> c <-)) (env ((□? (pat)) (□? (re c)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval\n  (app regex-derivative pat2 (-> c <-))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  5
  255
  app
  "\"'(eval\n  (match (-> (app match-seq re (λ (pat1 pat2) ...)) <-) (#f) c-x)\n  (env ((□? (re c)))))\""
  31
  16
  6
  9
  10
  2
  12
  1
  5/8
  8
  #f
  9/2
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  regex
  2
  5
  255
  app
  "\"'(eval (app eq? re (-> (app #t) <-)) (env ((□? (re)))))\""
  34
  18
  6
  10
  10
  2
  12
  1
  5/9
  10
  #t
  41/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval (app eq? (-> (app car re) <-) 'alt) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  5
  255
  app
  "\"'(eval\n  (app alt (app regex-derivative pat1 c) (-> (app regex-derivative pat2 c) <-))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  37
  12
  14
  11
  6
  2
  8
  1
  1/2
  5
  #f
  53/12
  ((2 5/2 0) (2 5/2 0) (2 2 0)))
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (match (-> cdr-v <-) (cons cdr-c cdr-d)) (env ((□? (cdr-v)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval (match (-> (app regex-empty? re) <-) (#f) _) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  5
  255
  app
  "\"'(eval\n  (app and (-> (app regex-rep? re) <-) (app f (app cadr re)))\n  (env ((□? (re f)))))\""
  26
  11
  7
  8
  5
  2
  7
  1
  5/11
  5
  #f
  49/11
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  regex
  2
  5
  255
  app
  "\"'(eval (app f (-> (app cadr re) <-) (app caddr re)) (env ((□? (re f)))))\""
  72
  25
  28
  19
  15
  5
  20
  1
  3/5
  11
  #f
  111/25
  ((5/2 3 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval (match (-> (app regex-atom? re) <-) (#f) _) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval\n  (app seq (app regex-empty pat1) (-> (app regex-empty pat2) <-))\n  (env ((□? (pat1 pat2)) (□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app symbol? (-> re <-)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app cadr (-> re <-)) (env ((□? (re f)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval\n  (λ (re) (-> (app and (app pair? re) (app eq? (app car re) 'seq)) <-))\n  (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app eq? (-> re <-) (app #f)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  5
  255
  app
  "\"'(eval (match null?-v (nil) (_ (-> (app #f) <-))) (env ((□? (null?-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  5
  255
  app
  "\"'(eval (app f (-> (app cadr re) <-) (app caddr re)) (env ((□? (re f)))))\""
  53
  16
  21
  16
  10
  3
  13
  1
  5/8
  8
  #f
  9/2
  ((2 2 0) (2 5/2 0) (2 2 0)))
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval\n  (match (app regex-empty? pat2) (#f) (_ (-> pat1 <-)))\n  (env ((□? (pat1 pat2)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  5
  255
  app
  "\"'(eval\n  (match\n   (app regex-empty? pat)\n   ((#f) (-> (app cons 'rep (app cons pat (app nil))) <-))\n   _)\n  (env ((□? (pat)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  5
  255
  app
  "\"'(eval\n  (app and (-> (app regex-alt? re) <-) (app f (app cadr re) (app caddr re)))\n  (env ((□? (re f)))))\""
  27
  13
  6
  8
  5
  2
  7
  1
  5/13
  7
  #f
  59/13
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  regex
  2
  5
  255
  app
  "\"'(eval\n  (app seq (-> (app regex-empty pat1) <-) (app regex-empty pat2))\n  (env ((□? (pat1 pat2)) (□? (re)))))\""
  62
  24
  20
  18
  11
  4
  15
  1
  11/24
  12
  #f
  9/2
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app cons (-> pat2 <-) (app nil)) (env ((□? (pat1 pat2)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval\n  (λ (re) (-> (app and (app pair? re) (app eq? (app car re) 'rep)) <-))\n  (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app pair? (-> re <-)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-null? (-> pat2 <-)) (env ((□? (pat1 pat2)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  5
  255
  app
  "\"'(eval\n  (app\n   check-expect\n   (app\n    regex-match\n    (app\n     cons\n     'seq\n     (app\n      cons\n      'foo\n      (app cons (app cons 'rep (app cons 'bar (app nil))) (app nil))))\n    (app cons 'foo (app cons 'bar (app nil))))\n   (-> (app #f) <-))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  255
  match
  "\"'(eval\n  (match (app regex-null? re) ((#f) (-> (match (app eq? c re) ...) <-)) _)\n  (env ((□? (re c)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval (match (-> (app regex-empty? pat) <-) (#f) _) (env ((□? (pat)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  5
  255
  app
  "\"'(eval\n  (match\n   (app null? data)\n   ((#f)\n    (->\n     (app\n      regex-match\n      (app regex-derivative pattern (app car data))\n      (app cdr data))\n     <-))\n   _)\n  (env ((□? (pattern data)))))\""
  19
  10
  5
  4
  5
  3
  8
  1
  1/2
  4
  #f
  22/5
  ((1/2 1/2 0) (3/2 2 0) (1 1 0)))
'(shuffled-cache
  1
  regex
  2
  5
  255
  match
  "\"'(eval\n  (match\n   (app regex-atom? re)\n   ((#f) (-> (match (app match-seq re (λ (pat1 pat2) ...)) ...) <-))\n   _)\n  (env ((□? (re c)))))\""
  51
  27
  11
  13
  15
  5
  20
  1
  5/9
  12
  #f
  40/9
  ((3/2 3/2 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval\n  (match (app regex-null? pat2) (#f) (_ (-> pat1 <-)))\n  (env ((□? (pat1 pat2)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval (match (app eq? c re) (#f) (_ (-> regex-BLANK <-))) (env ((□? (re c)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  5
  255
  app
  "\"'(eval\n  (match (-> (app match-seq re (λ (pat1 pat2) ...)) <-) (#f) c-x)\n  (env ((□? (re)))))\""
  35
  19
  6
  10
  12
  2
  14
  1
  12/19
  11
  #f
  87/19
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  regex
  2
  5
  255
  app
  "\"'(eval (app cons 'foo (-> (app cons 'bar (app nil)) <-)) (env ()))\""
  37
  21
  6
  10
  14
  2
  16
  1
  2/3
  13
  #t
  97/21
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  255
  match
  "\"'(eval (let (_) (-> (match (app regex-empty? re) ...) <-)) (env ((□? (re c)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  match
  "\"'(eval\n  (match\n   (app regex-null? pat2)\n   ((#f) (-> (match (app regex-empty? pat1) ...) <-))\n   _)\n  (env ((□? (pat1 pat2)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app cadr (-> re <-)) (env ((□? (re f)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  5
  255
  app
  "\"'(eval\n  (app seq (-> (app regex-derivative pat c) <-) (app rep pat))\n  (env ((□? (pat)) (□? (re c)))))\""
  37
  12
  14
  11
  6
  2
  8
  1
  1/2
  5
  #f
  53/12
  ((2 5/2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-null? (-> re <-)) (env ((□? (re c)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  5
  255
  app
  "\"'(eval\n  (app\n   regex-match\n   (->\n    (app\n     cons\n     'seq\n     (app\n      cons\n      'foo\n      (app cons (app cons 'rep (app cons 'bar (app nil))) (app nil))))\n    <-)\n   (app cons 'foo (app cons 'bar (app nil))))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  5
  255
  app
  "\"'(eval\n  (λ (re f)\n    (-> (app and (app regex-alt? re) (app f (app cadr re) (app caddr re))) <-))\n  (env ((□? (re f)))))\""
  28
  15
  6
  7
  7
  2
  9
  1
  7/15
  8
  #f
  68/15
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval\n  (app regex-derivative pat1 (-> c <-))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app eq? c (-> re <-)) (env ((□? (re c)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval (match (-> (app regex-null? pat1) <-) (#f) _) (env ((□? (pat1 pat2)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  5
  255
  app
  "\"'(eval\n  (app and (-> (app regex-seq? re) <-) (app f (app cadr re) (app caddr re)))\n  (env ((□? (re f)))))\""
  24
  11
  6
  7
  5
  2
  7
  1
  5/11
  5
  #f
  49/11
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  regex
  2
  5
  255
  app
  "\"'(eval\n  (match (-> (app match-rep re (λ (pat) ...)) <-) (#f) c-x)\n  (env ((□? (re c)))))\""
  48
  26
  9
  13
  14
  3
  17
  1
  1/2
  12
  #f
  58/13
  ((1 1 0) (1 1 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval\n  (app regex-derivative (-> pattern <-) (app car data))\n  (env ((□? (pattern data)))))\""
  96
  49
  26
  21
  36
  7
  43
  1
  2/3
  23
  #t
  219/49
  ((7/2 7/2 0) (7/2 4 0) (4 4 0)))
'(shuffled-cache
  1
  regex
  2
  5
  255
  app
  "\"'(eval\n  (app\n   alt\n   (app seq (app regex-derivative pat1 c) pat2)\n   (-> (app seq (app regex-empty pat1) (app regex-derivative pat2 c)) <-))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  125
  60
  39
  26
  42
  9
  51
  1
  16/25
  28
  #f
  67/15
  ((2 2 0) (5/2 5/2 0) (2 2 0)))
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval\n  (app regex-derivative pat2 (-> c <-))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (match (-> pair?-v <-) (cons pair?-c pair?-d) _) (env ((□? (pair?-v)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval\n  (λ (re) (-> (app and (app pair? re) (app eq? (app car re) 'alt)) <-))\n  (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  5
  255
  match
  "\"'(eval\n  (match\n   (app match-alt re (λ (pat1 pat2) ...))\n   ((#f) (-> (match (app match-rep re (λ (pat) ...)) ...) <-))\n   c-x)\n  (env ((□? (re c)))))\""
  34
  17
  7
  10
  10
  2
  12
  1
  10/17
  8
  #f
  76/17
  ((1 1 0) (3/2 3/2 0) (1 1 0)))
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval (λ (re) (-> (app eq? re (app #t)) <-)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  5
  255
  app
  "\"'(eval\n  (match (app regex-atom? re) (#f) (_ (-> (app #f) <-)))\n  (env ((□? (re)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval\n  (match (app regex-empty? pat) (#f) (_ (-> regex-BLANK <-)))\n  (env ((□? (pat)))))\""
  7
  5
  0
  2
  2
  0
  2
  1
  2/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app cdr (-> p <-)) (env ((□? (p)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  5
  255
  app
  "\"'(eval\n  (λ (re f) (-> (app and (app regex-rep? re) (app f (app cadr re))) <-))\n  (env ((□? (re f)))))\""
  28
  13
  7
  8
  5
  2
  7
  1
  5/13
  6
  #f
  58/13
  ((1 1 0) (1 3/2 0) (1 1 0)))
'(shuffled-cache
  1
  regex
  2
  5
  255
  app
  "\"'(eval\n  (app seq (-> (app regex-empty pat1) <-) (app regex-derivative pat2 c))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  63
  24
  21
  18
  11
  4
  15
  1
  11/24
  11
  #f
  107/24
  ((2 2 0) (2 5/2 0) (2 2 0)))
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-empty? (-> pat1 <-)) (env ((□? (pat1 pat2)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  match
  "\"'(eval (λ (pat) (-> (match (app regex-null? pat) ...) <-)) (env ((□? (pat)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  5
  255
  ref-or-constructor
  "\"'(eval\n  (match (app regex-null? pat1) (#f) (_ (-> regex-NULL <-)))\n  (env ((□? (pat1 pat2)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  5
  255
  app
  "\"'(eval (app cons pat (-> (app nil) <-)) (env ((□? (pat)))))\""
  7
  5
  0
  2
  2
  0
  2
  1
  2/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  5
  255
  app
  "\"'(eval (app f (app cadr re) (-> (app caddr re) <-)) (env ((□? (re f)))))\""
  59
  23
  20
  16
  16
  3
  19
  1
  2/3
  12
  #f
  104/23
  ((5/2 5/2 0) (2 2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-null? (-> pat1 <-)) (env ((□? (pat1 pat2)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval\n  (λ (re) (-> (app or (app char? re) (app symbol? re)) <-))\n  (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app cdr (-> cadr-v <-)) (env ((□? (cadr-v)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  5
  255
  match
  "\"'(eval\n  (match\n   (app regex-atom? re)\n   ((#f) (-> (match (app match-seq re (λ (pat1 pat2) ...)) ...) <-))\n   _)\n  (env ((□? (re)))))\""
  32
  17
  6
  9
  10
  2
  12
  1
  10/17
  8
  #f
  76/17
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  regex
  2
  5
  255
  app
  "\"'(eval\n  (app cons (app cons 'rep (app cons 'bar (app nil))) (-> (app nil) <-))\n  (env ()))\""
  34
  19
  6
  9
  12
  2
  14
  1
  12/19
  10
  #t
  86/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  255
  match
  "\"'(eval\n  (λ (pattern data) (-> (match (app null? data) ...) <-))\n  (env ((□? (pattern data)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval\n  (app cons (-> pat1 <-) (app cons pat2 (app nil)))\n  (env ((□? (pat1 pat2)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  5
  255
  app
  "\"'(eval (match null?-v ((nil) (-> (app #t) <-)) _) (env ((□? (null?-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  255
  match
  "\"'(eval\n  (match\n   (app regex-empty? re)\n   ((#f) (-> (match (app regex-null? re) ...) <-))\n   _)\n  (env ((□? (re c)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval (app eq? (-> (app car re) <-) 'rep) (env ((□? (re)))))\""
  #f)
