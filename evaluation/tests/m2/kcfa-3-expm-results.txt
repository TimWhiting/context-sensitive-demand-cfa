'(expression:
  (app
   (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
   (λ (x1)
     (app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))))
(list
 'query:
 '(app z (-> x1 <-) x2 x3)
 (expenv
  '((((bod
       (x3)
       (ran
        (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
        ()
        ()
        (bod
         (x2)
         (ran
          (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
          ()
          ()
          (bod
           (x1)
           (ran
            (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
            ()
            ()
            (top)))))))
      app
      (λ (z) (app z x1 x2 x3))
      (λ (y1 y2 y3) y1))
     ((bin
       let
       _
       (app f3 (app #f))
       ()
       ()
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #t)))
    (((bin
       let
       _
       (app f3 (app #f))
       ()
       ()
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #t))
     ((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        ()
        ()
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top)))))
      app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))
    (((bin
       let
       _
       (app f2 (app #f))
       ()
       ()
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #t))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((bin
       let
       _
       (app f1 (app #f))
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #t))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list 'clos/con: (list (list '(#t ()) (expenv '(((top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app z (-> x1 <-) x2 x3)
 (expenv
  '((((bod
       (x3)
       (ran
        (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
        ()
        ()
        (bod
         (x2)
         (ran
          (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
          ()
          ()
          (bod
           (x1)
           (ran
            (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
            ()
            ()
            (top)))))))
      app
      (λ (z) (app z x1 x2 x3))
      (λ (y1 y2 y3) y1))
     ((let-bod
       let
       ((_ (app f3 (app #t))))
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #f)))
    (((let-bod
       let
       ((_ (app f3 (app #t))))
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #f))
     ((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        ()
        ()
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top)))))
      app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))
    (((bin
       let
       _
       (app f2 (app #f))
       ()
       ()
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #t))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((bin
       let
       _
       (app f1 (app #f))
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #t))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list 'clos/con: (list (list '(#t ()) (expenv '(((top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app z (-> x1 <-) x2 x3)
 (expenv
  '((((bod
       (x3)
       (ran
        (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
        ()
        ()
        (bod
         (x2)
         (ran
          (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
          ()
          ()
          (bod
           (x1)
           (ran
            (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
            ()
            ()
            (top)))))))
      app
      (λ (z) (app z x1 x2 x3))
      (λ (y1 y2 y3) y1))
     ((bin
       let
       _
       (app f3 (app #f))
       ()
       ()
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #t)))
    (((bin
       let
       _
       (app f3 (app #f))
       ()
       ()
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #t))
     ((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        ()
        ()
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top)))))
      app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))
    (((let-bod
       let
       ((_ (app f2 (app #t))))
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #f))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((bin
       let
       _
       (app f1 (app #f))
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #t))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list 'clos/con: (list (list '(#t ()) (expenv '(((top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app z (-> x1 <-) x2 x3)
 (expenv
  '((((bod
       (x3)
       (ran
        (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
        ()
        ()
        (bod
         (x2)
         (ran
          (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
          ()
          ()
          (bod
           (x1)
           (ran
            (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
            ()
            ()
            (top)))))))
      app
      (λ (z) (app z x1 x2 x3))
      (λ (y1 y2 y3) y1))
     ((let-bod
       let
       ((_ (app f3 (app #t))))
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #f)))
    (((let-bod
       let
       ((_ (app f3 (app #t))))
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #f))
     ((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        ()
        ()
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top)))))
      app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))
    (((let-bod
       let
       ((_ (app f2 (app #t))))
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #f))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((bin
       let
       _
       (app f1 (app #f))
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #t))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list 'clos/con: (list (list '(#t ()) (expenv '(((top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app z (-> x1 <-) x2 x3)
 (expenv
  '((((bod
       (x3)
       (ran
        (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
        ()
        ()
        (bod
         (x2)
         (ran
          (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
          ()
          ()
          (bod
           (x1)
           (ran
            (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
            ()
            ()
            (top)))))))
      app
      (λ (z) (app z x1 x2 x3))
      (λ (y1 y2 y3) y1))
     ((bin
       let
       _
       (app f3 (app #f))
       ()
       ()
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #t)))
    (((bin
       let
       _
       (app f3 (app #f))
       ()
       ()
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #t))
     ((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        ()
        ()
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top)))))
      app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))
    (((bin
       let
       _
       (app f2 (app #f))
       ()
       ()
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #t))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((let-bod
       let
       ((_ (app f1 (app #t))))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #f))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list 'clos/con: (list (list '(#f ()) (expenv '(((top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app z (-> x1 <-) x2 x3)
 (expenv
  '((((bod
       (x3)
       (ran
        (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
        ()
        ()
        (bod
         (x2)
         (ran
          (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
          ()
          ()
          (bod
           (x1)
           (ran
            (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
            ()
            ()
            (top)))))))
      app
      (λ (z) (app z x1 x2 x3))
      (λ (y1 y2 y3) y1))
     ((let-bod
       let
       ((_ (app f3 (app #t))))
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #f)))
    (((let-bod
       let
       ((_ (app f3 (app #t))))
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #f))
     ((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        ()
        ()
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top)))))
      app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))
    (((bin
       let
       _
       (app f2 (app #f))
       ()
       ()
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #t))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((let-bod
       let
       ((_ (app f1 (app #t))))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #f))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list 'clos/con: (list (list '(#f ()) (expenv '(((top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app z (-> x1 <-) x2 x3)
 (expenv
  '((((bod
       (x3)
       (ran
        (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
        ()
        ()
        (bod
         (x2)
         (ran
          (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
          ()
          ()
          (bod
           (x1)
           (ran
            (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
            ()
            ()
            (top)))))))
      app
      (λ (z) (app z x1 x2 x3))
      (λ (y1 y2 y3) y1))
     ((bin
       let
       _
       (app f3 (app #f))
       ()
       ()
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #t)))
    (((bin
       let
       _
       (app f3 (app #f))
       ()
       ()
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #t))
     ((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        ()
        ()
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top)))))
      app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))
    (((let-bod
       let
       ((_ (app f2 (app #t))))
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #f))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((let-bod
       let
       ((_ (app f1 (app #t))))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #f))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list 'clos/con: (list (list '(#f ()) (expenv '(((top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app z (-> x1 <-) x2 x3)
 (expenv
  '((((bod
       (x3)
       (ran
        (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
        ()
        ()
        (bod
         (x2)
         (ran
          (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
          ()
          ()
          (bod
           (x1)
           (ran
            (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
            ()
            ()
            (top)))))))
      app
      (λ (z) (app z x1 x2 x3))
      (λ (y1 y2 y3) y1))
     ((let-bod
       let
       ((_ (app f3 (app #t))))
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #f)))
    (((let-bod
       let
       ((_ (app f3 (app #t))))
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #f))
     ((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        ()
        ()
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top)))))
      app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))
    (((let-bod
       let
       ((_ (app f2 (app #t))))
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #f))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((let-bod
       let
       ((_ (app f1 (app #t))))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #f))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list 'clos/con: (list (list '(#f ()) (expenv '(((top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> f1 <-) (app #t))
 (expenv
  '((((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list
 'clos/con:
 (list
  (list
   '(λ (x1)
      (app
       (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
       (λ (x2)
         (app
          (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
          (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
   (expenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> (λ (z) (app z x1 x2 x3)) <-) (λ (y1 y2 y3) y1))
 (expenv
  '((((bin
       let
       _
       (app f3 (app #f))
       ()
       ()
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #t))
     ((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        ()
        ()
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top)))))
      app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))
    (((bin
       let
       _
       (app f2 (app #f))
       ()
       ()
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #t))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((bin
       let
       _
       (app f1 (app #f))
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #t))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list
 'clos/con:
 (list
  (list
   '(λ (z) (app z x1 x2 x3))
   (expenv
    '(((let ((-> _ = (app f3 (app #t)) <-)) bod)
       (λ (x2)
         (->
          (app
           (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
           (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
          <-)))
      ((let ((-> _ = (app f2 (app #t)) <-)) bod)
       (λ (x1)
         (->
          (app
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           (λ (x2)
             (app
              (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
              (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
          <-)))
      ((let ((-> _ = (app f1 (app #t)) <-)) bod) (top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> (λ (z) (app z x1 x2 x3)) <-) (λ (y1 y2 y3) y1))
 (expenv
  '((((bin
       let
       _
       (app f3 (app #f))
       ()
       ()
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #t))
     ((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        ()
        ()
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top)))))
      app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))
    (((let-bod
       let
       ((_ (app f2 (app #t))))
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #f))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((bin
       let
       _
       (app f1 (app #f))
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #t))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list
 'clos/con:
 (list
  (list
   '(λ (z) (app z x1 x2 x3))
   (expenv
    '(((let ((-> _ = (app f3 (app #t)) <-)) bod)
       (λ (x2)
         (->
          (app
           (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
           (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
          <-)))
      ((let (_) (-> (app f2 (app #f)) <-))
       (λ (x1)
         (->
          (app
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           (λ (x2)
             (app
              (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
              (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
          <-)))
      ((let ((-> _ = (app f1 (app #t)) <-)) bod) (top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> (λ (z) (app z x1 x2 x3)) <-) (λ (y1 y2 y3) y1))
 (expenv
  '((((bin
       let
       _
       (app f3 (app #f))
       ()
       ()
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #t))
     ((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        ()
        ()
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top)))))
      app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))
    (((bin
       let
       _
       (app f2 (app #f))
       ()
       ()
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #t))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((let-bod
       let
       ((_ (app f1 (app #t))))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #f))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list
 'clos/con:
 (list
  (list
   '(λ (z) (app z x1 x2 x3))
   (expenv
    '(((let ((-> _ = (app f3 (app #t)) <-)) bod)
       (λ (x2)
         (->
          (app
           (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
           (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
          <-)))
      ((let ((-> _ = (app f2 (app #t)) <-)) bod)
       (λ (x1)
         (->
          (app
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           (λ (x2)
             (app
              (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
              (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
          <-)))
      ((let (_) (-> (app f1 (app #f)) <-)) (top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> (λ (z) (app z x1 x2 x3)) <-) (λ (y1 y2 y3) y1))
 (expenv
  '((((bin
       let
       _
       (app f3 (app #f))
       ()
       ()
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #t))
     ((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        ()
        ()
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top)))))
      app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))
    (((let-bod
       let
       ((_ (app f2 (app #t))))
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #f))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((let-bod
       let
       ((_ (app f1 (app #t))))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #f))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list
 'clos/con:
 (list
  (list
   '(λ (z) (app z x1 x2 x3))
   (expenv
    '(((let ((-> _ = (app f3 (app #t)) <-)) bod)
       (λ (x2)
         (->
          (app
           (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
           (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
          <-)))
      ((let (_) (-> (app f2 (app #f)) <-))
       (λ (x1)
         (->
          (app
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           (λ (x2)
             (app
              (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
              (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
          <-)))
      ((let (_) (-> (app f1 (app #f)) <-)) (top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> f3 <-) (app #f))
 (expenv
  '((((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        ()
        ()
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top)))))
      app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
     ((bin
       let
       _
       (app f2 (app #f))
       ()
       ()
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #t)))
    (((bin
       let
       _
       (app f2 (app #f))
       ()
       ()
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #t))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((bin
       let
       _
       (app f1 (app #f))
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #t))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list
 'clos/con:
 (list
  (list
   '(λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))
   (expenv
    '(((let ((-> _ = (app f2 (app #t)) <-)) bod)
       (λ (x1)
         (->
          (app
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           (λ (x2)
             (app
              (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
              (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
          <-)))
      ((let ((-> _ = (app f1 (app #t)) <-)) bod) (top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> f3 <-) (app #f))
 (expenv
  '((((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        ()
        ()
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top)))))
      app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
     ((let-bod
       let
       ((_ (app f2 (app #t))))
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #f)))
    (((let-bod
       let
       ((_ (app f2 (app #t))))
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #f))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((bin
       let
       _
       (app f1 (app #f))
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #t))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list
 'clos/con:
 (list
  (list
   '(λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))
   (expenv
    '(((let (_) (-> (app f2 (app #f)) <-))
       (λ (x1)
         (->
          (app
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           (λ (x2)
             (app
              (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
              (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
          <-)))
      ((let ((-> _ = (app f1 (app #t)) <-)) bod) (top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> f3 <-) (app #f))
 (expenv
  '((((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        ()
        ()
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top)))))
      app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
     ((bin
       let
       _
       (app f2 (app #f))
       ()
       ()
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #t)))
    (((bin
       let
       _
       (app f2 (app #f))
       ()
       ()
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #t))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((let-bod
       let
       ((_ (app f1 (app #t))))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #f))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list
 'clos/con:
 (list
  (list
   '(λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))
   (expenv
    '(((let ((-> _ = (app f2 (app #t)) <-)) bod)
       (λ (x1)
         (->
          (app
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           (λ (x2)
             (app
              (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
              (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
          <-)))
      ((let (_) (-> (app f1 (app #f)) <-)) (top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> f3 <-) (app #f))
 (expenv
  '((((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        ()
        ()
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top)))))
      app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
     ((let-bod
       let
       ((_ (app f2 (app #t))))
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #f)))
    (((let-bod
       let
       ((_ (app f2 (app #t))))
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #f))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((let-bod
       let
       ((_ (app f1 (app #t))))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #f))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list
 'clos/con:
 (list
  (list
   '(λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))
   (expenv
    '(((let (_) (-> (app f2 (app #f)) <-))
       (λ (x1)
         (->
          (app
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           (λ (x2)
             (app
              (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
              (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
          <-)))
      ((let (_) (-> (app f1 (app #f)) <-)) (top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   (-> (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f)))) <-)
   (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
 (expenv
  '((((let-bod
       let
       ((_ (app f2 (app #t))))
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #f))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((bin
       let
       _
       (app f1 (app #f))
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #t))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list
 'clos/con:
 (list
  (list
   '(λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
   (expenv
    '(((let (_) (-> (app f2 (app #f)) <-))
       (λ (x1)
         (->
          (app
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           (λ (x2)
             (app
              (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
              (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
          <-)))
      ((let ((-> _ = (app f1 (app #t)) <-)) bod) (top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   (-> (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f)))) <-)
   (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
 (expenv
  '((((let-bod
       let
       ((_ (app f2 (app #t))))
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #f))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((let-bod
       let
       ((_ (app f1 (app #t))))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #f))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list
 'clos/con:
 (list
  (list
   '(λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
   (expenv
    '(((let (_) (-> (app f2 (app #f)) <-))
       (λ (x1)
         (->
          (app
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           (λ (x2)
             (app
              (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
              (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
          <-)))
      ((let (_) (-> (app f1 (app #f)) <-)) (top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> #f <-))
 (expenv
  '((((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list 'clos/con: (list (list #f (expenv '(((top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(let ((-> _ = (app f1 (app #t)) <-)) bod)
 (expenv
  '((((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list 'clos/con: (list (list '(#t ()) (expenv '(((top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
   (->
    (λ (x2)
      (app
       (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
       (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))
    <-))
 (expenv
  '((((bin
       let
       _
       (app f1 (app #f))
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #t))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list
 'clos/con:
 (list
  (list
   '(λ (x2)
      (app
       (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
       (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))
   (expenv '(((let ((-> _ = (app f1 (app #t)) <-)) bod) (top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> z <-) x1 x2 x3)
 (expenv
  '((((bod
       (x3)
       (ran
        (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
        ()
        ()
        (bod
         (x2)
         (ran
          (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
          ()
          ()
          (bod
           (x1)
           (ran
            (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
            ()
            ()
            (top)))))))
      app
      (λ (z) (app z x1 x2 x3))
      (λ (y1 y2 y3) y1))
     ((bin
       let
       _
       (app f3 (app #f))
       ()
       ()
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #t)))
    (((bin
       let
       _
       (app f3 (app #f))
       ()
       ()
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #t))
     ((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        ()
        ()
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top)))))
      app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))
    (((bin
       let
       _
       (app f2 (app #f))
       ()
       ()
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #t))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((bin
       let
       _
       (app f1 (app #f))
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #t))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list
 'clos/con:
 (list
  (list
   '(λ (y1 y2 y3) y1)
   (expenv
    '(((let ((-> _ = (app f3 (app #t)) <-)) bod)
       (λ (x2)
         (->
          (app
           (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
           (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
          <-)))
      ((let ((-> _ = (app f2 (app #t)) <-)) bod)
       (λ (x1)
         (->
          (app
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           (λ (x2)
             (app
              (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
              (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
          <-)))
      ((let ((-> _ = (app f1 (app #t)) <-)) bod) (top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> z <-) x1 x2 x3)
 (expenv
  '((((bod
       (x3)
       (ran
        (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
        ()
        ()
        (bod
         (x2)
         (ran
          (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
          ()
          ()
          (bod
           (x1)
           (ran
            (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
            ()
            ()
            (top)))))))
      app
      (λ (z) (app z x1 x2 x3))
      (λ (y1 y2 y3) y1))
     ((let-bod
       let
       ((_ (app f3 (app #t))))
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #f)))
    (((let-bod
       let
       ((_ (app f3 (app #t))))
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #f))
     ((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        ()
        ()
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top)))))
      app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))
    (((bin
       let
       _
       (app f2 (app #f))
       ()
       ()
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #t))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((bin
       let
       _
       (app f1 (app #f))
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #t))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list
 'clos/con:
 (list
  (list
   '(λ (y1 y2 y3) y1)
   (expenv
    '(((let (_) (-> (app f3 (app #f)) <-))
       (λ (x2)
         (->
          (app
           (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
           (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
          <-)))
      ((let ((-> _ = (app f2 (app #t)) <-)) bod)
       (λ (x1)
         (->
          (app
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           (λ (x2)
             (app
              (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
              (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
          <-)))
      ((let ((-> _ = (app f1 (app #t)) <-)) bod) (top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> z <-) x1 x2 x3)
 (expenv
  '((((bod
       (x3)
       (ran
        (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
        ()
        ()
        (bod
         (x2)
         (ran
          (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
          ()
          ()
          (bod
           (x1)
           (ran
            (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
            ()
            ()
            (top)))))))
      app
      (λ (z) (app z x1 x2 x3))
      (λ (y1 y2 y3) y1))
     ((bin
       let
       _
       (app f3 (app #f))
       ()
       ()
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #t)))
    (((bin
       let
       _
       (app f3 (app #f))
       ()
       ()
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #t))
     ((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        ()
        ()
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top)))))
      app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))
    (((let-bod
       let
       ((_ (app f2 (app #t))))
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #f))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((bin
       let
       _
       (app f1 (app #f))
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #t))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list
 'clos/con:
 (list
  (list
   '(λ (y1 y2 y3) y1)
   (expenv
    '(((let ((-> _ = (app f3 (app #t)) <-)) bod)
       (λ (x2)
         (->
          (app
           (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
           (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
          <-)))
      ((let (_) (-> (app f2 (app #f)) <-))
       (λ (x1)
         (->
          (app
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           (λ (x2)
             (app
              (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
              (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
          <-)))
      ((let ((-> _ = (app f1 (app #t)) <-)) bod) (top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> z <-) x1 x2 x3)
 (expenv
  '((((bod
       (x3)
       (ran
        (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
        ()
        ()
        (bod
         (x2)
         (ran
          (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
          ()
          ()
          (bod
           (x1)
           (ran
            (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
            ()
            ()
            (top)))))))
      app
      (λ (z) (app z x1 x2 x3))
      (λ (y1 y2 y3) y1))
     ((let-bod
       let
       ((_ (app f3 (app #t))))
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #f)))
    (((let-bod
       let
       ((_ (app f3 (app #t))))
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #f))
     ((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        ()
        ()
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top)))))
      app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))
    (((let-bod
       let
       ((_ (app f2 (app #t))))
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #f))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((bin
       let
       _
       (app f1 (app #f))
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #t))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list
 'clos/con:
 (list
  (list
   '(λ (y1 y2 y3) y1)
   (expenv
    '(((let (_) (-> (app f3 (app #f)) <-))
       (λ (x2)
         (->
          (app
           (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
           (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
          <-)))
      ((let (_) (-> (app f2 (app #f)) <-))
       (λ (x1)
         (->
          (app
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           (λ (x2)
             (app
              (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
              (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
          <-)))
      ((let ((-> _ = (app f1 (app #t)) <-)) bod) (top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> z <-) x1 x2 x3)
 (expenv
  '((((bod
       (x3)
       (ran
        (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
        ()
        ()
        (bod
         (x2)
         (ran
          (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
          ()
          ()
          (bod
           (x1)
           (ran
            (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
            ()
            ()
            (top)))))))
      app
      (λ (z) (app z x1 x2 x3))
      (λ (y1 y2 y3) y1))
     ((bin
       let
       _
       (app f3 (app #f))
       ()
       ()
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #t)))
    (((bin
       let
       _
       (app f3 (app #f))
       ()
       ()
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #t))
     ((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        ()
        ()
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top)))))
      app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))
    (((bin
       let
       _
       (app f2 (app #f))
       ()
       ()
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #t))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((let-bod
       let
       ((_ (app f1 (app #t))))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #f))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list
 'clos/con:
 (list
  (list
   '(λ (y1 y2 y3) y1)
   (expenv
    '(((let ((-> _ = (app f3 (app #t)) <-)) bod)
       (λ (x2)
         (->
          (app
           (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
           (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
          <-)))
      ((let ((-> _ = (app f2 (app #t)) <-)) bod)
       (λ (x1)
         (->
          (app
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           (λ (x2)
             (app
              (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
              (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
          <-)))
      ((let (_) (-> (app f1 (app #f)) <-)) (top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> z <-) x1 x2 x3)
 (expenv
  '((((bod
       (x3)
       (ran
        (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
        ()
        ()
        (bod
         (x2)
         (ran
          (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
          ()
          ()
          (bod
           (x1)
           (ran
            (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
            ()
            ()
            (top)))))))
      app
      (λ (z) (app z x1 x2 x3))
      (λ (y1 y2 y3) y1))
     ((let-bod
       let
       ((_ (app f3 (app #t))))
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #f)))
    (((let-bod
       let
       ((_ (app f3 (app #t))))
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #f))
     ((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        ()
        ()
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top)))))
      app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))
    (((bin
       let
       _
       (app f2 (app #f))
       ()
       ()
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #t))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((let-bod
       let
       ((_ (app f1 (app #t))))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #f))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list
 'clos/con:
 (list
  (list
   '(λ (y1 y2 y3) y1)
   (expenv
    '(((let (_) (-> (app f3 (app #f)) <-))
       (λ (x2)
         (->
          (app
           (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
           (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
          <-)))
      ((let ((-> _ = (app f2 (app #t)) <-)) bod)
       (λ (x1)
         (->
          (app
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           (λ (x2)
             (app
              (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
              (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
          <-)))
      ((let (_) (-> (app f1 (app #f)) <-)) (top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> z <-) x1 x2 x3)
 (expenv
  '((((bod
       (x3)
       (ran
        (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
        ()
        ()
        (bod
         (x2)
         (ran
          (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
          ()
          ()
          (bod
           (x1)
           (ran
            (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
            ()
            ()
            (top)))))))
      app
      (λ (z) (app z x1 x2 x3))
      (λ (y1 y2 y3) y1))
     ((bin
       let
       _
       (app f3 (app #f))
       ()
       ()
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #t)))
    (((bin
       let
       _
       (app f3 (app #f))
       ()
       ()
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #t))
     ((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        ()
        ()
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top)))))
      app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))
    (((let-bod
       let
       ((_ (app f2 (app #t))))
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #f))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((let-bod
       let
       ((_ (app f1 (app #t))))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #f))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list
 'clos/con:
 (list
  (list
   '(λ (y1 y2 y3) y1)
   (expenv
    '(((let ((-> _ = (app f3 (app #t)) <-)) bod)
       (λ (x2)
         (->
          (app
           (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
           (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
          <-)))
      ((let (_) (-> (app f2 (app #f)) <-))
       (λ (x1)
         (->
          (app
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           (λ (x2)
             (app
              (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
              (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
          <-)))
      ((let (_) (-> (app f1 (app #f)) <-)) (top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> z <-) x1 x2 x3)
 (expenv
  '((((bod
       (x3)
       (ran
        (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
        ()
        ()
        (bod
         (x2)
         (ran
          (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
          ()
          ()
          (bod
           (x1)
           (ran
            (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
            ()
            ()
            (top)))))))
      app
      (λ (z) (app z x1 x2 x3))
      (λ (y1 y2 y3) y1))
     ((let-bod
       let
       ((_ (app f3 (app #t))))
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #f)))
    (((let-bod
       let
       ((_ (app f3 (app #t))))
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #f))
     ((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        ()
        ()
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top)))))
      app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))
    (((let-bod
       let
       ((_ (app f2 (app #t))))
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #f))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((let-bod
       let
       ((_ (app f1 (app #t))))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #f))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list
 'clos/con:
 (list
  (list
   '(λ (y1 y2 y3) y1)
   (expenv
    '(((let (_) (-> (app f3 (app #f)) <-))
       (λ (x2)
         (->
          (app
           (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
           (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
          <-)))
      ((let (_) (-> (app f2 (app #f)) <-))
       (λ (x1)
         (->
          (app
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           (λ (x2)
             (app
              (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
              (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
          <-)))
      ((let (_) (-> (app f1 (app #f)) <-)) (top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(top) (expenv '()))
(list 'clos/con: (list (list '(#f ()) (expenv '(((top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app f2 (-> (app #f) <-))
 (expenv
  '((((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
     ((bin
       let
       _
       (app f1 (app #f))
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #t)))
    (((bin
       let
       _
       (app f1 (app #f))
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #t))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (expenv
    '(((λ (x1)
         (->
          (app
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           (λ (x2)
             (app
              (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
              (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
          <-))
       (let ((-> _ = (app f1 (app #t)) <-)) bod))
      ((let ((-> _ = (app f1 (app #t)) <-)) bod) (top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app f2 (-> (app #f) <-))
 (expenv
  '((((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
     ((let-bod
       let
       ((_ (app f1 (app #t))))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #f)))
    (((let-bod
       let
       ((_ (app f1 (app #t))))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #f))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (expenv
    '(((λ (x1)
         (->
          (app
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           (λ (x2)
             (app
              (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
              (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
          <-))
       (let (_) (-> (app f1 (app #f)) <-)))
      ((let (_) (-> (app f1 (app #f)) <-)) (top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(let (_) (-> (app f2 (app #f)) <-))
 (expenv
  '((((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
     ((bin
       let
       _
       (app f1 (app #f))
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #t)))
    (((bin
       let
       _
       (app f1 (app #f))
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #t))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list 'clos/con: (list (list '(#t ()) (expenv '(((top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(let (_) (-> (app f2 (app #f)) <-))
 (expenv
  '((((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
     ((let-bod
       let
       ((_ (app f1 (app #t))))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #f)))
    (((let-bod
       let
       ((_ (app f1 (app #t))))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #f))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list 'clos/con: (list (list '(#f ()) (expenv '(((top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app z x1 x2 (-> x3 <-))
 (expenv
  '((((bod
       (x3)
       (ran
        (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
        ()
        ()
        (bod
         (x2)
         (ran
          (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
          ()
          ()
          (bod
           (x1)
           (ran
            (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
            ()
            ()
            (top)))))))
      app
      (λ (z) (app z x1 x2 x3))
      (λ (y1 y2 y3) y1))
     ((bin
       let
       _
       (app f3 (app #f))
       ()
       ()
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #t)))
    (((bin
       let
       _
       (app f3 (app #f))
       ()
       ()
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #t))
     ((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        ()
        ()
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top)))))
      app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))
    (((bin
       let
       _
       (app f2 (app #f))
       ()
       ()
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #t))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((bin
       let
       _
       (app f1 (app #f))
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #t))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (expenv
    '(((λ (x2)
         (->
          (app
           (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
           (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
          <-))
       (let ((-> _ = (app f2 (app #t)) <-)) bod))
      ((let ((-> _ = (app f2 (app #t)) <-)) bod)
       (λ (x1)
         (->
          (app
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           (λ (x2)
             (app
              (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
              (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
          <-)))
      ((let ((-> _ = (app f1 (app #t)) <-)) bod) (top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app z x1 x2 (-> x3 <-))
 (expenv
  '((((bod
       (x3)
       (ran
        (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
        ()
        ()
        (bod
         (x2)
         (ran
          (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
          ()
          ()
          (bod
           (x1)
           (ran
            (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
            ()
            ()
            (top)))))))
      app
      (λ (z) (app z x1 x2 x3))
      (λ (y1 y2 y3) y1))
     ((let-bod
       let
       ((_ (app f3 (app #t))))
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #f)))
    (((let-bod
       let
       ((_ (app f3 (app #t))))
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #f))
     ((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        ()
        ()
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top)))))
      app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))
    (((bin
       let
       _
       (app f2 (app #f))
       ()
       ()
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #t))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((bin
       let
       _
       (app f1 (app #f))
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #t))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (expenv
    '(((λ (x2)
         (->
          (app
           (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
           (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
          <-))
       (let ((-> _ = (app f2 (app #t)) <-)) bod))
      ((let ((-> _ = (app f2 (app #t)) <-)) bod)
       (λ (x1)
         (->
          (app
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           (λ (x2)
             (app
              (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
              (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
          <-)))
      ((let ((-> _ = (app f1 (app #t)) <-)) bod) (top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app z x1 x2 (-> x3 <-))
 (expenv
  '((((bod
       (x3)
       (ran
        (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
        ()
        ()
        (bod
         (x2)
         (ran
          (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
          ()
          ()
          (bod
           (x1)
           (ran
            (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
            ()
            ()
            (top)))))))
      app
      (λ (z) (app z x1 x2 x3))
      (λ (y1 y2 y3) y1))
     ((bin
       let
       _
       (app f3 (app #f))
       ()
       ()
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #t)))
    (((bin
       let
       _
       (app f3 (app #f))
       ()
       ()
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #t))
     ((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        ()
        ()
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top)))))
      app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))
    (((let-bod
       let
       ((_ (app f2 (app #t))))
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #f))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((bin
       let
       _
       (app f1 (app #f))
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #t))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (expenv
    '(((λ (x2)
         (->
          (app
           (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
           (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
          <-))
       (let (_) (-> (app f2 (app #f)) <-)))
      ((let (_) (-> (app f2 (app #f)) <-))
       (λ (x1)
         (->
          (app
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           (λ (x2)
             (app
              (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
              (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
          <-)))
      ((let ((-> _ = (app f1 (app #t)) <-)) bod) (top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app z x1 x2 (-> x3 <-))
 (expenv
  '((((bod
       (x3)
       (ran
        (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
        ()
        ()
        (bod
         (x2)
         (ran
          (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
          ()
          ()
          (bod
           (x1)
           (ran
            (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
            ()
            ()
            (top)))))))
      app
      (λ (z) (app z x1 x2 x3))
      (λ (y1 y2 y3) y1))
     ((let-bod
       let
       ((_ (app f3 (app #t))))
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #f)))
    (((let-bod
       let
       ((_ (app f3 (app #t))))
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #f))
     ((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        ()
        ()
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top)))))
      app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))
    (((let-bod
       let
       ((_ (app f2 (app #t))))
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #f))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((bin
       let
       _
       (app f1 (app #f))
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #t))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (expenv
    '(((λ (x2)
         (->
          (app
           (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
           (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
          <-))
       (let (_) (-> (app f2 (app #f)) <-)))
      ((let (_) (-> (app f2 (app #f)) <-))
       (λ (x1)
         (->
          (app
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           (λ (x2)
             (app
              (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
              (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
          <-)))
      ((let ((-> _ = (app f1 (app #t)) <-)) bod) (top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app z x1 x2 (-> x3 <-))
 (expenv
  '((((bod
       (x3)
       (ran
        (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
        ()
        ()
        (bod
         (x2)
         (ran
          (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
          ()
          ()
          (bod
           (x1)
           (ran
            (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
            ()
            ()
            (top)))))))
      app
      (λ (z) (app z x1 x2 x3))
      (λ (y1 y2 y3) y1))
     ((bin
       let
       _
       (app f3 (app #f))
       ()
       ()
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #t)))
    (((bin
       let
       _
       (app f3 (app #f))
       ()
       ()
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #t))
     ((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        ()
        ()
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top)))))
      app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))
    (((bin
       let
       _
       (app f2 (app #f))
       ()
       ()
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #t))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((let-bod
       let
       ((_ (app f1 (app #t))))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #f))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (expenv
    '(((λ (x2)
         (->
          (app
           (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
           (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
          <-))
       (let ((-> _ = (app f2 (app #t)) <-)) bod))
      ((let ((-> _ = (app f2 (app #t)) <-)) bod)
       (λ (x1)
         (->
          (app
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           (λ (x2)
             (app
              (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
              (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
          <-)))
      ((let (_) (-> (app f1 (app #f)) <-)) (top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app z x1 x2 (-> x3 <-))
 (expenv
  '((((bod
       (x3)
       (ran
        (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
        ()
        ()
        (bod
         (x2)
         (ran
          (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
          ()
          ()
          (bod
           (x1)
           (ran
            (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
            ()
            ()
            (top)))))))
      app
      (λ (z) (app z x1 x2 x3))
      (λ (y1 y2 y3) y1))
     ((let-bod
       let
       ((_ (app f3 (app #t))))
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #f)))
    (((let-bod
       let
       ((_ (app f3 (app #t))))
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #f))
     ((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        ()
        ()
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top)))))
      app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))
    (((bin
       let
       _
       (app f2 (app #f))
       ()
       ()
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #t))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((let-bod
       let
       ((_ (app f1 (app #t))))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #f))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (expenv
    '(((λ (x2)
         (->
          (app
           (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
           (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
          <-))
       (let ((-> _ = (app f2 (app #t)) <-)) bod))
      ((let ((-> _ = (app f2 (app #t)) <-)) bod)
       (λ (x1)
         (->
          (app
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           (λ (x2)
             (app
              (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
              (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
          <-)))
      ((let (_) (-> (app f1 (app #f)) <-)) (top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app z x1 x2 (-> x3 <-))
 (expenv
  '((((bod
       (x3)
       (ran
        (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
        ()
        ()
        (bod
         (x2)
         (ran
          (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
          ()
          ()
          (bod
           (x1)
           (ran
            (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
            ()
            ()
            (top)))))))
      app
      (λ (z) (app z x1 x2 x3))
      (λ (y1 y2 y3) y1))
     ((bin
       let
       _
       (app f3 (app #f))
       ()
       ()
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #t)))
    (((bin
       let
       _
       (app f3 (app #f))
       ()
       ()
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #t))
     ((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        ()
        ()
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top)))))
      app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))
    (((let-bod
       let
       ((_ (app f2 (app #t))))
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #f))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((let-bod
       let
       ((_ (app f1 (app #t))))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #f))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (expenv
    '(((λ (x2)
         (->
          (app
           (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
           (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
          <-))
       (let (_) (-> (app f2 (app #f)) <-)))
      ((let (_) (-> (app f2 (app #f)) <-))
       (λ (x1)
         (->
          (app
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           (λ (x2)
             (app
              (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
              (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
          <-)))
      ((let (_) (-> (app f1 (app #f)) <-)) (top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app z x1 x2 (-> x3 <-))
 (expenv
  '((((bod
       (x3)
       (ran
        (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
        ()
        ()
        (bod
         (x2)
         (ran
          (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
          ()
          ()
          (bod
           (x1)
           (ran
            (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
            ()
            ()
            (top)))))))
      app
      (λ (z) (app z x1 x2 x3))
      (λ (y1 y2 y3) y1))
     ((let-bod
       let
       ((_ (app f3 (app #t))))
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #f)))
    (((let-bod
       let
       ((_ (app f3 (app #t))))
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #f))
     ((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        ()
        ()
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top)))))
      app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))
    (((let-bod
       let
       ((_ (app f2 (app #t))))
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #f))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((let-bod
       let
       ((_ (app f1 (app #t))))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #f))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (expenv
    '(((λ (x2)
         (->
          (app
           (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
           (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
          <-))
       (let (_) (-> (app f2 (app #f)) <-)))
      ((let (_) (-> (app f2 (app #f)) <-))
       (λ (x1)
         (->
          (app
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           (λ (x2)
             (app
              (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
              (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
          <-)))
      ((let (_) (-> (app f1 (app #f)) <-)) (top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   (-> (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f)))) <-)
   (λ (x2)
     (app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
 (expenv
  '((((bin
       let
       _
       (app f1 (app #f))
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #t))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list
 'clos/con:
 (list
  (list
   '(λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
   (expenv '(((let ((-> _ = (app f1 (app #t)) <-)) bod) (top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app f2 (-> (app #t) <-))
 (expenv
  '((((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
     ((bin
       let
       _
       (app f1 (app #f))
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #t)))
    (((bin
       let
       _
       (app f1 (app #f))
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #t))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (expenv
    '(((λ (x1)
         (->
          (app
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           (λ (x2)
             (app
              (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
              (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
          <-))
       (let ((-> _ = (app f1 (app #t)) <-)) bod))
      ((let ((-> _ = (app f1 (app #t)) <-)) bod) (top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app f2 (-> (app #t) <-))
 (expenv
  '((((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
     ((let-bod
       let
       ((_ (app f1 (app #t))))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #f)))
    (((let-bod
       let
       ((_ (app f1 (app #t))))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #f))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (expenv
    '(((λ (x1)
         (->
          (app
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           (λ (x2)
             (app
              (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
              (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
          <-))
       (let (_) (-> (app f1 (app #f)) <-)))
      ((let (_) (-> (app f1 (app #f)) <-)) (top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (y1 y2 y3) (-> y1 <-))
 (expenv
  '((((bod
       (z)
       (rat
        ((λ (y1 y2 y3) y1))
        (bod
         (x3)
         (ran
          (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
          ()
          ()
          (bod
           (x2)
           (ran
            (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
            ()
            ()
            (bod
             (x1)
             (ran
              (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
              ()
              ()
              (top)))))))))
      app
      z
      x1
      x2
      x3)
     ((bod
       (x3)
       (ran
        (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
        ()
        ()
        (bod
         (x2)
         (ran
          (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
          ()
          ()
          (bod
           (x1)
           (ran
            (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
            ()
            ()
            (top)))))))
      app
      (λ (z) (app z x1 x2 x3))
      (λ (y1 y2 y3) y1)))
    (((bin
       let
       _
       (app f3 (app #f))
       ()
       ()
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #t))
     ((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        ()
        ()
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top)))))
      app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))
    (((bin
       let
       _
       (app f2 (app #f))
       ()
       ()
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #t))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((bin
       let
       _
       (app f1 (app #f))
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #t))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list 'clos/con: (list (list '(#t ()) (expenv '(((top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (y1 y2 y3) (-> y1 <-))
 (expenv
  '((((bod
       (z)
       (rat
        ((λ (y1 y2 y3) y1))
        (bod
         (x3)
         (ran
          (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
          ()
          ()
          (bod
           (x2)
           (ran
            (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
            ()
            ()
            (bod
             (x1)
             (ran
              (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
              ()
              ()
              (top)))))))))
      app
      z
      x1
      x2
      x3)
     ((bod
       (x3)
       (ran
        (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
        ()
        ()
        (bod
         (x2)
         (ran
          (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
          ()
          ()
          (bod
           (x1)
           (ran
            (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
            ()
            ()
            (top)))))))
      app
      (λ (z) (app z x1 x2 x3))
      (λ (y1 y2 y3) y1)))
    (((let-bod
       let
       ((_ (app f3 (app #t))))
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #f))
     ((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        ()
        ()
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top)))))
      app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))
    (((bin
       let
       _
       (app f2 (app #f))
       ()
       ()
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #t))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((bin
       let
       _
       (app f1 (app #f))
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #t))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list 'clos/con: (list (list '(#t ()) (expenv '(((top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (y1 y2 y3) (-> y1 <-))
 (expenv
  '((((bod
       (z)
       (rat
        ((λ (y1 y2 y3) y1))
        (bod
         (x3)
         (ran
          (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
          ()
          ()
          (bod
           (x2)
           (ran
            (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
            ()
            ()
            (bod
             (x1)
             (ran
              (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
              ()
              ()
              (top)))))))))
      app
      z
      x1
      x2
      x3)
     ((bod
       (x3)
       (ran
        (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
        ()
        ()
        (bod
         (x2)
         (ran
          (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
          ()
          ()
          (bod
           (x1)
           (ran
            (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
            ()
            ()
            (top)))))))
      app
      (λ (z) (app z x1 x2 x3))
      (λ (y1 y2 y3) y1)))
    (((bin
       let
       _
       (app f3 (app #f))
       ()
       ()
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #t))
     ((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        ()
        ()
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top)))))
      app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))
    (((let-bod
       let
       ((_ (app f2 (app #t))))
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #f))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((bin
       let
       _
       (app f1 (app #f))
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #t))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list 'clos/con: (list (list '(#t ()) (expenv '(((top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (y1 y2 y3) (-> y1 <-))
 (expenv
  '((((bod
       (z)
       (rat
        ((λ (y1 y2 y3) y1))
        (bod
         (x3)
         (ran
          (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
          ()
          ()
          (bod
           (x2)
           (ran
            (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
            ()
            ()
            (bod
             (x1)
             (ran
              (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
              ()
              ()
              (top)))))))))
      app
      z
      x1
      x2
      x3)
     ((bod
       (x3)
       (ran
        (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
        ()
        ()
        (bod
         (x2)
         (ran
          (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
          ()
          ()
          (bod
           (x1)
           (ran
            (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
            ()
            ()
            (top)))))))
      app
      (λ (z) (app z x1 x2 x3))
      (λ (y1 y2 y3) y1)))
    (((let-bod
       let
       ((_ (app f3 (app #t))))
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #f))
     ((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        ()
        ()
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top)))))
      app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))
    (((let-bod
       let
       ((_ (app f2 (app #t))))
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #f))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((bin
       let
       _
       (app f1 (app #f))
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #t))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list 'clos/con: (list (list '(#t ()) (expenv '(((top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (y1 y2 y3) (-> y1 <-))
 (expenv
  '((((bod
       (z)
       (rat
        ((λ (y1 y2 y3) y1))
        (bod
         (x3)
         (ran
          (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
          ()
          ()
          (bod
           (x2)
           (ran
            (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
            ()
            ()
            (bod
             (x1)
             (ran
              (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
              ()
              ()
              (top)))))))))
      app
      z
      x1
      x2
      x3)
     ((bod
       (x3)
       (ran
        (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
        ()
        ()
        (bod
         (x2)
         (ran
          (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
          ()
          ()
          (bod
           (x1)
           (ran
            (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
            ()
            ()
            (top)))))))
      app
      (λ (z) (app z x1 x2 x3))
      (λ (y1 y2 y3) y1)))
    (((bin
       let
       _
       (app f3 (app #f))
       ()
       ()
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #t))
     ((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        ()
        ()
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top)))))
      app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))
    (((bin
       let
       _
       (app f2 (app #f))
       ()
       ()
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #t))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((let-bod
       let
       ((_ (app f1 (app #t))))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #f))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list 'clos/con: (list (list '(#f ()) (expenv '(((top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (y1 y2 y3) (-> y1 <-))
 (expenv
  '((((bod
       (z)
       (rat
        ((λ (y1 y2 y3) y1))
        (bod
         (x3)
         (ran
          (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
          ()
          ()
          (bod
           (x2)
           (ran
            (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
            ()
            ()
            (bod
             (x1)
             (ran
              (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
              ()
              ()
              (top)))))))))
      app
      z
      x1
      x2
      x3)
     ((bod
       (x3)
       (ran
        (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
        ()
        ()
        (bod
         (x2)
         (ran
          (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
          ()
          ()
          (bod
           (x1)
           (ran
            (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
            ()
            ()
            (top)))))))
      app
      (λ (z) (app z x1 x2 x3))
      (λ (y1 y2 y3) y1)))
    (((let-bod
       let
       ((_ (app f3 (app #t))))
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #f))
     ((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        ()
        ()
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top)))))
      app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))
    (((bin
       let
       _
       (app f2 (app #f))
       ()
       ()
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #t))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((let-bod
       let
       ((_ (app f1 (app #t))))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #f))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list 'clos/con: (list (list '(#f ()) (expenv '(((top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (y1 y2 y3) (-> y1 <-))
 (expenv
  '((((bod
       (z)
       (rat
        ((λ (y1 y2 y3) y1))
        (bod
         (x3)
         (ran
          (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
          ()
          ()
          (bod
           (x2)
           (ran
            (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
            ()
            ()
            (bod
             (x1)
             (ran
              (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
              ()
              ()
              (top)))))))))
      app
      z
      x1
      x2
      x3)
     ((bod
       (x3)
       (ran
        (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
        ()
        ()
        (bod
         (x2)
         (ran
          (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
          ()
          ()
          (bod
           (x1)
           (ran
            (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
            ()
            ()
            (top)))))))
      app
      (λ (z) (app z x1 x2 x3))
      (λ (y1 y2 y3) y1)))
    (((bin
       let
       _
       (app f3 (app #f))
       ()
       ()
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #t))
     ((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        ()
        ()
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top)))))
      app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))
    (((let-bod
       let
       ((_ (app f2 (app #t))))
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #f))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((let-bod
       let
       ((_ (app f1 (app #t))))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #f))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list 'clos/con: (list (list '(#f ()) (expenv '(((top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (y1 y2 y3) (-> y1 <-))
 (expenv
  '((((bod
       (z)
       (rat
        ((λ (y1 y2 y3) y1))
        (bod
         (x3)
         (ran
          (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
          ()
          ()
          (bod
           (x2)
           (ran
            (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
            ()
            ()
            (bod
             (x1)
             (ran
              (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
              ()
              ()
              (top)))))))))
      app
      z
      x1
      x2
      x3)
     ((bod
       (x3)
       (ran
        (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
        ()
        ()
        (bod
         (x2)
         (ran
          (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
          ()
          ()
          (bod
           (x1)
           (ran
            (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
            ()
            ()
            (top)))))))
      app
      (λ (z) (app z x1 x2 x3))
      (λ (y1 y2 y3) y1)))
    (((let-bod
       let
       ((_ (app f3 (app #t))))
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #f))
     ((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        ()
        ()
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top)))))
      app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))
    (((let-bod
       let
       ((_ (app f2 (app #t))))
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #f))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((let-bod
       let
       ((_ (app f1 (app #t))))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #f))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list 'clos/con: (list (list '(#f ()) (expenv '(((top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   (-> (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f)))) <-)
   (λ (x1)
     (app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
 (expenv '()))
(list
 'clos/con:
 (list
  (list
   '(λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
   (expenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (x1)
    (->
     (app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
     <-))
 (expenv
  '((((bin
       let
       _
       (app f1 (app #f))
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #t))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list 'clos/con: (list (list '(#t ()) (expenv '(((top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (λ (z) (app z x1 x2 x3)) (-> (λ (y1 y2 y3) y1) <-))
 (expenv
  '((((bin
       let
       _
       (app f3 (app #f))
       ()
       ()
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #t))
     ((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        ()
        ()
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top)))))
      app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))
    (((bin
       let
       _
       (app f2 (app #f))
       ()
       ()
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #t))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((bin
       let
       _
       (app f1 (app #f))
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #t))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list
 'clos/con:
 (list
  (list
   '(λ (y1 y2 y3) y1)
   (expenv
    '(((let ((-> _ = (app f3 (app #t)) <-)) bod)
       (λ (x2)
         (->
          (app
           (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
           (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
          <-)))
      ((let ((-> _ = (app f2 (app #t)) <-)) bod)
       (λ (x1)
         (->
          (app
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           (λ (x2)
             (app
              (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
              (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
          <-)))
      ((let ((-> _ = (app f1 (app #t)) <-)) bod) (top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (λ (z) (app z x1 x2 x3)) (-> (λ (y1 y2 y3) y1) <-))
 (expenv
  '((((bin
       let
       _
       (app f3 (app #f))
       ()
       ()
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #t))
     ((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        ()
        ()
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top)))))
      app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))
    (((let-bod
       let
       ((_ (app f2 (app #t))))
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #f))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((bin
       let
       _
       (app f1 (app #f))
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #t))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list
 'clos/con:
 (list
  (list
   '(λ (y1 y2 y3) y1)
   (expenv
    '(((let ((-> _ = (app f3 (app #t)) <-)) bod)
       (λ (x2)
         (->
          (app
           (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
           (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
          <-)))
      ((let (_) (-> (app f2 (app #f)) <-))
       (λ (x1)
         (->
          (app
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           (λ (x2)
             (app
              (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
              (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
          <-)))
      ((let ((-> _ = (app f1 (app #t)) <-)) bod) (top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (λ (z) (app z x1 x2 x3)) (-> (λ (y1 y2 y3) y1) <-))
 (expenv
  '((((bin
       let
       _
       (app f3 (app #f))
       ()
       ()
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #t))
     ((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        ()
        ()
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top)))))
      app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))
    (((bin
       let
       _
       (app f2 (app #f))
       ()
       ()
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #t))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((let-bod
       let
       ((_ (app f1 (app #t))))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #f))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list
 'clos/con:
 (list
  (list
   '(λ (y1 y2 y3) y1)
   (expenv
    '(((let ((-> _ = (app f3 (app #t)) <-)) bod)
       (λ (x2)
         (->
          (app
           (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
           (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
          <-)))
      ((let ((-> _ = (app f2 (app #t)) <-)) bod)
       (λ (x1)
         (->
          (app
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           (λ (x2)
             (app
              (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
              (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
          <-)))
      ((let (_) (-> (app f1 (app #f)) <-)) (top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (λ (z) (app z x1 x2 x3)) (-> (λ (y1 y2 y3) y1) <-))
 (expenv
  '((((bin
       let
       _
       (app f3 (app #f))
       ()
       ()
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #t))
     ((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        ()
        ()
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top)))))
      app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))
    (((let-bod
       let
       ((_ (app f2 (app #t))))
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #f))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((let-bod
       let
       ((_ (app f1 (app #t))))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #f))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list
 'clos/con:
 (list
  (list
   '(λ (y1 y2 y3) y1)
   (expenv
    '(((let ((-> _ = (app f3 (app #t)) <-)) bod)
       (λ (x2)
         (->
          (app
           (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
           (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
          <-)))
      ((let (_) (-> (app f2 (app #f)) <-))
       (λ (x1)
         (->
          (app
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           (λ (x2)
             (app
              (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
              (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
          <-)))
      ((let (_) (-> (app f1 (app #f)) <-)) (top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(let (_) (-> (app f3 (app #f)) <-))
 (expenv
  '((((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        ()
        ()
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top)))))
      app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
     ((bin
       let
       _
       (app f2 (app #f))
       ()
       ()
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #t)))
    (((bin
       let
       _
       (app f2 (app #f))
       ()
       ()
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #t))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((bin
       let
       _
       (app f1 (app #f))
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #t))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list 'clos/con: (list (list '(#t ()) (expenv '(((top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(let (_) (-> (app f3 (app #f)) <-))
 (expenv
  '((((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        ()
        ()
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top)))))
      app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
     ((let-bod
       let
       ((_ (app f2 (app #t))))
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #f)))
    (((let-bod
       let
       ((_ (app f2 (app #t))))
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #f))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((bin
       let
       _
       (app f1 (app #f))
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #t))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list 'clos/con: (list (list '(#t ()) (expenv '(((top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(let (_) (-> (app f3 (app #f)) <-))
 (expenv
  '((((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        ()
        ()
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top)))))
      app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
     ((bin
       let
       _
       (app f2 (app #f))
       ()
       ()
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #t)))
    (((bin
       let
       _
       (app f2 (app #f))
       ()
       ()
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #t))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((let-bod
       let
       ((_ (app f1 (app #t))))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #f))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list 'clos/con: (list (list '(#f ()) (expenv '(((top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(let (_) (-> (app f3 (app #f)) <-))
 (expenv
  '((((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        ()
        ()
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top)))))
      app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
     ((let-bod
       let
       ((_ (app f2 (app #t))))
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #f)))
    (((let-bod
       let
       ((_ (app f2 (app #t))))
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #f))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((let-bod
       let
       ((_ (app f1 (app #t))))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #f))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list 'clos/con: (list (list '(#f ()) (expenv '(((top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> f2 <-) (app #t))
 (expenv
  '((((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
     ((bin
       let
       _
       (app f1 (app #f))
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #t)))
    (((bin
       let
       _
       (app f1 (app #f))
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #t))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list
 'clos/con:
 (list
  (list
   '(λ (x2)
      (app
       (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
       (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))
   (expenv '(((let ((-> _ = (app f1 (app #t)) <-)) bod) (top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> f2 <-) (app #t))
 (expenv
  '((((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
     ((let-bod
       let
       ((_ (app f1 (app #t))))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #f)))
    (((let-bod
       let
       ((_ (app f1 (app #t))))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #f))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list
 'clos/con:
 (list
  (list
   '(λ (x2)
      (app
       (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
       (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))
   (expenv '(((let (_) (-> (app f1 (app #f)) <-)) (top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
   (-> (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))) <-))
 (expenv
  '((((bin
       let
       _
       (app f2 (app #f))
       ()
       ()
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #t))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((bin
       let
       _
       (app f1 (app #f))
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #t))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list
 'clos/con:
 (list
  (list
   '(λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))
   (expenv
    '(((let ((-> _ = (app f2 (app #t)) <-)) bod)
       (λ (x1)
         (->
          (app
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           (λ (x2)
             (app
              (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
              (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
          <-)))
      ((let ((-> _ = (app f1 (app #t)) <-)) bod) (top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
   (-> (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))) <-))
 (expenv
  '((((bin
       let
       _
       (app f2 (app #f))
       ()
       ()
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #t))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((let-bod
       let
       ((_ (app f1 (app #t))))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #f))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list
 'clos/con:
 (list
  (list
   '(λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))
   (expenv
    '(((let ((-> _ = (app f2 (app #t)) <-)) bod)
       (λ (x1)
         (->
          (app
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           (λ (x2)
             (app
              (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
              (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
          <-)))
      ((let (_) (-> (app f1 (app #f)) <-)) (top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(let ((-> _ = (app f3 (app #t)) <-)) bod)
 (expenv
  '((((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        ()
        ()
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top)))))
      app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
     ((bin
       let
       _
       (app f2 (app #f))
       ()
       ()
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #t)))
    (((bin
       let
       _
       (app f2 (app #f))
       ()
       ()
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #t))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((bin
       let
       _
       (app f1 (app #f))
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #t))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list 'clos/con: (list (list '(#t ()) (expenv '(((top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(let ((-> _ = (app f3 (app #t)) <-)) bod)
 (expenv
  '((((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        ()
        ()
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top)))))
      app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
     ((let-bod
       let
       ((_ (app f2 (app #t))))
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #f)))
    (((let-bod
       let
       ((_ (app f2 (app #t))))
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #f))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((bin
       let
       _
       (app f1 (app #f))
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #t))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list 'clos/con: (list (list '(#t ()) (expenv '(((top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(let ((-> _ = (app f3 (app #t)) <-)) bod)
 (expenv
  '((((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        ()
        ()
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top)))))
      app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
     ((bin
       let
       _
       (app f2 (app #f))
       ()
       ()
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #t)))
    (((bin
       let
       _
       (app f2 (app #f))
       ()
       ()
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #t))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((let-bod
       let
       ((_ (app f1 (app #t))))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #f))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list 'clos/con: (list (list '(#f ()) (expenv '(((top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(let ((-> _ = (app f3 (app #t)) <-)) bod)
 (expenv
  '((((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        ()
        ()
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top)))))
      app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
     ((let-bod
       let
       ((_ (app f2 (app #t))))
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #f)))
    (((let-bod
       let
       ((_ (app f2 (app #t))))
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #f))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((let-bod
       let
       ((_ (app f1 (app #t))))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #f))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list 'clos/con: (list (list '(#f ()) (expenv '(((top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (x3) (-> (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)) <-))
 (expenv
  '((((let-bod
       let
       ((_ (app f3 (app #t))))
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #f))
     ((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        ()
        ()
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top)))))
      app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))
    (((bin
       let
       _
       (app f2 (app #f))
       ()
       ()
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #t))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((bin
       let
       _
       (app f1 (app #f))
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #t))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list 'clos/con: (list (list '(#t ()) (expenv '(((top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (x3) (-> (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)) <-))
 (expenv
  '((((let-bod
       let
       ((_ (app f3 (app #t))))
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #f))
     ((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        ()
        ()
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top)))))
      app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))
    (((let-bod
       let
       ((_ (app f2 (app #t))))
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #f))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((bin
       let
       _
       (app f1 (app #f))
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #t))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list 'clos/con: (list (list '(#t ()) (expenv '(((top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (x3) (-> (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)) <-))
 (expenv
  '((((let-bod
       let
       ((_ (app f3 (app #t))))
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #f))
     ((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        ()
        ()
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top)))))
      app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))
    (((bin
       let
       _
       (app f2 (app #f))
       ()
       ()
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #t))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((let-bod
       let
       ((_ (app f1 (app #t))))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #f))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list 'clos/con: (list (list '(#f ()) (expenv '(((top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (x3) (-> (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)) <-))
 (expenv
  '((((let-bod
       let
       ((_ (app f3 (app #t))))
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #f))
     ((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        ()
        ()
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top)))))
      app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))
    (((let-bod
       let
       ((_ (app f2 (app #t))))
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #f))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((let-bod
       let
       ((_ (app f1 (app #t))))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #f))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list 'clos/con: (list (list '(#f ()) (expenv '(((top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
   (-> (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))) <-))
 (expenv
  '((((let-bod
       let
       ((_ (app f2 (app #t))))
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #f))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((bin
       let
       _
       (app f1 (app #f))
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #t))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list
 'clos/con:
 (list
  (list
   '(λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))
   (expenv
    '(((let (_) (-> (app f2 (app #f)) <-))
       (λ (x1)
         (->
          (app
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           (λ (x2)
             (app
              (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
              (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
          <-)))
      ((let ((-> _ = (app f1 (app #t)) <-)) bod) (top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
   (-> (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))) <-))
 (expenv
  '((((let-bod
       let
       ((_ (app f2 (app #t))))
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #f))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((let-bod
       let
       ((_ (app f1 (app #t))))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #f))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list
 'clos/con:
 (list
  (list
   '(λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))
   (expenv
    '(((let (_) (-> (app f2 (app #f)) <-))
       (λ (x1)
         (->
          (app
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           (λ (x2)
             (app
              (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
              (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
          <-)))
      ((let (_) (-> (app f1 (app #f)) <-)) (top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app f3 (-> (app #f) <-))
 (expenv
  '((((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        ()
        ()
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top)))))
      app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
     ((bin
       let
       _
       (app f2 (app #f))
       ()
       ()
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #t)))
    (((bin
       let
       _
       (app f2 (app #f))
       ()
       ()
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #t))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((bin
       let
       _
       (app f1 (app #f))
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #t))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (expenv
    '(((λ (x2)
         (->
          (app
           (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
           (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
          <-))
       (let ((-> _ = (app f2 (app #t)) <-)) bod))
      ((let ((-> _ = (app f2 (app #t)) <-)) bod)
       (λ (x1)
         (->
          (app
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           (λ (x2)
             (app
              (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
              (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
          <-)))
      ((let ((-> _ = (app f1 (app #t)) <-)) bod) (top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app f3 (-> (app #f) <-))
 (expenv
  '((((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        ()
        ()
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top)))))
      app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
     ((let-bod
       let
       ((_ (app f2 (app #t))))
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #f)))
    (((let-bod
       let
       ((_ (app f2 (app #t))))
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #f))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((bin
       let
       _
       (app f1 (app #f))
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #t))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (expenv
    '(((λ (x2)
         (->
          (app
           (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
           (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
          <-))
       (let (_) (-> (app f2 (app #f)) <-)))
      ((let (_) (-> (app f2 (app #f)) <-))
       (λ (x1)
         (->
          (app
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           (λ (x2)
             (app
              (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
              (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
          <-)))
      ((let ((-> _ = (app f1 (app #t)) <-)) bod) (top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app f3 (-> (app #f) <-))
 (expenv
  '((((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        ()
        ()
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top)))))
      app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
     ((bin
       let
       _
       (app f2 (app #f))
       ()
       ()
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #t)))
    (((bin
       let
       _
       (app f2 (app #f))
       ()
       ()
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #t))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((let-bod
       let
       ((_ (app f1 (app #t))))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #f))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (expenv
    '(((λ (x2)
         (->
          (app
           (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
           (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
          <-))
       (let ((-> _ = (app f2 (app #t)) <-)) bod))
      ((let ((-> _ = (app f2 (app #t)) <-)) bod)
       (λ (x1)
         (->
          (app
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           (λ (x2)
             (app
              (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
              (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
          <-)))
      ((let (_) (-> (app f1 (app #f)) <-)) (top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app f3 (-> (app #f) <-))
 (expenv
  '((((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        ()
        ()
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top)))))
      app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
     ((let-bod
       let
       ((_ (app f2 (app #t))))
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #f)))
    (((let-bod
       let
       ((_ (app f2 (app #t))))
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #f))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((let-bod
       let
       ((_ (app f1 (app #t))))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #f))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (expenv
    '(((λ (x2)
         (->
          (app
           (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
           (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
          <-))
       (let (_) (-> (app f2 (app #f)) <-)))
      ((let (_) (-> (app f2 (app #f)) <-))
       (λ (x1)
         (->
          (app
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           (λ (x2)
             (app
              (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
              (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
          <-)))
      ((let (_) (-> (app f1 (app #f)) <-)) (top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app f3 (-> (app #t) <-))
 (expenv
  '((((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        ()
        ()
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top)))))
      app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
     ((bin
       let
       _
       (app f2 (app #f))
       ()
       ()
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #t)))
    (((bin
       let
       _
       (app f2 (app #f))
       ()
       ()
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #t))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((bin
       let
       _
       (app f1 (app #f))
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #t))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (expenv
    '(((λ (x2)
         (->
          (app
           (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
           (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
          <-))
       (let ((-> _ = (app f2 (app #t)) <-)) bod))
      ((let ((-> _ = (app f2 (app #t)) <-)) bod)
       (λ (x1)
         (->
          (app
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           (λ (x2)
             (app
              (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
              (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
          <-)))
      ((let ((-> _ = (app f1 (app #t)) <-)) bod) (top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app f3 (-> (app #t) <-))
 (expenv
  '((((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        ()
        ()
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top)))))
      app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
     ((let-bod
       let
       ((_ (app f2 (app #t))))
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #f)))
    (((let-bod
       let
       ((_ (app f2 (app #t))))
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #f))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((bin
       let
       _
       (app f1 (app #f))
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #t))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (expenv
    '(((λ (x2)
         (->
          (app
           (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
           (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
          <-))
       (let (_) (-> (app f2 (app #f)) <-)))
      ((let (_) (-> (app f2 (app #f)) <-))
       (λ (x1)
         (->
          (app
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           (λ (x2)
             (app
              (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
              (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
          <-)))
      ((let ((-> _ = (app f1 (app #t)) <-)) bod) (top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app f3 (-> (app #t) <-))
 (expenv
  '((((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        ()
        ()
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top)))))
      app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
     ((bin
       let
       _
       (app f2 (app #f))
       ()
       ()
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #t)))
    (((bin
       let
       _
       (app f2 (app #f))
       ()
       ()
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #t))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((let-bod
       let
       ((_ (app f1 (app #t))))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #f))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (expenv
    '(((λ (x2)
         (->
          (app
           (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
           (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
          <-))
       (let ((-> _ = (app f2 (app #t)) <-)) bod))
      ((let ((-> _ = (app f2 (app #t)) <-)) bod)
       (λ (x1)
         (->
          (app
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           (λ (x2)
             (app
              (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
              (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
          <-)))
      ((let (_) (-> (app f1 (app #f)) <-)) (top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app f3 (-> (app #t) <-))
 (expenv
  '((((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        ()
        ()
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top)))))
      app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
     ((let-bod
       let
       ((_ (app f2 (app #t))))
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #f)))
    (((let-bod
       let
       ((_ (app f2 (app #t))))
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #f))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((let-bod
       let
       ((_ (app f1 (app #t))))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #f))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (expenv
    '(((λ (x2)
         (->
          (app
           (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
           (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
          <-))
       (let (_) (-> (app f2 (app #f)) <-)))
      ((let (_) (-> (app f2 (app #f)) <-))
       (λ (x1)
         (->
          (app
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           (λ (x2)
             (app
              (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
              (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
          <-)))
      ((let (_) (-> (app f1 (app #f)) <-)) (top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app f1 (-> (app #f) <-))
 (expenv
  '((((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list 'clos/con: (list (list '(#f ()) (expenv '(((top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(let (_) (-> (app f1 (app #f)) <-))
 (expenv
  '((((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list 'clos/con: (list (list '(#f ()) (expenv '(((top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> (λ (z) (app z x1 x2 x3)) <-) (λ (y1 y2 y3) y1))
 (expenv
  '((((let-bod
       let
       ((_ (app f3 (app #t))))
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #f))
     ((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        ()
        ()
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top)))))
      app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))
    (((bin
       let
       _
       (app f2 (app #f))
       ()
       ()
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #t))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((bin
       let
       _
       (app f1 (app #f))
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #t))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list
 'clos/con:
 (list
  (list
   '(λ (z) (app z x1 x2 x3))
   (expenv
    '(((let (_) (-> (app f3 (app #f)) <-))
       (λ (x2)
         (->
          (app
           (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
           (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
          <-)))
      ((let ((-> _ = (app f2 (app #t)) <-)) bod)
       (λ (x1)
         (->
          (app
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           (λ (x2)
             (app
              (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
              (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
          <-)))
      ((let ((-> _ = (app f1 (app #t)) <-)) bod) (top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> (λ (z) (app z x1 x2 x3)) <-) (λ (y1 y2 y3) y1))
 (expenv
  '((((let-bod
       let
       ((_ (app f3 (app #t))))
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #f))
     ((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        ()
        ()
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top)))))
      app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))
    (((let-bod
       let
       ((_ (app f2 (app #t))))
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #f))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((bin
       let
       _
       (app f1 (app #f))
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #t))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list
 'clos/con:
 (list
  (list
   '(λ (z) (app z x1 x2 x3))
   (expenv
    '(((let (_) (-> (app f3 (app #f)) <-))
       (λ (x2)
         (->
          (app
           (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
           (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
          <-)))
      ((let (_) (-> (app f2 (app #f)) <-))
       (λ (x1)
         (->
          (app
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           (λ (x2)
             (app
              (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
              (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
          <-)))
      ((let ((-> _ = (app f1 (app #t)) <-)) bod) (top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> (λ (z) (app z x1 x2 x3)) <-) (λ (y1 y2 y3) y1))
 (expenv
  '((((let-bod
       let
       ((_ (app f3 (app #t))))
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #f))
     ((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        ()
        ()
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top)))))
      app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))
    (((bin
       let
       _
       (app f2 (app #f))
       ()
       ()
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #t))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((let-bod
       let
       ((_ (app f1 (app #t))))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #f))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list
 'clos/con:
 (list
  (list
   '(λ (z) (app z x1 x2 x3))
   (expenv
    '(((let (_) (-> (app f3 (app #f)) <-))
       (λ (x2)
         (->
          (app
           (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
           (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
          <-)))
      ((let ((-> _ = (app f2 (app #t)) <-)) bod)
       (λ (x1)
         (->
          (app
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           (λ (x2)
             (app
              (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
              (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
          <-)))
      ((let (_) (-> (app f1 (app #f)) <-)) (top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> (λ (z) (app z x1 x2 x3)) <-) (λ (y1 y2 y3) y1))
 (expenv
  '((((let-bod
       let
       ((_ (app f3 (app #t))))
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #f))
     ((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        ()
        ()
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top)))))
      app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))
    (((let-bod
       let
       ((_ (app f2 (app #t))))
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #f))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((let-bod
       let
       ((_ (app f1 (app #t))))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #f))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list
 'clos/con:
 (list
  (list
   '(λ (z) (app z x1 x2 x3))
   (expenv
    '(((let (_) (-> (app f3 (app #f)) <-))
       (λ (x2)
         (->
          (app
           (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
           (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
          <-)))
      ((let (_) (-> (app f2 (app #f)) <-))
       (λ (x1)
         (->
          (app
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           (λ (x2)
             (app
              (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
              (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
          <-)))
      ((let (_) (-> (app f1 (app #f)) <-)) (top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (z) (-> (app z x1 x2 x3) <-))
 (expenv
  '((((bod
       (x3)
       (ran
        (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
        ()
        ()
        (bod
         (x2)
         (ran
          (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
          ()
          ()
          (bod
           (x1)
           (ran
            (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
            ()
            ()
            (top)))))))
      app
      (λ (z) (app z x1 x2 x3))
      (λ (y1 y2 y3) y1))
     ((bin
       let
       _
       (app f3 (app #f))
       ()
       ()
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #t)))
    (((bin
       let
       _
       (app f3 (app #f))
       ()
       ()
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #t))
     ((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        ()
        ()
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top)))))
      app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))
    (((bin
       let
       _
       (app f2 (app #f))
       ()
       ()
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #t))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((bin
       let
       _
       (app f1 (app #f))
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #t))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list 'clos/con: (list (list '(#t ()) (expenv '(((top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (z) (-> (app z x1 x2 x3) <-))
 (expenv
  '((((bod
       (x3)
       (ran
        (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
        ()
        ()
        (bod
         (x2)
         (ran
          (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
          ()
          ()
          (bod
           (x1)
           (ran
            (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
            ()
            ()
            (top)))))))
      app
      (λ (z) (app z x1 x2 x3))
      (λ (y1 y2 y3) y1))
     ((let-bod
       let
       ((_ (app f3 (app #t))))
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #f)))
    (((let-bod
       let
       ((_ (app f3 (app #t))))
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #f))
     ((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        ()
        ()
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top)))))
      app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))
    (((bin
       let
       _
       (app f2 (app #f))
       ()
       ()
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #t))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((bin
       let
       _
       (app f1 (app #f))
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #t))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list 'clos/con: (list (list '(#t ()) (expenv '(((top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (z) (-> (app z x1 x2 x3) <-))
 (expenv
  '((((bod
       (x3)
       (ran
        (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
        ()
        ()
        (bod
         (x2)
         (ran
          (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
          ()
          ()
          (bod
           (x1)
           (ran
            (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
            ()
            ()
            (top)))))))
      app
      (λ (z) (app z x1 x2 x3))
      (λ (y1 y2 y3) y1))
     ((bin
       let
       _
       (app f3 (app #f))
       ()
       ()
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #t)))
    (((bin
       let
       _
       (app f3 (app #f))
       ()
       ()
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #t))
     ((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        ()
        ()
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top)))))
      app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))
    (((let-bod
       let
       ((_ (app f2 (app #t))))
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #f))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((bin
       let
       _
       (app f1 (app #f))
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #t))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list 'clos/con: (list (list '(#t ()) (expenv '(((top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (z) (-> (app z x1 x2 x3) <-))
 (expenv
  '((((bod
       (x3)
       (ran
        (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
        ()
        ()
        (bod
         (x2)
         (ran
          (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
          ()
          ()
          (bod
           (x1)
           (ran
            (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
            ()
            ()
            (top)))))))
      app
      (λ (z) (app z x1 x2 x3))
      (λ (y1 y2 y3) y1))
     ((let-bod
       let
       ((_ (app f3 (app #t))))
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #f)))
    (((let-bod
       let
       ((_ (app f3 (app #t))))
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #f))
     ((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        ()
        ()
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top)))))
      app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))
    (((let-bod
       let
       ((_ (app f2 (app #t))))
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #f))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((bin
       let
       _
       (app f1 (app #f))
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #t))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list 'clos/con: (list (list '(#t ()) (expenv '(((top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (z) (-> (app z x1 x2 x3) <-))
 (expenv
  '((((bod
       (x3)
       (ran
        (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
        ()
        ()
        (bod
         (x2)
         (ran
          (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
          ()
          ()
          (bod
           (x1)
           (ran
            (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
            ()
            ()
            (top)))))))
      app
      (λ (z) (app z x1 x2 x3))
      (λ (y1 y2 y3) y1))
     ((bin
       let
       _
       (app f3 (app #f))
       ()
       ()
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #t)))
    (((bin
       let
       _
       (app f3 (app #f))
       ()
       ()
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #t))
     ((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        ()
        ()
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top)))))
      app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))
    (((bin
       let
       _
       (app f2 (app #f))
       ()
       ()
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #t))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((let-bod
       let
       ((_ (app f1 (app #t))))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #f))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list 'clos/con: (list (list '(#f ()) (expenv '(((top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (z) (-> (app z x1 x2 x3) <-))
 (expenv
  '((((bod
       (x3)
       (ran
        (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
        ()
        ()
        (bod
         (x2)
         (ran
          (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
          ()
          ()
          (bod
           (x1)
           (ran
            (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
            ()
            ()
            (top)))))))
      app
      (λ (z) (app z x1 x2 x3))
      (λ (y1 y2 y3) y1))
     ((let-bod
       let
       ((_ (app f3 (app #t))))
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #f)))
    (((let-bod
       let
       ((_ (app f3 (app #t))))
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #f))
     ((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        ()
        ()
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top)))))
      app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))
    (((bin
       let
       _
       (app f2 (app #f))
       ()
       ()
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #t))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((let-bod
       let
       ((_ (app f1 (app #t))))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #f))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list 'clos/con: (list (list '(#f ()) (expenv '(((top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (z) (-> (app z x1 x2 x3) <-))
 (expenv
  '((((bod
       (x3)
       (ran
        (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
        ()
        ()
        (bod
         (x2)
         (ran
          (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
          ()
          ()
          (bod
           (x1)
           (ran
            (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
            ()
            ()
            (top)))))))
      app
      (λ (z) (app z x1 x2 x3))
      (λ (y1 y2 y3) y1))
     ((bin
       let
       _
       (app f3 (app #f))
       ()
       ()
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #t)))
    (((bin
       let
       _
       (app f3 (app #f))
       ()
       ()
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #t))
     ((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        ()
        ()
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top)))))
      app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))
    (((let-bod
       let
       ((_ (app f2 (app #t))))
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #f))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((let-bod
       let
       ((_ (app f1 (app #t))))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #f))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list 'clos/con: (list (list '(#f ()) (expenv '(((top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (z) (-> (app z x1 x2 x3) <-))
 (expenv
  '((((bod
       (x3)
       (ran
        (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
        ()
        ()
        (bod
         (x2)
         (ran
          (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
          ()
          ()
          (bod
           (x1)
           (ran
            (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
            ()
            ()
            (top)))))))
      app
      (λ (z) (app z x1 x2 x3))
      (λ (y1 y2 y3) y1))
     ((let-bod
       let
       ((_ (app f3 (app #t))))
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #f)))
    (((let-bod
       let
       ((_ (app f3 (app #t))))
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #f))
     ((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        ()
        ()
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top)))))
      app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))
    (((let-bod
       let
       ((_ (app f2 (app #t))))
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #f))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((let-bod
       let
       ((_ (app f1 (app #t))))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #f))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list 'clos/con: (list (list '(#f ()) (expenv '(((top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> f1 <-) (app #f))
 (expenv
  '((((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list
 'clos/con:
 (list
  (list
   '(λ (x1)
      (app
       (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
       (λ (x2)
         (app
          (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
          (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
   (expenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (f2) (-> (let ((_ (app f2 (app #t)))) (app f2 (app #f))) <-))
 (expenv
  '((((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
     ((bin
       let
       _
       (app f1 (app #f))
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #t)))
    (((bin
       let
       _
       (app f1 (app #f))
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #t))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list 'clos/con: (list (list '(#t ()) (expenv '(((top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (f2) (-> (let ((_ (app f2 (app #t)))) (app f2 (app #f))) <-))
 (expenv
  '((((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
     ((let-bod
       let
       ((_ (app f1 (app #t))))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #f)))
    (((let-bod
       let
       ((_ (app f1 (app #t))))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #f))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list 'clos/con: (list (list '(#f ()) (expenv '(((top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> f2 <-) (app #f))
 (expenv
  '((((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
     ((bin
       let
       _
       (app f1 (app #f))
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #t)))
    (((bin
       let
       _
       (app f1 (app #f))
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #t))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list
 'clos/con:
 (list
  (list
   '(λ (x2)
      (app
       (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
       (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))
   (expenv '(((let ((-> _ = (app f1 (app #t)) <-)) bod) (top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> f2 <-) (app #f))
 (expenv
  '((((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
     ((let-bod
       let
       ((_ (app f1 (app #t))))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #f)))
    (((let-bod
       let
       ((_ (app f1 (app #t))))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #f))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list
 'clos/con:
 (list
  (list
   '(λ (x2)
      (app
       (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
       (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))
   (expenv '(((let (_) (-> (app f1 (app #f)) <-)) (top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app f1 (-> (app #t) <-))
 (expenv
  '((((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list 'clos/con: (list (list '(#t ()) (expenv '(((top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(let ((-> _ = (app f2 (app #t)) <-)) bod)
 (expenv
  '((((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
     ((bin
       let
       _
       (app f1 (app #f))
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #t)))
    (((bin
       let
       _
       (app f1 (app #f))
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #t))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list 'clos/con: (list (list '(#t ()) (expenv '(((top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(let ((-> _ = (app f2 (app #t)) <-)) bod)
 (expenv
  '((((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
     ((let-bod
       let
       ((_ (app f1 (app #t))))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #f)))
    (((let-bod
       let
       ((_ (app f1 (app #t))))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #f))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list 'clos/con: (list (list '(#f ()) (expenv '(((top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (f3) (-> (let ((_ (app f3 (app #t)))) (app f3 (app #f))) <-))
 (expenv
  '((((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        ()
        ()
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top)))))
      app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
     ((bin
       let
       _
       (app f2 (app #f))
       ()
       ()
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #t)))
    (((bin
       let
       _
       (app f2 (app #f))
       ()
       ()
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #t))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((bin
       let
       _
       (app f1 (app #f))
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #t))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list 'clos/con: (list (list '(#t ()) (expenv '(((top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (f3) (-> (let ((_ (app f3 (app #t)))) (app f3 (app #f))) <-))
 (expenv
  '((((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        ()
        ()
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top)))))
      app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
     ((let-bod
       let
       ((_ (app f2 (app #t))))
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #f)))
    (((let-bod
       let
       ((_ (app f2 (app #t))))
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #f))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((bin
       let
       _
       (app f1 (app #f))
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #t))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list 'clos/con: (list (list '(#t ()) (expenv '(((top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (f3) (-> (let ((_ (app f3 (app #t)))) (app f3 (app #f))) <-))
 (expenv
  '((((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        ()
        ()
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top)))))
      app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
     ((bin
       let
       _
       (app f2 (app #f))
       ()
       ()
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #t)))
    (((bin
       let
       _
       (app f2 (app #f))
       ()
       ()
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #t))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((let-bod
       let
       ((_ (app f1 (app #t))))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #f))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list 'clos/con: (list (list '(#f ()) (expenv '(((top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (f3) (-> (let ((_ (app f3 (app #t)))) (app f3 (app #f))) <-))
 (expenv
  '((((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        ()
        ()
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top)))))
      app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
     ((let-bod
       let
       ((_ (app f2 (app #t))))
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #f)))
    (((let-bod
       let
       ((_ (app f2 (app #t))))
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #f))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((let-bod
       let
       ((_ (app f1 (app #t))))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #f))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list 'clos/con: (list (list '(#f ()) (expenv '(((top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (x1)
    (->
     (app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
     <-))
 (expenv
  '((((let-bod
       let
       ((_ (app f1 (app #t))))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #f))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list 'clos/con: (list (list '(#f ()) (expenv '(((top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (x2)
    (->
     (app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
     <-))
 (expenv
  '((((bin
       let
       _
       (app f2 (app #f))
       ()
       ()
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #t))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((bin
       let
       _
       (app f1 (app #f))
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #t))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list 'clos/con: (list (list '(#t ()) (expenv '(((top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (x2)
    (->
     (app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
     <-))
 (expenv
  '((((bin
       let
       _
       (app f2 (app #f))
       ()
       ()
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #t))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((let-bod
       let
       ((_ (app f1 (app #t))))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #f))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list 'clos/con: (list (list '(#f ()) (expenv '(((top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> f3 <-) (app #t))
 (expenv
  '((((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        ()
        ()
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top)))))
      app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
     ((bin
       let
       _
       (app f2 (app #f))
       ()
       ()
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #t)))
    (((bin
       let
       _
       (app f2 (app #f))
       ()
       ()
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #t))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((bin
       let
       _
       (app f1 (app #f))
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #t))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list
 'clos/con:
 (list
  (list
   '(λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))
   (expenv
    '(((let ((-> _ = (app f2 (app #t)) <-)) bod)
       (λ (x1)
         (->
          (app
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           (λ (x2)
             (app
              (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
              (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
          <-)))
      ((let ((-> _ = (app f1 (app #t)) <-)) bod) (top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> f3 <-) (app #t))
 (expenv
  '((((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        ()
        ()
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top)))))
      app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
     ((let-bod
       let
       ((_ (app f2 (app #t))))
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #f)))
    (((let-bod
       let
       ((_ (app f2 (app #t))))
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #f))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((bin
       let
       _
       (app f1 (app #f))
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #t))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list
 'clos/con:
 (list
  (list
   '(λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))
   (expenv
    '(((let (_) (-> (app f2 (app #f)) <-))
       (λ (x1)
         (->
          (app
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           (λ (x2)
             (app
              (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
              (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
          <-)))
      ((let ((-> _ = (app f1 (app #t)) <-)) bod) (top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> f3 <-) (app #t))
 (expenv
  '((((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        ()
        ()
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top)))))
      app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
     ((bin
       let
       _
       (app f2 (app #f))
       ()
       ()
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #t)))
    (((bin
       let
       _
       (app f2 (app #f))
       ()
       ()
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #t))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((let-bod
       let
       ((_ (app f1 (app #t))))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #f))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list
 'clos/con:
 (list
  (list
   '(λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))
   (expenv
    '(((let ((-> _ = (app f2 (app #t)) <-)) bod)
       (λ (x1)
         (->
          (app
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           (λ (x2)
             (app
              (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
              (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
          <-)))
      ((let (_) (-> (app f1 (app #f)) <-)) (top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> f3 <-) (app #t))
 (expenv
  '((((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        ()
        ()
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top)))))
      app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
     ((let-bod
       let
       ((_ (app f2 (app #t))))
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #f)))
    (((let-bod
       let
       ((_ (app f2 (app #t))))
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #f))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((let-bod
       let
       ((_ (app f1 (app #t))))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #f))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list
 'clos/con:
 (list
  (list
   '(λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))
   (expenv
    '(((let (_) (-> (app f2 (app #f)) <-))
       (λ (x1)
         (->
          (app
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           (λ (x2)
             (app
              (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
              (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
          <-)))
      ((let (_) (-> (app f1 (app #f)) <-)) (top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (x2)
    (->
     (app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
     <-))
 (expenv
  '((((let-bod
       let
       ((_ (app f2 (app #t))))
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #f))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((bin
       let
       _
       (app f1 (app #f))
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #t))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list 'clos/con: (list (list '(#t ()) (expenv '(((top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (x2)
    (->
     (app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
     <-))
 (expenv
  '((((let-bod
       let
       ((_ (app f2 (app #t))))
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #f))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((let-bod
       let
       ((_ (app f1 (app #t))))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #f))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list 'clos/con: (list (list '(#f ()) (expenv '(((top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   (-> (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f)))) <-)
   (λ (x2)
     (app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
 (expenv
  '((((let-bod
       let
       ((_ (app f1 (app #t))))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #f))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list
 'clos/con:
 (list
  (list
   '(λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
   (expenv '(((let (_) (-> (app f1 (app #f)) <-)) (top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> #t <-))
 (expenv
  '((((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        ()
        ()
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top)))))
      app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
     ((bin
       let
       _
       (app f2 (app #f))
       ()
       ()
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #t)))
    (((bin
       let
       _
       (app f2 (app #f))
       ()
       ()
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #t))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((bin
       let
       _
       (app f1 (app #f))
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #t))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list
 'clos/con:
 (list
  (list
   #t
   (expenv
    '(((λ (x2)
         (->
          (app
           (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
           (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
          <-))
       (let ((-> _ = (app f2 (app #t)) <-)) bod))
      ((let ((-> _ = (app f2 (app #t)) <-)) bod)
       (λ (x1)
         (->
          (app
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           (λ (x2)
             (app
              (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
              (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
          <-)))
      ((let ((-> _ = (app f1 (app #t)) <-)) bod) (top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> #t <-))
 (expenv
  '((((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        ()
        ()
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top)))))
      app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
     ((let-bod
       let
       ((_ (app f2 (app #t))))
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #f)))
    (((let-bod
       let
       ((_ (app f2 (app #t))))
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #f))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((bin
       let
       _
       (app f1 (app #f))
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #t))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list
 'clos/con:
 (list
  (list
   #t
   (expenv
    '(((λ (x2)
         (->
          (app
           (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
           (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
          <-))
       (let (_) (-> (app f2 (app #f)) <-)))
      ((let (_) (-> (app f2 (app #f)) <-))
       (λ (x1)
         (->
          (app
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           (λ (x2)
             (app
              (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
              (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
          <-)))
      ((let ((-> _ = (app f1 (app #t)) <-)) bod) (top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> #t <-))
 (expenv
  '((((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        ()
        ()
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top)))))
      app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
     ((bin
       let
       _
       (app f2 (app #f))
       ()
       ()
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #t)))
    (((bin
       let
       _
       (app f2 (app #f))
       ()
       ()
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #t))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((let-bod
       let
       ((_ (app f1 (app #t))))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #f))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list
 'clos/con:
 (list
  (list
   #t
   (expenv
    '(((λ (x2)
         (->
          (app
           (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
           (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
          <-))
       (let ((-> _ = (app f2 (app #t)) <-)) bod))
      ((let ((-> _ = (app f2 (app #t)) <-)) bod)
       (λ (x1)
         (->
          (app
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           (λ (x2)
             (app
              (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
              (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
          <-)))
      ((let (_) (-> (app f1 (app #f)) <-)) (top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> #t <-))
 (expenv
  '((((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        ()
        ()
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top)))))
      app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
     ((let-bod
       let
       ((_ (app f2 (app #t))))
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #f)))
    (((let-bod
       let
       ((_ (app f2 (app #t))))
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #f))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((let-bod
       let
       ((_ (app f1 (app #t))))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #f))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list
 'clos/con:
 (list
  (list
   #t
   (expenv
    '(((λ (x2)
         (->
          (app
           (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
           (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
          <-))
       (let (_) (-> (app f2 (app #f)) <-)))
      ((let (_) (-> (app f2 (app #f)) <-))
       (λ (x1)
         (->
          (app
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           (λ (x2)
             (app
              (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
              (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
          <-)))
      ((let (_) (-> (app f1 (app #f)) <-)) (top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   (-> (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f)))) <-)
   (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
 (expenv
  '((((bin
       let
       _
       (app f2 (app #f))
       ()
       ()
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #t))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((bin
       let
       _
       (app f1 (app #f))
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #t))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list
 'clos/con:
 (list
  (list
   '(λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
   (expenv
    '(((let ((-> _ = (app f2 (app #t)) <-)) bod)
       (λ (x1)
         (->
          (app
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           (λ (x2)
             (app
              (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
              (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
          <-)))
      ((let ((-> _ = (app f1 (app #t)) <-)) bod) (top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   (-> (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f)))) <-)
   (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
 (expenv
  '((((bin
       let
       _
       (app f2 (app #f))
       ()
       ()
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #t))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((let-bod
       let
       ((_ (app f1 (app #t))))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #f))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list
 'clos/con:
 (list
  (list
   '(λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
   (expenv
    '(((let ((-> _ = (app f2 (app #t)) <-)) bod)
       (λ (x1)
         (->
          (app
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           (λ (x2)
             (app
              (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
              (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
          <-)))
      ((let (_) (-> (app f1 (app #f)) <-)) (top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app z x1 (-> x2 <-) x3)
 (expenv
  '((((bod
       (x3)
       (ran
        (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
        ()
        ()
        (bod
         (x2)
         (ran
          (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
          ()
          ()
          (bod
           (x1)
           (ran
            (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
            ()
            ()
            (top)))))))
      app
      (λ (z) (app z x1 x2 x3))
      (λ (y1 y2 y3) y1))
     ((bin
       let
       _
       (app f3 (app #f))
       ()
       ()
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #t)))
    (((bin
       let
       _
       (app f3 (app #f))
       ()
       ()
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #t))
     ((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        ()
        ()
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top)))))
      app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))
    (((bin
       let
       _
       (app f2 (app #f))
       ()
       ()
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #t))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((bin
       let
       _
       (app f1 (app #f))
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #t))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (expenv
    '(((λ (x1)
         (->
          (app
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           (λ (x2)
             (app
              (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
              (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
          <-))
       (let ((-> _ = (app f1 (app #t)) <-)) bod))
      ((let ((-> _ = (app f1 (app #t)) <-)) bod) (top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app z x1 (-> x2 <-) x3)
 (expenv
  '((((bod
       (x3)
       (ran
        (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
        ()
        ()
        (bod
         (x2)
         (ran
          (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
          ()
          ()
          (bod
           (x1)
           (ran
            (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
            ()
            ()
            (top)))))))
      app
      (λ (z) (app z x1 x2 x3))
      (λ (y1 y2 y3) y1))
     ((let-bod
       let
       ((_ (app f3 (app #t))))
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #f)))
    (((let-bod
       let
       ((_ (app f3 (app #t))))
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #f))
     ((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        ()
        ()
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top)))))
      app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))
    (((bin
       let
       _
       (app f2 (app #f))
       ()
       ()
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #t))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((bin
       let
       _
       (app f1 (app #f))
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #t))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (expenv
    '(((λ (x1)
         (->
          (app
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           (λ (x2)
             (app
              (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
              (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
          <-))
       (let ((-> _ = (app f1 (app #t)) <-)) bod))
      ((let ((-> _ = (app f1 (app #t)) <-)) bod) (top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app z x1 (-> x2 <-) x3)
 (expenv
  '((((bod
       (x3)
       (ran
        (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
        ()
        ()
        (bod
         (x2)
         (ran
          (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
          ()
          ()
          (bod
           (x1)
           (ran
            (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
            ()
            ()
            (top)))))))
      app
      (λ (z) (app z x1 x2 x3))
      (λ (y1 y2 y3) y1))
     ((bin
       let
       _
       (app f3 (app #f))
       ()
       ()
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #t)))
    (((bin
       let
       _
       (app f3 (app #f))
       ()
       ()
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #t))
     ((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        ()
        ()
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top)))))
      app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))
    (((let-bod
       let
       ((_ (app f2 (app #t))))
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #f))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((bin
       let
       _
       (app f1 (app #f))
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #t))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (expenv
    '(((λ (x1)
         (->
          (app
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           (λ (x2)
             (app
              (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
              (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
          <-))
       (let ((-> _ = (app f1 (app #t)) <-)) bod))
      ((let ((-> _ = (app f1 (app #t)) <-)) bod) (top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app z x1 (-> x2 <-) x3)
 (expenv
  '((((bod
       (x3)
       (ran
        (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
        ()
        ()
        (bod
         (x2)
         (ran
          (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
          ()
          ()
          (bod
           (x1)
           (ran
            (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
            ()
            ()
            (top)))))))
      app
      (λ (z) (app z x1 x2 x3))
      (λ (y1 y2 y3) y1))
     ((let-bod
       let
       ((_ (app f3 (app #t))))
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #f)))
    (((let-bod
       let
       ((_ (app f3 (app #t))))
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #f))
     ((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        ()
        ()
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top)))))
      app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))
    (((let-bod
       let
       ((_ (app f2 (app #t))))
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #f))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((bin
       let
       _
       (app f1 (app #f))
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #t))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (expenv
    '(((λ (x1)
         (->
          (app
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           (λ (x2)
             (app
              (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
              (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
          <-))
       (let ((-> _ = (app f1 (app #t)) <-)) bod))
      ((let ((-> _ = (app f1 (app #t)) <-)) bod) (top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app z x1 (-> x2 <-) x3)
 (expenv
  '((((bod
       (x3)
       (ran
        (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
        ()
        ()
        (bod
         (x2)
         (ran
          (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
          ()
          ()
          (bod
           (x1)
           (ran
            (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
            ()
            ()
            (top)))))))
      app
      (λ (z) (app z x1 x2 x3))
      (λ (y1 y2 y3) y1))
     ((bin
       let
       _
       (app f3 (app #f))
       ()
       ()
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #t)))
    (((bin
       let
       _
       (app f3 (app #f))
       ()
       ()
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #t))
     ((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        ()
        ()
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top)))))
      app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))
    (((bin
       let
       _
       (app f2 (app #f))
       ()
       ()
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #t))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((let-bod
       let
       ((_ (app f1 (app #t))))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #f))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (expenv
    '(((λ (x1)
         (->
          (app
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           (λ (x2)
             (app
              (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
              (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
          <-))
       (let (_) (-> (app f1 (app #f)) <-)))
      ((let (_) (-> (app f1 (app #f)) <-)) (top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app z x1 (-> x2 <-) x3)
 (expenv
  '((((bod
       (x3)
       (ran
        (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
        ()
        ()
        (bod
         (x2)
         (ran
          (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
          ()
          ()
          (bod
           (x1)
           (ran
            (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
            ()
            ()
            (top)))))))
      app
      (λ (z) (app z x1 x2 x3))
      (λ (y1 y2 y3) y1))
     ((let-bod
       let
       ((_ (app f3 (app #t))))
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #f)))
    (((let-bod
       let
       ((_ (app f3 (app #t))))
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #f))
     ((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        ()
        ()
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top)))))
      app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))
    (((bin
       let
       _
       (app f2 (app #f))
       ()
       ()
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #t))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((let-bod
       let
       ((_ (app f1 (app #t))))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #f))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (expenv
    '(((λ (x1)
         (->
          (app
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           (λ (x2)
             (app
              (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
              (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
          <-))
       (let (_) (-> (app f1 (app #f)) <-)))
      ((let (_) (-> (app f1 (app #f)) <-)) (top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app z x1 (-> x2 <-) x3)
 (expenv
  '((((bod
       (x3)
       (ran
        (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
        ()
        ()
        (bod
         (x2)
         (ran
          (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
          ()
          ()
          (bod
           (x1)
           (ran
            (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
            ()
            ()
            (top)))))))
      app
      (λ (z) (app z x1 x2 x3))
      (λ (y1 y2 y3) y1))
     ((bin
       let
       _
       (app f3 (app #f))
       ()
       ()
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #t)))
    (((bin
       let
       _
       (app f3 (app #f))
       ()
       ()
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #t))
     ((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        ()
        ()
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top)))))
      app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))
    (((let-bod
       let
       ((_ (app f2 (app #t))))
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #f))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((let-bod
       let
       ((_ (app f1 (app #t))))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #f))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (expenv
    '(((λ (x1)
         (->
          (app
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           (λ (x2)
             (app
              (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
              (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
          <-))
       (let (_) (-> (app f1 (app #f)) <-)))
      ((let (_) (-> (app f1 (app #f)) <-)) (top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app z x1 (-> x2 <-) x3)
 (expenv
  '((((bod
       (x3)
       (ran
        (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
        ()
        ()
        (bod
         (x2)
         (ran
          (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
          ()
          ()
          (bod
           (x1)
           (ran
            (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
            ()
            ()
            (top)))))))
      app
      (λ (z) (app z x1 x2 x3))
      (λ (y1 y2 y3) y1))
     ((let-bod
       let
       ((_ (app f3 (app #t))))
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #f)))
    (((let-bod
       let
       ((_ (app f3 (app #t))))
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #f))
     ((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        ()
        ()
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top)))))
      app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))
    (((let-bod
       let
       ((_ (app f2 (app #t))))
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #f))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((let-bod
       let
       ((_ (app f1 (app #t))))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #f))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (expenv
    '(((λ (x1)
         (->
          (app
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           (λ (x2)
             (app
              (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
              (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
          <-))
       (let (_) (-> (app f1 (app #f)) <-)))
      ((let (_) (-> (app f1 (app #f)) <-)) (top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
   (->
    (λ (x2)
      (app
       (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
       (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))
    <-))
 (expenv
  '((((let-bod
       let
       ((_ (app f1 (app #t))))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #f))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list
 'clos/con:
 (list
  (list
   '(λ (x2)
      (app
       (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
       (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))
   (expenv '(((let (_) (-> (app f1 (app #f)) <-)) (top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (λ (z) (app z x1 x2 x3)) (-> (λ (y1 y2 y3) y1) <-))
 (expenv
  '((((let-bod
       let
       ((_ (app f3 (app #t))))
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #f))
     ((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        ()
        ()
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top)))))
      app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))
    (((bin
       let
       _
       (app f2 (app #f))
       ()
       ()
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #t))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((bin
       let
       _
       (app f1 (app #f))
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #t))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list
 'clos/con:
 (list
  (list
   '(λ (y1 y2 y3) y1)
   (expenv
    '(((let (_) (-> (app f3 (app #f)) <-))
       (λ (x2)
         (->
          (app
           (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
           (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
          <-)))
      ((let ((-> _ = (app f2 (app #t)) <-)) bod)
       (λ (x1)
         (->
          (app
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           (λ (x2)
             (app
              (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
              (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
          <-)))
      ((let ((-> _ = (app f1 (app #t)) <-)) bod) (top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (λ (z) (app z x1 x2 x3)) (-> (λ (y1 y2 y3) y1) <-))
 (expenv
  '((((let-bod
       let
       ((_ (app f3 (app #t))))
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #f))
     ((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        ()
        ()
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top)))))
      app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))
    (((let-bod
       let
       ((_ (app f2 (app #t))))
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #f))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((bin
       let
       _
       (app f1 (app #f))
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #t))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list
 'clos/con:
 (list
  (list
   '(λ (y1 y2 y3) y1)
   (expenv
    '(((let (_) (-> (app f3 (app #f)) <-))
       (λ (x2)
         (->
          (app
           (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
           (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
          <-)))
      ((let (_) (-> (app f2 (app #f)) <-))
       (λ (x1)
         (->
          (app
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           (λ (x2)
             (app
              (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
              (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
          <-)))
      ((let ((-> _ = (app f1 (app #t)) <-)) bod) (top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (λ (z) (app z x1 x2 x3)) (-> (λ (y1 y2 y3) y1) <-))
 (expenv
  '((((let-bod
       let
       ((_ (app f3 (app #t))))
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #f))
     ((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        ()
        ()
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top)))))
      app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))
    (((bin
       let
       _
       (app f2 (app #f))
       ()
       ()
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #t))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((let-bod
       let
       ((_ (app f1 (app #t))))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #f))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list
 'clos/con:
 (list
  (list
   '(λ (y1 y2 y3) y1)
   (expenv
    '(((let (_) (-> (app f3 (app #f)) <-))
       (λ (x2)
         (->
          (app
           (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
           (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
          <-)))
      ((let ((-> _ = (app f2 (app #t)) <-)) bod)
       (λ (x1)
         (->
          (app
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           (λ (x2)
             (app
              (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
              (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
          <-)))
      ((let (_) (-> (app f1 (app #f)) <-)) (top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (λ (z) (app z x1 x2 x3)) (-> (λ (y1 y2 y3) y1) <-))
 (expenv
  '((((let-bod
       let
       ((_ (app f3 (app #t))))
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #f))
     ((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        ()
        ()
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top)))))
      app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))
    (((let-bod
       let
       ((_ (app f2 (app #t))))
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #f))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((let-bod
       let
       ((_ (app f1 (app #t))))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #f))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list
 'clos/con:
 (list
  (list
   '(λ (y1 y2 y3) y1)
   (expenv
    '(((let (_) (-> (app f3 (app #f)) <-))
       (λ (x2)
         (->
          (app
           (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
           (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
          <-)))
      ((let (_) (-> (app f2 (app #f)) <-))
       (λ (x1)
         (->
          (app
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           (λ (x2)
             (app
              (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
              (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
          <-)))
      ((let (_) (-> (app f1 (app #f)) <-)) (top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> #t <-))
 (expenv
  '((((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
     ((bin
       let
       _
       (app f1 (app #f))
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #t)))
    (((bin
       let
       _
       (app f1 (app #f))
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #t))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list
 'clos/con:
 (list
  (list
   #t
   (expenv
    '(((λ (x1)
         (->
          (app
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           (λ (x2)
             (app
              (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
              (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
          <-))
       (let ((-> _ = (app f1 (app #t)) <-)) bod))
      ((let ((-> _ = (app f1 (app #t)) <-)) bod) (top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> #t <-))
 (expenv
  '((((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
     ((let-bod
       let
       ((_ (app f1 (app #t))))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #f)))
    (((let-bod
       let
       ((_ (app f1 (app #t))))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #f))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list
 'clos/con:
 (list
  (list
   #t
   (expenv
    '(((λ (x1)
         (->
          (app
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           (λ (x2)
             (app
              (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
              (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
          <-))
       (let (_) (-> (app f1 (app #f)) <-)))
      ((let (_) (-> (app f1 (app #f)) <-)) (top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (x3) (-> (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)) <-))
 (expenv
  '((((bin
       let
       _
       (app f3 (app #f))
       ()
       ()
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #t))
     ((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        ()
        ()
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top)))))
      app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))
    (((bin
       let
       _
       (app f2 (app #f))
       ()
       ()
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #t))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((bin
       let
       _
       (app f1 (app #f))
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #t))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list 'clos/con: (list (list '(#t ()) (expenv '(((top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (x3) (-> (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)) <-))
 (expenv
  '((((bin
       let
       _
       (app f3 (app #f))
       ()
       ()
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #t))
     ((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        ()
        ()
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top)))))
      app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))
    (((let-bod
       let
       ((_ (app f2 (app #t))))
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #f))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((bin
       let
       _
       (app f1 (app #f))
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #t))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list 'clos/con: (list (list '(#t ()) (expenv '(((top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (x3) (-> (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)) <-))
 (expenv
  '((((bin
       let
       _
       (app f3 (app #f))
       ()
       ()
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #t))
     ((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        ()
        ()
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top)))))
      app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))
    (((bin
       let
       _
       (app f2 (app #f))
       ()
       ()
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #t))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((let-bod
       let
       ((_ (app f1 (app #t))))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #f))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list 'clos/con: (list (list '(#f ()) (expenv '(((top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (x3) (-> (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)) <-))
 (expenv
  '((((bin
       let
       _
       (app f3 (app #f))
       ()
       ()
       (bod
        (f3)
        (rat
         ((λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
         (bod
          (x2)
          (ran
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           ()
           ()
           (bod
            (x1)
            (ran
             (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
             ()
             ()
             (top))))))))
      app
      f3
      (app #t))
     ((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        ()
        ()
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top)))))
      app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))
    (((let-bod
       let
       ((_ (app f2 (app #t))))
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #f))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((let-bod
       let
       ((_ (app f1 (app #t))))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #f))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list 'clos/con: (list (list '(#f ()) (expenv '(((top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (f1) (-> (let ((_ (app f1 (app #t)))) (app f1 (app #f))) <-))
 (expenv
  '((((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list 'clos/con: (list (list '(#f ()) (expenv '(((top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> #t <-))
 (expenv
  '((((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list 'clos/con: (list (list #t (expenv '(((top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> #f <-))
 (expenv
  '((((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        ()
        ()
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top)))))
      app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
     ((bin
       let
       _
       (app f2 (app #f))
       ()
       ()
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #t)))
    (((bin
       let
       _
       (app f2 (app #f))
       ()
       ()
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #t))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((bin
       let
       _
       (app f1 (app #f))
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #t))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list
 'clos/con:
 (list
  (list
   #f
   (expenv
    '(((λ (x2)
         (->
          (app
           (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
           (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
          <-))
       (let ((-> _ = (app f2 (app #t)) <-)) bod))
      ((let ((-> _ = (app f2 (app #t)) <-)) bod)
       (λ (x1)
         (->
          (app
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           (λ (x2)
             (app
              (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
              (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
          <-)))
      ((let ((-> _ = (app f1 (app #t)) <-)) bod) (top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> #f <-))
 (expenv
  '((((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        ()
        ()
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top)))))
      app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
     ((let-bod
       let
       ((_ (app f2 (app #t))))
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #f)))
    (((let-bod
       let
       ((_ (app f2 (app #t))))
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #f))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((bin
       let
       _
       (app f1 (app #f))
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #t))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list
 'clos/con:
 (list
  (list
   #f
   (expenv
    '(((λ (x2)
         (->
          (app
           (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
           (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
          <-))
       (let (_) (-> (app f2 (app #f)) <-)))
      ((let (_) (-> (app f2 (app #f)) <-))
       (λ (x1)
         (->
          (app
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           (λ (x2)
             (app
              (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
              (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
          <-)))
      ((let ((-> _ = (app f1 (app #t)) <-)) bod) (top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> #f <-))
 (expenv
  '((((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        ()
        ()
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top)))))
      app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
     ((bin
       let
       _
       (app f2 (app #f))
       ()
       ()
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #t)))
    (((bin
       let
       _
       (app f2 (app #f))
       ()
       ()
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #t))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((let-bod
       let
       ((_ (app f1 (app #t))))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #f))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list
 'clos/con:
 (list
  (list
   #f
   (expenv
    '(((λ (x2)
         (->
          (app
           (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
           (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
          <-))
       (let ((-> _ = (app f2 (app #t)) <-)) bod))
      ((let ((-> _ = (app f2 (app #t)) <-)) bod)
       (λ (x1)
         (->
          (app
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           (λ (x2)
             (app
              (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
              (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
          <-)))
      ((let (_) (-> (app f1 (app #f)) <-)) (top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> #f <-))
 (expenv
  '((((bod
       (x2)
       (ran
        (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
        ()
        ()
        (bod
         (x1)
         (ran
          (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
          ()
          ()
          (top)))))
      app
      (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
      (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
     ((let-bod
       let
       ((_ (app f2 (app #t))))
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #f)))
    (((let-bod
       let
       ((_ (app f2 (app #t))))
       (bod
        (f2)
        (rat
         ((λ (x2)
            (app
             (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
             (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
         (bod
          (x1)
          (ran
           (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
           ()
           ()
           (top))))))
      app
      f2
      (app #f))
     ((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    (((let-bod
       let
       ((_ (app f1 (app #t))))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #f))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list
 'clos/con:
 (list
  (list
   #f
   (expenv
    '(((λ (x2)
         (->
          (app
           (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
           (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))
          <-))
       (let (_) (-> (app f2 (app #f)) <-)))
      ((let (_) (-> (app f2 (app #f)) <-))
       (λ (x1)
         (->
          (app
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           (λ (x2)
             (app
              (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
              (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
          <-)))
      ((let (_) (-> (app f1 (app #f)) <-)) (top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> #f <-))
 (expenv
  '((((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
     ((bin
       let
       _
       (app f1 (app #f))
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #t)))
    (((bin
       let
       _
       (app f1 (app #f))
       ()
       ()
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #t))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list
 'clos/con:
 (list
  (list
   #f
   (expenv
    '(((λ (x1)
         (->
          (app
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           (λ (x2)
             (app
              (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
              (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
          <-))
       (let ((-> _ = (app f1 (app #t)) <-)) bod))
      ((let ((-> _ = (app f1 (app #t)) <-)) bod) (top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> #f <-))
 (expenv
  '((((bod
       (x1)
       (ran
        (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
        ()
        ()
        (top)))
      app
      (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
      (λ (x2)
        (app
         (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
         (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
     ((let-bod
       let
       ((_ (app f1 (app #t))))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #f)))
    (((let-bod
       let
       ((_ (app f1 (app #t))))
       (bod
        (f1)
        (rat
         ((λ (x1)
            (app
             (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
             (λ (x2)
               (app
                (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
                (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))
         (top))))
      app
      f1
      (app #f))
     ((top)
      app
      (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
      (λ (x1)
        (app
         (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
         (λ (x2)
           (app
            (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
            (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))))))))
(list
 'clos/con:
 (list
  (list
   #f
   (expenv
    '(((λ (x1)
         (->
          (app
           (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
           (λ (x2)
             (app
              (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
              (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1))))))
          <-))
       (let (_) (-> (app f1 (app #f)) <-)))
      ((let (_) (-> (app f1 (app #f)) <-)) (top)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   (λ (f1) (let ((_ (app f1 (app #t)))) (app f1 (app #f))))
   (->
    (λ (x1)
      (app
       (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
       (λ (x2)
         (app
          (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
          (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
    <-))
 (expenv '()))
(list
 'clos/con:
 (list
  (list
   '(λ (x1)
      (app
       (λ (f2) (let ((_ (app f2 (app #t)))) (app f2 (app #f))))
       (λ (x2)
         (app
          (λ (f3) (let ((_ (app f3 (app #t)))) (app f3 (app #f))))
          (λ (x3) (app (λ (z) (app z x1 x2 x3)) (λ (y1 y2 y3) y1)))))))
   (expenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
