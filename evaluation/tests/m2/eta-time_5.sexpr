'(clean-cache
  eta
  2
  5
  13
  letrec*
  "\"'(eval ((top) letrec* (do-something ... id) ...) (env ()))\""
  22
  12
  7
  3
  12
  7
  19
  1
  1
  12
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  eta
  2
  5
  13
  let
  "\"'(eval (λ (y) (-> (let (_) ...) <-)) (env ((□? (y)))))\""
  10
  6
  3
  1
  4
  3
  7
  1
  2/3
  4
  #f
  16/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  eta
  2
  5
  13
  app
  "\"'(eval\n  (let (... () (_ (-> (app do-something) <-)) () ...) ...)\n  (env ((□? (y)))))\""
  7
  4
  0
  3
  1
  0
  1
  1
  1/4
  2
  #f
  9/2
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  eta
  2
  5
  13
  ref-or-constructor
  "\"'(eval (let (_) (-> y <-)) (env ((□? (y)))))\""
  7
  3
  3
  1
  2
  3
  5
  1
  2/3
  2
  #f
  16/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  eta
  2
  5
  13
  let
  "\"'(eval (letrec* (do-something ... id) (-> (let (_) ...) <-)) (env ()))\""
  21
  11
  7
  3
  11
  7
  18
  1
  1
  11
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  eta
  2
  5
  13
  app
  "\"'(eval\n  (let (... () (_ (-> (app (app id (λ (a) ...)) (app #t)) <-)) () ...) ...)\n  (env ()))\""
  20
  10
  7
  3
  10
  7
  17
  1
  1
  10
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  eta
  2
  5
  13
  app
  "\"'(eval (app (app id (λ (a) ...)) (-> (app #t) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  eta
  2
  5
  13
  app
  "\"'(eval (app (-> (app id (λ (a) ...)) <-) (app #t)) (env ()))\""
  10
  6
  3
  1
  6
  3
  9
  1
  1
  6
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  eta
  2
  5
  13
  ref-or-constructor
  "\"'(eval (λ (a) (-> a <-)) (env ((□? (a)))))\""
  14
  5
  7
  2
  4
  7
  11
  1
  4/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  eta
  2
  5
  13
  app
  "\"'(eval (let (_) (-> (app (app id (λ (b) ...)) (app #f)) <-)) (env ()))\""
  20
  10
  7
  3
  10
  7
  17
  1
  1
  10
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  eta
  2
  5
  13
  app
  "\"'(eval (app (app id (λ (b) ...)) (-> (app #f) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  eta
  2
  5
  13
  app
  "\"'(eval (app (-> (app id (λ (b) ...)) <-) (app #f)) (env ()))\""
  10
  6
  3
  1
  6
  3
  9
  1
  1
  6
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  eta
  2
  5
  13
  ref-or-constructor
  "\"'(eval (λ (b) (-> b <-)) (env ((□? (b)))))\""
  14
  5
  7
  2
  4
  7
  11
  1
  4/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  eta
  2
  5
  13
  app
  "\"'(eval (let (_) (-> (app (app id (λ (b) ...)) (app #f)) <-)) (env ()))\""
  20
  10
  7
  3
  10
  7
  17
  1
  1
  10
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  eta
  2
  5
  13
  ref-or-constructor
  "\"'(eval (let (_) (-> y <-)) (env ((□? (y)))))\""
  21
  11
  7
  3
  10
  7
  17
  1
  19/20
  11
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  eta
  2
  5
  13
  ref-or-constructor
  "\"'(eval (λ (b) (-> b <-)) (env ((□? (b)))))\""
  23
  12
  7
  4
  10
  7
  17
  1
  9/10
  12
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  eta
  2
  5
  13
  app
  "\"'(eval (app (app id (λ (b) ...)) (-> (app #f) <-)) (env ()))\""
  23
  12
  7
  4
  10
  7
  17
  1
  9/10
  12
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  eta
  2
  5
  13
  let
  "\"'(eval (λ (y) (-> (let (_) ...) <-)) (env ((□? (y)))))\""
  24
  13
  7
  4
  10
  7
  17
  1
  17/20
  13
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  eta
  2
  5
  13
  let
  "\"'(eval (letrec* (do-something ... id) (-> (let (_) ...) <-)) (env ()))\""
  25
  14
  7
  4
  11
  7
  18
  1
  19/22
  14
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  eta
  2
  5
  13
  app
  "\"'(eval (app (-> (app id (λ (b) ...)) <-) (app #f)) (env ()))\""
  25
  14
  7
  4
  11
  7
  18
  1
  19/22
  14
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  eta
  2
  5
  13
  ref-or-constructor
  "\"'(eval (λ (a) (-> a <-)) (env ((□? (a)))))\""
  36
  20
  11
  5
  16
  11
  27
  1
  41/48
  18
  #t
  51/10
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  eta
  2
  5
  13
  app
  "\"'(eval\n  (let (... () (_ (-> (app (app id (λ (a) ...)) (app #t)) <-)) () ...) ...)\n  (env ()))\""
  41
  24
  11
  6
  20
  11
  31
  1
  49/54
  22
  #t
  61/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  eta
  2
  5
  13
  letrec*
  "\"'(eval ((top) letrec* (do-something ... id) ...) (env ()))\""
  42
  25
  11
  6
  21
  11
  32
  1
  52/57
  23
  #t
  127/25
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  eta
  2
  5
  13
  app
  "\"'(eval (app (-> (app id (λ (a) ...)) <-) (app #t)) (env ()))\""
  42
  25
  11
  6
  21
  11
  32
  1
  52/57
  23
  #t
  127/25
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  eta
  2
  5
  13
  app
  "\"'(eval (app (app id (λ (a) ...)) (-> (app #t) <-)) (env ()))\""
  42
  25
  11
  6
  21
  11
  32
  1
  52/57
  23
  #t
  127/25
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  eta
  2
  5
  13
  app
  "\"'(eval\n  (let (... () (_ (-> (app do-something) <-)) () ...) ...)\n  (env ((□? (y)))))\""
  49
  31
  11
  7
  26
  11
  37
  1
  61/69
  26
  #f
  154/31
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  eta
  2
  5
  13
  ref-or-constructor
  "\"'(eval (λ (b) (-> b <-)) (env ((□? (b)))))\""
  14
  5
  7
  2
  4
  7
  11
  1
  4/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  eta
  2
  5
  13
  let
  "\"'(eval (λ (y) (-> (let (_) ...) <-)) (env ((□? (y)))))\""
  17
  8
  7
  2
  6
  7
  13
  1
  3/4
  8
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  eta
  2
  5
  13
  app
  "\"'(eval (app (app id (λ (b) ...)) (-> (app #f) <-)) (env ()))\""
  17
  8
  7
  2
  6
  7
  13
  1
  3/4
  8
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  eta
  2
  5
  13
  ref-or-constructor
  "\"'(eval (λ (a) (-> a <-)) (env ((□? (a)))))\""
  28
  14
  11
  3
  11
  11
  22
  1
  10/13
  13
  #t
  71/14
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  eta
  2
  5
  13
  let
  "\"'(eval (letrec* (do-something ... id) (-> (let (_) ...) <-)) (env ()))\""
  35
  19
  11
  5
  16
  11
  27
  1
  7/8
  18
  #t
  96/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  eta
  2
  5
  13
  app
  "\"'(eval (let (_) (-> (app (app id (λ (b) ...)) (app #f)) <-)) (env ()))\""
  35
  19
  11
  5
  16
  11
  27
  1
  7/8
  18
  #t
  96/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  eta
  2
  5
  13
  ref-or-constructor
  "\"'(eval (let (_) (-> y <-)) (env ((□? (y)))))\""
  36
  20
  11
  5
  16
  11
  27
  1
  41/48
  18
  #f
  51/10
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  eta
  2
  5
  13
  app
  "\"'(eval (app (-> (app id (λ (b) ...)) <-) (app #f)) (env ()))\""
  36
  20
  11
  5
  16
  11
  27
  1
  41/48
  18
  #t
  51/10
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  eta
  2
  5
  13
  app
  "\"'(eval\n  (let (... () (_ (-> (app do-something) <-)) () ...) ...)\n  (env ((□? (y)))))\""
  43
  26
  11
  6
  21
  11
  32
  1
  5/6
  21
  #f
  129/26
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  eta
  2
  5
  13
  letrec*
  "\"'(eval ((top) letrec* (do-something ... id) ...) (env ()))\""
  44
  27
  11
  6
  22
  11
  33
  1
  53/63
  22
  #t
  134/27
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  eta
  2
  5
  13
  app
  "\"'(eval (app (app id (λ (a) ...)) (-> (app #t) <-)) (env ()))\""
  44
  27
  11
  6
  22
  11
  33
  1
  53/63
  22
  #t
  134/27
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  eta
  2
  5
  13
  app
  "\"'(eval (app (-> (app id (λ (a) ...)) <-) (app #t)) (env ()))\""
  46
  29
  11
  6
  24
  11
  35
  1
  113/132
  24
  #t
  144/29
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  eta
  2
  5
  13
  app
  "\"'(eval\n  (let (... () (_ (-> (app (app id (λ (a) ...)) (app #t)) <-)) () ...) ...)\n  (env ()))\""
  49
  31
  11
  7
  26
  11
  37
  1
  61/69
  26
  #t
  154/31
  ((0 0 0) (0 0 0) (0 0 0)))
