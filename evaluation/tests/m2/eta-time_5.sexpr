'(clean-cache
  eta
  2
  5
  13
  letrec*
  "\"'(eval ((top) letrec* (do-something ... id) ...) (env ()))\""
  22
  12
  7
  3
  12
  7
  19
  1
  1
  12
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  eta
  2
  5
  13
  let
  "\"'(eval (λ (y) (-> (let (_) ...) <-)) (env ((□? (y)))))\""
  10
  6
  3
  1
  4
  3
  7
  1
  2/3
  4
  #f
  4/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  eta
  2
  5
  13
  app
  "\"'(eval\n  (let (... () (_ (-> (app do-something) <-)) () ...) ...)\n  (env ((□? (y)))))\""
  7
  4
  0
  3
  1
  0
  1
  1
  1/4
  4
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  eta
  2
  5
  13
  ref-or-constructor
  "\"'(eval (let (_) (-> y <-)) (env ((□? (y)))))\""
  7
  3
  3
  1
  2
  3
  5
  1
  2/3
  2
  #f
  4/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  eta
  2
  5
  13
  let
  "\"'(eval (letrec* (do-something ... id) (-> (let (_) ...) <-)) (env ()))\""
  21
  11
  7
  3
  11
  7
  18
  1
  1
  11
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  eta
  2
  5
  13
  app
  "\"'(eval\n  (let (... () (_ (-> (app (app id (λ (a) ...)) (app #t)) <-)) () ...) ...)\n  (env ()))\""
  20
  10
  7
  3
  10
  7
  17
  1
  1
  10
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  eta
  2
  5
  13
  app
  "\"'(eval (app (app id (λ (a) ...)) (-> (app #t) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  eta
  2
  5
  13
  app
  "\"'(eval (app (-> (app id (λ (a) ...)) <-) (app #t)) (env ()))\""
  10
  6
  3
  1
  6
  3
  9
  1
  1
  6
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  eta
  2
  5
  13
  ref-or-constructor
  "\"'(eval (λ (a) (-> a <-)) (env ((□? (a)))))\""
  14
  5
  7
  2
  4
  7
  11
  1
  4/5
  5
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  eta
  2
  5
  13
  app
  "\"'(eval (let (_) (-> (app (app id (λ (b) ...)) (app #f)) <-)) (env ()))\""
  20
  10
  7
  3
  10
  7
  17
  1
  1
  10
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  eta
  2
  5
  13
  app
  "\"'(eval (app (app id (λ (b) ...)) (-> (app #f) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  eta
  2
  5
  13
  app
  "\"'(eval (app (-> (app id (λ (b) ...)) <-) (app #f)) (env ()))\""
  10
  6
  3
  1
  6
  3
  9
  1
  1
  6
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  eta
  2
  5
  13
  ref-or-constructor
  "\"'(eval (λ (b) (-> b <-)) (env ((□? (b)))))\""
  14
  5
  7
  2
  4
  7
  11
  1
  4/5
  5
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  eta
  2
  5
  13
  app
  "\"'(eval (app (-> (app id (λ (b) ...)) <-) (app #f)) (env ()))\""
  10
  6
  3
  1
  6
  3
  9
  1
  1
  6
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  eta
  2
  5
  13
  ref-or-constructor
  "\"'(eval (λ (b) (-> b <-)) (env ((□? (b)))))\""
  19
  9
  7
  3
  8
  7
  15
  1
  8/9
  9
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  eta
  2
  5
  13
  ref-or-constructor
  "\"'(eval (λ (a) (-> a <-)) (env ((□? (a)))))\""
  28
  13
  11
  4
  11
  11
  22
  1
  11/13
  13
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  eta
  2
  5
  13
  app
  "\"'(eval\n  (let (... () (_ (-> (app (app id (λ (a) ...)) (app #t)) <-)) () ...) ...)\n  (env ()))\""
  35
  19
  11
  5
  17
  11
  28
  1
  29/32
  19
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  eta
  2
  5
  13
  app
  "\"'(eval\n  (let (... () (_ (-> (app do-something) <-)) () ...) ...)\n  (env ((□? (y)))))\""
  42
  25
  11
  6
  22
  11
  33
  1
  7/8
  25
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  eta
  2
  5
  13
  let
  "\"'(eval (λ (y) (-> (let (_) ...) <-)) (env ((□? (y)))))\""
  43
  26
  11
  6
  22
  11
  33
  1
  103/120
  25
  #f
  27/26
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  eta
  2
  5
  13
  app
  "\"'(eval (app (app id (λ (b) ...)) (-> (app #f) <-)) (env ()))\""
  43
  26
  11
  6
  22
  11
  33
  1
  103/120
  25
  #t
  27/26
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  eta
  2
  5
  13
  let
  "\"'(eval (letrec* (do-something ... id) (-> (let (_) ...) <-)) (env ()))\""
  47
  29
  11
  7
  25
  11
  36
  1
  59/66
  28
  #t
  30/29
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  eta
  2
  5
  13
  app
  "\"'(eval (app (-> (app id (λ (a) ...)) <-) (app #t)) (env ()))\""
  47
  29
  11
  7
  25
  11
  36
  1
  59/66
  28
  #t
  30/29
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  eta
  2
  5
  13
  ref-or-constructor
  "\"'(eval (let (_) (-> y <-)) (env ((□? (y)))))\""
  48
  30
  11
  7
  25
  11
  36
  1
  29/33
  28
  #f
  16/15
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  eta
  2
  5
  13
  app
  "\"'(eval (app (app id (λ (a) ...)) (-> (app #t) <-)) (env ()))\""
  48
  30
  11
  7
  25
  11
  36
  1
  29/33
  28
  #t
  16/15
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  eta
  2
  5
  13
  app
  "\"'(eval (let (_) (-> (app (app id (λ (b) ...)) (app #f)) <-)) (env ()))\""
  48
  30
  11
  7
  25
  11
  36
  1
  29/33
  28
  #t
  16/15
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  eta
  2
  5
  13
  letrec*
  "\"'(eval ((top) letrec* (do-something ... id) ...) (env ()))\""
  49
  31
  11
  7
  26
  11
  37
  1
  61/69
  29
  #t
  33/31
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  eta
  2
  5
  13
  let
  "\"'(eval (λ (y) (-> (let (_) ...) <-)) (env ((□? (y)))))\""
  10
  6
  3
  1
  4
  3
  7
  1
  2/3
  4
  #f
  4/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  eta
  2
  5
  13
  let
  "\"'(eval (letrec* (do-something ... id) (-> (let (_) ...) <-)) (env ()))\""
  25
  15
  7
  3
  13
  7
  20
  1
  67/72
  13
  #t
  17/15
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  eta
  2
  5
  13
  app
  "\"'(eval (app (-> (app id (λ (a) ...)) <-) (app #t)) (env ()))\""
  28
  18
  7
  3
  16
  7
  23
  1
  20/21
  16
  #t
  10/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  eta
  2
  5
  13
  app
  "\"'(eval (app (app id (λ (b) ...)) (-> (app #f) <-)) (env ()))\""
  28
  18
  7
  3
  16
  7
  23
  1
  20/21
  16
  #t
  10/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  eta
  2
  5
  13
  letrec*
  "\"'(eval ((top) letrec* (do-something ... id) ...) (env ()))\""
  29
  19
  7
  3
  17
  7
  24
  1
  43/45
  17
  #t
  21/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  eta
  2
  5
  13
  app
  "\"'(eval\n  (let (... () (_ (-> (app do-something) <-)) () ...) ...)\n  (env ((□? (y)))))\""
  36
  25
  7
  4
  22
  7
  29
  1
  52/57
  23
  #t
  27/25
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  eta
  2
  5
  13
  ref-or-constructor
  "\"'(eval (λ (b) (-> b <-)) (env ((□? (b)))))\""
  38
  26
  7
  5
  22
  7
  29
  1
  101/114
  24
  #t
  14/13
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  eta
  2
  5
  13
  app
  "\"'(eval (app (app id (λ (a) ...)) (-> (app #t) <-)) (env ()))\""
  40
  28
  7
  5
  24
  7
  31
  1
  113/126
  26
  #t
  15/14
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  eta
  2
  5
  13
  app
  "\"'(eval (let (_) (-> (app (app id (λ (b) ...)) (app #f)) <-)) (env ()))\""
  40
  28
  7
  5
  24
  7
  31
  1
  113/126
  26
  #t
  15/14
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  eta
  2
  5
  13
  app
  "\"'(eval (app (-> (app id (λ (b) ...)) <-) (app #f)) (env ()))\""
  40
  28
  7
  5
  24
  7
  31
  1
  113/126
  26
  #t
  15/14
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  eta
  2
  5
  13
  app
  "\"'(eval\n  (let (... () (_ (-> (app (app id (λ (a) ...)) (app #t)) <-)) () ...) ...)\n  (env ()))\""
  47
  30
  11
  6
  26
  11
  37
  1
  125/138
  28
  #t
  16/15
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  eta
  2
  5
  13
  ref-or-constructor
  "\"'(eval (λ (a) (-> a <-)) (env ((□? (a)))))\""
  49
  31
  11
  7
  26
  11
  37
  1
  61/69
  29
  #t
  33/31
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  eta
  2
  5
  13
  ref-or-constructor
  "\"'(eval (let (_) (-> y <-)) (env ((□? (y)))))\""
  49
  31
  11
  7
  26
  11
  37
  1
  61/69
  29
  #f
  33/31
  ((0 0 0) (0 0 0) (0 0 0)))
