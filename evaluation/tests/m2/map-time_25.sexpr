'(clean-cache
  map
  2
  52
  lettypes
  "\"'(eval ((top) lettypes (cons ... nil) ...) (env ()))\""
  #f)
'(clean-cache
  map
  2
  52
  letrec*
  "\"'(eval (lettypes cons ... nil (letrec* (car ... my-map) ...)) (env ()))\""
  #f)
'(clean-cache
  map
  2
  52
  let
  "\"'(eval (λ (f l) (-> (let (_) ...) <-)) (env ((□? (f l)))))\""
  #f)
'(clean-cache
  map
  2
  25
  52
  app
  "\"'(eval\n  (let (... () (_ (-> (app debug-trace) <-)) () ...) ...)\n  (env ((□? (f l)))))\""
  8
  5
  0
  3
  1
  0
  1
  1
  1/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  2
  52
  letrec
  "\"'(eval (let (_) (-> (letrec (lp) ...) <-)) (env ((□? (f l)))))\""
  #f)
'(clean-cache
  map
  2
  52
  match
  "\"'(eval\n  (λ (lst) (-> (match (app not (app pair? lst)) ...) <-))\n  (env ((□? (lst)) (□? (f l)))))\""
  #f)
'(clean-cache
  map
  2
  25
  52
  app
  "\"'(eval\n  (match (app not (app pair? lst)) (#f) (_ (-> (app nil) <-)))\n  (env ((□? (lst)) (□? (f l)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  2
  25
  52
  app
  "\"'(eval\n  (match\n   (app not (app pair? lst))\n   ((#f)\n    (-> (app cons (app (app id f) (app car lst)) (app lp (app cdr lst))) <-))\n   _)\n  (env ((□? (lst)) (□? (f l)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  2
  52
  app
  "\"'(eval\n  (app cons (app (app id f) (app car lst)) (-> (app lp (app cdr lst)) <-))\n  (env ((□? (lst)) (□? (f l)))))\""
  #f)
'(clean-cache
  map
  2
  25
  52
  app
  "\"'(eval (app lp (-> (app cdr lst) <-)) (env ((□? (lst)) (□? (f l)))))\""
  108
  82
  14
  12
  45
  8
  53
  1
  1885/2142
  40
  #f
  273/41
  ((18 18 0) (18 18 0) (18 18 0)))
'(clean-cache
  map
  2
  25
  52
  ref-or-constructor
  "\"'(eval (app cdr (-> lst <-)) (env ((□? (lst)) (□? (f l)))))\""
  107
  81
  14
  12
  45
  8
  53
  1
  6737/7650
  39
  #f
  541/81
  ((47/2 47/2 0) (47/2 47/2 0) (47/2 47/2 0)))
'(clean-cache
  map
  2
  52
  app
  "\"'(eval\n  (app cons (-> (app (app id f) (app car lst)) <-) (app lp (app cdr lst)))\n  (env ((□? (lst)) (□? (f l)))))\""
  #f)
'(clean-cache
  map
  2
  52
  app
  "\"'(eval (app (app id f) (-> (app car lst) <-)) (env ((□? (lst)) (□? (f l)))))\""
  #f)
'(clean-cache
  map
  2
  25
  52
  ref-or-constructor
  "\"'(eval (app car (-> lst <-)) (env ((□? (lst)) (□? (f l)))))\""
  107
  81
  14
  12
  45
  8
  53
  1
  6737/7905
  39
  #f
  541/81
  ((23 23 0) (23 23 0) (23 23 0)))
'(clean-cache
  map
  2
  25
  52
  app
  "\"'(eval (app (-> (app id f) <-) (app car lst)) (env ((□? (lst)) (□? (f l)))))\""
  33
  20
  7
  6
  11
  6
  17
  1
  25/36
  16
  #f
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  map
  2
  25
  52
  ref-or-constructor
  "\"'(eval (app id (-> f <-)) (env ((□? (lst)) (□? (f l)))))\""
  22
  12
  7
  3
  11
  6
  17
  1
  9/10
  11
  #f
  61/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  2
  52
  app
  "\"'(eval\n  (match (-> (app not (app pair? lst)) <-) (#f) _)\n  (env ((□? (lst)) (□? (f l)))))\""
  #f)
'(clean-cache
  map
  2
  52
  app
  "\"'(eval (app not (-> (app pair? lst) <-)) (env ((□? (lst)) (□? (f l)))))\""
  #f)
'(clean-cache
  map
  2
  25
  52
  ref-or-constructor
  "\"'(eval (app pair? (-> lst <-)) (env ((□? (lst)) (□? (f l)))))\""
  107
  81
  14
  12
  45
  8
  53
  1
  6737/7905
  39
  #f
  541/81
  ((47/2 47/2 0) (47/2 47/2 0) (23 23 0)))
'(clean-cache
  map
  2
  52
  app
  "\"'(eval (letrec (lp) (-> (app lp l) <-)) (env ((□? (f l)))))\""
  #f)
'(clean-cache
  map
  2
  25
  52
  ref-or-constructor
  "\"'(eval (app lp (-> l <-)) (env ((□? (f l)))))\""
  9
  5
  3
  1
  4
  3
  7
  1
  4/5
  4
  #f
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  2
  25
  52
  let
  "\"'(eval (λ (xx) (-> (let (_) ...) <-)) (env ((□? (xx)))))\""
  31
  17
  7
  7
  11
  6
  17
  1
  49/60
  13
  #f
  89/17
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  map
  2
  25
  52
  app
  "\"'(eval\n  (let (... () (_ (-> (app debug-trace) <-)) () ...) ...)\n  (env ((□? (xx)))))\""
  8
  5
  0
  3
  1
  0
  1
  1
  1/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  2
  25
  52
  ref-or-constructor
  "\"'(eval (let (_) (-> xx <-)) (env ((□? (xx)))))\""
  28
  15
  7
  6
  11
  6
  17
  1
  13/15
  13
  #f
  77/15
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  map
  2
  25
  52
  app
  "\"'(eval (λ () (-> (app #f) <-)) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  2
  52
  match
  "\"'(eval (λ (pair?-v) (-> (match pair?-v ...) <-)) (env ((□? (pair?-v)))))\""
  #f)
'(clean-cache
  map
  2
  25
  52
  app
  "\"'(eval\n  (match pair?-v (cons pair?-c pair?-d) (_ (-> (app #f) <-)))\n  (env ((□? (pair?-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  2
  25
  52
  app
  "\"'(eval\n  (match pair?-v ((cons pair?-c pair?-d) (-> (app #t) <-)) _)\n  (env ((□? (pair?-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  2
  25
  52
  ref-or-constructor
  "\"'(eval (match (-> pair?-v <-) (cons pair?-c pair?-d) _) (env ((□? (pair?-v)))))\""
  118
  88
  16
  14
  45
  9
  54
  1
  12067/14592
  38
  #f
  603/88
  ((49/2 49/2 0) (49/2 49/2 0) (49/2 49/2 0)))
'(clean-cache
  map
  2
  25
  52
  match
  "\"'(eval (λ (cdr-v) (-> (match cdr-v ...) <-)) (env ((□? (cdr-v)))))\""
  109
  82
  14
  13
  45
  8
  53
  1
  11839/13680
  38
  #f
  278/41
  ((20 20 0) (20 20 0) (39/2 39/2 0)))
'(clean-cache
  map
  2
  25
  52
  ref-or-constructor
  "\"'(eval (match cdr-v ((cons cdr-c cdr-d) (-> cdr-d <-))) (env ((□? (cdr-v)))))\""
  107
  80
  14
  13
  45
  8
  53
  1
  3997/4560
  38
  #f
  269/40
  ((17 17 0) (17 17 0) (35/2 35/2 0)))
'(clean-cache
  map
  2
  25
  52
  ref-or-constructor
  "\"'(eval (match (-> cdr-v <-) (cons cdr-c cdr-d)) (env ((□? (cdr-v)))))\""
  105
  78
  14
  13
  45
  8
  53
  1
  4073/4560
  38
  #f
  259/39
  ((16 16 0) (16 16 0) (16 16 0)))
'(clean-cache
  map
  2
  52
  match
  "\"'(eval (λ (car-v) (-> (match car-v ...) <-)) (env ((□? (car-v)))))\""
  #f)
'(clean-cache
  map
  2
  52
  ref-or-constructor
  "\"'(eval (match car-v ((cons car-c car-d) (-> car-c <-))) (env ((□? (car-v)))))\""
  #f)
'(clean-cache
  map
  2
  52
  ref-or-constructor
  "\"'(eval (match (-> car-v <-) (cons car-c car-d)) (env ((□? (car-v)))))\""
  #f)
'(clean-cache
  map
  2
  52
  let
  "\"'(eval (letrec* (car ... my-map) (-> (let (_) ...) <-)) (env ()))\""
  #f)
'(clean-cache
  map
  2
  52
  app
  "\"'(eval\n  (let (...\n        ()\n        (_\n         (->\n          (app\n           my-map\n           (app id (λ (a) ...))\n           (app cons 1 (app cons 2 (app cons 3 (app nil)))))\n          <-))\n        ()\n        ...)\n    ...)\n  (env ()))\""
  #f)
'(clean-cache
  map
  2
  25
  52
  app
  "\"'(eval\n  (app\n   my-map\n   (app id (λ (a) ...))\n   (-> (app cons 1 (app cons 2 (app cons 3 (app nil)))) <-))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  2
  25
  52
  app
  "\"'(eval (app cons 1 (-> (app cons 2 (app cons 3 (app nil))) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  2
  25
  52
  app
  "\"'(eval (app cons 2 (-> (app cons 3 (app nil)) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  2
  25
  52
  app
  "\"'(eval (app cons 3 (-> (app nil) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  2
  25
  52
  app
  "\"'(eval\n  (app\n   my-map\n   (-> (app id (λ (a) ...)) <-)\n   (app cons 1 (app cons 2 (app cons 3 (app nil)))))\n  (env ()))\""
  13
  6
  4
  3
  6
  3
  9
  1
  1
  6
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  2
  25
  52
  app
  "\"'(eval (λ (a) (-> (app + 1 a) <-)) (env ((□? (a)))))\""
  140
  95
  32
  13
  51
  18
  69
  1
  37/50
  41
  #f
  508/95
  ((13 13 0) (13 13 0) (13 13 0)))
'(clean-cache
  map
  2
  25
  52
  ref-or-constructor
  "\"'(eval (app + 1 (-> a <-)) (env ((□? (a)))))\""
  128
  83
  32
  13
  45
  18
  63
  1
  61/80
  37
  #f
  456/83
  ((12 12 0) (25/2 25/2 0) (12 12 0)))
'(clean-cache
  map
  2
  52
  app
  "\"'(eval\n  (let (_)\n    (->\n     (app\n      my-map\n      (app id (λ (b) ...))\n      (app cons 7 (app cons 8 (app cons 9 (app nil)))))\n     <-))\n  (env ()))\""
  #f)
'(clean-cache
  map
  2
  25
  52
  app
  "\"'(eval\n  (app\n   my-map\n   (app id (λ (b) ...))\n   (-> (app cons 7 (app cons 8 (app cons 9 (app nil)))) <-))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  2
  25
  52
  app
  "\"'(eval (app cons 7 (-> (app cons 8 (app cons 9 (app nil))) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  2
  25
  52
  app
  "\"'(eval (app cons 8 (-> (app cons 9 (app nil)) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  2
  25
  52
  app
  "\"'(eval (app cons 9 (-> (app nil) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  2
  25
  52
  app
  "\"'(eval\n  (app\n   my-map\n   (-> (app id (λ (b) ...)) <-)\n   (app cons 7 (app cons 8 (app cons 9 (app nil)))))\n  (env ()))\""
  13
  6
  4
  3
  6
  3
  9
  1
  1
  6
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  2
  25
  52
  app
  "\"'(eval (λ (b) (-> (app + 1 b) <-)) (env ((□? (b)))))\""
  140
  95
  32
  13
  51
  18
  69
  1
  37/50
  41
  #f
  508/95
  ((25/2 25/2 0) (13 13 0) (13 13 0)))
'(clean-cache
  map
  2
  25
  52
  ref-or-constructor
  "\"'(eval (app + 1 (-> b <-)) (env ((□? (b)))))\""
  128
  83
  32
  13
  45
  18
  63
  1
  61/80
  37
  #f
  456/83
  ((12 12 0) (12 12 0) (12 12 0)))
'(shuffled-cache
  0
  map
  2
  25
  52
  ref-or-constructor
  "\"'(eval (match cdr-v ((cons cdr-c cdr-d) (-> cdr-d <-))) (env ((□? (cdr-v)))))\""
  107
  80
  14
  13
  45
  8
  53
  1
  3997/4560
  38
  #f
  269/40
  ((17 17 0) (17 17 0) (17 17 0)))
'(shuffled-cache
  0
  map
  2
  25
  52
  app
  "\"'(eval (app cons 9 (-> (app nil) <-)) (env ()))\""
  107
  80
  14
  13
  45
  8
  53
  1
  3997/4560
  38
  #t
  269/40
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  2
  25
  52
  ref-or-constructor
  "\"'(eval (app car (-> lst <-)) (env ((□? (lst)) (□? (f l)))))\""
  108
  81
  14
  13
  45
  8
  53
  1
  3997/4712
  38
  #f
  61/9
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  map
  2
  25
  52
  app
  "\"'(eval (app lp (-> (app cdr lst) <-)) (env ((□? (lst)) (□? (f l)))))\""
  110
  83
  14
  13
  45
  8
  53
  1
  4463/5270
  39
  #f
  563/83
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  map
  2
  25
  52
  ref-or-constructor
  "\"'(eval (match (-> cdr-v <-) (cons cdr-c cdr-d)) (env ((□? (cdr-v)))))\""
  110
  83
  14
  13
  45
  8
  53
  1
  4463/5270
  39
  #f
  563/83
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  2
  25
  52
  app
  "\"'(eval\n  (match pair?-v (cons pair?-c pair?-d) (_ (-> (app #f) <-)))\n  (env ((□? (pair?-v)))))\""
  113
  85
  14
  14
  45
  8
  53
  1
  4463/5610
  41
  #t
  573/85
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  2
  25
  52
  lettypes
  "\"'(eval ((top) lettypes (cons ... nil) ...) (env ()))\""
  152
  119
  16
  17
  74
  9
  83
  1
  9223/10370
  58
  #f
  773/119
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  map
  2
  25
  52
  app
  "\"'(eval (λ () (-> (app #f) <-)) (env ((□? ()))))\""
  155
  121
  16
  18
  74
  9
  83
  1
  9223/10710
  60
  #t
  783/121
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  2
  25
  52
  app
  "\"'(eval (app cons 7 (-> (app cons 8 (app cons 9 (app nil))) <-)) (env ()))\""
  155
  121
  16
  18
  74
  9
  83
  1
  9223/10710
  60
  #t
  783/121
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  2
  25
  52
  ref-or-constructor
  "\"'(eval (app lp (-> l <-)) (env ((□? (f l)))))\""
  155
  121
  16
  18
  74
  9
  83
  1
  9223/10710
  60
  #f
  783/121
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  2
  25
  52
  app
  "\"'(eval\n  (match (app not (app pair? lst)) (#f) (_ (-> (app nil) <-)))\n  (env ((□? (lst)) (□? (f l)))))\""
  164
  130
  16
  18
  74
  9
  83
  1
  40441/48195
  69
  #t
  414/65
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  map
  2
  25
  52
  letrec*
  "\"'(eval (lettypes cons ... nil (letrec* (car ... my-map) ...)) (env ()))\""
  164
  130
  16
  18
  74
  9
  83
  1
  40441/48195
  69
  #f
  414/65
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  2
  25
  52
  ref-or-constructor
  "\"'(eval (match car-v ((cons car-c car-d) (-> car-c <-))) (env ((□? (car-v)))))\""
  181
  143
  18
  20
  76
  10
  86
  1
  81647/99450
  69
  #f
  941/143
  ((11/2 11/2 0) (11/2 11/2 0) (11/2 11/2 0)))
'(shuffled-cache
  0
  map
  2
  25
  52
  let
  "\"'(eval (letrec* (car ... my-map) (-> (let (_) ...) <-)) (env ()))\""
  181
  143
  18
  20
  76
  10
  86
  1
  81647/99450
  69
  #f
  941/143
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  2
  25
  52
  app
  "\"'(eval\n  (let (_)\n    (->\n     (app\n      my-map\n      (app id (λ (b) ...))\n      (app cons 7 (app cons 8 (app cons 9 (app nil)))))\n     <-))\n  (env ()))\""
  181
  143
  18
  20
  76
  10
  86
  1
  81647/99450
  69
  #f
  941/143
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  2
  25
  52
  match
  "\"'(eval\n  (λ (lst) (-> (match (app not (app pair? lst)) ...) <-))\n  (env ((□? (lst)) (□? (f l)))))\""
  299
  260
  18
  21
  117
  10
  127
  1
  24439/33150
  153
  #f
  1617/260
  ((27/2 27/2 0) (14 14 0) (27/2 27/2 0)))
'(shuffled-cache
  0
  map
  2
  25
  52
  app
  "\"'(eval (app (app id f) (-> (app car lst) <-)) (env ((□? (lst)) (□? (f l)))))\""
  315
  275
  18
  22
  122
  10
  132
  1
  8543/11730
  162
  #f
  1686/275
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  map
  2
  25
  52
  ref-or-constructor
  "\"'(eval (app + 1 (-> b <-)) (env ((□? (b)))))\""
  380
  313
  41
  26
  143
  21
  164
  1
  173367/235790
  181
  #f
  1857/313
  ((17/2 17/2 0) (9 9 0) (9 9 0)))
'(shuffled-cache
  0
  map
  2
  25
  52
  ref-or-constructor
  "\"'(eval (app cdr (-> lst <-)) (env ((□? (lst)) (□? (f l)))))\""
  380
  313
  41
  26
  143
  21
  164
  1
  173367/235790
  181
  #f
  1857/313
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  2
  25
  52
  app
  "\"'(eval\n  (app\n   my-map\n   (app id (λ (a) ...))\n   (-> (app cons 1 (app cons 2 (app cons 3 (app nil)))) <-))\n  (env ()))\""
  380
  313
  41
  26
  143
  21
  164
  1
  173367/235790
  181
  #t
  1857/313
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  2
  25
  52
  app
  "\"'(eval\n  (match pair?-v ((cons pair?-c pair?-d) (-> (app #t) <-)) _)\n  (env ((□? (pair?-v)))))\""
  382
  315
  41
  26
  143
  21
  164
  1
  85876/117895
  183
  #t
  1867/315
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  2
  25
  52
  app
  "\"'(eval\n  (match (-> (app not (app pair? lst)) <-) (#f) _)\n  (env ((□? (lst)) (□? (f l)))))\""
  387
  320
  41
  26
  143
  21
  164
  1
  171429/235790
  185
  #f
  379/64
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  map
  2
  25
  52
  app
  "\"'(eval (app cons 8 (-> (app cons 9 (app nil)) <-)) (env ()))\""
  387
  320
  41
  26
  143
  21
  164
  1
  171429/235790
  185
  #t
  379/64
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  2
  25
  52
  app
  "\"'(eval\n  (let (... () (_ (-> (app debug-trace) <-)) () ...) ...)\n  (env ((□? (xx)))))\""
  398
  330
  41
  27
  151
  21
  172
  1
  1088329/1472880
  195
  #t
  389/66
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  2
  25
  52
  app
  "\"'(eval (app cons 1 (-> (app cons 2 (app cons 3 (app nil))) <-)) (env ()))\""
  398
  330
  41
  27
  151
  21
  172
  1
  1088329/1472880
  195
  #t
  389/66
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  2
  25
  52
  app
  "\"'(eval\n  (app\n   my-map\n   (-> (app id (λ (b) ...)) <-)\n   (app cons 7 (app cons 8 (app cons 9 (app nil)))))\n  (env ()))\""
  403
  334
  41
  28
  155
  21
  176
  1
  1165849/1550400
  199
  #t
  1965/334
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  2
  25
  52
  app
  "\"'(eval (λ (b) (-> (app + 1 b) <-)) (env ((□? (b)))))\""
  413
  344
  41
  28
  161
  21
  182
  1
  1201379/1608540
  202
  #f
  251/43
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  map
  2
  25
  52
  app
  "\"'(eval\n  (match\n   (app not (app pair? lst))\n   ((#f)\n    (-> (app cons (app (app id f) (app car lst)) (app lp (app cdr lst))) <-))\n   _)\n  (env ((□? (lst)) (□? (f l)))))\""
  416
  347
  41
  28
  161
  21
  182
  1
  3600907/4825620
  205
  #t
  2030/347
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  2
  25
  52
  app
  "\"'(eval (app (-> (app id f) <-) (app car lst)) (env ((□? (lst)) (□? (f l)))))\""
  442
  373
  41
  28
  170
  21
  191
  1
  374335/511632
  219
  #f
  2172/373
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  map
  2
  25
  52
  ref-or-constructor
  "\"'(eval (app pair? (-> lst <-)) (env ((□? (lst)) (□? (f l)))))\""
  443
  374
  41
  28
  170
  21
  191
  1
  374335/511632
  219
  #f
  2183/374
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  map
  2
  25
  52
  app
  "\"'(eval\n  (let (... () (_ (-> (app debug-trace) <-)) () ...) ...)\n  (env ((□? (f l)))))\""
  450
  381
  41
  28
  176
  21
  197
  1
  1908497/2616300
  226
  #t
  2218/381
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  2
  25
  52
  app
  "\"'(eval (λ (a) (-> (app + 1 a) <-)) (env ((□? (a)))))\""
  477
  402
  46
  29
  189
  25
  214
  1
  7952789/11046600
  238
  #f
  1157/201
  ((4 4 0) (4 4 0) (4 4 0)))
'(shuffled-cache
  0
  map
  2
  25
  52
  app
  "\"'(eval\n  (app cons (-> (app (app id f) (app car lst)) <-) (app lp (app cdr lst)))\n  (env ((□? (lst)) (□? (f l)))))\""
  498
  421
  46
  31
  195
  25
  220
  1
  1008997/1395360
  242
  #f
  2410/421
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  map
  2
  25
  52
  app
  "\"'(eval (app cons 3 (-> (app nil) <-)) (env ()))\""
  498
  421
  46
  31
  195
  25
  220
  1
  1008997/1395360
  242
  #t
  2410/421
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  2
  25
  52
  app
  "\"'(eval (app not (-> (app pair? lst) <-)) (env ((□? (lst)) (□? (f l)))))\""
  501
  424
  46
  31
  195
  25
  220
  1
  2352173/3255840
  244
  #f
  1213/212
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  map
  2
  25
  52
  match
  "\"'(eval (λ (cdr-v) (-> (match cdr-v ...) <-)) (env ((□? (cdr-v)))))\""
  503
  426
  46
  31
  195
  25
  220
  1
  585217/813960
  244
  #f
  1222/213
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  map
  2
  25
  52
  ref-or-constructor
  "\"'(eval (app id (-> f <-)) (env ((□? (lst)) (□? (f l)))))\""
  504
  427
  46
  31
  195
  25
  220
  1
  585217/813960
  244
  #f
  350/61
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  2
  25
  52
  app
  "\"'(eval\n  (let (...\n        ()\n        (_\n         (->\n          (app\n           my-map\n           (app id (λ (a) ...))\n           (app cons 1 (app cons 2 (app cons 3 (app nil)))))\n          <-))\n        ()\n        ...)\n    ...)\n  (env ()))\""
  515
  437
  46
  32
  205
  25
  230
  1
  8758787/12062435
  248
  #f
  2506/437
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  map
  2
  25
  52
  ref-or-constructor
  "\"'(eval (match (-> car-v <-) (cons car-c car-d)) (env ((□? (car-v)))))\""
  515
  437
  46
  32
  205
  25
  230
  1
  8758787/12062435
  248
  #f
  2506/437
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  2
  25
  52
  app
  "\"'(eval\n  (app\n   my-map\n   (-> (app id (λ (a) ...)) <-)\n   (app cons 1 (app cons 2 (app cons 3 (app nil)))))\n  (env ()))\""
  515
  437
  46
  32
  205
  25
  230
  1
  8758787/12062435
  248
  #t
  2506/437
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  2
  25
  52
  ref-or-constructor
  "\"'(eval (let (_) (-> xx <-)) (env ((□? (xx)))))\""
  516
  438
  46
  32
  205
  25
  230
  1
  8733916/12062435
  248
  #f
  1256/219
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  2
  25
  52
  let
  "\"'(eval (λ (f l) (-> (let (_) ...) <-)) (env ((□? (f l)))))\""
  517
  439
  46
  32
  205
  25
  230
  1
  26077393/36187305
  248
  #f
  2519/439
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  2
  25
  52
  match
  "\"'(eval (λ (car-v) (-> (match car-v ...) <-)) (env ((□? (car-v)))))\""
  519
  441
  46
  32
  205
  25
  230
  1
  25953038/36187305
  248
  #f
  361/63
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  map
  2
  25
  52
  letrec
  "\"'(eval (let (_) (-> (letrec (lp) ...) <-)) (env ((□? (f l)))))\""
  520
  442
  46
  32
  205
  25
  230
  1
  8609561/12062435
  248
  #f
  1267/221
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  2
  25
  52
  app
  "\"'(eval\n  (app\n   my-map\n   (app id (λ (b) ...))\n   (-> (app cons 7 (app cons 8 (app cons 9 (app nil)))) <-))\n  (env ()))\""
  520
  442
  46
  32
  205
  25
  230
  1
  8609561/12062435
  248
  #t
  1267/221
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  2
  25
  52
  match
  "\"'(eval (λ (pair?-v) (-> (match pair?-v ...) <-)) (env ((□? (pair?-v)))))\""
  524
  446
  46
  32
  205
  25
  230
  1
  25579973/36187305
  250
  #f
  2561/446
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  map
  2
  25
  52
  ref-or-constructor
  "\"'(eval (match (-> pair?-v <-) (cons pair?-c pair?-d) _) (env ((□? (pair?-v)))))\""
  524
  446
  46
  32
  205
  25
  230
  1
  25579973/36187305
  250
  #f
  2561/446
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  2
  25
  52
  app
  "\"'(eval (app cons 2 (-> (app cons 3 (app nil)) <-)) (env ()))\""
  524
  446
  46
  32
  205
  25
  230
  1
  25579973/36187305
  250
  #t
  2561/446
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  2
  25
  52
  app
  "\"'(eval\n  (app cons (app (app id f) (app car lst)) (-> (app lp (app cdr lst)) <-))\n  (env ((□? (lst)) (□? (f l)))))\""
  558
  480
  46
  32
  221
  25
  246
  1
  86354/124355
  271
  #f
  691/120
  ((17/2 17/2 0) (17/2 17/2 0) (17/2 17/2 0)))
'(shuffled-cache
  0
  map
  2
  25
  52
  let
  "\"'(eval (λ (xx) (-> (let (_) ...) <-)) (env ((□? (xx)))))\""
  560
  482
  46
  32
  221
  25
  246
  1
  2322514/3357585
  271
  #f
  1388/241
  ((0 0 0) (0 0 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  map
  2
  25
  52
  app
  "\"'(eval (letrec (lp) (-> (app lp l) <-)) (env ((□? (f l)))))\""
  561
  483
  46
  32
  221
  25
  246
  1
  256801/373065
  271
  #f
  121/21
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  2
  25
  52
  ref-or-constructor
  "\"'(eval (app + 1 (-> a <-)) (env ((□? (a)))))\""
  561
  483
  46
  32
  221
  25
  246
  1
  256801/373065
  271
  #f
  121/21
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  2
  25
  52
  app
  "\"'(eval\n  (app\n   my-map\n   (-> (app id (λ (b) ...)) <-)\n   (app cons 7 (app cons 8 (app cons 9 (app nil)))))\n  (env ()))\""
  13
  6
  4
  3
  6
  3
  9
  1
  1
  6
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  2
  52
  let
  "\"'(eval (letrec* (car ... my-map) (-> (let (_) ...) <-)) (env ()))\""
  #f)
'(shuffled-cache
  1
  map
  2
  52
  app
  "\"'(eval\n  (let (...\n        ()\n        (_\n         (->\n          (app\n           my-map\n           (app id (λ (a) ...))\n           (app cons 1 (app cons 2 (app cons 3 (app nil)))))\n          <-))\n        ()\n        ...)\n    ...)\n  (env ()))\""
  #f)
'(shuffled-cache
  1
  map
  2
  52
  ref-or-constructor
  "\"'(eval (match (-> pair?-v <-) (cons pair?-c pair?-d) _) (env ((□? (pair?-v)))))\""
  #f)
'(shuffled-cache
  1
  map
  2
  25
  52
  app
  "\"'(eval (λ () (-> (app #f) <-)) (env ((□? ()))))\""
  121
  90
  16
  15
  45
  9
  54
  1
  12067/15504
  40
  #t
  613/90
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  2
  25
  52
  ref-or-constructor
  "\"'(eval (app lp (-> l <-)) (env ((□? (f l)))))\""
  121
  90
  16
  15
  45
  9
  54
  1
  12067/15504
  40
  #f
  613/90
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  2
  25
  52
  match
  "\"'(eval (λ (car-v) (-> (match car-v ...) <-)) (env ((□? (car-v)))))\""
  142
  107
  18
  17
  49
  10
  59
  1
  12523/17328
  40
  #f
  742/107
  ((15/2 15/2 0) (15/2 15/2 0) (15/2 15/2 0)))
'(shuffled-cache
  1
  map
  2
  25
  52
  app
  "\"'(eval\n  (let (_)\n    (->\n     (app\n      my-map\n      (app id (λ (b) ...))\n      (app cons 7 (app cons 8 (app cons 9 (app nil)))))\n     <-))\n  (env ()))\""
  171
  133
  18
  20
  75
  10
  85
  1
  24151/28728
  57
  #f
  886/133
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  map
  2
  25
  52
  lettypes
  "\"'(eval ((top) lettypes (cons ... nil) ...) (env ()))\""
  174
  136
  18
  20
  78
  10
  88
  1
  25519/30096
  57
  #f
  113/17
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  2
  25
  52
  app
  "\"'(eval\n  (match pair?-v ((cons pair?-c pair?-d) (-> (app #t) <-)) _)\n  (env ((□? (pair?-v)))))\""
  177
  139
  18
  20
  79
  10
  89
  1
  25139/30096
  60
  #t
  919/139
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  2
  25
  52
  app
  "\"'(eval\n  (app\n   my-map\n   (app id (λ (a) ...))\n   (-> (app cons 1 (app cons 2 (app cons 3 (app nil)))) <-))\n  (env ()))\""
  177
  139
  18
  20
  79
  10
  89
  1
  25139/30096
  60
  #t
  919/139
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  2
  25
  52
  ref-or-constructor
  "\"'(eval (app pair? (-> lst <-)) (env ((□? (lst)) (□? (f l)))))\""
  177
  139
  18
  20
  79
  10
  89
  1
  25139/30096
  60
  #f
  919/139
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  2
  25
  52
  match
  "\"'(eval (λ (cdr-v) (-> (match cdr-v ...) <-)) (env ((□? (cdr-v)))))\""
  181
  142
  18
  21
  79
  10
  89
  1
  24911/30096
  60
  #f
  474/71
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  1
  map
  2
  25
  52
  app
  "\"'(eval\n  (app cons (-> (app (app id f) (app car lst)) <-) (app lp (app cdr lst)))\n  (env ((□? (lst)) (□? (f l)))))\""
  329
  255
  46
  28
  138
  25
  163
  1
  55933/69160
  116
  #f
  498/85
  ((35/2 35/2 0) (18 18 0) (35/2 35/2 0)))
'(shuffled-cache
  1
  map
  2
  25
  52
  app
  "\"'(eval (app cons 2 (-> (app cons 3 (app nil)) <-)) (env ()))\""
  329
  255
  46
  28
  138
  25
  163
  1
  55933/69160
  116
  #t
  498/85
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  2
  25
  52
  app
  "\"'(eval (app not (-> (app pair? lst) <-)) (env ((□? (lst)) (□? (f l)))))\""
  344
  270
  46
  28
  143
  25
  168
  1
  493897/622440
  127
  #f
  263/45
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  map
  2
  25
  52
  let
  "\"'(eval (λ (xx) (-> (let (_) ...) <-)) (env ((□? (xx)))))\""
  346
  272
  46
  28
  143
  25
  168
  1
  70231/88920
  127
  #f
  795/136
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  map
  2
  25
  52
  app
  "\"'(eval\n  (match (app not (app pair? lst)) (#f) (_ (-> (app nil) <-)))\n  (env ((□? (lst)) (□? (f l)))))\""
  355
  281
  46
  28
  143
  25
  168
  1
  482117/622440
  136
  #t
  1635/281
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  map
  2
  25
  52
  ref-or-constructor
  "\"'(eval (app id (-> f <-)) (env ((□? (lst)) (□? (f l)))))\""
  356
  282
  46
  28
  143
  25
  168
  1
  482117/622440
  136
  #f
  547/94
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  2
  25
  52
  ref-or-constructor
  "\"'(eval (match (-> car-v <-) (cons car-c car-d)) (env ((□? (car-v)))))\""
  356
  282
  46
  28
  143
  25
  168
  1
  482117/622440
  136
  #f
  547/94
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  2
  25
  52
  app
  "\"'(eval\n  (match pair?-v (cons pair?-c pair?-d) (_ (-> (app #f) <-)))\n  (env ((□? (pair?-v)))))\""
  358
  284
  46
  28
  143
  25
  168
  1
  477557/622440
  138
  #t
  1651/284
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  2
  25
  52
  let
  "\"'(eval (λ (f l) (-> (let (_) ...) <-)) (env ((□? (f l)))))\""
  373
  298
  46
  29
  156
  25
  181
  1
  12247/15960
  146
  #f
  864/149
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  map
  2
  25
  52
  letrec*
  "\"'(eval (lettypes cons ... nil (letrec* (car ... my-map) ...)) (env ()))\""
  373
  298
  46
  29
  156
  25
  181
  1
  12247/15960
  146
  #f
  864/149
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  2
  25
  52
  app
  "\"'(eval (app cons 9 (-> (app nil) <-)) (env ()))\""
  373
  298
  46
  29
  156
  25
  181
  1
  12247/15960
  146
  #t
  864/149
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  2
  25
  52
  app
  "\"'(eval (letrec (lp) (-> (app lp l) <-)) (env ((□? (f l)))))\""
  374
  299
  46
  29
  156
  25
  181
  1
  52817/69160
  146
  #f
  1735/299
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  2
  25
  52
  app
  "\"'(eval\n  (app\n   my-map\n   (app id (λ (b) ...))\n   (-> (app cons 7 (app cons 8 (app cons 9 (app nil)))) <-))\n  (env ()))\""
  374
  299
  46
  29
  156
  25
  181
  1
  52817/69160
  146
  #t
  1735/299
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  2
  25
  52
  match
  "\"'(eval\n  (λ (lst) (-> (match (app not (app pair? lst)) ...) <-))\n  (env ((□? (lst)) (□? (f l)))))\""
  467
  392
  46
  29
  186
  25
  211
  1
  994991/1369368
  214
  #f
  283/49
  ((9 9 0) (9 9 0) (9 9 0)))
'(shuffled-cache
  1
  map
  2
  25
  52
  ref-or-constructor
  "\"'(eval (match (-> cdr-v <-) (cons cdr-c cdr-d)) (env ((□? (cdr-v)))))\""
  467
  392
  46
  29
  186
  25
  211
  1
  994991/1369368
  214
  #f
  283/49
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  2
  25
  52
  app
  "\"'(eval\n  (app\n   my-map\n   (-> (app id (λ (a) ...)) <-)\n   (app cons 1 (app cons 2 (app cons 3 (app nil)))))\n  (env ()))\""
  467
  392
  46
  29
  186
  25
  211
  1
  994991/1369368
  214
  #t
  283/49
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  2
  25
  52
  app
  "\"'(eval (app lp (-> (app cdr lst) <-)) (env ((□? (lst)) (□? (f l)))))\""
  469
  394
  46
  29
  186
  25
  211
  1
  3018539/4157010
  215
  #f
  1139/197
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  map
  2
  25
  52
  app
  "\"'(eval (app cons 8 (-> (app cons 9 (app nil)) <-)) (env ()))\""
  469
  394
  46
  29
  186
  25
  211
  1
  3018539/4157010
  215
  #t
  1139/197
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  2
  25
  52
  ref-or-constructor
  "\"'(eval (app + 1 (-> a <-)) (env ((□? (a)))))\""
  471
  395
  46
  30
  186
  25
  211
  1
  21023183/29099070
  215
  #f
  2282/395
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  map
  2
  25
  52
  ref-or-constructor
  "\"'(eval (match car-v ((cons car-c car-d) (-> car-c <-))) (env ((□? (car-v)))))\""
  471
  395
  46
  30
  186
  25
  211
  1
  21023183/29099070
  215
  #f
  2282/395
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  2
  25
  52
  match
  "\"'(eval (λ (pair?-v) (-> (match pair?-v ...) <-)) (env ((□? (pair?-v)))))\""
  475
  399
  46
  30
  186
  25
  211
  1
  20810003/29099070
  217
  #f
  2309/399
  ((2 2 0) (3/2 3/2 0) (2 2 0)))
'(shuffled-cache
  1
  map
  2
  25
  52
  app
  "\"'(eval\n  (app cons (app (app id f) (app car lst)) (-> (app lp (app cdr lst)) <-))\n  (env ((□? (lst)) (□? (f l)))))\""
  509
  433
  46
  30
  202
  25
  227
  1
  24481/34884
  238
  #f
  2512/433
  ((17/2 17/2 0) (17/2 17/2 0) (8 8 0)))
'(shuffled-cache
  1
  map
  2
  25
  52
  app
  "\"'(eval\n  (match (-> (app not (app pair? lst)) <-) (#f) _)\n  (env ((□? (lst)) (□? (f l)))))\""
  514
  438
  46
  30
  202
  25
  227
  1
  2791421/3984120
  240
  #f
  1270/219
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  map
  2
  25
  52
  app
  "\"'(eval\n  (let (... () (_ (-> (app debug-trace) <-)) () ...) ...)\n  (env ((□? (xx)))))\""
  528
  451
  46
  31
  213
  25
  238
  1
  2932793/4112640
  253
  #t
  2605/451
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  2
  25
  52
  app
  "\"'(eval (app (-> (app id f) <-) (app car lst)) (env ((□? (lst)) (□? (f l)))))\""
  531
  454
  46
  31
  213
  25
  238
  1
  976963/1370880
  255
  #f
  2621/454
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  map
  2
  25
  52
  letrec
  "\"'(eval (let (_) (-> (letrec (lp) ...) <-)) (env ((□? (f l)))))\""
  532
  455
  46
  31
  213
  25
  238
  1
  972203/1370880
  255
  #f
  2628/455
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  2
  25
  52
  app
  "\"'(eval (λ (b) (-> (app + 1 b) <-)) (env ((□? (b)))))\""
  537
  459
  46
  32
  213
  25
  238
  1
  962683/1370880
  256
  #f
  2645/459
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  map
  2
  25
  52
  app
  "\"'(eval (app (app id f) (-> (app car lst) <-)) (env ((□? (lst)) (□? (f l)))))\""
  540
  462
  46
  32
  213
  25
  238
  1
  10963543/15628032
  258
  #f
  2659/462
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  map
  2
  25
  52
  app
  "\"'(eval (app cons 1 (-> (app cons 2 (app cons 3 (app nil))) <-)) (env ()))\""
  540
  462
  46
  32
  213
  25
  238
  1
  10963543/15628032
  258
  #t
  2659/462
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  2
  25
  52
  app
  "\"'(eval\n  (match\n   (app not (app pair? lst))\n   ((#f)\n    (-> (app cons (app (app id f) (app car lst)) (app lp (app cdr lst))) <-))\n   _)\n  (env ((□? (lst)) (□? (f l)))))\""
  543
  465
  46
  32
  213
  25
  238
  1
  285227/406980
  261
  #t
  2681/465
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  map
  2
  25
  52
  ref-or-constructor
  "\"'(eval (app + 1 (-> b <-)) (env ((□? (b)))))\""
  543
  465
  46
  32
  213
  25
  238
  1
  285227/406980
  261
  #f
  2681/465
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  2
  25
  52
  app
  "\"'(eval\n  (let (... () (_ (-> (app debug-trace) <-)) () ...) ...)\n  (env ((□? (f l)))))\""
  550
  472
  46
  32
  219
  25
  244
  1
  1547589/2215780
  268
  #t
  679/118
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  2
  25
  52
  app
  "\"'(eval (λ (a) (-> (app + 1 a) <-)) (env ((□? (a)))))\""
  554
  476
  46
  32
  219
  25
  244
  1
  1524979/2215780
  269
  #f
  2733/476
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  map
  2
  25
  52
  app
  "\"'(eval (app cons 3 (-> (app nil) <-)) (env ()))\""
  554
  476
  46
  32
  219
  25
  244
  1
  1524979/2215780
  269
  #t
  2733/476
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  2
  25
  52
  ref-or-constructor
  "\"'(eval (let (_) (-> xx <-)) (env ((□? (xx)))))\""
  555
  477
  46
  32
  219
  25
  244
  1
  4565893/6647340
  269
  #f
  913/159
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  2
  25
  52
  ref-or-constructor
  "\"'(eval (app cdr (-> lst <-)) (env ((□? (lst)) (□? (f l)))))\""
  556
  478
  46
  32
  219
  25
  244
  1
  4565893/6647340
  269
  #f
  1375/239
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  map
  2
  25
  52
  ref-or-constructor
  "\"'(eval (app car (-> lst <-)) (env ((□? (lst)) (□? (f l)))))\""
  557
  479
  46
  32
  219
  25
  244
  1
  4565893/6647340
  269
  #f
  2761/479
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  map
  2
  25
  52
  ref-or-constructor
  "\"'(eval (match cdr-v ((cons cdr-c cdr-d) (-> cdr-d <-))) (env ((□? (cdr-v)))))\""
  557
  479
  46
  32
  219
  25
  244
  1
  4565893/6647340
  269
  #f
  2761/479
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  2
  25
  52
  app
  "\"'(eval (app cons 7 (-> (app cons 8 (app cons 9 (app nil))) <-)) (env ()))\""
  557
  479
  46
  32
  219
  25
  244
  1
  4565893/6647340
  269
  #t
  2761/479
  ((0 0 0) (0 0 0) (0 0 0)))
