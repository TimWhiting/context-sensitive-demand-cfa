'(clean-cache
  map
  2
  25
  52
  lettypes
  "\"'(eval ((top) lettypes (cons ... nil) ...) (env ()))\""
  30
  20
  5
  5
  19
  1
  20
  1
  19/20
  7
  #f
  87/20
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  map
  2
  25
  52
  letrec*
  "\"'(eval (lettypes cons ... nil (letrec* (car ... my-map) ...)) (env ()))\""
  29
  19
  5
  5
  18
  1
  19
  1
  18/19
  7
  #f
  83/19
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  map
  2
  25
  52
  let
  "\"'(eval (λ (f l) (-> (let (_) ...) <-)) (env ((□? (f l)))))\""
  24
  14
  5
  5
  3
  1
  4
  1
  3/14
  5
  #f
  61/14
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  map
  2
  25
  52
  app
  "\"'(eval\n  (let (... () (_ (-> (app debug-trace) <-)) () ...) ...)\n  (env ((□? (f l)))))\""
  8
  5
  0
  3
  1
  0
  1
  1
  1/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  2
  25
  52
  letrec
  "\"'(eval (let (_) (-> (letrec (lp) ...) <-)) (env ((□? (f l)))))\""
  23
  13
  5
  5
  3
  1
  4
  1
  3/13
  5
  #f
  57/13
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  map
  2
  52
  match
  "\"'(eval\n  (λ (lst) (-> (match (app not (app pair? lst)) ...) <-))\n  (env ((□? (lst)) (□? (f l)))))\""
  #f)
'(clean-cache
  map
  2
  25
  52
  app
  "\"'(eval\n  (match (app not (app pair? lst)) (#f) (_ (-> (app nil) <-)))\n  (env ((□? (lst)) (□? (f l)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  2
  25
  52
  app
  "\"'(eval\n  (match\n   (app not (app pair? lst))\n   ((#f)\n    (-> (app cons (app (app id f) (app car lst)) (app lp (app cdr lst))) <-))\n   _)\n  (env ((□? (lst)) (□? (f l)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  2
  25
  52
  app
  "\"'(eval\n  (app cons (app (app id f) (app car lst)) (-> (app lp (app cdr lst)) <-))\n  (env ((□? (lst)) (□? (f l)))))\""
  22
  12
  5
  5
  3
  1
  4
  1
  1/4
  5
  #f
  53/12
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  map
  2
  52
  app
  "\"'(eval (app lp (-> (app cdr lst) <-)) (env ((□? (lst)) (□? (f l)))))\""
  #f)
'(clean-cache
  map
  2
  52
  ref-or-constructor
  "\"'(eval (app cdr (-> lst <-)) (env ((□? (lst)) (□? (f l)))))\""
  #f)
'(clean-cache
  map
  2
  52
  app
  "\"'(eval\n  (app cons (-> (app (app id f) (app car lst)) <-) (app lp (app cdr lst)))\n  (env ((□? (lst)) (□? (f l)))))\""
  #f)
'(clean-cache
  map
  2
  52
  app
  "\"'(eval (app (app id f) (-> (app car lst) <-)) (env ((□? (lst)) (□? (f l)))))\""
  #f)
'(clean-cache
  map
  2
  52
  ref-or-constructor
  "\"'(eval (app car (-> lst <-)) (env ((□? (lst)) (□? (f l)))))\""
  #f)
'(clean-cache
  map
  2
  25
  52
  app
  "\"'(eval (app (-> (app id f) <-) (app car lst)) (env ((□? (lst)) (□? (f l)))))\""
  33
  20
  7
  6
  11
  6
  17
  1
  25/36
  16
  #f
  26/5
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  map
  2
  25
  52
  ref-or-constructor
  "\"'(eval (app id (-> f <-)) (env ((□? (lst)) (□? (f l)))))\""
  22
  12
  7
  3
  11
  6
  17
  1
  9/10
  11
  #f
  61/12
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  map
  2
  52
  app
  "\"'(eval\n  (match (-> (app not (app pair? lst)) <-) (#f) _)\n  (env ((□? (lst)) (□? (f l)))))\""
  #f)
'(clean-cache
  map
  2
  52
  app
  "\"'(eval (app not (-> (app pair? lst) <-)) (env ((□? (lst)) (□? (f l)))))\""
  #f)
'(clean-cache
  map
  2
  52
  ref-or-constructor
  "\"'(eval (app pair? (-> lst <-)) (env ((□? (lst)) (□? (f l)))))\""
  #f)
'(clean-cache
  map
  2
  25
  52
  app
  "\"'(eval (letrec (lp) (-> (app lp l) <-)) (env ((□? (f l)))))\""
  22
  12
  5
  5
  3
  1
  4
  1
  1/4
  5
  #f
  53/12
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  map
  2
  25
  52
  ref-or-constructor
  "\"'(eval (app lp (-> l <-)) (env ((□? (f l)))))\""
  9
  5
  3
  1
  4
  3
  7
  1
  4/5
  4
  #f
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  2
  25
  52
  let
  "\"'(eval (λ (xx) (-> (let (_) ...) <-)) (env ((□? (xx)))))\""
  31
  17
  7
  7
  11
  6
  17
  1
  49/60
  13
  #f
  89/17
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  map
  2
  25
  52
  app
  "\"'(eval\n  (let (... () (_ (-> (app debug-trace) <-)) () ...) ...)\n  (env ((□? (xx)))))\""
  8
  5
  0
  3
  1
  0
  1
  1
  1/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  2
  25
  52
  ref-or-constructor
  "\"'(eval (let (_) (-> xx <-)) (env ((□? (xx)))))\""
  28
  15
  7
  6
  11
  6
  17
  1
  13/15
  13
  #f
  77/15
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  map
  2
  25
  52
  app
  "\"'(eval (λ () (-> (app #f) <-)) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  2
  52
  match
  "\"'(eval (λ (pair?-v) (-> (match pair?-v ...) <-)) (env ((□? (pair?-v)))))\""
  #f)
'(clean-cache
  map
  2
  25
  52
  app
  "\"'(eval\n  (match pair?-v (cons pair?-c pair?-d) (_ (-> (app #f) <-)))\n  (env ((□? (pair?-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  2
  25
  52
  app
  "\"'(eval\n  (match pair?-v ((cons pair?-c pair?-d) (-> (app #t) <-)) _)\n  (env ((□? (pair?-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  2
  52
  ref-or-constructor
  "\"'(eval (match (-> pair?-v <-) (cons pair?-c pair?-d) _) (env ((□? (pair?-v)))))\""
  #f)
'(clean-cache
  map
  2
  52
  match
  "\"'(eval (λ (cdr-v) (-> (match cdr-v ...) <-)) (env ((□? (cdr-v)))))\""
  #f)
'(clean-cache
  map
  2
  52
  ref-or-constructor
  "\"'(eval (match cdr-v ((cons cdr-c cdr-d) (-> cdr-d <-))) (env ((□? (cdr-v)))))\""
  #f)
'(clean-cache
  map
  2
  52
  ref-or-constructor
  "\"'(eval (match (-> cdr-v <-) (cons cdr-c cdr-d)) (env ((□? (cdr-v)))))\""
  #f)
'(clean-cache
  map
  2
  52
  match
  "\"'(eval (λ (car-v) (-> (match car-v ...) <-)) (env ((□? (car-v)))))\""
  #f)
'(clean-cache
  map
  2
  52
  ref-or-constructor
  "\"'(eval (match car-v ((cons car-c car-d) (-> car-c <-))) (env ((□? (car-v)))))\""
  #f)
'(clean-cache
  map
  2
  52
  ref-or-constructor
  "\"'(eval (match (-> car-v <-) (cons car-c car-d)) (env ((□? (car-v)))))\""
  #f)
'(clean-cache
  map
  2
  25
  52
  let
  "\"'(eval (letrec* (car ... my-map) (-> (let (_) ...) <-)) (env ()))\""
  28
  18
  5
  5
  17
  1
  18
  1
  17/18
  7
  #f
  79/18
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  map
  2
  25
  52
  app
  "\"'(eval\n  (let (...\n        ()\n        (_\n         (->\n          (app\n           my-map\n           (app id (λ (a) ...))\n           (app cons 1 (app cons 2 (app cons 3 (app nil)))))\n          <-))\n        ()\n        ...)\n    ...)\n  (env ()))\""
  27
  17
  5
  5
  16
  1
  17
  1
  16/17
  7
  #f
  75/17
  ((1 1 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  map
  2
  25
  52
  app
  "\"'(eval\n  (app\n   my-map\n   (app id (λ (a) ...))\n   (-> (app cons 1 (app cons 2 (app cons 3 (app nil)))) <-))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  2
  25
  52
  app
  "\"'(eval (app cons 1 (-> (app cons 2 (app cons 3 (app nil))) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  2
  25
  52
  app
  "\"'(eval (app cons 2 (-> (app cons 3 (app nil)) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  2
  25
  52
  app
  "\"'(eval (app cons 3 (-> (app nil) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  2
  25
  52
  app
  "\"'(eval\n  (app\n   my-map\n   (-> (app id (λ (a) ...)) <-)\n   (app cons 1 (app cons 2 (app cons 3 (app nil)))))\n  (env ()))\""
  13
  6
  4
  3
  6
  3
  9
  1
  1
  6
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  2
  52
  app
  "\"'(eval (λ (a) (-> (app + 1 a) <-)) (env ((□? (a)))))\""
  #f)
'(clean-cache
  map
  2
  52
  ref-or-constructor
  "\"'(eval (app + 1 (-> a <-)) (env ((□? (a)))))\""
  #f)
'(clean-cache
  map
  2
  25
  52
  app
  "\"'(eval\n  (let (_)\n    (->\n     (app\n      my-map\n      (app id (λ (b) ...))\n      (app cons 7 (app cons 8 (app cons 9 (app nil)))))\n     <-))\n  (env ()))\""
  27
  17
  5
  5
  16
  1
  17
  1
  16/17
  7
  #f
  75/17
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  map
  2
  25
  52
  app
  "\"'(eval\n  (app\n   my-map\n   (app id (λ (b) ...))\n   (-> (app cons 7 (app cons 8 (app cons 9 (app nil)))) <-))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  2
  25
  52
  app
  "\"'(eval (app cons 7 (-> (app cons 8 (app cons 9 (app nil))) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  2
  25
  52
  app
  "\"'(eval (app cons 8 (-> (app cons 9 (app nil)) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  2
  25
  52
  app
  "\"'(eval (app cons 9 (-> (app nil) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  2
  25
  52
  app
  "\"'(eval\n  (app\n   my-map\n   (-> (app id (λ (b) ...)) <-)\n   (app cons 7 (app cons 8 (app cons 9 (app nil)))))\n  (env ()))\""
  13
  6
  4
  3
  6
  3
  9
  1
  1
  6
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  map
  2
  52
  app
  "\"'(eval (λ (b) (-> (app + 1 b) <-)) (env ((□? (b)))))\""
  #f)
'(clean-cache
  map
  2
  52
  ref-or-constructor
  "\"'(eval (app + 1 (-> b <-)) (env ((□? (b)))))\""
  #f)
'(shuffled-cache
  0
  map
  2
  52
  ref-or-constructor
  "\"'(eval (match (-> pair?-v <-) (cons pair?-c pair?-d) _) (env ((□? (pair?-v)))))\""
  #f)
'(shuffled-cache
  0
  map
  2
  25
  52
  ref-or-constructor
  "\"'(eval (app lp (-> l <-)) (env ((□? (f l)))))\""
  9
  5
  3
  1
  4
  3
  7
  1
  4/5
  4
  #f
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  2
  52
  match
  "\"'(eval (λ (car-v) (-> (match car-v ...) <-)) (env ((□? (car-v)))))\""
  #f)
'(shuffled-cache
  0
  map
  2
  25
  52
  app
  "\"'(eval\n  (let (... () (_ (-> (app debug-trace) <-)) () ...) ...)\n  (env ((□? (xx)))))\""
  8
  5
  0
  3
  1
  0
  1
  1
  1/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  2
  25
  52
  app
  "\"'(eval\n  (let (...\n        ()\n        (_\n         (->\n          (app\n           my-map\n           (app id (λ (a) ...))\n           (app cons 1 (app cons 2 (app cons 3 (app nil)))))\n          <-))\n        ()\n        ...)\n    ...)\n  (env ()))\""
  35
  22
  5
  8
  17
  1
  18
  1
  17/22
  12
  #f
  50/11
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  map
  2
  52
  match
  "\"'(eval (λ (cdr-v) (-> (match cdr-v ...) <-)) (env ((□? (cdr-v)))))\""
  #f)
'(shuffled-cache
  0
  map
  2
  52
  ref-or-constructor
  "\"'(eval (app car (-> lst <-)) (env ((□? (lst)) (□? (f l)))))\""
  #f)
'(shuffled-cache
  0
  map
  2
  52
  app
  "\"'(eval\n  (match (-> (app not (app pair? lst)) <-) (#f) _)\n  (env ((□? (lst)) (□? (f l)))))\""
  #f)
'(shuffled-cache
  0
  map
  2
  25
  52
  app
  "\"'(eval (app cons 8 (-> (app cons 9 (app nil)) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  2
  52
  app
  "\"'(eval\n  (app cons (-> (app (app id f) (app car lst)) <-) (app lp (app cdr lst)))\n  (env ((□? (lst)) (□? (f l)))))\""
  #f)
'(shuffled-cache
  0
  map
  2
  25
  52
  letrec
  "\"'(eval (let (_) (-> (letrec (lp) ...) <-)) (env ((□? (f l)))))\""
  23
  13
  5
  5
  3
  1
  4
  1
  3/13
  5
  #f
  57/13
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  map
  2
  25
  52
  app
  "\"'(eval\n  (app\n   my-map\n   (app id (λ (a) ...))\n   (-> (app cons 1 (app cons 2 (app cons 3 (app nil)))) <-))\n  (env ()))\""
  25
  15
  5
  5
  5
  1
  6
  1
  1/3
  7
  #t
  67/15
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  2
  25
  52
  let
  "\"'(eval (λ (f l) (-> (let (_) ...) <-)) (env ((□? (f l)))))\""
  26
  16
  5
  5
  5
  1
  6
  1
  5/16
  7
  #f
  71/16
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  2
  25
  52
  app
  "\"'(eval\n  (let (_)\n    (->\n     (app\n      my-map\n      (app id (λ (b) ...))\n      (app cons 7 (app cons 8 (app cons 9 (app nil)))))\n     <-))\n  (env ()))\""
  41
  29
  5
  7
  18
  1
  19
  1
  13/19
  13
  #f
  129/29
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  map
  2
  25
  52
  let
  "\"'(eval (letrec* (car ... my-map) (-> (let (_) ...) <-)) (env ()))\""
  42
  30
  5
  7
  19
  1
  20
  1
  7/10
  13
  #f
  133/30
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  2
  25
  52
  app
  "\"'(eval\n  (match\n   (app not (app pair? lst))\n   ((#f)\n    (-> (app cons (app (app id f) (app car lst)) (app lp (app cdr lst))) <-))\n   _)\n  (env ((□? (lst)) (□? (f l)))))\""
  44
  32
  5
  7
  19
  1
  20
  1
  7/11
  15
  #t
  143/32
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  2
  52
  ref-or-constructor
  "\"'(eval (match cdr-v ((cons cdr-c cdr-d) (-> cdr-d <-))) (env ((□? (cdr-v)))))\""
  #f)
'(shuffled-cache
  0
  map
  2
  25
  52
  app
  "\"'(eval\n  (app\n   my-map\n   (-> (app id (λ (a) ...)) <-)\n   (app cons 1 (app cons 2 (app cons 3 (app nil)))))\n  (env ()))\""
  13
  6
  4
  3
  6
  3
  9
  1
  1
  6
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  2
  25
  52
  app
  "\"'(eval (letrec (lp) (-> (app lp l) <-)) (env ((□? (f l)))))\""
  33
  18
  9
  6
  9
  4
  13
  1
  1/2
  11
  #f
  83/18
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  map
  2
  25
  52
  ref-or-constructor
  "\"'(eval (app id (-> f <-)) (env ((□? (lst)) (□? (f l)))))\""
  80
  50
  18
  12
  30
  11
  41
  1
  8/11
  28
  #f
  117/25
  ((4 4 0) (4 9/2 0) (4 4 0)))
'(shuffled-cache
  0
  map
  2
  52
  ref-or-constructor
  "\"'(eval (match car-v ((cons car-c car-d) (-> car-c <-))) (env ((□? (car-v)))))\""
  #f)
'(shuffled-cache
  0
  map
  2
  52
  match
  "\"'(eval (λ (pair?-v) (-> (match pair?-v ...) <-)) (env ((□? (pair?-v)))))\""
  #f)
'(shuffled-cache
  0
  map
  2
  52
  ref-or-constructor
  "\"'(eval (app cdr (-> lst <-)) (env ((□? (lst)) (□? (f l)))))\""
  #f)
'(shuffled-cache
  0
  map
  2
  25
  52
  app
  "\"'(eval\n  (match (app not (app pair? lst)) (#f) (_ (-> (app nil) <-)))\n  (env ((□? (lst)) (□? (f l)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  2
  52
  app
  "\"'(eval (app (app id f) (-> (app car lst) <-)) (env ((□? (lst)) (□? (f l)))))\""
  #f)
'(shuffled-cache
  0
  map
  2
  25
  52
  app
  "\"'(eval (app cons 7 (-> (app cons 8 (app cons 9 (app nil))) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  2
  25
  52
  app
  "\"'(eval (app cons 9 (-> (app nil) <-)) (env ()))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  2
  25
  52
  app
  "\"'(eval\n  (match pair?-v ((cons pair?-c pair?-d) (-> (app #t) <-)) _)\n  (env ((□? (pair?-v)))))\""
  7
  6
  0
  1
  4
  0
  4
  1
  2/3
  6
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  2
  52
  ref-or-constructor
  "\"'(eval (match (-> cdr-v <-) (cons cdr-c cdr-d)) (env ((□? (cdr-v)))))\""
  #f)
'(shuffled-cache
  0
  map
  2
  52
  app
  "\"'(eval (app not (-> (app pair? lst) <-)) (env ((□? (lst)) (□? (f l)))))\""
  #f)
'(shuffled-cache
  0
  map
  2
  25
  52
  app
  "\"'(eval\n  (app\n   my-map\n   (app id (λ (b) ...))\n   (-> (app cons 7 (app cons 8 (app cons 9 (app nil)))) <-))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  2
  52
  app
  "\"'(eval (λ (a) (-> (app + 1 a) <-)) (env ((□? (a)))))\""
  #f)
'(shuffled-cache
  0
  map
  2
  52
  ref-or-constructor
  "\"'(eval (app + 1 (-> a <-)) (env ((□? (a)))))\""
  #f)
'(shuffled-cache
  0
  map
  2
  25
  52
  let
  "\"'(eval (λ (xx) (-> (let (_) ...) <-)) (env ((□? (xx)))))\""
  31
  17
  7
  7
  11
  6
  17
  1
  49/60
  13
  #f
  89/17
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  map
  2
  25
  52
  ref-or-constructor
  "\"'(eval (let (_) (-> xx <-)) (env ((□? (xx)))))\""
  31
  17
  7
  7
  11
  6
  17
  1
  49/60
  13
  #f
  89/17
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  2
  52
  ref-or-constructor
  "\"'(eval (match (-> car-v <-) (cons car-c car-d)) (env ((□? (car-v)))))\""
  #f)
'(shuffled-cache
  0
  map
  2
  25
  52
  app
  "\"'(eval\n  (match pair?-v (cons pair?-c pair?-d) (_ (-> (app #f) <-)))\n  (env ((□? (pair?-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  2
  25
  52
  app
  "\"'(eval (app cons 3 (-> (app nil) <-)) (env ()))\""
  5
  4
  0
  1
  2
  0
  2
  1
  1/2
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  2
  25
  52
  app
  "\"'(eval\n  (app\n   my-map\n   (-> (app id (λ (b) ...)) <-)\n   (app cons 7 (app cons 8 (app cons 9 (app nil)))))\n  (env ()))\""
  18
  10
  4
  4
  8
  3
  11
  1
  4/5
  10
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  2
  52
  match
  "\"'(eval\n  (λ (lst) (-> (match (app not (app pair? lst)) ...) <-))\n  (env ((□? (lst)) (□? (f l)))))\""
  #f)
'(shuffled-cache
  0
  map
  2
  52
  app
  "\"'(eval (λ (b) (-> (app + 1 b) <-)) (env ((□? (b)))))\""
  #f)
'(shuffled-cache
  0
  map
  2
  25
  52
  app
  "\"'(eval (app cons 1 (-> (app cons 2 (app cons 3 (app nil))) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  2
  25
  52
  lettypes
  "\"'(eval ((top) lettypes (cons ... nil) ...) (env ()))\""
  32
  22
  5
  5
  21
  1
  22
  1
  21/22
  9
  #f
  97/22
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  map
  2
  25
  52
  app
  "\"'(eval\n  (app cons (app (app id f) (app car lst)) (-> (app lp (app cdr lst)) <-))\n  (env ((□? (lst)) (□? (f l)))))\""
  45
  33
  5
  7
  23
  1
  24
  1
  3/4
  13
  #f
  145/33
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  map
  2
  52
  ref-or-constructor
  "\"'(eval (app + 1 (-> b <-)) (env ((□? (b)))))\""
  #f)
'(shuffled-cache
  0
  map
  2
  25
  52
  app
  "\"'(eval\n  (let (... () (_ (-> (app debug-trace) <-)) () ...) ...)\n  (env ((□? (f l)))))\""
  8
  5
  0
  3
  1
  0
  1
  1
  1/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  2
  25
  52
  app
  "\"'(eval (λ () (-> (app #f) <-)) (env ((□? ()))))\""
  11
  7
  0
  4
  1
  0
  1
  1
  1/5
  7
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  2
  52
  ref-or-constructor
  "\"'(eval (app pair? (-> lst <-)) (env ((□? (lst)) (□? (f l)))))\""
  #f)
'(shuffled-cache
  0
  map
  2
  25
  52
  app
  "\"'(eval (app (-> (app id f) <-) (app car lst)) (env ((□? (lst)) (□? (f l)))))\""
  33
  20
  7
  6
  11
  6
  17
  1
  25/36
  16
  #f
  26/5
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  map
  2
  25
  52
  letrec*
  "\"'(eval (lettypes cons ... nil (letrec* (car ... my-map) ...)) (env ()))\""
  66
  41
  16
  9
  31
  11
  42
  1
  27/31
  23
  #f
  195/41
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  map
  2
  25
  52
  app
  "\"'(eval (app cons 2 (-> (app cons 3 (app nil)) <-)) (env ()))\""
  68
  43
  16
  9
  33
  11
  44
  1
  29/33
  25
  #t
  205/43
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  map
  2
  52
  app
  "\"'(eval (app lp (-> (app cdr lst) <-)) (env ((□? (lst)) (□? (f l)))))\""
  #f)
'(shuffled-cache
  1
  map
  2
  25
  52
  app
  "\"'(eval\n  (let (... () (_ (-> (app debug-trace) <-)) () ...) ...)\n  (env ((□? (f l)))))\""
  8
  5
  0
  3
  1
  0
  1
  1
  1/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  2
  25
  52
  app
  "\"'(eval\n  (app\n   my-map\n   (app id (λ (a) ...))\n   (-> (app cons 1 (app cons 2 (app cons 3 (app nil)))) <-))\n  (env ()))\""
  10
  7
  0
  3
  3
  0
  3
  1
  3/7
  7
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  2
  25
  52
  lettypes
  "\"'(eval ((top) lettypes (cons ... nil) ...) (env ()))\""
  39
  27
  5
  7
  22
  1
  23
  1
  22/27
  14
  #f
  122/27
  ((1/2 1 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  map
  2
  52
  ref-or-constructor
  "\"'(eval (match car-v ((cons car-c car-d) (-> car-c <-))) (env ((□? (car-v)))))\""
  #f)
'(shuffled-cache
  1
  map
  2
  25
  52
  app
  "\"'(eval (app cons 3 (-> (app nil) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  2
  25
  52
  app
  "\"'(eval\n  (app\n   my-map\n   (-> (app id (λ (a) ...)) <-)\n   (app cons 1 (app cons 2 (app cons 3 (app nil)))))\n  (env ()))\""
  15
  8
  4
  3
  8
  3
  11
  1
  1
  8
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  2
  52
  app
  "\"'(eval\n  (app cons (-> (app (app id f) (app car lst)) <-) (app lp (app cdr lst)))\n  (env ((□? (lst)) (□? (f l)))))\""
  #f)
'(shuffled-cache
  1
  map
  2
  25
  52
  app
  "\"'(eval\n  (let (...\n        ()\n        (_\n         (->\n          (app\n           my-map\n           (app id (λ (a) ...))\n           (app cons 1 (app cons 2 (app cons 3 (app nil)))))\n          <-))\n        ()\n        ...)\n    ...)\n  (env ()))\""
  27
  17
  5
  5
  16
  1
  17
  1
  16/17
  7
  #f
  75/17
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  map
  2
  25
  52
  app
  "\"'(eval\n  (app\n   my-map\n   (app id (λ (b) ...))\n   (-> (app cons 7 (app cons 8 (app cons 9 (app nil)))) <-))\n  (env ()))\""
  29
  19
  5
  5
  18
  1
  19
  1
  18/19
  9
  #t
  85/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  2
  25
  52
  ref-or-constructor
  "\"'(eval (app id (-> f <-)) (env ((□? (lst)) (□? (f l)))))\""
  59
  33
  18
  8
  31
  11
  42
  1
  83/87
  20
  #f
  14/3
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  map
  2
  52
  app
  "\"'(eval (app lp (-> (app cdr lst) <-)) (env ((□? (lst)) (□? (f l)))))\""
  #f)
'(shuffled-cache
  1
  map
  2
  25
  52
  ref-or-constructor
  "\"'(eval (let (_) (-> xx <-)) (env ((□? (xx)))))\""
  28
  15
  7
  6
  11
  6
  17
  1
  13/15
  13
  #f
  77/15
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  map
  2
  25
  52
  app
  "\"'(eval\n  (app cons (app (app id f) (app car lst)) (-> (app lp (app cdr lst)) <-))\n  (env ((□? (lst)) (□? (f l)))))\""
  65
  38
  16
  11
  18
  11
  29
  1
  13/22
  24
  #f
  91/19
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  map
  2
  52
  ref-or-constructor
  "\"'(eval (match (-> car-v <-) (cons car-c car-d)) (env ((□? (car-v)))))\""
  #f)
'(shuffled-cache
  1
  map
  2
  25
  52
  letrec
  "\"'(eval (let (_) (-> (letrec (lp) ...) <-)) (env ((□? (f l)))))\""
  23
  13
  5
  5
  3
  1
  4
  1
  3/13
  5
  #f
  57/13
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  map
  2
  25
  52
  app
  "\"'(eval (letrec (lp) (-> (app lp l) <-)) (env ((□? (f l)))))\""
  23
  13
  5
  5
  3
  1
  4
  1
  3/13
  5
  #f
  57/13
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  2
  52
  match
  "\"'(eval (λ (car-v) (-> (match car-v ...) <-)) (env ((□? (car-v)))))\""
  #f)
'(shuffled-cache
  1
  map
  2
  25
  52
  app
  "\"'(eval\n  (app\n   my-map\n   (-> (app id (λ (b) ...)) <-)\n   (app cons 7 (app cons 8 (app cons 9 (app nil)))))\n  (env ()))\""
  13
  6
  4
  3
  6
  3
  9
  1
  1
  6
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  2
  25
  52
  app
  "\"'(eval (app cons 8 (-> (app cons 9 (app nil)) <-)) (env ()))\""
  15
  8
  4
  3
  8
  3
  11
  1
  1
  8
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  2
  52
  ref-or-constructor
  "\"'(eval (match (-> pair?-v <-) (cons pair?-c pair?-d) _) (env ((□? (pair?-v)))))\""
  #f)
'(shuffled-cache
  1
  map
  2
  25
  52
  app
  "\"'(eval (λ () (-> (app #f) <-)) (env ((□? ()))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  2
  25
  52
  app
  "\"'(eval\n  (match (app not (app pair? lst)) (#f) (_ (-> (app nil) <-)))\n  (env ((□? (lst)) (□? (f l)))))\""
  7
  4
  0
  3
  0
  0
  0
  1
  0
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  2
  52
  match
  "\"'(eval\n  (λ (lst) (-> (match (app not (app pair? lst)) ...) <-))\n  (env ((□? (lst)) (□? (f l)))))\""
  #f)
'(shuffled-cache
  1
  map
  2
  25
  52
  app
  "\"'(eval (app cons 9 (-> (app nil) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  2
  25
  52
  app
  "\"'(eval\n  (let (_)\n    (->\n     (app\n      my-map\n      (app id (λ (b) ...))\n      (app cons 7 (app cons 8 (app cons 9 (app nil)))))\n     <-))\n  (env ()))\""
  29
  19
  5
  5
  18
  1
  19
  1
  18/19
  9
  #f
  85/19
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  map
  2
  25
  52
  ref-or-constructor
  "\"'(eval (app lp (-> l <-)) (env ((□? (f l)))))\""
  47
  26
  14
  7
  24
  8
  32
  1
  17/18
  13
  #f
  119/26
  ((1 1 0) (1 1 0) (2 2 0)))
'(shuffled-cache
  1
  map
  2
  52
  ref-or-constructor
  "\"'(eval (match (-> cdr-v <-) (cons cdr-c cdr-d)) (env ((□? (cdr-v)))))\""
  #f)
'(shuffled-cache
  1
  map
  2
  52
  ref-or-constructor
  "\"'(eval (app car (-> lst <-)) (env ((□? (lst)) (□? (f l)))))\""
  #f)
'(shuffled-cache
  1
  map
  2
  25
  52
  app
  "\"'(eval (app (-> (app id f) <-) (app car lst)) (env ((□? (lst)) (□? (f l)))))\""
  33
  20
  7
  6
  11
  6
  17
  1
  25/36
  16
  #f
  26/5
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  map
  2
  52
  app
  "\"'(eval (app (app id f) (-> (app car lst) <-)) (env ((□? (lst)) (□? (f l)))))\""
  #f)
'(shuffled-cache
  1
  map
  2
  52
  app
  "\"'(eval (app not (-> (app pair? lst) <-)) (env ((□? (lst)) (□? (f l)))))\""
  #f)
'(shuffled-cache
  1
  map
  2
  25
  52
  letrec*
  "\"'(eval (lettypes cons ... nil (letrec* (car ... my-map) ...)) (env ()))\""
  29
  19
  5
  5
  18
  1
  19
  1
  18/19
  7
  #f
  83/19
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  map
  2
  25
  52
  app
  "\"'(eval\n  (match pair?-v (cons pair?-c pair?-d) (_ (-> (app #f) <-)))\n  (env ((□? (pair?-v)))))\""
  32
  21
  5
  6
  18
  1
  19
  1
  6/7
  9
  #t
  31/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  2
  52
  app
  "\"'(eval\n  (match (-> (app not (app pair? lst)) <-) (#f) _)\n  (env ((□? (lst)) (□? (f l)))))\""
  #f)
'(shuffled-cache
  1
  map
  2
  52
  ref-or-constructor
  "\"'(eval (app pair? (-> lst <-)) (env ((□? (lst)) (□? (f l)))))\""
  #f)
'(shuffled-cache
  1
  map
  2
  25
  52
  let
  "\"'(eval (letrec* (car ... my-map) (-> (let (_) ...) <-)) (env ()))\""
  28
  18
  5
  5
  17
  1
  18
  1
  17/18
  7
  #f
  79/18
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  map
  2
  25
  52
  let
  "\"'(eval (λ (xx) (-> (let (_) ...) <-)) (env ((□? (xx)))))\""
  65
  37
  18
  10
  30
  11
  41
  1
  155/168
  20
  #f
  176/37
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  1
  map
  2
  52
  ref-or-constructor
  "\"'(eval (app + 1 (-> b <-)) (env ((□? (b)))))\""
  #f)
'(shuffled-cache
  1
  map
  2
  52
  ref-or-constructor
  "\"'(eval (app + 1 (-> a <-)) (env ((□? (a)))))\""
  #f)
'(shuffled-cache
  1
  map
  2
  52
  ref-or-constructor
  "\"'(eval (app cdr (-> lst <-)) (env ((□? (lst)) (□? (f l)))))\""
  #f)
'(shuffled-cache
  1
  map
  2
  25
  52
  app
  "\"'(eval (app cons 1 (-> (app cons 2 (app cons 3 (app nil))) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  2
  52
  ref-or-constructor
  "\"'(eval (match cdr-v ((cons cdr-c cdr-d) (-> cdr-d <-))) (env ((□? (cdr-v)))))\""
  #f)
'(shuffled-cache
  1
  map
  2
  25
  52
  app
  "\"'(eval\n  (match\n   (app not (app pair? lst))\n   ((#f)\n    (-> (app cons (app (app id f) (app car lst)) (app lp (app cdr lst))) <-))\n   _)\n  (env ((□? (lst)) (□? (f l)))))\""
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  2
  25
  52
  app
  "\"'(eval (app cons 7 (-> (app cons 8 (app cons 9 (app nil))) <-)) (env ()))\""
  6
  4
  0
  2
  2
  0
  2
  1
  1/2
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  2
  25
  52
  app
  "\"'(eval (app cons 2 (-> (app cons 3 (app nil)) <-)) (env ()))\""
  8
  6
  0
  2
  4
  0
  4
  1
  2/3
  6
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  2
  52
  app
  "\"'(eval (λ (b) (-> (app + 1 b) <-)) (env ((□? (b)))))\""
  #f)
'(shuffled-cache
  1
  map
  2
  52
  match
  "\"'(eval (λ (pair?-v) (-> (match pair?-v ...) <-)) (env ((□? (pair?-v)))))\""
  #f)
'(shuffled-cache
  1
  map
  2
  52
  app
  "\"'(eval (λ (a) (-> (app + 1 a) <-)) (env ((□? (a)))))\""
  #f)
'(shuffled-cache
  1
  map
  2
  52
  match
  "\"'(eval (λ (cdr-v) (-> (match cdr-v ...) <-)) (env ((□? (cdr-v)))))\""
  #f)
'(shuffled-cache
  1
  map
  2
  25
  52
  let
  "\"'(eval (λ (f l) (-> (let (_) ...) <-)) (env ((□? (f l)))))\""
  24
  14
  5
  5
  3
  1
  4
  1
  3/14
  5
  #f
  61/14
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  map
  2
  25
  52
  app
  "\"'(eval\n  (match pair?-v ((cons pair?-c pair?-d) (-> (app #t) <-)) _)\n  (env ((□? (pair?-v)))))\""
  27
  16
  5
  6
  3
  1
  4
  1
  3/16
  7
  #t
  71/16
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  map
  2
  25
  52
  app
  "\"'(eval\n  (let (... () (_ (-> (app debug-trace) <-)) () ...) ...)\n  (env ((□? (xx)))))\""
  35
  21
  5
  9
  4
  1
  5
  1
  4/21
  12
  #t
  32/7
  ((0 0 0) (0 0 0) (0 0 0)))
