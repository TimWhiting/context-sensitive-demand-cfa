'(expression:
  (letrec ((phi
            (λ (x1 x2 x3 x4)
              (app
               and
               (app or x1 (app not x2) (app not x3))
               (app or (app not x2) (app not x3))
               (app or x4 x2))))
           (try (λ (f) (app or (app f (app #t)) (app f (app #f)))))
           (sat-solve-4
            (λ (p)
              (app
               try
               (λ (n1)
                 (app
                  try
                  (λ (n2)
                    (app
                     try
                     (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))))
    (app sat-solve-4 phi)))
(list 'query: '(app (-> not <-) x2) (menv '((□? (x1 x2 x3 x4)))))
'(clos/con: (#<procedure:do-demand-not>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app f (-> (app #f) <-)) (menv '((□? (f)))))
(list 'clos/con: (list (list '(app #f) (menv '((□? (f)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app p n1 (-> n2 <-) n3 n4)
 (menv '((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))
(list
 'clos/con:
 (list
  (list
   '(app #f)
   (menv
    '(((λ (n1)
         (->
          (app
           try
           (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
          <-))
       □?
       (n1)))))
  (list
   '(app #t)
   (menv
    '(((λ (n1)
         (->
          (app
           try
           (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
          <-))
       □?
       (n1)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app not (-> x2 <-)) (menv '((□? (x1 x2 x3 x4)))))
(list
 'clos/con:
 (list
  (list
   '(app #f)
   (menv
    '(((λ (n1)
         (->
          (app
           try
           (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
          <-))
       □?
       (n1)))))
  (list
   '(app #t)
   (menv
    '(((λ (n1)
         (->
          (app
           try
           (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
          <-))
       □?
       (n1)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app or (-> (app not x2) <-) (app not x3))
 (menv '((□? (x1 x2 x3 x4)))))
(list
 'clos/con:
 (list
  (list '(app #f) (menv '(((λ (n4) (-> (app p n1 n2 n3 n4) <-)) □? (n4)))))
  (list '(app #t) (menv '((□? (x1 x2 x3 x4)))))
  (list '(app #f) (menv '((□? (x1 x2 x3 x4)))))
  (list '(app #t) (menv '(((λ (n4) (-> (app p n1 n2 n3 n4) <-)) □? (n4)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app or (-> (app f (app #t)) <-) (app f (app #f)))
 (menv '((□? (f)))))
'(clos/con: ⊥)
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app (-> not <-) x3) (menv '((□? (x1 x2 x3 x4)))))
'(clos/con: (#<procedure:do-demand-not>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(letrec (phi try sat-solve-4) (-> (app sat-solve-4 phi) <-))
 (menv '()))
'(clos/con: ⊥)
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app f (-> (app #t) <-)) (menv '((□? (f)))))
(list 'clos/con: (list (list '(app #t) (menv '((□? (f)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (n1)
    (->
     (app
      try
      (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
     <-))
 (menv '((□? (n1)) (□? (p)))))
'(clos/con: ⊥)
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app (-> #t <-)) (menv '((□? (f)))))
(list 'clos/con: (list (list #t (menv '((□? (f)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   and
   (-> (app or x1 (app not x2) (app not x3)) <-)
   (app or (app not x2) (app not x3))
   (app or x4 x2))
 (menv '((□? (x1 x2 x3 x4)))))
(list
 'query:
 '(app
   and
   (app or x1 (app not x2) (app not x3))
   (-> (app or (app not x2) (app not x3)) <-)
   (app or x4 x2))
 (menv '((□? (x1 x2 x3 x4)))))
(list
 'query:
 '(app (-> try <-) (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))
 (menv '((□? (n2)) (□? (n1)) (□? (p)))))
(list
 'clos/con:
 (list (list '(λ (f) (app or (app f (app #t)) (app f (app #f)))) (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app or x1 (app not x2) (-> (app not x3) <-))
 (menv '((□? (x1 x2 x3 x4)))))
(list
 'clos/con:
 (list
  (list '(app #f) (menv '(((λ (n4) (-> (app p n1 n2 n3 n4) <-)) □? (n4)))))
  (list '(app #t) (menv '(((λ (n4) (-> (app p n1 n2 n3 n4) <-)) □? (n4)))))
  (list '(app #f) (menv '((□? (x1 x2 x3 x4)))))
  (list '(app #t) (menv '((□? (x1 x2 x3 x4)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> try <-) (λ (n4) (app p n1 n2 n3 n4)))
 (menv '((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))
(list
 'clos/con:
 (list (list '(λ (f) (app or (app f (app #t)) (app f (app #f)))) (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app not (-> x3 <-)) (menv '((□? (x1 x2 x3 x4)))))
(list
 'clos/con:
 (list
  (list
   '(app #f)
   (menv
    '(((λ (n2)
         (-> (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))) <-))
       □?
       (n2)))))
  (list
   '(app #t)
   (menv
    '(((λ (n2)
         (-> (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))) <-))
       □?
       (n2)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app (-> f <-) (app #t)) (menv '((□? (f)))))
(list
 'clos/con:
 (list
  (list
   '(λ (n4) (app p n1 n2 n3 n4))
   (menv '((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))
  (list
   '(λ (n1)
      (app
       try
       (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))
   (menv '((□? (p)))))
  (list
   '(λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))
   (menv '((□? (n2)) (□? (n1)) (□? (p)))))
  (list
   '(λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))
   (menv '((□? (n1)) (□? (p)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   (-> try <-)
   (λ (n1)
     (app
      try
      (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))))
 (menv '((□? (p)))))
(list
 'clos/con:
 (list (list '(λ (f) (app or (app f (app #t)) (app f (app #f)))) (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app or x4 (-> x2 <-)) (menv '((□? (x1 x2 x3 x4)))))
(list
 'clos/con:
 (list
  (list
   '(app #f)
   (menv
    '(((λ (n1)
         (->
          (app
           try
           (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
          <-))
       □?
       (n1)))))
  (list
   '(app #t)
   (menv
    '(((λ (n1)
         (->
          (app
           try
           (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
          <-))
       □?
       (n1)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> or <-) (app f (app #t)) (app f (app #f)))
 (menv '((□? (f)))))
'(clos/con: (#<procedure:do-demand-or>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(letrec ((->
            phi
            =
            (λ (x1 x2 x3 x4)
              (app
               and
               (app or x1 (app not x2) (app not x3))
               (app or (app not x2) (app not x3))
               (app or x4 x2)))
            <-)
           try
           sat-solve-4)
    bod)
 (menv '()))
(list
 'clos/con:
 (list
  (list
   '(λ (x1 x2 x3 x4)
      (app
       and
       (app or x1 (app not x2) (app not x3))
       (app or (app not x2) (app not x3))
       (app or x4 x2)))
   (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app (-> not <-) x2) (menv '((□? (x1 x2 x3 x4)))))
'(clos/con: (#<procedure:do-demand-not>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   (-> try <-)
   (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
 (menv '((□? (n1)) (□? (p)))))
(list
 'clos/con:
 (list (list '(λ (f) (app or (app f (app #t)) (app f (app #f)))) (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app or (-> x1 <-) (app not x2) (app not x3))
 (menv '((□? (x1 x2 x3 x4)))))
(list
 'clos/con:
 (list
  (list
   '(app #f)
   (menv
    '(((λ (p)
         (->
          (app
           try
           (λ (n1)
             (app
              try
              (λ (n2)
                (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))))
          <-))
       (letrec (phi try sat-solve-4) (-> (app sat-solve-4 phi) <-))))))
  (list
   '(app #t)
   (menv
    '(((λ (p)
         (->
          (app
           try
           (λ (n1)
             (app
              try
              (λ (n2)
                (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))))
          <-))
       (letrec (phi try sat-solve-4) (-> (app sat-solve-4 phi) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(letrec (phi
           try
           (->
            sat-solve-4
            =
            (λ (p)
              (app
               try
               (λ (n1)
                 (app
                  try
                  (λ (n2)
                    (app
                     try
                     (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))
            <-))
    bod)
 (menv '()))
(list
 'clos/con:
 (list
  (list
   '(λ (p)
      (app
       try
       (λ (n1)
         (app
          try
          (λ (n2)
            (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))
   (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(top) (menv '()))
'(clos/con: ⊥)
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> or <-) x1 (app not x2) (app not x3))
 (menv '((□? (x1 x2 x3 x4)))))
'(clos/con: (#<procedure:do-demand-or>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app p (-> n1 <-) n2 n3 n4)
 (menv '((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))
(list
 'clos/con:
 (list
  (list
   '(app #f)
   (menv
    '(((λ (p)
         (->
          (app
           try
           (λ (n1)
             (app
              try
              (λ (n2)
                (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))))
          <-))
       □?
       (p)))))
  (list
   '(app #t)
   (menv
    '(((λ (p)
         (->
          (app
           try
           (λ (n1)
             (app
              try
              (λ (n2)
                (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))))
          <-))
       □?
       (p)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app (-> sat-solve-4 <-) phi) (menv '()))
(list
 'clos/con:
 (list
  (list
   '(λ (p)
      (app
       try
       (λ (n1)
         (app
          try
          (λ (n2)
            (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))))
   (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   and
   (app or x1 (app not x2) (app not x3))
   (app or (app not x2) (app not x3))
   (-> (app or x4 x2) <-))
 (menv '((□? (x1 x2 x3 x4)))))
(list
 'clos/con:
 (list
  (list
   '(app #t)
   (menv '(((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-)) □? (n3)))))
  (list
   '(app #f)
   (menv
    '(((λ (n4) (-> (app p n1 n2 n3 n4) <-))
       (app or (app f (app #t)) (-> (app f (app #f)) <-))))))
  (list '(app #f) (menv '(((λ (n4) (-> (app p n1 n2 n3 n4) <-)) □? (n4)))))
  (list '(app #f) (menv '((□? (x1 x2 x3 x4)))))
  (list
   '(app #t)
   (menv
    '(((λ (n1)
         (->
          (app
           try
           (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
          <-))
       □?
       (n1)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (n2) (-> (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))) <-))
 (menv '((□? (n2)) (□? (n1)) (□? (p)))))
'(clos/con: ⊥)
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app (-> or <-) x4 x2) (menv '((□? (x1 x2 x3 x4)))))
'(clos/con: (#<procedure:do-demand-or>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app try (-> (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))) <-))
 (menv '((□? (n2)) (□? (n1)) (□? (p)))))
(list
 'clos/con:
 (list
  (list
   '(λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))
   (menv '((□? (n2)) (□? (n1)) (□? (p)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (x1 x2 x3 x4)
    (->
     (app
      and
      (app or x1 (app not x2) (app not x3))
      (app or (app not x2) (app not x3))
      (app or x4 x2))
     <-))
 (menv '((□? (x1 x2 x3 x4)))))
(list
 'query:
 '(app (-> p <-) n1 n2 n3 n4)
 (menv '((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))
(list
 'clos/con:
 (list
  (list
   '(λ (x1 x2 x3 x4)
      (app
       and
       (app or x1 (app not x2) (app not x3))
       (app or (app not x2) (app not x3))
       (app or x4 x2)))
   (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> or <-) (app not x2) (app not x3))
 (menv '((□? (x1 x2 x3 x4)))))
'(clos/con: (#<procedure:do-demand-or>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(letrec (phi
           (-> try = (λ (f) (app or (app f (app #t)) (app f (app #f)))) <-)
           sat-solve-4)
    bod)
 (menv '()))
(list
 'clos/con:
 (list (list '(λ (f) (app or (app f (app #t)) (app f (app #f)))) (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-))
 (menv '((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))
'(clos/con: ⊥)
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app (-> #f <-)) (menv '((□? (f)))))
(list 'clos/con: (list (list #f (menv '((□? (f)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (n4) (-> (app p n1 n2 n3 n4) <-))
 (menv '((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))
(list
 'query:
 '(app
   try
   (->
    (λ (n1)
      (app
       try
       (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))
    <-))
 (menv '((□? (p)))))
(list
 'clos/con:
 (list
  (list
   '(λ (n1)
      (app
       try
       (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))
   (menv '((□? (p)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-))
 (menv '((□? (f)))))
'(clos/con: ⊥)
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app sat-solve-4 (-> phi <-)) (menv '()))
(list
 'clos/con:
 (list
  (list
   '(λ (x1 x2 x3 x4)
      (app
       and
       (app or x1 (app not x2) (app not x3))
       (app or (app not x2) (app not x3))
       (app or x4 x2)))
   (menv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app (-> f <-) (app #f)) (menv '((□? (f)))))
(list
 'clos/con:
 (list
  (list
   '(λ (n4) (app p n1 n2 n3 n4))
   (menv '((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))
  (list
   '(λ (n1)
      (app
       try
       (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))))
   (menv '((□? (p)))))
  (list
   '(λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))
   (menv '((□? (n2)) (□? (n1)) (□? (p)))))
  (list
   '(λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))
   (menv '((□? (n1)) (□? (p)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app (-> not <-) x3) (menv '((□? (x1 x2 x3 x4)))))
'(clos/con: (#<procedure:do-demand-not>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app not (-> x2 <-)) (menv '((□? (x1 x2 x3 x4)))))
(list
 'clos/con:
 (list
  (list
   '(app #f)
   (menv
    '(((λ (n1)
         (->
          (app
           try
           (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
          <-))
       □?
       (n1)))))
  (list
   '(app #t)
   (menv
    '(((λ (n1)
         (->
          (app
           try
           (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))
          <-))
       □?
       (n1)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app or (app f (app #t)) (-> (app f (app #f)) <-))
 (menv '((□? (f)))))
'(clos/con: ⊥)
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app p n1 n2 (-> n3 <-) n4)
 (menv '((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))
(list
 'clos/con:
 (list
  (list
   '(app #f)
   (menv
    '(((λ (n2)
         (-> (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))) <-))
       □?
       (n2)))))
  (list
   '(app #t)
   (menv
    '(((λ (n2)
         (-> (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))) <-))
       □?
       (n2)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app or x1 (-> (app not x2) <-) (app not x3))
 (menv '((□? (x1 x2 x3 x4)))))
(list
 'clos/con:
 (list
  (list '(app #t) (menv '(((λ (n4) (-> (app p n1 n2 n3 n4) <-)) □? (n4)))))
  (list '(app #f) (menv '((□? (x1 x2 x3 x4)))))
  (list '(app #f) (menv '(((λ (n4) (-> (app p n1 n2 n3 n4) <-)) □? (n4)))))
  (list '(app #t) (menv '((□? (x1 x2 x3 x4)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app try (-> (λ (n4) (app p n1 n2 n3 n4)) <-))
 (menv '((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))
(list
 'clos/con:
 (list
  (list
   '(λ (n4) (app p n1 n2 n3 n4))
   (menv '((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app or (-> x4 <-) x2) (menv '((□? (x1 x2 x3 x4)))))
(list
 'clos/con:
 (list
  (list
   '(app #f)
   (menv '(((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-)) □? (n3)))))
  (list
   '(app #t)
   (menv
    '(((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-)) □? (n3)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app not (-> x3 <-)) (menv '((□? (x1 x2 x3 x4)))))
(list
 'clos/con:
 (list
  (list
   '(app #f)
   (menv
    '(((λ (n2)
         (-> (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))) <-))
       □?
       (n2)))))
  (list
   '(app #t)
   (menv
    '(((λ (n2)
         (-> (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))) <-))
       □?
       (n2)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app or (app not x2) (-> (app not x3) <-))
 (menv '((□? (x1 x2 x3 x4)))))
(list
 'clos/con:
 (list
  (list '(app #f) (menv '(((λ (n4) (-> (app p n1 n2 n3 n4) <-)) □? (n4)))))
  (list '(app #t) (menv '((□? (x1 x2 x3 x4)))))
  (list '(app #t) (menv '(((λ (n4) (-> (app p n1 n2 n3 n4) <-)) □? (n4)))))
  (list '(app #f) (menv '((□? (x1 x2 x3 x4)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   try
   (-> (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))) <-))
 (menv '((□? (n1)) (□? (p)))))
(list
 'clos/con:
 (list
  (list
   '(λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4))))))
   (menv '((□? (n1)) (□? (p)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (p)
    (->
     (app
      try
      (λ (n1)
        (app
         try
         (λ (n2) (app try (λ (n3) (app try (λ (n4) (app p n1 n2 n3 n4)))))))))
     <-))
 (menv '((□? (p)))))
'(clos/con: ⊥)
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app p n1 n2 n3 (-> n4 <-))
 (menv '((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))
(list
 'clos/con:
 (list
  (list
   '(app #f)
   (menv '(((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-)) □? (n3)))))
  (list
   '(app #t)
   (menv
    '(((λ (n3) (-> (app try (λ (n4) (app p n1 n2 n3 n4))) <-)) □? (n3)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   (-> and <-)
   (app or x1 (app not x2) (app not x3))
   (app or (app not x2) (app not x3))
   (app or x4 x2))
 (menv '((□? (x1 x2 x3 x4)))))
'(clos/con: (#<procedure:do-demand-and>))
'(literals: (⊥ ⊥ ⊥ ⊥))
