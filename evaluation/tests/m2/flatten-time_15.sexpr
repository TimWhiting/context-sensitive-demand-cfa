'(clean-cache
  flatten
  2
  59
  lettypes
  "\"'(eval ((top) lettypes (cons ... nil) ...) (env ()))\""
  #f)
'(clean-cache
  flatten
  2
  59
  letrec*
  "\"'(eval (lettypes cons ... nil (letrec* (car ... flatten) ...)) (env ()))\""
  #f)
'(clean-cache
  flatten
  2
  59
  match
  "\"'(eval (λ (x) (-> (match (app pair? x) ...) <-)) (env ((□? (x)))))\""
  #f)
'(clean-cache
  flatten
  2
  59
  app
  "\"'(eval\n  (match\n   (app pair? x)\n   (#f)\n   (_\n    (-> (app append (app flatten (app car x)) (app flatten (app cdr x))) <-)))\n  (env ((□? (x)))))\""
  #f)
'(clean-cache
  flatten
  2
  59
  app
  "\"'(eval\n  (app append (app flatten (app car x)) (-> (app flatten (app cdr x)) <-))\n  (env ((□? (x)))))\""
  #f)
'(clean-cache
  flatten
  2
  15
  59
  app
  "\"'(eval (app flatten (-> (app cdr x) <-)) (env ((□? (x)))))\""
  116
  101
  10
  5
  95
  4
  99
  1
  367/376
  58
  #f
  288/101
  ((27/2 27/2 0) (14 14 0) (27/2 27/2 0)))
'(clean-cache
  flatten
  2
  15
  59
  ref-or-constructor
  "\"'(eval (app cdr (-> x <-)) (env ((□? (x)))))\""
  110
  96
  10
  4
  95
  4
  99
  1
  375/376
  63
  #f
  181/96
  ((5 5 0) (5 5 0) (5 5 0)))
'(clean-cache
  flatten
  2
  59
  app
  "\"'(eval\n  (app append (-> (app flatten (app car x)) <-) (app flatten (app cdr x)))\n  (env ((□? (x)))))\""
  #f)
'(clean-cache
  flatten
  2
  15
  59
  app
  "\"'(eval (app flatten (-> (app car x) <-)) (env ((□? (x)))))\""
  116
  101
  10
  5
  95
  4
  99
  1
  367/376
  58
  #f
  296/101
  ((14 14 0) (27/2 27/2 0) (14 14 0)))
'(clean-cache
  flatten
  2
  15
  59
  ref-or-constructor
  "\"'(eval (app car (-> x <-)) (env ((□? (x)))))\""
  110
  96
  10
  4
  95
  4
  99
  1
  375/376
  63
  #f
  181/96
  ((5 5 0) (5 5 0) (11/2 11/2 0)))
'(clean-cache
  flatten
  2
  59
  match
  "\"'(eval\n  (match (app pair? x) ((#f) (-> (match (app null? x) ...) <-)) _)\n  (env ((□? (x)))))\""
  #f)
'(clean-cache
  flatten
  2
  15
  59
  ref-or-constructor
  "\"'(eval (match (app null? x) (#f) (_ (-> x <-))) (env ((□? (x)))))\""
  110
  96
  10
  4
  95
  4
  99
  1
  47/48
  63
  #f
  181/96
  ((5 5 0) (5 5 0) (5 5 0)))
'(clean-cache
  flatten
  2
  15
  59
  app
  "\"'(eval\n  (match (app null? x) ((#f) (-> (app cons x (app nil)) <-)) _)\n  (env ((□? (x)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  flatten
  2
  15
  59
  app
  "\"'(eval (app cons x (-> (app nil) <-)) (env ((□? (x)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  flatten
  2
  15
  59
  ref-or-constructor
  "\"'(eval (app cons (-> x <-) (app nil)) (env ((□? (x)))))\""
  110
  96
  10
  4
  95
  4
  99
  1
  47/48
  63
  #f
  181/96
  ((5 5 0) (5 5 0) (5 5 0)))
'(clean-cache
  flatten
  2
  15
  59
  app
  "\"'(eval (match (-> (app null? x) <-) (#f) _) (env ((□? (x)))))\""
  156
  137
  13
  6
  128
  5
  133
  1
  217/228
  91
  #f
  279/137
  ((14 14 0) (14 14 0) (14 14 0)))
'(clean-cache
  flatten
  2
  15
  59
  ref-or-constructor
  "\"'(eval (app null? (-> x <-)) (env ((□? (x)))))\""
  110
  96
  10
  4
  95
  4
  99
  1
  47/48
  63
  #f
  181/96
  ((5 5 0) (5 5 0) (5 5 0)))
'(clean-cache
  flatten
  2
  15
  59
  app
  "\"'(eval (match (-> (app pair? x) <-) (#f) _) (env ((□? (x)))))\""
  155
  137
  12
  6
  128
  5
  133
  1
  217/228
  91
  #f
  279/137
  ((25/2 25/2 0) (12 12 0) (12 12 0)))
'(clean-cache
  flatten
  2
  15
  59
  ref-or-constructor
  "\"'(eval (app pair? (-> x <-)) (env ((□? (x)))))\""
  110
  96
  10
  4
  95
  4
  99
  1
  47/48
  63
  #f
  181/96
  ((5 5 0) (11/2 11/2 0) (11/2 11/2 0)))
'(clean-cache
  flatten
  2
  59
  match
  "\"'(eval (λ (x y) (-> (match (app null? x) ...) <-)) (env ((□? (x y)))))\""
  #f)
'(clean-cache
  flatten
  2
  59
  ref-or-constructor
  "\"'(eval (match (app null? x) (#f) (_ (-> y <-))) (env ((□? (x y)))))\""
  #f)
'(clean-cache
  flatten
  2
  15
  59
  app
  "\"'(eval\n  (match\n   (app null? x)\n   ((#f) (-> (app cons (app car x) (app append (app cdr x) y)) <-))\n   _)\n  (env ((□? (x y)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  flatten
  2
  59
  app
  "\"'(eval\n  (app cons (app car x) (-> (app append (app cdr x) y) <-))\n  (env ((□? (x y)))))\""
  #f)
'(clean-cache
  flatten
  2
  59
  ref-or-constructor
  "\"'(eval (app append (app cdr x) (-> y <-)) (env ((□? (x y)))))\""
  #f)
'(clean-cache
  flatten
  2
  59
  app
  "\"'(eval (app append (-> (app cdr x) <-) y) (env ((□? (x y)))))\""
  #f)
'(clean-cache
  flatten
  2
  59
  ref-or-constructor
  "\"'(eval (app cdr (-> x <-)) (env ((□? (x y)))))\""
  #f)
'(clean-cache
  flatten
  2
  59
  app
  "\"'(eval\n  (app cons (-> (app car x) <-) (app append (app cdr x) y))\n  (env ((□? (x y)))))\""
  #f)
'(clean-cache
  flatten
  2
  59
  ref-or-constructor
  "\"'(eval (app car (-> x <-)) (env ((□? (x y)))))\""
  #f)
'(clean-cache
  flatten
  2
  59
  app
  "\"'(eval (match (-> (app null? x) <-) (#f) _) (env ((□? (x y)))))\""
  #f)
'(clean-cache
  flatten
  2
  59
  ref-or-constructor
  "\"'(eval (app null? (-> x <-)) (env ((□? (x y)))))\""
  #f)
'(clean-cache
  flatten
  2
  59
  match
  "\"'(eval (λ (null?-v) (-> (match null?-v ...) <-)) (env ((□? (null?-v)))))\""
  #f)
'(clean-cache
  flatten
  2
  15
  59
  app
  "\"'(eval (match null?-v (nil) (_ (-> (app #f) <-))) (env ((□? (null?-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  flatten
  2
  15
  59
  app
  "\"'(eval (match null?-v ((nil) (-> (app #t) <-)) _) (env ((□? (null?-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  flatten
  2
  59
  ref-or-constructor
  "\"'(eval (match (-> null?-v <-) (nil) _) (env ((□? (null?-v)))))\""
  #f)
'(clean-cache
  flatten
  2
  15
  59
  match
  "\"'(eval (λ (pair?-v) (-> (match pair?-v ...) <-)) (env ((□? (pair?-v)))))\""
  145
  127
  12
  6
  117
  5
  122
  1
  2047/2160
  84
  #f
  276/127
  ((10 10 0) (10 10 0) (10 10 0)))
'(clean-cache
  flatten
  2
  15
  59
  app
  "\"'(eval\n  (match pair?-v (cons pair?-c pair?-d) (_ (-> (app #f) <-)))\n  (env ((□? (pair?-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  flatten
  2
  15
  59
  app
  "\"'(eval\n  (match pair?-v ((cons pair?-c pair?-d) (-> (app #t) <-)) _)\n  (env ((□? (pair?-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  flatten
  2
  15
  59
  ref-or-constructor
  "\"'(eval (match (-> pair?-v <-) (cons pair?-c pair?-d) _) (env ((□? (pair?-v)))))\""
  122
  104
  12
  6
  102
  5
  107
  1
  383/392
  66
  #f
  2
  ((6 6 0) (6 6 0) (6 6 0)))
'(clean-cache
  flatten
  2
  59
  match
  "\"'(eval (λ (cdr-v) (-> (match cdr-v ...) <-)) (env ((□? (cdr-v)))))\""
  #f)
'(clean-cache
  flatten
  2
  59
  ref-or-constructor
  "\"'(eval (match cdr-v ((cons cdr-c cdr-d) (-> cdr-d <-))) (env ((□? (cdr-v)))))\""
  #f)
'(clean-cache
  flatten
  2
  59
  ref-or-constructor
  "\"'(eval (match (-> cdr-v <-) (cons cdr-c cdr-d)) (env ((□? (cdr-v)))))\""
  #f)
'(clean-cache
  flatten
  2
  59
  match
  "\"'(eval (λ (car-v) (-> (match car-v ...) <-)) (env ((□? (car-v)))))\""
  #f)
'(clean-cache
  flatten
  2
  59
  ref-or-constructor
  "\"'(eval (match car-v ((cons car-c car-d) (-> car-c <-))) (env ((□? (car-v)))))\""
  #f)
'(clean-cache
  flatten
  2
  59
  ref-or-constructor
  "\"'(eval (match (-> car-v <-) (cons car-c car-d)) (env ((□? (car-v)))))\""
  #f)
'(clean-cache
  flatten
  2
  59
  app
  "\"'(eval\n  (letrec*\n   (car ... flatten)\n   (->\n    (app\n     flatten\n     (app\n      cons\n      (app cons 1 (app cons 2 (app nil)))\n      (app\n       cons\n       (app\n        cons\n        (app cons (app cons 3 (app cons 4 (app cons 5 (app nil)))) (app nil))\n        (app nil))\n       (app nil))))\n    <-))\n  (env ()))\""
  #f)
'(clean-cache
  flatten
  2
  15
  59
  app
  "\"'(eval\n  (app\n   flatten\n   (->\n    (app\n     cons\n     (app cons 1 (app cons 2 (app nil)))\n     (app\n      cons\n      (app\n       cons\n       (app cons (app cons 3 (app cons 4 (app cons 5 (app nil)))) (app nil))\n       (app nil))\n      (app nil)))\n    <-))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  flatten
  2
  15
  59
  app
  "\"'(eval\n  (app\n   cons\n   (app cons 1 (app cons 2 (app nil)))\n   (->\n    (app\n     cons\n     (app\n      cons\n      (app cons (app cons 3 (app cons 4 (app cons 5 (app nil)))) (app nil))\n      (app nil))\n     (app nil))\n    <-))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  flatten
  2
  15
  59
  app
  "\"'(eval\n  (app\n   cons\n   (app\n    cons\n    (app cons (app cons 3 (app cons 4 (app cons 5 (app nil)))) (app nil))\n    (app nil))\n   (-> (app nil) <-))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  flatten
  2
  15
  59
  app
  "\"'(eval\n  (app\n   cons\n   (->\n    (app\n     cons\n     (app cons (app cons 3 (app cons 4 (app cons 5 (app nil)))) (app nil))\n     (app nil))\n    <-)\n   (app nil))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  flatten
  2
  15
  59
  app
  "\"'(eval\n  (app\n   cons\n   (app cons (app cons 3 (app cons 4 (app cons 5 (app nil)))) (app nil))\n   (-> (app nil) <-))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  flatten
  2
  15
  59
  app
  "\"'(eval\n  (app\n   cons\n   (->\n    (app cons (app cons 3 (app cons 4 (app cons 5 (app nil)))) (app nil))\n    <-)\n   (app nil))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  flatten
  2
  15
  59
  app
  "\"'(eval\n  (app cons (app cons 3 (app cons 4 (app cons 5 (app nil)))) (-> (app nil) <-))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  flatten
  2
  15
  59
  app
  "\"'(eval\n  (app cons (-> (app cons 3 (app cons 4 (app cons 5 (app nil)))) <-) (app nil))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  flatten
  2
  15
  59
  app
  "\"'(eval (app cons 3 (-> (app cons 4 (app cons 5 (app nil))) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  flatten
  2
  15
  59
  app
  "\"'(eval (app cons 4 (-> (app cons 5 (app nil)) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  flatten
  2
  15
  59
  app
  "\"'(eval (app cons 5 (-> (app nil) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  flatten
  2
  15
  59
  app
  "\"'(eval\n  (app\n   cons\n   (-> (app cons 1 (app cons 2 (app nil))) <-)\n   (app\n    cons\n    (app\n     cons\n     (app cons (app cons 3 (app cons 4 (app cons 5 (app nil)))) (app nil))\n     (app nil))\n    (app nil)))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  flatten
  2
  15
  59
  app
  "\"'(eval (app cons 1 (-> (app cons 2 (app nil)) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  flatten
  2
  15
  59
  app
  "\"'(eval (app cons 2 (-> (app nil) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  flatten
  2
  59
  app
  "\"'(eval\n  (match\n   (app pair? x)\n   (#f)\n   (_\n    (-> (app append (app flatten (app car x)) (app flatten (app cdr x))) <-)))\n  (env ((□? (x)))))\""
  #f)
'(shuffled-cache
  0
  flatten
  2
  59
  letrec*
  "\"'(eval (lettypes cons ... nil (letrec* (car ... flatten) ...)) (env ()))\""
  #f)
'(shuffled-cache
  0
  flatten
  2
  15
  59
  app
  "\"'(eval (match null?-v ((nil) (-> (app #t) <-)) _) (env ((□? (null?-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  flatten
  2
  15
  59
  ref-or-constructor
  "\"'(eval (app pair? (-> x <-)) (env ((□? (x)))))\""
  113
  98
  10
  5
  95
  4
  99
  1
  47/50
  65
  #f
  183/98
  ((5 5 0) (5 5 0) (5 5 0)))
'(shuffled-cache
  0
  flatten
  2
  59
  app
  "\"'(eval\n  (app cons (app car x) (-> (app append (app cdr x) y) <-))\n  (env ((□? (x y)))))\""
  #f)
'(shuffled-cache
  0
  flatten
  2
  15
  59
  app
  "\"'(eval\n  (app\n   cons\n   (->\n    (app\n     cons\n     (app cons (app cons 3 (app cons 4 (app cons 5 (app nil)))) (app nil))\n     (app nil))\n    <-)\n   (app nil))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  flatten
  2
  15
  59
  app
  "\"'(eval\n  (app\n   cons\n   (app\n    cons\n    (app cons (app cons 3 (app cons 4 (app cons 5 (app nil)))) (app nil))\n    (app nil))\n   (-> (app nil) <-))\n  (env ()))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  4
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  flatten
  2
  15
  59
  app
  "\"'(eval (app cons 1 (-> (app cons 2 (app nil)) <-)) (env ()))\""
  6
  6
  0
  0
  6
  0
  6
  1
  1
  6
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  flatten
  2
  15
  59
  app
  "\"'(eval\n  (match pair?-v ((cons pair?-c pair?-d) (-> (app #t) <-)) _)\n  (env ((□? (pair?-v)))))\""
  9
  8
  0
  1
  6
  0
  6
  1
  3/4
  8
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  flatten
  2
  15
  59
  app
  "\"'(eval (app cons 4 (-> (app cons 5 (app nil)) <-)) (env ()))\""
  11
  10
  0
  1
  8
  0
  8
  1
  4/5
  10
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  flatten
  2
  59
  app
  "\"'(eval\n  (app append (-> (app flatten (app car x)) <-) (app flatten (app cdr x)))\n  (env ((□? (x)))))\""
  #f)
'(shuffled-cache
  0
  flatten
  2
  15
  59
  app
  "\"'(eval (app flatten (-> (app cdr x) <-)) (env ((□? (x)))))\""
  116
  101
  10
  5
  95
  4
  99
  1
  367/376
  58
  #f
  288/101
  ((27/2 27/2 0) (27/2 27/2 0) (27/2 27/2 0)))
'(shuffled-cache
  0
  flatten
  2
  15
  59
  app
  "\"'(eval (app cons 5 (-> (app nil) <-)) (env ()))\""
  116
  101
  10
  5
  95
  4
  99
  1
  367/376
  58
  #t
  288/101
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  flatten
  2
  59
  app
  "\"'(eval\n  (app append (app flatten (app car x)) (-> (app flatten (app cdr x)) <-))\n  (env ((□? (x)))))\""
  #f)
'(shuffled-cache
  0
  flatten
  2
  15
  59
  ref-or-constructor
  "\"'(eval (match (app null? x) (#f) (_ (-> x <-))) (env ((□? (x)))))\""
  110
  96
  10
  4
  95
  4
  99
  1
  47/48
  63
  #f
  181/96
  ((5 5 0) (5 5 0) (5 5 0)))
'(shuffled-cache
  0
  flatten
  2
  15
  59
  ref-or-constructor
  "\"'(eval (app null? (-> x <-)) (env ((□? (x)))))\""
  111
  97
  10
  4
  95
  4
  99
  1
  47/49
  63
  #f
  193/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  flatten
  2
  15
  59
  ref-or-constructor
  "\"'(eval (app car (-> x <-)) (env ((□? (x)))))\""
  112
  98
  10
  4
  95
  4
  99
  1
  375/392
  63
  #f
  205/98
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  flatten
  2
  15
  59
  app
  "\"'(eval (app cons 2 (-> (app nil) <-)) (env ()))\""
  112
  98
  10
  4
  95
  4
  99
  1
  375/392
  63
  #t
  205/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  flatten
  2
  15
  59
  app
  "\"'(eval\n  (app cons (-> (app cons 3 (app cons 4 (app cons 5 (app nil)))) <-) (app nil))\n  (env ()))\""
  112
  98
  10
  4
  95
  4
  99
  1
  375/392
  63
  #t
  205/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  flatten
  2
  15
  59
  app
  "\"'(eval\n  (app\n   cons\n   (app cons 1 (app cons 2 (app nil)))\n   (->\n    (app\n     cons\n     (app\n      cons\n      (app cons (app cons 3 (app cons 4 (app cons 5 (app nil)))) (app nil))\n      (app nil))\n     (app nil))\n    <-))\n  (env ()))\""
  112
  98
  10
  4
  95
  4
  99
  1
  375/392
  63
  #t
  205/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  flatten
  2
  59
  app
  "\"'(eval\n  (letrec*\n   (car ... flatten)\n   (->\n    (app\n     flatten\n     (app\n      cons\n      (app cons 1 (app cons 2 (app nil)))\n      (app\n       cons\n       (app\n        cons\n        (app cons (app cons 3 (app cons 4 (app cons 5 (app nil)))) (app nil))\n        (app nil))\n       (app nil))))\n    <-))\n  (env ()))\""
  #f)
'(shuffled-cache
  0
  flatten
  2
  15
  59
  app
  "\"'(eval\n  (match (app null? x) ((#f) (-> (app cons x (app nil)) <-)) _)\n  (env ((□? (x)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  flatten
  2
  59
  ref-or-constructor
  "\"'(eval (app append (app cdr x) (-> y <-)) (env ((□? (x y)))))\""
  #f)
'(shuffled-cache
  0
  flatten
  2
  59
  ref-or-constructor
  "\"'(eval (match (app null? x) (#f) (_ (-> y <-))) (env ((□? (x y)))))\""
  #f)
'(shuffled-cache
  0
  flatten
  2
  15
  59
  app
  "\"'(eval\n  (app\n   flatten\n   (->\n    (app\n     cons\n     (app cons 1 (app cons 2 (app nil)))\n     (app\n      cons\n      (app\n       cons\n       (app cons (app cons 3 (app cons 4 (app cons 5 (app nil)))) (app nil))\n       (app nil))\n      (app nil)))\n    <-))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  flatten
  2
  59
  match
  "\"'(eval (λ (car-v) (-> (match car-v ...) <-)) (env ((□? (car-v)))))\""
  #f)
'(shuffled-cache
  0
  flatten
  2
  15
  59
  app
  "\"'(eval (app cons x (-> (app nil) <-)) (env ((□? (x)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  flatten
  2
  15
  59
  app
  "\"'(eval (app cons 3 (-> (app cons 4 (app cons 5 (app nil))) <-)) (env ()))\""
  5
  4
  0
  1
  2
  0
  2
  1
  1/2
  4
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  flatten
  2
  15
  59
  app
  "\"'(eval\n  (app cons (app cons 3 (app cons 4 (app cons 5 (app nil)))) (-> (app nil) <-))\n  (env ()))\""
  7
  6
  0
  1
  4
  0
  4
  1
  2/3
  6
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  flatten
  2
  15
  59
  app
  "\"'(eval\n  (app\n   cons\n   (->\n    (app cons (app cons 3 (app cons 4 (app cons 5 (app nil)))) (app nil))\n    <-)\n   (app nil))\n  (env ()))\""
  9
  8
  0
  1
  6
  0
  6
  1
  3/4
  8
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  flatten
  2
  59
  match
  "\"'(eval (λ (cdr-v) (-> (match cdr-v ...) <-)) (env ((□? (cdr-v)))))\""
  #f)
'(shuffled-cache
  0
  flatten
  2
  15
  59
  ref-or-constructor
  "\"'(eval (app cdr (-> x <-)) (env ((□? (x)))))\""
  110
  96
  10
  4
  95
  4
  99
  1
  375/376
  63
  #f
  181/96
  ((11/2 11/2 0) (11/2 11/2 0) (11/2 11/2 0)))
'(shuffled-cache
  0
  flatten
  2
  15
  59
  app
  "\"'(eval\n  (match\n   (app null? x)\n   ((#f) (-> (app cons (app car x) (app append (app cdr x) y)) <-))\n   _)\n  (env ((□? (x y)))))\""
  112
  98
  10
  4
  95
  4
  99
  1
  375/392
  65
  #t
  183/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  flatten
  2
  15
  59
  app
  "\"'(eval\n  (app\n   cons\n   (app cons (app cons 3 (app cons 4 (app cons 5 (app nil)))) (app nil))\n   (-> (app nil) <-))\n  (env ()))\""
  112
  98
  10
  4
  95
  4
  99
  1
  375/392
  65
  #t
  183/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  flatten
  2
  59
  ref-or-constructor
  "\"'(eval (match car-v ((cons car-c car-d) (-> car-c <-))) (env ((□? (car-v)))))\""
  #f)
'(shuffled-cache
  0
  flatten
  2
  15
  59
  app
  "\"'(eval (match (-> (app pair? x) <-) (#f) _) (env ((□? (x)))))\""
  155
  137
  12
  6
  128
  5
  133
  1
  217/228
  91
  #f
  279/137
  ((12 12 0) (12 12 0) (12 12 0)))
'(shuffled-cache
  0
  flatten
  2
  59
  ref-or-constructor
  "\"'(eval (match (-> null?-v <-) (nil) _) (env ((□? (null?-v)))))\""
  #f)
'(shuffled-cache
  0
  flatten
  2
  15
  59
  ref-or-constructor
  "\"'(eval (app cons (-> x <-) (app nil)) (env ((□? (x)))))\""
  110
  96
  10
  4
  95
  4
  99
  1
  47/48
  63
  #f
  181/96
  ((5 5 0) (5 5 0) (5 5 0)))
'(shuffled-cache
  0
  flatten
  2
  59
  app
  "\"'(eval (match (-> (app null? x) <-) (#f) _) (env ((□? (x y)))))\""
  #f)
'(shuffled-cache
  0
  flatten
  2
  15
  59
  app
  "\"'(eval\n  (match pair?-v (cons pair?-c pair?-d) (_ (-> (app #f) <-)))\n  (env ((□? (pair?-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  flatten
  2
  59
  match
  "\"'(eval\n  (match (app pair? x) ((#f) (-> (match (app null? x) ...) <-)) _)\n  (env ((□? (x)))))\""
  #f)
'(shuffled-cache
  0
  flatten
  2
  59
  ref-or-constructor
  "\"'(eval (app cdr (-> x <-)) (env ((□? (x y)))))\""
  #f)
'(shuffled-cache
  0
  flatten
  2
  59
  app
  "\"'(eval (app append (-> (app cdr x) <-) y) (env ((□? (x y)))))\""
  #f)
'(shuffled-cache
  0
  flatten
  2
  15
  59
  app
  "\"'(eval (match null?-v (nil) (_ (-> (app #f) <-))) (env ((□? (null?-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  flatten
  2
  15
  59
  app
  "\"'(eval\n  (app\n   cons\n   (-> (app cons 1 (app cons 2 (app nil))) <-)\n   (app\n    cons\n    (app\n     cons\n     (app cons (app cons 3 (app cons 4 (app cons 5 (app nil)))) (app nil))\n     (app nil))\n    (app nil)))\n  (env ()))\""
  5
  4
  0
  1
  2
  0
  2
  1
  1/2
  4
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  flatten
  2
  15
  59
  app
  "\"'(eval (match (-> (app null? x) <-) (#f) _) (env ((□? (x)))))\""
  159
  139
  13
  7
  128
  5
  133
  1
  1079/1140
  93
  #f
  281/139
  ((14 14 0) (14 14 0) (14 14 0)))
'(shuffled-cache
  0
  flatten
  2
  15
  59
  ref-or-constructor
  "\"'(eval (match (-> pair?-v <-) (cons pair?-c pair?-d) _) (env ((□? (pair?-v)))))\""
  170
  147
  15
  8
  135
  6
  141
  1
  1099/1180
  96
  #f
  44/21
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  flatten
  2
  59
  lettypes
  "\"'(eval ((top) lettypes (cons ... nil) ...) (env ()))\""
  #f)
'(shuffled-cache
  0
  flatten
  2
  59
  match
  "\"'(eval (λ (x y) (-> (match (app null? x) ...) <-)) (env ((□? (x y)))))\""
  #f)
'(shuffled-cache
  0
  flatten
  2
  59
  ref-or-constructor
  "\"'(eval (app car (-> x <-)) (env ((□? (x y)))))\""
  #f)
'(shuffled-cache
  0
  flatten
  2
  59
  match
  "\"'(eval (λ (null?-v) (-> (match null?-v ...) <-)) (env ((□? (null?-v)))))\""
  #f)
'(shuffled-cache
  0
  flatten
  2
  59
  ref-or-constructor
  "\"'(eval (match (-> car-v <-) (cons car-c car-d)) (env ((□? (car-v)))))\""
  #f)
'(shuffled-cache
  0
  flatten
  2
  59
  match
  "\"'(eval (λ (x) (-> (match (app pair? x) ...) <-)) (env ((□? (x)))))\""
  #f)
'(shuffled-cache
  0
  flatten
  2
  15
  59
  match
  "\"'(eval (λ (pair?-v) (-> (match pair?-v ...) <-)) (env ((□? (pair?-v)))))\""
  145
  127
  12
  6
  117
  5
  122
  1
  2047/2160
  84
  #f
  276/127
  ((11 11 0) (11 11 0) (11 11 0)))
'(shuffled-cache
  0
  flatten
  2
  59
  ref-or-constructor
  "\"'(eval (app null? (-> x <-)) (env ((□? (x y)))))\""
  #f)
'(shuffled-cache
  0
  flatten
  2
  59
  app
  "\"'(eval\n  (app cons (-> (app car x) <-) (app append (app cdr x) y))\n  (env ((□? (x y)))))\""
  #f)
'(shuffled-cache
  0
  flatten
  2
  59
  ref-or-constructor
  "\"'(eval (match cdr-v ((cons cdr-c cdr-d) (-> cdr-d <-))) (env ((□? (cdr-v)))))\""
  #f)
'(shuffled-cache
  0
  flatten
  2
  59
  ref-or-constructor
  "\"'(eval (match (-> cdr-v <-) (cons cdr-c cdr-d)) (env ((□? (cdr-v)))))\""
  #f)
'(shuffled-cache
  0
  flatten
  2
  15
  59
  app
  "\"'(eval (app flatten (-> (app car x) <-)) (env ((□? (x)))))\""
  116
  101
  10
  5
  95
  4
  99
  1
  367/376
  58
  #f
  296/101
  ((14 14 0) (27/2 27/2 0) (27/2 27/2 0)))
'(shuffled-cache
  1
  flatten
  2
  15
  59
  app
  "\"'(eval\n  (app cons (-> (app cons 3 (app cons 4 (app cons 5 (app nil)))) <-) (app nil))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  flatten
  2
  15
  59
  app
  "\"'(eval\n  (app\n   cons\n   (app cons 1 (app cons 2 (app nil)))\n   (->\n    (app\n     cons\n     (app\n      cons\n      (app cons (app cons 3 (app cons 4 (app cons 5 (app nil)))) (app nil))\n      (app nil))\n     (app nil))\n    <-))\n  (env ()))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  4
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  flatten
  2
  59
  app
  "\"'(eval (match (-> (app null? x) <-) (#f) _) (env ((□? (x y)))))\""
  #f)
'(shuffled-cache
  1
  flatten
  2
  15
  59
  app
  "\"'(eval (match null?-v ((nil) (-> (app #t) <-)) _) (env ((□? (null?-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  flatten
  2
  15
  59
  app
  "\"'(eval\n  (app\n   cons\n   (-> (app cons 1 (app cons 2 (app nil))) <-)\n   (app\n    cons\n    (app\n     cons\n     (app cons (app cons 3 (app cons 4 (app cons 5 (app nil)))) (app nil))\n     (app nil))\n    (app nil)))\n  (env ()))\""
  5
  4
  0
  1
  2
  0
  2
  1
  1/2
  4
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  flatten
  2
  15
  59
  ref-or-constructor
  "\"'(eval (match (-> pair?-v <-) (cons pair?-c pair?-d) _) (env ((□? (pair?-v)))))\""
  125
  106
  12
  7
  102
  5
  107
  1
  383/408
  68
  #f
  105/53
  ((6 6 0) (6 6 0) (13/2 13/2 0)))
'(shuffled-cache
  1
  flatten
  2
  59
  ref-or-constructor
  "\"'(eval (match cdr-v ((cons cdr-c cdr-d) (-> cdr-d <-))) (env ((□? (cdr-v)))))\""
  #f)
'(shuffled-cache
  1
  flatten
  2
  59
  app
  "\"'(eval\n  (app cons (-> (app car x) <-) (app append (app cdr x) y))\n  (env ((□? (x y)))))\""
  #f)
'(shuffled-cache
  1
  flatten
  2
  59
  ref-or-constructor
  "\"'(eval (match car-v ((cons car-c car-d) (-> car-c <-))) (env ((□? (car-v)))))\""
  #f)
'(shuffled-cache
  1
  flatten
  2
  15
  59
  app
  "\"'(eval (app flatten (-> (app car x) <-)) (env ((□? (x)))))\""
  116
  101
  10
  5
  95
  4
  99
  1
  367/376
  58
  #f
  296/101
  ((14 14 0) (14 14 0) (14 14 0)))
'(shuffled-cache
  1
  flatten
  2
  15
  59
  ref-or-constructor
  "\"'(eval (match (app null? x) (#f) (_ (-> y <-))) (env ((□? (x y)))))\""
  283
  255
  18
  10
  246
  7
  253
  1
  4793/4928
  149
  #f
  622/255
  ((10 10 0) (10 10 0) (10 10 0)))
'(shuffled-cache
  1
  flatten
  2
  15
  59
  app
  "\"'(eval\n  (match pair?-v (cons pair?-c pair?-d) (_ (-> (app #f) <-)))\n  (env ((□? (pair?-v)))))\""
  286
  257
  18
  11
  246
  7
  253
  1
  1297/1344
  151
  #t
  624/257
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  flatten
  2
  59
  ref-or-constructor
  "\"'(eval (app cdr (-> x <-)) (env ((□? (x y)))))\""
  #f)
'(shuffled-cache
  1
  flatten
  2
  59
  lettypes
  "\"'(eval ((top) lettypes (cons ... nil) ...) (env ()))\""
  #f)
'(shuffled-cache
  1
  flatten
  2
  59
  match
  "\"'(eval (λ (x) (-> (match (app pair? x) ...) <-)) (env ((□? (x)))))\""
  #f)
'(shuffled-cache
  1
  flatten
  2
  59
  app
  "\"'(eval\n  (match\n   (app pair? x)\n   (#f)\n   (_\n    (-> (app append (app flatten (app car x)) (app flatten (app cdr x))) <-)))\n  (env ((□? (x)))))\""
  #f)
'(shuffled-cache
  1
  flatten
  2
  15
  59
  match
  "\"'(eval (λ (pair?-v) (-> (match pair?-v ...) <-)) (env ((□? (pair?-v)))))\""
  145
  127
  12
  6
  117
  5
  122
  1
  2047/2160
  84
  #f
  276/127
  ((21/2 21/2 0) (21/2 21/2 0) (21/2 21/2 0)))
'(shuffled-cache
  1
  flatten
  2
  15
  59
  app
  "\"'(eval\n  (app\n   cons\n   (->\n    (app cons (app cons 3 (app cons 4 (app cons 5 (app nil)))) (app nil))\n    <-)\n   (app nil))\n  (env ()))\""
  145
  127
  12
  6
  117
  5
  122
  1
  2047/2160
  84
  #t
  276/127
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  flatten
  2
  15
  59
  app
  "\"'(eval (match null?-v (nil) (_ (-> (app #f) <-))) (env ((□? (null?-v)))))\""
  148
  129
  12
  7
  117
  5
  122
  1
  2047/2240
  86
  #t
  278/129
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  flatten
  2
  15
  59
  ref-or-constructor
  "\"'(eval (app append (app cdr x) (-> y <-)) (env ((□? (x y)))))\""
  296
  266
  18
  12
  252
  7
  259
  1
  70607/73080
  169
  #f
  271/133
  ((19/2 19/2 0) (19/2 19/2 0) (19/2 19/2 0)))
'(shuffled-cache
  1
  flatten
  2
  15
  59
  app
  "\"'(eval (app cons 1 (-> (app cons 2 (app nil)) <-)) (env ()))\""
  296
  266
  18
  12
  252
  7
  259
  1
  70607/73080
  169
  #t
  271/133
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  flatten
  2
  15
  59
  app
  "\"'(eval (app cons 3 (-> (app cons 4 (app cons 5 (app nil))) <-)) (env ()))\""
  296
  266
  18
  12
  252
  7
  259
  1
  70607/73080
  169
  #t
  271/133
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  flatten
  2
  15
  59
  app
  "\"'(eval\n  (app\n   cons\n   (app\n    cons\n    (app cons (app cons 3 (app cons 4 (app cons 5 (app nil)))) (app nil))\n    (app nil))\n   (-> (app nil) <-))\n  (env ()))\""
  296
  266
  18
  12
  252
  7
  259
  1
  70607/73080
  169
  #t
  271/133
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  flatten
  2
  15
  59
  ref-or-constructor
  "\"'(eval (match (app null? x) (#f) (_ (-> x <-))) (env ((□? (x)))))\""
  297
  267
  18
  12
  252
  7
  259
  1
  70397/73080
  169
  #f
  554/267
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  flatten
  2
  15
  59
  letrec*
  "\"'(eval (lettypes cons ... nil (letrec* (car ... flatten) ...)) (env ()))\""
  321
  291
  18
  12
  276
  7
  283
  1
  8119/8400
  188
  #f
  583/291
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  flatten
  2
  59
  ref-or-constructor
  "\"'(eval (match (-> cdr-v <-) (cons cdr-c cdr-d)) (env ((□? (cdr-v)))))\""
  #f)
'(shuffled-cache
  1
  flatten
  2
  59
  match
  "\"'(eval (λ (car-v) (-> (match car-v ...) <-)) (env ((□? (car-v)))))\""
  #f)
'(shuffled-cache
  1
  flatten
  2
  59
  ref-or-constructor
  "\"'(eval (match (-> null?-v <-) (nil) _) (env ((□? (null?-v)))))\""
  #f)
'(shuffled-cache
  1
  flatten
  2
  15
  59
  app
  "\"'(eval\n  (app\n   cons\n   (->\n    (app\n     cons\n     (app cons (app cons 3 (app cons 4 (app cons 5 (app nil)))) (app nil))\n     (app nil))\n    <-)\n   (app nil))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  flatten
  2
  59
  app
  "\"'(eval\n  (app append (-> (app flatten (app car x)) <-) (app flatten (app cdr x)))\n  (env ((□? (x)))))\""
  #f)
'(shuffled-cache
  1
  flatten
  2
  59
  app
  "\"'(eval\n  (app append (app flatten (app car x)) (-> (app flatten (app cdr x)) <-))\n  (env ((□? (x)))))\""
  #f)
'(shuffled-cache
  1
  flatten
  2
  59
  match
  "\"'(eval (λ (x y) (-> (match (app null? x) ...) <-)) (env ((□? (x y)))))\""
  #f)
'(shuffled-cache
  1
  flatten
  2
  15
  59
  ref-or-constructor
  "\"'(eval (app null? (-> x <-)) (env ((□? (x)))))\""
  110
  96
  10
  4
  95
  4
  99
  1
  47/48
  63
  #f
  181/96
  ((5 5 0) (5 5 0) (5 5 0)))
'(shuffled-cache
  1
  flatten
  2
  15
  59
  ref-or-constructor
  "\"'(eval (app cdr (-> x <-)) (env ((□? (x)))))\""
  111
  97
  10
  4
  95
  4
  99
  1
  125/128
  63
  #f
  193/97
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  flatten
  2
  59
  app
  "\"'(eval (app append (-> (app cdr x) <-) y) (env ((□? (x y)))))\""
  #f)
'(shuffled-cache
  1
  flatten
  2
  15
  59
  app
  "\"'(eval (app cons 2 (-> (app nil) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  flatten
  2
  15
  59
  ref-or-constructor
  "\"'(eval (app car (-> x <-)) (env ((□? (x)))))\""
  110
  96
  10
  4
  95
  4
  99
  1
  375/376
  63
  #f
  181/96
  ((5 5 0) (5 5 0) (5 5 0)))
'(shuffled-cache
  1
  flatten
  2
  59
  match
  "\"'(eval (λ (null?-v) (-> (match null?-v ...) <-)) (env ((□? (null?-v)))))\""
  #f)
'(shuffled-cache
  1
  flatten
  2
  15
  59
  app
  "\"'(eval\n  (app cons (app cons 3 (app cons 4 (app cons 5 (app nil)))) (-> (app nil) <-))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  flatten
  2
  15
  59
  app
  "\"'(eval\n  (match (app null? x) ((#f) (-> (app cons x (app nil)) <-)) _)\n  (env ((□? (x)))))\""
  5
  4
  0
  1
  2
  0
  2
  1
  1/2
  4
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  flatten
  2
  15
  59
  app
  "\"'(eval\n  (match pair?-v ((cons pair?-c pair?-d) (-> (app #t) <-)) _)\n  (env ((□? (pair?-v)))))\""
  8
  6
  0
  2
  2
  0
  2
  1
  1/3
  6
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  flatten
  2
  59
  ref-or-constructor
  "\"'(eval (app null? (-> x <-)) (env ((□? (x y)))))\""
  #f)
'(shuffled-cache
  1
  flatten
  2
  59
  match
  "\"'(eval (λ (cdr-v) (-> (match cdr-v ...) <-)) (env ((□? (cdr-v)))))\""
  #f)
'(shuffled-cache
  1
  flatten
  2
  15
  59
  app
  "\"'(eval (match (-> (app pair? x) <-) (#f) _) (env ((□? (x)))))\""
  155
  137
  12
  6
  128
  5
  133
  1
  217/228
  91
  #f
  279/137
  ((12 12 0) (12 12 0) (25/2 25/2 0)))
'(shuffled-cache
  1
  flatten
  2
  59
  ref-or-constructor
  "\"'(eval (app car (-> x <-)) (env ((□? (x y)))))\""
  #f)
'(shuffled-cache
  1
  flatten
  2
  59
  match
  "\"'(eval\n  (match (app pair? x) ((#f) (-> (match (app null? x) ...) <-)) _)\n  (env ((□? (x)))))\""
  #f)
'(shuffled-cache
  1
  flatten
  2
  59
  app
  "\"'(eval\n  (letrec*\n   (car ... flatten)\n   (->\n    (app\n     flatten\n     (app\n      cons\n      (app cons 1 (app cons 2 (app nil)))\n      (app\n       cons\n       (app\n        cons\n        (app cons (app cons 3 (app cons 4 (app cons 5 (app nil)))) (app nil))\n        (app nil))\n       (app nil))))\n    <-))\n  (env ()))\""
  #f)
'(shuffled-cache
  1
  flatten
  2
  15
  59
  app
  "\"'(eval (app cons x (-> (app nil) <-)) (env ((□? (x)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  flatten
  2
  15
  59
  app
  "\"'(eval\n  (app\n   cons\n   (app cons (app cons 3 (app cons 4 (app cons 5 (app nil)))) (app nil))\n   (-> (app nil) <-))\n  (env ()))\""
  5
  4
  0
  1
  2
  0
  2
  1
  1/2
  4
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  flatten
  2
  15
  59
  app
  "\"'(eval\n  (match\n   (app null? x)\n   ((#f) (-> (app cons (app car x) (app append (app cdr x) y)) <-))\n   _)\n  (env ((□? (x y)))))\""
  8
  6
  0
  2
  2
  0
  2
  1
  1/3
  6
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  flatten
  2
  59
  ref-or-constructor
  "\"'(eval (match (-> car-v <-) (cons car-c car-d)) (env ((□? (car-v)))))\""
  #f)
'(shuffled-cache
  1
  flatten
  2
  15
  59
  app
  "\"'(eval\n  (app\n   flatten\n   (->\n    (app\n     cons\n     (app cons 1 (app cons 2 (app nil)))\n     (app\n      cons\n      (app\n       cons\n       (app cons (app cons 3 (app cons 4 (app cons 5 (app nil)))) (app nil))\n       (app nil))\n      (app nil)))\n    <-))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  flatten
  2
  15
  59
  ref-or-constructor
  "\"'(eval (app pair? (-> x <-)) (env ((□? (x)))))\""
  110
  96
  10
  4
  95
  4
  99
  1
  47/48
  63
  #f
  181/96
  ((5 5 0) (5 5 0) (5 5 0)))
'(shuffled-cache
  1
  flatten
  2
  15
  59
  app
  "\"'(eval (app flatten (-> (app cdr x) <-)) (env ((□? (x)))))\""
  111
  97
  10
  4
  95
  4
  99
  1
  125/128
  63
  #f
  186/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  flatten
  2
  15
  59
  ref-or-constructor
  "\"'(eval (app cons (-> x <-) (app nil)) (env ((□? (x)))))\""
  112
  98
  10
  4
  95
  4
  99
  1
  375/392
  63
  #f
  99/49
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  flatten
  2
  15
  59
  app
  "\"'(eval (app cons 5 (-> (app nil) <-)) (env ()))\""
  112
  98
  10
  4
  95
  4
  99
  1
  375/392
  63
  #t
  99/49
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  flatten
  2
  59
  app
  "\"'(eval\n  (app cons (app car x) (-> (app append (app cdr x) y) <-))\n  (env ((□? (x y)))))\""
  #f)
'(shuffled-cache
  1
  flatten
  2
  15
  59
  app
  "\"'(eval (app cons 4 (-> (app cons 5 (app nil)) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  flatten
  2
  15
  59
  app
  "\"'(eval (match (-> (app null? x) <-) (#f) _) (env ((□? (x)))))\""
  156
  137
  13
  6
  128
  5
  133
  1
  217/228
  91
  #f
  279/137
  ((29/2 29/2 0) (14 14 0) (14 14 0)))
