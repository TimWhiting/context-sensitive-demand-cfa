'(expression:
  (letrec ((a
            (λ (y) (match (app equal? y 0) (#t (app a (app - y 1))) (#f y)))))
    (app a 2)))
(list
 'query:
 '(app (-> - <-) y 1)
 (expenv
  '((((match-clause
       #t
       (app equal? y 0)
       ()
       ((#f y))
       (bod (y) (bin letrec a (app a 2) () () (top))))
      app
      a
      (app - y 1))
     ((let-bod
       letrec
       ((a (λ (y) (match (app equal? y 0) (#t (app a (app - y 1))) (#f y)))))
       (top))
      app
      a
      2)))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app a (-> (app - y 1) <-))
 (expenv
  '((((match-clause
       #t
       (app equal? y 0)
       ()
       ((#f y))
       (bod (y) (bin letrec a (app a 2) () () (top))))
      app
      a
      (app - y 1))
     ((let-bod
       letrec
       ((a (λ (y) (match (app equal? y 0) (#t (app a (app - y 1))) (#f y)))))
       (top))
      app
      a
      2)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) y 1)
 (expenv
  '((((let-bod
       letrec
       ((a (λ (y) (match (app equal? y 0) (#t (app a (app - y 1))) (#f y)))))
       (top))
      app
      a
      2)))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
 (expenv
  '((((match-clause
       #t
       (app equal? y 0)
       ()
       ((#f y))
       (bod (y) (bin letrec a (app a 2) () () (top))))
      app
      a
      (app - y 1))
     ((let-bod
       letrec
       ((a (λ (y) (match (app equal? y 0) (#t (app a (app - y 1))) (#f y)))))
       (top))
      app
      a
      2)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - y (-> 1 <-))
 (expenv
  '((((let-bod
       letrec
       ((a (λ (y) (match (app equal? y 0) (#t (app a (app - y 1))) (#f y)))))
       (top))
      app
      a
      2)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> a <-) (app - y 1))
 (expenv
  '((((match-clause
       #t
       (app equal? y 0)
       ()
       ((#f y))
       (bod (y) (bin letrec a (app a 2) () () (top))))
      app
      a
      (app - y 1))
     ((match-clause
       #t
       (app equal? y 0)
       ()
       ((#f y))
       (bod (y) (bin letrec a (app a 2) () () (top))))
      app
      a
      (app - y 1))))))
(list
 'clos/con:
 (list
  (list
   '(λ (y) (match (app equal? y 0) (#t (app a (app - y 1))) (#f y)))
   (expenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> a <-) (app - y 1))
 (expenv
  '((((let-bod
       letrec
       ((a (λ (y) (match (app equal? y 0) (#t (app a (app - y 1))) (#f y)))))
       (top))
      app
      a
      2)))))
(list
 'clos/con:
 (list
  (list
   '(λ (y) (match (app equal? y 0) (#t (app a (app - y 1))) (#f y)))
   (expenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(top) (expenv '()))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> equal? <-) y 0)
 (expenv
  '((((match-clause
       #t
       (app equal? y 0)
       ()
       ((#f y))
       (bod (y) (bin letrec a (app a 2) () () (top))))
      app
      a
      (app - y 1))
     ((match-clause
       #t
       (app equal? y 0)
       ()
       ((#f y))
       (bod (y) (bin letrec a (app a 2) () () (top))))
      app
      a
      (app - y 1))))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
 (expenv
  '((((let-bod
       letrec
       ((a (λ (y) (match (app equal? y 0) (#t (app a (app - y 1))) (#f y)))))
       (top))
      app
      a
      2)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (y) (-> (match (app equal? y 0) (#t (app a (app - y 1))) (#f y)) <-))
 (expenv
  '((((let-bod
       letrec
       ((a (λ (y) (match (app equal? y 0) (#t (app a (app - y 1))) (#f y)))))
       (top))
      app
      a
      2)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - y (-> 1 <-))
 (expenv
  '((((match-clause
       #t
       (app equal? y 0)
       ()
       ((#f y))
       (bod (y) (bin letrec a (app a 2) () () (top))))
      app
      a
      (app - y 1))
     ((let-bod
       letrec
       ((a (λ (y) (match (app equal? y 0) (#t (app a (app - y 1))) (#f y)))))
       (top))
      app
      a
      2)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(letrec ((->
            a
            =
            (λ (y) (match (app equal? y 0) (#t (app a (app - y 1))) (#f y)))
            <-))
    bod)
 (expenv '()))
(list
 'clos/con:
 (list
  (list
   '(λ (y) (match (app equal? y 0) (#t (app a (app - y 1))) (#f y)))
   (expenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app equal? (-> y <-) 0)
 (expenv
  '((((let-bod
       letrec
       ((a (λ (y) (match (app equal? y 0) (#t (app a (app - y 1))) (#f y)))))
       (top))
      app
      a
      2)))))
'(clos/con: ⊥)
'(literals: (2 ⊥ ⊥ ⊥))
(list
 'query:
 '(app equal? (-> y <-) 0)
 (expenv
  '((((match-clause
       #t
       (app equal? y 0)
       ()
       ((#f y))
       (bod (y) (bin letrec a (app a 2) () () (top))))
      app
      a
      (app - y 1))
     ((let-bod
       letrec
       ((a (λ (y) (match (app equal? y 0) (#t (app a (app - y 1))) (#f y)))))
       (top))
      app
      a
      2)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> equal? <-) y 0)
 (expenv
  '((((let-bod
       letrec
       ((a (λ (y) (match (app equal? y 0) (#t (app a (app - y 1))) (#f y)))))
       (top))
      app
      a
      2)))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> y <-) 1)
 (expenv
  '((((let-bod
       letrec
       ((a (λ (y) (match (app equal? y 0) (#t (app a (app - y 1))) (#f y)))))
       (top))
      app
      a
      2)))))
'(clos/con: ⊥)
'(literals: (2 ⊥ ⊥ ⊥))
(list 'query: '(app (-> a <-) 2) (expenv '()))
(list
 'clos/con:
 (list
  (list
   '(λ (y) (match (app equal? y 0) (#t (app a (app - y 1))) (#f y)))
   (expenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match (-> (app equal? y 0) <-) (#t (app a (app - y 1))) (#f y))
 (expenv
  '((((let-bod
       letrec
       ((a (λ (y) (match (app equal? y 0) (#t (app a (app - y 1))) (#f y)))))
       (top))
      app
      a
      2)))))
(list
 'clos/con:
 (list
  (list #f (expenv '(((letrec (a) (-> (app a 2) <-))))))
  (list #t (expenv '(((letrec (a) (-> (app a 2) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) y 1)
 (expenv
  '((((match-clause
       #t
       (app equal? y 0)
       ()
       ((#f y))
       (bod (y) (bin letrec a (app a 2) () () (top))))
      app
      a
      (app - y 1))
     ((match-clause
       #t
       (app equal? y 0)
       ()
       ((#f y))
       (bod (y) (bin letrec a (app a 2) () () (top))))
      app
      a
      (app - y 1))))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
 (expenv
  '((((match-clause
       #t
       (app equal? y 0)
       ()
       ((#f y))
       (bod (y) (bin letrec a (app a 2) () () (top))))
      app
      a
      (app - y 1))
     ((match-clause
       #t
       (app equal? y 0)
       ()
       ((#f y))
       (bod (y) (bin letrec a (app a 2) () () (top))))
      app
      a
      (app - y 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app a (-> (app - y 1) <-))
 (expenv
  '((((match-clause
       #t
       (app equal? y 0)
       ()
       ((#f y))
       (bod (y) (bin letrec a (app a 2) () () (top))))
      app
      a
      (app - y 1))
     ((match-clause
       #t
       (app equal? y 0)
       ()
       ((#f y))
       (bod (y) (bin letrec a (app a 2) () () (top))))
      app
      a
      (app - y 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> equal? <-) y 0)
 (expenv
  '((((match-clause
       #t
       (app equal? y 0)
       ()
       ((#f y))
       (bod (y) (bin letrec a (app a 2) () () (top))))
      app
      a
      (app - y 1))
     ((let-bod
       letrec
       ((a (λ (y) (match (app equal? y 0) (#t (app a (app - y 1))) (#f y)))))
       (top))
      app
      a
      2)))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> a <-) (app - y 1))
 (expenv
  '((((match-clause
       #t
       (app equal? y 0)
       ()
       ((#f y))
       (bod (y) (bin letrec a (app a 2) () () (top))))
      app
      a
      (app - y 1))
     ((let-bod
       letrec
       ((a (λ (y) (match (app equal? y 0) (#t (app a (app - y 1))) (#f y)))))
       (top))
      app
      a
      2)))))
(list
 'clos/con:
 (list
  (list
   '(λ (y) (match (app equal? y 0) (#t (app a (app - y 1))) (#f y)))
   (expenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (y) (-> (match (app equal? y 0) (#t (app a (app - y 1))) (#f y)) <-))
 (expenv
  '((((match-clause
       #t
       (app equal? y 0)
       ()
       ((#f y))
       (bod (y) (bin letrec a (app a 2) () () (top))))
      app
      a
      (app - y 1))
     ((match-clause
       #t
       (app equal? y 0)
       ()
       ((#f y))
       (bod (y) (bin letrec a (app a 2) () () (top))))
      app
      a
      (app - y 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> y <-) 1)
 (expenv
  '((((match-clause
       #t
       (app equal? y 0)
       ()
       ((#f y))
       (bod (y) (bin letrec a (app a 2) () () (top))))
      app
      a
      (app - y 1))
     ((let-bod
       letrec
       ((a (λ (y) (match (app equal? y 0) (#t (app a (app - y 1))) (#f y)))))
       (top))
      app
      a
      2)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app equal? y (-> 0 <-))
 (expenv
  '((((match-clause
       #t
       (app equal? y 0)
       ()
       ((#f y))
       (bod (y) (bin letrec a (app a 2) () () (top))))
      app
      a
      (app - y 1))
     ((let-bod
       letrec
       ((a (λ (y) (match (app equal? y 0) (#t (app a (app - y 1))) (#f y)))))
       (top))
      app
      a
      2)))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(app equal? (-> y <-) 0)
 (expenv
  '((((match-clause
       #t
       (app equal? y 0)
       ()
       ((#f y))
       (bod (y) (bin letrec a (app a 2) () () (top))))
      app
      a
      (app - y 1))
     ((match-clause
       #t
       (app equal? y 0)
       ()
       ((#f y))
       (bod (y) (bin letrec a (app a 2) () () (top))))
      app
      a
      (app - y 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match (app equal? y 0) (#t (app a (app - y 1))) (-> #f y <-))
 (expenv
  '((((let-bod
       letrec
       ((a (λ (y) (match (app equal? y 0) (#t (app a (app - y 1))) (#f y)))))
       (top))
      app
      a
      2)))))
'(clos/con: ⊥)
'(literals: (2 ⊥ ⊥ ⊥))
(list
 'query:
 '(match (app equal? y 0) (#t (app a (app - y 1))) (-> #f y <-))
 (expenv
  '((((match-clause
       #t
       (app equal? y 0)
       ()
       ((#f y))
       (bod (y) (bin letrec a (app a 2) () () (top))))
      app
      a
      (app - y 1))
     ((let-bod
       letrec
       ((a (λ (y) (match (app equal? y 0) (#t (app a (app - y 1))) (#f y)))))
       (top))
      app
      a
      2)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app equal? y (-> 0 <-))
 (expenv
  '((((match-clause
       #t
       (app equal? y 0)
       ()
       ((#f y))
       (bod (y) (bin letrec a (app a 2) () () (top))))
      app
      a
      (app - y 1))
     ((match-clause
       #t
       (app equal? y 0)
       ()
       ((#f y))
       (bod (y) (bin letrec a (app a 2) () () (top))))
      app
      a
      (app - y 1))))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list 'query: '(app a (-> 2 <-)) (expenv '()))
'(clos/con: ⊥)
'(literals: (2 ⊥ ⊥ ⊥))
(list
 'query:
 '(app equal? y (-> 0 <-))
 (expenv
  '((((let-bod
       letrec
       ((a (λ (y) (match (app equal? y 0) (#t (app a (app - y 1))) (#f y)))))
       (top))
      app
      a
      2)))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - y (-> 1 <-))
 (expenv
  '((((match-clause
       #t
       (app equal? y 0)
       ()
       ((#f y))
       (bod (y) (bin letrec a (app a 2) () () (top))))
      app
      a
      (app - y 1))
     ((match-clause
       #t
       (app equal? y 0)
       ()
       ((#f y))
       (bod (y) (bin letrec a (app a 2) () () (top))))
      app
      a
      (app - y 1))))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list 'query: '(letrec (a) (-> (app a 2) <-)) (expenv '()))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match (app equal? y 0) (#t (app a (app - y 1))) (-> #f y <-))
 (expenv
  '((((match-clause
       #t
       (app equal? y 0)
       ()
       ((#f y))
       (bod (y) (bin letrec a (app a 2) () () (top))))
      app
      a
      (app - y 1))
     ((match-clause
       #t
       (app equal? y 0)
       ()
       ((#f y))
       (bod (y) (bin letrec a (app a 2) () () (top))))
      app
      a
      (app - y 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app a (-> (app - y 1) <-))
 (expenv
  '((((let-bod
       letrec
       ((a (λ (y) (match (app equal? y 0) (#t (app a (app - y 1))) (#f y)))))
       (top))
      app
      a
      2)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (y) (-> (match (app equal? y 0) (#t (app a (app - y 1))) (#f y)) <-))
 (expenv
  '((((match-clause
       #t
       (app equal? y 0)
       ()
       ((#f y))
       (bod (y) (bin letrec a (app a 2) () () (top))))
      app
      a
      (app - y 1))
     ((let-bod
       letrec
       ((a (λ (y) (match (app equal? y 0) (#t (app a (app - y 1))) (#f y)))))
       (top))
      app
      a
      2)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> y <-) 1)
 (expenv
  '((((match-clause
       #t
       (app equal? y 0)
       ()
       ((#f y))
       (bod (y) (bin letrec a (app a 2) () () (top))))
      app
      a
      (app - y 1))
     ((match-clause
       #t
       (app equal? y 0)
       ()
       ((#f y))
       (bod (y) (bin letrec a (app a 2) () () (top))))
      app
      a
      (app - y 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match (-> (app equal? y 0) <-) (#t (app a (app - y 1))) (#f y))
 (expenv
  '((((match-clause
       #t
       (app equal? y 0)
       ()
       ((#f y))
       (bod (y) (bin letrec a (app a 2) () () (top))))
      app
      a
      (app - y 1))
     ((match-clause
       #t
       (app equal? y 0)
       ()
       ((#f y))
       (bod (y) (bin letrec a (app a 2) () () (top))))
      app
      a
      (app - y 1))))))
(list
 'clos/con:
 (list
  (list
   #t
   (expenv
    '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
       (match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))))))
  (list
   #f
   (expenv
    '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
       (match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match (-> (app equal? y 0) <-) (#t (app a (app - y 1))) (#f y))
 (expenv
  '((((match-clause
       #t
       (app equal? y 0)
       ()
       ((#f y))
       (bod (y) (bin letrec a (app a 2) () () (top))))
      app
      a
      (app - y 1))
     ((let-bod
       letrec
       ((a (λ (y) (match (app equal? y 0) (#t (app a (app - y 1))) (#f y)))))
       (top))
      app
      a
      2)))))
(list
 'clos/con:
 (list
  (list
   #f
   (expenv
    '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
       (letrec (a) (-> (app a 2) <-))))))
  (list
   #t
   (expenv
    '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
       (letrec (a) (-> (app a 2) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
