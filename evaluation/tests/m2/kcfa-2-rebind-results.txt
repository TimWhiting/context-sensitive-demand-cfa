'(expression:
  (app
   (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
   (λ (x1)
     (app
      (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
      (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))))
(list
 'query:
 '(λ (z) (-> (app z x1 x2) <-))
 (flatenv
  '(((bod
      (x2)
      (ran
       (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
       ()
       ()
       (bod
        (x1)
        (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))))
     app
     (λ (z) (app z x1 x2))
     (λ (y1 y2) y1))
    ((let-bod
      let
      ((_ (app f2 #t)))
      (bod
       (f2)
       (rat
        ((λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
        (bod
         (x1)
         (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top))))))
     app
     f2
     #f))))
(list
 'clos/con:
 (list (list #f (flatenv '((top)))) (list #t (flatenv '((top))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
   (-> (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))) <-))
 (flatenv
  '(((bin
      let
      _
      (app f1 #f)
      ()
      ()
      (bod
       (f1)
       (rat
        ((λ (x1)
           (app
            (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
            (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
        (top))))
     app
     f1
     #t)
    ((top)
     app
     (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
     (λ (x1)
       (app
        (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
        (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))))))
(list
 'clos/con:
 (list
  (list
   '(λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))
   (flatenv '((let ((-> _ = (app f1 #t) <-)) bod) (top))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (f1) (-> (let ((_ (app f1 #t))) (app f1 #f)) <-))
 (flatenv
  '(((top)
     app
     (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
     (λ (x1)
       (app
        (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
        (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))))))
(list
 'clos/con:
 (list (list #f (flatenv '((top)))) (list #t (flatenv '((top))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app f2 (-> #f <-))
 (flatenv
  '(((bod (x1) (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))
     app
     (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
     (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
    ((bin
      let
      _
      (app f1 #f)
      ()
      ()
      (bod
       (f1)
       (rat
        ((λ (x1)
           (app
            (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
            (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
        (top))))
     app
     f1
     #t))))
(list
 'clos/con:
 (list
  (list
   #f
   (flatenv
    '((λ (x1)
        (->
         (app
          (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
          (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         <-))
      (let ((-> _ = (app f1 #t) <-)) bod))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> (λ (z) (app z x1 x2)) <-) (λ (y1 y2) y1))
 (flatenv
  '(((let-bod
      let
      ((_ (app f2 #t)))
      (bod
       (f2)
       (rat
        ((λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
        (bod
         (x1)
         (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top))))))
     app
     f2
     #f)
    ((bod (x1) (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))
     app
     (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
     (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))))
(list
 'clos/con:
 (list
  (list
   '(λ (z) (app z x1 x2))
   (flatenv
    '((let (_) (-> (app f2 #f) <-))
      (λ (x1)
        (->
         (app
          (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
          (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> f1 <-) #f)
 (flatenv
  '(((top)
     app
     (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
     (λ (x1)
       (app
        (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
        (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))))))
(list
 'clos/con:
 (list
  (list
   '(λ (x1)
      (app
       (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
       (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))
   (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app f2 (-> #t <-))
 (flatenv
  '(((bod (x1) (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))
     app
     (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
     (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
    ((bin
      let
      _
      (app f1 #f)
      ()
      ()
      (bod
       (f1)
       (rat
        ((λ (x1)
           (app
            (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
            (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
        (top))))
     app
     f1
     #t))))
(list
 'clos/con:
 (list
  (list
   #t
   (flatenv
    '((λ (x1)
        (->
         (app
          (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
          (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         <-))
      (let ((-> _ = (app f1 #t) <-)) bod))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(let ((-> _ = (app f2 #t) <-)) bod)
 (flatenv
  '(((bod (x1) (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))
     app
     (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
     (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
    ((let-bod
      let
      ((_ (app f1 #t)))
      (bod
       (f1)
       (rat
        ((λ (x1)
           (app
            (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
            (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
        (top))))
     app
     f1
     #f))))
(list
 'clos/con:
 (list (list #f (flatenv '((top)))) (list #t (flatenv '((top))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   (-> (λ (f2) (let ((_ (app f2 #t))) (app f2 #f))) <-)
   (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
 (flatenv
  '(((let-bod
      let
      ((_ (app f1 #t)))
      (bod
       (f1)
       (rat
        ((λ (x1)
           (app
            (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
            (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
        (top))))
     app
     f1
     #f)
    ((top)
     app
     (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
     (λ (x1)
       (app
        (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
        (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))))))
(list
 'clos/con:
 (list
  (list
   '(λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
   (flatenv '((let (_) (-> (app f1 #f) <-)) (top))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   (-> (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) <-)
   (λ (x1)
     (app
      (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
      (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
 (flatenv '()))
(list
 'clos/con:
 (list (list '(λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> z <-) x1 x2)
 (flatenv
  '(((bod
      (x2)
      (ran
       (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
       ()
       ()
       (bod
        (x1)
        (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))))
     app
     (λ (z) (app z x1 x2))
     (λ (y1 y2) y1))
    ((let-bod
      let
      ((_ (app f2 #t)))
      (bod
       (f2)
       (rat
        ((λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
        (bod
         (x1)
         (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top))))))
     app
     f2
     #f))))
(list
 'clos/con:
 (list
  (list
   '(λ (y1 y2) y1)
   (flatenv
    '((let (_) (-> (app f2 #f) <-))
      (λ (x1)
        (->
         (app
          (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
          (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (x1)
    (->
     (app
      (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
      (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
     <-))
 (flatenv
  '(((bin
      let
      _
      (app f1 #f)
      ()
      ()
      (bod
       (f1)
       (rat
        ((λ (x1)
           (app
            (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
            (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
        (top))))
     app
     f1
     #t)
    ((top)
     app
     (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
     (λ (x1)
       (app
        (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
        (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))))))
(list
 'clos/con:
 (list (list #f (flatenv '((top)))) (list #t (flatenv '((top))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(let ((-> _ = (app f2 #t) <-)) bod)
 (flatenv
  '(((bod (x1) (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))
     app
     (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
     (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
    ((bin
      let
      _
      (app f1 #f)
      ()
      ()
      (bod
       (f1)
       (rat
        ((λ (x1)
           (app
            (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
            (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
        (top))))
     app
     f1
     #t))))
(list
 'clos/con:
 (list (list #f (flatenv '((top)))) (list #t (flatenv '((top))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> (λ (z) (app z x1 x2)) <-) (λ (y1 y2) y1))
 (flatenv
  '(((bin
      let
      _
      (app f2 #f)
      ()
      ()
      (bod
       (f2)
       (rat
        ((λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
        (bod
         (x1)
         (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top))))))
     app
     f2
     #t)
    ((bod (x1) (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))
     app
     (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
     (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))))
(list
 'clos/con:
 (list
  (list
   '(λ (z) (app z x1 x2))
   (flatenv
    '((let ((-> _ = (app f2 #t) <-)) bod)
      (λ (x1)
        (->
         (app
          (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
          (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> f2 <-) #f)
 (flatenv
  '(((bod (x1) (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))
     app
     (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
     (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
    ((let-bod
      let
      ((_ (app f1 #t)))
      (bod
       (f1)
       (rat
        ((λ (x1)
           (app
            (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
            (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
        (top))))
     app
     f1
     #f))))
(list
 'clos/con:
 (list
  (list
   '(λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))
   (flatenv '((let (_) (-> (app f1 #f) <-)) (top))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> f1 <-) #t)
 (flatenv
  '(((top)
     app
     (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
     (λ (x1)
       (app
        (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
        (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))))))
(list
 'clos/con:
 (list
  (list
   '(λ (x1)
      (app
       (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
       (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))
   (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app z (-> x1 <-) x2)
 (flatenv
  '(((bod
      (x2)
      (ran
       (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
       ()
       ()
       (bod
        (x1)
        (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))))
     app
     (λ (z) (app z x1 x2))
     (λ (y1 y2) y1))
    ((let-bod
      let
      ((_ (app f2 #t)))
      (bod
       (f2)
       (rat
        ((λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
        (bod
         (x1)
         (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top))))))
     app
     f2
     #f))))
(list
 'clos/con:
 (list (list #f (flatenv '((top)))) (list #t (flatenv '((top))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
   (->
    (λ (x1)
      (app
       (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
       (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))
    <-))
 (flatenv '()))
(list
 'clos/con:
 (list
  (list
   '(λ (x1)
      (app
       (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
       (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))
   (flatenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (f2) (-> (let ((_ (app f2 #t))) (app f2 #f)) <-))
 (flatenv
  '(((bod (x1) (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))
     app
     (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
     (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
    ((bin
      let
      _
      (app f1 #f)
      ()
      ()
      (bod
       (f1)
       (rat
        ((λ (x1)
           (app
            (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
            (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
        (top))))
     app
     f1
     #t))))
(list
 'clos/con:
 (list (list #f (flatenv '((top)))) (list #t (flatenv '((top))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (y1 y2) (-> y1 <-))
 (flatenv
  '(((bod
      (z)
      (rat
       ((λ (y1 y2) y1))
       (bod
        (x2)
        (ran
         (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
         ()
         ()
         (bod
          (x1)
          (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))))))
     app
     z
     x1
     x2)
    ((bod
      (x2)
      (ran
       (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
       ()
       ()
       (bod
        (x1)
        (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))))
     app
     (λ (z) (app z x1 x2))
     (λ (y1 y2) y1)))))
(list
 'clos/con:
 (list (list #f (flatenv '((top)))) (list #t (flatenv '((top))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-))
 (flatenv
  '(((bin
      let
      _
      (app f2 #f)
      ()
      ()
      (bod
       (f2)
       (rat
        ((λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
        (bod
         (x1)
         (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top))))))
     app
     f2
     #t)
    ((bod (x1) (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))
     app
     (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
     (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))))
(list
 'clos/con:
 (list (list #f (flatenv '((top)))) (list #t (flatenv '((top))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> z <-) x1 x2)
 (flatenv
  '(((bod
      (x2)
      (ran
       (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
       ()
       ()
       (bod
        (x1)
        (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))))
     app
     (λ (z) (app z x1 x2))
     (λ (y1 y2) y1))
    ((bin
      let
      _
      (app f2 #f)
      ()
      ()
      (bod
       (f2)
       (rat
        ((λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
        (bod
         (x1)
         (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top))))))
     app
     f2
     #t))))
(list
 'clos/con:
 (list
  (list
   '(λ (y1 y2) y1)
   (flatenv
    '((let ((-> _ = (app f2 #t) <-)) bod)
      (λ (x1)
        (->
         (app
          (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
          (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(let ((-> _ = (app f1 #t) <-)) bod)
 (flatenv
  '(((top)
     app
     (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
     (λ (x1)
       (app
        (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
        (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))))))
(list
 'clos/con:
 (list (list #f (flatenv '((top)))) (list #t (flatenv '((top))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (λ (z) (app z x1 x2)) (-> (λ (y1 y2) y1) <-))
 (flatenv
  '(((bin
      let
      _
      (app f2 #f)
      ()
      ()
      (bod
       (f2)
       (rat
        ((λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
        (bod
         (x1)
         (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top))))))
     app
     f2
     #t)
    ((bod (x1) (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))
     app
     (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
     (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))))
(list
 'clos/con:
 (list
  (list
   '(λ (y1 y2) y1)
   (flatenv
    '((let ((-> _ = (app f2 #t) <-)) bod)
      (λ (x1)
        (->
         (app
          (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
          (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app f2 (-> #t <-))
 (flatenv
  '(((bod (x1) (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))
     app
     (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
     (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
    ((let-bod
      let
      ((_ (app f1 #t)))
      (bod
       (f1)
       (rat
        ((λ (x1)
           (app
            (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
            (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
        (top))))
     app
     f1
     #f))))
(list
 'clos/con:
 (list
  (list
   #t
   (flatenv
    '((λ (x1)
        (->
         (app
          (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
          (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         <-))
      (let (_) (-> (app f1 #f) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app z x1 (-> x2 <-))
 (flatenv
  '(((bod
      (x2)
      (ran
       (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
       ()
       ()
       (bod
        (x1)
        (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))))
     app
     (λ (z) (app z x1 x2))
     (λ (y1 y2) y1))
    ((bin
      let
      _
      (app f2 #f)
      ()
      ()
      (bod
       (f2)
       (rat
        ((λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
        (bod
         (x1)
         (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top))))))
     app
     f2
     #t))))
(list
 'clos/con:
 (list
  (list
   #t
   (flatenv
    '((λ (x1)
        (->
         (app
          (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
          (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         <-))
      (let (_) (-> (app f1 #f) <-)))))
  (list
   #t
   (flatenv
    '((λ (x1)
        (->
         (app
          (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
          (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         <-))
      (let ((-> _ = (app f1 #t) <-)) bod))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (f2) (-> (let ((_ (app f2 #t))) (app f2 #f)) <-))
 (flatenv
  '(((bod (x1) (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))
     app
     (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
     (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
    ((let-bod
      let
      ((_ (app f1 #t)))
      (bod
       (f1)
       (rat
        ((λ (x1)
           (app
            (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
            (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
        (top))))
     app
     f1
     #f))))
(list
 'clos/con:
 (list (list #f (flatenv '((top)))) (list #t (flatenv '((top))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> f2 <-) #t)
 (flatenv
  '(((bod (x1) (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))
     app
     (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
     (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
    ((bin
      let
      _
      (app f1 #f)
      ()
      ()
      (bod
       (f1)
       (rat
        ((λ (x1)
           (app
            (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
            (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
        (top))))
     app
     f1
     #t))))
(list
 'clos/con:
 (list
  (list
   '(λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))
   (flatenv '((let ((-> _ = (app f1 #t) <-)) bod) (top))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (λ (z) (app z x1 x2)) (-> (λ (y1 y2) y1) <-))
 (flatenv
  '(((let-bod
      let
      ((_ (app f2 #t)))
      (bod
       (f2)
       (rat
        ((λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
        (bod
         (x1)
         (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top))))))
     app
     f2
     #f)
    ((bod (x1) (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))
     app
     (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
     (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))))
(list
 'clos/con:
 (list
  (list
   '(λ (y1 y2) y1)
   (flatenv
    '((let (_) (-> (app f2 #f) <-))
      (λ (x1)
        (->
         (app
          (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
          (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(let (_) (-> (app f2 #f) <-))
 (flatenv
  '(((bod (x1) (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))
     app
     (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
     (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
    ((let-bod
      let
      ((_ (app f1 #t)))
      (bod
       (f1)
       (rat
        ((λ (x1)
           (app
            (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
            (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
        (top))))
     app
     f1
     #f))))
(list
 'clos/con:
 (list (list #f (flatenv '((top)))) (list #t (flatenv '((top))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (z) (-> (app z x1 x2) <-))
 (flatenv
  '(((bod
      (x2)
      (ran
       (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
       ()
       ()
       (bod
        (x1)
        (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))))
     app
     (λ (z) (app z x1 x2))
     (λ (y1 y2) y1))
    ((bin
      let
      _
      (app f2 #f)
      ()
      ()
      (bod
       (f2)
       (rat
        ((λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
        (bod
         (x1)
         (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top))))))
     app
     f2
     #t))))
(list
 'clos/con:
 (list (list #f (flatenv '((top)))) (list #t (flatenv '((top))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> f2 <-) #t)
 (flatenv
  '(((bod (x1) (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))
     app
     (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
     (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
    ((let-bod
      let
      ((_ (app f1 #t)))
      (bod
       (f1)
       (rat
        ((λ (x1)
           (app
            (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
            (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
        (top))))
     app
     f1
     #f))))
(list
 'clos/con:
 (list
  (list
   '(λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))
   (flatenv '((let (_) (-> (app f1 #f) <-)) (top))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(let (_) (-> (app f1 #f) <-))
 (flatenv
  '(((top)
     app
     (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
     (λ (x1)
       (app
        (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
        (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))))))
(list
 'clos/con:
 (list (list #f (flatenv '((top)))) (list #t (flatenv '((top))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> f2 <-) #f)
 (flatenv
  '(((bod (x1) (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))
     app
     (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
     (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
    ((bin
      let
      _
      (app f1 #f)
      ()
      ()
      (bod
       (f1)
       (rat
        ((λ (x1)
           (app
            (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
            (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
        (top))))
     app
     f1
     #t))))
(list
 'clos/con:
 (list
  (list
   '(λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))
   (flatenv '((let ((-> _ = (app f1 #t) <-)) bod) (top))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app z (-> x1 <-) x2)
 (flatenv
  '(((bod
      (x2)
      (ran
       (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
       ()
       ()
       (bod
        (x1)
        (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))))
     app
     (λ (z) (app z x1 x2))
     (λ (y1 y2) y1))
    ((bin
      let
      _
      (app f2 #f)
      ()
      ()
      (bod
       (f2)
       (rat
        ((λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
        (bod
         (x1)
         (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top))))))
     app
     f2
     #t))))
(list
 'clos/con:
 (list (list #f (flatenv '((top)))) (list #t (flatenv '((top))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app f1 (-> #t <-))
 (flatenv
  '(((top)
     app
     (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
     (λ (x1)
       (app
        (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
        (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))))))
(list 'clos/con: (list (list #t (flatenv '((top))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(let (_) (-> (app f2 #f) <-))
 (flatenv
  '(((bod (x1) (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))
     app
     (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
     (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
    ((bin
      let
      _
      (app f1 #f)
      ()
      ()
      (bod
       (f1)
       (rat
        ((λ (x1)
           (app
            (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
            (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
        (top))))
     app
     f1
     #t))))
(list
 'clos/con:
 (list (list #f (flatenv '((top)))) (list #t (flatenv '((top))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   (-> (λ (f2) (let ((_ (app f2 #t))) (app f2 #f))) <-)
   (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
 (flatenv
  '(((bin
      let
      _
      (app f1 #f)
      ()
      ()
      (bod
       (f1)
       (rat
        ((λ (x1)
           (app
            (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
            (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
        (top))))
     app
     f1
     #t)
    ((top)
     app
     (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
     (λ (x1)
       (app
        (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
        (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))))))
(list
 'clos/con:
 (list
  (list
   '(λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
   (flatenv '((let ((-> _ = (app f1 #t) <-)) bod) (top))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app
   (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
   (-> (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))) <-))
 (flatenv
  '(((let-bod
      let
      ((_ (app f1 #t)))
      (bod
       (f1)
       (rat
        ((λ (x1)
           (app
            (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
            (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
        (top))))
     app
     f1
     #f)
    ((top)
     app
     (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
     (λ (x1)
       (app
        (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
        (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))))))
(list
 'clos/con:
 (list
  (list
   '(λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))
   (flatenv '((let (_) (-> (app f1 #f) <-)) (top))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app f1 (-> #f <-))
 (flatenv
  '(((top)
     app
     (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
     (λ (x1)
       (app
        (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
        (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))))))
(list 'clos/con: (list (list #f (flatenv '((top))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app f2 (-> #f <-))
 (flatenv
  '(((bod (x1) (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))
     app
     (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
     (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
    ((let-bod
      let
      ((_ (app f1 #t)))
      (bod
       (f1)
       (rat
        ((λ (x1)
           (app
            (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
            (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
        (top))))
     app
     f1
     #f))))
(list
 'clos/con:
 (list
  (list
   #f
   (flatenv
    '((λ (x1)
        (->
         (app
          (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
          (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         <-))
      (let (_) (-> (app f1 #f) <-)))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (x2) (-> (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)) <-))
 (flatenv
  '(((let-bod
      let
      ((_ (app f2 #t)))
      (bod
       (f2)
       (rat
        ((λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
        (bod
         (x1)
         (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top))))))
     app
     f2
     #f)
    ((bod (x1) (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))
     app
     (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
     (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))))
(list
 'clos/con:
 (list (list #f (flatenv '((top)))) (list #t (flatenv '((top))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (x1)
    (->
     (app
      (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
      (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
     <-))
 (flatenv
  '(((let-bod
      let
      ((_ (app f1 #t)))
      (bod
       (f1)
       (rat
        ((λ (x1)
           (app
            (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
            (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))))
        (top))))
     app
     f1
     #f)
    ((top)
     app
     (λ (f1) (let ((_ (app f1 #t))) (app f1 #f)))
     (λ (x1)
       (app
        (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
        (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1)))))))))
(list
 'clos/con:
 (list (list #f (flatenv '((top)))) (list #t (flatenv '((top))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(top) (flatenv '()))
(list
 'clos/con:
 (list (list #f (flatenv '((top)))) (list #t (flatenv '((top))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app z x1 (-> x2 <-))
 (flatenv
  '(((bod
      (x2)
      (ran
       (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
       ()
       ()
       (bod
        (x1)
        (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top)))))
     app
     (λ (z) (app z x1 x2))
     (λ (y1 y2) y1))
    ((let-bod
      let
      ((_ (app f2 #t)))
      (bod
       (f2)
       (rat
        ((λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
        (bod
         (x1)
         (ran (λ (f1) (let ((_ (app f1 #t))) (app f1 #f))) () () (top))))))
     app
     f2
     #f))))
(list
 'clos/con:
 (list
  (list
   #f
   (flatenv
    '((λ (x1)
        (->
         (app
          (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
          (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         <-))
      (let (_) (-> (app f1 #f) <-)))))
  (list
   #f
   (flatenv
    '((λ (x1)
        (->
         (app
          (λ (f2) (let ((_ (app f2 #t))) (app f2 #f)))
          (λ (x2) (app (λ (z) (app z x1 x2)) (λ (y1 y2) y1))))
         <-))
      (let ((-> _ = (app f1 #t) <-)) bod))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
