'(expression:
  (letrec ((a
            (λ (y) (match (app equal? y 0) (#t (app a (app - y 1))) (#f y)))))
    (app a 2)))

(list
 'query:
 '(λ (y) (-> (match (app equal? y 0) (#t (app a (app - y 1))) (#f y)) <-))
 (menv '((□? (y)))))

(list
 (list 'eval '(app - y (-> 1 <-)) (menv '((□? (y)))))
 (list
  'eval
  '(app - y (-> 1 <-))
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))))))
 (list
  'eval
  '(app - y (-> 1 <-))
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y)) □? (y)))))
 (list
  'eval
  '(app - y (-> 1 <-))
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (letrec (a) (-> (app a 2) <-))))))
 (list 'eval '(app - y (-> 1 <-)) (menv '(((letrec (a) (-> (app a 2) <-))))))
 (list
  'eval
  '(app - (-> y <-) 1)
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))))))
 (list 'eval '(app - (-> y <-) 1) (menv '((□? (y)))))
 (list
  'eval
  '(app - (-> y <-) 1)
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y)) □? (y)))))
 (list
  'eval
  '(app - (-> y <-) 1)
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (letrec (a) (-> (app a 2) <-))))))
 (list 'eval '(app - (-> y <-) 1) (menv '(((letrec (a) (-> (app a 2) <-))))))
 (list 'eval '(app a (-> 2 <-)) (menv '()))
 (list
  'eval
  '(app a (-> (app - y 1) <-))
  (menv '(((letrec (a) (-> (app a 2) <-))))))
 (list
  'eval
  '(app a (-> (app - y 1) <-))
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))))))
 (list 'eval '(app a (-> (app - y 1) <-)) (menv '((□? (y)))))
 (list
  'eval
  '(app a (-> (app - y 1) <-))
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y)) □? (y)))))
 (list
  'eval
  '(app a (-> (app - y 1) <-))
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (letrec (a) (-> (app a 2) <-))))))
 (list
  'eval
  '(app equal? y (-> 0 <-))
  (menv '(((letrec (a) (-> (app a 2) <-))))))
 (list
  'eval
  '(app equal? y (-> 0 <-))
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))))))
 (list
  'eval
  '(app equal? y (-> 0 <-))
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (letrec (a) (-> (app a 2) <-))))))
 (list 'eval '(app equal? y (-> 0 <-)) (menv '((□? (y)))))
 (list
  'eval
  '(app equal? y (-> 0 <-))
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y)) □? (y)))))
 (list 'eval '(app equal? (-> y <-) 0) (menv '((□? (y)))))
 (list
  'eval
  '(app equal? (-> y <-) 0)
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y)) □? (y)))))
 (list
  'eval
  '(app equal? (-> y <-) 0)
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))))))
 (list
  'eval
  '(app equal? (-> y <-) 0)
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (letrec (a) (-> (app a 2) <-))))))
 (list
  'eval
  '(app equal? (-> y <-) 0)
  (menv '(((letrec (a) (-> (app a 2) <-))))))
 (list
  'eval
  '(app (-> - <-) y 1)
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y)) □? (y)))))
 (list 'eval '(app (-> - <-) y 1) (menv '((□? (y)))))
 (list
  'eval
  '(app (-> - <-) y 1)
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))))))
 (list
  'eval
  '(app (-> - <-) y 1)
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (letrec (a) (-> (app a 2) <-))))))
 (list 'eval '(app (-> - <-) y 1) (menv '(((letrec (a) (-> (app a 2) <-))))))
 (list
  'eval
  '(app (-> a <-) (app - y 1))
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y)) □? (y)))))
 (list 'eval '(app (-> a <-) (app - y 1)) (menv '((□? (y)))))
 (list
  'eval
  '(app (-> a <-) (app - y 1))
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (letrec (a) (-> (app a 2) <-))))))
 (list
  'eval
  '(app (-> a <-) (app - y 1))
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))))))
 (list
  'eval
  '(app (-> a <-) (app - y 1))
  (menv '(((letrec (a) (-> (app a 2) <-))))))
 (list
  'eval
  '(app (-> equal? <-) y 0)
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y)) □? (y)))))
 (list
  'eval
  '(app (-> equal? <-) y 0)
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (letrec (a) (-> (app a 2) <-))))))
 (list
  'eval
  '(app (-> equal? <-) y 0)
  (menv '(((letrec (a) (-> (app a 2) <-))))))
 (list
  'eval
  '(app (-> equal? <-) y 0)
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))))))
 (list 'eval '(app (-> equal? <-) y 0) (menv '((□? (y)))))
 (list
  'eval
  '(letrec ((->
             a
             =
             (λ (y) (match (app equal? y 0) (#t (app a (app - y 1))) (#f y)))
             <-))
     bod)
  (menv '()))
 (list
  'eval
  '(match (-> (app equal? y 0) <-) (#t (app a (app - y 1))) (#f y))
  (menv '((□? (y)))))
 (list
  'eval
  '(match (-> (app equal? y 0) <-) (#t (app a (app - y 1))) (#f y))
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y)) □? (y)))))
 (list
  'eval
  '(match (-> (app equal? y 0) <-) (#t (app a (app - y 1))) (#f y))
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (letrec (a) (-> (app a 2) <-))))))
 (list
  'eval
  '(match (-> (app equal? y 0) <-) (#t (app a (app - y 1))) (#f y))
  (menv '(((letrec (a) (-> (app a 2) <-))))))
 (list
  'eval
  '(match (-> (app equal? y 0) <-) (#t (app a (app - y 1))) (#f y))
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))))))
 (list
  'eval
  '(match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
  (menv '((□? (y)))))
 (list
  'eval
  '(match (app equal? y 0) (#t (app a (app - y 1))) (-> #f y <-))
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))))))
 (list
  'eval
  '(match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y)) □? (y)))))
 (list
  'eval
  '(match (app equal? y 0) (#t (app a (app - y 1))) (-> #f y <-))
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y)) □? (y)))))
 (list
  'eval
  '(match (app equal? y 0) (#t (app a (app - y 1))) (-> #f y <-))
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (letrec (a) (-> (app a 2) <-))))))
 (list
  'eval
  '(match (app equal? y 0) (#t (app a (app - y 1))) (-> #f y <-))
  (menv '(((letrec (a) (-> (app a 2) <-))))))
 (list
  'eval
  '(match (app equal? y 0) (#t (app a (app - y 1))) (-> #f y <-))
  (menv '((□? (y)))))
 (list
  'eval
  '(match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))))))
 (list
  'eval
  '(match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
  (menv '(((letrec (a) (-> (app a 2) <-))))))
 (list
  'eval
  '(match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (letrec (a) (-> (app a 2) <-))))))
 (list
  'eval
  '(λ (y) (-> (match (app equal? y 0) (#t (app a (app - y 1))) (#f y)) <-))
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (letrec (a) (-> (app a 2) <-))))))
 (list
  'eval
  '(λ (y) (-> (match (app equal? y 0) (#t (app a (app - y 1))) (#f y)) <-))
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y)) □? (y)))))
 (list
  'eval
  '(λ (y) (-> (match (app equal? y 0) (#t (app a (app - y 1))) (#f y)) <-))
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))))))
 (list
  'eval
  '(λ (y) (-> (match (app equal? y 0) (#t (app a (app - y 1))) (#f y)) <-))
  (menv '((□? (y)))))
 (list
  'eval
  '(λ (y) (-> (match (app equal? y 0) (#t (app a (app - y 1))) (#f y)) <-))
  (menv '(((letrec (a) (-> (app a 2) <-))))))
 (list
  'expr
  '(app (-> a <-) (app - y 1))
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y)) □? (y)))))
 (list 'expr '(app (-> a <-) (app - y 1)) (menv '((□? (y)))))
 (list
  'expr
  '(app (-> a <-) (app - y 1))
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (letrec (a) (-> (app a 2) <-))))))
 (list 'expr '(app (-> a <-) 2) (menv '()))
 (list
  'expr
  '(app (-> a <-) (app - y 1))
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))))))
 (list
  'expr
  '(app (-> a <-) (app - y 1))
  (menv '(((letrec (a) (-> (app a 2) <-))))))
 (list
  'expr
  '(letrec ((->
             a
             =
             (λ (y) (match (app equal? y 0) (#t (app a (app - y 1))) (#f y)))
             <-))
     bod)
  (menv '()))
 (list 'refine (menv '((□? (y)))))
 (list
  'refine
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      □?
      (y))))))
71


(list
 'query:
 '(match (app equal? y 0) (#t (app a (app - y 1))) (-> #f y <-))
 (menv '((□? (y)))))

(list
 (list 'eval '(app - y (-> 1 <-)) (menv '((□? (y)))))
 (list
  'eval
  '(app - y (-> 1 <-))
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))))))
 (list
  'eval
  '(app - y (-> 1 <-))
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y)) □? (y)))))
 (list
  'eval
  '(app - y (-> 1 <-))
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (letrec (a) (-> (app a 2) <-))))))
 (list 'eval '(app - y (-> 1 <-)) (menv '(((letrec (a) (-> (app a 2) <-))))))
 (list
  'eval
  '(app - (-> y <-) 1)
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))))))
 (list 'eval '(app - (-> y <-) 1) (menv '((□? (y)))))
 (list
  'eval
  '(app - (-> y <-) 1)
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y)) □? (y)))))
 (list
  'eval
  '(app - (-> y <-) 1)
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (letrec (a) (-> (app a 2) <-))))))
 (list 'eval '(app - (-> y <-) 1) (menv '(((letrec (a) (-> (app a 2) <-))))))
 (list 'eval '(app a (-> 2 <-)) (menv '()))
 (list
  'eval
  '(app a (-> (app - y 1) <-))
  (menv '(((letrec (a) (-> (app a 2) <-))))))
 (list
  'eval
  '(app a (-> (app - y 1) <-))
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))))))
 (list 'eval '(app a (-> (app - y 1) <-)) (menv '((□? (y)))))
 (list
  'eval
  '(app a (-> (app - y 1) <-))
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (letrec (a) (-> (app a 2) <-))))))
 (list
  'eval
  '(app a (-> (app - y 1) <-))
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y)) □? (y)))))
 (list
  'eval
  '(app (-> - <-) y 1)
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y)) □? (y)))))
 (list 'eval '(app (-> - <-) y 1) (menv '((□? (y)))))
 (list
  'eval
  '(app (-> - <-) y 1)
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))))))
 (list
  'eval
  '(app (-> - <-) y 1)
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (letrec (a) (-> (app a 2) <-))))))
 (list 'eval '(app (-> - <-) y 1) (menv '(((letrec (a) (-> (app a 2) <-))))))
 (list
  'eval
  '(match (app equal? y 0) (#t (app a (app - y 1))) (-> #f y <-))
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))))))
 (list
  'eval
  '(match (app equal? y 0) (#t (app a (app - y 1))) (-> #f y <-))
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y)) □? (y)))))
 (list
  'eval
  '(match (app equal? y 0) (#t (app a (app - y 1))) (-> #f y <-))
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (letrec (a) (-> (app a 2) <-))))))
 (list
  'eval
  '(match (app equal? y 0) (#t (app a (app - y 1))) (-> #f y <-))
  (menv '(((letrec (a) (-> (app a 2) <-))))))
 (list
  'eval
  '(match (app equal? y 0) (#t (app a (app - y 1))) (-> #f y <-))
  (menv '((□? (y)))))
 (list
  'expr
  '(app (-> a <-) (app - y 1))
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y)) □? (y)))))
 (list 'expr '(app (-> a <-) (app - y 1)) (menv '((□? (y)))))
 (list
  'expr
  '(app (-> a <-) (app - y 1))
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (letrec (a) (-> (app a 2) <-))))))
 (list 'expr '(app (-> a <-) 2) (menv '()))
 (list
  'expr
  '(app (-> a <-) (app - y 1))
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))))))
 (list
  'expr
  '(app (-> a <-) (app - y 1))
  (menv '(((letrec (a) (-> (app a 2) <-))))))
 (list
  'expr
  '(letrec ((->
             a
             =
             (λ (y) (match (app equal? y 0) (#t (app a (app - y 1))) (#f y)))
             <-))
     bod)
  (menv '()))
 (list 'refine (menv '((□? (y)))))
 (list
  'refine
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      □?
      (y))))))
35


(list
 'query:
 '(match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
 (menv '((□? (y)))))

(list
 (list 'eval '(app - y (-> 1 <-)) (menv '((□? (y)))))
 (list
  'eval
  '(app - y (-> 1 <-))
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))))))
 (list
  'eval
  '(app - y (-> 1 <-))
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y)) □? (y)))))
 (list
  'eval
  '(app - y (-> 1 <-))
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (letrec (a) (-> (app a 2) <-))))))
 (list 'eval '(app - y (-> 1 <-)) (menv '(((letrec (a) (-> (app a 2) <-))))))
 (list
  'eval
  '(app - (-> y <-) 1)
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))))))
 (list 'eval '(app - (-> y <-) 1) (menv '((□? (y)))))
 (list
  'eval
  '(app - (-> y <-) 1)
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y)) □? (y)))))
 (list
  'eval
  '(app - (-> y <-) 1)
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (letrec (a) (-> (app a 2) <-))))))
 (list 'eval '(app - (-> y <-) 1) (menv '(((letrec (a) (-> (app a 2) <-))))))
 (list 'eval '(app a (-> 2 <-)) (menv '()))
 (list
  'eval
  '(app a (-> (app - y 1) <-))
  (menv '(((letrec (a) (-> (app a 2) <-))))))
 (list
  'eval
  '(app a (-> (app - y 1) <-))
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))))))
 (list 'eval '(app a (-> (app - y 1) <-)) (menv '((□? (y)))))
 (list
  'eval
  '(app a (-> (app - y 1) <-))
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y)) □? (y)))))
 (list
  'eval
  '(app a (-> (app - y 1) <-))
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (letrec (a) (-> (app a 2) <-))))))
 (list
  'eval
  '(app equal? y (-> 0 <-))
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))))))
 (list
  'eval
  '(app equal? y (-> 0 <-))
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (letrec (a) (-> (app a 2) <-))))))
 (list
  'eval
  '(app equal? y (-> 0 <-))
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y)) □? (y)))))
 (list
  'eval
  '(app equal? (-> y <-) 0)
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y)) □? (y)))))
 (list
  'eval
  '(app equal? (-> y <-) 0)
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))))))
 (list
  'eval
  '(app equal? (-> y <-) 0)
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (letrec (a) (-> (app a 2) <-))))))
 (list
  'eval
  '(app (-> - <-) y 1)
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y)) □? (y)))))
 (list 'eval '(app (-> - <-) y 1) (menv '((□? (y)))))
 (list
  'eval
  '(app (-> - <-) y 1)
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))))))
 (list
  'eval
  '(app (-> - <-) y 1)
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (letrec (a) (-> (app a 2) <-))))))
 (list 'eval '(app (-> - <-) y 1) (menv '(((letrec (a) (-> (app a 2) <-))))))
 (list
  'eval
  '(app (-> a <-) (app - y 1))
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y)) □? (y)))))
 (list 'eval '(app (-> a <-) (app - y 1)) (menv '((□? (y)))))
 (list
  'eval
  '(app (-> a <-) (app - y 1))
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (letrec (a) (-> (app a 2) <-))))))
 (list
  'eval
  '(app (-> a <-) (app - y 1))
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))))))
 (list
  'eval
  '(app (-> a <-) (app - y 1))
  (menv '(((letrec (a) (-> (app a 2) <-))))))
 (list
  'eval
  '(app (-> equal? <-) y 0)
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y)) □? (y)))))
 (list
  'eval
  '(app (-> equal? <-) y 0)
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (letrec (a) (-> (app a 2) <-))))))
 (list
  'eval
  '(app (-> equal? <-) y 0)
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))))))
 (list
  'eval
  '(letrec ((->
             a
             =
             (λ (y) (match (app equal? y 0) (#t (app a (app - y 1))) (#f y)))
             <-))
     bod)
  (menv '()))
 (list
  'eval
  '(match (-> (app equal? y 0) <-) (#t (app a (app - y 1))) (#f y))
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y)) □? (y)))))
 (list
  'eval
  '(match (-> (app equal? y 0) <-) (#t (app a (app - y 1))) (#f y))
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (letrec (a) (-> (app a 2) <-))))))
 (list
  'eval
  '(match (-> (app equal? y 0) <-) (#t (app a (app - y 1))) (#f y))
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))))))
 (list
  'eval
  '(match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
  (menv '((□? (y)))))
 (list
  'eval
  '(match (app equal? y 0) (#t (app a (app - y 1))) (-> #f y <-))
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))))))
 (list
  'eval
  '(match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y)) □? (y)))))
 (list
  'eval
  '(match (app equal? y 0) (#t (app a (app - y 1))) (-> #f y <-))
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y)) □? (y)))))
 (list
  'eval
  '(match (app equal? y 0) (#t (app a (app - y 1))) (-> #f y <-))
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (letrec (a) (-> (app a 2) <-))))))
 (list
  'eval
  '(match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))))))
 (list
  'eval
  '(match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
  (menv '(((letrec (a) (-> (app a 2) <-))))))
 (list
  'eval
  '(match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (letrec (a) (-> (app a 2) <-))))))
 (list
  'eval
  '(λ (y) (-> (match (app equal? y 0) (#t (app a (app - y 1))) (#f y)) <-))
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (letrec (a) (-> (app a 2) <-))))))
 (list
  'eval
  '(λ (y) (-> (match (app equal? y 0) (#t (app a (app - y 1))) (#f y)) <-))
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y)) □? (y)))))
 (list
  'eval
  '(λ (y) (-> (match (app equal? y 0) (#t (app a (app - y 1))) (#f y)) <-))
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))))))
 (list
  'expr
  '(app (-> a <-) (app - y 1))
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y)) □? (y)))))
 (list 'expr '(app (-> a <-) (app - y 1)) (menv '((□? (y)))))
 (list
  'expr
  '(app (-> a <-) (app - y 1))
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (letrec (a) (-> (app a 2) <-))))))
 (list 'expr '(app (-> a <-) 2) (menv '()))
 (list
  'expr
  '(app (-> a <-) (app - y 1))
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))))))
 (list
  'expr
  '(app (-> a <-) (app - y 1))
  (menv '(((letrec (a) (-> (app a 2) <-))))))
 (list
  'expr
  '(letrec ((->
             a
             =
             (λ (y) (match (app equal? y 0) (#t (app a (app - y 1))) (#f y)))
             <-))
     bod)
  (menv '()))
 (list 'refine (menv '((□? (y)))))
 (list
  'refine
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      □?
      (y))))))
59


(list 'query: '(app a (-> (app - y 1) <-)) (menv '((□? (y)))))

(list
 (list 'eval '(app - y (-> 1 <-)) (menv '((□? (y)))))
 (list
  'eval
  '(app - y (-> 1 <-))
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))))))
 (list
  'eval
  '(app - y (-> 1 <-))
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y)) □? (y)))))
 (list
  'eval
  '(app - y (-> 1 <-))
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (letrec (a) (-> (app a 2) <-))))))
 (list 'eval '(app - y (-> 1 <-)) (menv '(((letrec (a) (-> (app a 2) <-))))))
 (list
  'eval
  '(app - (-> y <-) 1)
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))))))
 (list
  'eval
  '(app - (-> y <-) 1)
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y)) □? (y)))))
 (list
  'eval
  '(app - (-> y <-) 1)
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (letrec (a) (-> (app a 2) <-))))))
 (list 'eval '(app - (-> y <-) 1) (menv '(((letrec (a) (-> (app a 2) <-))))))
 (list 'eval '(app - (-> y <-) 1) (menv '((□? (y)))))
 (list 'eval '(app a (-> 2 <-)) (menv '()))
 (list
  'eval
  '(app a (-> (app - y 1) <-))
  (menv '(((letrec (a) (-> (app a 2) <-))))))
 (list
  'eval
  '(app a (-> (app - y 1) <-))
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))))))
 (list 'eval '(app a (-> (app - y 1) <-)) (menv '((□? (y)))))
 (list
  'eval
  '(app a (-> (app - y 1) <-))
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (letrec (a) (-> (app a 2) <-))))))
 (list
  'eval
  '(app a (-> (app - y 1) <-))
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y)) □? (y)))))
 (list
  'eval
  '(app (-> - <-) y 1)
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y)) □? (y)))))
 (list 'eval '(app (-> - <-) y 1) (menv '((□? (y)))))
 (list
  'eval
  '(app (-> - <-) y 1)
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))))))
 (list
  'eval
  '(app (-> - <-) y 1)
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (letrec (a) (-> (app a 2) <-))))))
 (list 'eval '(app (-> - <-) y 1) (menv '(((letrec (a) (-> (app a 2) <-))))))
 (list
  'expr
  '(app (-> a <-) (app - y 1))
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y)) □? (y)))))
 (list
  'expr
  '(app (-> a <-) (app - y 1))
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (letrec (a) (-> (app a 2) <-))))))
 (list 'expr '(app (-> a <-) 2) (menv '()))
 (list
  'expr
  '(app (-> a <-) (app - y 1))
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))))))
 (list
  'expr
  '(app (-> a <-) (app - y 1))
  (menv '(((letrec (a) (-> (app a 2) <-))))))
 (list 'expr '(app (-> a <-) (app - y 1)) (menv '((□? (y)))))
 (list
  'expr
  '(letrec ((->
             a
             =
             (λ (y) (match (app equal? y 0) (#t (app a (app - y 1))) (#f y)))
             <-))
     bod)
  (menv '()))
 (list 'refine (menv '((□? (y)))))
 (list
  'refine
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      □?
      (y))))))
30


(list 'query: '(app - (-> y <-) 1) (menv '((□? (y)))))

(list
 (list 'eval '(app - y (-> 1 <-)) (menv '((□? (y)))))
 (list
  'eval
  '(app - y (-> 1 <-))
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))))))
 (list
  'eval
  '(app - y (-> 1 <-))
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y)) □? (y)))))
 (list
  'eval
  '(app - y (-> 1 <-))
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (letrec (a) (-> (app a 2) <-))))))
 (list 'eval '(app - y (-> 1 <-)) (menv '(((letrec (a) (-> (app a 2) <-))))))
 (list
  'eval
  '(app - (-> y <-) 1)
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))))))
 (list
  'eval
  '(app - (-> y <-) 1)
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y)) □? (y)))))
 (list
  'eval
  '(app - (-> y <-) 1)
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (letrec (a) (-> (app a 2) <-))))))
 (list 'eval '(app - (-> y <-) 1) (menv '(((letrec (a) (-> (app a 2) <-))))))
 (list 'eval '(app - (-> y <-) 1) (menv '((□? (y)))))
 (list 'eval '(app a (-> 2 <-)) (menv '()))
 (list
  'eval
  '(app a (-> (app - y 1) <-))
  (menv '(((letrec (a) (-> (app a 2) <-))))))
 (list
  'eval
  '(app a (-> (app - y 1) <-))
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))))))
 (list 'eval '(app a (-> (app - y 1) <-)) (menv '((□? (y)))))
 (list
  'eval
  '(app a (-> (app - y 1) <-))
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (letrec (a) (-> (app a 2) <-))))))
 (list
  'eval
  '(app a (-> (app - y 1) <-))
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y)) □? (y)))))
 (list
  'eval
  '(app (-> - <-) y 1)
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y)) □? (y)))))
 (list 'eval '(app (-> - <-) y 1) (menv '((□? (y)))))
 (list
  'eval
  '(app (-> - <-) y 1)
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))))))
 (list
  'eval
  '(app (-> - <-) y 1)
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (letrec (a) (-> (app a 2) <-))))))
 (list 'eval '(app (-> - <-) y 1) (menv '(((letrec (a) (-> (app a 2) <-))))))
 (list
  'expr
  '(app (-> a <-) (app - y 1))
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y)) □? (y)))))
 (list
  'expr
  '(app (-> a <-) (app - y 1))
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (letrec (a) (-> (app a 2) <-))))))
 (list 'expr '(app (-> a <-) 2) (menv '()))
 (list
  'expr
  '(app (-> a <-) (app - y 1))
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))))))
 (list
  'expr
  '(app (-> a <-) (app - y 1))
  (menv '(((letrec (a) (-> (app a 2) <-))))))
 (list 'expr '(app (-> a <-) (app - y 1)) (menv '((□? (y)))))
 (list
  'expr
  '(letrec ((->
             a
             =
             (λ (y) (match (app equal? y 0) (#t (app a (app - y 1))) (#f y)))
             <-))
     bod)
  (menv '()))
 (list 'refine (menv '((□? (y)))))
 (list
  'refine
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      □?
      (y))))))
30


(list
 'query:
 '(match (-> (app equal? y 0) <-) (#t (app a (app - y 1))) (#f y))
 (menv '((□? (y)))))

(list
 (list 'eval '(app - y (-> 1 <-)) (menv '((□? (y)))))
 (list
  'eval
  '(app - y (-> 1 <-))
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))))))
 (list
  'eval
  '(app - y (-> 1 <-))
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y)) □? (y)))))
 (list
  'eval
  '(app - y (-> 1 <-))
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (letrec (a) (-> (app a 2) <-))))))
 (list 'eval '(app - y (-> 1 <-)) (menv '(((letrec (a) (-> (app a 2) <-))))))
 (list
  'eval
  '(app - (-> y <-) 1)
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))))))
 (list 'eval '(app - (-> y <-) 1) (menv '((□? (y)))))
 (list
  'eval
  '(app - (-> y <-) 1)
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y)) □? (y)))))
 (list
  'eval
  '(app - (-> y <-) 1)
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (letrec (a) (-> (app a 2) <-))))))
 (list 'eval '(app - (-> y <-) 1) (menv '(((letrec (a) (-> (app a 2) <-))))))
 (list 'eval '(app a (-> 2 <-)) (menv '()))
 (list
  'eval
  '(app a (-> (app - y 1) <-))
  (menv '(((letrec (a) (-> (app a 2) <-))))))
 (list
  'eval
  '(app a (-> (app - y 1) <-))
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))))))
 (list 'eval '(app a (-> (app - y 1) <-)) (menv '((□? (y)))))
 (list
  'eval
  '(app a (-> (app - y 1) <-))
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y)) □? (y)))))
 (list
  'eval
  '(app a (-> (app - y 1) <-))
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (letrec (a) (-> (app a 2) <-))))))
 (list
  'eval
  '(app equal? y (-> 0 <-))
  (menv '(((letrec (a) (-> (app a 2) <-))))))
 (list
  'eval
  '(app equal? y (-> 0 <-))
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))))))
 (list
  'eval
  '(app equal? y (-> 0 <-))
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (letrec (a) (-> (app a 2) <-))))))
 (list 'eval '(app equal? y (-> 0 <-)) (menv '((□? (y)))))
 (list
  'eval
  '(app equal? y (-> 0 <-))
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y)) □? (y)))))
 (list 'eval '(app equal? (-> y <-) 0) (menv '((□? (y)))))
 (list
  'eval
  '(app equal? (-> y <-) 0)
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y)) □? (y)))))
 (list
  'eval
  '(app equal? (-> y <-) 0)
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))))))
 (list
  'eval
  '(app equal? (-> y <-) 0)
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (letrec (a) (-> (app a 2) <-))))))
 (list
  'eval
  '(app equal? (-> y <-) 0)
  (menv '(((letrec (a) (-> (app a 2) <-))))))
 (list
  'eval
  '(app (-> - <-) y 1)
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y)) □? (y)))))
 (list 'eval '(app (-> - <-) y 1) (menv '((□? (y)))))
 (list
  'eval
  '(app (-> - <-) y 1)
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))))))
 (list
  'eval
  '(app (-> - <-) y 1)
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (letrec (a) (-> (app a 2) <-))))))
 (list 'eval '(app (-> - <-) y 1) (menv '(((letrec (a) (-> (app a 2) <-))))))
 (list
  'eval
  '(app (-> equal? <-) y 0)
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y)) □? (y)))))
 (list
  'eval
  '(app (-> equal? <-) y 0)
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (letrec (a) (-> (app a 2) <-))))))
 (list
  'eval
  '(app (-> equal? <-) y 0)
  (menv '(((letrec (a) (-> (app a 2) <-))))))
 (list
  'eval
  '(app (-> equal? <-) y 0)
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))))))
 (list 'eval '(app (-> equal? <-) y 0) (menv '((□? (y)))))
 (list
  'eval
  '(match (-> (app equal? y 0) <-) (#t (app a (app - y 1))) (#f y))
  (menv '((□? (y)))))
 (list
  'eval
  '(match (-> (app equal? y 0) <-) (#t (app a (app - y 1))) (#f y))
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y)) □? (y)))))
 (list
  'eval
  '(match (-> (app equal? y 0) <-) (#t (app a (app - y 1))) (#f y))
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (letrec (a) (-> (app a 2) <-))))))
 (list
  'eval
  '(match (-> (app equal? y 0) <-) (#t (app a (app - y 1))) (#f y))
  (menv '(((letrec (a) (-> (app a 2) <-))))))
 (list
  'eval
  '(match (-> (app equal? y 0) <-) (#t (app a (app - y 1))) (#f y))
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))))))
 (list
  'expr
  '(app (-> a <-) (app - y 1))
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y)) □? (y)))))
 (list 'expr '(app (-> a <-) (app - y 1)) (menv '((□? (y)))))
 (list
  'expr
  '(app (-> a <-) (app - y 1))
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (letrec (a) (-> (app a 2) <-))))))
 (list 'expr '(app (-> a <-) 2) (menv '()))
 (list
  'expr
  '(app (-> a <-) (app - y 1))
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))))))
 (list
  'expr
  '(app (-> a <-) (app - y 1))
  (menv '(((letrec (a) (-> (app a 2) <-))))))
 (list
  'expr
  '(letrec ((->
             a
             =
             (λ (y) (match (app equal? y 0) (#t (app a (app - y 1))) (#f y)))
             <-))
     bod)
  (menv '()))
 (list 'refine (menv '((□? (y)))))
 (list
  'refine
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      □?
      (y))))))
50


(list 'query: '(app equal? (-> y <-) 0) (menv '((□? (y)))))

(list
 (list 'eval '(app - y (-> 1 <-)) (menv '((□? (y)))))
 (list
  'eval
  '(app - y (-> 1 <-))
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))))))
 (list
  'eval
  '(app - y (-> 1 <-))
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y)) □? (y)))))
 (list
  'eval
  '(app - y (-> 1 <-))
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (letrec (a) (-> (app a 2) <-))))))
 (list 'eval '(app - y (-> 1 <-)) (menv '(((letrec (a) (-> (app a 2) <-))))))
 (list
  'eval
  '(app - (-> y <-) 1)
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))))))
 (list 'eval '(app - (-> y <-) 1) (menv '((□? (y)))))
 (list
  'eval
  '(app - (-> y <-) 1)
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y)) □? (y)))))
 (list
  'eval
  '(app - (-> y <-) 1)
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (letrec (a) (-> (app a 2) <-))))))
 (list 'eval '(app - (-> y <-) 1) (menv '(((letrec (a) (-> (app a 2) <-))))))
 (list 'eval '(app a (-> 2 <-)) (menv '()))
 (list
  'eval
  '(app a (-> (app - y 1) <-))
  (menv '(((letrec (a) (-> (app a 2) <-))))))
 (list
  'eval
  '(app a (-> (app - y 1) <-))
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))))))
 (list 'eval '(app a (-> (app - y 1) <-)) (menv '((□? (y)))))
 (list
  'eval
  '(app a (-> (app - y 1) <-))
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (letrec (a) (-> (app a 2) <-))))))
 (list
  'eval
  '(app a (-> (app - y 1) <-))
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y)) □? (y)))))
 (list 'eval '(app equal? (-> y <-) 0) (menv '((□? (y)))))
 (list
  'eval
  '(app equal? (-> y <-) 0)
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y)) □? (y)))))
 (list
  'eval
  '(app equal? (-> y <-) 0)
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))))))
 (list
  'eval
  '(app equal? (-> y <-) 0)
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (letrec (a) (-> (app a 2) <-))))))
 (list
  'eval
  '(app equal? (-> y <-) 0)
  (menv '(((letrec (a) (-> (app a 2) <-))))))
 (list
  'eval
  '(app (-> - <-) y 1)
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y)) □? (y)))))
 (list 'eval '(app (-> - <-) y 1) (menv '((□? (y)))))
 (list
  'eval
  '(app (-> - <-) y 1)
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))))))
 (list
  'eval
  '(app (-> - <-) y 1)
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (letrec (a) (-> (app a 2) <-))))))
 (list 'eval '(app (-> - <-) y 1) (menv '(((letrec (a) (-> (app a 2) <-))))))
 (list
  'expr
  '(app (-> a <-) (app - y 1))
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y)) □? (y)))))
 (list
  'expr
  '(app (-> a <-) (app - y 1))
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (letrec (a) (-> (app a 2) <-))))))
 (list 'expr '(app (-> a <-) 2) (menv '()))
 (list
  'expr
  '(app (-> a <-) (app - y 1))
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      (match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))))))
 (list
  'expr
  '(app (-> a <-) (app - y 1))
  (menv '(((letrec (a) (-> (app a 2) <-))))))
 (list 'expr '(app (-> a <-) (app - y 1)) (menv '((□? (y)))))
 (list
  'expr
  '(letrec ((->
             a
             =
             (λ (y) (match (app equal? y 0) (#t (app a (app - y 1))) (#f y)))
             <-))
     bod)
  (menv '()))
 (list 'refine (menv '((□? (y)))))
 (list
  'refine
  (menv
   '(((match (app equal? y 0) (-> #t (app a (app - y 1)) <-) (#f y))
      □?
      (y))))))
35

