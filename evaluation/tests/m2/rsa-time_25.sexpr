'(clean-cache
  rsa
  2
  122
  lettypes
  "\"'(eval ((top) lettypes (cons) ...) (env ()))\""
  #f)
'(clean-cache
  rsa
  2
  122
  letrec*
  "\"'(eval\n  (lettypes cons ... cons (letrec* (car ... decrypted-ciphertext) ...))\n  (env ()))\""
  #f)
'(clean-cache
  rsa
  2
  122
  app
  "\"'(eval\n  (letrec*\n   (...\n    ciphertext\n    (decrypted-ciphertext (-> (app decrypt ciphertext d n) <-))\n    ()\n    ...)\n   ...)\n  (env ()))\""
  #f)
'(clean-cache
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app decrypt ciphertext d (-> n <-)) (env ()))\""
  7
  7
  0
  0
  7
  0
  7
  1
  1
  7
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app decrypt ciphertext (-> d <-) n) (env ()))\""
  308
  276
  18
  14
  220
  8
  228
  1
  3091/3510
  182
  #f
  97/69
  ((27/2 27/2 0) (14 14 0) (14 14 0)))
'(clean-cache
  rsa
  2
  122
  ref-or-constructor
  "\"'(eval (app decrypt (-> ciphertext <-) d n) (env ()))\""
  #f)
'(clean-cache
  rsa
  2
  122
  app
  "\"'(eval\n  (letrec*\n   (...\n    plaintext\n    (ciphertext (-> (app encrypt plaintext e n) <-))\n    decrypted-ciphertext\n    ...)\n   ...)\n  (env ()))\""
  #f)
'(clean-cache
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app encrypt plaintext e (-> n <-)) (env ()))\""
  7
  7
  0
  0
  7
  0
  7
  1
  1
  7
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  2
  25
  122
  app
  "\"'(eval\n  (letrec* (... e (d (-> (app private-exponent e p q) <-)) plaintext ...) ...)\n  (env ()))\""
  307
  275
  18
  14
  219
  8
  227
  1
  3061/3480
  182
  #f
  386/275
  ((27/2 27/2 0) (27/2 27/2 0) (27/2 27/2 0)))
'(clean-cache
  rsa
  2
  25
  122
  app
  "\"'(eval (letrec* (... q (n (-> (app * p q) <-)) e ...) ...) (env ()))\""
  6
  6
  0
  0
  6
  0
  6
  1
  1
  6
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  2
  122
  app
  "\"'(eval (λ (c d n) (-> (app modulo-power c d n) <-)) (env ((□? (c d n)))))\""
  #f)
'(clean-cache
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app modulo-power c d (-> n <-)) (env ((□? (c d n)))))\""
  11
  8
  2
  1
  7
  2
  9
  1
  7/8
  8
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app modulo-power c (-> d <-) n) (env ((□? (c d n)))))\""
  312
  277
  20
  15
  220
  10
  230
  1
  3091/3540
  182
  #f
  390/277
  ((14 14 0) (14 14 0) (27/2 27/2 0)))
'(clean-cache
  rsa
  2
  122
  ref-or-constructor
  "\"'(eval (app modulo-power (-> c <-) d n) (env ((□? (c d n)))))\""
  #f)
'(clean-cache
  rsa
  2
  122
  match
  "\"'(eval (λ (m e n) (-> (match (app > m n) ...) <-)) (env ((□? (m e n)))))\""
  #f)
'(clean-cache
  rsa
  2
  25
  122
  app
  "\"'(eval\n  (match\n   (app > m n)\n   (#f)\n   (_ (-> (app error \"The modulus is too small to encrypt the message.\") <-)))\n  (env ((□? (m e n)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  2
  122
  app
  "\"'(eval\n  (match (app > m n) ((#f) (-> (app modulo-power m e n) <-)) _)\n  (env ((□? (m e n)))))\""
  #f)
'(clean-cache
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app modulo-power m e (-> n <-)) (env ((□? (m e n)))))\""
  11
  8
  2
  1
  7
  2
  9
  1
  7/8
  8
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app modulo-power m (-> e <-) n) (env ((□? (m e n)))))\""
  6
  3
  2
  1
  2
  2
  4
  1
  2/3
  3
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app modulo-power (-> m <-) e n) (env ((□? (m e n)))))\""
  6
  3
  2
  1
  2
  2
  4
  1
  2/3
  3
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  2
  25
  122
  app
  "\"'(eval (match (-> (app > m n) <-) (#f) _) (env ((□? (m e n)))))\""
  19
  16
  2
  1
  12
  2
  14
  1
  21/26
  16
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app > m (-> n <-)) (env ((□? (m e n)))))\""
  11
  8
  2
  1
  7
  2
  9
  1
  7/8
  8
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app > (-> m <-) n) (env ((□? (m e n)))))\""
  6
  3
  2
  1
  2
  2
  4
  1
  2/3
  3
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  2
  25
  122
  match
  "\"'(eval\n  (λ (e p q) (-> (match (app is-legal-public-exponent? e p q) ...) <-))\n  (env ((□? (e p q)))))\""
  325
  294
  18
  13
  215
  8
  223
  1
  2611/3390
  201
  #f
  135/98
  ((15 15 0) (15 15 0) (15 15 0)))
'(clean-cache
  rsa
  2
  25
  122
  app
  "\"'(eval\n  (match\n   (app is-legal-public-exponent? e p q)\n   (#f)\n   (_ (-> (app modulo-inverse e (app totient p q)) <-)))\n  (env ((□? (e p q)))))\""
  269
  241
  16
  12
  164
  7
  171
  1
  1239/1640
  141
  #f
  364/241
  ((29/2 29/2 0) (29/2 29/2 0) (29/2 29/2 0)))
'(clean-cache
  rsa
  2
  25
  122
  app
  "\"'(eval (app modulo-inverse e (-> (app totient p q) <-)) (env ((□? (e p q)))))\""
  42
  32
  6
  4
  18
  3
  21
  1
  23/38
  32
  #t
  1
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app totient p (-> q <-)) (env ((□? (e p q)))))\""
  6
  3
  2
  1
  2
  2
  4
  1
  2/3
  3
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app totient (-> p <-) q) (env ((□? (e p q)))))\""
  6
  3
  2
  1
  2
  2
  4
  1
  2/3
  3
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app modulo-inverse (-> e <-) (app totient p q)) (env ((□? (e p q)))))\""
  6
  3
  2
  1
  2
  2
  4
  1
  2/3
  3
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  2
  25
  122
  app
  "\"'(eval\n  (match\n   (app is-legal-public-exponent? e p q)\n   ((#f) (-> (app error \"Not a legal public exponent for that modulus.\") <-))\n   _)\n  (env ((□? (e p q)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  2
  25
  122
  app
  "\"'(eval\n  (match (-> (app is-legal-public-exponent? e p q) <-) (#f) _)\n  (env ((□? (e p q)))))\""
  99
  86
  8
  5
  56
  4
  60
  1
  193/282
  86
  #t
  1
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app is-legal-public-exponent? e p (-> q <-)) (env ((□? (e p q)))))\""
  6
  3
  2
  1
  2
  2
  4
  1
  2/3
  3
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app is-legal-public-exponent? e (-> p <-) q) (env ((□? (e p q)))))\""
  6
  3
  2
  1
  2
  2
  4
  1
  2/3
  3
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app is-legal-public-exponent? (-> e <-) p q) (env ((□? (e p q)))))\""
  6
  3
  2
  1
  2
  2
  4
  1
  2/3
  3
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  2
  25
  122
  app
  "\"'(eval\n  (λ (e p q)\n    (->\n     (app\n      and\n      (app < 1 e)\n      (app < e (app totient p q))\n      (app = 1 (app gcd e (app totient p q))))\n     <-))\n  (env ((□? (e p q)))))\""
  93
  81
  8
  4
  53
  4
  57
  1
  191/264
  81
  #t
  1
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  rsa
  2
  25
  122
  app
  "\"'(eval\n  (app\n   and\n   (app < 1 e)\n   (app < e (app totient p q))\n   (-> (app = 1 (app gcd e (app totient p q))) <-))\n  (env ((□? (e p q)))))\""
  60
  48
  8
  4
  29
  4
  33
  1
  11/15
  48
  #t
  1
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  rsa
  2
  25
  122
  app
  "\"'(eval (app = 1 (-> (app gcd e (app totient p q)) <-)) (env ((□? (e p q)))))\""
  51
  39
  8
  4
  26
  4
  30
  1
  7/9
  39
  #t
  1
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  rsa
  2
  25
  122
  app
  "\"'(eval (app gcd e (-> (app totient p q) <-)) (env ((□? (e p q)))))\""
  52
  39
  8
  5
  20
  4
  24
  1
  4/7
  39
  #t
  1
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app totient p (-> q <-)) (env ((□? (e p q)))))\""
  12
  5
  4
  3
  3
  3
  6
  1
  5/8
  5
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app totient (-> p <-) q) (env ((□? (e p q)))))\""
  12
  5
  4
  3
  3
  3
  6
  1
  5/8
  5
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app gcd (-> e <-) (app totient p q)) (env ((□? (e p q)))))\""
  12
  5
  4
  3
  3
  3
  6
  1
  5/8
  5
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  2
  25
  122
  app
  "\"'(eval\n  (app\n   and\n   (app < 1 e)\n   (-> (app < e (app totient p q)) <-)\n   (app = 1 (app gcd e (app totient p q))))\n  (env ((□? (e p q)))))\""
  51
  39
  8
  4
  26
  4
  30
  1
  7/9
  39
  #t
  1
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  rsa
  2
  25
  122
  app
  "\"'(eval (app < e (-> (app totient p q) <-)) (env ((□? (e p q)))))\""
  52
  39
  8
  5
  20
  4
  24
  1
  4/7
  39
  #t
  1
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app totient p (-> q <-)) (env ((□? (e p q)))))\""
  12
  5
  4
  3
  3
  3
  6
  1
  5/8
  5
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app totient (-> p <-) q) (env ((□? (e p q)))))\""
  12
  5
  4
  3
  3
  3
  6
  1
  5/8
  5
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app < (-> e <-) (app totient p q)) (env ((□? (e p q)))))\""
  12
  5
  4
  3
  3
  3
  6
  1
  5/8
  5
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  2
  25
  122
  app
  "\"'(eval\n  (app\n   and\n   (-> (app < 1 e) <-)\n   (app < e (app totient p q))\n   (app = 1 (app gcd e (app totient p q))))\n  (env ((□? (e p q)))))\""
  21
  14
  4
  3
  6
  3
  9
  1
  1/2
  14
  #t
  1
  ((0 0 0) (0 0 0) (1/2 1/2 0)))
'(clean-cache
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app < 1 (-> e <-)) (env ((□? (e p q)))))\""
  12
  5
  4
  3
  3
  3
  6
  1
  5/8
  5
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  2
  122
  match
  "\"'(eval\n  (λ (base exp n) (-> (match (app = exp 0) ...) <-))\n  (env ((□? (base exp n)))))\""
  #f)
'(clean-cache
  rsa
  2
  122
  match
  "\"'(eval\n  (match (app = exp 0) ((#f) (-> (match (app odd? exp) ...) <-)) _)\n  (env ((□? (base exp n)))))\""
  #f)
'(clean-cache
  rsa
  2
  122
  app
  "\"'(eval\n  (match\n   (app odd? exp)\n   (#f)\n   (_\n    (->\n     (app modulo (app * base (app modulo-power base (app - exp 1) n)) n)\n     <-)))\n  (env ((□? (base exp n)))))\""
  #f)
'(clean-cache
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval\n  (app modulo (app * base (app modulo-power base (app - exp 1) n)) (-> n <-))\n  (env ((□? (base exp n)))))\""
  55
  40
  9
  6
  30
  5
  35
  1
  954/1183
  40
  #t
  1
  ((9/2 9/2 0) (9/2 9/2 0) (5 5 0)))
'(clean-cache
  rsa
  2
  122
  app
  "\"'(eval\n  (app modulo (-> (app * base (app modulo-power base (app - exp 1) n)) <-) n)\n  (env ((□? (base exp n)))))\""
  #f)
'(clean-cache
  rsa
  2
  122
  app
  "\"'(eval\n  (app * base (-> (app modulo-power base (app - exp 1) n) <-))\n  (env ((□? (base exp n)))))\""
  #f)
'(clean-cache
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval\n  (app modulo-power base (app - exp 1) (-> n <-))\n  (env ((□? (base exp n)))))\""
  55
  40
  9
  6
  30
  5
  35
  1
  73/84
  40
  #t
  1
  ((5 5 0) (5 5 0) (5 5 0)))
'(clean-cache
  rsa
  2
  25
  122
  app
  "\"'(eval\n  (app modulo-power base (-> (app - exp 1) <-) n)\n  (env ((□? (base exp n)))))\""
  437
  390
  27
  20
  303
  13
  316
  1
  302791/349440
  251
  #f
  41/26
  ((22 22 0) (22 22 0) (22 22 0)))
'(clean-cache
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app - (-> exp <-) 1) (env ((□? (base exp n)))))\""
  425
  378
  27
  20
  303
  13
  316
  1
  3355361/3843840
  242
  #f
  298/189
  ((20 20 0) (20 20 0) (20 20 0)))
'(clean-cache
  rsa
  2
  122
  ref-or-constructor
  "\"'(eval\n  (app modulo-power (-> base <-) (app - exp 1) n)\n  (env ((□? (base exp n)))))\""
  #f)
'(clean-cache
  rsa
  2
  122
  ref-or-constructor
  "\"'(eval\n  (app * (-> base <-) (app modulo-power base (app - exp 1) n))\n  (env ((□? (base exp n)))))\""
  #f)
'(clean-cache
  rsa
  2
  122
  app
  "\"'(eval\n  (match\n   (app odd? exp)\n   ((#f)\n    (->\n     (app modulo (app square (app modulo-power base (app / exp 2) n)) n)\n     <-))\n   _)\n  (env ((□? (base exp n)))))\""
  #f)
'(clean-cache
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval\n  (app modulo (app square (app modulo-power base (app / exp 2) n)) (-> n <-))\n  (env ((□? (base exp n)))))\""
  55
  40
  9
  6
  30
  5
  35
  1
  954/1183
  40
  #t
  1
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  rsa
  2
  122
  app
  "\"'(eval\n  (app modulo (-> (app square (app modulo-power base (app / exp 2) n)) <-) n)\n  (env ((□? (base exp n)))))\""
  #f)
'(clean-cache
  rsa
  2
  25
  122
  app
  "\"'(eval\n  (app square (-> (app modulo-power base (app / exp 2) n) <-))\n  (env ((□? (base exp n)))))\""
  497
  449
  27
  21
  354
  13
  367
  1
  165812/192465
  289
  #t
  691/449
  ((24 24 0) (49/2 49/2 0) (49/2 49/2 0)))
'(clean-cache
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval\n  (app modulo-power base (app / exp 2) (-> n <-))\n  (env ((□? (base exp n)))))\""
  54
  39
  9
  6
  30
  5
  35
  1
  159/182
  39
  #t
  1
  ((4 4 0) (4 4 0) (4 4 0)))
'(clean-cache
  rsa
  2
  25
  122
  app
  "\"'(eval\n  (app modulo-power base (-> (app / exp 2) <-) n)\n  (env ((□? (base exp n)))))\""
  427
  380
  27
  20
  303
  13
  316
  1
  304831/349440
  244
  #f
  299/190
  ((21 21 0) (21 21 0) (41/2 41/2 0)))
'(clean-cache
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app / (-> exp <-) 2) (env ((□? (base exp n)))))\""
  425
  378
  27
  20
  303
  13
  316
  1
  305131/349440
  242
  #f
  298/189
  ((41/2 41/2 0) (41/2 41/2 0) (20 20 0)))
'(clean-cache
  rsa
  2
  122
  ref-or-constructor
  "\"'(eval\n  (app modulo-power (-> base <-) (app / exp 2) n)\n  (env ((□? (base exp n)))))\""
  #f)
'(clean-cache
  rsa
  2
  25
  122
  app
  "\"'(eval (match (-> (app odd? exp) <-) (#f) _) (env ((□? (base exp n)))))\""
  453
  406
  27
  20
  323
  13
  336
  1
  309181/357630
  259
  #f
  649/406
  ((43/2 43/2 0) (43/2 43/2 0) (22 22 0)))
'(clean-cache
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app odd? (-> exp <-)) (env ((□? (base exp n)))))\""
  425
  378
  27
  20
  303
  13
  316
  1
  305281/352170
  242
  #f
  298/189
  ((20 20 0) (20 20 0) (20 20 0)))
'(clean-cache
  rsa
  2
  25
  122
  app
  "\"'(eval (match (-> (app = exp 0) <-) (#f) _) (env ((□? (base exp n)))))\""
  467
  420
  27
  20
  333
  13
  346
  1
  311131/360360
  273
  #f
  221/140
  ((22 22 0) (43/2 43/2 0) (43/2 43/2 0)))
'(clean-cache
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app = (-> exp <-) 0) (env ((□? (base exp n)))))\""
  425
  378
  27
  20
  303
  13
  316
  1
  305281/352170
  242
  #f
  298/189
  ((20 20 0) (20 20 0) (20 20 0)))
'(clean-cache
  rsa
  2
  122
  app
  "\"'(eval (λ (x) (-> (app * x x) <-)) (env ((□? (x)))))\""
  #f)
'(clean-cache
  rsa
  2
  122
  ref-or-constructor
  "\"'(eval (app * x (-> x <-)) (env ((□? (x)))))\""
  #f)
'(clean-cache
  rsa
  2
  122
  ref-or-constructor
  "\"'(eval (app * (-> x <-) x) (env ((□? (x)))))\""
  #f)
'(clean-cache
  rsa
  2
  25
  122
  app
  "\"'(eval (λ (p q) (-> (app * (app - p 1) (app - q 1)) <-)) (env ((□? (p q)))))\""
  100
  85
  8
  7
  39
  4
  43
  1
  479/924
  85
  #t
  1
  ((7/2 7/2 0) (3 3 0) (3 3 0)))
'(clean-cache
  rsa
  2
  25
  122
  app
  "\"'(eval (app * (app - p 1) (-> (app - q 1) <-)) (env ((□? (p q)))))\""
  49
  34
  8
  7
  15
  4
  19
  1
  52/105
  34
  #t
  1
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app - (-> q <-) 1) (env ((□? (p q)))))\""
  28
  13
  8
  7
  6
  4
  10
  1
  11/21
  13
  #t
  1
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  rsa
  2
  25
  122
  app
  "\"'(eval (app * (-> (app - p 1) <-) (app - q 1)) (env ((□? (p q)))))\""
  49
  34
  8
  7
  15
  4
  19
  1
  52/105
  34
  #t
  1
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app - (-> p <-) 1) (env ((□? (p q)))))\""
  28
  13
  8
  7
  6
  4
  10
  1
  11/21
  13
  #t
  1
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  rsa
  2
  25
  122
  app
  "\"'(eval\n  (λ (a n) (-> (app modulo (app car (app extended-gcd a n)) n) <-))\n  (env ((□? (a n)))))\""
  271
  243
  16
  12
  161
  7
  168
  1
  878/1185
  142
  #f
  368/243
  ((15 15 0) (15 15 0) (31/2 31/2 0)))
'(clean-cache
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval\n  (app modulo (app car (app extended-gcd a n)) (-> n <-))\n  (env ((□? (a n)))))\""
  48
  34
  8
  6
  19
  4
  23
  1
  3/5
  34
  #t
  1
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  rsa
  2
  25
  122
  app
  "\"'(eval\n  (app modulo (-> (app car (app extended-gcd a n)) <-) n)\n  (env ((□? (a n)))))\""
  262
  234
  16
  12
  158
  7
  165
  1
  863/1140
  136
  #f
  178/117
  ((15 15 0) (29/2 29/2 0) (15 15 0)))
'(clean-cache
  rsa
  2
  25
  122
  app
  "\"'(eval (app car (-> (app extended-gcd a n) <-)) (env ((□? (a n)))))\""
  76
  57
  11
  8
  37
  5
  42
  1
  3/4
  57
  #t
  61/57
  ((3/2 3/2 0) (2 2 0) (2 2 0)))
'(clean-cache
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app extended-gcd a (-> n <-)) (env ((□? (a n)))))\""
  48
  34
  8
  6
  19
  4
  23
  1
  3/5
  34
  #t
  1
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app extended-gcd (-> a <-) n) (env ((□? (a n)))))\""
  12
  5
  4
  3
  3
  3
  6
  1
  5/8
  5
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  2
  25
  122
  match
  "\"'(eval\n  (λ (a b) (-> (match (app = (app modulo a b) 0) ...) <-))\n  (env ((□? (a b)))))\""
  142
  123
  11
  8
  74
  5
  79
  1
  187/252
  92
  #f
  169/123
  ((6 6 0) (6 6 0) (11/2 11/2 0)))
'(clean-cache
  rsa
  2
  25
  122
  app
  "\"'(eval\n  (match (app = (app modulo a b) 0) (#f) (_ (-> (app cons 0 1) <-)))\n  (env ((□? (a b)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  2
  25
  122
  let*
  "\"'(eval\n  (match (app = (app modulo a b) 0) ((#f) (-> (let* (x:y ... y) ...) <-)) _)\n  (env ((□? (a b)))))\""
  4
  3
  0
  1
  0
  0
  0
  1
  0
  3
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  2
  25
  122
  app
  "\"'(eval (let* (... x (y (-> (app cdr x:y) <-)) () ...) ...) (env ((□? (a b)))))\""
  210
  181
  16
  13
  123
  7
  130
  1
  1619/2160
  104
  #f
  272/181
  ((23/2 23/2 0) (23/2 23/2 0) (12 12 0)))
'(clean-cache
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app cdr (-> x:y <-)) (env ((□? (a b)))))\""
  141
  120
  11
  10
  72
  5
  77
  1
  889/1380
  84
  #f
  41/30
  ((11/2 11/2 0) (11/2 11/2 0) (6 6 0)))
'(clean-cache
  rsa
  2
  25
  122
  app
  "\"'(eval (let* (... x:y (x (-> (app car x:y) <-)) y ...) ...) (env ((□? (a b)))))\""
  210
  181
  16
  13
  123
  7
  130
  1
  1619/2160
  104
  #f
  272/181
  ((23/2 23/2 0) (23/2 23/2 0) (12 12 0)))
'(clean-cache
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app car (-> x:y <-)) (env ((□? (a b)))))\""
  141
  120
  11
  10
  72
  5
  77
  1
  889/1380
  84
  #f
  41/30
  ((11/2 11/2 0) (6 6 0) (11/2 11/2 0)))
'(clean-cache
  rsa
  2
  25
  122
  app
  "\"'(eval\n  (let* (... () (x:y (-> (app extended-gcd b (app modulo a b)) <-)) x ...) ...)\n  (env ((□? (a b)))))\""
  135
  114
  11
  10
  69
  5
  74
  1
  437/675
  84
  #f
  25/19
  ((5 5 0) (11/2 11/2 0) (11/2 11/2 0)))
'(clean-cache
  rsa
  2
  25
  122
  app
  "\"'(eval (app extended-gcd b (-> (app modulo a b) <-)) (env ((□? (a b)))))\""
  93
  73
  11
  9
  39
  5
  44
  1
  53/87
  57
  #f
  89/73
  ((4 4 0) (4 4 0) (4 4 0)))
'(clean-cache
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app modulo a (-> b <-)) (env ((□? (a b)))))\""
  91
  71
  11
  9
  39
  5
  44
  1
  268/435
  56
  #f
  86/71
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(clean-cache
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app modulo (-> a <-) b) (env ((□? (a b)))))\""
  77
  58
  11
  8
  39
  5
  44
  1
  731/870
  43
  #f
  73/58
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app extended-gcd (-> b <-) (app modulo a b)) (env ((□? (a b)))))\""
  76
  57
  11
  8
  39
  5
  44
  1
  367/435
  43
  #f
  71/57
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  rsa
  2
  25
  122
  app
  "\"'(eval\n  (let* (x:y ... y)\n    (-> (app cons y (app - x (app * y (app quotient a b)))) <-))\n  (env ((□? (a b)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  2
  25
  122
  app
  "\"'(eval\n  (app cons y (-> (app - x (app * y (app quotient a b))) <-))\n  (env ((□? (a b)))))\""
  250
  221
  16
  13
  139
  7
  146
  1
  989/1440
  121
  #f
  335/221
  ((31/2 31/2 0) (31/2 31/2 0) (31/2 31/2 0)))
'(clean-cache
  rsa
  2
  25
  122
  app
  "\"'(eval (app - x (-> (app * y (app quotient a b)) <-)) (env ((□? (a b)))))\""
  235
  206
  16
  13
  130
  7
  137
  1
  1523/2160
  117
  #f
  3/2
  ((14 14 0) (14 14 0) (14 14 0)))
'(clean-cache
  rsa
  2
  25
  122
  app
  "\"'(eval (app * y (-> (app quotient a b) <-)) (env ((□? (a b)))))\""
  95
  76
  11
  8
  48
  5
  53
  1
  779/990
  53
  #f
  99/76
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app quotient a (-> b <-)) (env ((□? (a b)))))\""
  91
  71
  11
  9
  39
  5
  44
  1
  539/900
  56
  #f
  86/71
  ((4 4 0) (4 4 0) (4 4 0)))
'(clean-cache
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app quotient (-> a <-) b) (env ((□? (a b)))))\""
  77
  58
  11
  8
  39
  5
  44
  1
  367/450
  43
  #f
  73/58
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app * (-> y <-) (app quotient a b)) (env ((□? (a b)))))\""
  214
  185
  16
  13
  124
  7
  131
  1
  401/540
  104
  #f
  56/37
  ((25/2 25/2 0) (25/2 25/2 0) (25/2 25/2 0)))
'(clean-cache
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app - (-> x <-) (app * y (app quotient a b))) (env ((□? (a b)))))\""
  214
  185
  16
  13
  124
  7
  131
  1
  401/540
  104
  #f
  56/37
  ((25/2 25/2 0) (12 12 0) (12 12 0)))
'(clean-cache
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval\n  (app cons (-> y <-) (app - x (app * y (app quotient a b))))\n  (env ((□? (a b)))))\""
  214
  185
  16
  13
  124
  7
  131
  1
  401/540
  104
  #f
  56/37
  ((25/2 25/2 0) (25/2 25/2 0) (25/2 25/2 0)))
'(clean-cache
  rsa
  2
  25
  122
  app
  "\"'(eval (match (-> (app = (app modulo a b) 0) <-) (#f) _) (env ((□? (a b)))))\""
  113
  94
  11
  8
  57
  5
  62
  1
  103/135
  67
  #f
  121/94
  ((5 5 0) (5 5 0) (5 5 0)))
'(clean-cache
  rsa
  2
  25
  122
  app
  "\"'(eval (app = (-> (app modulo a b) <-) 0) (env ((□? (a b)))))\""
  95
  76
  11
  8
  48
  5
  53
  1
  779/990
  53
  #f
  99/76
  ((4 4 0) (9/2 9/2 0) (4 4 0)))
'(clean-cache
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app modulo a (-> b <-)) (env ((□? (a b)))))\""
  91
  71
  11
  9
  39
  5
  44
  1
  539/900
  56
  #f
  86/71
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(clean-cache
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app modulo (-> a <-) b) (env ((□? (a b)))))\""
  77
  58
  11
  8
  39
  5
  44
  1
  367/450
  43
  #f
  73/58
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  rsa
  2
  25
  122
  match
  "\"'(eval (λ (cdr-v) (-> (match cdr-v ...) <-)) (env ((□? (cdr-v)))))\""
  207
  177
  16
  14
  121
  7
  128
  1
  181/240
  100
  #f
  90/59
  ((25/2 25/2 0) (25/2 25/2 0) (25/2 25/2 0)))
'(clean-cache
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (match cdr-v ((cons cdr-c cdr-d) (-> cdr-d <-))) (env ((□? (cdr-v)))))\""
  204
  174
  16
  14
  120
  7
  127
  1
  137/180
  100
  #f
  44/29
  ((21/2 21/2 0) (10 10 0) (10 10 0)))
'(clean-cache
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (match (-> cdr-v <-) (cons cdr-c cdr-d)) (env ((□? (cdr-v)))))\""
  151
  126
  13
  12
  75
  6
  81
  1
  452/705
  84
  #f
  89/63
  ((7 7 0) (7 7 0) (7 7 0)))
'(clean-cache
  rsa
  2
  25
  122
  match
  "\"'(eval (λ (car-v) (-> (match car-v ...) <-)) (env ((□? (car-v)))))\""
  235
  205
  16
  14
  156
  7
  163
  1
  3749/4440
  113
  #f
  314/205
  ((31/2 31/2 0) (31/2 31/2 0) (31/2 31/2 0)))
'(clean-cache
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (match car-v ((cons car-c car-d) (-> car-c <-))) (env ((□? (car-v)))))\""
  217
  187
  16
  14
  141
  7
  148
  1
  3769/4440
  106
  #f
  285/187
  ((23/2 23/2 0) (23/2 23/2 0) (11 11 0)))
'(clean-cache
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (match (-> car-v <-) (cons car-c car-d)) (env ((□? (car-v)))))\""
  155
  129
  14
  12
  88
  6
  94
  1
  2293/2940
  87
  #f
  182/129
  ((13/2 13/2 0) (13/2 13/2 0) (7 7 0)))
'(clean-cache
  rsa
  2
  122
  match
  "\"'(eval\n  (letrec*\n   (car ... decrypted-ciphertext)\n   (-> (match (app not (app = plaintext decrypted-ciphertext)) ...) <-))\n  (env ()))\""
  #f)
'(clean-cache
  rsa
  2
  25
  122
  app
  "\"'(eval\n  (match\n   (app not (app = plaintext decrypted-ciphertext))\n   (#f)\n   (_ (-> (app error \"RSA fail!\") <-)))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  2
  25
  122
  app
  "\"'(eval\n  (match\n   (app not (app = plaintext decrypted-ciphertext))\n   ((#f) (-> (app display \"RSA success!\") <-))\n   _)\n  (env ()))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  3
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  rsa
  2
  122
  app
  "\"'(eval\n  (match (-> (app not (app = plaintext decrypted-ciphertext)) <-) (#f) _)\n  (env ()))\""
  #f)
'(clean-cache
  rsa
  2
  122
  app
  "\"'(eval (app not (-> (app = plaintext decrypted-ciphertext) <-)) (env ()))\""
  #f)
'(clean-cache
  rsa
  2
  122
  ref-or-constructor
  "\"'(eval (app = plaintext (-> decrypted-ciphertext <-)) (env ()))\""
  #f)
'(shuffled-cache
  0
  rsa
  2
  25
  122
  app
  "\"'(eval (app * (-> (app - p 1) <-) (app - q 1)) (env ((□? (p q)))))\""
  49
  34
  8
  7
  15
  4
  19
  1
  52/105
  34
  #t
  1
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  app
  "\"'(eval (let* (... x:y (x (-> (app car x:y) <-)) y ...) ...) (env ((□? (a b)))))\""
  227
  193
  18
  16
  132
  8
  140
  1
  6274/7875
  116
  #f
  284/193
  ((21/2 21/2 0) (21/2 21/2 0) (21/2 21/2 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app modulo-power m (-> e <-) n) (env ((□? (m e n)))))\""
  232
  195
  20
  17
  133
  10
  143
  1
  6379/8085
  118
  #t
  22/15
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app - (-> exp <-) 1) (env ((□? (base exp n)))))\""
  436
  385
  27
  24
  303
  13
  316
  1
  823553/960960
  246
  #f
  86/55
  ((17/2 17/2 0) (17/2 17/2 0) (9 9 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app decrypt (-> ciphertext <-) d n) (env ()))\""
  517
  461
  29
  27
  379
  14
  393
  1
  1213943/1351350
  317
  #t
  683/461
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app modulo-power (-> c <-) d n) (env ((□? (c d n)))))\""
  518
  462
  29
  27
  379
  14
  393
  1
  2427886/2717715
  318
  #t
  114/77
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval\n  (app modulo (app car (app extended-gcd a n)) (-> n <-))\n  (env ((□? (a n)))))\""
  519
  463
  29
  27
  379
  14
  393
  1
  4840757/5435430
  319
  #t
  685/463
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app extended-gcd a (-> n <-)) (env ((□? (a n)))))\""
  519
  463
  29
  27
  379
  14
  393
  1
  4840757/5435430
  319
  #t
  685/463
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  app
  "\"'(eval\n  (λ (a n) (-> (app modulo (app car (app extended-gcd a n)) n) <-))\n  (env ((□? (a n)))))\""
  520
  464
  29
  27
  379
  14
  393
  1
  2412871/2717715
  319
  #f
  687/464
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app modulo a (-> b <-)) (env ((□? (a b)))))\""
  521
  465
  29
  27
  379
  14
  393
  1
  4822739/5435430
  319
  #f
  689/465
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app quotient a (-> b <-)) (env ((□? (a b)))))\""
  522
  466
  29
  27
  379
  14
  393
  1
  9630463/10870860
  319
  #f
  691/466
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval\n  (app modulo (app square (app modulo-power base (app / exp 2) n)) (-> n <-))\n  (env ((□? (base exp n)))))\""
  550
  494
  29
  27
  400
  14
  414
  1
  9726713/11051040
  347
  #t
  719/494
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app totient (-> p <-) q) (env ((□? (e p q)))))\""
  550
  494
  29
  27
  400
  14
  414
  1
  9726713/11051040
  347
  #t
  719/494
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  app
  "\"'(eval\n  (app\n   and\n   (app < 1 e)\n   (app < e (app totient p q))\n   (-> (app = 1 (app gcd e (app totient p q))) <-))\n  (env ((□? (e p q)))))\""
  554
  498
  29
  27
  400
  14
  414
  1
  9606593/11051040
  351
  #t
  241/166
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  app
  "\"'(eval\n  (match\n   (app odd? exp)\n   ((#f)\n    (->\n     (app modulo (app square (app modulo-power base (app / exp 2) n)) n)\n     <-))\n   _)\n  (env ((□? (base exp n)))))\""
  653
  597
  29
  27
  490
  14
  504
  1
  9562703/11051040
  435
  #t
  279/199
  ((5 5 0) (5 5 0) (5 5 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  app
  "\"'(eval\n  (app * base (-> (app modulo-power base (app - exp 1) n) <-))\n  (env ((□? (base exp n)))))\""
  706
  650
  29
  27
  539
  14
  553
  1
  9602743/11111100
  471
  #f
  907/650
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  match
  "\"'(eval\n  (λ (a b) (-> (match (app = (app modulo a b) 0) ...) <-))\n  (env ((□? (a b)))))\""
  709
  653
  29
  27
  539
  14
  553
  1
  2393929/2777775
  473
  #f
  914/653
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (match (-> car-v <-) (cons car-c car-d)) (env ((□? (car-v)))))\""
  711
  654
  29
  28
  539
  14
  553
  1
  9566707/11111100
  473
  #f
  919/654
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  app
  "\"'(eval\n  (app modulo (-> (app * base (app modulo-power base (app - exp 1) n)) <-) n)\n  (env ((□? (base exp n)))))\""
  765
  708
  29
  28
  582
  14
  596
  1
  9599047/11171160
  524
  #f
  244/177
  ((5 5 0) (5 5 0) (5 5 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app totient p (-> q <-)) (env ((□? (e p q)))))\""
  765
  708
  29
  28
  582
  14
  596
  1
  9599047/11171160
  524
  #t
  244/177
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app - (-> p <-) 1) (env ((□? (p q)))))\""
  765
  708
  29
  28
  582
  14
  596
  1
  9599047/11171160
  524
  #t
  244/177
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app is-legal-public-exponent? (-> e <-) p q) (env ((□? (e p q)))))\""
  765
  708
  29
  28
  582
  14
  596
  1
  9599047/11171160
  524
  #t
  244/177
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app odd? (-> exp <-)) (env ((□? (base exp n)))))\""
  766
  709
  29
  28
  582
  14
  596
  1
  9593041/11171160
  524
  #f
  980/709
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  app
  "\"'(eval (app = (-> (app modulo a b) <-) 0) (env ((□? (a b)))))\""
  770
  713
  29
  28
  582
  14
  596
  1
  1911401/2234232
  527
  #f
  985/713
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app is-legal-public-exponent? e (-> p <-) q) (env ((□? (e p q)))))\""
  770
  713
  29
  28
  582
  14
  596
  1
  1911401/2234232
  527
  #t
  985/713
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  app
  "\"'(eval (match (-> (app = (app modulo a b) 0) <-) (#f) _) (env ((□? (a b)))))\""
  774
  717
  29
  28
  582
  14
  596
  1
  1905395/2234232
  530
  #f
  330/239
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  app
  "\"'(eval (app < e (-> (app totient p q) <-)) (env ((□? (e p q)))))\""
  776
  719
  29
  28
  582
  14
  596
  1
  1893383/2234232
  532
  #t
  992/719
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app < 1 (-> e <-)) (env ((□? (e p q)))))\""
  777
  720
  29
  28
  582
  14
  596
  1
  1887377/2234232
  533
  #t
  331/240
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  app
  "\"'(eval\n  (app modulo-power base (-> (app / exp 2) <-) n)\n  (env ((□? (base exp n)))))\""
  777
  720
  29
  28
  582
  14
  596
  1
  1887377/2234232
  533
  #f
  331/240
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app * (-> y <-) (app quotient a b)) (env ((□? (a b)))))\""
  780
  723
  29
  28
  582
  14
  596
  1
  4698923/5585580
  533
  #f
  333/241
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval\n  (app modulo-power (-> base <-) (app - exp 1) n)\n  (env ((□? (base exp n)))))\""
  781
  724
  29
  28
  582
  14
  596
  1
  782833/930930
  534
  #t
  250/181
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval\n  (app modulo (app * base (app modulo-power base (app - exp 1) n)) (-> n <-))\n  (env ((□? (base exp n)))))\""
  782
  725
  29
  28
  582
  14
  596
  1
  1171747/1396395
  535
  #t
  1001/725
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app extended-gcd (-> b <-) (app modulo a b)) (env ((□? (a b)))))\""
  782
  725
  29
  28
  582
  14
  596
  1
  1171747/1396395
  535
  #f
  1001/725
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app decrypt ciphertext (-> d <-) n) (env ()))\""
  782
  725
  29
  28
  582
  14
  596
  1
  1171747/1396395
  535
  #f
  1001/725
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app cdr (-> x:y <-)) (env ((□? (a b)))))\""
  783
  726
  29
  28
  582
  14
  596
  1
  936797/1117116
  535
  #f
  335/242
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  app
  "\"'(eval\n  (app\n   and\n   (-> (app < 1 e) <-)\n   (app < e (app totient p q))\n   (app = 1 (app gcd e (app totient p q))))\n  (env ((□? (e p q)))))\""
  787
  730
  29
  28
  582
  14
  596
  1
  308929/372372
  539
  #t
  1009/730
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  match
  "\"'(eval\n  (letrec*\n   (car ... decrypted-ciphertext)\n   (-> (match (app not (app = plaintext decrypted-ciphertext)) ...) <-))\n  (env ()))\""
  821
  763
  29
  29
  615
  14
  629
  1
  3454837/4084080
  558
  #f
  1056/763
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  app
  "\"'(eval\n  (match\n   (app odd? exp)\n   (#f)\n   (_\n    (->\n     (app modulo (app * base (app modulo-power base (app - exp 1) n)) n)\n     <-)))\n  (env ((□? (base exp n)))))\""
  849
  791
  29
  29
  636
  14
  650
  1
  2585449/3063060
  584
  #f
  1086/791
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  app
  "\"'(eval\n  (match\n   (app not (app = plaintext decrypted-ciphertext))\n   (#f)\n   (_ (-> (app error \"RSA fail!\") <-)))\n  (env ()))\""
  849
  791
  29
  29
  636
  14
  650
  1
  2585449/3063060
  584
  #t
  1086/791
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  app
  "\"'(eval (λ (x) (-> (app * x x) <-)) (env ((□? (x)))))\""
  854
  795
  29
  30
  636
  14
  650
  1
  2573437/3063060
  588
  #t
  218/159
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app encrypt plaintext e (-> n <-)) (env ()))\""
  854
  795
  29
  30
  636
  14
  650
  1
  2573437/3063060
  588
  #t
  218/159
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app car (-> x:y <-)) (env ((□? (a b)))))\""
  854
  795
  29
  30
  636
  14
  650
  1
  2573437/3063060
  588
  #f
  218/159
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  app
  "\"'(eval (app = 1 (-> (app gcd e (app totient p q)) <-)) (env ((□? (e p q)))))\""
  858
  799
  29
  30
  636
  14
  650
  1
  637103/765765
  592
  #t
  1094/799
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app < (-> e <-) (app totient p q)) (env ((□? (e p q)))))\""
  859
  800
  29
  30
  636
  14
  650
  1
  5081809/6126120
  593
  #t
  219/160
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app modulo (-> a <-) b) (env ((□? (a b)))))\""
  860
  801
  29
  30
  636
  14
  650
  1
  2539403/3063060
  593
  #f
  1097/801
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  app
  "\"'(eval (match (-> (app odd? exp) <-) (#f) _) (env ((□? (base exp n)))))\""
  865
  806
  29
  30
  636
  14
  650
  1
  1688957/2042040
  595
  #f
  1107/806
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  app
  "\"'(eval (match (-> (app = exp 0) <-) (#f) _) (env ((□? (base exp n)))))\""
  872
  813
  29
  30
  636
  14
  650
  1
  280507/340340
  599
  #f
  373/271
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  match
  "\"'(eval\n  (λ (base exp n) (-> (match (app = exp 0) ...) <-))\n  (env ((□? (base exp n)))))\""
  879
  820
  29
  30
  636
  14
  650
  1
  1006237/1225224
  601
  #f
  1129/820
  ((5/2 5/2 0) (2 2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app quotient (-> a <-) b) (env ((□? (a b)))))\""
  880
  821
  29
  30
  636
  14
  650
  1
  2009471/2450448
  601
  #f
  1131/821
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app / (-> exp <-) 2) (env ((□? (base exp n)))))\""
  881
  822
  29
  30
  636
  14
  650
  1
  223189/272272
  601
  #f
  1135/822
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app modulo-power m e (-> n <-)) (env ((□? (m e n)))))\""
  882
  823
  29
  30
  636
  14
  650
  1
  667565/816816
  602
  #t
  1136/823
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  app
  "\"'(eval (λ (c d n) (-> (app modulo-power c d n) <-)) (env ((□? (c d n)))))\""
  883
  824
  29
  30
  636
  14
  650
  1
  665563/816816
  602
  #f
  569/412
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app totient p (-> q <-)) (env ((□? (e p q)))))\""
  883
  824
  29
  30
  636
  14
  650
  1
  665563/816816
  602
  #t
  569/412
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval\n  (app modulo-power base (app / exp 2) (-> n <-))\n  (env ((□? (base exp n)))))\""
  883
  824
  29
  30
  636
  14
  650
  1
  665563/816816
  602
  #t
  569/412
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval\n  (app modulo-power base (app - exp 1) (-> n <-))\n  (env ((□? (base exp n)))))\""
  884
  825
  29
  30
  636
  14
  650
  1
  117407/144144
  603
  #t
  1139/825
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (match cdr-v ((cons cdr-c cdr-d) (-> cdr-d <-))) (env ((□? (cdr-v)))))\""
  887
  827
  29
  31
  636
  14
  650
  1
  220879/272272
  603
  #f
  1145/827
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval\n  (app modulo-power (-> base <-) (app / exp 2) n)\n  (env ((□? (base exp n)))))\""
  887
  827
  29
  31
  636
  14
  650
  1
  220879/272272
  603
  #t
  1145/827
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  app
  "\"'(eval\n  (let* (... () (x:y (-> (app extended-gcd b (app modulo a b)) <-)) x ...) ...)\n  (env ((□? (a b)))))\""
  887
  827
  29
  31
  636
  14
  650
  1
  220879/272272
  603
  #f
  1145/827
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval\n  (app * (-> base <-) (app modulo-power base (app - exp 1) n))\n  (env ((□? (base exp n)))))\""
  888
  828
  29
  31
  636
  14
  650
  1
  152857/188496
  604
  #t
  191/138
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app totient (-> p <-) q) (env ((□? (e p q)))))\""
  888
  828
  29
  31
  636
  14
  650
  1
  152857/188496
  604
  #t
  191/138
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  app
  "\"'(eval (app * (app - p 1) (-> (app - q 1) <-)) (env ((□? (p q)))))\""
  898
  838
  29
  31
  636
  14
  650
  1
  18905/23562
  614
  #t
  578/419
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (match car-v ((cons car-c car-d) (-> car-c <-))) (env ((□? (car-v)))))\""
  899
  839
  29
  31
  636
  14
  650
  1
  755507/942480
  614
  #f
  1158/839
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  app
  "\"'(eval\n  (letrec* (... e (d (-> (app private-exponent e p q) <-)) plaintext ...) ...)\n  (env ()))\""
  899
  839
  29
  31
  636
  14
  650
  1
  755507/942480
  614
  #f
  1158/839
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app modulo-power c (-> d <-) n) (env ((□? (c d n)))))\""
  899
  839
  29
  31
  636
  14
  650
  1
  755507/942480
  614
  #f
  1158/839
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  app
  "\"'(eval\n  (app modulo-power base (-> (app - exp 1) <-) n)\n  (env ((□? (base exp n)))))\""
  906
  846
  29
  31
  636
  14
  650
  1
  3263107/4084080
  618
  #f
  586/423
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (match (-> cdr-v <-) (cons cdr-c cdr-d)) (env ((□? (cdr-v)))))\""
  906
  846
  29
  31
  636
  14
  650
  1
  3263107/4084080
  618
  #f
  586/423
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  app
  "\"'(eval\n  (app cons y (-> (app - x (app * y (app quotient a b))) <-))\n  (env ((□? (a b)))))\""
  913
  853
  29
  31
  636
  14
  650
  1
  539013/680680
  620
  #f
  1184/853
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app > m (-> n <-)) (env ((□? (m e n)))))\""
  914
  854
  29
  31
  636
  14
  650
  1
  806017/1021020
  621
  #t
  1185/854
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  app
  "\"'(eval (match (-> (app > m n) <-) (#f) _) (env ((□? (m e n)))))\""
  915
  855
  29
  31
  636
  14
  650
  1
  1607029/2042040
  622
  #t
  1186/855
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  app
  "\"'(eval (app - x (-> (app * y (app quotient a b)) <-)) (env ((□? (a b)))))\""
  922
  862
  29
  31
  636
  14
  650
  1
  638207/816816
  625
  #f
  1197/862
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  app
  "\"'(eval (app modulo-inverse e (-> (app totient p q) <-)) (env ((□? (e p q)))))\""
  923
  863
  29
  31
  636
  14
  650
  1
  636205/816816
  626
  #t
  1198/863
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app * x (-> x <-)) (env ((□? (x)))))\""
  923
  863
  29
  31
  636
  14
  650
  1
  636205/816816
  626
  #t
  1198/863
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  match
  "\"'(eval (λ (cdr-v) (-> (match cdr-v ...) <-)) (env ((□? (cdr-v)))))\""
  924
  864
  29
  31
  636
  14
  650
  1
  1904611/2450448
  626
  #f
  25/18
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  app
  "\"'(eval (letrec* (... q (n (-> (app * p q) <-)) e ...) ...) (env ()))\""
  924
  864
  29
  31
  636
  14
  650
  1
  1904611/2450448
  626
  #t
  25/18
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app modulo-power (-> m <-) e n) (env ((□? (m e n)))))\""
  925
  865
  29
  31
  636
  14
  650
  1
  1898605/2450448
  627
  #t
  1201/865
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app modulo-inverse (-> e <-) (app totient p q)) (env ((□? (e p q)))))\""
  926
  866
  29
  31
  636
  14
  650
  1
  1892599/2450448
  628
  #t
  601/433
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  match
  "\"'(eval (λ (car-v) (-> (match car-v ...) <-)) (env ((□? (car-v)))))\""
  927
  867
  29
  31
  636
  14
  650
  1
  4726993/6126120
  628
  #f
  1204/867
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app totient (-> p <-) q) (env ((□? (e p q)))))\""
  927
  867
  29
  31
  636
  14
  650
  1
  4726993/6126120
  628
  #t
  1204/867
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval\n  (app cons (-> y <-) (app - x (app * y (app quotient a b))))\n  (env ((□? (a b)))))\""
  928
  868
  29
  31
  636
  14
  650
  1
  9438971/12252240
  628
  #f
  603/434
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  app
  "\"'(eval (app extended-gcd b (-> (app modulo a b) <-)) (env ((□? (a b)))))\""
  928
  868
  29
  31
  636
  14
  650
  1
  9438971/12252240
  628
  #f
  603/434
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  letrec*
  "\"'(eval\n  (lettypes cons ... cons (letrec* (car ... decrypted-ciphertext) ...))\n  (env ()))\""
  929
  869
  29
  31
  637
  14
  651
  1
  9499031/12312300
  628
  #f
  1208/869
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app gcd (-> e <-) (app totient p q)) (env ((□? (e p q)))))\""
  930
  870
  29
  31
  637
  14
  651
  1
  3163007/4104100
  629
  #t
  403/290
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app totient p (-> q <-)) (env ((□? (e p q)))))\""
  930
  870
  29
  31
  637
  14
  651
  1
  3163007/4104100
  629
  #t
  403/290
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  let*
  "\"'(eval\n  (match (app = (app modulo a b) 0) ((#f) (-> (let* (x:y ... y) ...) <-)) _)\n  (env ((□? (a b)))))\""
  933
  873
  29
  31
  637
  14
  651
  1
  3152997/4104100
  632
  #t
  135/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  match
  "\"'(eval\n  (match (app = exp 0) ((#f) (-> (match (app odd? exp) ...) <-)) _)\n  (env ((□? (base exp n)))))\""
  938
  878
  29
  31
  637
  14
  651
  1
  9428723/12312300
  633
  #f
  611/439
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app * (-> x <-) x) (env ((□? (x)))))\""
  938
  878
  29
  31
  637
  14
  651
  1
  9428723/12312300
  633
  #t
  611/439
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app = (-> exp <-) 0) (env ((□? (base exp n)))))\""
  939
  879
  29
  31
  637
  14
  651
  1
  9424873/12312300
  633
  #f
  1226/879
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  app
  "\"'(eval\n  (app square (-> (app modulo-power base (app / exp 2) n) <-))\n  (env ((□? (base exp n)))))\""
  942
  882
  29
  31
  637
  14
  651
  1
  9411013/12312300
  636
  #t
  1229/882
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  app
  "\"'(eval\n  (match (-> (app not (app = plaintext decrypted-ciphertext)) <-) (#f) _)\n  (env ()))\""
  942
  882
  29
  31
  637
  14
  651
  1
  9411013/12312300
  636
  #f
  1229/882
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app modulo a (-> b <-)) (env ((□? (a b)))))\""
  943
  883
  29
  31
  637
  14
  651
  1
  9405007/12312300
  636
  #f
  1231/883
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app > (-> m <-) n) (env ((□? (m e n)))))\""
  944
  884
  29
  31
  637
  14
  651
  1
  9374977/12312300
  637
  #t
  308/221
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  app
  "\"'(eval (app car (-> (app extended-gcd a n) <-)) (env ((□? (a n)))))\""
  945
  885
  29
  31
  637
  14
  651
  1
  9344947/12312300
  638
  #t
  411/295
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  app
  "\"'(eval\n  (app modulo (-> (app car (app extended-gcd a n)) <-) n)\n  (env ((□? (a n)))))\""
  946
  886
  29
  31
  637
  14
  651
  1
  9314917/12312300
  638
  #f
  1235/886
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  app
  "\"'(eval\n  (match (app = (app modulo a b) 0) (#f) (_ (-> (app cons 0 1) <-)))\n  (env ((□? (a b)))))\""
  950
  890
  29
  31
  638
  14
  652
  1
  226363/300300
  642
  #t
  1243/890
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  app
  "\"'(eval\n  (app modulo (-> (app square (app modulo-power base (app / exp 2) n)) <-) n)\n  (env ((□? (base exp n)))))\""
  953
  893
  29
  31
  638
  14
  652
  1
  9267023/12312300
  645
  #t
  1246/893
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app = plaintext (-> decrypted-ciphertext <-)) (env ()))\""
  953
  893
  29
  31
  638
  14
  652
  1
  9267023/12312300
  645
  #f
  1246/893
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  app
  "\"'(eval (let* (... x (y (-> (app cdr x:y) <-)) () ...) ...) (env ((□? (a b)))))\""
  956
  896
  29
  31
  638
  14
  652
  1
  9236993/12312300
  647
  #f
  625/448
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app is-legal-public-exponent? e p (-> q <-)) (env ((□? (e p q)))))\""
  956
  896
  29
  31
  638
  14
  652
  1
  9236993/12312300
  647
  #t
  625/448
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app - (-> x <-) (app * y (app quotient a b))) (env ((□? (a b)))))\""
  959
  899
  29
  31
  638
  14
  652
  1
  2303993/3078075
  647
  #f
  1256/899
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app modulo (-> a <-) b) (env ((□? (a b)))))\""
  960
  900
  29
  31
  638
  14
  652
  1
  4604983/6156150
  647
  #f
  629/450
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  match
  "\"'(eval\n  (λ (e p q) (-> (match (app is-legal-public-exponent? e p q) ...) <-))\n  (env ((□? (e p q)))))\""
  961
  901
  29
  31
  638
  14
  652
  1
  2294984/3078075
  647
  #f
  1260/901
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  app
  "\"'(eval\n  (let* (x:y ... y)\n    (-> (app cons y (app - x (app * y (app quotient a b)))) <-))\n  (env ((□? (a b)))))\""
  964
  904
  29
  31
  638
  14
  652
  1
  4574953/6156150
  650
  #t
  1267/904
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  app
  "\"'(eval\n  (match (app > m n) ((#f) (-> (app modulo-power m e n) <-)) _)\n  (env ((□? (m e n)))))\""
  965
  905
  29
  31
  638
  14
  652
  1
  55609/75075
  651
  #t
  1268/905
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  app
  "\"'(eval\n  (match\n   (app is-legal-public-exponent? e p q)\n   (#f)\n   (_ (-> (app modulo-inverse e (app totient p q)) <-)))\n  (env ((□? (e p q)))))\""
  966
  906
  29
  31
  638
  14
  652
  1
  4544923/6156150
  651
  #f
  635/453
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  match
  "\"'(eval (λ (m e n) (-> (match (app > m n) ...) <-)) (env ((□? (m e n)))))\""
  967
  907
  29
  31
  638
  14
  652
  1
  2264954/3078075
  652
  #t
  1271/907
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app modulo-power c d (-> n <-)) (env ((□? (c d n)))))\""
  967
  907
  29
  31
  638
  14
  652
  1
  2264954/3078075
  652
  #t
  1271/907
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app - (-> q <-) 1) (env ((□? (p q)))))\""
  968
  908
  29
  31
  638
  14
  652
  1
  4527763/6156150
  653
  #t
  318/227
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app extended-gcd (-> a <-) n) (env ((□? (a n)))))\""
  968
  908
  29
  31
  638
  14
  652
  1
  4527763/6156150
  653
  #t
  318/227
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  app
  "\"'(eval\n  (match\n   (app is-legal-public-exponent? e p q)\n   ((#f) (-> (app error \"Not a legal public exponent for that modulus.\") <-))\n   _)\n  (env ((□? (e p q)))))\""
  970
  910
  29
  31
  639
  14
  653
  1
  4557793/6216210
  655
  #t
  7/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  app
  "\"'(eval (app gcd e (-> (app totient p q) <-)) (env ((□? (e p q)))))\""
  972
  912
  29
  31
  639
  14
  653
  1
  504197/690690
  657
  #t
  319/228
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  app
  "\"'(eval\n  (match\n   (app not (app = plaintext decrypted-ciphertext))\n   ((#f) (-> (app display \"RSA success!\") <-))\n   _)\n  (env ()))\""
  972
  912
  29
  31
  639
  14
  653
  1
  504197/690690
  657
  #t
  319/228
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  app
  "\"'(eval (app * y (-> (app quotient a b) <-)) (env ((□? (a b)))))\""
  979
  919
  29
  31
  639
  14
  653
  1
  1502581/2072070
  661
  #f
  1286/919
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  app
  "\"'(eval (app not (-> (app = plaintext decrypted-ciphertext) <-)) (env ()))\""
  979
  919
  29
  31
  639
  14
  653
  1
  1502581/2072070
  661
  #f
  1286/919
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  app
  "\"'(eval\n  (λ (e p q)\n    (->\n     (app\n      and\n      (app < 1 e)\n      (app < e (app totient p q))\n      (app = 1 (app gcd e (app totient p q))))\n     <-))\n  (env ((□? (e p q)))))\""
  984
  924
  29
  31
  639
  14
  653
  1
  2226344/3108105
  666
  #t
  1291/924
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  app
  "\"'(eval\n  (letrec*\n   (...\n    ciphertext\n    (decrypted-ciphertext (-> (app decrypt ciphertext d n) <-))\n    ()\n    ...)\n   ...)\n  (env ()))\""
  984
  924
  29
  31
  639
  14
  653
  1
  2226344/3108105
  666
  #f
  1291/924
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  app
  "\"'(eval (λ (p q) (-> (app * (app - p 1) (app - q 1)) <-)) (env ((□? (p q)))))\""
  994
  934
  29
  31
  639
  14
  653
  1
  8821721/12432420
  676
  #t
  1301/934
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app decrypt ciphertext d (-> n <-)) (env ()))\""
  994
  934
  29
  31
  639
  14
  653
  1
  8821721/12432420
  676
  #t
  1301/934
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  app
  "\"'(eval\n  (app\n   and\n   (app < 1 e)\n   (-> (app < e (app totient p q)) <-)\n   (app = 1 (app gcd e (app totient p q))))\n  (env ((□? (e p q)))))\""
  998
  938
  29
  31
  639
  14
  653
  1
  8761661/12432420
  680
  #t
  1305/938
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  app
  "\"'(eval\n  (match\n   (app > m n)\n   (#f)\n   (_ (-> (app error \"The modulus is too small to encrypt the message.\") <-)))\n  (env ((□? (m e n)))))\""
  1000
  940
  29
  31
  640
  14
  654
  1
  8821721/12552540
  682
  #t
  1307/940
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  app
  "\"'(eval\n  (match (-> (app is-legal-public-exponent? e p q) <-) (#f) _)\n  (env ((□? (e p q)))))\""
  1001
  941
  29
  31
  640
  14
  654
  1
  8791691/12552540
  683
  #t
  1308/941
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  lettypes
  "\"'(eval ((top) lettypes (cons) ...) (env ()))\""
  1002
  942
  29
  31
  641
  14
  655
  1
  8851751/12612600
  683
  #f
  655/471
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  rsa
  2
  25
  122
  app
  "\"'(eval\n  (letrec*\n   (...\n    plaintext\n    (ciphertext (-> (app encrypt plaintext e n) <-))\n    decrypted-ciphertext\n    ...)\n   ...)\n  (env ()))\""
  1002
  942
  29
  31
  641
  14
  655
  1
  8851751/12612600
  683
  #t
  655/471
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  app
  "\"'(eval (app modulo-inverse e (-> (app totient p q) <-)) (env ((□? (e p q)))))\""
  42
  32
  6
  4
  18
  3
  21
  1
  23/38
  32
  #t
  1
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app car (-> x:y <-)) (env ((□? (a b)))))\""
  137
  117
  11
  9
  72
  5
  77
  1
  457/690
  81
  #f
  161/117
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app modulo-power m (-> e <-) n) (env ((□? (m e n)))))\""
  142
  119
  13
  10
  73
  7
  80
  1
  59/90
  83
  #t
  163/119
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app totient p (-> q <-)) (env ((□? (e p q)))))\""
  142
  119
  13
  10
  73
  7
  80
  1
  59/90
  83
  #t
  163/119
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  122
  app
  "\"'(eval\n  (match (-> (app not (app = plaintext decrypted-ciphertext)) <-) (#f) _)\n  (env ()))\""
  #f)
'(shuffled-cache
  1
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app odd? (-> exp <-)) (env ((□? (base exp n)))))\""
  425
  378
  27
  20
  303
  13
  316
  1
  305281/352170
  242
  #f
  298/189
  ((20 20 0) (20 20 0) (20 20 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app / (-> exp <-) 2) (env ((□? (base exp n)))))\""
  426
  379
  27
  20
  303
  13
  316
  1
  305131/352170
  242
  #f
  600/379
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app * x (-> x <-)) (env ((□? (x)))))\""
  495
  444
  29
  22
  364
  14
  378
  1
  67889/77532
  287
  #t
  685/444
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  app
  "\"'(eval\n  (match (app > m n) ((#f) (-> (app modulo-power m e n) <-)) _)\n  (env ((□? (m e n)))))\""
  547
  495
  29
  23
  411
  14
  425
  1
  413311/466830
  338
  #t
  736/495
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app modulo (-> a <-) b) (env ((□? (a b)))))\""
  548
  496
  29
  23
  411
  14
  425
  1
  206519/233415
  338
  #f
  369/248
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  app
  "\"'(eval (match (-> (app = (app modulo a b) 0) <-) (#f) _) (env ((□? (a b)))))\""
  549
  497
  29
  23
  411
  14
  425
  1
  82553/93366
  338
  #f
  740/497
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  app
  "\"'(eval (app extended-gcd b (-> (app modulo a b) <-)) (env ((□? (a b)))))\""
  549
  497
  29
  23
  411
  14
  425
  1
  82553/93366
  338
  #f
  740/497
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  app
  "\"'(eval\n  (let* (x:y ... y)\n    (-> (app cons y (app - x (app * y (app quotient a b)))) <-))\n  (env ((□? (a b)))))\""
  552
  500
  29
  23
  411
  14
  425
  1
  821981/933660
  341
  #t
  747/500
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app modulo a (-> b <-)) (env ((□? (a b)))))\""
  553
  501
  29
  23
  411
  14
  425
  1
  164287/186732
  341
  #f
  749/501
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval\n  (app modulo-power base (app / exp 2) (-> n <-))\n  (env ((□? (base exp n)))))\""
  581
  529
  29
  23
  432
  14
  446
  1
  23857/27144
  369
  #t
  777/529
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  letrec*
  "\"'(eval\n  (lettypes cons ... cons (letrec* (car ... decrypted-ciphertext) ...))\n  (env ()))\""
  676
  622
  29
  25
  523
  14
  537
  1
  110801/123760
  435
  #f
  897/622
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  app
  "\"'(eval\n  (match\n   (app is-legal-public-exponent? e p q)\n   (#f)\n   (_ (-> (app modulo-inverse e (app totient p q)) <-)))\n  (env ((□? (e p q)))))\""
  677
  623
  29
  25
  523
  14
  537
  1
  331493/371280
  435
  #f
  899/623
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval\n  (app modulo-power (-> base <-) (app / exp 2) n)\n  (env ((□? (base exp n)))))\""
  702
  648
  29
  25
  542
  14
  556
  1
  333283/373100
  460
  #t
  77/54
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  app
  "\"'(eval\n  (match\n   (app odd? exp)\n   ((#f)\n    (->\n     (app modulo (app square (app modulo-power base (app / exp 2) n)) n)\n     <-))\n   _)\n  (env ((□? (base exp n)))))\""
  748
  694
  29
  25
  578
  14
  592
  1
  248858/279825
  506
  #t
  485/347
  ((3 3 0) (7/2 7/2 0) (3 3 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  match
  "\"'(eval (λ (car-v) (-> (match car-v ...) <-)) (env ((□? (car-v)))))\""
  758
  701
  29
  28
  578
  14
  592
  1
  988607/1119300
  507
  #f
  988/701
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app - (-> p <-) 1) (env ((□? (p q)))))\""
  761
  702
  29
  30
  578
  14
  592
  1
  493621/559650
  508
  #t
  989/702
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app > m (-> n <-)) (env ((□? (m e n)))))\""
  762
  703
  29
  30
  578
  14
  592
  1
  246128/279825
  509
  #t
  990/703
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  app
  "\"'(eval (let* (... x:y (x (-> (app car x:y) <-)) y ...) ...) (env ((□? (a b)))))\""
  765
  706
  29
  30
  578
  14
  592
  1
  980963/1119300
  511
  #f
  497/353
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  app
  "\"'(eval (app < e (-> (app totient p q) <-)) (env ((□? (e p q)))))\""
  767
  708
  29
  30
  578
  14
  592
  1
  975503/1119300
  513
  #t
  83/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app extended-gcd (-> a <-) n) (env ((□? (a n)))))\""
  767
  708
  29
  30
  578
  14
  592
  1
  975503/1119300
  513
  #t
  83/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  app
  "\"'(eval\n  (match\n   (app is-legal-public-exponent? e p q)\n   ((#f) (-> (app error \"Not a legal public exponent for that modulus.\") <-))\n   _)\n  (env ((□? (e p q)))))\""
  769
  710
  29
  30
  579
  14
  593
  1
  980963/1130220
  515
  #t
  499/355
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app modulo (-> a <-) b) (env ((□? (a b)))))\""
  770
  711
  29
  30
  579
  14
  593
  1
  980417/1130220
  515
  #f
  1000/711
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  app
  "\"'(eval\n  (app modulo (-> (app * base (app modulo-power base (app - exp 1) n)) <-) n)\n  (env ((□? (base exp n)))))\""
  818
  759
  29
  30
  617
  14
  631
  1
  5364269/6216210
  556
  #f
  1055/759
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  app
  "\"'(eval (app * (app - p 1) (-> (app - q 1) <-)) (env ((□? (p q)))))\""
  822
  763
  29
  30
  617
  14
  631
  1
  5334239/6216210
  560
  #t
  1059/763
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  app
  "\"'(eval (let* (... x (y (-> (app cdr x:y) <-)) () ...) ...) (env ((□? (a b)))))\""
  825
  766
  29
  30
  617
  14
  631
  1
  10629439/12432420
  562
  #f
  1063/766
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  app
  "\"'(eval (match (-> (app = exp 0) <-) (#f) _) (env ((□? (base exp n)))))\""
  835
  776
  29
  30
  617
  14
  631
  1
  10582399/12432420
  569
  #f
  539/388
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app totient p (-> q <-)) (env ((□? (e p q)))))\""
  835
  776
  29
  30
  617
  14
  631
  1
  10582399/12432420
  569
  #t
  539/388
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app totient (-> p <-) q) (env ((□? (e p q)))))\""
  836
  777
  29
  30
  617
  14
  631
  1
  10552369/12432420
  570
  #t
  1079/777
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  app
  "\"'(eval\n  (app square (-> (app modulo-power base (app / exp 2) n) <-))\n  (env ((□? (base exp n)))))\""
  840
  781
  29
  30
  617
  14
  631
  1
  10535209/12432420
  574
  #t
  1083/781
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  app
  "\"'(eval\n  (match (app = (app modulo a b) 0) (#f) (_ (-> (app cons 0 1) <-)))\n  (env ((□? (a b)))))\""
  844
  785
  29
  30
  618
  14
  632
  1
  2100235/2486484
  578
  #t
  1091/785
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app decrypt ciphertext (-> d <-) n) (env ()))\""
  844
  785
  29
  30
  618
  14
  632
  1
  2100235/2486484
  578
  #f
  1091/785
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app < (-> e <-) (app totient p q)) (env ((□? (e p q)))))\""
  845
  786
  29
  30
  618
  14
  632
  1
  2094229/2486484
  579
  #t
  182/131
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app is-legal-public-exponent? e p (-> q <-)) (env ((□? (e p q)))))\""
  845
  786
  29
  30
  618
  14
  632
  1
  2094229/2486484
  579
  #t
  182/131
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app decrypt ciphertext d (-> n <-)) (env ()))\""
  845
  786
  29
  30
  618
  14
  632
  1
  2094229/2486484
  579
  #t
  182/131
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  match
  "\"'(eval\n  (λ (e p q) (-> (match (app is-legal-public-exponent? e p q) ...) <-))\n  (env ((□? (e p q)))))\""
  846
  787
  29
  30
  618
  14
  632
  1
  2088223/2486484
  579
  #f
  1094/787
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  app
  "\"'(eval\n  (app\n   and\n   (app < 1 e)\n   (app < e (app totient p q))\n   (-> (app = 1 (app gcd e (app totient p q))) <-))\n  (env ((□? (e p q)))))\""
  850
  791
  29
  30
  618
  14
  632
  1
  2064199/2486484
  583
  #t
  1098/791
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval\n  (app modulo (app * base (app modulo-power base (app - exp 1) n)) (-> n <-))\n  (env ((□? (base exp n)))))\""
  851
  792
  29
  30
  618
  14
  632
  1
  515299/621621
  584
  #t
  1099/792
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app gcd (-> e <-) (app totient p q)) (env ((□? (e p q)))))\""
  852
  793
  29
  30
  618
  14
  632
  1
  1027595/1243242
  585
  #t
  1100/793
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval\n  (app modulo-power base (app - exp 1) (-> n <-))\n  (env ((□? (base exp n)))))\""
  853
  794
  29
  30
  618
  14
  632
  1
  1027265/1243242
  586
  #t
  1101/794
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app * (-> y <-) (app quotient a b)) (env ((□? (a b)))))\""
  856
  797
  29
  30
  618
  14
  632
  1
  512131/621621
  586
  #f
  1107/797
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app encrypt plaintext e (-> n <-)) (env ()))\""
  856
  797
  29
  30
  618
  14
  632
  1
  512131/621621
  586
  #t
  1107/797
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  app
  "\"'(eval\n  (app modulo-power base (-> (app / exp 2) <-) n)\n  (env ((□? (base exp n)))))\""
  856
  797
  29
  30
  618
  14
  632
  1
  512131/621621
  586
  #f
  1107/797
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  app
  "\"'(eval\n  (λ (e p q)\n    (->\n     (app\n      and\n      (app < 1 e)\n      (app < e (app totient p q))\n      (app = 1 (app gcd e (app totient p q))))\n     <-))\n  (env ((□? (e p q)))))\""
  861
  802
  29
  30
  618
  14
  632
  1
  112361/138138
  591
  #t
  556/401
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app modulo-power m e (-> n <-)) (env ((□? (m e n)))))\""
  861
  802
  29
  30
  618
  14
  632
  1
  112361/138138
  591
  #t
  556/401
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  app
  "\"'(eval\n  (letrec*\n   (...\n    ciphertext\n    (decrypted-ciphertext (-> (app decrypt ciphertext d n) <-))\n    ()\n    ...)\n   ...)\n  (env ()))\""
  861
  802
  29
  30
  618
  14
  632
  1
  112361/138138
  591
  #f
  556/401
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app = (-> exp <-) 0) (env ((□? (base exp n)))))\""
  862
  803
  29
  30
  618
  14
  632
  1
  161/198
  591
  #f
  1116/803
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app = plaintext (-> decrypted-ciphertext <-)) (env ()))\""
  862
  803
  29
  30
  618
  14
  632
  1
  161/198
  591
  #f
  1116/803
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval\n  (app modulo (app square (app modulo-power base (app / exp 2) n)) (-> n <-))\n  (env ((□? (base exp n)))))\""
  863
  804
  29
  30
  618
  14
  632
  1
  336863/414414
  592
  #t
  1117/804
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  app
  "\"'(eval\n  (let* (... () (x:y (-> (app extended-gcd b (app modulo a b)) <-)) x ...) ...)\n  (env ((□? (a b)))))\""
  863
  804
  29
  30
  618
  14
  632
  1
  336863/414414
  592
  #f
  1117/804
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  app
  "\"'(eval (app gcd e (-> (app totient p q) <-)) (env ((□? (e p q)))))\""
  865
  806
  29
  30
  618
  14
  632
  1
  334861/414414
  594
  #t
  1119/806
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app cdr (-> x:y <-)) (env ((□? (a b)))))\""
  865
  806
  29
  30
  618
  14
  632
  1
  334861/414414
  594
  #f
  1119/806
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  match
  "\"'(eval\n  (letrec*\n   (car ... decrypted-ciphertext)\n   (-> (match (app not (app = plaintext decrypted-ciphertext)) ...) <-))\n  (env ()))\""
  865
  806
  29
  30
  618
  14
  632
  1
  334861/414414
  594
  #f
  1119/806
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  app
  "\"'(eval\n  (match\n   (app not (app = plaintext decrypted-ciphertext))\n   (#f)\n   (_ (-> (app error \"RSA fail!\") <-)))\n  (env ()))\""
  865
  806
  29
  30
  618
  14
  632
  1
  334861/414414
  594
  #t
  1119/806
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (match (-> cdr-v <-) (cons cdr-c cdr-d)) (env ((□? (cdr-v)))))\""
  868
  807
  29
  32
  618
  14
  632
  1
  1002581/1243242
  594
  #f
  1123/807
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app - (-> exp <-) 1) (env ((□? (base exp n)))))\""
  869
  808
  29
  32
  618
  14
  632
  1
  1002035/1243242
  594
  #f
  1127/808
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app quotient (-> a <-) b) (env ((□? (a b)))))\""
  870
  809
  29
  32
  618
  14
  632
  1
  2001067/2486484
  594
  #f
  1129/809
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app quotient a (-> b <-)) (env ((□? (a b)))))\""
  871
  810
  29
  32
  618
  14
  632
  1
  499516/621621
  594
  #f
  377/270
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app * (-> x <-) x) (env ((□? (x)))))\""
  872
  811
  29
  32
  618
  14
  632
  1
  2494577/3108105
  595
  #t
  1132/811
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app totient (-> p <-) q) (env ((□? (e p q)))))\""
  872
  811
  29
  32
  618
  14
  632
  1
  2494577/3108105
  595
  #t
  1132/811
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app modulo-power c d (-> n <-)) (env ((□? (c d n)))))\""
  872
  811
  29
  32
  618
  14
  632
  1
  2494577/3108105
  595
  #t
  1132/811
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  app
  "\"'(eval (λ (x) (-> (app * x x) <-)) (env ((□? (x)))))\""
  873
  812
  29
  32
  618
  14
  632
  1
  2491574/3108105
  596
  #t
  1133/812
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app is-legal-public-exponent? (-> e <-) p q) (env ((□? (e p q)))))\""
  873
  812
  29
  32
  618
  14
  632
  1
  2491574/3108105
  596
  #t
  1133/812
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  app
  "\"'(eval (app * (-> (app - p 1) <-) (app - q 1)) (env ((□? (p q)))))\""
  877
  816
  29
  32
  618
  14
  632
  1
  4956121/6216210
  600
  #t
  379/272
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app - (-> q <-) 1) (env ((□? (p q)))))\""
  878
  817
  29
  32
  618
  14
  632
  1
  9903233/12432420
  601
  #t
  1138/817
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval\n  (app cons (-> y <-) (app - x (app * y (app quotient a b))))\n  (env ((□? (a b)))))\""
  879
  818
  29
  32
  618
  14
  632
  1
  4944109/6216210
  601
  #f
  570/409
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  app
  "\"'(eval\n  (app modulo (-> (app square (app modulo-power base (app / exp 2) n)) <-) n)\n  (env ((□? (base exp n)))))\""
  883
  822
  29
  32
  618
  14
  632
  1
  4935529/6216210
  605
  #t
  572/411
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  app
  "\"'(eval\n  (app modulo (-> (app car (app extended-gcd a n)) <-) n)\n  (env ((□? (a n)))))\""
  884
  823
  29
  32
  618
  14
  632
  1
  2460257/3108105
  605
  #f
  1146/823
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  match
  "\"'(eval (λ (m e n) (-> (match (app > m n) ...) <-)) (env ((□? (m e n)))))\""
  885
  824
  29
  32
  618
  14
  632
  1
  4905499/6216210
  606
  #t
  1147/824
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  app
  "\"'(eval (app = 1 (-> (app gcd e (app totient p q)) <-)) (env ((□? (e p q)))))\""
  889
  828
  29
  32
  618
  14
  632
  1
  4875469/6216210
  610
  #t
  1151/828
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  app
  "\"'(eval\n  (app\n   and\n   (-> (app < 1 e) <-)\n   (app < e (app totient p q))\n   (app = 1 (app gcd e (app totient p q))))\n  (env ((□? (e p q)))))\""
  893
  832
  29
  32
  618
  14
  632
  1
  1608473/2072070
  614
  #t
  1155/832
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  lettypes
  "\"'(eval ((top) lettypes (cons) ...) (env ()))\""
  894
  833
  29
  32
  619
  14
  633
  1
  1618483/2082080
  614
  #f
  1157/833
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  let*
  "\"'(eval\n  (match (app = (app modulo a b) 0) ((#f) (-> (let* (x:y ... y) ...) <-)) _)\n  (env ((□? (a b)))))\""
  897
  836
  29
  32
  619
  14
  633
  1
  3229959/4164160
  617
  #t
  1163/836
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app < 1 (-> e <-)) (env ((□? (e p q)))))\""
  898
  837
  29
  32
  619
  14
  633
  1
  9679867/12492480
  618
  #t
  388/279
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  app
  "\"'(eval\n  (app\n   and\n   (app < 1 e)\n   (-> (app < e (app totient p q)) <-)\n   (app = 1 (app gcd e (app totient p q))))\n  (env ((□? (e p q)))))\""
  902
  841
  29
  32
  619
  14
  633
  1
  9619807/12492480
  622
  #t
  1168/841
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  app
  "\"'(eval (letrec* (... q (n (-> (app * p q) <-)) e ...) ...) (env ()))\""
  902
  841
  29
  32
  619
  14
  633
  1
  9619807/12492480
  622
  #t
  1168/841
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  app
  "\"'(eval\n  (λ (a n) (-> (app modulo (app car (app extended-gcd a n)) n) <-))\n  (env ((□? (a n)))))\""
  903
  842
  29
  32
  619
  14
  633
  1
  9589777/12492480
  622
  #f
  585/421
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  app
  "\"'(eval (λ (c d n) (-> (app modulo-power c d n) <-)) (env ((□? (c d n)))))\""
  904
  843
  29
  32
  619
  14
  633
  1
  9559747/12492480
  622
  #f
  1172/843
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app modulo-power c (-> d <-) n) (env ((□? (c d n)))))\""
  904
  843
  29
  32
  619
  14
  633
  1
  9559747/12492480
  622
  #f
  1172/843
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app modulo a (-> b <-)) (env ((□? (a b)))))\""
  905
  844
  29
  32
  619
  14
  633
  1
  9553741/12492480
  622
  #f
  587/422
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  app
  "\"'(eval (app - x (-> (app * y (app quotient a b)) <-)) (env ((□? (a b)))))\""
  912
  851
  29
  32
  619
  14
  633
  1
  9475663/12492480
  625
  #f
  1185/851
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  match
  "\"'(eval\n  (λ (base exp n) (-> (match (app = exp 0) ...) <-))\n  (env ((□? (base exp n)))))\""
  921
  860
  29
  32
  619
  14
  633
  1
  725587/960960
  629
  #f
  1197/860
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  app
  "\"'(eval (app car (-> (app extended-gcd a n) <-)) (env ((□? (a n)))))\""
  921
  860
  29
  32
  619
  14
  633
  1
  725587/960960
  629
  #t
  1197/860
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app extended-gcd a (-> n <-)) (env ((□? (a n)))))\""
  921
  860
  29
  32
  619
  14
  633
  1
  725587/960960
  629
  #t
  1197/860
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  app
  "\"'(eval\n  (match\n   (app > m n)\n   (#f)\n   (_ (-> (app error \"The modulus is too small to encrypt the message.\") <-)))\n  (env ((□? (m e n)))))\""
  923
  862
  29
  32
  620
  14
  634
  1
  730207/970200
  631
  #t
  1199/862
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  app
  "\"'(eval\n  (match\n   (app odd? exp)\n   (#f)\n   (_\n    (->\n     (app modulo (app * base (app modulo-power base (app - exp 1) n)) n)\n     <-)))\n  (env ((□? (base exp n)))))\""
  954
  893
  29
  32
  641
  14
  655
  1
  4729763/6306300
  660
  #f
  1232/893
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval\n  (app * (-> base <-) (app modulo-power base (app - exp 1) n))\n  (env ((□? (base exp n)))))\""
  955
  894
  29
  32
  641
  14
  655
  1
  363701/485100
  661
  #t
  411/298
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval\n  (app modulo-power (-> base <-) (app - exp 1) n)\n  (env ((□? (base exp n)))))\""
  956
  895
  29
  32
  641
  14
  655
  1
  675209/900900
  662
  #t
  1234/895
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app > (-> m <-) n) (env ((□? (m e n)))))\""
  957
  896
  29
  32
  641
  14
  655
  1
  24038/32175
  663
  #t
  1235/896
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  match
  "\"'(eval (λ (cdr-v) (-> (match cdr-v ...) <-)) (env ((□? (cdr-v)))))\""
  960
  899
  29
  32
  641
  14
  655
  1
  223163/300300
  663
  #f
  1243/899
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (match cdr-v ((cons cdr-c cdr-d) (-> cdr-d <-))) (env ((□? (cdr-v)))))\""
  961
  900
  29
  32
  641
  14
  655
  1
  334387/450450
  663
  #f
  83/60
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  app
  "\"'(eval\n  (app cons y (-> (app - x (app * y (app quotient a b))) <-))\n  (env ((□? (a b)))))\""
  968
  907
  29
  32
  641
  14
  655
  1
  663197/900900
  665
  #f
  1257/907
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app modulo-inverse (-> e <-) (app totient p q)) (env ((□? (e p q)))))\""
  969
  908
  29
  32
  641
  14
  655
  1
  23609/32175
  666
  #t
  629/454
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app modulo-power (-> c <-) d n) (env ((□? (c d n)))))\""
  969
  908
  29
  32
  641
  14
  655
  1
  23609/32175
  666
  #t
  629/454
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  match
  "\"'(eval\n  (match (app = exp 0) ((#f) (-> (match (app odd? exp) ...) <-)) _)\n  (env ((□? (base exp n)))))\""
  976
  915
  29
  32
  641
  14
  655
  1
  1151693/1576575
  669
  #f
  1267/915
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (match car-v ((cons car-c car-d) (-> car-c <-))) (env ((□? (car-v)))))\""
  976
  915
  29
  32
  641
  14
  655
  1
  1151693/1576575
  669
  #f
  1267/915
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  app
  "\"'(eval\n  (match\n   (app not (app = plaintext decrypted-ciphertext))\n   ((#f) (-> (app display \"RSA success!\") <-))\n   _)\n  (env ()))\""
  976
  915
  29
  32
  641
  14
  655
  1
  1151693/1576575
  669
  #t
  1267/915
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  app
  "\"'(eval\n  (letrec* (... e (d (-> (app private-exponent e p q) <-)) plaintext ...) ...)\n  (env ()))\""
  976
  915
  29
  32
  641
  14
  655
  1
  1151693/1576575
  669
  #f
  1267/915
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  app
  "\"'(eval (match (-> (app > m n) <-) (#f) _) (env ((□? (m e n)))))\""
  977
  916
  29
  32
  641
  14
  655
  1
  4591757/6306300
  670
  #t
  317/229
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app totient (-> p <-) q) (env ((□? (e p q)))))\""
  978
  917
  29
  32
  641
  14
  655
  1
  1146688/1576575
  671
  #t
  1269/917
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app totient p (-> q <-)) (env ((□? (e p q)))))\""
  979
  918
  29
  32
  641
  14
  655
  1
  509083/700700
  672
  #t
  635/459
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval\n  (app modulo (app car (app extended-gcd a n)) (-> n <-))\n  (env ((□? (a n)))))\""
  980
  919
  29
  32
  641
  14
  655
  1
  380561/525525
  673
  #t
  1271/919
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (match (-> car-v <-) (cons car-c car-d)) (env ((□? (car-v)))))\""
  980
  919
  29
  32
  641
  14
  655
  1
  380561/525525
  673
  #f
  1271/919
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  app
  "\"'(eval (app * y (-> (app quotient a b) <-)) (env ((□? (a b)))))\""
  987
  926
  29
  32
  641
  14
  655
  1
  252039/350350
  677
  #f
  1281/926
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  app
  "\"'(eval (match (-> (app odd? exp) <-) (#f) _) (env ((□? (base exp n)))))\""
  994
  933
  29
  32
  641
  14
  655
  1
  376856/525525
  681
  #f
  431/311
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  app
  "\"'(eval\n  (match (-> (app is-legal-public-exponent? e p q) <-) (#f) _)\n  (env ((□? (e p q)))))\""
  995
  934
  29
  32
  641
  14
  655
  1
  1502419/2102100
  682
  #t
  647/467
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app - (-> x <-) (app * y (app quotient a b))) (env ((□? (a b)))))\""
  998
  937
  29
  32
  641
  14
  655
  1
  999277/1401400
  682
  #f
  1300/937
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  match
  "\"'(eval\n  (λ (a b) (-> (match (app = (app modulo a b) 0) ...) <-))\n  (env ((□? (a b)))))\""
  999
  938
  29
  32
  641
  14
  655
  1
  2995829/4204200
  682
  #f
  1305/938
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  app
  "\"'(eval (λ (p q) (-> (app * (app - p 1) (app - q 1)) <-)) (env ((□? (p q)))))\""
  1003
  942
  29
  32
  641
  14
  655
  1
  993271/1401400
  686
  #t
  1309/942
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  app
  "\"'(eval\n  (letrec*\n   (...\n    plaintext\n    (ciphertext (-> (app encrypt plaintext e n) <-))\n    decrypted-ciphertext\n    ...)\n   ...)\n  (env ()))\""
  1003
  942
  29
  32
  641
  14
  655
  1
  993271/1401400
  686
  #t
  1309/942
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app modulo-power (-> m <-) e n) (env ((□? (m e n)))))\""
  1003
  942
  29
  32
  641
  14
  655
  1
  993271/1401400
  686
  #t
  1309/942
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  app
  "\"'(eval (app = (-> (app modulo a b) <-) 0) (env ((□? (a b)))))\""
  1004
  943
  29
  32
  641
  14
  655
  1
  2977811/4204200
  686
  #f
  57/41
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  app
  "\"'(eval\n  (app * base (-> (app modulo-power base (app - exp 1) n) <-))\n  (env ((□? (base exp n)))))\""
  1008
  947
  29
  32
  641
  14
  655
  1
  990697/1401400
  689
  #f
  1316/947
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  app
  "\"'(eval\n  (app modulo-power base (-> (app - exp 1) <-) n)\n  (env ((□? (base exp n)))))\""
  1018
  957
  29
  32
  641
  14
  655
  1
  227527/323400
  696
  #f
  1333/957
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app extended-gcd (-> b <-) (app modulo a b)) (env ((□? (a b)))))\""
  1018
  957
  29
  32
  641
  14
  655
  1
  227527/323400
  696
  #f
  1333/957
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app decrypt (-> ciphertext <-) d n) (env ()))\""
  1018
  957
  29
  32
  641
  14
  655
  1
  227527/323400
  696
  #t
  1333/957
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  app
  "\"'(eval (app not (-> (app = plaintext decrypted-ciphertext) <-)) (env ()))\""
  1018
  957
  29
  32
  641
  14
  655
  1
  227527/323400
  696
  #f
  1333/957
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  rsa
  2
  25
  122
  ref-or-constructor
  "\"'(eval (app is-legal-public-exponent? e (-> p <-) q) (env ((□? (e p q)))))\""
  1018
  957
  29
  32
  641
  14
  655
  1
  227527/323400
  696
  #t
  1333/957
  ((0 0 0) (0 0 0) (0 0 0)))
