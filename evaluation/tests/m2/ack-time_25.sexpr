'(clean-cache
  ack
  2
  25
  20
  letrec*
  "\"'(eval ((top) letrec* (ack) ...) (env ()))\""
  417
  409
  5
  3
  394
  2
  396
  1
  1637/1680
  112
  #f
  1778/409
  ((23/2 23/2 0) (12 12 0) (12 12 0)))
'(clean-cache
  ack
  2
  25
  20
  match
  "\"'(eval (λ (m n) (-> (match (app = m 0) ...) <-)) (env ((□? (m n)))))\""
  438
  431
  5
  2
  424
  2
  426
  1
  14034/14245
  123
  #f
  1879/431
  ((12 12 0) (12 12 0) (12 12 0)))
'(clean-cache
  ack
  2
  25
  20
  app
  "\"'(eval (match (app = m 0) (#f) (_ (-> (app + n 1) <-))) (env ((□? (m n)))))\""
  387
  380
  5
  2
  376
  2
  378
  1
  4621/4662
  104
  #f
  165/38
  ((10 10 0) (10 10 0) (10 10 0)))
'(clean-cache
  ack
  2
  25
  20
  ref-or-constructor
  "\"'(eval (app + (-> n <-) 1) (env ((□? (m n)))))\""
  369
  362
  5
  2
  361
  2
  363
  1
  332/333
  98
  #f
  786/181
  ((9 9 0) (9 9 0) (9 9 0)))
'(clean-cache
  ack
  2
  25
  20
  match
  "\"'(eval\n  (match (app = m 0) ((#f) (-> (match (app = n 0) ...) <-)) _)\n  (env ((□? (m n)))))\""
  430
  423
  5
  2
  416
  2
  418
  1
  26525/26936
  124
  #f
  616/141
  ((12 12 0) (12 12 0) (23/2 23/2 0)))
'(clean-cache
  ack
  2
  25
  20
  app
  "\"'(eval\n  (match (app = n 0) (#f) (_ (-> (app ack (app - m 1) 1) <-)))\n  (env ((□? (m n)))))\""
  495
  485
  5
  5
  407
  2
  409
  1
  703/816
  136
  #f
  2114/485
  ((24 24 0) (47/2 47/2 0) (23 23 0)))
'(clean-cache
  ack
  2
  25
  20
  app
  "\"'(eval (app ack (-> (app - m 1) <-) 1) (env ((□? (m n)))))\""
  128
  122
  5
  1
  118
  2
  120
  1
  34/35
  27
  #f
  515/122
  ((4 4 0) (4 4 0) (4 4 0)))
'(clean-cache
  ack
  2
  25
  20
  ref-or-constructor
  "\"'(eval (app - (-> m <-) 1) (env ((□? (m n)))))\""
  125
  119
  5
  1
  118
  2
  120
  1
  139/140
  26
  #f
  502/119
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(clean-cache
  ack
  2
  25
  20
  app
  "\"'(eval\n  (match\n   (app = n 0)\n   ((#f) (-> (app ack (app - m 1) (app ack m (app - n 1))) <-))\n   _)\n  (env ((□? (m n)))))\""
  425
  417
  5
  3
  383
  2
  385
  1
  105419/113960
  115
  #f
  1817/417
  ((29/2 29/2 0) (14 14 0) (29/2 29/2 0)))
'(clean-cache
  ack
  2
  25
  20
  app
  "\"'(eval\n  (app ack (app - m 1) (-> (app ack m (app - n 1)) <-))\n  (env ((□? (m n)))))\""
  427
  418
  5
  4
  369
  2
  371
  1
  43/48
  110
  #f
  909/209
  ((17 17 0) (17 17 0) (17 17 0)))
'(clean-cache
  ack
  2
  25
  20
  app
  "\"'(eval (app ack m (-> (app - n 1) <-)) (env ((□? (m n)))))\""
  372
  365
  5
  2
  361
  2
  363
  1
  257/259
  99
  #f
  317/73
  ((19/2 19/2 0) (19/2 19/2 0) (19/2 19/2 0)))
'(clean-cache
  ack
  2
  25
  20
  ref-or-constructor
  "\"'(eval (app - (-> n <-) 1) (env ((□? (m n)))))\""
  369
  362
  5
  2
  361
  2
  363
  1
  517/518
  98
  #f
  786/181
  ((9 9 0) (9 9 0) (9 9 0)))
'(clean-cache
  ack
  2
  25
  20
  ref-or-constructor
  "\"'(eval (app ack (-> m <-) (app - n 1)) (env ((□? (m n)))))\""
  125
  119
  5
  1
  118
  2
  120
  1
  139/140
  26
  #f
  502/119
  ((4 4 0) (7/2 7/2 0) (7/2 7/2 0)))
'(clean-cache
  ack
  2
  25
  20
  app
  "\"'(eval\n  (app ack (-> (app - m 1) <-) (app ack m (app - n 1)))\n  (env ((□? (m n)))))\""
  128
  122
  5
  1
  118
  2
  120
  1
  34/35
  27
  #f
  515/122
  ((4 4 0) (4 4 0) (9/2 9/2 0)))
'(clean-cache
  ack
  2
  25
  20
  ref-or-constructor
  "\"'(eval (app - (-> m <-) 1) (env ((□? (m n)))))\""
  125
  119
  5
  1
  118
  2
  120
  1
  139/140
  26
  #f
  502/119
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(clean-cache
  ack
  2
  25
  20
  app
  "\"'(eval (match (-> (app = n 0) <-) (#f) _) (env ((□? (m n)))))\""
  384
  377
  5
  2
  373
  2
  375
  1
  1284/1295
  103
  #f
  1639/377
  ((10 10 0) (10 10 0) (10 10 0)))
'(clean-cache
  ack
  2
  25
  20
  ref-or-constructor
  "\"'(eval (app = (-> n <-) 0) (env ((□? (m n)))))\""
  369
  362
  5
  2
  361
  2
  363
  1
  369/370
  98
  #f
  786/181
  ((19/2 19/2 0) (9 9 0) (9 9 0)))
'(clean-cache
  ack
  2
  25
  20
  app
  "\"'(eval (match (-> (app = m 0) <-) (#f) _) (env ((□? (m n)))))\""
  167
  161
  5
  1
  157
  2
  159
  1
  179/196
  40
  #f
  98/23
  ((5 5 0) (5 5 0) (5 5 0)))
'(clean-cache
  ack
  2
  25
  20
  ref-or-constructor
  "\"'(eval (app = (-> m <-) 0) (env ((□? (m n)))))\""
  125
  119
  5
  1
  118
  2
  120
  1
  10/11
  26
  #f
  502/119
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(clean-cache
  ack
  2
  25
  20
  app
  "\"'(eval (letrec* (ack) (-> (app ack 3 12) <-)) (env ()))\""
  416
  408
  5
  3
  393
  2
  395
  1
  1595/1638
  112
  #f
  887/204
  ((12 12 0) (12 12 0) (12 12 0)))
'(shuffled-cache
  0
  ack
  2
  25
  20
  app
  "\"'(eval (app ack m (-> (app - n 1) <-)) (env ((□? (m n)))))\""
  372
  365
  5
  2
  361
  2
  363
  1
  257/259
  99
  #f
  317/73
  ((19/2 19/2 0) (19/2 19/2 0) (19/2 19/2 0)))
'(shuffled-cache
  0
  ack
  2
  25
  20
  app
  "\"'(eval\n  (app ack (-> (app - m 1) <-) (app ack m (app - n 1)))\n  (env ((□? (m n)))))\""
  373
  366
  5
  2
  361
  2
  363
  1
  513/518
  99
  #f
  1589/366
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  2
  25
  20
  app
  "\"'(eval\n  (match\n   (app = n 0)\n   ((#f) (-> (app ack (app - m 1) (app ack m (app - n 1))) <-))\n   _)\n  (env ((□? (m n)))))\""
  392
  385
  5
  2
  379
  2
  381
  1
  1279/1295
  108
  #f
  1676/385
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  ack
  2
  25
  20
  ref-or-constructor
  "\"'(eval (app = (-> m <-) 0) (env ((□? (m n)))))\""
  393
  386
  5
  2
  379
  2
  381
  1
  14034/14245
  108
  #f
  840/193
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  ack
  2
  25
  20
  app
  "\"'(eval\n  (app ack (app - m 1) (-> (app ack m (app - n 1)) <-))\n  (env ((□? (m n)))))\""
  394
  387
  5
  2
  379
  2
  381
  1
  28013/28490
  108
  #f
  1684/387
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  2
  25
  20
  ref-or-constructor
  "\"'(eval (app + (-> n <-) 1) (env ((□? (m n)))))\""
  395
  388
  5
  2
  379
  2
  381
  1
  251347/256410
  108
  #f
  422/97
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  ack
  2
  25
  20
  match
  "\"'(eval (λ (m n) (-> (match (app = m 0) ...) <-)) (env ((□? (m n)))))\""
  430
  423
  5
  2
  413
  2
  415
  1
  25906/26455
  120
  #f
  614/141
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  ack
  2
  25
  20
  letrec*
  "\"'(eval ((top) letrec* (ack) ...) (env ()))\""
  434
  427
  5
  2
  417
  2
  419
  1
  30607/31200
  121
  #f
  1859/427
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  2
  25
  20
  app
  "\"'(eval\n  (match (app = n 0) (#f) (_ (-> (app ack (app - m 1) 1) <-)))\n  (env ((□? (m n)))))\""
  443
  436
  5
  2
  425
  2
  427
  1
  142421/145600
  127
  #f
  1901/436
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  2
  25
  20
  app
  "\"'(eval (match (-> (app = m 0) <-) (#f) _) (env ((□? (m n)))))\""
  444
  437
  5
  2
  425
  2
  427
  1
  142161/145600
  127
  #f
  1907/437
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  2
  25
  20
  ref-or-constructor
  "\"'(eval (app - (-> n <-) 1) (env ((□? (m n)))))\""
  444
  437
  5
  2
  425
  2
  427
  1
  142161/145600
  127
  #f
  1907/437
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  2
  25
  20
  match
  "\"'(eval\n  (match (app = m 0) ((#f) (-> (match (app = n 0) ...) <-)) _)\n  (env ((□? (m n)))))\""
  445
  438
  5
  2
  425
  2
  427
  1
  141901/145600
  127
  #f
  637/146
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  2
  25
  20
  ref-or-constructor
  "\"'(eval (app - (-> m <-) 1) (env ((□? (m n)))))\""
  446
  439
  5
  2
  425
  2
  427
  1
  141641/145600
  127
  #f
  1915/439
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  ack
  2
  25
  20
  ref-or-constructor
  "\"'(eval (app - (-> m <-) 1) (env ((□? (m n)))))\""
  447
  440
  5
  2
  425
  2
  427
  1
  141381/145600
  127
  #f
  1919/440
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  ack
  2
  25
  20
  ref-or-constructor
  "\"'(eval (app ack (-> m <-) (app - n 1)) (env ((□? (m n)))))\""
  448
  441
  5
  2
  425
  2
  427
  1
  141121/145600
  127
  #f
  641/147
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  ack
  2
  25
  20
  app
  "\"'(eval (match (app = m 0) (#f) (_ (-> (app + n 1) <-))) (env ((□? (m n)))))\""
  461
  454
  5
  2
  437
  2
  439
  1
  20123/20800
  131
  #f
  1979/454
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  ack
  2
  25
  20
  app
  "\"'(eval (letrec* (ack) (-> (app ack 3 12) <-)) (env ()))\""
  461
  454
  5
  2
  437
  2
  439
  1
  20123/20800
  131
  #f
  1979/454
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  2
  25
  20
  app
  "\"'(eval (app ack (-> (app - m 1) <-) 1) (env ((□? (m n)))))\""
  462
  455
  5
  2
  437
  2
  439
  1
  140601/145600
  131
  #f
  1983/455
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  2
  25
  20
  app
  "\"'(eval (match (-> (app = n 0) <-) (#f) _) (env ((□? (m n)))))\""
  463
  456
  5
  2
  437
  2
  439
  1
  140341/145600
  131
  #f
  663/152
  ((0 0 0) (0 0 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  ack
  2
  25
  20
  ref-or-constructor
  "\"'(eval (app = (-> n <-) 0) (env ((□? (m n)))))\""
  464
  457
  5
  2
  437
  2
  439
  1
  140081/145600
  131
  #f
  1993/457
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  ack
  2
  25
  20
  app
  "\"'(eval (match (app = m 0) (#f) (_ (-> (app + n 1) <-))) (env ((□? (m n)))))\""
  387
  380
  5
  2
  376
  2
  378
  1
  4621/4662
  104
  #f
  165/38
  ((10 10 0) (19/2 19/2 0) (19/2 19/2 0)))
'(shuffled-cache
  1
  ack
  2
  25
  20
  match
  "\"'(eval\n  (match (app = m 0) ((#f) (-> (match (app = n 0) ...) <-)) _)\n  (env ((□? (m n)))))\""
  420
  413
  5
  2
  408
  2
  410
  1
  50705/51282
  118
  #f
  1798/413
  ((1/2 1/2 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  ack
  2
  25
  20
  app
  "\"'(eval\n  (match\n   (app = n 0)\n   ((#f) (-> (app ack (app - m 1) (app ack m (app - n 1))) <-))\n   _)\n  (env ((□? (m n)))))\""
  422
  415
  5
  2
  409
  2
  411
  1
  657779/666666
  119
  #f
  1807/415
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  2
  25
  20
  ref-or-constructor
  "\"'(eval (app - (-> m <-) 1) (env ((□? (m n)))))\""
  423
  416
  5
  2
  409
  2
  411
  1
  328246/333333
  119
  #f
  1811/416
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  ack
  2
  25
  20
  app
  "\"'(eval (match (-> (app = m 0) <-) (#f) _) (env ((□? (m n)))))\""
  433
  426
  5
  2
  418
  2
  420
  1
  327427/333333
  122
  #f
  928/213
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  ack
  2
  25
  20
  app
  "\"'(eval\n  (match (app = n 0) (#f) (_ (-> (app ack (app - m 1) 1) <-)))\n  (env ((□? (m n)))))\""
  447
  440
  5
  2
  431
  2
  433
  1
  131981/134680
  129
  #f
  1921/440
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  ack
  2
  25
  20
  match
  "\"'(eval (λ (m n) (-> (match (app = m 0) ...) <-)) (env ((□? (m n)))))\""
  450
  443
  5
  2
  433
  2
  435
  1
  131741/134680
  130
  #f
  1934/443
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  ack
  2
  25
  20
  app
  "\"'(eval (letrec* (ack) (-> (app ack 3 12) <-)) (env ()))\""
  453
  446
  5
  2
  436
  2
  438
  1
  6621/6760
  131
  #f
  1947/446
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  2
  25
  20
  ref-or-constructor
  "\"'(eval (app + (-> n <-) 1) (env ((□? (m n)))))\""
  453
  446
  5
  2
  436
  2
  438
  1
  6621/6760
  131
  #f
  1947/446
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  2
  25
  20
  app
  "\"'(eval (match (-> (app = n 0) <-) (#f) _) (env ((□? (m n)))))\""
  454
  447
  5
  2
  436
  2
  438
  1
  138781/141960
  131
  #f
  651/149
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  ack
  2
  25
  20
  letrec*
  "\"'(eval ((top) letrec* (ack) ...) (env ()))\""
  455
  448
  5
  2
  437
  2
  439
  1
  142421/145600
  131
  #f
  1957/448
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  2
  25
  20
  app
  "\"'(eval (app ack m (-> (app - n 1) <-)) (env ((□? (m n)))))\""
  456
  449
  5
  2
  437
  2
  439
  1
  142161/145600
  131
  #f
  1961/449
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  2
  25
  20
  ref-or-constructor
  "\"'(eval (app ack (-> m <-) (app - n 1)) (env ((□? (m n)))))\""
  457
  450
  5
  2
  437
  2
  439
  1
  141901/145600
  131
  #f
  131/30
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  ack
  2
  25
  20
  ref-or-constructor
  "\"'(eval (app - (-> n <-) 1) (env ((□? (m n)))))\""
  458
  451
  5
  2
  437
  2
  439
  1
  141641/145600
  131
  #f
  179/41
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  ack
  2
  25
  20
  ref-or-constructor
  "\"'(eval (app = (-> m <-) 0) (env ((□? (m n)))))\""
  459
  452
  5
  2
  437
  2
  439
  1
  141381/145600
  131
  #f
  1973/452
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  ack
  2
  25
  20
  ref-or-constructor
  "\"'(eval (app - (-> m <-) 1) (env ((□? (m n)))))\""
  460
  453
  5
  2
  437
  2
  439
  1
  141121/145600
  131
  #f
  659/151
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  ack
  2
  25
  20
  app
  "\"'(eval\n  (app ack (-> (app - m 1) <-) (app ack m (app - n 1)))\n  (env ((□? (m n)))))\""
  461
  454
  5
  2
  437
  2
  439
  1
  20123/20800
  131
  #f
  1981/454
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  2
  25
  20
  app
  "\"'(eval (app ack (-> (app - m 1) <-) 1) (env ((□? (m n)))))\""
  462
  455
  5
  2
  437
  2
  439
  1
  140601/145600
  131
  #f
  397/91
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  2
  25
  20
  app
  "\"'(eval\n  (app ack (app - m 1) (-> (app ack m (app - n 1)) <-))\n  (env ((□? (m n)))))\""
  463
  456
  5
  2
  437
  2
  439
  1
  140341/145600
  131
  #f
  663/152
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  2
  25
  20
  ref-or-constructor
  "\"'(eval (app = (-> n <-) 0) (env ((□? (m n)))))\""
  464
  457
  5
  2
  437
  2
  439
  1
  140081/145600
  131
  #f
  1993/457
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
