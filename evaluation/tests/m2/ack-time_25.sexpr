'(clean-cache
  ack
  2
  25
  20
  letrec*
  "\"'(eval ((top) letrec* (ack) ...) (env ()))\""
  417
  409
  5
  3
  394
  2
  396
  1
  1637/1680
  242
  #f
  576/409
  ((12 12 0) (25/2 25/2 0) (12 12 0)))
'(clean-cache
  ack
  2
  25
  20
  match
  "\"'(eval (λ (m n) (-> (match (app = m 0) ...) <-)) (env ((□? (m n)))))\""
  438
  431
  5
  2
  424
  2
  426
  1
  14034/14245
  273
  #f
  589/431
  ((25/2 25/2 0) (25/2 25/2 0) (27/2 27/2 0)))
'(clean-cache
  ack
  2
  25
  20
  app
  "\"'(eval (match (app = m 0) (#f) (_ (-> (app + n 1) <-))) (env ((□? (m n)))))\""
  387
  380
  5
  2
  376
  2
  378
  1
  4621/4662
  239
  #f
  521/380
  ((10 10 0) (10 10 0) (10 10 0)))
'(clean-cache
  ack
  2
  25
  20
  ref-or-constructor
  "\"'(eval (app + (-> n <-) 1) (env ((□? (m n)))))\""
  369
  362
  5
  2
  361
  2
  363
  1
  332/333
  223
  #f
  501/362
  ((19/2 19/2 0) (19/2 19/2 0) (19/2 19/2 0)))
'(clean-cache
  ack
  2
  25
  20
  match
  "\"'(eval\n  (match (app = m 0) ((#f) (-> (match (app = n 0) ...) <-)) _)\n  (env ((□? (m n)))))\""
  430
  423
  5
  2
  416
  2
  418
  1
  26525/26936
  265
  #f
  581/423
  ((12 12 0) (25/2 25/2 0) (29/2 29/2 0)))
'(clean-cache
  ack
  2
  20
  app
  "\"'(eval\n  (match (app = n 0) (#f) (_ (-> (app ack (app - m 1) 1) <-)))\n  (env ((□? (m n)))))\""
  #f)
'(clean-cache
  ack
  2
  25
  20
  app
  "\"'(eval (app ack (-> (app - m 1) <-) 1) (env ((□? (m n)))))\""
  128
  122
  5
  1
  118
  2
  120
  1
  34/35
  75
  #f
  169/122
  ((4 4 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  ack
  2
  25
  20
  ref-or-constructor
  "\"'(eval (app - (-> m <-) 1) (env ((□? (m n)))))\""
  125
  119
  5
  1
  118
  2
  120
  1
  139/140
  73
  #f
  165/119
  ((4 4 0) (4 4 0) (4 4 0)))
'(clean-cache
  ack
  2
  25
  20
  app
  "\"'(eval\n  (match\n   (app = n 0)\n   ((#f) (-> (app ack (app - m 1) (app ack m (app - n 1))) <-))\n   _)\n  (env ((□? (m n)))))\""
  425
  417
  5
  3
  383
  2
  385
  1
  105419/113960
  244
  #f
  590/417
  ((15 15 0) (31/2 31/2 0) (15 15 0)))
'(clean-cache
  ack
  2
  25
  20
  app
  "\"'(eval\n  (app ack (app - m 1) (-> (app ack m (app - n 1)) <-))\n  (env ((□? (m n)))))\""
  427
  418
  5
  4
  369
  2
  371
  1
  43/48
  226
  #f
  305/209
  ((16 16 0) (16 16 0) (33/2 33/2 0)))
'(clean-cache
  ack
  2
  25
  20
  app
  "\"'(eval (app ack m (-> (app - n 1) <-)) (env ((□? (m n)))))\""
  372
  365
  5
  2
  361
  2
  363
  1
  257/259
  225
  #f
  101/73
  ((19/2 19/2 0) (19/2 19/2 0) (19/2 19/2 0)))
'(clean-cache
  ack
  2
  25
  20
  ref-or-constructor
  "\"'(eval (app - (-> n <-) 1) (env ((□? (m n)))))\""
  369
  362
  5
  2
  361
  2
  363
  1
  517/518
  223
  #f
  501/362
  ((19/2 19/2 0) (19/2 19/2 0) (19/2 19/2 0)))
'(clean-cache
  ack
  2
  25
  20
  ref-or-constructor
  "\"'(eval (app ack (-> m <-) (app - n 1)) (env ((□? (m n)))))\""
  125
  119
  5
  1
  118
  2
  120
  1
  139/140
  73
  #f
  165/119
  ((4 4 0) (4 4 0) (4 4 0)))
'(clean-cache
  ack
  2
  25
  20
  app
  "\"'(eval\n  (app ack (-> (app - m 1) <-) (app ack m (app - n 1)))\n  (env ((□? (m n)))))\""
  128
  122
  5
  1
  118
  2
  120
  1
  34/35
  75
  #f
  169/122
  ((4 4 0) (4 4 0) (4 4 0)))
'(clean-cache
  ack
  2
  25
  20
  ref-or-constructor
  "\"'(eval (app - (-> m <-) 1) (env ((□? (m n)))))\""
  125
  119
  5
  1
  118
  2
  120
  1
  139/140
  73
  #f
  165/119
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(clean-cache
  ack
  2
  25
  20
  app
  "\"'(eval (match (-> (app = n 0) <-) (#f) _) (env ((□? (m n)))))\""
  384
  377
  5
  2
  373
  2
  375
  1
  1284/1295
  236
  #f
  518/377
  ((10 10 0) (19/2 19/2 0) (19/2 19/2 0)))
'(clean-cache
  ack
  2
  25
  20
  ref-or-constructor
  "\"'(eval (app = (-> n <-) 0) (env ((□? (m n)))))\""
  369
  362
  5
  2
  361
  2
  363
  1
  369/370
  223
  #f
  501/362
  ((9 9 0) (19/2 19/2 0) (9 9 0)))
'(clean-cache
  ack
  2
  25
  20
  app
  "\"'(eval (match (-> (app = m 0) <-) (#f) _) (env ((□? (m n)))))\""
  167
  161
  5
  1
  157
  2
  159
  1
  179/196
  105
  #f
  31/23
  ((5 5 0) (5 5 0) (5 5 0)))
'(clean-cache
  ack
  2
  25
  20
  ref-or-constructor
  "\"'(eval (app = (-> m <-) 0) (env ((□? (m n)))))\""
  125
  119
  5
  1
  118
  2
  120
  1
  10/11
  73
  #f
  165/119
  ((4 4 0) (4 4 0) (4 4 0)))
'(clean-cache
  ack
  2
  25
  20
  app
  "\"'(eval (letrec* (ack) (-> (app ack 3 12) <-)) (env ()))\""
  416
  408
  5
  3
  393
  2
  395
  1
  1595/1638
  242
  #f
  287/204
  ((12 12 0) (12 12 0) (12 12 0)))
'(shuffled-cache
  0
  ack
  2
  25
  20
  app
  "\"'(eval (app ack (-> (app - m 1) <-) 1) (env ((□? (m n)))))\""
  128
  122
  5
  1
  118
  2
  120
  1
  34/35
  75
  #f
  169/122
  ((9/2 9/2 0) (4 4 0) (9/2 9/2 0)))
'(shuffled-cache
  0
  ack
  2
  25
  20
  app
  "\"'(eval (match (app = m 0) (#f) (_ (-> (app + n 1) <-))) (env ((□? (m n)))))\""
  388
  381
  5
  2
  376
  2
  378
  1
  2306/2331
  239
  #f
  523/381
  ((6 6 0) (6 6 0) (6 6 0)))
'(shuffled-cache
  0
  ack
  2
  25
  20
  ref-or-constructor
  "\"'(eval (app + (-> n <-) 1) (env ((□? (m n)))))\""
  389
  382
  5
  2
  376
  2
  378
  1
  4603/4662
  239
  #f
  525/382
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  ack
  2
  25
  20
  app
  "\"'(eval (match (-> (app = n 0) <-) (#f) _) (env ((□? (m n)))))\""
  402
  395
  5
  2
  388
  2
  390
  1
  11476/11655
  250
  #f
  108/79
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  ack
  2
  25
  20
  ref-or-constructor
  "\"'(eval (app = (-> n <-) 0) (env ((□? (m n)))))\""
  403
  396
  5
  2
  388
  2
  390
  1
  22907/23310
  250
  #f
  271/198
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  ack
  2
  25
  20
  app
  "\"'(eval\n  (match\n   (app = n 0)\n   ((#f) (-> (app ack (app - m 1) (app ack m (app - n 1))) <-))\n   _)\n  (env ((□? (m n)))))\""
  419
  412
  5
  2
  403
  2
  405
  1
  251347/256410
  260
  #f
  141/103
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  ack
  2
  25
  20
  ref-or-constructor
  "\"'(eval (app = (-> m <-) 0) (env ((□? (m n)))))\""
  420
  413
  5
  2
  403
  2
  405
  1
  250717/256410
  260
  #f
  566/413
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  ack
  2
  25
  20
  app
  "\"'(eval\n  (app ack (-> (app - m 1) <-) (app ack m (app - n 1)))\n  (env ((□? (m n)))))\""
  421
  414
  5
  2
  403
  2
  405
  1
  17873/18315
  260
  #f
  284/207
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  2
  25
  20
  match
  "\"'(eval\n  (match (app = m 0) ((#f) (-> (match (app = n 0) ...) <-)) _)\n  (env ((□? (m n)))))\""
  428
  421
  5
  2
  409
  2
  411
  1
  324853/333333
  263
  #f
  579/421
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  ack
  2
  25
  20
  app
  "\"'(eval (app ack m (-> (app - n 1) <-)) (env ((□? (m n)))))\""
  429
  422
  5
  2
  409
  2
  411
  1
  648419/666666
  263
  #f
  581/422
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  2
  25
  20
  letrec*
  "\"'(eval ((top) letrec* (ack) ...) (env ()))\""
  438
  431
  5
  2
  418
  2
  420
  1
  31943/32760
  268
  #f
  594/431
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  2
  25
  20
  app
  "\"'(eval (letrec* (ack) (-> (app ack 3 12) <-)) (env ()))\""
  438
  431
  5
  2
  418
  2
  420
  1
  31943/32760
  268
  #f
  594/431
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  2
  25
  20
  ref-or-constructor
  "\"'(eval (app - (-> m <-) 1) (env ((□? (m n)))))\""
  439
  432
  5
  2
  418
  2
  420
  1
  63769/65520
  268
  #f
  149/108
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  ack
  2
  25
  20
  app
  "\"'(eval\n  (match (app = n 0) (#f) (_ (-> (app ack (app - m 1) 1) <-)))\n  (env ((□? (m n)))))\""
  459
  452
  5
  2
  437
  2
  439
  1
  141381/145600
  281
  #f
  623/452
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  ack
  2
  25
  20
  match
  "\"'(eval (λ (m n) (-> (match (app = m 0) ...) <-)) (env ((□? (m n)))))\""
  460
  453
  5
  2
  437
  2
  439
  1
  141121/145600
  281
  #f
  625/453
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  ack
  2
  25
  20
  ref-or-constructor
  "\"'(eval (app - (-> m <-) 1) (env ((□? (m n)))))\""
  460
  453
  5
  2
  437
  2
  439
  1
  141121/145600
  281
  #f
  625/453
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  2
  25
  20
  app
  "\"'(eval (match (-> (app = m 0) <-) (#f) _) (env ((□? (m n)))))\""
  461
  454
  5
  2
  437
  2
  439
  1
  20123/20800
  281
  #f
  627/454
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  ack
  2
  25
  20
  ref-or-constructor
  "\"'(eval (app ack (-> m <-) (app - n 1)) (env ((□? (m n)))))\""
  462
  455
  5
  2
  437
  2
  439
  1
  140601/145600
  281
  #f
  629/455
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  ack
  2
  25
  20
  app
  "\"'(eval\n  (app ack (app - m 1) (-> (app ack m (app - n 1)) <-))\n  (env ((□? (m n)))))\""
  463
  456
  5
  2
  437
  2
  439
  1
  140341/145600
  281
  #f
  631/456
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  ack
  2
  25
  20
  ref-or-constructor
  "\"'(eval (app - (-> n <-) 1) (env ((□? (m n)))))\""
  464
  457
  5
  2
  437
  2
  439
  1
  140081/145600
  281
  #f
  633/457
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  ack
  2
  25
  20
  app
  "\"'(eval (letrec* (ack) (-> (app ack 3 12) <-)) (env ()))\""
  416
  408
  5
  3
  393
  2
  395
  1
  1595/1638
  242
  #f
  287/204
  ((12 12 0) (23/2 23/2 0) (23/2 23/2 0)))
'(shuffled-cache
  1
  ack
  2
  25
  20
  ref-or-constructor
  "\"'(eval (app - (-> n <-) 1) (env ((□? (m n)))))\""
  417
  409
  5
  3
  393
  2
  395
  1
  796/819
  242
  #f
  576/409
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  ack
  2
  25
  20
  app
  "\"'(eval\n  (match\n   (app = n 0)\n   ((#f) (-> (app ack (app - m 1) (app ack m (app - n 1))) <-))\n   _)\n  (env ((□? (m n)))))\""
  422
  414
  5
  3
  396
  2
  398
  1
  2491/2574
  246
  #f
  97/69
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  2
  25
  20
  ref-or-constructor
  "\"'(eval (app + (-> n <-) 1) (env ((□? (m n)))))\""
  423
  415
  5
  3
  396
  2
  398
  1
  6211/6435
  246
  #f
  584/415
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  ack
  2
  25
  20
  app
  "\"'(eval (app ack m (-> (app - n 1) <-)) (env ((□? (m n)))))\""
  427
  419
  5
  3
  396
  2
  398
  1
  6167/6435
  248
  #f
  590/419
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  ack
  2
  25
  20
  ref-or-constructor
  "\"'(eval (app ack (-> m <-) (app - n 1)) (env ((□? (m n)))))\""
  428
  420
  5
  3
  396
  2
  398
  1
  17239/18018
  248
  #f
  148/105
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  ack
  2
  25
  20
  letrec*
  "\"'(eval ((top) letrec* (ack) ...) (env ()))\""
  429
  421
  5
  3
  397
  2
  399
  1
  17701/18480
  248
  #f
  594/421
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  2
  25
  20
  match
  "\"'(eval\n  (match (app = m 0) ((#f) (-> (match (app = n 0) ...) <-)) _)\n  (env ((□? (m n)))))\""
  443
  435
  5
  3
  407
  2
  409
  1
  2127/2240
  256
  #f
  614/435
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  ack
  2
  25
  20
  app
  "\"'(eval (match (-> (app = m 0) <-) (#f) _) (env ((□? (m n)))))\""
  453
  445
  5
  3
  413
  2
  415
  1
  6331/6720
  263
  #f
  627/445
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  ack
  2
  25
  20
  ref-or-constructor
  "\"'(eval (app - (-> m <-) 1) (env ((□? (m n)))))\""
  454
  446
  5
  3
  413
  2
  415
  1
  6319/6720
  263
  #f
  629/446
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  ack
  2
  25
  20
  ref-or-constructor
  "\"'(eval (app = (-> n <-) 0) (env ((□? (m n)))))\""
  455
  447
  5
  3
  413
  2
  415
  1
  901/960
  263
  #f
  631/447
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  ack
  2
  25
  20
  app
  "\"'(eval\n  (match (app = n 0) (#f) (_ (-> (app ack (app - m 1) 1) <-)))\n  (env ((□? (m n)))))\""
  473
  465
  5
  3
  429
  2
  431
  1
  259223/277200
  275
  #f
  131/93
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  ack
  2
  25
  20
  app
  "\"'(eval\n  (app ack (-> (app - m 1) <-) (app ack m (app - n 1)))\n  (env ((□? (m n)))))\""
  473
  465
  5
  3
  429
  2
  431
  1
  259223/277200
  275
  #f
  131/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  2
  25
  20
  app
  "\"'(eval (match (app = m 0) (#f) (_ (-> (app + n 1) <-))) (env ((□? (m n)))))\""
  486
  478
  5
  3
  438
  2
  440
  1
  257309/277200
  286
  #f
  335/239
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  ack
  2
  25
  20
  app
  "\"'(eval (match (-> (app = n 0) <-) (#f) _) (env ((□? (m n)))))\""
  490
  482
  5
  3
  438
  2
  440
  1
  255461/277200
  288
  #f
  338/241
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  ack
  2
  25
  20
  app
  "\"'(eval\n  (app ack (app - m 1) (-> (app ack m (app - n 1)) <-))\n  (env ((□? (m n)))))\""
  490
  482
  5
  3
  438
  2
  440
  1
  255461/277200
  288
  #f
  338/241
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  2
  25
  20
  ref-or-constructor
  "\"'(eval (app - (-> m <-) 1) (env ((□? (m n)))))\""
  490
  482
  5
  3
  438
  2
  440
  1
  255461/277200
  288
  #f
  338/241
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  ack
  2
  25
  20
  ref-or-constructor
  "\"'(eval (app = (-> m <-) 0) (env ((□? (m n)))))\""
  491
  483
  5
  3
  438
  2
  440
  1
  31879/34650
  288
  #f
  226/161
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  ack
  2
  25
  20
  app
  "\"'(eval (app ack (-> (app - m 1) <-) 1) (env ((□? (m n)))))\""
  495
  487
  5
  3
  438
  2
  440
  1
  15824/17325
  290
  #f
  684/487
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  ack
  2
  25
  20
  match
  "\"'(eval (λ (m n) (-> (match (app = m 0) ...) <-)) (env ((□? (m n)))))\""
  499
  491
  5
  3
  438
  2
  440
  1
  11423/12600
  290
  #f
  692/491
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
