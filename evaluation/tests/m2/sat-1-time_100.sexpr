'(sat-1 2 5000 9 6 41/9 ((0 0 0) (0 0 0) (0 0 0)))
'(sat-1 2 5000 264 49 1417/264 ((19 19 0) (18 18 0) (18 18 0)))
'(clean-cache
  sat-1
  2
  49
  letrec*
  "\"'(eval ((top) letrec* (phi ... sat-solve-4) ...) (env ()))\""
  #f)
'(clean-cache
  sat-1
  2
  49
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  #f)
'(clean-cache
  sat-1
  2
  49
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  #f)
'(clean-cache
  sat-1
  2
  49
  app
  "\"'(eval\n  (λ (n2) (-> (app try (λ (n3) ...)) <-))\n  (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  #f)
'(clean-cache
  sat-1
  2
  100
  49
  app
  "\"'(eval\n  (λ (n3) (-> (app try (λ (n4) ...)) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  347
  235
  62
  50
  96
  26
  122
  1
  11087/16380
  1274/235
  ((185/2 185/2 3) (181/2 181/2 5/2) (191/2 197/2 3)))
'(clean-cache
  sat-1
  2
  100
  49
  app
  "\"'(eval\n  (λ (n4) (-> (app p n1 n2 n3 n4) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  293
  193
  57
  43
  94
  25
  119
  1
  907/1485
  1037/193
  ((143/2 143/2 2) (73 73 2) (72 72 2)))
'(clean-cache
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 (-> n4 <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  17
  7
  3
  7
  1
  0
  1
  1
  1/7
  36/7
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 (-> n3 <-) n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  17
  7
  3
  7
  1
  0
  1
  1
  1/7
  36/7
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval\n  (app p n1 (-> n2 <-) n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  17
  7
  3
  7
  1
  0
  1
  1
  1/7
  36/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval\n  (app p (-> n1 <-) n2 n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  17
  7
  3
  7
  1
  0
  1
  1
  1/7
  36/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval\n  (app (-> p <-) n1 n2 n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  10
  3
  2
  5
  2
  2
  4
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n4) ...))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  6
  2
  0
  4
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  5
  2
  0
  3
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env ((□? (n1)) (□? (p)))))\""
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env ((□? (p)))))\""
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  2
  49
  app
  "\"'(eval\n  (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  #f)
'(clean-cache
  sat-1
  2
  49
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  #f)
'(clean-cache
  sat-1
  2
  100
  49
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  15
  5
  5
  5
  0
  1
  1
  1
  0
  28/5
  ((1 1 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-1
  2
  49
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  #f)
'(clean-cache
  sat-1
  2
  100
  49
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  15
  5
  5
  5
  0
  1
  1
  1
  0
  28/5
  ((1 1 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env ((□? (f)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  2
  100
  49
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4)\n    (->\n     (app\n      and\n      (app or x1 (app not x2) (app not x3))\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  290
  196
  55
  39
  92
  23
  115
  1
  1589/2700
  151/28
  ((75 75 3) (149/2 149/2 5/2) (143/2 143/2 5/2)))
'(clean-cache
  sat-1
  2
  100
  49
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  65
  40
  11
  14
  11
  2
  13
  1
  13/34
  43/8
  ((19/2 19/2 0) (19/2 19/2 0) (9 9 0)))
'(clean-cache
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  30
  12
  6
  12
  3
  2
  5
  1
  3/10
  31/6
  ((2 2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env ((□? (x1 x2 x3 x4)))))\""
  27
  12
  6
  9
  3
  2
  5
  1
  3/10
  31/6
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> or <-) x4 x2) (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  2
  100
  49
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))\""
  79
  48
  15
  16
  13
  6
  19
  1
  1/3
  127/24
  ((8 8 0) (8 8 0) (8 8 0)))
'(clean-cache
  sat-1
  2
  100
  49
  app
  "\"'(eval (app or (app not x2) (-> (app not x3) <-)) (env ((□? (x1 x2 x3 x4)))))\""
  35
  18
  6
  11
  5
  2
  7
  1
  5/14
  47/9
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  28
  12
  6
  10
  3
  2
  5
  1
  3/10
  31/6
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  2
  100
  49
  app
  "\"'(eval (app or (-> (app not x2) <-) (app not x3)) (env ((□? (x1 x2 x3 x4)))))\""
  37
  18
  6
  13
  5
  2
  7
  1
  5/14
  47/9
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  30
  12
  6
  12
  3
  2
  5
  1
  3/10
  31/6
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x2) (app not x3)) (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  2
  100
  49
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))\""
  136
  80
  30
  26
  32
  19
  51
  1
  157/378
  53/10
  ((21 21 0) (21 21 0) (21 21 0)))
'(clean-cache
  sat-1
  2
  100
  49
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  35
  18
  6
  11
  5
  2
  7
  1
  5/14
  47/9
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  28
  12
  6
  10
  3
  2
  5
  1
  3/10
  31/6
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  2
  100
  49
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))\""
  37
  18
  6
  13
  5
  2
  7
  1
  5/14
  47/9
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  30
  12
  6
  12
  3
  2
  5
  1
  3/10
  31/6
  ((3/2 3/2 0) (2 2 0) (2 2 0)))
'(clean-cache
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))\""
  31
  12
  6
  13
  8
  5
  13
  1
  4/5
  31/6
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  2
  49
  app
  "\"'(eval (letrec* (phi ... sat-solve-4) (-> (app sat-solve-4 phi) <-)) (env ()))\""
  #f)
'(clean-cache
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app sat-solve-4 (-> phi <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-4 <-) phi) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval\n  (app (-> p <-) n1 n2 n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  10
  3
  2
  5
  2
  2
  4
  1
  2/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env ((□? (p)))))\""
  12
  5
  2
  5
  3
  2
  5
  1
  3/5
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))\""
  41
  16
  8
  17
  10
  7
  17
  1
  19/26
  41/8
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  sat-1
  2
  100
  49
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))\""
  83
  43
  17
  23
  22
  13
  35
  1
  67/120
  224/43
  ((11/2 11/2 0) (11/2 11/2 0) (11/2 11/2 0)))
'(shuffled-cache
  0
  sat-1
  2
  100
  49
  app
  "\"'(eval (app or (-> (app not x2) <-) (app not x3)) (env ((□? (x1 x2 x3 x4)))))\""
  86
  46
  17
  23
  22
  13
  35
  1
  67/138
  241/46
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2 x3 x4)))))\""
  87
  47
  17
  23
  22
  13
  35
  1
  67/138
  246/47
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  2
  49
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  #f)
'(shuffled-cache
  0
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  17
  6
  5
  6
  0
  1
  1
  1
  0
  11/2
  ((1/2 1/2 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env ((□? (x1 x2 x3 x4)))))\""
  18
  7
  5
  6
  0
  1
  1
  1
  0
  38/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  2
  100
  49
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  27
  12
  5
  10
  0
  1
  1
  1
  0
  21/4
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  2
  49
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  #f)
'(shuffled-cache
  0
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  30
  12
  6
  12
  3
  2
  5
  1
  3/10
  31/6
  ((2 2 0) (3/2 3/2 0) (2 2 0)))
'(shuffled-cache
  0
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))\""
  31
  13
  6
  12
  3
  2
  5
  1
  3/11
  67/13
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  2
  100
  49
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4)\n    (->\n     (app\n      and\n      (app or x1 (app not x2) (app not x3))\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  284
  190
  55
  39
  92
  23
  115
  1
  3313/5400
  511/95
  ((141/2 141/2 5/2) (139/2 139/2 5/2) (70 70 5/2)))
'(shuffled-cache
  0
  sat-1
  2
  100
  49
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))\""
  285
  191
  55
  39
  92
  23
  115
  1
  6581/10800
  1028/191
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-1
  2
  100
  49
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  286
  192
  55
  39
  92
  23
  115
  1
  817/1350
  517/96
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))\""
  287
  193
  55
  39
  92
  23
  115
  1
  6491/10800
  1039/193
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env ((□? (n1)) (□? (p)))))\""
  289
  194
  55
  40
  92
  23
  115
  1
  3223/5400
  522/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  2
  100
  49
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  447
  322
  62
  63
  134
  26
  160
  1
  65981/109098
  913/161
  ((103/2 103/2 3/2) (51 51 3/2) (103/2 103/2 3/2)))
'(shuffled-cache
  0
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-4 <-) phi) (env ()))\""
  447
  322
  62
  63
  134
  26
  160
  1
  65981/109098
  913/161
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env ((□? (x1 x2 x3 x4)))))\""
  448
  323
  62
  63
  134
  26
  160
  1
  32831/54549
  1831/323
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  2
  100
  49
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))\""
  449
  324
  62
  63
  134
  26
  160
  1
  21781/36366
  1837/324
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n4) ...))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  450
  325
  62
  63
  134
  26
  160
  1
  11263/18810
  1842/325
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval\n  (app p (-> n1 <-) n2 n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  493
  356
  63
  74
  134
  26
  160
  1
  2876/4845
  1025/178
  ((55/2 55/2 0) (28 28 0) (55/2 55/2 0)))
'(shuffled-cache
  0
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  494
  357
  63
  74
  134
  26
  160
  1
  17171/29070
  2056/357
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 (-> n3 <-) n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  533
  387
  66
  80
  134
  26
  160
  1
  10289/17442
  2261/387
  ((125/2 125/2 1) (61 61 1) (61 61 1)))
'(shuffled-cache
  0
  sat-1
  2
  100
  49
  app
  "\"'(eval\n  (λ (n4) (-> (app p n1 n2 n3 n4) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  545
  395
  66
  84
  134
  26
  160
  1
  5119/8721
  2303/395
  ((4 4 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  0
  sat-1
  2
  100
  49
  app
  "\"'(eval (app or (app not x2) (-> (app not x3) <-)) (env ((□? (x1 x2 x3 x4)))))\""
  546
  396
  66
  84
  134
  26
  160
  1
  10187/17442
  2309/396
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  547
  397
  66
  84
  134
  26
  160
  1
  5068/8721
  2315/397
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> or <-) x4 x2) (env ((□? (x1 x2 x3 x4)))))\""
  548
  398
  66
  84
  134
  26
  160
  1
  10085/17442
  1160/199
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  548
  398
  66
  84
  134
  26
  160
  1
  10085/17442
  1160/199
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  2
  100
  49
  letrec*
  "\"'(eval ((top) letrec* (phi ... sat-solve-4) ...) (env ()))\""
  563
  412
  66
  85
  148
  26
  174
  1
  44063/73440
  2405/412
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x2) (app not x3)) (env ((□? (x1 x2 x3 x4)))))\""
  564
  413
  66
  85
  148
  26
  174
  1
  43859/73440
  2410/413
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  2
  100
  49
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  568
  417
  66
  85
  148
  26
  174
  1
  21547/36720
  2432/417
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env ((□? (f)))))\""
  569
  418
  66
  85
  148
  26
  174
  1
  42941/73440
  2437/418
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  570
  419
  66
  85
  148
  26
  174
  1
  42737/73440
  2443/419
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-1
  2
  100
  49
  app
  "\"'(eval\n  (λ (n3) (-> (app try (λ (n4) ...)) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  574
  423
  66
  85
  148
  26
  174
  1
  1253/2160
  2465/423
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  sat-1
  2
  100
  49
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  575
  424
  66
  85
  148
  26
  174
  1
  1247/2160
  2471/424
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  576
  425
  66
  85
  148
  26
  174
  1
  497/864
  2506/425
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  0
  sat-1
  2
  100
  49
  app
  "\"'(eval\n  (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  587
  436
  66
  85
  148
  26
  174
  1
  16613/29700
  2575/436
  ((12 12 0) (12 12 0) (23/2 23/2 0)))
'(shuffled-cache
  0
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app sat-solve-4 (-> phi <-)) (env ()))\""
  587
  436
  66
  85
  148
  26
  174
  1
  16613/29700
  2575/436
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  2
  100
  49
  app
  "\"'(eval\n  (λ (n2) (-> (app try (λ (n3) ...)) <-))\n  (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  589
  438
  66
  85
  148
  26
  174
  1
  430789/772200
  2587/438
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 (-> n4 <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  595
  439
  71
  85
  148
  26
  174
  1
  430789/772200
  2593/439
  ((22 22 0) (23 23 0) (21 21 0)))
'(shuffled-cache
  0
  sat-1
  2
  100
  49
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  596
  440
  71
  85
  148
  26
  174
  1
  42997/77220
  1299/220
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env ((□? (x1 x2 x3 x4)))))\""
  597
  441
  71
  85
  148
  26
  174
  1
  17113/30888
  124/21
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-1
  2
  49
  ref-or-constructor
  "\"'(eval\n  (app p n1 (-> n2 <-) n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  #f)
'(shuffled-cache
  0
  sat-1
  2
  49
  app
  "\"'(eval (letrec* (phi ... sat-solve-4) (-> (app sat-solve-4 phi) <-)) (env ()))\""
  #f)
'(shuffled-cache
  0
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  28
  12
  6
  10
  3
  2
  5
  1
  3/10
  31/6
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-4 <-) phi) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  2
  49
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  #f)
'(shuffled-cache
  1
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env ((□? (x1 x2 x3 x4)))))\""
  27
  12
  6
  9
  3
  2
  5
  1
  3/10
  31/6
  ((5/2 5/2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  sat-1
  2
  49
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  #f)
'(shuffled-cache
  1
  sat-1
  2
  100
  49
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))\""
  136
  80
  30
  26
  32
  19
  51
  1
  157/378
  53/10
  ((21 21 0) (21 21 0) (43/2 43/2 0)))
'(shuffled-cache
  1
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 (-> n4 <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  184
  115
  38
  31
  48
  23
  71
  1
  257/468
  616/115
  ((15 15 0) (29/2 29/2 0) (31/2 31/2 0)))
'(shuffled-cache
  1
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval\n  (app (-> try <-) (λ (n4) ...))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  184
  115
  38
  31
  48
  23
  71
  1
  257/468
  616/115
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  197
  123
  43
  31
  49
  24
  73
  1
  275/558
  689/123
  ((3 3 0) (7/2 7/2 0) (3 3 0)))
'(shuffled-cache
  1
  sat-1
  2
  100
  49
  letrec*
  "\"'(eval ((top) letrec* (phi ... sat-solve-4) ...) (env ()))\""
  447
  319
  63
  65
  148
  26
  174
  1
  56503/79200
  1818/319
  ((163/2 163/2 5/2) (165/2 165/2 5/2) (81 81 2)))
'(shuffled-cache
  1
  sat-1
  2
  100
  49
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  451
  323
  63
  65
  148
  26
  174
  1
  54743/79200
  1841/323
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  452
  324
  63
  65
  148
  26
  174
  1
  4973/7200
  923/162
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  2
  100
  49
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))\""
  456
  328
  63
  65
  148
  26
  174
  1
  4813/7200
  1869/328
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval\n  (app p n1 (-> n2 <-) n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  491
  352
  66
  73
  148
  26
  174
  1
  14363/21600
  1013/176
  ((27 27 0) (27 27 1/2) (51/2 51/2 0)))
'(shuffled-cache
  1
  sat-1
  2
  100
  49
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4)\n    (->\n     (app\n      and\n      (app or x1 (app not x2) (app not x3))\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  496
  357
  66
  73
  148
  26
  174
  1
  13943/21600
  685/119
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  497
  358
  66
  73
  148
  26
  174
  1
  13883/21600
  2061/358
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  498
  359
  66
  73
  148
  26
  174
  1
  6919/10800
  2088/359
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  sat-1
  2
  100
  49
  app
  "\"'(eval\n  (λ (n2) (-> (app try (λ (n3) ...)) <-))\n  (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  500
  361
  66
  73
  148
  26
  174
  1
  4591/7200
  2100/361
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))\""
  500
  361
  66
  73
  148
  26
  174
  1
  4591/7200
  2100/361
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  2
  100
  49
  app
  "\"'(eval\n  (λ (n4) (-> (app p n1 n2 n3 n4) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  506
  367
  66
  73
  148
  26
  174
  1
  4571/7200
  2132/367
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  1
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env ((□? (x1 x2 x3 x4)))))\""
  507
  368
  66
  73
  148
  26
  174
  1
  4531/7200
  2137/368
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  2
  100
  49
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))\""
  507
  368
  66
  73
  148
  26
  174
  1
  4531/7200
  2137/368
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x2) (app not x3)) (env ((□? (x1 x2 x3 x4)))))\""
  508
  369
  66
  73
  148
  26
  174
  1
  4511/7200
  238/41
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4)))))\""
  509
  370
  66
  73
  148
  26
  174
  1
  499/800
  2147/370
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env ((□? (x1 x2 x3 x4)))))\""
  510
  371
  66
  73
  148
  26
  174
  1
  4471/7200
  2152/371
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env ((□? (f)))))\""
  511
  372
  66
  73
  148
  26
  174
  1
  557/900
  719/124
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4)))))\""
  511
  372
  66
  73
  148
  26
  174
  1
  557/900
  719/124
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  512
  373
  66
  73
  148
  26
  174
  1
  1109/1800
  2163/373
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  513
  374
  66
  73
  148
  26
  174
  1
  1099/1800
  2169/374
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-1
  2
  100
  49
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  514
  375
  66
  73
  148
  26
  174
  1
  3017/4950
  2174/375
  ((1/2 1/2 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval\n  (app (-> p <-) n1 n2 n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  514
  375
  66
  73
  148
  26
  174
  1
  3017/4950
  2174/375
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  2
  100
  49
  app
  "\"'(eval (app or (-> (app not x2) <-) (app not x3)) (env ((□? (x1 x2 x3 x4)))))\""
  517
  378
  66
  73
  148
  26
  174
  1
  1481/2475
  313/54
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-1
  2
  100
  49
  app
  "\"'(eval\n  (λ (n3) (-> (app try (λ (n4) ...)) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  524
  385
  66
  73
  148
  26
  174
  1
  69823/118800
  2248/385
  ((7/2 7/2 0) (3 3 0) (7/2 7/2 0)))
'(shuffled-cache
  1
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2 x3 x4)))))\""
  525
  386
  66
  73
  148
  26
  174
  1
  69493/118800
  2253/386
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  526
  387
  66
  73
  148
  26
  174
  1
  69163/118800
  251/43
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-1
  2
  100
  49
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  527
  388
  66
  73
  148
  26
  174
  1
  69037/118800
  566/97
  ((1/2 1/2 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval\n  (app p (-> n1 <-) n2 n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  631
  463
  71
  97
  148
  26
  174
  1
  2654713/4633200
  2792/463
  ((90 90 3/2) (91 91 2) (90 90 3/2)))
'(shuffled-cache
  1
  sat-1
  2
  100
  49
  app
  "\"'(eval (letrec* (phi ... sat-solve-4) (-> (app sat-solve-4 phi) <-)) (env ()))\""
  631
  463
  71
  97
  148
  26
  174
  1
  2654713/4633200
  2792/463
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  2
  100
  49
  app
  "\"'(eval\n  (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  638
  470
  71
  97
  148
  26
  174
  1
  65269/115830
  1416/235
  ((9 9 0) (9 9 0) (9 9 0)))
'(shuffled-cache
  1
  sat-1
  2
  49
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 (-> n3 <-) n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  #f)
'(shuffled-cache
  1
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env ((□? (x1 x2 x3 x4)))))\""
  2
  1
  0
  1
  0
  0
  0
  1
  0
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env ((□? (n1)) (□? (p)))))\""
  6
  3
  0
  3
  1
  0
  1
  1
  1/3
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4)))))\""
  31
  14
  6
  11
  3
  2
  5
  1
  1/4
  36/7
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env ((□? (p)))))\""
  32
  15
  6
  11
  3
  2
  5
  1
  3/13
  77/15
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app sat-solve-4 (-> phi <-)) (env ()))\""
  34
  17
  6
  11
  5
  2
  7
  1
  1/3
  87/17
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  2
  100
  49
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env ((□? (x1 x2 x3 x4)))))\""
  40
  22
  6
  12
  7
  2
  9
  1
  7/20
  57/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  2
  49
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  #f)
'(shuffled-cache
  1
  sat-1
  2
  100
  49
  app
  "\"'(eval (app or (app not x2) (-> (app not x3) <-)) (env ((□? (x1 x2 x3 x4)))))\""
  35
  18
  6
  11
  5
  2
  7
  1
  5/14
  47/9
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  sat-1
  2
  100
  49
  ref-or-constructor
  "\"'(eval (app (-> or <-) x4 x2) (env ((□? (x1 x2 x3 x4)))))\""
  36
  19
  6
  11
  5
  2
  7
  1
  1/3
  99/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  2
  49
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  #f)
