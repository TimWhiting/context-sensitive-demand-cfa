'(clean-cache
  flatten
  2
  59
  lettypes
  "\"'(eval ((top) lettypes (cons ... nil) ...) (env ()))\""
  #f)
'(clean-cache
  flatten
  2
  59
  letrec*
  "\"'(eval (lettypes cons ... nil (letrec* (car ... flatten) ...)) (env ()))\""
  #f)
'(clean-cache
  flatten
  2
  59
  match
  "\"'(eval (λ (x) (-> (match (app pair? x) ...) <-)) (env ((□? (x)))))\""
  #f)
'(clean-cache
  flatten
  2
  59
  app
  "\"'(eval\n  (match\n   (app pair? x)\n   (#f)\n   (_\n    (-> (app append (app flatten (app car x)) (app flatten (app cdr x))) <-)))\n  (env ((□? (x)))))\""
  #f)
'(clean-cache
  flatten
  2
  59
  app
  "\"'(eval\n  (app append (app flatten (app car x)) (-> (app flatten (app cdr x)) <-))\n  (env ((□? (x)))))\""
  #f)
'(clean-cache
  flatten
  2
  25
  59
  app
  "\"'(eval (app flatten (-> (app cdr x) <-)) (env ((□? (x)))))\""
  116
  101
  10
  5
  95
  4
  99
  1
  367/376
  58
  #f
  288/101
  ((13 13 0) (13 13 0) (13 13 0)))
'(clean-cache
  flatten
  2
  25
  59
  ref-or-constructor
  "\"'(eval (app cdr (-> x <-)) (env ((□? (x)))))\""
  110
  96
  10
  4
  95
  4
  99
  1
  375/376
  63
  #f
  181/96
  ((5 5 0) (5 5 0) (5 5 0)))
'(clean-cache
  flatten
  2
  59
  app
  "\"'(eval\n  (app append (-> (app flatten (app car x)) <-) (app flatten (app cdr x)))\n  (env ((□? (x)))))\""
  #f)
'(clean-cache
  flatten
  2
  25
  59
  app
  "\"'(eval (app flatten (-> (app car x) <-)) (env ((□? (x)))))\""
  116
  101
  10
  5
  95
  4
  99
  1
  367/376
  58
  #f
  296/101
  ((13 13 0) (13 13 0) (13 13 0)))
'(clean-cache
  flatten
  2
  25
  59
  ref-or-constructor
  "\"'(eval (app car (-> x <-)) (env ((□? (x)))))\""
  110
  96
  10
  4
  95
  4
  99
  1
  375/376
  63
  #f
  181/96
  ((5 5 0) (5 5 0) (5 5 0)))
'(clean-cache
  flatten
  2
  25
  59
  match
  "\"'(eval\n  (match (app pair? x) ((#f) (-> (match (app null? x) ...) <-)) _)\n  (env ((□? (x)))))\""
  187
  168
  13
  6
  156
  5
  161
  1
  463/488
  109
  #f
  15/7
  ((31/2 31/2 0) (15 15 0) (15 15 0)))
'(clean-cache
  flatten
  2
  25
  59
  ref-or-constructor
  "\"'(eval (match (app null? x) (#f) (_ (-> x <-))) (env ((□? (x)))))\""
  110
  96
  10
  4
  95
  4
  99
  1
  47/48
  63
  #f
  181/96
  ((5 5 0) (9/2 9/2 0) (5 5 0)))
'(clean-cache
  flatten
  2
  25
  59
  app
  "\"'(eval\n  (match (app null? x) ((#f) (-> (app cons x (app nil)) <-)) _)\n  (env ((□? (x)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  flatten
  2
  25
  59
  app
  "\"'(eval (app cons x (-> (app nil) <-)) (env ((□? (x)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  flatten
  2
  25
  59
  ref-or-constructor
  "\"'(eval (app cons (-> x <-) (app nil)) (env ((□? (x)))))\""
  110
  96
  10
  4
  95
  4
  99
  1
  47/48
  63
  #f
  181/96
  ((5 5 0) (5 5 0) (5 5 0)))
'(clean-cache
  flatten
  2
  25
  59
  app
  "\"'(eval (match (-> (app null? x) <-) (#f) _) (env ((□? (x)))))\""
  156
  137
  13
  6
  128
  5
  133
  1
  217/228
  91
  #f
  279/137
  ((27/2 27/2 0) (27/2 27/2 0) (27/2 27/2 0)))
'(clean-cache
  flatten
  2
  25
  59
  ref-or-constructor
  "\"'(eval (app null? (-> x <-)) (env ((□? (x)))))\""
  110
  96
  10
  4
  95
  4
  99
  1
  47/48
  63
  #f
  181/96
  ((5 5 0) (5 5 0) (5 5 0)))
'(clean-cache
  flatten
  2
  25
  59
  app
  "\"'(eval (match (-> (app pair? x) <-) (#f) _) (env ((□? (x)))))\""
  155
  137
  12
  6
  128
  5
  133
  1
  217/228
  91
  #f
  279/137
  ((12 12 0) (12 12 0) (23/2 23/2 0)))
'(clean-cache
  flatten
  2
  25
  59
  ref-or-constructor
  "\"'(eval (app pair? (-> x <-)) (env ((□? (x)))))\""
  110
  96
  10
  4
  95
  4
  99
  1
  47/48
  63
  #f
  181/96
  ((5 5 0) (5 5 0) (5 5 0)))
'(clean-cache
  flatten
  2
  59
  match
  "\"'(eval (λ (x y) (-> (match (app null? x) ...) <-)) (env ((□? (x y)))))\""
  #f)
'(clean-cache
  flatten
  2
  25
  59
  ref-or-constructor
  "\"'(eval (match (app null? x) (#f) (_ (-> y <-))) (env ((□? (x y)))))\""
  295
  266
  18
  11
  246
  7
  253
  1
  2357/2464
  163
  #f
  85/38
  ((43/2 43/2 0) (21 21 0) (21 21 0)))
'(clean-cache
  flatten
  2
  25
  59
  app
  "\"'(eval\n  (match\n   (app null? x)\n   ((#f) (-> (app cons (app car x) (app append (app cdr x) y)) <-))\n   _)\n  (env ((□? (x y)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  flatten
  2
  59
  app
  "\"'(eval\n  (app cons (app car x) (-> (app append (app cdr x) y) <-))\n  (env ((□? (x y)))))\""
  #f)
'(clean-cache
  flatten
  2
  25
  59
  ref-or-constructor
  "\"'(eval (app append (app cdr x) (-> y <-)) (env ((□? (x y)))))\""
  294
  265
  18
  11
  246
  7
  253
  1
  2357/2436
  163
  #f
  117/53
  ((39/2 39/2 0) (39/2 39/2 0) (19 19 0)))
'(clean-cache
  flatten
  2
  59
  app
  "\"'(eval (app append (-> (app cdr x) <-) y) (env ((□? (x y)))))\""
  #f)
'(clean-cache
  flatten
  2
  59
  ref-or-constructor
  "\"'(eval (app cdr (-> x <-)) (env ((□? (x y)))))\""
  #f)
'(clean-cache
  flatten
  2
  59
  app
  "\"'(eval\n  (app cons (-> (app car x) <-) (app append (app cdr x) y))\n  (env ((□? (x y)))))\""
  #f)
'(clean-cache
  flatten
  2
  59
  ref-or-constructor
  "\"'(eval (app car (-> x <-)) (env ((□? (x y)))))\""
  #f)
'(clean-cache
  flatten
  2
  59
  app
  "\"'(eval (match (-> (app null? x) <-) (#f) _) (env ((□? (x y)))))\""
  #f)
'(clean-cache
  flatten
  2
  59
  ref-or-constructor
  "\"'(eval (app null? (-> x <-)) (env ((□? (x y)))))\""
  #f)
'(clean-cache
  flatten
  2
  59
  match
  "\"'(eval (λ (null?-v) (-> (match null?-v ...) <-)) (env ((□? (null?-v)))))\""
  #f)
'(clean-cache
  flatten
  2
  25
  59
  app
  "\"'(eval (match null?-v (nil) (_ (-> (app #f) <-))) (env ((□? (null?-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  flatten
  2
  25
  59
  app
  "\"'(eval (match null?-v ((nil) (-> (app #t) <-)) _) (env ((□? (null?-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  flatten
  2
  59
  ref-or-constructor
  "\"'(eval (match (-> null?-v <-) (nil) _) (env ((□? (null?-v)))))\""
  #f)
'(clean-cache
  flatten
  2
  25
  59
  match
  "\"'(eval (λ (pair?-v) (-> (match pair?-v ...) <-)) (env ((□? (pair?-v)))))\""
  145
  127
  12
  6
  117
  5
  122
  1
  2047/2160
  84
  #f
  276/127
  ((10 10 0) (10 10 0) (10 10 0)))
'(clean-cache
  flatten
  2
  25
  59
  app
  "\"'(eval\n  (match pair?-v (cons pair?-c pair?-d) (_ (-> (app #f) <-)))\n  (env ((□? (pair?-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  flatten
  2
  25
  59
  app
  "\"'(eval\n  (match pair?-v ((cons pair?-c pair?-d) (-> (app #t) <-)) _)\n  (env ((□? (pair?-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  flatten
  2
  25
  59
  ref-or-constructor
  "\"'(eval (match (-> pair?-v <-) (cons pair?-c pair?-d) _) (env ((□? (pair?-v)))))\""
  122
  104
  12
  6
  102
  5
  107
  1
  383/392
  66
  #f
  2
  ((6 6 0) (6 6 0) (6 6 0)))
'(clean-cache
  flatten
  2
  59
  match
  "\"'(eval (λ (cdr-v) (-> (match cdr-v ...) <-)) (env ((□? (cdr-v)))))\""
  #f)
'(clean-cache
  flatten
  2
  59
  ref-or-constructor
  "\"'(eval (match cdr-v ((cons cdr-c cdr-d) (-> cdr-d <-))) (env ((□? (cdr-v)))))\""
  #f)
'(clean-cache
  flatten
  2
  59
  ref-or-constructor
  "\"'(eval (match (-> cdr-v <-) (cons cdr-c cdr-d)) (env ((□? (cdr-v)))))\""
  #f)
'(clean-cache
  flatten
  2
  59
  match
  "\"'(eval (λ (car-v) (-> (match car-v ...) <-)) (env ((□? (car-v)))))\""
  #f)
'(clean-cache
  flatten
  2
  59
  ref-or-constructor
  "\"'(eval (match car-v ((cons car-c car-d) (-> car-c <-))) (env ((□? (car-v)))))\""
  #f)
'(clean-cache
  flatten
  2
  59
  ref-or-constructor
  "\"'(eval (match (-> car-v <-) (cons car-c car-d)) (env ((□? (car-v)))))\""
  #f)
'(clean-cache
  flatten
  2
  59
  app
  "\"'(eval\n  (letrec*\n   (car ... flatten)\n   (->\n    (app\n     flatten\n     (app\n      cons\n      (app cons 1 (app cons 2 (app nil)))\n      (app\n       cons\n       (app\n        cons\n        (app cons (app cons 3 (app cons 4 (app cons 5 (app nil)))) (app nil))\n        (app nil))\n       (app nil))))\n    <-))\n  (env ()))\""
  #f)
'(clean-cache
  flatten
  2
  25
  59
  app
  "\"'(eval\n  (app\n   flatten\n   (->\n    (app\n     cons\n     (app cons 1 (app cons 2 (app nil)))\n     (app\n      cons\n      (app\n       cons\n       (app cons (app cons 3 (app cons 4 (app cons 5 (app nil)))) (app nil))\n       (app nil))\n      (app nil)))\n    <-))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  flatten
  2
  25
  59
  app
  "\"'(eval\n  (app\n   cons\n   (app cons 1 (app cons 2 (app nil)))\n   (->\n    (app\n     cons\n     (app\n      cons\n      (app cons (app cons 3 (app cons 4 (app cons 5 (app nil)))) (app nil))\n      (app nil))\n     (app nil))\n    <-))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  flatten
  2
  25
  59
  app
  "\"'(eval\n  (app\n   cons\n   (app\n    cons\n    (app cons (app cons 3 (app cons 4 (app cons 5 (app nil)))) (app nil))\n    (app nil))\n   (-> (app nil) <-))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  flatten
  2
  25
  59
  app
  "\"'(eval\n  (app\n   cons\n   (->\n    (app\n     cons\n     (app cons (app cons 3 (app cons 4 (app cons 5 (app nil)))) (app nil))\n     (app nil))\n    <-)\n   (app nil))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  flatten
  2
  25
  59
  app
  "\"'(eval\n  (app\n   cons\n   (app cons (app cons 3 (app cons 4 (app cons 5 (app nil)))) (app nil))\n   (-> (app nil) <-))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  flatten
  2
  25
  59
  app
  "\"'(eval\n  (app\n   cons\n   (->\n    (app cons (app cons 3 (app cons 4 (app cons 5 (app nil)))) (app nil))\n    <-)\n   (app nil))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  flatten
  2
  25
  59
  app
  "\"'(eval\n  (app cons (app cons 3 (app cons 4 (app cons 5 (app nil)))) (-> (app nil) <-))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  flatten
  2
  25
  59
  app
  "\"'(eval\n  (app cons (-> (app cons 3 (app cons 4 (app cons 5 (app nil)))) <-) (app nil))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  flatten
  2
  25
  59
  app
  "\"'(eval (app cons 3 (-> (app cons 4 (app cons 5 (app nil))) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  flatten
  2
  25
  59
  app
  "\"'(eval (app cons 4 (-> (app cons 5 (app nil)) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  flatten
  2
  25
  59
  app
  "\"'(eval (app cons 5 (-> (app nil) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  flatten
  2
  25
  59
  app
  "\"'(eval\n  (app\n   cons\n   (-> (app cons 1 (app cons 2 (app nil))) <-)\n   (app\n    cons\n    (app\n     cons\n     (app cons (app cons 3 (app cons 4 (app cons 5 (app nil)))) (app nil))\n     (app nil))\n    (app nil)))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  flatten
  2
  25
  59
  app
  "\"'(eval (app cons 1 (-> (app cons 2 (app nil)) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  flatten
  2
  25
  59
  app
  "\"'(eval (app cons 2 (-> (app nil) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  flatten
  2
  59
  ref-or-constructor
  "\"'(eval (app null? (-> x <-)) (env ((□? (x y)))))\""
  #f)
'(shuffled-cache
  0
  flatten
  2
  59
  lettypes
  "\"'(eval ((top) lettypes (cons ... nil) ...) (env ()))\""
  #f)
'(shuffled-cache
  0
  flatten
  2
  59
  match
  "\"'(eval (λ (car-v) (-> (match car-v ...) <-)) (env ((□? (car-v)))))\""
  #f)
'(shuffled-cache
  0
  flatten
  2
  25
  59
  app
  "\"'(eval\n  (app cons (app cons 3 (app cons 4 (app cons 5 (app nil)))) (-> (app nil) <-))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  flatten
  2
  25
  59
  app
  "\"'(eval (match (-> (app pair? x) <-) (#f) _) (env ((□? (x)))))\""
  155
  137
  12
  6
  128
  5
  133
  1
  217/228
  91
  #f
  279/137
  ((23/2 23/2 0) (23/2 23/2 0) (12 12 0)))
'(shuffled-cache
  0
  flatten
  2
  59
  match
  "\"'(eval (λ (cdr-v) (-> (match cdr-v ...) <-)) (env ((□? (cdr-v)))))\""
  #f)
'(shuffled-cache
  0
  flatten
  2
  59
  letrec*
  "\"'(eval (lettypes cons ... nil (letrec* (car ... flatten) ...)) (env ()))\""
  #f)
'(shuffled-cache
  0
  flatten
  2
  59
  app
  "\"'(eval\n  (app cons (app car x) (-> (app append (app cdr x) y) <-))\n  (env ((□? (x y)))))\""
  #f)
'(shuffled-cache
  0
  flatten
  2
  59
  ref-or-constructor
  "\"'(eval (app cdr (-> x <-)) (env ((□? (x y)))))\""
  #f)
'(shuffled-cache
  0
  flatten
  2
  59
  match
  "\"'(eval (λ (null?-v) (-> (match null?-v ...) <-)) (env ((□? (null?-v)))))\""
  #f)
'(shuffled-cache
  0
  flatten
  2
  59
  match
  "\"'(eval (λ (x) (-> (match (app pair? x) ...) <-)) (env ((□? (x)))))\""
  #f)
'(shuffled-cache
  0
  flatten
  2
  25
  59
  app
  "\"'(eval\n  (match (app null? x) ((#f) (-> (app cons x (app nil)) <-)) _)\n  (env ((□? (x)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  flatten
  2
  59
  ref-or-constructor
  "\"'(eval (match car-v ((cons car-c car-d) (-> car-c <-))) (env ((□? (car-v)))))\""
  #f)
'(shuffled-cache
  0
  flatten
  2
  59
  app
  "\"'(eval\n  (match\n   (app pair? x)\n   (#f)\n   (_\n    (-> (app append (app flatten (app car x)) (app flatten (app cdr x))) <-)))\n  (env ((□? (x)))))\""
  #f)
'(shuffled-cache
  0
  flatten
  2
  25
  59
  app
  "\"'(eval (app cons 4 (-> (app cons 5 (app nil)) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  flatten
  2
  25
  59
  app
  "\"'(eval\n  (app\n   flatten\n   (->\n    (app\n     cons\n     (app cons 1 (app cons 2 (app nil)))\n     (app\n      cons\n      (app\n       cons\n       (app cons (app cons 3 (app cons 4 (app cons 5 (app nil)))) (app nil))\n       (app nil))\n      (app nil)))\n    <-))\n  (env ()))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  4
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  flatten
  2
  59
  app
  "\"'(eval (app append (-> (app cdr x) <-) y) (env ((□? (x y)))))\""
  #f)
'(shuffled-cache
  0
  flatten
  2
  59
  app
  "\"'(eval\n  (app cons (-> (app car x) <-) (app append (app cdr x) y))\n  (env ((□? (x y)))))\""
  #f)
'(shuffled-cache
  0
  flatten
  2
  25
  59
  app
  "\"'(eval\n  (app\n   cons\n   (->\n    (app\n     cons\n     (app cons (app cons 3 (app cons 4 (app cons 5 (app nil)))) (app nil))\n     (app nil))\n    <-)\n   (app nil))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  flatten
  2
  59
  ref-or-constructor
  "\"'(eval (match (-> null?-v <-) (nil) _) (env ((□? (null?-v)))))\""
  #f)
'(shuffled-cache
  0
  flatten
  2
  25
  59
  app
  "\"'(eval (app cons x (-> (app nil) <-)) (env ((□? (x)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  flatten
  2
  25
  59
  ref-or-constructor
  "\"'(eval (match (-> pair?-v <-) (cons pair?-c pair?-d) _) (env ((□? (pair?-v)))))\""
  131
  113
  12
  6
  109
  5
  114
  1
  65/68
  75
  #f
  217/113
  ((6 6 0) (6 6 0) (6 6 0)))
'(shuffled-cache
  0
  flatten
  2
  59
  ref-or-constructor
  "\"'(eval (match (-> cdr-v <-) (cons cdr-c cdr-d)) (env ((□? (cdr-v)))))\""
  #f)
'(shuffled-cache
  0
  flatten
  2
  25
  59
  ref-or-constructor
  "\"'(eval (app pair? (-> x <-)) (env ((□? (x)))))\""
  110
  96
  10
  4
  95
  4
  99
  1
  47/48
  63
  #f
  181/96
  ((5 5 0) (5 5 0) (5 5 0)))
'(shuffled-cache
  0
  flatten
  2
  25
  59
  app
  "\"'(eval (app cons 3 (-> (app cons 4 (app cons 5 (app nil))) <-)) (env ()))\""
  110
  96
  10
  4
  95
  4
  99
  1
  47/48
  63
  #t
  181/96
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  flatten
  2
  25
  59
  app
  "\"'(eval\n  (app cons (-> (app cons 3 (app cons 4 (app cons 5 (app nil)))) <-) (app nil))\n  (env ()))\""
  110
  96
  10
  4
  95
  4
  99
  1
  47/48
  63
  #t
  181/96
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  flatten
  2
  59
  app
  "\"'(eval\n  (letrec*\n   (car ... flatten)\n   (->\n    (app\n     flatten\n     (app\n      cons\n      (app cons 1 (app cons 2 (app nil)))\n      (app\n       cons\n       (app\n        cons\n        (app cons (app cons 3 (app cons 4 (app cons 5 (app nil)))) (app nil))\n        (app nil))\n       (app nil))))\n    <-))\n  (env ()))\""
  #f)
'(shuffled-cache
  0
  flatten
  2
  59
  match
  "\"'(eval (λ (x y) (-> (match (app null? x) ...) <-)) (env ((□? (x y)))))\""
  #f)
'(shuffled-cache
  0
  flatten
  2
  25
  59
  ref-or-constructor
  "\"'(eval (match (app null? x) (#f) (_ (-> x <-))) (env ((□? (x)))))\""
  110
  96
  10
  4
  95
  4
  99
  1
  47/48
  63
  #f
  181/96
  ((5 5 0) (5 5 0) (5 5 0)))
'(shuffled-cache
  0
  flatten
  2
  25
  59
  app
  "\"'(eval (app cons 5 (-> (app nil) <-)) (env ()))\""
  110
  96
  10
  4
  95
  4
  99
  1
  47/48
  63
  #t
  181/96
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  flatten
  2
  25
  59
  app
  "\"'(eval (match (-> (app null? x) <-) (#f) _) (env ((□? (x)))))\""
  144
  126
  13
  5
  124
  5
  129
  1
  28/29
  85
  #f
  115/63
  ((3/2 3/2 0) (3/2 3/2 0) (2 2 0)))
'(shuffled-cache
  0
  flatten
  2
  25
  59
  app
  "\"'(eval\n  (app\n   cons\n   (->\n    (app cons (app cons 3 (app cons 4 (app cons 5 (app nil)))) (app nil))\n    <-)\n   (app nil))\n  (env ()))\""
  144
  126
  13
  5
  124
  5
  129
  1
  28/29
  85
  #t
  115/63
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  flatten
  2
  25
  59
  app
  "\"'(eval\n  (app\n   cons\n   (app cons (app cons 3 (app cons 4 (app cons 5 (app nil)))) (app nil))\n   (-> (app nil) <-))\n  (env ()))\""
  144
  126
  13
  5
  124
  5
  129
  1
  28/29
  85
  #t
  115/63
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  flatten
  2
  25
  59
  app
  "\"'(eval\n  (match\n   (app null? x)\n   ((#f) (-> (app cons (app car x) (app append (app cdr x) y)) <-))\n   _)\n  (env ((□? (x y)))))\""
  146
  128
  13
  5
  124
  5
  129
  1
  14/15
  87
  #t
  29/16
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  flatten
  2
  59
  app
  "\"'(eval (match (-> (app null? x) <-) (#f) _) (env ((□? (x y)))))\""
  #f)
'(shuffled-cache
  0
  flatten
  2
  25
  59
  ref-or-constructor
  "\"'(eval (match (app null? x) (#f) (_ (-> y <-))) (env ((□? (x y)))))\""
  295
  266
  18
  11
  246
  7
  253
  1
  2357/2464
  163
  #f
  85/38
  ((41/2 41/2 0) (21 21 0) (21 21 0)))
'(shuffled-cache
  0
  flatten
  2
  59
  ref-or-constructor
  "\"'(eval (match (-> car-v <-) (cons car-c car-d)) (env ((□? (car-v)))))\""
  #f)
'(shuffled-cache
  0
  flatten
  2
  25
  59
  app
  "\"'(eval\n  (app\n   cons\n   (-> (app cons 1 (app cons 2 (app nil))) <-)\n   (app\n    cons\n    (app\n     cons\n     (app cons (app cons 3 (app cons 4 (app cons 5 (app nil)))) (app nil))\n     (app nil))\n    (app nil)))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  flatten
  2
  25
  59
  app
  "\"'(eval\n  (match pair?-v ((cons pair?-c pair?-d) (-> (app #t) <-)) _)\n  (env ((□? (pair?-v)))))\""
  5
  4
  0
  1
  2
  0
  2
  1
  1/2
  4
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  flatten
  2
  59
  ref-or-constructor
  "\"'(eval (match cdr-v ((cons cdr-c cdr-d) (-> cdr-d <-))) (env ((□? (cdr-v)))))\""
  #f)
'(shuffled-cache
  0
  flatten
  2
  25
  59
  app
  "\"'(eval (app cons 2 (-> (app nil) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  flatten
  2
  25
  59
  ref-or-constructor
  "\"'(eval (app cons (-> x <-) (app nil)) (env ((□? (x)))))\""
  110
  96
  10
  4
  95
  4
  99
  1
  47/48
  63
  #f
  181/96
  ((5 5 0) (5 5 0) (5 5 0)))
'(shuffled-cache
  0
  flatten
  2
  25
  59
  app
  "\"'(eval (match null?-v ((nil) (-> (app #t) <-)) _) (env ((□? (null?-v)))))\""
  113
  98
  10
  5
  95
  4
  99
  1
  47/50
  65
  #t
  183/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  flatten
  2
  25
  59
  ref-or-constructor
  "\"'(eval (app null? (-> x <-)) (env ((□? (x)))))\""
  114
  99
  10
  5
  95
  4
  99
  1
  47/51
  65
  #f
  65/33
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  flatten
  2
  25
  59
  ref-or-constructor
  "\"'(eval (app append (app cdr x) (-> y <-)) (env ((□? (x y)))))\""
  280
  252
  18
  10
  246
  7
  253
  1
  599/616
  158
  #f
  41/21
  ((17/2 17/2 0) (17/2 17/2 0) (9 9 0)))
'(shuffled-cache
  0
  flatten
  2
  25
  59
  ref-or-constructor
  "\"'(eval (app cdr (-> x <-)) (env ((□? (x)))))\""
  281
  253
  18
  10
  246
  7
  253
  1
  435/448
  158
  #f
  504/253
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  flatten
  2
  25
  59
  app
  "\"'(eval (app flatten (-> (app cdr x) <-)) (env ((□? (x)))))\""
  282
  254
  18
  10
  246
  7
  253
  1
  2389/2464
  158
  #f
  509/254
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  flatten
  2
  25
  59
  match
  "\"'(eval (λ (pair?-v) (-> (match pair?-v ...) <-)) (env ((□? (pair?-v)))))\""
  292
  263
  18
  11
  251
  7
  258
  1
  7069/7392
  165
  #f
  530/263
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  flatten
  2
  25
  59
  app
  "\"'(eval\n  (app append (app flatten (app car x)) (-> (app flatten (app cdr x)) <-))\n  (env ((□? (x)))))\""
  293
  264
  18
  11
  251
  7
  258
  1
  14117/14784
  165
  #f
  49/24
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  flatten
  2
  25
  59
  app
  "\"'(eval (match null?-v (nil) (_ (-> (app #f) <-))) (env ((□? (null?-v)))))\""
  295
  266
  18
  11
  251
  7
  258
  1
  14033/14784
  167
  #t
  541/266
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  flatten
  2
  25
  59
  match
  "\"'(eval\n  (match (app pair? x) ((#f) (-> (match (app null? x) ...) <-)) _)\n  (env ((□? (x)))))\""
  305
  276
  18
  11
  260
  7
  267
  1
  1096/1155
  176
  #f
  281/138
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  flatten
  2
  59
  ref-or-constructor
  "\"'(eval (app car (-> x <-)) (env ((□? (x y)))))\""
  #f)
'(shuffled-cache
  0
  flatten
  2
  25
  59
  app
  "\"'(eval\n  (app\n   cons\n   (app cons 1 (app cons 2 (app nil)))\n   (->\n    (app\n     cons\n     (app\n      cons\n      (app cons (app cons 3 (app cons 4 (app cons 5 (app nil)))) (app nil))\n      (app nil))\n     (app nil))\n    <-))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  flatten
  2
  25
  59
  app
  "\"'(eval\n  (app\n   cons\n   (app\n    cons\n    (app cons (app cons 3 (app cons 4 (app cons 5 (app nil)))) (app nil))\n    (app nil))\n   (-> (app nil) <-))\n  (env ()))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  4
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  flatten
  2
  25
  59
  app
  "\"'(eval\n  (match pair?-v (cons pair?-c pair?-d) (_ (-> (app #f) <-)))\n  (env ((□? (pair?-v)))))\""
  7
  6
  0
  1
  4
  0
  4
  1
  2/3
  6
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  flatten
  2
  25
  59
  ref-or-constructor
  "\"'(eval (app car (-> x <-)) (env ((□? (x)))))\""
  113
  98
  10
  5
  95
  4
  99
  1
  375/392
  65
  #f
  183/98
  ((5 5 0) (5 5 0) (5 5 0)))
'(shuffled-cache
  0
  flatten
  2
  59
  app
  "\"'(eval\n  (app append (-> (app flatten (app car x)) <-) (app flatten (app cdr x)))\n  (env ((□? (x)))))\""
  #f)
'(shuffled-cache
  0
  flatten
  2
  25
  59
  app
  "\"'(eval (app flatten (-> (app car x) <-)) (env ((□? (x)))))\""
  116
  101
  10
  5
  95
  4
  99
  1
  367/376
  58
  #f
  296/101
  ((14 14 0) (27/2 27/2 0) (27/2 27/2 0)))
'(shuffled-cache
  0
  flatten
  2
  25
  59
  app
  "\"'(eval (app cons 1 (-> (app cons 2 (app nil)) <-)) (env ()))\""
  116
  101
  10
  5
  95
  4
  99
  1
  367/376
  58
  #t
  296/101
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  flatten
  2
  59
  ref-or-constructor
  "\"'(eval (app cdr (-> x <-)) (env ((□? (x y)))))\""
  #f)
'(shuffled-cache
  1
  flatten
  2
  59
  app
  "\"'(eval\n  (letrec*\n   (car ... flatten)\n   (->\n    (app\n     flatten\n     (app\n      cons\n      (app cons 1 (app cons 2 (app nil)))\n      (app\n       cons\n       (app\n        cons\n        (app cons (app cons 3 (app cons 4 (app cons 5 (app nil)))) (app nil))\n        (app nil))\n       (app nil))))\n    <-))\n  (env ()))\""
  #f)
'(shuffled-cache
  1
  flatten
  2
  59
  letrec*
  "\"'(eval (lettypes cons ... nil (letrec* (car ... flatten) ...)) (env ()))\""
  #f)
'(shuffled-cache
  1
  flatten
  2
  59
  ref-or-constructor
  "\"'(eval (app car (-> x <-)) (env ((□? (x y)))))\""
  #f)
'(shuffled-cache
  1
  flatten
  2
  59
  lettypes
  "\"'(eval ((top) lettypes (cons ... nil) ...) (env ()))\""
  #f)
'(shuffled-cache
  1
  flatten
  2
  59
  ref-or-constructor
  "\"'(eval (match (-> null?-v <-) (nil) _) (env ((□? (null?-v)))))\""
  #f)
'(shuffled-cache
  1
  flatten
  2
  25
  59
  ref-or-constructor
  "\"'(eval (app pair? (-> x <-)) (env ((□? (x)))))\""
  110
  96
  10
  4
  95
  4
  99
  1
  47/48
  63
  #f
  181/96
  ((5 5 0) (5 5 0) (5 5 0)))
'(shuffled-cache
  1
  flatten
  2
  25
  59
  ref-or-constructor
  "\"'(eval (app cons (-> x <-) (app nil)) (env ((□? (x)))))\""
  111
  97
  10
  4
  95
  4
  99
  1
  47/49
  63
  #f
  193/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  flatten
  2
  25
  59
  app
  "\"'(eval (app cons x (-> (app nil) <-)) (env ((□? (x)))))\""
  119
  105
  10
  4
  102
  4
  106
  1
  16/17
  71
  #t
  67/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  flatten
  2
  59
  match
  "\"'(eval (λ (x) (-> (match (app pair? x) ...) <-)) (env ((□? (x)))))\""
  #f)
'(shuffled-cache
  1
  flatten
  2
  25
  59
  app
  "\"'(eval (app cons 2 (-> (app nil) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  flatten
  2
  25
  59
  app
  "\"'(eval\n  (app cons (-> (app cons 3 (app cons 4 (app cons 5 (app nil)))) <-) (app nil))\n  (env ()))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  4
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  flatten
  2
  59
  ref-or-constructor
  "\"'(eval (app null? (-> x <-)) (env ((□? (x y)))))\""
  #f)
'(shuffled-cache
  1
  flatten
  2
  25
  59
  ref-or-constructor
  "\"'(eval (app append (app cdr x) (-> y <-)) (env ((□? (x y)))))\""
  294
  265
  18
  11
  246
  7
  253
  1
  2357/2436
  163
  #f
  117/53
  ((20 20 0) (41/2 41/2 0) (21 21 0)))
'(shuffled-cache
  1
  flatten
  2
  25
  59
  ref-or-constructor
  "\"'(eval (match (app null? x) (#f) (_ (-> y <-))) (env ((□? (x y)))))\""
  295
  266
  18
  11
  246
  7
  253
  1
  2357/2464
  163
  #f
  85/38
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  flatten
  2
  25
  59
  app
  "\"'(eval\n  (app\n   cons\n   (->\n    (app cons (app cons 3 (app cons 4 (app cons 5 (app nil)))) (app nil))\n    <-)\n   (app nil))\n  (env ()))\""
  295
  266
  18
  11
  246
  7
  253
  1
  2357/2464
  163
  #t
  85/38
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  flatten
  2
  59
  match
  "\"'(eval (λ (cdr-v) (-> (match cdr-v ...) <-)) (env ((□? (cdr-v)))))\""
  #f)
'(shuffled-cache
  1
  flatten
  2
  25
  59
  ref-or-constructor
  "\"'(eval (app car (-> x <-)) (env ((□? (x)))))\""
  110
  96
  10
  4
  95
  4
  99
  1
  375/376
  63
  #f
  181/96
  ((5 5 0) (5 5 0) (11/2 11/2 0)))
'(shuffled-cache
  1
  flatten
  2
  25
  59
  app
  "\"'(eval (app flatten (-> (app cdr x) <-)) (env ((□? (x)))))\""
  111
  97
  10
  4
  95
  4
  99
  1
  187/188
  63
  #f
  186/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  flatten
  2
  25
  59
  app
  "\"'(eval (app flatten (-> (app car x) <-)) (env ((□? (x)))))\""
  112
  98
  10
  4
  95
  4
  99
  1
  373/376
  63
  #f
  96/49
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  flatten
  2
  25
  59
  app
  "\"'(eval (app cons 3 (-> (app cons 4 (app cons 5 (app nil))) <-)) (env ()))\""
  112
  98
  10
  4
  95
  4
  99
  1
  373/376
  63
  #t
  96/49
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  flatten
  2
  25
  59
  app
  "\"'(eval\n  (match pair?-v ((cons pair?-c pair?-d) (-> (app #t) <-)) _)\n  (env ((□? (pair?-v)))))\""
  115
  100
  10
  5
  95
  4
  99
  1
  373/392
  65
  #t
  97/50
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  flatten
  2
  25
  59
  app
  "\"'(eval\n  (match pair?-v (cons pair?-c pair?-d) (_ (-> (app #f) <-)))\n  (env ((□? (pair?-v)))))\""
  117
  102
  10
  5
  95
  4
  99
  1
  373/408
  67
  #t
  98/51
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  flatten
  2
  25
  59
  app
  "\"'(eval\n  (app\n   cons\n   (app\n    cons\n    (app cons (app cons 3 (app cons 4 (app cons 5 (app nil)))) (app nil))\n    (app nil))\n   (-> (app nil) <-))\n  (env ()))\""
  117
  102
  10
  5
  95
  4
  99
  1
  373/408
  67
  #t
  98/51
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  flatten
  2
  59
  app
  "\"'(eval\n  (match\n   (app pair? x)\n   (#f)\n   (_\n    (-> (app append (app flatten (app car x)) (app flatten (app cdr x))) <-)))\n  (env ((□? (x)))))\""
  #f)
'(shuffled-cache
  1
  flatten
  2
  25
  59
  app
  "\"'(eval (match (-> (app null? x) <-) (#f) _) (env ((□? (x)))))\""
  156
  137
  13
  6
  128
  5
  133
  1
  217/228
  91
  #f
  279/137
  ((14 14 0) (14 14 0) (14 14 0)))
'(shuffled-cache
  1
  flatten
  2
  25
  59
  app
  "\"'(eval\n  (match (app null? x) ((#f) (-> (app cons x (app nil)) <-)) _)\n  (env ((□? (x)))))\""
  164
  145
  13
  6
  135
  5
  140
  1
  221/236
  99
  #t
  293/145
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  flatten
  2
  25
  59
  ref-or-constructor
  "\"'(eval (app cdr (-> x <-)) (env ((□? (x)))))\""
  165
  146
  13
  6
  135
  5
  140
  1
  441/472
  99
  #f
  305/146
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  flatten
  2
  25
  59
  ref-or-constructor
  "\"'(eval (app null? (-> x <-)) (env ((□? (x)))))\""
  165
  146
  13
  6
  135
  5
  140
  1
  441/472
  99
  #f
  305/146
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  flatten
  2
  59
  ref-or-constructor
  "\"'(eval (match (-> car-v <-) (cons car-c car-d)) (env ((□? (car-v)))))\""
  #f)
'(shuffled-cache
  1
  flatten
  2
  59
  app
  "\"'(eval\n  (app append (app flatten (app car x)) (-> (app flatten (app cdr x)) <-))\n  (env ((□? (x)))))\""
  #f)
'(shuffled-cache
  1
  flatten
  2
  59
  app
  "\"'(eval (app append (-> (app cdr x) <-) y) (env ((□? (x y)))))\""
  #f)
'(shuffled-cache
  1
  flatten
  2
  59
  app
  "\"'(eval (match (-> (app null? x) <-) (#f) _) (env ((□? (x y)))))\""
  #f)
'(shuffled-cache
  1
  flatten
  2
  25
  59
  app
  "\"'(eval (app cons 1 (-> (app cons 2 (app nil)) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  flatten
  2
  25
  59
  app
  "\"'(eval (app cons 5 (-> (app nil) <-)) (env ()))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  4
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  flatten
  2
  25
  59
  app
  "\"'(eval\n  (app\n   flatten\n   (->\n    (app\n     cons\n     (app cons 1 (app cons 2 (app nil)))\n     (app\n      cons\n      (app\n       cons\n       (app cons (app cons 3 (app cons 4 (app cons 5 (app nil)))) (app nil))\n       (app nil))\n      (app nil)))\n    <-))\n  (env ()))\""
  6
  6
  0
  0
  6
  0
  6
  1
  1
  6
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  flatten
  2
  25
  59
  match
  "\"'(eval (λ (pair?-v) (-> (match pair?-v ...) <-)) (env ((□? (pair?-v)))))\""
  145
  127
  12
  6
  117
  5
  122
  1
  2047/2160
  84
  #f
  276/127
  ((21/2 21/2 0) (21/2 21/2 0) (21/2 21/2 0)))
'(shuffled-cache
  1
  flatten
  2
  25
  59
  app
  "\"'(eval\n  (app cons (app cons 3 (app cons 4 (app cons 5 (app nil)))) (-> (app nil) <-))\n  (env ()))\""
  145
  127
  12
  6
  117
  5
  122
  1
  2047/2160
  84
  #t
  276/127
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  flatten
  2
  25
  59
  app
  "\"'(eval\n  (app\n   cons\n   (app cons 1 (app cons 2 (app nil)))\n   (->\n    (app\n     cons\n     (app\n      cons\n      (app cons (app cons 3 (app cons 4 (app cons 5 (app nil)))) (app nil))\n      (app nil))\n     (app nil))\n    <-))\n  (env ()))\""
  145
  127
  12
  6
  117
  5
  122
  1
  2047/2160
  84
  #t
  276/127
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  flatten
  2
  25
  59
  match
  "\"'(eval\n  (match (app pair? x) ((#f) (-> (match (app null? x) ...) <-)) _)\n  (env ((□? (x)))))\""
  203
  181
  15
  7
  170
  6
  176
  1
  151/160
  125
  #f
  365/181
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  flatten
  2
  25
  59
  app
  "\"'(eval (app cons 4 (-> (app cons 5 (app nil)) <-)) (env ()))\""
  203
  181
  15
  7
  170
  6
  176
  1
  151/160
  125
  #t
  365/181
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  flatten
  2
  59
  match
  "\"'(eval (λ (x y) (-> (match (app null? x) ...) <-)) (env ((□? (x y)))))\""
  #f)
'(shuffled-cache
  1
  flatten
  2
  25
  59
  app
  "\"'(eval\n  (match\n   (app null? x)\n   ((#f) (-> (app cons (app car x) (app append (app cdr x) y)) <-))\n   _)\n  (env ((□? (x y)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  flatten
  2
  25
  59
  app
  "\"'(eval (match null?-v (nil) (_ (-> (app #f) <-))) (env ((□? (null?-v)))))\""
  6
  4
  0
  2
  0
  0
  0
  1
  0
  4
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  flatten
  2
  25
  59
  app
  "\"'(eval (match null?-v ((nil) (-> (app #t) <-)) _) (env ((□? (null?-v)))))\""
  8
  6
  0
  2
  0
  0
  0
  1
  0
  6
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  flatten
  2
  59
  ref-or-constructor
  "\"'(eval (match car-v ((cons car-c car-d) (-> car-c <-))) (env ((□? (car-v)))))\""
  #f)
'(shuffled-cache
  1
  flatten
  2
  59
  app
  "\"'(eval\n  (app cons (app car x) (-> (app append (app cdr x) y) <-))\n  (env ((□? (x y)))))\""
  #f)
'(shuffled-cache
  1
  flatten
  2
  25
  59
  app
  "\"'(eval\n  (app\n   cons\n   (->\n    (app\n     cons\n     (app cons (app cons 3 (app cons 4 (app cons 5 (app nil)))) (app nil))\n     (app nil))\n    <-)\n   (app nil))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  flatten
  2
  59
  app
  "\"'(eval\n  (app cons (-> (app car x) <-) (app append (app cdr x) y))\n  (env ((□? (x y)))))\""
  #f)
'(shuffled-cache
  1
  flatten
  2
  25
  59
  ref-or-constructor
  "\"'(eval (match (app null? x) (#f) (_ (-> x <-))) (env ((□? (x)))))\""
  110
  96
  10
  4
  95
  4
  99
  1
  47/48
  63
  #f
  181/96
  ((5 5 0) (5 5 0) (5 5 0)))
'(shuffled-cache
  1
  flatten
  2
  59
  app
  "\"'(eval\n  (app append (-> (app flatten (app car x)) <-) (app flatten (app cdr x)))\n  (env ((□? (x)))))\""
  #f)
'(shuffled-cache
  1
  flatten
  2
  25
  59
  app
  "\"'(eval\n  (app\n   cons\n   (-> (app cons 1 (app cons 2 (app nil))) <-)\n   (app\n    cons\n    (app\n     cons\n     (app cons (app cons 3 (app cons 4 (app cons 5 (app nil)))) (app nil))\n     (app nil))\n    (app nil)))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  flatten
  2
  59
  match
  "\"'(eval (λ (null?-v) (-> (match null?-v ...) <-)) (env ((□? (null?-v)))))\""
  #f)
'(shuffled-cache
  1
  flatten
  2
  59
  ref-or-constructor
  "\"'(eval (match cdr-v ((cons cdr-c cdr-d) (-> cdr-d <-))) (env ((□? (cdr-v)))))\""
  #f)
'(shuffled-cache
  1
  flatten
  2
  59
  ref-or-constructor
  "\"'(eval (match (-> cdr-v <-) (cons cdr-c cdr-d)) (env ((□? (cdr-v)))))\""
  #f)
'(shuffled-cache
  1
  flatten
  2
  59
  match
  "\"'(eval (λ (car-v) (-> (match car-v ...) <-)) (env ((□? (car-v)))))\""
  #f)
'(shuffled-cache
  1
  flatten
  2
  25
  59
  app
  "\"'(eval (match (-> (app pair? x) <-) (#f) _) (env ((□? (x)))))\""
  155
  137
  12
  6
  128
  5
  133
  1
  217/228
  91
  #f
  279/137
  ((12 12 0) (12 12 0) (12 12 0)))
'(shuffled-cache
  1
  flatten
  2
  25
  59
  ref-or-constructor
  "\"'(eval (match (-> pair?-v <-) (cons pair?-c pair?-d) _) (env ((□? (pair?-v)))))\""
  157
  138
  12
  7
  128
  5
  133
  1
  541/570
  91
  #f
  97/46
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  flatten
  2
  25
  59
  app
  "\"'(eval\n  (app\n   cons\n   (app cons (app cons 3 (app cons 4 (app cons 5 (app nil)))) (app nil))\n   (-> (app nil) <-))\n  (env ()))\""
  157
  138
  12
  7
  128
  5
  133
  1
  541/570
  91
  #t
  97/46
  ((0 0 0) (0 0 0) (0 0 0)))
