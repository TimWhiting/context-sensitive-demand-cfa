'(expression:
  (let ((ack
         (λ (m n)
           (match
            (app = m 0)
            (#t (app + n 1))
            (#f
             (match
              (app = n 0)
              (#t (app ack (app - m 1) 1))
              (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
    (app ack 3 12)))
(list 'query: '(top) (envenv '()))
(list
 'query:
 '(let ((->
         ack
         =
         (λ (m n)
           (match
            (app = m 0)
            (#t (app + n 1))
            (#f
             (match
              (app = n 0)
              (#t (app ack (app - m 1) 1))
              (#f (app ack (app - m 1) (app ack m (app - n 1))))))))
         <-))
    bod)
 (envenv '()))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (m n)
    (->
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
     <-))
 (envenv '((□? (m n)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   (#t (app + n 1))
   (->
    #f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))
    <-))
 (envenv '((□? (m n)))))
(list
 'query:
 '(match
   (app = n 0)
   (#t (app ack (app - m 1) 1))
   (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))
 (envenv '((□? (m n)))))
(list
 'query:
 '(app ack (app - m 1) (-> (app ack m (app - n 1)) <-))
 (envenv '((□? (m n)))))
(list 'query: '(app ack m (-> (app - n 1) <-)) (envenv '((□? (m n)))))
(list 'query: '(app - n (-> 1 <-)) (envenv '((□? (m n)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list 'query: '(app - (-> n <-) 1) (envenv '((□? (m n)))))
(list 'query: '(app (-> - <-) n 1) (envenv '((□? (m n)))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app ack (-> m <-) (app - n 1)) (envenv '((□? (m n)))))
(list 'query: '(app (-> ack <-) m (app - n 1)) (envenv '((□? (m n)))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app ack (-> (app - m 1) <-) (app ack m (app - n 1)))
 (envenv '((□? (m n)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list 'query: '(app - m (-> 1 <-)) (envenv '((□? (m n)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list 'query: '(app - (-> m <-) 1) (envenv '((□? (m n)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list 'query: '(app (-> - <-) m 1) (envenv '((□? (m n)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
 (envenv '((□? (m n)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = n 0)
   (-> #t (app ack (app - m 1) 1) <-)
   (#f (app ack (app - m 1) (app ack m (app - n 1)))))
 (envenv '((□? (m n)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list 'query: '(app ack (app - m 1) (-> 1 <-)) (envenv '((□? (m n)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list 'query: '(app ack (-> (app - m 1) <-) 1) (envenv '((□? (m n)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list 'query: '(app - m (-> 1 <-)) (envenv '((□? (m n)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list 'query: '(app - (-> m <-) 1) (envenv '((□? (m n)))))
(list 'query: '(app (-> - <-) m 1) (envenv '((□? (m n)))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app (-> ack <-) (app - m 1) 1) (envenv '((□? (m n)))))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = n 0) <-)
   (#t (app ack (app - m 1) 1))
   (#f (app ack (app - m 1) (app ack m (app - n 1)))))
 (envenv '((□? (m n)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list 'query: '(app = n (-> 0 <-)) (envenv '((□? (m n)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list 'query: '(app = (-> n <-) 0) (envenv '((□? (m n)))))
(list 'query: '(app (-> = <-) n 0) (envenv '((□? (m n)))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app = m 0)
   (-> #t (app + n 1) <-)
   (#f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
 (envenv '((□? (m n)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list 'query: '(app + n (-> 1 <-)) (envenv '((□? (m n)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list 'query: '(app + (-> n <-) 1) (envenv '((□? (m n)))))
(list 'query: '(app (-> + <-) n 1) (envenv '((□? (m n)))))
'(clos/con: (#<procedure:do-add>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app = m 0) <-)
   (#t (app + n 1))
   (#f
    (match
     (app = n 0)
     (#t (app ack (app - m 1) 1))
     (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
 (envenv '((□? (m n)))))
(list 'query: '(app = m (-> 0 <-)) (envenv '((□? (m n)))))
'(clos/con: ⊥)
'(literals: (0 ⊥ ⊥ ⊥))
(list 'query: '(app = (-> m <-) 0) (envenv '((□? (m n)))))
'(clos/con:
  (#f
   #t
   #t
   #f
   #t
   #f
   #f
   #f
   #f
   #t
   #f
   #t
   #t
   #f
   #t
   #t
   #f
   #t
   #f
   #t
   #f
   #f
   #t
   #f
   #f
   #t
   #t
   #t
   #f
   #f
   #t
   #f
   #t
   #t))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app (-> = <-) m 0) (envenv '((□? (m n)))))
'(clos/con: (#<procedure:do-equal>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(let (ack) (-> (app ack 3 12) <-)) (envenv '()))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
'(clos/con:
  (#t
   #f
   #t
   #t
   #f
   #t
   #f
   #t
   #t
   #f
   #f
   #f
   #f
   #f
   #f
   #f
   #t
   #t
   #t
   #t
   #t
   #t
   #f
   #f
   #t
   #f
   #t
   #f
   #f
   #t
   #t
   #f
   #t
   #f))
'(literals: (⊥ ⊥ ⊥ ⊥))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list 'query: '(app ack 3 (-> 12 <-)) (envenv '()))
'(clos/con: ⊥)
'(literals: (12 ⊥ ⊥ ⊥))
(list 'query: '(app ack (-> 3 <-) 12) (envenv '()))
'(clos/con: ⊥)
'(literals: (3 ⊥ ⊥ ⊥))
(list 'query: '(app (-> ack <-) 3 12) (envenv '()))
'(clos/con:
  ((λ (m n)
     (match
      (app = m 0)
      (#t (app + n 1))
      (#f
       (match
        (app = n 0)
        (#t (app ack (app - m 1) 1))
        (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
