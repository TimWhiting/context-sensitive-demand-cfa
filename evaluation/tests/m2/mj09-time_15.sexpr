'(clean-cache
  mj09
  2
  15
  21
  let
  "\"'(eval ((top) let (h) ...) (env ()))\""
  41
  26
  10
  5
  26
  10
  36
  1
  1
  26
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  2
  15
  21
  let
  "\"'(eval (λ (b) (-> (let (g) ...) <-)) (env ((□? (b)))))\""
  123
  86
  20
  17
  48
  17
  65
  1
  10351/15750
  71
  #f
  51/43
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  mj09
  2
  15
  21
  ref-or-constructor
  "\"'(eval (λ (z) (-> z <-)) (env ((□? (z)) (□? (b)))))\""
  101
  66
  20
  15
  36
  17
  53
  1
  421/630
  55
  #f
  37/33
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  mj09
  2
  15
  21
  let
  "\"'(eval (let (g) (-> (let (f) ...) <-)) (env ((□? (b)))))\""
  120
  83
  20
  17
  46
  17
  63
  1
  9931/15120
  69
  #f
  98/83
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  mj09
  2
  15
  21
  match
  "\"'(eval (λ (k) (-> (match b ...) <-)) (env ((□? (k)) (□? (b)))))\""
  77
  53
  14
  10
  26
  13
  39
  1
  47/72
  45
  #f
  54/53
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  mj09
  2
  15
  21
  app
  "\"'(eval (match b (#f) (_ (-> (app k 1) <-))) (env ((□? (k)) (□? (b)))))\""
  19
  9
  5
  5
  0
  0
  0
  1
  0
  9
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  2
  15
  21
  ref-or-constructor
  "\"'(eval (app (-> k <-) 1) (env ((□? (k)) (□? (b)))))\""
  6
  2
  2
  2
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  2
  15
  21
  app
  "\"'(eval (match b ((#f) (-> (app k 2) <-)) _) (env ((□? (k)) (□? (b)))))\""
  19
  9
  5
  5
  0
  0
  0
  1
  0
  9
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  2
  15
  21
  ref-or-constructor
  "\"'(eval (app (-> k <-) 2) (env ((□? (k)) (□? (b)))))\""
  6
  2
  2
  2
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  2
  15
  21
  ref-or-constructor
  "\"'(eval (match (-> b <-) (#f) _) (env ((□? (k)) (□? (b)))))\""
  10
  5
  3
  2
  4
  3
  7
  1
  4/5
  4
  #f
  6/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  2
  15
  21
  let
  "\"'(eval (let (f) (-> (let (y) ...) <-)) (env ((□? (b)))))\""
  117
  80
  20
  17
  44
  17
  61
  1
  9511/14490
  67
  #f
  47/40
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  mj09
  2
  15
  21
  app
  "\"'(eval\n  (let (... () (y (-> (app f (λ (x) ...)) <-)) () ...) ...)\n  (env ((□? (b)))))\""
  85
  60
  14
  11
  32
  13
  45
  1
  7159/10710
  51
  #f
  11/10
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  mj09
  2
  15
  21
  ref-or-constructor
  "\"'(eval (λ (x) (-> x <-)) (env ((□? (x)) (□? (b)))))\""
  12
  5
  3
  4
  0
  0
  0
  1
  0
  4
  #f
  6/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  2
  15
  21
  app
  "\"'(eval (let (y) (-> (app g y) <-)) (env ((□? (b)))))\""
  114
  77
  20
  17
  42
  17
  59
  1
  9091/13860
  65
  #f
  90/77
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  mj09
  2
  15
  21
  ref-or-constructor
  "\"'(eval (app g (-> y <-)) (env ((□? (b)))))\""
  88
  63
  14
  11
  34
  13
  47
  1
  7579/11340
  53
  #f
  10/9
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  mj09
  2
  15
  21
  let
  "\"'(eval (let (h) (-> (let (x ... y) ...) <-)) (env ()))\""
  40
  25
  10
  5
  25
  10
  35
  1
  1
  25
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  2
  15
  21
  app
  "\"'(eval (let (... x (y (-> (app h (app #f)) <-)) () ...) ...) (env ()))\""
  38
  23
  10
  5
  23
  10
  33
  1
  1
  23
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  2
  15
  21
  app
  "\"'(eval (app h (-> (app #f) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  2
  15
  21
  app
  "\"'(eval (let (... () (x (-> (app h (app #t)) <-)) y ...) ...) (env ()))\""
  38
  23
  10
  5
  23
  10
  33
  1
  1
  23
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  2
  15
  21
  app
  "\"'(eval (app h (-> (app #t) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  2
  15
  21
  ref-or-constructor
  "\"'(eval (let (x ... y) (-> y <-)) (env ()))\""
  39
  24
  10
  5
  24
  10
  34
  1
  1
  24
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  15
  21
  app
  "\"'(eval\n  (let (... () (y (-> (app f (λ (x) ...)) <-)) () ...) ...)\n  (env ((□? (b)))))\""
  85
  60
  14
  11
  32
  13
  45
  1
  7159/10710
  51
  #f
  11/10
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  mj09
  2
  15
  21
  let
  "\"'(eval (let (g) (-> (let (f) ...) <-)) (env ((□? (b)))))\""
  106
  75
  18
  13
  46
  17
  63
  1
  11359/15120
  65
  #f
  82/75
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  15
  21
  ref-or-constructor
  "\"'(eval (λ (x) (-> x <-)) (env ((□? (x)) (□? (b)))))\""
  111
  76
  19
  16
  46
  17
  63
  1
  11233/15120
  65
  #f
  21/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  15
  21
  ref-or-constructor
  "\"'(eval (let (x ... y) (-> y <-)) (env ()))\""
  118
  82
  19
  17
  52
  17
  69
  1
  7349/9135
  71
  #t
  45/41
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  15
  21
  let
  "\"'(eval (let (h) (-> (let (x ... y) ...) <-)) (env ()))\""
  119
  83
  19
  17
  53
  17
  70
  1
  3832/4725
  72
  #t
  91/83
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  15
  21
  ref-or-constructor
  "\"'(eval (λ (z) (-> z <-)) (env ((□? (z)) (□? (b)))))\""
  124
  84
  20
  20
  53
  17
  70
  1
  7559/9450
  72
  #f
  31/28
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  15
  21
  let
  "\"'(eval (λ (b) (-> (let (g) ...) <-)) (env ((□? (b)))))\""
  126
  86
  20
  20
  54
  17
  71
  1
  3727/4725
  73
  #f
  48/43
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  15
  21
  ref-or-constructor
  "\"'(eval (match (-> b <-) (#f) _) (env ((□? (k)) (□? (b)))))\""
  128
  87
  20
  21
  54
  17
  71
  1
  4253/5400
  73
  #f
  98/87
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  15
  21
  ref-or-constructor
  "\"'(eval (app (-> k <-) 1) (env ((□? (k)) (□? (b)))))\""
  129
  88
  20
  21
  54
  17
  71
  1
  4243/5400
  74
  #t
  25/22
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  15
  21
  ref-or-constructor
  "\"'(eval (app g (-> y <-)) (env ((□? (b)))))\""
  130
  89
  20
  21
  54
  17
  71
  1
  4183/5400
  74
  #f
  102/89
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  15
  21
  ref-or-constructor
  "\"'(eval (app (-> k <-) 2) (env ((□? (k)) (□? (b)))))\""
  131
  90
  20
  21
  54
  17
  71
  1
  167/216
  75
  #t
  52/45
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  15
  21
  app
  "\"'(eval (let (... x (y (-> (app h (app #f)) <-)) () ...) ...) (env ()))\""
  131
  90
  20
  21
  54
  17
  71
  1
  167/216
  75
  #t
  52/45
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  15
  21
  app
  "\"'(eval (app h (-> (app #f) <-)) (env ()))\""
  131
  90
  20
  21
  54
  17
  71
  1
  167/216
  75
  #t
  52/45
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  15
  21
  app
  "\"'(eval (match b ((#f) (-> (app k 2) <-)) _) (env ((□? (k)) (□? (b)))))\""
  138
  95
  20
  23
  54
  17
  71
  1
  28811/37800
  80
  #t
  109/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  15
  21
  app
  "\"'(eval (let (... () (x (-> (app h (app #t)) <-)) y ...) ...) (env ()))\""
  141
  98
  20
  23
  57
  17
  74
  1
  31541/40320
  83
  #t
  8/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  15
  21
  app
  "\"'(eval (app h (-> (app #t) <-)) (env ()))\""
  141
  98
  20
  23
  57
  17
  74
  1
  31541/40320
  83
  #t
  8/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  15
  21
  let
  "\"'(eval ((top) let (h) ...) (env ()))\""
  142
  99
  20
  23
  58
  17
  75
  1
  32801/41580
  84
  #t
  113/99
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  15
  21
  let
  "\"'(eval (let (f) (-> (let (y) ...) <-)) (env ((□? (b)))))\""
  143
  100
  20
  23
  58
  17
  75
  1
  32381/41580
  84
  #f
  23/20
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  15
  21
  app
  "\"'(eval (match b (#f) (_ (-> (app k 1) <-))) (env ((□? (k)) (□? (b)))))\""
  150
  105
  20
  25
  58
  17
  75
  1
  50407/65340
  89
  #t
  8/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  15
  21
  match
  "\"'(eval (λ (k) (-> (match b ...) <-)) (env ((□? (k)) (□? (b)))))\""
  155
  110
  20
  25
  58
  17
  75
  1
  87643/114345
  93
  #f
  63/55
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  15
  21
  app
  "\"'(eval (let (y) (-> (app g y) <-)) (env ((□? (b)))))\""
  156
  111
  20
  25
  58
  17
  75
  1
  86488/114345
  93
  #f
  128/111
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  15
  21
  ref-or-constructor
  "\"'(eval (app (-> k <-) 2) (env ((□? (k)) (□? (b)))))\""
  6
  2
  2
  2
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  15
  21
  ref-or-constructor
  "\"'(eval (λ (z) (-> z <-)) (env ((□? (z)) (□? (b)))))\""
  108
  69
  22
  17
  36
  17
  53
  1
  7579/11970
  58
  #f
  88/69
  ((4 4 0) (4 4 0) (4 4 0)))
'(shuffled-cache
  1
  mj09
  2
  15
  21
  app
  "\"'(eval (let (y) (-> (app g y) <-)) (env ((□? (b)))))\""
  117
  76
  22
  19
  42
  17
  59
  1
  9259/13860
  64
  #f
  24/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  15
  21
  app
  "\"'(eval (app h (-> (app #t) <-)) (env ()))\""
  117
  76
  22
  19
  42
  17
  59
  1
  9259/13860
  64
  #t
  24/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  15
  21
  app
  "\"'(eval (match b (#f) (_ (-> (app k 1) <-))) (env ((□? (k)) (□? (b)))))\""
  125
  82
  22
  21
  42
  17
  59
  1
  49759/76230
  70
  #t
  52/41
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  mj09
  2
  15
  21
  ref-or-constructor
  "\"'(eval (λ (x) (-> x <-)) (env ((□? (x)) (□? (b)))))\""
  129
  83
  22
  24
  42
  17
  59
  1
  99133/152460
  70
  #f
  106/83
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  15
  21
  let
  "\"'(eval ((top) let (h) ...) (env ()))\""
  140
  93
  22
  25
  52
  17
  69
  1
  82484/107415
  80
  #t
  116/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  15
  21
  ref-or-constructor
  "\"'(eval (app (-> k <-) 1) (env ((□? (k)) (□? (b)))))\""
  141
  94
  22
  25
  52
  17
  69
  1
  7489/9765
  81
  #t
  119/94
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  15
  21
  ref-or-constructor
  "\"'(eval (app g (-> y <-)) (env ((□? (b)))))\""
  141
  94
  22
  25
  52
  17
  69
  1
  7489/9765
  81
  #f
  119/94
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  15
  21
  ref-or-constructor
  "\"'(eval (let (x ... y) (-> y <-)) (env ()))\""
  141
  94
  22
  25
  52
  17
  69
  1
  7489/9765
  81
  #t
  119/94
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  15
  21
  app
  "\"'(eval (app h (-> (app #f) <-)) (env ()))\""
  141
  94
  22
  25
  52
  17
  69
  1
  7489/9765
  81
  #t
  119/94
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  15
  21
  app
  "\"'(eval (let (... x (y (-> (app h (app #f)) <-)) () ...) ...) (env ()))\""
  141
  94
  22
  25
  52
  17
  69
  1
  7489/9765
  81
  #t
  119/94
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  15
  21
  let
  "\"'(eval (let (h) (-> (let (x ... y) ...) <-)) (env ()))\""
  141
  94
  22
  25
  52
  17
  69
  1
  7489/9765
  81
  #t
  119/94
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  15
  21
  app
  "\"'(eval (let (... () (x (-> (app h (app #t)) <-)) y ...) ...) (env ()))\""
  147
  100
  22
  25
  58
  17
  75
  1
  16343/20790
  87
  #t
  5/4
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  15
  21
  app
  "\"'(eval (match b ((#f) (-> (app k 2) <-)) _) (env ((□? (k)) (□? (b)))))\""
  155
  106
  22
  27
  58
  17
  75
  1
  29702/38115
  93
  #t
  133/106
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  mj09
  2
  15
  21
  let
  "\"'(eval (let (g) (-> (let (f) ...) <-)) (env ((□? (b)))))\""
  156
  107
  22
  27
  58
  17
  75
  1
  29317/38115
  93
  #f
  135/107
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  15
  21
  match
  "\"'(eval (λ (k) (-> (match b ...) <-)) (env ((□? (k)) (□? (b)))))\""
  161
  112
  22
  27
  58
  17
  75
  1
  17467/22869
  97
  #f
  141/112
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  15
  21
  let
  "\"'(eval (let (f) (-> (let (y) ...) <-)) (env ((□? (b)))))\""
  162
  113
  22
  27
  58
  17
  75
  1
  17236/22869
  97
  #f
  143/113
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  15
  21
  ref-or-constructor
  "\"'(eval (match (-> b <-) (#f) _) (env ((□? (k)) (□? (b)))))\""
  163
  114
  22
  27
  58
  17
  75
  1
  3189/4235
  97
  #f
  145/114
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  15
  21
  app
  "\"'(eval\n  (let (... () (y (-> (app f (λ (x) ...)) <-)) () ...) ...)\n  (env ((□? (b)))))\""
  163
  114
  22
  27
  58
  17
  75
  1
  3189/4235
  97
  #f
  145/114
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  15
  21
  let
  "\"'(eval (λ (b) (-> (let (g) ...) <-)) (env ((□? (b)))))\""
  164
  115
  22
  27
  58
  17
  75
  1
  28316/38115
  97
  #f
  147/115
  ((0 0 0) (0 0 0) (0 0 0)))
