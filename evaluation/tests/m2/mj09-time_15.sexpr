'(clean-cache
  mj09
  2
  15
  21
  let
  "\"'(eval ((top) let (h) ...) (env ()))\""
  41
  26
  10
  5
  26
  10
  36
  1
  1
  11
  #f
  115/26
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  mj09
  2
  15
  21
  let
  "\"'(eval (λ (b) (-> (let (g) ...) <-)) (env ((□? (b)))))\""
  137
  98
  20
  19
  60
  17
  77
  1
  2179/3150
  39
  #f
  223/49
  ((9 19/2 0) (19/2 19/2 0) (10 10 0)))
'(clean-cache
  mj09
  2
  15
  21
  ref-or-constructor
  "\"'(eval (λ (z) (-> z <-)) (env ((□? (z)) (□? (b)))))\""
  115
  78
  20
  17
  48
  17
  65
  1
  8543/11970
  33
  #f
  178/39
  ((19/2 19/2 0) (9 9 0) (17/2 17/2 0)))
'(clean-cache
  mj09
  2
  15
  21
  let
  "\"'(eval (let (g) (-> (let (f) ...) <-)) (env ((□? (b)))))\""
  134
  95
  20
  19
  58
  17
  75
  1
  2095/3024
  39
  #f
  434/95
  ((19/2 19/2 0) (19/2 19/2 0) (9 9 0)))
'(clean-cache
  mj09
  2
  15
  21
  match
  "\"'(eval (λ (k) (-> (match b ...) <-)) (env ((□? (k)) (□? (b)))))\""
  77
  53
  14
  10
  26
  13
  39
  1
  47/72
  25
  #f
  244/53
  ((11/2 11/2 0) (11/2 11/2 0) (11/2 6 0)))
'(clean-cache
  mj09
  2
  15
  21
  app
  "\"'(eval (match b (#f) (_ (-> (app k 1) <-))) (env ((□? (k)) (□? (b)))))\""
  19
  9
  5
  5
  0
  0
  0
  1
  0
  5
  #f
  41/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  mj09
  2
  15
  21
  ref-or-constructor
  "\"'(eval (app (-> k <-) 1) (env ((□? (k)) (□? (b)))))\""
  6
  2
  2
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  2
  15
  21
  app
  "\"'(eval (match b ((#f) (-> (app k 2) <-)) _) (env ((□? (k)) (□? (b)))))\""
  19
  9
  5
  5
  0
  0
  0
  1
  0
  5
  #f
  41/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  mj09
  2
  15
  21
  ref-or-constructor
  "\"'(eval (app (-> k <-) 2) (env ((□? (k)) (□? (b)))))\""
  6
  2
  2
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  2
  15
  21
  ref-or-constructor
  "\"'(eval (match (-> b <-) (#f) _) (env ((□? (k)) (□? (b)))))\""
  10
  5
  3
  2
  4
  3
  7
  1
  4/5
  4
  #f
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  2
  15
  21
  let
  "\"'(eval (let (f) (-> (let (y) ...) <-)) (env ((□? (b)))))\""
  131
  92
  20
  19
  56
  17
  73
  1
  2011/2898
  39
  #f
  211/46
  ((17/2 17/2 0) (9 9 0) (17/2 17/2 0)))
'(clean-cache
  mj09
  2
  15
  21
  app
  "\"'(eval\n  (let (... () (y (-> (app f (λ (x) ...)) <-)) () ...) ...)\n  (env ((□? (b)))))\""
  85
  60
  14
  11
  32
  13
  45
  1
  7159/10710
  29
  #f
  14/3
  ((7 7 0) (13/2 7 0) (13/2 13/2 0)))
'(clean-cache
  mj09
  2
  15
  21
  ref-or-constructor
  "\"'(eval (λ (x) (-> x <-)) (env ((□? (x)) (□? (b)))))\""
  12
  5
  3
  4
  0
  0
  0
  1
  0
  2
  #f
  22/5
  ((0 1/2 0) (0 1/2 0) (0 1/2 0)))
'(clean-cache
  mj09
  2
  15
  21
  app
  "\"'(eval (let (y) (-> (app g y) <-)) (env ((□? (b)))))\""
  128
  89
  20
  19
  54
  17
  71
  1
  1927/2772
  39
  #f
  410/89
  ((8 17/2 0) (8 17/2 0) (17/2 9 0)))
'(clean-cache
  mj09
  2
  15
  21
  ref-or-constructor
  "\"'(eval (app g (-> y <-)) (env ((□? (b)))))\""
  88
  63
  14
  11
  34
  13
  47
  1
  7579/11340
  29
  #f
  292/63
  ((13/2 13/2 0) (7 7 0) (13/2 13/2 0)))
'(clean-cache
  mj09
  2
  15
  21
  let
  "\"'(eval (let (h) (-> (let (x ... y) ...) <-)) (env ()))\""
  40
  25
  10
  5
  25
  10
  35
  1
  1
  11
  #f
  111/25
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  mj09
  2
  15
  21
  app
  "\"'(eval (let (... x (y (-> (app h (app #f)) <-)) () ...) ...) (env ()))\""
  38
  23
  10
  5
  23
  10
  33
  1
  1
  11
  #f
  103/23
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  mj09
  2
  15
  21
  app
  "\"'(eval (app h (-> (app #f) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  2
  15
  21
  app
  "\"'(eval (let (... () (x (-> (app h (app #t)) <-)) y ...) ...) (env ()))\""
  38
  23
  10
  5
  23
  10
  33
  1
  1
  11
  #f
  103/23
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  mj09
  2
  15
  21
  app
  "\"'(eval (app h (-> (app #t) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  2
  15
  21
  ref-or-constructor
  "\"'(eval (let (x ... y) (-> y <-)) (env ()))\""
  39
  24
  10
  5
  24
  10
  34
  1
  1
  11
  #f
  107/24
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  mj09
  2
  15
  21
  ref-or-constructor
  "\"'(eval (λ (z) (-> z <-)) (env ((□? (z)) (□? (b)))))\""
  115
  78
  20
  17
  48
  17
  65
  1
  8543/11970
  33
  #f
  178/39
  ((17/2 17/2 0) (9 9 0) (19/2 10 0)))
'(shuffled-cache
  0
  mj09
  2
  15
  21
  ref-or-constructor
  "\"'(eval (let (x ... y) (-> y <-)) (env ()))\""
  128
  89
  20
  19
  59
  17
  76
  1
  7579/9135
  37
  #f
  404/89
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  15
  21
  let
  "\"'(eval (let (f) (-> (let (y) ...) <-)) (env ((□? (b)))))\""
  134
  94
  20
  20
  63
  17
  80
  1
  7474/9135
  39
  #f
  213/47
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  15
  21
  let
  "\"'(eval (let (h) (-> (let (x ... y) ...) <-)) (env ()))\""
  135
  95
  20
  20
  64
  17
  81
  1
  7789/9450
  39
  #f
  86/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  15
  21
  app
  "\"'(eval (match b (#f) (_ (-> (app k 1) <-))) (env ((□? (k)) (□? (b)))))\""
  144
  101
  20
  23
  64
  17
  81
  1
  41968/51975
  42
  #f
  458/101
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  mj09
  2
  15
  21
  app
  "\"'(eval (app h (-> (app #f) <-)) (env ()))\""
  144
  101
  20
  23
  64
  17
  81
  1
  41968/51975
  42
  #t
  458/101
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  15
  21
  ref-or-constructor
  "\"'(eval (app g (-> y <-)) (env ((□? (b)))))\""
  144
  101
  20
  23
  64
  17
  81
  1
  41968/51975
  42
  #f
  458/101
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  15
  21
  app
  "\"'(eval (match b ((#f) (-> (app k 2) <-)) _) (env ((□? (k)) (□? (b)))))\""
  151
  106
  20
  25
  64
  17
  81
  1
  82963/103950
  44
  #f
  240/53
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  mj09
  2
  15
  21
  app
  "\"'(eval\n  (let (... () (y (-> (app f (λ (x) ...)) <-)) () ...) ...)\n  (env ((□? (b)))))\""
  151
  106
  20
  25
  64
  17
  81
  1
  82963/103950
  44
  #f
  240/53
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  15
  21
  app
  "\"'(eval (let (... x (y (-> (app h (app #f)) <-)) () ...) ...) (env ()))\""
  151
  106
  20
  25
  64
  17
  81
  1
  82963/103950
  44
  #f
  240/53
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  15
  21
  match
  "\"'(eval (λ (k) (-> (match b ...) <-)) (env ((□? (k)) (□? (b)))))\""
  156
  111
  20
  25
  64
  17
  81
  1
  54847/69300
  46
  #f
  502/111
  ((1/2 1/2 0) (1/2 1/2 0) (1 1 0)))
'(shuffled-cache
  0
  mj09
  2
  15
  21
  ref-or-constructor
  "\"'(eval (λ (x) (-> x <-)) (env ((□? (x)) (□? (b)))))\""
  161
  112
  21
  28
  64
  17
  81
  1
  41039/51975
  46
  #f
  253/56
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  mj09
  2
  15
  21
  app
  "\"'(eval (let (... () (x (-> (app h (app #t)) <-)) y ...) ...) (env ()))\""
  166
  117
  21
  28
  69
  17
  86
  1
  179171/221760
  47
  #f
  527/117
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  15
  21
  ref-or-constructor
  "\"'(eval (app (-> k <-) 2) (env ((□? (k)) (□? (b)))))\""
  167
  118
  21
  28
  69
  17
  86
  1
  178961/221760
  48
  #t
  533/118
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  15
  21
  let
  "\"'(eval (let (g) (-> (let (f) ...) <-)) (env ((□? (b)))))\""
  168
  119
  21
  28
  69
  17
  86
  1
  176651/221760
  48
  #f
  537/119
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  15
  21
  let
  "\"'(eval (λ (b) (-> (let (g) ...) <-)) (env ((□? (b)))))\""
  169
  120
  21
  28
  69
  17
  86
  1
  174341/221760
  48
  #f
  541/120
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  15
  21
  ref-or-constructor
  "\"'(eval (app (-> k <-) 1) (env ((□? (k)) (□? (b)))))\""
  169
  120
  21
  28
  69
  17
  86
  1
  174341/221760
  48
  #t
  541/120
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  15
  21
  let
  "\"'(eval ((top) let (h) ...) (env ()))\""
  170
  121
  21
  28
  70
  17
  87
  1
  181271/228690
  48
  #f
  545/121
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  15
  21
  app
  "\"'(eval (let (y) (-> (app g y) <-)) (env ((□? (b)))))\""
  171
  122
  21
  28
  70
  17
  87
  1
  178961/228690
  48
  #f
  9/2
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  15
  21
  ref-or-constructor
  "\"'(eval (match (-> b <-) (#f) _) (env ((□? (k)) (□? (b)))))\""
  172
  123
  21
  28
  70
  17
  87
  1
  178751/228690
  48
  #f
  185/41
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  15
  21
  app
  "\"'(eval (app h (-> (app #t) <-)) (env ()))\""
  172
  123
  21
  28
  70
  17
  87
  1
  178751/228690
  48
  #t
  185/41
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  15
  21
  app
  "\"'(eval (app h (-> (app #t) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  15
  21
  let
  "\"'(eval (λ (b) (-> (let (g) ...) <-)) (env ((□? (b)))))\""
  137
  98
  20
  19
  60
  17
  77
  1
  2179/3150
  39
  #f
  223/49
  ((17/2 9 0) (17/2 17/2 0) (9 9 0)))
'(shuffled-cache
  1
  mj09
  2
  15
  21
  let
  "\"'(eval (let (f) (-> (let (y) ...) <-)) (env ((□? (b)))))\""
  137
  98
  20
  19
  60
  17
  77
  1
  2179/3150
  39
  #f
  223/49
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  15
  21
  ref-or-constructor
  "\"'(eval (app (-> k <-) 2) (env ((□? (k)) (□? (b)))))\""
  139
  99
  20
  20
  60
  17
  77
  1
  10867/15750
  40
  #t
  452/99
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  15
  21
  app
  "\"'(eval (let (... () (x (-> (app h (app #t)) <-)) y ...) ...) (env ()))\""
  144
  103
  20
  21
  64
  17
  81
  1
  1634/2205
  42
  #f
  470/103
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  15
  21
  app
  "\"'(eval (match b (#f) (_ (-> (app k 1) <-))) (env ((□? (k)) (□? (b)))))\""
  151
  108
  20
  23
  64
  17
  81
  1
  6389/8820
  44
  #f
  41/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  mj09
  2
  15
  21
  app
  "\"'(eval (app h (-> (app #f) <-)) (env ()))\""
  151
  108
  20
  23
  64
  17
  81
  1
  6389/8820
  44
  #t
  41/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  15
  21
  let
  "\"'(eval ((top) let (h) ...) (env ()))\""
  157
  114
  20
  23
  70
  17
  87
  1
  16033/20790
  45
  #f
  517/114
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  15
  21
  app
  "\"'(eval (match b ((#f) (-> (app k 2) <-)) _) (env ((□? (k)) (□? (b)))))\""
  164
  119
  20
  25
  70
  17
  87
  1
  3173/4158
  47
  #f
  77/17
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  mj09
  2
  15
  21
  app
  "\"'(eval\n  (let (... () (y (-> (app f (λ (x) ...)) <-)) () ...) ...)\n  (env ((□? (b)))))\""
  164
  119
  20
  25
  70
  17
  87
  1
  3173/4158
  47
  #f
  77/17
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  15
  21
  match
  "\"'(eval (λ (k) (-> (match b ...) <-)) (env ((□? (k)) (□? (b)))))\""
  169
  124
  20
  25
  70
  17
  87
  1
  5771/7623
  49
  #f
  561/124
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  mj09
  2
  15
  21
  ref-or-constructor
  "\"'(eval (λ (x) (-> x <-)) (env ((□? (x)) (□? (b)))))\""
  174
  125
  21
  28
  70
  17
  87
  1
  34549/45738
  49
  #f
  113/25
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  mj09
  2
  15
  21
  app
  "\"'(eval (let (... x (y (-> (app h (app #f)) <-)) () ...) ...) (env ()))\""
  174
  125
  21
  28
  70
  17
  87
  1
  34549/45738
  49
  #f
  113/25
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  15
  21
  ref-or-constructor
  "\"'(eval (app g (-> y <-)) (env ((□? (b)))))\""
  174
  125
  21
  28
  70
  17
  87
  1
  34549/45738
  49
  #f
  113/25
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  15
  21
  ref-or-constructor
  "\"'(eval (λ (z) (-> z <-)) (env ((□? (z)) (□? (b)))))\""
  178
  126
  21
  31
  70
  17
  87
  1
  172283/228690
  49
  #f
  569/126
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  15
  21
  let
  "\"'(eval (let (h) (-> (let (x ... y) ...) <-)) (env ()))\""
  178
  126
  21
  31
  70
  17
  87
  1
  172283/228690
  49
  #f
  569/126
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  15
  21
  app
  "\"'(eval (let (y) (-> (app g y) <-)) (env ((□? (b)))))\""
  178
  126
  21
  31
  70
  17
  87
  1
  172283/228690
  49
  #f
  569/126
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  15
  21
  ref-or-constructor
  "\"'(eval (let (x ... y) (-> y <-)) (env ()))\""
  178
  126
  21
  31
  70
  17
  87
  1
  172283/228690
  49
  #f
  569/126
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  15
  21
  ref-or-constructor
  "\"'(eval (app (-> k <-) 1) (env ((□? (k)) (□? (b)))))\""
  179
  127
  21
  31
  70
  17
  87
  1
  172031/228690
  50
  #t
  575/127
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  15
  21
  ref-or-constructor
  "\"'(eval (match (-> b <-) (#f) _) (env ((□? (k)) (□? (b)))))\""
  180
  128
  21
  31
  70
  17
  87
  1
  171821/228690
  50
  #f
  581/128
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  15
  21
  let
  "\"'(eval (let (g) (-> (let (f) ...) <-)) (env ((□? (b)))))\""
  180
  128
  21
  31
  70
  17
  87
  1
  171821/228690
  50
  #f
  581/128
  ((0 0 0) (0 0 0) (0 0 0)))
