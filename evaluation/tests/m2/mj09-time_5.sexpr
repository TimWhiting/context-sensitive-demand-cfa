'(clean-cache
  mj09
  2
  5
  21
  let
  "\"'(eval ((top) let (h) ...) (env ()))\""
  41
  26
  10
  5
  26
  10
  36
  1
  1
  26
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  2
  5
  21
  let
  "\"'(eval (λ (b) (-> (let (g) ...) <-)) (env ((□? (b)))))\""
  123
  86
  20
  17
  48
  17
  65
  1
  10351/15750
  71
  #f
  51/43
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  mj09
  2
  5
  21
  ref-or-constructor
  "\"'(eval (λ (z) (-> z <-)) (env ((□? (z)) (□? (b)))))\""
  101
  66
  20
  15
  36
  17
  53
  1
  421/630
  55
  #f
  37/33
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  mj09
  2
  5
  21
  let
  "\"'(eval (let (g) (-> (let (f) ...) <-)) (env ((□? (b)))))\""
  120
  83
  20
  17
  46
  17
  63
  1
  9931/15120
  69
  #f
  98/83
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  mj09
  2
  5
  21
  match
  "\"'(eval (λ (k) (-> (match b ...) <-)) (env ((□? (k)) (□? (b)))))\""
  77
  53
  14
  10
  26
  13
  39
  1
  47/72
  45
  #f
  54/53
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  mj09
  2
  5
  21
  app
  "\"'(eval (match b (#f) (_ (-> (app k 1) <-))) (env ((□? (k)) (□? (b)))))\""
  19
  9
  5
  5
  0
  0
  0
  1
  0
  9
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  2
  5
  21
  ref-or-constructor
  "\"'(eval (app (-> k <-) 1) (env ((□? (k)) (□? (b)))))\""
  6
  2
  2
  2
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  2
  5
  21
  app
  "\"'(eval (match b ((#f) (-> (app k 2) <-)) _) (env ((□? (k)) (□? (b)))))\""
  19
  9
  5
  5
  0
  0
  0
  1
  0
  9
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  2
  5
  21
  ref-or-constructor
  "\"'(eval (app (-> k <-) 2) (env ((□? (k)) (□? (b)))))\""
  6
  2
  2
  2
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  2
  5
  21
  ref-or-constructor
  "\"'(eval (match (-> b <-) (#f) _) (env ((□? (k)) (□? (b)))))\""
  10
  5
  3
  2
  4
  3
  7
  1
  4/5
  4
  #f
  6/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  2
  5
  21
  let
  "\"'(eval (let (f) (-> (let (y) ...) <-)) (env ((□? (b)))))\""
  117
  80
  20
  17
  44
  17
  61
  1
  9511/14490
  67
  #f
  47/40
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  mj09
  2
  5
  21
  app
  "\"'(eval\n  (let (... () (y (-> (app f (λ (x) ...)) <-)) () ...) ...)\n  (env ((□? (b)))))\""
  85
  60
  14
  11
  32
  13
  45
  1
  7159/10710
  51
  #f
  11/10
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  mj09
  2
  5
  21
  ref-or-constructor
  "\"'(eval (λ (x) (-> x <-)) (env ((□? (x)) (□? (b)))))\""
  12
  5
  3
  4
  0
  0
  0
  1
  0
  4
  #f
  6/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  2
  5
  21
  app
  "\"'(eval (let (y) (-> (app g y) <-)) (env ((□? (b)))))\""
  114
  77
  20
  17
  42
  17
  59
  1
  9091/13860
  65
  #f
  90/77
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  mj09
  2
  5
  21
  ref-or-constructor
  "\"'(eval (app g (-> y <-)) (env ((□? (b)))))\""
  88
  63
  14
  11
  34
  13
  47
  1
  7579/11340
  53
  #f
  10/9
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  mj09
  2
  5
  21
  let
  "\"'(eval (let (h) (-> (let (x ... y) ...) <-)) (env ()))\""
  40
  25
  10
  5
  25
  10
  35
  1
  1
  25
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  2
  5
  21
  app
  "\"'(eval (let (... x (y (-> (app h (app #f)) <-)) () ...) ...) (env ()))\""
  38
  23
  10
  5
  23
  10
  33
  1
  1
  23
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  2
  5
  21
  app
  "\"'(eval (app h (-> (app #f) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  2
  5
  21
  app
  "\"'(eval (let (... () (x (-> (app h (app #t)) <-)) y ...) ...) (env ()))\""
  38
  23
  10
  5
  23
  10
  33
  1
  1
  23
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  2
  5
  21
  app
  "\"'(eval (app h (-> (app #t) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  2
  5
  21
  ref-or-constructor
  "\"'(eval (let (x ... y) (-> y <-)) (env ()))\""
  39
  24
  10
  5
  24
  10
  34
  1
  1
  24
  #t
  1
  ((0 0 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  mj09
  2
  5
  21
  app
  "\"'(eval (let (y) (-> (app g y) <-)) (env ((□? (b)))))\""
  114
  77
  20
  17
  42
  17
  59
  1
  9091/13860
  65
  #f
  90/77
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  0
  mj09
  2
  5
  21
  ref-or-constructor
  "\"'(eval (match (-> b <-) (#f) _) (env ((□? (k)) (□? (b)))))\""
  116
  78
  20
  18
  42
  17
  59
  1
  2591/3960
  65
  #f
  46/39
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  5
  21
  app
  "\"'(eval (let (... x (y (-> (app h (app #f)) <-)) () ...) ...) (env ()))\""
  124
  85
  20
  19
  49
  17
  66
  1
  3761/5040
  72
  #t
  99/85
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  5
  21
  app
  "\"'(eval (match b (#f) (_ (-> (app k 1) <-))) (env ((□? (k)) (□? (b)))))\""
  132
  91
  20
  21
  49
  17
  66
  1
  8075/11088
  78
  #t
  106/91
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  5
  21
  app
  "\"'(eval (app h (-> (app #f) <-)) (env ()))\""
  132
  91
  20
  21
  49
  17
  66
  1
  8075/11088
  78
  #t
  106/91
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  5
  21
  ref-or-constructor
  "\"'(eval (app (-> k <-) 2) (env ((□? (k)) (□? (b)))))\""
  133
  92
  20
  21
  49
  17
  66
  1
  13429/18480
  79
  #t
  27/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  5
  21
  ref-or-constructor
  "\"'(eval (λ (z) (-> z <-)) (env ((□? (z)) (□? (b)))))\""
  137
  93
  20
  24
  49
  17
  66
  1
  2677/3696
  79
  #f
  110/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  5
  21
  ref-or-constructor
  "\"'(eval (app (-> k <-) 1) (env ((□? (k)) (□? (b)))))\""
  137
  93
  20
  24
  49
  17
  66
  1
  2677/3696
  79
  #t
  110/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  5
  21
  ref-or-constructor
  "\"'(eval (app g (-> y <-)) (env ((□? (b)))))\""
  137
  93
  20
  24
  49
  17
  66
  1
  2677/3696
  79
  #f
  110/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  5
  21
  ref-or-constructor
  "\"'(eval (let (x ... y) (-> y <-)) (env ()))\""
  138
  94
  20
  24
  50
  17
  67
  1
  2809/3828
  80
  #t
  111/94
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  5
  21
  let
  "\"'(eval (λ (b) (-> (let (g) ...) <-)) (env ((□? (b)))))\""
  142
  98
  20
  24
  53
  17
  70
  1
  2765/3828
  83
  #f
  58/49
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  5
  21
  app
  "\"'(eval (match b ((#f) (-> (app k 2) <-)) _) (env ((□? (k)) (□? (b)))))\""
  149
  103
  20
  26
  53
  17
  70
  1
  13649/19140
  88
  #t
  121/103
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  5
  21
  app
  "\"'(eval (app h (-> (app #t) <-)) (env ()))\""
  149
  103
  20
  26
  53
  17
  70
  1
  13649/19140
  88
  #t
  121/103
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  5
  21
  let
  "\"'(eval (let (g) (-> (let (f) ...) <-)) (env ((□? (b)))))\""
  150
  104
  20
  26
  53
  17
  70
  1
  13429/19140
  88
  #f
  123/104
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  5
  21
  ref-or-constructor
  "\"'(eval (λ (x) (-> x <-)) (env ((□? (x)) (□? (b)))))\""
  155
  105
  21
  29
  53
  17
  70
  1
  40177/57420
  88
  #f
  25/21
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  5
  21
  let
  "\"'(eval ((top) let (h) ...) (env ()))\""
  157
  107
  21
  29
  55
  17
  72
  1
  44137/61380
  90
  #t
  127/107
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  5
  21
  let
  "\"'(eval (let (h) (-> (let (x ... y) ...) <-)) (env ()))\""
  157
  107
  21
  29
  55
  17
  72
  1
  44137/61380
  90
  #t
  127/107
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  5
  21
  match
  "\"'(eval (λ (k) (-> (match b ...) <-)) (env ((□? (k)) (□? (b)))))\""
  162
  112
  21
  29
  55
  17
  72
  1
  153341/214830
  94
  #f
  19/16
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  5
  21
  app
  "\"'(eval (let (... () (x (-> (app h (app #t)) <-)) y ...) ...) (env ()))\""
  165
  115
  21
  29
  58
  17
  75
  1
  84178/114345
  97
  #t
  136/115
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  5
  21
  app
  "\"'(eval\n  (let (... () (y (-> (app f (λ (x) ...)) <-)) () ...) ...)\n  (env ((□? (b)))))\""
  165
  115
  21
  29
  58
  17
  75
  1
  84178/114345
  97
  #f
  136/115
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  5
  21
  let
  "\"'(eval (let (f) (-> (let (y) ...) <-)) (env ((□? (b)))))\""
  166
  116
  21
  29
  58
  17
  75
  1
  83023/114345
  97
  #f
  69/58
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  5
  21
  ref-or-constructor
  "\"'(eval (let (x ... y) (-> y <-)) (env ()))\""
  39
  24
  10
  5
  24
  10
  34
  1
  1
  24
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  5
  21
  app
  "\"'(eval (let (... () (x (-> (app h (app #t)) <-)) y ...) ...) (env ()))\""
  72
  46
  17
  9
  46
  17
  63
  1
  1
  46
  #t
  1
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  mj09
  2
  5
  21
  app
  "\"'(eval (let (y) (-> (app g y) <-)) (env ((□? (b)))))\""
  129
  91
  20
  18
  56
  17
  73
  1
  15181/19530
  79
  #f
  8/7
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  1
  mj09
  2
  5
  21
  app
  "\"'(eval (app h (-> (app #f) <-)) (env ()))\""
  129
  91
  20
  18
  56
  17
  73
  1
  15181/19530
  79
  #t
  8/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  5
  21
  app
  "\"'(eval (app h (-> (app #t) <-)) (env ()))\""
  129
  91
  20
  18
  56
  17
  73
  1
  15181/19530
  79
  #t
  8/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  5
  21
  let
  "\"'(eval (λ (b) (-> (let (g) ...) <-)) (env ((□? (b)))))\""
  130
  92
  20
  18
  56
  17
  73
  1
  14971/19530
  79
  #f
  53/46
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  5
  21
  ref-or-constructor
  "\"'(eval (app (-> k <-) 1) (env ((□? (k)) (□? (b)))))\""
  132
  93
  20
  19
  56
  17
  73
  1
  7468/9765
  80
  #t
  36/31
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  5
  21
  ref-or-constructor
  "\"'(eval (λ (x) (-> x <-)) (env ((□? (x)) (□? (b)))))\""
  137
  94
  21
  22
  56
  17
  73
  1
  1481/1953
  80
  #f
  55/47
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  5
  21
  app
  "\"'(eval\n  (let (... () (y (-> (app f (λ (x) ...)) <-)) () ...) ...)\n  (env ((□? (b)))))\""
  137
  94
  21
  22
  56
  17
  73
  1
  1481/1953
  80
  #f
  55/47
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  5
  21
  ref-or-constructor
  "\"'(eval (app (-> k <-) 2) (env ((□? (k)) (□? (b)))))\""
  138
  95
  21
  22
  56
  17
  73
  1
  7391/9765
  81
  #t
  112/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  5
  21
  let
  "\"'(eval (let (g) (-> (let (f) ...) <-)) (env ((□? (b)))))\""
  139
  96
  21
  22
  56
  17
  73
  1
  7286/9765
  81
  #f
  19/16
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  5
  21
  let
  "\"'(eval (let (f) (-> (let (y) ...) <-)) (env ((□? (b)))))\""
  140
  97
  21
  22
  56
  17
  73
  1
  7181/9765
  81
  #f
  116/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  5
  21
  let
  "\"'(eval (let (h) (-> (let (x ... y) ...) <-)) (env ()))\""
  141
  98
  21
  22
  57
  17
  74
  1
  937/1260
  82
  #t
  117/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  5
  21
  ref-or-constructor
  "\"'(eval (λ (z) (-> z <-)) (env ((□? (z)) (□? (b)))))\""
  145
  99
  21
  25
  57
  17
  74
  1
  1495/2016
  82
  #f
  119/99
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  5
  21
  app
  "\"'(eval (let (... x (y (-> (app h (app #f)) <-)) () ...) ...) (env ()))\""
  145
  99
  21
  25
  57
  17
  74
  1
  1495/2016
  82
  #t
  119/99
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  5
  21
  match
  "\"'(eval (λ (k) (-> (match b ...) <-)) (env ((□? (k)) (□? (b)))))\""
  156
  108
  21
  27
  57
  17
  74
  1
  80471/110880
  90
  #f
  43/36
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  mj09
  2
  5
  21
  ref-or-constructor
  "\"'(eval (match (-> b <-) (#f) _) (env ((□? (k)) (□? (b)))))\""
  157
  109
  21
  27
  57
  17
  74
  1
  13399/18480
  90
  #f
  131/109
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  5
  21
  app
  "\"'(eval (match b (#f) (_ (-> (app k 1) <-))) (env ((□? (k)) (□? (b)))))\""
  161
  112
  21
  28
  57
  17
  74
  1
  4441/6160
  93
  #t
  67/56
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  5
  21
  ref-or-constructor
  "\"'(eval (app g (-> y <-)) (env ((□? (b)))))\""
  161
  112
  21
  28
  57
  17
  74
  1
  4441/6160
  93
  #f
  67/56
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  5
  21
  let
  "\"'(eval ((top) let (h) ...) (env ()))\""
  162
  113
  21
  28
  58
  17
  75
  1
  3089/4235
  94
  #t
  135/113
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  5
  21
  app
  "\"'(eval (match b ((#f) (-> (app k 2) <-)) _) (env ((□? (k)) (□? (b)))))\""
  166
  116
  21
  29
  58
  17
  75
  1
  83023/114345
  97
  #t
  69/58
  ((0 0 0) (0 0 0) (0 0 0)))
