'(clean-cache
  mj09
  2
  5
  21
  let
  "\"'(eval ((top) let (h) ...) (env ()))\""
  41
  26
  10
  5
  26
  10
  36
  1
  1
  11
  #f
  115/26
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  2
  5
  21
  let
  "\"'(eval (λ (b) (-> (let (g) ...) <-)) (env ((□? (b)))))\""
  123
  86
  20
  17
  48
  17
  65
  1
  10351/15750
  35
  #f
  197/43
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  mj09
  2
  5
  21
  ref-or-constructor
  "\"'(eval (λ (z) (-> z <-)) (env ((□? (z)) (□? (b)))))\""
  101
  66
  20
  15
  36
  17
  53
  1
  421/630
  29
  #f
  152/33
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  mj09
  2
  5
  21
  let
  "\"'(eval (let (g) (-> (let (f) ...) <-)) (env ((□? (b)))))\""
  120
  83
  20
  17
  46
  17
  63
  1
  9931/15120
  35
  #f
  382/83
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  mj09
  2
  5
  21
  match
  "\"'(eval (λ (k) (-> (match b ...) <-)) (env ((□? (k)) (□? (b)))))\""
  77
  53
  14
  10
  26
  13
  39
  1
  47/72
  25
  #f
  244/53
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  mj09
  2
  5
  21
  app
  "\"'(eval (match b (#f) (_ (-> (app k 1) <-))) (env ((□? (k)) (□? (b)))))\""
  19
  9
  5
  5
  0
  0
  0
  1
  0
  5
  #f
  41/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  2
  5
  21
  ref-or-constructor
  "\"'(eval (app (-> k <-) 1) (env ((□? (k)) (□? (b)))))\""
  6
  2
  2
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  2
  5
  21
  app
  "\"'(eval (match b ((#f) (-> (app k 2) <-)) _) (env ((□? (k)) (□? (b)))))\""
  19
  9
  5
  5
  0
  0
  0
  1
  0
  5
  #f
  41/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  2
  5
  21
  ref-or-constructor
  "\"'(eval (app (-> k <-) 2) (env ((□? (k)) (□? (b)))))\""
  6
  2
  2
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  2
  5
  21
  ref-or-constructor
  "\"'(eval (match (-> b <-) (#f) _) (env ((□? (k)) (□? (b)))))\""
  10
  5
  3
  2
  4
  3
  7
  1
  4/5
  4
  #f
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  2
  5
  21
  let
  "\"'(eval (let (f) (-> (let (y) ...) <-)) (env ((□? (b)))))\""
  117
  80
  20
  17
  44
  17
  61
  1
  9511/14490
  35
  #f
  37/8
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  mj09
  2
  5
  21
  app
  "\"'(eval\n  (let (... () (y (-> (app f (λ (x) ...)) <-)) () ...) ...)\n  (env ((□? (b)))))\""
  85
  60
  14
  11
  32
  13
  45
  1
  7159/10710
  29
  #f
  14/3
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  mj09
  2
  5
  21
  ref-or-constructor
  "\"'(eval (λ (x) (-> x <-)) (env ((□? (x)) (□? (b)))))\""
  12
  5
  3
  4
  0
  0
  0
  1
  0
  2
  #f
  22/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  2
  5
  21
  app
  "\"'(eval (let (y) (-> (app g y) <-)) (env ((□? (b)))))\""
  114
  77
  20
  17
  42
  17
  59
  1
  9091/13860
  35
  #f
  358/77
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  mj09
  2
  5
  21
  ref-or-constructor
  "\"'(eval (app g (-> y <-)) (env ((□? (b)))))\""
  88
  63
  14
  11
  34
  13
  47
  1
  7579/11340
  29
  #f
  292/63
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  mj09
  2
  5
  21
  let
  "\"'(eval (let (h) (-> (let (x ... y) ...) <-)) (env ()))\""
  40
  25
  10
  5
  25
  10
  35
  1
  1
  11
  #f
  111/25
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  2
  5
  21
  app
  "\"'(eval (let (... x (y (-> (app h (app #f)) <-)) () ...) ...) (env ()))\""
  38
  23
  10
  5
  23
  10
  33
  1
  1
  11
  #f
  103/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  2
  5
  21
  app
  "\"'(eval (app h (-> (app #f) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  2
  5
  21
  app
  "\"'(eval (let (... () (x (-> (app h (app #t)) <-)) y ...) ...) (env ()))\""
  38
  23
  10
  5
  23
  10
  33
  1
  1
  11
  #f
  103/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  2
  5
  21
  app
  "\"'(eval (app h (-> (app #t) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  2
  5
  21
  ref-or-constructor
  "\"'(eval (let (x ... y) (-> y <-)) (env ()))\""
  39
  24
  10
  5
  24
  10
  34
  1
  1
  11
  #f
  107/24
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  5
  21
  let
  "\"'(eval (let (g) (-> (let (f) ...) <-)) (env ((□? (b)))))\""
  120
  83
  20
  17
  46
  17
  63
  1
  9931/15120
  35
  #f
  382/83
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  0
  mj09
  2
  5
  21
  app
  "\"'(eval\n  (let (... () (y (-> (app f (λ (x) ...)) <-)) () ...) ...)\n  (env ((□? (b)))))\""
  120
  83
  20
  17
  46
  17
  63
  1
  9931/15120
  35
  #f
  382/83
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  5
  21
  ref-or-constructor
  "\"'(eval (λ (z) (-> z <-)) (env ((□? (z)) (□? (b)))))\""
  124
  84
  20
  20
  46
  17
  63
  1
  9889/15120
  35
  #f
  193/42
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  5
  21
  ref-or-constructor
  "\"'(eval (app (-> k <-) 2) (env ((□? (k)) (□? (b)))))\""
  126
  85
  20
  21
  46
  17
  63
  1
  3287/5040
  36
  #t
  392/85
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  5
  21
  app
  "\"'(eval (app h (-> (app #t) <-)) (env ()))\""
  126
  85
  20
  21
  46
  17
  63
  1
  3287/5040
  36
  #t
  392/85
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  5
  21
  ref-or-constructor
  "\"'(eval (λ (x) (-> x <-)) (env ((□? (x)) (□? (b)))))\""
  131
  86
  21
  24
  46
  17
  63
  1
  649/1008
  36
  #f
  198/43
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  5
  21
  ref-or-constructor
  "\"'(eval (let (x ... y) (-> y <-)) (env ()))\""
  138
  92
  21
  25
  52
  17
  69
  1
  440/609
  38
  #f
  211/46
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  5
  21
  app
  "\"'(eval (let (y) (-> (app g y) <-)) (env ((□? (b)))))\""
  138
  92
  21
  25
  52
  17
  69
  1
  440/609
  38
  #f
  211/46
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  5
  21
  let
  "\"'(eval (let (f) (-> (let (y) ...) <-)) (env ((□? (b)))))\""
  138
  92
  21
  25
  52
  17
  69
  1
  440/609
  38
  #f
  211/46
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  5
  21
  app
  "\"'(eval (let (... () (x (-> (app h (app #t)) <-)) y ...) ...) (env ()))\""
  142
  96
  21
  25
  56
  17
  73
  1
  971/1302
  39
  #f
  439/96
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  5
  21
  match
  "\"'(eval (λ (k) (-> (match b ...) <-)) (env ((□? (k)) (□? (b)))))\""
  153
  105
  21
  27
  56
  17
  73
  1
  5221/7161
  43
  #f
  479/105
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  mj09
  2
  5
  21
  let
  "\"'(eval (let (h) (-> (let (x ... y) ...) <-)) (env ()))\""
  154
  106
  21
  27
  57
  17
  74
  1
  1363/1848
  43
  #f
  483/106
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  5
  21
  ref-or-constructor
  "\"'(eval (match (-> b <-) (#f) _) (env ((□? (k)) (□? (b)))))\""
  155
  107
  21
  27
  57
  17
  74
  1
  81703/110880
  43
  #f
  489/107
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  5
  21
  ref-or-constructor
  "\"'(eval (app (-> k <-) 1) (env ((□? (k)) (□? (b)))))\""
  156
  108
  21
  27
  57
  17
  74
  1
  9061/12320
  44
  #t
  55/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  5
  21
  app
  "\"'(eval (let (... x (y (-> (app h (app #f)) <-)) () ...) ...) (env ()))\""
  156
  108
  21
  27
  57
  17
  74
  1
  9061/12320
  44
  #f
  55/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  5
  21
  app
  "\"'(eval (app h (-> (app #f) <-)) (env ()))\""
  156
  108
  21
  27
  57
  17
  74
  1
  9061/12320
  44
  #t
  55/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  5
  21
  let
  "\"'(eval ((top) let (h) ...) (env ()))\""
  157
  109
  21
  27
  58
  17
  75
  1
  9446/12705
  44
  #f
  499/109
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  5
  21
  let
  "\"'(eval (λ (b) (-> (let (g) ...) <-)) (env ((□? (b)))))\""
  158
  110
  21
  27
  58
  17
  75
  1
  27953/38115
  44
  #f
  503/110
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  5
  21
  app
  "\"'(eval (match b (#f) (_ (-> (app k 1) <-))) (env ((□? (k)) (□? (b)))))\""
  162
  113
  21
  28
  58
  17
  75
  1
  3089/4235
  45
  #f
  516/113
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  5
  21
  app
  "\"'(eval (match b ((#f) (-> (app k 2) <-)) _) (env ((□? (k)) (□? (b)))))\""
  166
  116
  21
  29
  58
  17
  75
  1
  83023/114345
  46
  #f
  529/116
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  5
  21
  ref-or-constructor
  "\"'(eval (app g (-> y <-)) (env ((□? (b)))))\""
  166
  116
  21
  29
  58
  17
  75
  1
  83023/114345
  46
  #f
  529/116
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  5
  21
  let
  "\"'(eval (let (f) (-> (let (y) ...) <-)) (env ((□? (b)))))\""
  117
  80
  20
  17
  44
  17
  61
  1
  9511/14490
  35
  #f
  37/8
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  1
  mj09
  2
  5
  21
  ref-or-constructor
  "\"'(eval (λ (x) (-> x <-)) (env ((□? (x)) (□? (b)))))\""
  122
  81
  21
  20
  44
  17
  61
  1
  1877/2898
  35
  #f
  374/81
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  5
  21
  app
  "\"'(eval (app h (-> (app #f) <-)) (env ()))\""
  122
  81
  21
  20
  44
  17
  61
  1
  1877/2898
  35
  #t
  374/81
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  5
  21
  app
  "\"'(eval\n  (let (... () (y (-> (app f (λ (x) ...)) <-)) () ...) ...)\n  (env ((□? (b)))))\""
  122
  81
  21
  20
  44
  17
  61
  1
  1877/2898
  35
  #f
  374/81
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  5
  21
  ref-or-constructor
  "\"'(eval (match (-> b <-) (#f) _) (env ((□? (k)) (□? (b)))))\""
  124
  82
  21
  21
  44
  17
  61
  1
  535/828
  35
  #f
  190/41
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  5
  21
  let
  "\"'(eval (let (g) (-> (let (f) ...) <-)) (env ((□? (b)))))\""
  127
  85
  21
  21
  46
  17
  63
  1
  559/864
  35
  #f
  392/85
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  5
  21
  ref-or-constructor
  "\"'(eval (app (-> k <-) 2) (env ((□? (k)) (□? (b)))))\""
  128
  86
  21
  21
  46
  17
  63
  1
  929/1440
  36
  #t
  199/43
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  5
  21
  app
  "\"'(eval (app h (-> (app #t) <-)) (env ()))\""
  128
  86
  21
  21
  46
  17
  63
  1
  929/1440
  36
  #t
  199/43
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  5
  21
  let
  "\"'(eval ((top) let (h) ...) (env ()))\""
  137
  94
  21
  22
  54
  17
  71
  1
  1379/1860
  38
  #f
  216/47
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  5
  21
  let
  "\"'(eval (λ (b) (-> (let (g) ...) <-)) (env ((□? (b)))))\""
  139
  96
  21
  22
  55
  17
  72
  1
  453/620
  38
  #f
  55/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  5
  21
  ref-or-constructor
  "\"'(eval (λ (z) (-> z <-)) (env ((□? (z)) (□? (b)))))\""
  143
  97
  21
  25
  55
  17
  72
  1
  271/372
  38
  #f
  444/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  5
  21
  app
  "\"'(eval (let (y) (-> (app g y) <-)) (env ((□? (b)))))\""
  143
  97
  21
  25
  55
  17
  72
  1
  271/372
  38
  #f
  444/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  5
  21
  app
  "\"'(eval (let (... x (y (-> (app h (app #f)) <-)) () ...) ...) (env ()))\""
  143
  97
  21
  25
  55
  17
  72
  1
  271/372
  38
  #f
  444/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  5
  21
  match
  "\"'(eval (λ (k) (-> (match b ...) <-)) (env ((□? (k)) (□? (b)))))\""
  154
  106
  21
  27
  55
  17
  72
  1
  153011/214830
  42
  #f
  242/53
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  mj09
  2
  5
  21
  app
  "\"'(eval (let (... () (x (-> (app h (app #t)) <-)) y ...) ...) (env ()))\""
  157
  109
  21
  27
  58
  17
  75
  1
  84013/114345
  43
  #f
  497/109
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  5
  21
  ref-or-constructor
  "\"'(eval (app (-> k <-) 1) (env ((□? (k)) (□? (b)))))\""
  158
  110
  21
  27
  58
  17
  75
  1
  27953/38115
  44
  #t
  503/110
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  5
  21
  ref-or-constructor
  "\"'(eval (app g (-> y <-)) (env ((□? (b)))))\""
  158
  110
  21
  27
  58
  17
  75
  1
  27953/38115
  44
  #f
  503/110
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  5
  21
  ref-or-constructor
  "\"'(eval (let (x ... y) (-> y <-)) (env ()))\""
  158
  110
  21
  27
  58
  17
  75
  1
  27953/38115
  44
  #f
  503/110
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  5
  21
  let
  "\"'(eval (let (h) (-> (let (x ... y) ...) <-)) (env ()))\""
  158
  110
  21
  27
  58
  17
  75
  1
  27953/38115
  44
  #f
  503/110
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  5
  21
  app
  "\"'(eval (match b (#f) (_ (-> (app k 1) <-))) (env ((□? (k)) (□? (b)))))\""
  162
  113
  21
  28
  58
  17
  75
  1
  3089/4235
  45
  #f
  516/113
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  5
  21
  app
  "\"'(eval (match b ((#f) (-> (app k 2) <-)) _) (env ((□? (k)) (□? (b)))))\""
  166
  116
  21
  29
  58
  17
  75
  1
  83023/114345
  46
  #f
  529/116
  ((0 0 0) (0 0 0) (0 0 0)))
