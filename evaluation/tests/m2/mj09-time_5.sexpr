'(clean-cache
  mj09
  2
  5
  21
  let
  "\"'(eval ((top) let (h) ...) (env ()))\""
  41
  26
  10
  5
  26
  10
  36
  1
  1
  11
  #f
  115/26
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  mj09
  2
  21
  let
  "\"'(eval (λ (b) (-> (let (g) ...) <-)) (env ((□? (b)))))\""
  #f)
'(clean-cache
  mj09
  2
  21
  ref-or-constructor
  "\"'(eval (λ (z) (-> z <-)) (env ((□? (z)) (□? (b)))))\""
  #f)
'(clean-cache
  mj09
  2
  21
  let
  "\"'(eval (let (g) (-> (let (f) ...) <-)) (env ((□? (b)))))\""
  #f)
'(clean-cache
  mj09
  2
  21
  match
  "\"'(eval (λ (k) (-> (match b ...) <-)) (env ((□? (k)) (□? (b)))))\""
  #f)
'(clean-cache
  mj09
  2
  5
  21
  app
  "\"'(eval (match b (#f) (_ (-> (app k 1) <-))) (env ((□? (k)) (□? (b)))))\""
  19
  9
  5
  5
  0
  0
  0
  1
  0
  5
  #f
  41/9
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  mj09
  2
  5
  21
  ref-or-constructor
  "\"'(eval (app (-> k <-) 1) (env ((□? (k)) (□? (b)))))\""
  6
  2
  2
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  2
  5
  21
  app
  "\"'(eval (match b ((#f) (-> (app k 2) <-)) _) (env ((□? (k)) (□? (b)))))\""
  19
  9
  5
  5
  0
  0
  0
  1
  0
  5
  #f
  41/9
  ((1/2 1/2 0) (1 1 0) (1/2 1/2 0)))
'(clean-cache
  mj09
  2
  5
  21
  ref-or-constructor
  "\"'(eval (app (-> k <-) 2) (env ((□? (k)) (□? (b)))))\""
  6
  2
  2
  2
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  2
  5
  21
  ref-or-constructor
  "\"'(eval (match (-> b <-) (#f) _) (env ((□? (k)) (□? (b)))))\""
  10
  5
  3
  2
  4
  3
  7
  1
  4/5
  4
  #f
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  2
  21
  let
  "\"'(eval (let (f) (-> (let (y) ...) <-)) (env ((□? (b)))))\""
  #f)
'(clean-cache
  mj09
  2
  21
  app
  "\"'(eval\n  (let (... () (y (-> (app f (λ (x) ...)) <-)) () ...) ...)\n  (env ((□? (b)))))\""
  #f)
'(clean-cache
  mj09
  2
  5
  21
  ref-or-constructor
  "\"'(eval (λ (x) (-> x <-)) (env ((□? (x)) (□? (b)))))\""
  12
  5
  3
  4
  0
  0
  0
  1
  0
  2
  #f
  22/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  mj09
  2
  21
  app
  "\"'(eval (let (y) (-> (app g y) <-)) (env ((□? (b)))))\""
  #f)
'(clean-cache
  mj09
  2
  21
  ref-or-constructor
  "\"'(eval (app g (-> y <-)) (env ((□? (b)))))\""
  #f)
'(clean-cache
  mj09
  2
  5
  21
  let
  "\"'(eval (let (h) (-> (let (x ... y) ...) <-)) (env ()))\""
  40
  25
  10
  5
  25
  10
  35
  1
  1
  11
  #f
  111/25
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  mj09
  2
  5
  21
  app
  "\"'(eval (let (... x (y (-> (app h (app #f)) <-)) () ...) ...) (env ()))\""
  38
  23
  10
  5
  23
  10
  33
  1
  1
  11
  #f
  103/23
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  mj09
  2
  5
  21
  app
  "\"'(eval (app h (-> (app #f) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  2
  5
  21
  app
  "\"'(eval (let (... () (x (-> (app h (app #t)) <-)) y ...) ...) (env ()))\""
  38
  23
  10
  5
  23
  10
  33
  1
  1
  11
  #f
  103/23
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  mj09
  2
  5
  21
  app
  "\"'(eval (app h (-> (app #t) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  mj09
  2
  5
  21
  ref-or-constructor
  "\"'(eval (let (x ... y) (-> y <-)) (env ()))\""
  39
  24
  10
  5
  24
  10
  34
  1
  1
  11
  #f
  107/24
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  mj09
  2
  21
  let
  "\"'(eval (let (f) (-> (let (y) ...) <-)) (env ((□? (b)))))\""
  #f)
'(shuffled-cache
  0
  mj09
  2
  21
  ref-or-constructor
  "\"'(eval (λ (z) (-> z <-)) (env ((□? (z)) (□? (b)))))\""
  #f)
'(shuffled-cache
  0
  mj09
  2
  21
  app
  "\"'(eval\n  (let (... () (y (-> (app f (λ (x) ...)) <-)) () ...) ...)\n  (env ((□? (b)))))\""
  #f)
'(shuffled-cache
  0
  mj09
  2
  5
  21
  app
  "\"'(eval (app h (-> (app #t) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  5
  21
  let
  "\"'(eval ((top) let (h) ...) (env ()))\""
  43
  28
  10
  5
  28
  10
  38
  1
  1
  13
  #f
  125/28
  ((1 1 0) (3/2 3/2 0) (1 1 0)))
'(shuffled-cache
  0
  mj09
  2
  5
  21
  ref-or-constructor
  "\"'(eval (app (-> k <-) 2) (env ((□? (k)) (□? (b)))))\""
  49
  30
  12
  7
  28
  10
  38
  1
  27/28
  15
  #t
  9/2
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  21
  let
  "\"'(eval (let (g) (-> (let (f) ...) <-)) (env ((□? (b)))))\""
  #f)
'(shuffled-cache
  0
  mj09
  2
  5
  21
  ref-or-constructor
  "\"'(eval (let (x ... y) (-> y <-)) (env ()))\""
  39
  24
  10
  5
  24
  10
  34
  1
  1
  11
  #f
  107/24
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  mj09
  2
  5
  21
  ref-or-constructor
  "\"'(eval (match (-> b <-) (#f) _) (env ((□? (k)) (□? (b)))))\""
  44
  27
  10
  7
  26
  10
  36
  1
  51/52
  13
  #f
  41/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  5
  21
  app
  "\"'(eval (let (... () (x (-> (app h (app #t)) <-)) y ...) ...) (env ()))\""
  75
  47
  17
  11
  46
  17
  63
  1
  92/93
  21
  #f
  211/47
  ((1 3/2 0) (1 1 0) (1 3/2 0)))
'(shuffled-cache
  0
  mj09
  2
  5
  21
  ref-or-constructor
  "\"'(eval (app g (-> y <-)) (env ((□? (b)))))\""
  76
  48
  17
  11
  46
  17
  63
  1
  91/93
  21
  #f
  215/48
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  5
  21
  ref-or-constructor
  "\"'(eval (app (-> k <-) 1) (env ((□? (k)) (□? (b)))))\""
  78
  49
  18
  11
  46
  17
  63
  1
  179/186
  22
  #t
  221/49
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  mj09
  2
  5
  21
  app
  "\"'(eval (match b ((#f) (-> (app k 2) <-)) _) (env ((□? (k)) (□? (b)))))\""
  89
  58
  18
  13
  48
  17
  65
  1
  422/465
  26
  #f
  9/2
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  mj09
  2
  5
  21
  app
  "\"'(eval (app h (-> (app #f) <-)) (env ()))\""
  89
  58
  18
  13
  48
  17
  65
  1
  422/465
  26
  #t
  9/2
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  5
  21
  app
  "\"'(eval (let (y) (-> (app g y) <-)) (env ((□? (b)))))\""
  90
  59
  18
  13
  48
  17
  65
  1
  139/155
  26
  #f
  265/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  5
  21
  let
  "\"'(eval (let (h) (-> (let (x ... y) ...) <-)) (env ()))\""
  91
  60
  18
  13
  49
  17
  66
  1
  9/10
  26
  #f
  269/60
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  5
  21
  let
  "\"'(eval (λ (b) (-> (let (g) ...) <-)) (env ((□? (b)))))\""
  92
  61
  18
  13
  49
  17
  66
  1
  427/480
  26
  #f
  273/61
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  5
  21
  ref-or-constructor
  "\"'(eval (λ (x) (-> x <-)) (env ((□? (x)) (□? (b)))))\""
  98
  63
  19
  16
  50
  17
  67
  1
  851/960
  26
  #f
  281/63
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  mj09
  2
  5
  21
  match
  "\"'(eval (λ (k) (-> (match b ...) <-)) (env ((□? (k)) (□? (b)))))\""
  121
  85
  19
  17
  57
  17
  74
  1
  11299/13440
  33
  #f
  76/17
  ((4 9/2 0) (4 9/2 0) (4 4 0)))
'(shuffled-cache
  0
  mj09
  2
  5
  21
  app
  "\"'(eval (let (... x (y (-> (app h (app #f)) <-)) () ...) ...) (env ()))\""
  121
  85
  19
  17
  57
  17
  74
  1
  11299/13440
  33
  #f
  76/17
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  mj09
  2
  5
  21
  app
  "\"'(eval (match b (#f) (_ (-> (app k 1) <-))) (env ((□? (k)) (□? (b)))))\""
  125
  88
  19
  18
  57
  17
  74
  1
  16847/20160
  34
  #f
  393/88
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  mj09
  2
  5
  21
  let
  "\"'(eval ((top) let (h) ...) (env ()))\""
  41
  26
  10
  5
  26
  10
  36
  1
  1
  11
  #f
  115/26
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  mj09
  2
  21
  let
  "\"'(eval (let (f) (-> (let (y) ...) <-)) (env ((□? (b)))))\""
  #f)
'(shuffled-cache
  1
  mj09
  2
  21
  let
  "\"'(eval (λ (b) (-> (let (g) ...) <-)) (env ((□? (b)))))\""
  #f)
'(shuffled-cache
  1
  mj09
  2
  5
  21
  app
  "\"'(eval (app h (-> (app #t) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  21
  let
  "\"'(eval (let (g) (-> (let (f) ...) <-)) (env ((□? (b)))))\""
  #f)
'(shuffled-cache
  1
  mj09
  2
  21
  app
  "\"'(eval\n  (let (... () (y (-> (app f (λ (x) ...)) <-)) () ...) ...)\n  (env ((□? (b)))))\""
  #f)
'(shuffled-cache
  1
  mj09
  2
  5
  21
  ref-or-constructor
  "\"'(eval (match (-> b <-) (#f) _) (env ((□? (k)) (□? (b)))))\""
  10
  5
  3
  2
  4
  3
  7
  1
  4/5
  4
  #f
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  5
  21
  ref-or-constructor
  "\"'(eval (let (x ... y) (-> y <-)) (env ()))\""
  44
  27
  10
  7
  26
  10
  36
  1
  51/52
  13
  #f
  41/9
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  mj09
  2
  5
  21
  ref-or-constructor
  "\"'(eval (app g (-> y <-)) (env ((□? (b)))))\""
  63
  38
  15
  10
  36
  15
  51
  1
  169/174
  18
  #f
  86/19
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  mj09
  2
  5
  21
  app
  "\"'(eval (let (... x (y (-> (app h (app #f)) <-)) () ...) ...) (env ()))\""
  63
  38
  15
  10
  36
  15
  51
  1
  169/174
  18
  #f
  86/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  5
  21
  app
  "\"'(eval (let (y) (-> (app g y) <-)) (env ((□? (b)))))\""
  71
  43
  17
  11
  40
  17
  57
  1
  167/174
  20
  #f
  194/43
  ((0 0 0) (0 0 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  mj09
  2
  5
  21
  ref-or-constructor
  "\"'(eval (app (-> k <-) 2) (env ((□? (k)) (□? (b)))))\""
  73
  44
  18
  11
  40
  17
  57
  1
  82/87
  21
  #t
  50/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  5
  21
  app
  "\"'(eval (match b (#f) (_ (-> (app k 1) <-))) (env ((□? (k)) (□? (b)))))\""
  84
  53
  18
  13
  42
  17
  59
  1
  769/870
  25
  #f
  240/53
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  mj09
  2
  5
  21
  ref-or-constructor
  "\"'(eval (λ (x) (-> x <-)) (env ((□? (x)) (□? (b)))))\""
  90
  55
  19
  16
  43
  17
  60
  1
  383/435
  25
  #f
  248/55
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  mj09
  2
  5
  21
  ref-or-constructor
  "\"'(eval (app (-> k <-) 1) (env ((□? (k)) (□? (b)))))\""
  91
  56
  19
  16
  43
  17
  60
  1
  51/58
  26
  #t
  127/28
  ((0 1/2 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  5
  21
  app
  "\"'(eval (match b ((#f) (-> (app k 2) <-)) _) (env ((□? (k)) (□? (b)))))\""
  101
  64
  19
  18
  44
  17
  61
  1
  443/522
  30
  #f
  145/32
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  mj09
  2
  5
  21
  ref-or-constructor
  "\"'(eval (λ (z) (-> z <-)) (env ((□? (z)) (□? (b)))))\""
  106
  65
  20
  21
  44
  17
  61
  1
  437/522
  30
  #f
  294/65
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  5
  21
  let
  "\"'(eval (let (h) (-> (let (x ... y) ...) <-)) (env ()))\""
  107
  66
  20
  21
  45
  17
  62
  1
  91/108
  30
  #f
  149/33
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  5
  21
  match
  "\"'(eval (λ (k) (-> (match b ...) <-)) (env ((□? (k)) (□? (b)))))\""
  124
  83
  20
  21
  51
  17
  68
  1
  5149/6300
  34
  #f
  374/83
  ((3 3 0) (3 7/2 0) (3 7/2 0)))
'(shuffled-cache
  1
  mj09
  2
  5
  21
  app
  "\"'(eval (let (... () (x (-> (app h (app #t)) <-)) y ...) ...) (env ()))\""
  130
  89
  20
  21
  57
  17
  74
  1
  467/560
  35
  #f
  399/89
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  mj09
  2
  5
  21
  app
  "\"'(eval (app h (-> (app #f) <-)) (env ()))\""
  130
  89
  20
  21
  57
  17
  74
  1
  467/560
  35
  #t
  399/89
  ((0 0 0) (0 0 0) (0 0 0)))
