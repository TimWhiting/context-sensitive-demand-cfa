'(clean-cache
  sat-3
  2
  25
  59
  letrec*
  "\"'(eval ((top) letrec* (println ... sat-solve-7) ...) (env ()))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  4
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  2
  59
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  #f)
'(clean-cache
  sat-3
  2
  59
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  #f)
'(clean-cache
  sat-3
  2
  59
  app
  "\"'(eval\n  (λ (n2) (-> (app try (λ (n3) ...)) <-))\n  (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  #f)
'(clean-cache
  sat-3
  2
  59
  app
  "\"'(eval\n  (λ (n3) (-> (app try (λ (n4) ...)) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  #f)
'(clean-cache
  sat-3
  2
  59
  app
  "\"'(eval\n  (λ (n4) (-> (app try (λ (n5) ...)) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  #f)
'(clean-cache
  sat-3
  2
  59
  app
  "\"'(eval\n  (λ (n5) (-> (app try (λ (n6) ...)) <-))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  #f)
'(clean-cache
  sat-3
  2
  59
  app
  "\"'(eval\n  (λ (n6) (-> (app try (λ (n7) ...)) <-))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  #f)
'(clean-cache
  sat-3
  2
  59
  app
  "\"'(eval\n  (λ (n7) (-> (app p n1 n2 n3 n4 n5 n6 n7) <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  #f)
'(clean-cache
  sat-3
  2
  25
  59
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 n4 n5 n6 (-> n7 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  20
  7
  3
  10
  1
  0
  1
  1
  1/7
  6
  #f
  8/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  2
  25
  59
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 n4 n5 (-> n6 <-) n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  20
  7
  3
  10
  1
  0
  1
  1
  1/7
  6
  #f
  8/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  2
  25
  59
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 n4 (-> n5 <-) n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  20
  7
  3
  10
  1
  0
  1
  1
  1/7
  6
  #f
  8/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  2
  25
  59
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 (-> n4 <-) n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  20
  7
  3
  10
  1
  0
  1
  1
  1/7
  6
  #f
  8/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  2
  25
  59
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 (-> n3 <-) n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  20
  7
  3
  10
  1
  0
  1
  1
  1/7
  6
  #f
  8/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  sat-3
  2
  25
  59
  ref-or-constructor
  "\"'(eval\n  (app p n1 (-> n2 <-) n3 n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  20
  7
  3
  10
  1
  0
  1
  1
  1/7
  6
  #f
  8/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  2
  25
  59
  ref-or-constructor
  "\"'(eval\n  (app p (-> n1 <-) n2 n3 n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  20
  7
  3
  10
  1
  0
  1
  1
  1/7
  6
  #f
  8/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  2
  25
  59
  ref-or-constructor
  "\"'(eval\n  (app (-> p <-) n1 n2 n3 n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  13
  3
  2
  8
  2
  2
  4
  1
  2/3
  3
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  2
  59
  let
  "\"'(eval (λ (f) (-> (let (_) ...) <-)) (env ((□? (f)))))\""
  #f)
'(clean-cache
  sat-3
  2
  25
  59
  app
  "\"'(eval\n  (let (... () (_ (-> (app println \"trying\") <-)) () ...) ...)\n  (env ((□? (f)))))\""
  9
  6
  0
  3
  1
  0
  1
  1
  1/6
  6
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  2
  59
  app
  "\"'(eval\n  (let (_) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  #f)
'(clean-cache
  sat-3
  2
  59
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  #f)
'(clean-cache
  sat-3
  2
  25
  59
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  2
  25
  59
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  24
  8
  8
  8
  0
  1
  1
  1
  0
  7
  #f
  7/4
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-3
  2
  59
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  #f)
'(clean-cache
  sat-3
  2
  25
  59
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  2
  25
  59
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  24
  8
  8
  8
  0
  1
  1
  1
  0
  7
  #f
  7/4
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-3
  2
  59
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4 x5 x6 x7)\n    (->\n     (app\n      and\n      (app or x1 x2)\n      (app or x1 (app not x2) (app not x3))\n      (app or x3 x4)\n      (app or (app not x4) x1)\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  #f)
'(clean-cache
  sat-3
  2
  25
  59
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  74
  34
  11
  29
  5
  2
  7
  1
  5/17
  23
  #f
  45/34
  ((9/2 9/2 0) (4 4 0) (9/2 9/2 0)))
'(clean-cache
  sat-3
  2
  25
  59
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  39
  12
  6
  21
  3
  2
  5
  1
  3/10
  10
  #f
  7/6
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-3
  2
  25
  59
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  35
  12
  6
  17
  3
  2
  5
  1
  3/10
  10
  #f
  7/6
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-3
  2
  25
  59
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  94
  48
  15
  31
  13
  6
  19
  1
  1/3
  34
  #f
  31/24
  ((11/2 11/2 0) (11/2 11/2 0) (11/2 11/2 0)))
'(clean-cache
  sat-3
  2
  25
  59
  app
  "\"'(eval\n  (app or (app not x2) (-> (app not x3) <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  44
  18
  6
  20
  5
  2
  7
  1
  5/14
  14
  #f
  11/9
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-3
  2
  25
  59
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  37
  12
  6
  19
  3
  2
  5
  1
  3/10
  10
  #f
  7/6
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-3
  2
  25
  59
  app
  "\"'(eval\n  (app or (-> (app not x2) <-) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  46
  18
  6
  22
  5
  2
  7
  1
  5/14
  14
  #f
  11/9
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-3
  2
  25
  59
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  39
  12
  6
  21
  3
  2
  5
  1
  3/10
  10
  #f
  7/6
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-3
  2
  25
  59
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (-> (app or (app not x4) x1) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  79
  38
  11
  30
  10
  5
  15
  1
  8/19
  25
  #f
  51/38
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  sat-3
  2
  25
  59
  ref-or-constructor
  "\"'(eval (app or (app not x4) (-> x1 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  40
  12
  6
  22
  8
  5
  13
  1
  4/5
  10
  #f
  7/6
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-3
  2
  25
  59
  app
  "\"'(eval (app or (-> (app not x4) <-) x1) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  42
  18
  6
  18
  5
  2
  7
  1
  5/14
  14
  #f
  11/9
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-3
  2
  25
  59
  ref-or-constructor
  "\"'(eval (app not (-> x4 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  35
  12
  6
  17
  3
  2
  5
  1
  3/10
  10
  #f
  7/6
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-3
  2
  25
  59
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or x3 x4) <-)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  84
  42
  15
  27
  13
  6
  19
  1
  7/17
  31
  #f
  53/42
  ((5 5 0) (11/2 11/2 0) (11/2 11/2 0)))
'(clean-cache
  sat-3
  2
  25
  59
  ref-or-constructor
  "\"'(eval (app or x3 (-> x4 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  35
  12
  6
  17
  3
  2
  5
  1
  3/10
  10
  #f
  7/6
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-3
  2
  25
  59
  ref-or-constructor
  "\"'(eval (app or (-> x3 <-) x4) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  37
  12
  6
  19
  3
  2
  5
  1
  3/10
  10
  #f
  7/6
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-3
  2
  25
  59
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  157
  80
  30
  47
  32
  19
  51
  1
  157/378
  56
  #f
  13/10
  ((29/2 29/2 0) (29/2 29/2 0) (29/2 29/2 0)))
'(clean-cache
  sat-3
  2
  25
  59
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  44
  18
  6
  20
  5
  2
  7
  1
  5/14
  14
  #f
  11/9
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-3
  2
  25
  59
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  37
  12
  6
  19
  3
  2
  5
  1
  3/10
  10
  #f
  7/6
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-3
  2
  25
  59
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  46
  18
  6
  22
  5
  2
  7
  1
  5/14
  14
  #f
  11/9
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-3
  2
  25
  59
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  39
  12
  6
  21
  3
  2
  5
  1
  3/10
  10
  #f
  7/6
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-3
  2
  25
  59
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  40
  12
  6
  22
  8
  5
  13
  1
  4/5
  10
  #f
  7/6
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-3
  2
  25
  59
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 x2) <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  91
  42
  15
  34
  20
  11
  31
  1
  29/51
  31
  #f
  53/42
  ((5 5 0) (5 5 0) (5 5 0)))
'(clean-cache
  sat-3
  2
  25
  59
  ref-or-constructor
  "\"'(eval (app or x1 (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  39
  12
  6
  21
  3
  2
  5
  1
  3/10
  10
  #f
  7/6
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-3
  2
  25
  59
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  40
  12
  6
  22
  8
  5
  13
  1
  4/5
  10
  #f
  7/6
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  sat-3
  2
  25
  59
  let
  "\"'(eval (λ (s) (-> (let (_) ...) <-)) (env ((□? (s)))))\""
  4
  3
  0
  1
  0
  0
  0
  1
  0
  3
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  2
  25
  59
  app
  "\"'(eval (let (... () (_ (-> (app display s) <-)) () ...) ...) (env ((□? (s)))))\""
  11
  6
  2
  3
  0
  1
  1
  1
  0
  6
  #t
  7/6
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  2
  25
  59
  ref-or-constructor
  "\"'(eval (app display (-> s <-)) (env ((□? (s)))))\""
  6
  2
  2
  2
  0
  1
  1
  1
  0
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  2
  25
  59
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env ((□? (s)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  2
  25
  59
  let
  "\"'(eval (letrec* (println ... sat-solve-7) (-> (let (_) ...) <-)) (env ()))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  3
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  sat-3
  2
  59
  app
  "\"'(eval\n  (let (... () (_ (-> (app display (app sat-solve-7 phi)) <-)) () ...) ...)\n  (env ()))\""
  #f)
'(clean-cache
  sat-3
  2
  59
  app
  "\"'(eval (app display (-> (app sat-solve-7 phi) <-)) (env ()))\""
  #f)
'(clean-cache
  sat-3
  2
  25
  59
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  2
  25
  59
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  46
  18
  6
  22
  5
  2
  7
  1
  5/14
  14
  #f
  11/9
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  sat-3
  2
  59
  app
  "\"'(eval\n  (λ (n6) (-> (app try (λ (n7) ...)) <-))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  #f)
'(shuffled-cache
  0
  sat-3
  2
  25
  59
  let
  "\"'(eval (letrec* (println ... sat-solve-7) (-> (let (_) ...) <-)) (env ()))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  3
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  2
  25
  59
  letrec*
  "\"'(eval ((top) letrec* (println ... sat-solve-7) ...) (env ()))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  4
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  2
  25
  59
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  43
  16
  6
  21
  7
  2
  9
  1
  1/2
  14
  #f
  9/8
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  sat-3
  2
  25
  59
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env ()))\""
  43
  16
  6
  21
  7
  2
  9
  1
  1/2
  14
  #t
  9/8
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  2
  25
  59
  ref-or-constructor
  "\"'(eval\n  (app p (-> n1 <-) n2 n3 n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  90
  34
  16
  40
  22
  11
  33
  1
  35/48
  29
  #f
  39/34
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  0
  sat-3
  2
  25
  59
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  103
  39
  24
  40
  23
  12
  35
  1
  2/3
  33
  #f
  53/39
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  sat-3
  2
  25
  59
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  104
  40
  24
  40
  23
  12
  35
  1
  19/30
  33
  #f
  11/8
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  2
  25
  59
  ref-or-constructor
  "\"'(eval\n  (app (-> p <-) n1 n2 n3 n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  109
  43
  26
  40
  25
  14
  39
  1
  44/69
  36
  #t
  58/43
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-3
  2
  25
  59
  app
  "\"'(eval\n  (let (... () (_ (-> (app println \"trying\") <-)) () ...) ...)\n  (env ((□? (f)))))\""
  122
  55
  26
  41
  35
  14
  49
  1
  233/348
  48
  #t
  71/55
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  2
  59
  app
  "\"'(eval\n  (λ (n7) (-> (app p n1 n2 n3 n4 n5 n6 n7) <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  #f)
'(shuffled-cache
  0
  sat-3
  2
  25
  59
  ref-or-constructor
  "\"'(eval (app or (-> x3 <-) x4) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  37
  12
  6
  19
  3
  2
  5
  1
  3/10
  10
  #f
  7/6
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  sat-3
  2
  25
  59
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  144
  72
  30
  42
  21
  10
  31
  1
  51/140
  53
  #f
  91/72
  ((14 14 0) (14 14 0) (29/2 29/2 0)))
'(shuffled-cache
  0
  sat-3
  2
  25
  59
  ref-or-constructor
  "\"'(eval\n  (app p n1 (-> n2 <-) n3 n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  154
  74
  31
  49
  21
  10
  31
  1
  51/140
  54
  #f
  47/37
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  sat-3
  2
  25
  59
  app
  "\"'(eval (app or (-> (app not x4) <-) x1) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  157
  77
  31
  49
  21
  10
  31
  1
  51/161
  55
  #f
  9/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  2
  25
  59
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 (-> n3 <-) n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  166
  81
  34
  51
  21
  10
  31
  1
  51/161
  58
  #f
  104/81
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  0
  sat-3
  2
  59
  app
  "\"'(eval\n  (λ (n5) (-> (app try (λ (n6) ...)) <-))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  #f)
'(shuffled-cache
  0
  sat-3
  2
  59
  app
  "\"'(eval\n  (λ (n2) (-> (app try (λ (n3) ...)) <-))\n  (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  #f)
'(shuffled-cache
  0
  sat-3
  2
  25
  59
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  40
  12
  6
  22
  8
  5
  13
  1
  4/5
  10
  #f
  7/6
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  sat-3
  2
  59
  app
  "\"'(eval\n  (let (... () (_ (-> (app display (app sat-solve-7 phi)) <-)) () ...) ...)\n  (env ()))\""
  #f)
'(shuffled-cache
  0
  sat-3
  2
  59
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  #f)
'(shuffled-cache
  0
  sat-3
  2
  25
  59
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 n4 (-> n5 <-) n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  20
  7
  3
  10
  1
  0
  1
  1
  1/7
  6
  #f
  8/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-3
  2
  59
  app
  "\"'(eval\n  (let (_) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  #f)
'(shuffled-cache
  0
  sat-3
  2
  25
  59
  ref-or-constructor
  "\"'(eval (app or x3 (-> x4 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  35
  12
  6
  17
  3
  2
  5
  1
  3/10
  10
  #f
  7/6
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  sat-3
  2
  59
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  #f)
'(shuffled-cache
  0
  sat-3
  2
  59
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  #f)
'(shuffled-cache
  0
  sat-3
  2
  25
  59
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  94
  48
  15
  31
  13
  6
  19
  1
  1/3
  34
  #f
  31/24
  ((11/2 11/2 0) (11/2 11/2 0) (11/2 11/2 0)))
'(shuffled-cache
  0
  sat-3
  2
  25
  59
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env ((□? (s)))))\""
  97
  50
  15
  32
  13
  6
  19
  1
  7/23
  36
  #t
  32/25
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  2
  59
  app
  "\"'(eval\n  (λ (n3) (-> (app try (λ (n4) ...)) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  #f)
'(shuffled-cache
  0
  sat-3
  2
  25
  59
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  2
  25
  59
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  46
  20
  6
  20
  5
  2
  7
  1
  5/14
  16
  #f
  6/5
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  sat-3
  2
  25
  59
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  89
  43
  15
  31
  13
  6
  19
  1
  2/5
  33
  #f
  53/43
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  0
  sat-3
  2
  59
  app
  "\"'(eval\n  (λ (n4) (-> (app try (λ (n5) ...)) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  #f)
'(shuffled-cache
  0
  sat-3
  2
  25
  59
  ref-or-constructor
  "\"'(eval (app or x1 (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  39
  12
  6
  21
  3
  2
  5
  1
  3/10
  10
  #f
  7/6
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  sat-3
  2
  25
  59
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  40
  13
  6
  21
  3
  2
  5
  1
  3/10
  11
  #t
  15/13
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  2
  25
  59
  app
  "\"'(eval (let (... () (_ (-> (app display s) <-)) () ...) ...) (env ((□? (s)))))\""
  49
  19
  8
  22
  5
  3
  8
  1
  2/7
  17
  #t
  22/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  2
  25
  59
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  79
  37
  13
  29
  7
  3
  10
  1
  13/51
  29
  #f
  47/37
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  0
  sat-3
  2
  25
  59
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  159
  85
  32
  42
  29
  11
  40
  1
  51/140
  67
  #f
  106/85
  ((12 12 0) (25/2 25/2 0) (25/2 25/2 0)))
'(shuffled-cache
  0
  sat-3
  2
  25
  59
  app
  "\"'(eval\n  (app or (app not x2) (-> (app not x3) <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  165
  90
  32
  43
  31
  11
  42
  1
  65/168
  70
  #f
  113/90
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  2
  25
  59
  app
  "\"'(eval\n  (app or (-> (app not x2) <-) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  168
  93
  32
  43
  31
  11
  42
  1
  65/189
  71
  #f
  118/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  2
  25
  59
  ref-or-constructor
  "\"'(eval (app display (-> s <-)) (env ((□? (s)))))\""
  168
  93
  32
  43
  31
  11
  42
  1
  65/189
  71
  #t
  118/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  2
  25
  59
  let
  "\"'(eval (λ (s) (-> (let (_) ...) <-)) (env ((□? (s)))))\""
  175
  100
  32
  43
  37
  11
  48
  1
  79/210
  78
  #t
  127/100
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  2
  25
  59
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 n4 n5 (-> n6 <-) n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  213
  124
  36
  53
  41
  11
  52
  1
  497/1440
  95
  #f
  40/31
  ((8 8 0) (8 8 0) (17/2 17/2 0)))
'(shuffled-cache
  0
  sat-3
  2
  59
  ref-or-constructor
  "\"'(eval (app or (app not x4) (-> x1 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  #f)
'(shuffled-cache
  0
  sat-3
  2
  25
  59
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 x2) <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  91
  42
  15
  34
  20
  11
  31
  1
  29/51
  31
  #f
  53/42
  ((5 5 0) (5 5 0) (5 5 0)))
'(shuffled-cache
  0
  sat-3
  2
  25
  59
  ref-or-constructor
  "\"'(eval (app not (-> x4 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  142
  67
  26
  49
  20
  11
  31
  1
  34/75
  46
  #f
  88/67
  ((17/2 17/2 0) (17/2 17/2 0) (17/2 17/2 0)))
'(shuffled-cache
  0
  sat-3
  2
  59
  app
  "\"'(eval (app display (-> (app sat-solve-7 phi) <-)) (env ()))\""
  #f)
'(shuffled-cache
  0
  sat-3
  2
  25
  59
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or x3 x4) <-)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  84
  42
  15
  27
  13
  6
  19
  1
  7/17
  31
  #f
  53/42
  ((11/2 11/2 0) (11/2 11/2 0) (11/2 11/2 0)))
'(shuffled-cache
  0
  sat-3
  2
  25
  59
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (-> (app or (app not x4) x1) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  141
  72
  26
  43
  18
  9
  27
  1
  42/125
  48
  #f
  4/3
  ((9 9 0) (17/2 17/2 0) (17/2 17/2 0)))
'(shuffled-cache
  0
  sat-3
  2
  25
  59
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  142
  73
  26
  43
  18
  9
  27
  1
  21/65
  48
  #f
  98/73
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  2
  25
  59
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 (-> n4 <-) n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  152
  75
  27
  50
  18
  9
  27
  1
  21/65
  49
  #f
  101/75
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  sat-3
  2
  59
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  #f)
'(shuffled-cache
  0
  sat-3
  2
  25
  59
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 n4 n5 n6 (-> n7 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  20
  7
  3
  10
  1
  0
  1
  1
  1/7
  6
  #f
  8/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-3
  2
  25
  59
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  61
  23
  10
  28
  3
  2
  5
  1
  1/4
  18
  #f
  28/23
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  0
  sat-3
  2
  59
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4 x5 x6 x7)\n    (->\n     (app\n      and\n      (app or x1 x2)\n      (app or x1 (app not x2) (app not x3))\n      (app or x3 x4)\n      (app or (app not x4) x1)\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  #f)
'(shuffled-cache
  0
  sat-3
  2
  59
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  #f)
'(shuffled-cache
  0
  sat-3
  2
  25
  59
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  24
  8
  8
  8
  0
  1
  1
  1
  0
  7
  #f
  7/4
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  sat-3
  2
  59
  let
  "\"'(eval (λ (f) (-> (let (_) ...) <-)) (env ((□? (f)))))\""
  #f)
'(shuffled-cache
  1
  sat-3
  2
  59
  app
  "\"'(eval\n  (λ (n6) (-> (app try (λ (n7) ...)) <-))\n  (env ((□? (n6)) (□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  #f)
'(shuffled-cache
  1
  sat-3
  2
  59
  app
  "\"'(eval\n  (λ (n5) (-> (app try (λ (n6) ...)) <-))\n  (env ((□? (n5)) (□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  #f)
'(shuffled-cache
  1
  sat-3
  2
  25
  59
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or x3 x4) <-)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  84
  42
  15
  27
  13
  6
  19
  1
  7/17
  31
  #f
  53/42
  ((11/2 11/2 0) (11/2 11/2 0) (11/2 11/2 0)))
'(shuffled-cache
  1
  sat-3
  2
  25
  59
  app
  "\"'(eval\n  (let (... () (_ (-> (app println \"trying\") <-)) () ...) ...)\n  (env ((□? (f)))))\""
  97
  54
  15
  28
  22
  6
  28
  1
  1/2
  43
  #t
  11/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  2
  25
  59
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env ((□? (s)))))\""
  100
  56
  15
  29
  22
  6
  28
  1
  65/138
  45
  #t
  17/14
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  2
  25
  59
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))\""
  119
  61
  23
  35
  22
  7
  29
  1
  5/12
  49
  #f
  82/61
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  sat-3
  2
  25
  59
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env ()))\""
  121
  63
  23
  35
  24
  7
  31
  1
  11/24
  51
  #t
  4/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  2
  25
  59
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  124
  66
  23
  35
  24
  7
  31
  1
  77/186
  52
  #f
  89/66
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  2
  59
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env ((□? (f)))))\""
  #f)
'(shuffled-cache
  1
  sat-3
  2
  25
  59
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  40
  12
  6
  22
  8
  5
  13
  1
  4/5
  10
  #f
  7/6
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  sat-3
  2
  25
  59
  let
  "\"'(eval (letrec* (println ... sat-solve-7) (-> (let (_) ...) <-)) (env ()))\""
  43
  15
  6
  22
  11
  5
  16
  1
  11/13
  13
  #t
  17/15
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  2
  25
  59
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  72
  30
  11
  31
  11
  5
  16
  1
  9/16
  22
  #f
  19/15
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  1
  sat-3
  2
  59
  app
  "\"'(eval\n  (λ (n4) (-> (app try (λ (n5) ...)) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  #f)
'(shuffled-cache
  1
  sat-3
  2
  25
  59
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 n4 n5 (-> n6 <-) n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  20
  7
  3
  10
  1
  0
  1
  1
  1/7
  6
  #f
  8/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-3
  2
  25
  59
  letrec*
  "\"'(eval ((top) letrec* (println ... sat-solve-7) ...) (env ()))\""
  24
  11
  3
  10
  5
  0
  5
  1
  5/11
  10
  #t
  12/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  2
  25
  59
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  68
  27
  10
  31
  7
  2
  9
  1
  7/16
  22
  #f
  32/27
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  1
  sat-3
  2
  25
  59
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (-> (app or (app not x4) x1) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  178
  89
  30
  59
  24
  11
  35
  1
  19/42
  62
  #f
  116/89
  ((22 22 0) (43/2 43/2 0) (22 22 0)))
'(shuffled-cache
  1
  sat-3
  2
  25
  59
  ref-or-constructor
  "\"'(eval (app or x3 (-> x4 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  179
  90
  30
  59
  24
  11
  35
  1
  38/87
  62
  #f
  59/45
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  2
  59
  let
  "\"'(eval (λ (f) (-> (let (_) ...) <-)) (env ((□? (f)))))\""
  #f)
'(shuffled-cache
  1
  sat-3
  2
  25
  59
  ref-or-constructor
  "\"'(eval\n  (app p n1 (-> n2 <-) n3 n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  20
  7
  3
  10
  1
  0
  1
  1
  1/7
  6
  #f
  8/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  2
  25
  59
  ref-or-constructor
  "\"'(eval (app or (app not x4) (-> x1 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  77
  23
  14
  40
  10
  9
  19
  1
  13/24
  18
  #f
  28/23
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  sat-3
  2
  59
  app
  "\"'(eval\n  (let (_) (-> (app or (app f (app #t)) (app f (app #f))) <-))\n  (env ((□? (f)))))\""
  #f)
'(shuffled-cache
  1
  sat-3
  2
  25
  59
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  39
  12
  6
  21
  3
  2
  5
  1
  3/10
  10
  #f
  7/6
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  sat-3
  2
  59
  app
  "\"'(eval\n  (λ (n3) (-> (app try (λ (n4) ...)) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))\""
  #f)
'(shuffled-cache
  1
  sat-3
  2
  25
  59
  app
  "\"'(eval\n  (app or (-> (app not x2) <-) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  46
  18
  6
  22
  5
  2
  7
  1
  5/14
  14
  #f
  11/9
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  sat-3
  2
  25
  59
  ref-or-constructor
  "\"'(eval (app display (-> s <-)) (env ((□? (s)))))\""
  51
  20
  8
  23
  5
  3
  8
  1
  5/16
  16
  #t
  6/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  2
  59
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))\""
  #f)
'(shuffled-cache
  1
  sat-3
  2
  25
  59
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 (-> n3 <-) n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  20
  7
  3
  10
  1
  0
  1
  1
  1/7
  6
  #f
  8/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-3
  2
  25
  59
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  81
  29
  14
  38
  5
  6
  11
  1
  5/16
  22
  #f
  36/29
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  1
  sat-3
  2
  25
  59
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 n4 n5 n6 (-> n7 <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  115
  48
  20
  47
  9
  6
  15
  1
  1/3
  36
  #f
  5/4
  ((6 6 0) (6 6 0) (6 6 0)))
'(shuffled-cache
  1
  sat-3
  2
  25
  59
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 (-> n4 <-) n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  179
  79
  32
  68
  17
  10
  27
  1
  11/30
  64
  #f
  94/79
  ((17/2 17/2 0) (8 8 0) (8 8 0)))
'(shuffled-cache
  1
  sat-3
  2
  25
  59
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 x2) <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  244
  123
  41
  80
  38
  19
  57
  1
  107/234
  90
  #f
  52/41
  ((16 16 0) (16 16 0) (33/2 33/2 0)))
'(shuffled-cache
  1
  sat-3
  2
  25
  59
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  280
  147
  49
  84
  50
  23
  73
  1
  2081/4455
  104
  #f
  190/147
  ((17 17 0) (17 17 0) (17 17 0)))
'(shuffled-cache
  1
  sat-3
  2
  59
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  #f)
'(shuffled-cache
  1
  sat-3
  2
  25
  59
  app
  "\"'(eval\n  (app or (app not x2) (-> (app not x3) <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  44
  18
  6
  20
  5
  2
  7
  1
  5/14
  14
  #f
  11/9
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  sat-3
  2
  25
  59
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  76
  33
  11
  32
  10
  5
  15
  1
  8/17
  23
  #f
  43/33
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  sat-3
  2
  25
  59
  ref-or-constructor
  "\"'(eval\n  (app (-> p <-) n1 n2 n3 n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  88
  36
  13
  39
  12
  7
  19
  1
  1/2
  26
  #t
  23/18
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-3
  2
  25
  59
  app
  "\"'(eval (let (... () (_ (-> (app display s) <-)) () ...) ...) (env ((□? (s)))))\""
  100
  45
  15
  40
  17
  8
  25
  1
  71/144
  35
  #t
  19/15
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  2
  59
  app
  "\"'(eval\n  (λ (n7) (-> (app p n1 n2 n3 n4 n5 n6 n7) <-))\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  #f)
'(shuffled-cache
  1
  sat-3
  2
  59
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4 x5 x6 x7)\n    (->\n     (app\n      and\n      (app or x1 x2)\n      (app or x1 (app not x2) (app not x3))\n      (app or x3 x4)\n      (app or (app not x4) x1)\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  #f)
'(shuffled-cache
  1
  sat-3
  2
  25
  59
  ref-or-constructor
  "\"'(eval\n  (app p n1 n2 n3 n4 (-> n5 <-) n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  20
  7
  3
  10
  1
  0
  1
  1
  1/7
  6
  #f
  8/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-3
  2
  25
  59
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  192
  99
  34
  59
  32
  19
  51
  1
  173/468
  68
  #f
  130/99
  ((49/2 49/2 0) (25 25 0) (49/2 49/2 0)))
'(shuffled-cache
  1
  sat-3
  2
  25
  59
  let
  "\"'(eval (λ (s) (-> (let (_) ...) <-)) (env ((□? (s)))))\""
  196
  102
  34
  60
  32
  19
  51
  1
  173/522
  71
  #t
  133/102
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  2
  59
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))\""
  #f)
'(shuffled-cache
  1
  sat-3
  2
  25
  59
  ref-or-constructor
  "\"'(eval (app or (-> x3 <-) x4) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  37
  12
  6
  19
  3
  2
  5
  1
  3/10
  10
  #f
  7/6
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  sat-3
  2
  59
  app
  "\"'(eval\n  (λ (n2) (-> (app try (λ (n3) ...)) <-))\n  (env ((□? (n2)) (□? (n1)) (□? (p)))))\""
  #f)
'(shuffled-cache
  1
  sat-3
  2
  25
  59
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  74
  34
  11
  29
  5
  2
  7
  1
  5/17
  23
  #f
  45/34
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  1
  sat-3
  2
  59
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env ((□? (f)))))\""
  #f)
'(shuffled-cache
  1
  sat-3
  2
  25
  59
  app
  "\"'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  2
  25
  59
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))\""
  40
  17
  8
  15
  0
  1
  1
  1
  0
  16
  #f
  23/17
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  sat-3
  2
  25
  59
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  136
  71
  23
  42
  15
  7
  22
  1
  789/3190
  56
  #f
  141/71
  ((17/2 17/2 0) (17/2 17/2 0) (17/2 17/2 0)))
'(shuffled-cache
  1
  sat-3
  2
  59
  app
  "\"'(eval\n  (let (... () (_ (-> (app display (app sat-solve-7 phi)) <-)) () ...) ...)\n  (env ()))\""
  #f)
'(shuffled-cache
  1
  sat-3
  2
  25
  59
  app
  "\"'(eval (app or (-> (app not x4) <-) x1) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  42
  18
  6
  18
  5
  2
  7
  1
  5/14
  14
  #f
  11/9
  ((3/2 3/2 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  sat-3
  2
  25
  59
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  73
  33
  11
  29
  5
  2
  7
  1
  5/17
  23
  #f
  43/33
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  1
  sat-3
  2
  25
  59
  ref-or-constructor
  "\"'(eval (app not (-> x4 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  73
  33
  11
  29
  5
  2
  7
  1
  5/17
  23
  #f
  43/33
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  2
  59
  app
  "\"'(eval (app display (-> (app sat-solve-7 phi) <-)) (env ()))\""
  #f)
'(shuffled-cache
  1
  sat-3
  2
  25
  59
  ref-or-constructor
  "\"'(eval (app or x1 (-> x2 <-)) (env ((□? (x1 x2 x3 x4 x5 x6 x7)))))\""
  39
  12
  6
  21
  3
  2
  5
  1
  3/10
  10
  #f
  7/6
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  sat-3
  2
  25
  59
  ref-or-constructor
  "\"'(eval\n  (app p (-> n1 <-) n2 n3 n4 n5 n6 n7)\n  (env\n   ((□? (n7))\n    (□? (n6))\n    (□? (n5))\n    (□? (n4))\n    (□? (n3))\n    (□? (n2))\n    (□? (n1))\n    (□? (p)))))\""
  86
  30
  16
  40
  18
  11
  29
  1
  23/36
  25
  #f
  7/6
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  1
  sat-3
  2
  25
  59
  app
  "\"'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))\""
  87
  31
  16
  40
  18
  11
  29
  1
  451/720
  26
  #t
  36/31
  ((0 0 0) (0 0 0) (0 0 0)))
