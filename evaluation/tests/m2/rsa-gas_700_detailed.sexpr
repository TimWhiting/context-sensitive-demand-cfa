'(clean-cache
  rsa
  2
  700
  220
  lettypes
  "'(eval ((top) lettypes (cons ... error) ...) (env ()))"
  #f
  #f)
'(clean-cache
  rsa
  2
  700
  220
  letrec*
  "'(eval\n  (lettypes cons ... error (letrec* (car ... decrypted-ciphertext) ...))\n  (env ()))"
  #f
  #f)
'(clean-cache
  rsa
  2
  700
  220
  app
  "'(eval\n  (letrec*\n   (...\n    ciphertext\n    (decrypted-ciphertext (-> (app decrypt ciphertext d n) <-))\n    ()\n    ...)\n   ...)\n  (env ()))"
  #f
  #f)
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval (app decrypt ciphertext d (-> n <-)) (env ()))"
  #f
  7
  7
  0
  0
  7
  0
  7
  1
  1
  7
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval (app decrypt ciphertext (-> d <-) n) (env ()))"
  #f
  303
  278
  18
  7
  222
  8
  230
  1
  3151/3570
  184
  #f
  195/139
  (38 38 0))
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval (app decrypt (-> ciphertext <-) d n) (env ()))"
  #f
  690
  647
  29
  14
  526
  14
  540
  1
  7013/7896
  387
  #f
  925/647
  (126 130 2))
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval (app (-> decrypt <-) ciphertext d n) (env ()))"
  (lambda number char string quoted constructor)
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  app
  "'(eval\n  (letrec*\n   (...\n    plaintext\n    (ciphertext (-> (app encrypt plaintext e n) <-))\n    decrypted-ciphertext\n    ...)\n   ...)\n  (env ()))"
  #f
  690
  647
  29
  14
  526
  14
  540
  1
  7013/7896
  387
  #f
  925/647
  (126 129 1))
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval (app encrypt plaintext e (-> n <-)) (env ()))"
  #f
  7
  7
  0
  0
  7
  0
  7
  1
  1
  7
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval (app encrypt plaintext (-> e <-) n) (env ()))"
  (number char string quoted constructor)
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval (app encrypt (-> plaintext <-) e n) (env ()))"
  (number char string quoted constructor)
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval (app (-> encrypt <-) plaintext e n) (env ()))"
  (lambda number char string quoted constructor)
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  number
  "'(eval (letrec* (... d (plaintext (-> 42 <-)) ciphertext ...) ...) (env ()))"
  (number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  app
  "'(eval\n  (letrec* (... e (d (-> (app private-exponent e p q) <-)) plaintext ...) ...)\n  (env ()))"
  #f
  302
  277
  18
  7
  221
  8
  229
  1
  3121/3540
  184
  #f
  388/277
  (38 39 0))
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval (app private-exponent e p (-> q <-)) (env ()))"
  (number char string quoted constructor)
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval (app private-exponent e (-> p <-) q) (env ()))"
  (number char string quoted constructor)
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval (app private-exponent (-> e <-) p q) (env ()))"
  (number char string quoted constructor)
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval (app (-> private-exponent <-) e p q) (env ()))"
  (lambda number char string quoted constructor)
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  number
  "'(eval (letrec* (... n (e (-> 7 <-)) d ...) ...) (env ()))"
  (number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  app
  "'(eval (letrec* (... q (n (-> (app * p q) <-)) e ...) ...) (env ()))"
  #f
  6
  6
  0
  0
  6
  0
  6
  1
  1
  6
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval (app * p (-> q <-)) (env ()))"
  (number char string quoted constructor)
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval (app * (-> p <-) q) (env ()))"
  (number char string quoted constructor)
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval (app (-> * <-) p q) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  number
  "'(eval (letrec* (... p (q (-> 47 <-)) n ...) ...) (env ()))"
  (number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  number
  "'(eval (letrec* (... decrypt (p (-> 41 <-)) q ...) ...) (env ()))"
  (number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  lambda
  "'(eval\n  (letrec* (... encrypt (decrypt (-> (λ (c d n) ...) <-)) p ...) ...)\n  (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  app
  "'(eval (λ (c d n) (-> (app modulo-power c d n) <-)) (env ((□? (c d n)))))"
  #f
  #f)
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval (app modulo-power c d (-> n <-)) (env ((□? (c d n)))))"
  #f
  11
  8
  2
  1
  7
  2
  9
  1
  7/8
  8
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval (app modulo-power c (-> d <-) n) (env ((□? (c d n)))))"
  #f
  307
  279
  20
  8
  222
  10
  232
  1
  3151/3600
  184
  #f
  392/279
  (38 39 0))
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval (app modulo-power (-> c <-) d n) (env ((□? (c d n)))))"
  #f
  675
  633
  29
  13
  526
  14
  540
  1
  92039/102648
  380
  #f
  904/633
  (120 123 2))
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval (app (-> modulo-power <-) c d n) (env ((□? (c d n)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  lambda
  "'(eval\n  (letrec*\n   (... private-exponent (encrypt (-> (λ (m e n) ...) <-)) decrypt ...)\n   ...)\n  (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  match
  "'(eval (λ (m e n) (-> (match (app > m n) ...) <-)) (env ((□? (m e n)))))"
  #f
  681
  639
  29
  13
  526
  14
  540
  1
  33980/38493
  377
  #f
  919/639
  (119 123 1))
'(clean-cache
  rsa
  2
  700
  220
  app
  "'(eval\n  (match\n   (app > m n)\n   (#f)\n   (_ (-> (app error \"The modulus is too small to encrypt the message.\") <-)))\n  (env ((□? (m e n)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  string
  "'(eval\n  (app error (-> \"The modulus is too small to encrypt the message.\" <-))\n  (env ((□? (m e n)))))"
  (string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval\n  (app (-> error <-) \"The modulus is too small to encrypt the message.\")\n  (env ((□? (m e n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  app
  "'(eval\n  (match (app > m n) ((#f) (-> (app modulo-power m e n) <-)) _)\n  (env ((□? (m e n)))))"
  #f
  #f)
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval (app modulo-power m e (-> n <-)) (env ((□? (m e n)))))"
  #f
  11
  8
  2
  1
  7
  2
  9
  1
  7/8
  8
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval (app modulo-power m (-> e <-) n) (env ((□? (m e n)))))"
  #f
  6
  3
  2
  1
  2
  2
  4
  1
  2/3
  3
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval (app modulo-power (-> m <-) e n) (env ((□? (m e n)))))"
  #f
  6
  3
  2
  1
  2
  2
  4
  1
  2/3
  3
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval (app (-> modulo-power <-) m e n) (env ((□? (m e n)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  app
  "'(eval (match (-> (app > m n) <-) (#f) _) (env ((□? (m e n)))))"
  #f
  19
  16
  2
  1
  12
  2
  14
  1
  21/26
  16
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval (app > m (-> n <-)) (env ((□? (m e n)))))"
  #f
  11
  8
  2
  1
  7
  2
  9
  1
  7/8
  8
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval (app > (-> m <-) n) (env ((□? (m e n)))))"
  #f
  6
  3
  2
  1
  2
  2
  4
  1
  2/3
  3
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval (app (-> > <-) m n) (env ((□? (m e n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  lambda
  "'(eval\n  (letrec*\n   (...\n    is-legal-public-exponent?\n    (private-exponent (-> (λ (e p q) ...) <-))\n    encrypt\n    ...)\n   ...)\n  (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  match
  "'(eval\n  (λ (e p q) (-> (match (app is-legal-public-exponent? e p q) ...) <-))\n  (env ((□? (e p q)))))"
  #f
  324
  299
  18
  7
  217
  8
  225
  1
  1313/1725
  206
  #f
  410/299
  (40 41 0))
'(clean-cache
  rsa
  2
  700
  220
  app
  "'(eval\n  (match\n   (app is-legal-public-exponent? e p q)\n   (#f)\n   (_ (-> (app modulo-inverse e (app totient p q)) <-)))\n  (env ((□? (e p q)))))"
  #f
  264
  241
  16
  7
  164
  7
  171
  1
  1239/1640
  141
  #f
  364/241
  (39 40 0))
'(clean-cache
  rsa
  2
  700
  220
  app
  "'(eval (app modulo-inverse e (-> (app totient p q) <-)) (env ((□? (e p q)))))"
  #f
  41
  32
  6
  3
  18
  3
  21
  1
  23/38
  32
  #t
  1
  (3 3 0))
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval (app totient p (-> q <-)) (env ((□? (e p q)))))"
  #f
  6
  3
  2
  1
  2
  2
  4
  1
  2/3
  3
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval (app totient (-> p <-) q) (env ((□? (e p q)))))"
  #f
  6
  3
  2
  1
  2
  2
  4
  1
  2/3
  3
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval (app (-> totient <-) p q) (env ((□? (e p q)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval (app modulo-inverse (-> e <-) (app totient p q)) (env ((□? (e p q)))))"
  #f
  6
  3
  2
  1
  2
  2
  4
  1
  2/3
  3
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval (app (-> modulo-inverse <-) e (app totient p q)) (env ((□? (e p q)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  app
  "'(eval\n  (match\n   (app is-legal-public-exponent? e p q)\n   ((#f) (-> (app error \"Not a legal public exponent for that modulus.\") <-))\n   _)\n  (env ((□? (e p q)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  string
  "'(eval\n  (app error (-> \"Not a legal public exponent for that modulus.\" <-))\n  (env ((□? (e p q)))))"
  (string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval\n  (app (-> error <-) \"Not a legal public exponent for that modulus.\")\n  (env ((□? (e p q)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  app
  "'(eval\n  (match (-> (app is-legal-public-exponent? e p q) <-) (#f) _)\n  (env ((□? (e p q)))))"
  #f
  102
  91
  8
  3
  58
  4
  62
  1
  2/3
  91
  #t
  1
  (8 8 0))
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval (app is-legal-public-exponent? e p (-> q <-)) (env ((□? (e p q)))))"
  #f
  6
  3
  2
  1
  2
  2
  4
  1
  2/3
  3
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval (app is-legal-public-exponent? e (-> p <-) q) (env ((□? (e p q)))))"
  #f
  6
  3
  2
  1
  2
  2
  4
  1
  2/3
  3
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval (app is-legal-public-exponent? (-> e <-) p q) (env ((□? (e p q)))))"
  #f
  6
  3
  2
  1
  2
  2
  4
  1
  2/3
  3
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval (app (-> is-legal-public-exponent? <-) e p q) (env ((□? (e p q)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  lambda
  "'(eval\n  (letrec*\n   (...\n    modulo-power\n    (is-legal-public-exponent? (-> (λ (e p q) ...) <-))\n    private-exponent\n    ...)\n   ...)\n  (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  match
  "'(eval (λ (e p q) (-> (match (app < 1 e) ...) <-)) (env ((□? (e p q)))))"
  #f
  86
  75
  8
  3
  55
  4
  59
  1
  223/276
  75
  #t
  1
  (6 6 0))
'(clean-cache
  rsa
  2
  700
  220
  match
  "'(eval\n  (match (app < 1 e) (#f) (_ (-> (match (app < e (app totient ...)) ...) <-)))\n  (env ((□? (e p q)))))"
  #f
  82
  71
  8
  3
  50
  4
  54
  1
  95/123
  71
  #t
  1
  (5 5 0))
'(clean-cache
  rsa
  2
  700
  220
  match
  "'(eval\n  (match\n   (app < e (app totient p q))\n   (#f)\n   (_ (-> (match (app = 1 (app gcd ...)) ...) <-)))\n  (env ((□? (e p q)))))"
  #f
  67
  56
  8
  3
  32
  4
  36
  1
  139/198
  56
  #t
  1
  (4 4 0))
'(clean-cache
  rsa
  2
  700
  220
  app
  "'(eval\n  (match (app = 1 (app gcd e (app totient ...))) (#f) (_ (-> (app #t) <-)))\n  (env ((□? (e p q)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (e p q)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  app
  "'(eval\n  (match (app = 1 (app gcd e (app totient ...))) ((#f) (-> (app #f) <-)) _)\n  (env ((□? (e p q)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (e p q)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  app
  "'(eval\n  (match (-> (app = 1 (app gcd e (app totient ...))) <-) (#f) _)\n  (env ((□? (e p q)))))"
  #f
  59
  48
  8
  3
  29
  4
  33
  1
  11/15
  48
  #t
  1
  (4 4 0))
'(clean-cache
  rsa
  2
  700
  220
  app
  "'(eval (app = 1 (-> (app gcd e (app totient p q)) <-)) (env ((□? (e p q)))))"
  #f
  50
  39
  8
  3
  26
  4
  30
  1
  7/9
  39
  #t
  1
  (3 4 0))
'(clean-cache
  rsa
  2
  700
  220
  app
  "'(eval (app gcd e (-> (app totient p q) <-)) (env ((□? (e p q)))))"
  #f
  51
  39
  8
  4
  20
  4
  24
  1
  4/7
  39
  #t
  1
  (4 5 0))
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval (app totient p (-> q <-)) (env ((□? (e p q)))))"
  #f
  12
  5
  4
  3
  3
  3
  6
  1
  5/8
  5
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval (app totient (-> p <-) q) (env ((□? (e p q)))))"
  #f
  12
  5
  4
  3
  3
  3
  6
  1
  5/8
  5
  #t
  1
  (0 1 0))
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval (app (-> totient <-) p q) (env ((□? (e p q)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval (app gcd (-> e <-) (app totient p q)) (env ((□? (e p q)))))"
  #f
  12
  5
  4
  3
  3
  3
  6
  1
  5/8
  5
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval (app (-> gcd <-) e (app totient p q)) (env ((□? (e p q)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  number
  "'(eval (app = (-> 1 <-) (app gcd e (app totient p q))) (env ((□? (e p q)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval (app (-> = <-) 1 (app gcd e (app totient p q))) (env ((□? (e p q)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  app
  "'(eval\n  (match (app < e (app totient p q)) ((#f) (-> (app #f) <-)) _)\n  (env ((□? (e p q)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (e p q)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  app
  "'(eval (match (-> (app < e (app totient p q)) <-) (#f) _) (env ((□? (e p q)))))"
  #f
  50
  39
  8
  3
  26
  4
  30
  1
  7/9
  39
  #t
  1
  (3 3 0))
'(clean-cache
  rsa
  2
  700
  220
  app
  "'(eval (app < e (-> (app totient p q) <-)) (env ((□? (e p q)))))"
  #f
  51
  39
  8
  4
  20
  4
  24
  1
  4/7
  39
  #t
  1
  (4 4 0))
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval (app totient p (-> q <-)) (env ((□? (e p q)))))"
  #f
  12
  5
  4
  3
  3
  3
  6
  1
  5/8
  5
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval (app totient (-> p <-) q) (env ((□? (e p q)))))"
  #f
  12
  5
  4
  3
  3
  3
  6
  1
  5/8
  5
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval (app (-> totient <-) p q) (env ((□? (e p q)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval (app < (-> e <-) (app totient p q)) (env ((□? (e p q)))))"
  #f
  12
  5
  4
  3
  3
  3
  6
  1
  5/8
  5
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval (app (-> < <-) e (app totient p q)) (env ((□? (e p q)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  app
  "'(eval (match (app < 1 e) ((#f) (-> (app #f) <-)) _) (env ((□? (e p q)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (e p q)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  app
  "'(eval (match (-> (app < 1 e) <-) (#f) _) (env ((□? (e p q)))))"
  #f
  21
  14
  4
  3
  6
  3
  9
  1
  1/2
  14
  #t
  1
  (1 1 0))
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval (app < 1 (-> e <-)) (env ((□? (e p q)))))"
  #f
  12
  5
  4
  3
  3
  3
  6
  1
  5/8
  5
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  number
  "'(eval (app < (-> 1 <-) e) (env ((□? (e p q)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval (app (-> < <-) 1 e) (env ((□? (e p q)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  lambda
  "'(eval\n  (letrec*\n   (...\n    square\n    (modulo-power (-> (λ (base exp n) ...) <-))\n    is-legal-public-exponent?\n    ...)\n   ...)\n  (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  match
  "'(eval\n  (λ (base exp n) (-> (match (app = exp 0) ...) <-))\n  (env ((□? (base exp n)))))"
  #f
  #f)
'(clean-cache
  rsa
  2
  700
  220
  number
  "'(eval (match (app = exp 0) (#f) (_ (-> 1 <-))) (env ((□? (base exp n)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  match
  "'(eval\n  (match (app = exp 0) ((#f) (-> (match (app odd? exp) ...) <-)) _)\n  (env ((□? (base exp n)))))"
  #f
  #f)
'(clean-cache
  rsa
  2
  700
  220
  app
  "'(eval\n  (match\n   (app odd? exp)\n   (#f)\n   (_ (-> (app modulo (app * base (app modulo-power ...)) n) <-)))\n  (env ((□? (base exp n)))))"
  #f
  #f)
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval\n  (app modulo (app * base (app modulo-power base (app - ...) n)) (-> n <-))\n  (env ((□? (base exp n)))))"
  #f
  55
  40
  9
  6
  30
  5
  35
  1
  954/1183
  40
  #t
  1
  (15 16 0))
'(clean-cache
  rsa
  2
  700
  220
  app
  "'(eval\n  (app modulo (-> (app * base (app modulo-power base (app - ...) n)) <-) n)\n  (env ((□? (base exp n)))))"
  #f
  #f)
'(clean-cache
  rsa
  2
  700
  220
  app
  "'(eval\n  (app * base (-> (app modulo-power base (app - exp 1) n) <-))\n  (env ((□? (base exp n)))))"
  #f
  #f)
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval\n  (app modulo-power base (app - exp 1) (-> n <-))\n  (env ((□? (base exp n)))))"
  #f
  55
  40
  9
  6
  30
  5
  35
  1
  73/84
  40
  #t
  1
  (18 19 0))
'(clean-cache
  rsa
  2
  700
  220
  app
  "'(eval\n  (app modulo-power base (-> (app - exp 1) <-) n)\n  (env ((□? (base exp n)))))"
  #f
  432
  392
  27
  13
  305
  13
  318
  1
  308251/354900
  253
  #f
  549/392
  (63 65 0))
'(clean-cache
  rsa
  2
  700
  220
  number
  "'(eval (app - exp (-> 1 <-)) (env ((□? (base exp n)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval (app - (-> exp <-) 1) (env ((□? (base exp n)))))"
  #f
  420
  380
  27
  13
  305
  13
  318
  1
  3415421/3903900
  244
  #f
  267/190
  (57 59 0))
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval (app (-> - <-) exp 1) (env ((□? (base exp n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval\n  (app modulo-power (-> base <-) (app - exp 1) n)\n  (env ((□? (base exp n)))))"
  #f
  656
  614
  29
  13
  517
  14
  531
  1
  15166903/16936920
  379
  #f
  867/614
  (102 105 2))
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval\n  (app (-> modulo-power <-) base (app - exp 1) n)\n  (env ((□? (base exp n)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval\n  (app * (-> base <-) (app modulo-power base (app - exp 1) n))\n  (env ((□? (base exp n)))))"
  #f
  656
  614
  29
  13
  517
  14
  531
  1
  7578419/8468460
  379
  #f
  867/614
  (103 105 3))
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval\n  (app (-> * <-) base (app modulo-power base (app - exp 1) n))\n  (env ((□? (base exp n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval\n  (app (-> modulo <-) (app * base (app modulo-power base (app - ...) n)) n)\n  (env ((□? (base exp n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  app
  "'(eval\n  (match\n   (app odd? exp)\n   ((#f) (-> (app modulo (app square (app modulo-power ...)) n) <-))\n   _)\n  (env ((□? (base exp n)))))"
  #f
  #f)
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval\n  (app modulo (app square (app modulo-power base (app / ...) n)) (-> n <-))\n  (env ((□? (base exp n)))))"
  #f
  55
  40
  9
  6
  30
  5
  35
  1
  954/1183
  40
  #t
  1
  (16 16 0))
'(clean-cache
  rsa
  2
  700
  220
  app
  "'(eval\n  (app modulo (-> (app square (app modulo-power base (app / ...) n)) <-) n)\n  (env ((□? (base exp n)))))"
  #f
  #f)
'(clean-cache
  rsa
  2
  700
  220
  app
  "'(eval\n  (app square (-> (app modulo-power base (app / exp 2) n) <-))\n  (env ((□? (base exp n)))))"
  #f
  #f)
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval\n  (app modulo-power base (app / exp 2) (-> n <-))\n  (env ((□? (base exp n)))))"
  #f
  54
  39
  9
  6
  30
  5
  35
  1
  159/182
  39
  #t
  1
  (13 13 0))
'(clean-cache
  rsa
  2
  700
  220
  app
  "'(eval\n  (app modulo-power base (-> (app / exp 2) <-) n)\n  (env ((□? (base exp n)))))"
  #f
  422
  382
  27
  13
  305
  13
  318
  1
  310291/354900
  246
  #f
  268/191
  (58 60 1))
'(clean-cache
  rsa
  2
  700
  220
  number
  "'(eval (app / exp (-> 2 <-)) (env ((□? (base exp n)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval (app / (-> exp <-) 2) (env ((□? (base exp n)))))"
  #f
  420
  380
  27
  13
  305
  13
  318
  1
  310591/354900
  244
  #f
  267/190
  (57 59 0))
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval (app (-> / <-) exp 2) (env ((□? (base exp n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval\n  (app modulo-power (-> base <-) (app / exp 2) n)\n  (env ((□? (base exp n)))))"
  #f
  655
  613
  29
  13
  517
  14
  531
  1
  15171853/16936920
  379
  #f
  865/613
  (105 110 2))
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval\n  (app (-> modulo-power <-) base (app / exp 2) n)\n  (env ((□? (base exp n)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval\n  (app (-> square <-) (app modulo-power base (app / exp 2) n))\n  (env ((□? (base exp n)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval\n  (app (-> modulo <-) (app square (app modulo-power base (app / ...) n)) n)\n  (env ((□? (base exp n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  app
  "'(eval (match (-> (app odd? exp) <-) (#f) _) (env ((□? (base exp n)))))"
  #f
  448
  408
  27
  13
  325
  13
  338
  1
  314641/363090
  261
  #f
  191/136
  (61 62 1))
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval (app odd? (-> exp <-)) (env ((□? (base exp n)))))"
  #f
  420
  380
  27
  13
  305
  13
  318
  1
  310741/357630
  244
  #f
  267/190
  (55 56 0))
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval (app (-> odd? <-) exp) (env ((□? (base exp n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  app
  "'(eval (match (-> (app = exp 0) <-) (#f) _) (env ((□? (base exp n)))))"
  #f
  462
  422
  27
  13
  335
  13
  348
  1
  316591/365820
  275
  #f
  587/422
  (62 64 2))
'(clean-cache
  rsa
  2
  700
  220
  number
  "'(eval (app = exp (-> 0 <-)) (env ((□? (base exp n)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval (app = (-> exp <-) 0) (env ((□? (base exp n)))))"
  #f
  420
  380
  27
  13
  305
  13
  318
  1
  310741/357630
  244
  #f
  267/190
  (62 63 0))
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval (app (-> = <-) exp 0) (env ((□? (base exp n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  lambda
  "'(eval\n  (letrec* (... totient (square (-> (λ (x) ...) <-)) modulo-power ...) ...)\n  (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  app
  "'(eval (λ (x) (-> (app * x x) <-)) (env ((□? (x)))))"
  #f
  #f)
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval (app * x (-> x <-)) (env ((□? (x)))))"
  #f
  #f)
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval (app * (-> x <-) x) (env ((□? (x)))))"
  #f
  #f)
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval (app (-> * <-) x x) (env ((□? (x)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  lambda
  "'(eval\n  (letrec* (... modulo-inverse (totient (-> (λ (p q) ...) <-)) square ...) ...)\n  (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  app
  "'(eval (λ (p q) (-> (app * (app - p 1) (app - q 1)) <-)) (env ((□? (p q)))))"
  #f
  100
  85
  8
  7
  39
  4
  43
  1
  479/924
  85
  #t
  1
  (11 11 0))
'(clean-cache
  rsa
  2
  700
  220
  app
  "'(eval (app * (app - p 1) (-> (app - q 1) <-)) (env ((□? (p q)))))"
  #f
  49
  34
  8
  7
  15
  4
  19
  1
  52/105
  34
  #t
  1
  (6 6 0))
'(clean-cache
  rsa
  2
  700
  220
  number
  "'(eval (app - q (-> 1 <-)) (env ((□? (p q)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval (app - (-> q <-) 1) (env ((□? (p q)))))"
  #f
  28
  13
  8
  7
  6
  4
  10
  1
  11/21
  13
  #t
  1
  (3 3 0))
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval (app (-> - <-) q 1) (env ((□? (p q)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  app
  "'(eval (app * (-> (app - p 1) <-) (app - q 1)) (env ((□? (p q)))))"
  #f
  49
  34
  8
  7
  15
  4
  19
  1
  52/105
  34
  #t
  1
  (5 5 0))
'(clean-cache
  rsa
  2
  700
  220
  number
  "'(eval (app - p (-> 1 <-)) (env ((□? (p q)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval (app - (-> p <-) 1) (env ((□? (p q)))))"
  #f
  28
  13
  8
  7
  6
  4
  10
  1
  11/21
  13
  #t
  1
  (3 3 0))
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval (app (-> - <-) p 1) (env ((□? (p q)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval (app (-> * <-) (app - p 1) (app - q 1)) (env ((□? (p q)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  lambda
  "'(eval\n  (letrec*\n   (... extended-gcd (modulo-inverse (-> (λ (a n) ...) <-)) totient ...)\n   ...)\n  (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  app
  "'(eval\n  (λ (a n) (-> (app modulo (app car (app extended-gcd ...)) n) <-))\n  (env ((□? (a n)))))"
  #f
  267
  243
  16
  8
  161
  7
  168
  1
  878/1185
  142
  #f
  368/243
  (41 42 0))
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval\n  (app modulo (app car (app extended-gcd a n)) (-> n <-))\n  (env ((□? (a n)))))"
  #f
  47
  34
  8
  5
  19
  4
  23
  1
  3/5
  34
  #t
  1
  (3 3 0))
'(clean-cache
  rsa
  2
  700
  220
  app
  "'(eval\n  (app modulo (-> (app car (app extended-gcd a n)) <-) n)\n  (env ((□? (a n)))))"
  #f
  258
  234
  16
  8
  158
  7
  165
  1
  863/1140
  136
  #f
  178/117
  (41 43 0))
'(clean-cache
  rsa
  2
  700
  220
  app
  "'(eval (app car (-> (app extended-gcd a n) <-)) (env ((□? (a n)))))"
  #f
  74
  57
  11
  6
  37
  5
  42
  1
  3/4
  57
  #t
  61/57
  (5 5 0))
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval (app extended-gcd a (-> n <-)) (env ((□? (a n)))))"
  #f
  47
  34
  8
  5
  19
  4
  23
  1
  3/5
  34
  #t
  1
  (3 3 0))
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval (app extended-gcd (-> a <-) n) (env ((□? (a n)))))"
  #f
  12
  5
  4
  3
  3
  3
  6
  1
  5/8
  5
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval (app (-> extended-gcd <-) a n) (env ((□? (a n)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval (app (-> car <-) (app extended-gcd a n)) (env ((□? (a n)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval\n  (app (-> modulo <-) (app car (app extended-gcd a n)) n)\n  (env ((□? (a n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  lambda
  "'(eval\n  (letrec*\n   (... cdr (extended-gcd (-> (λ (a b) ...) <-)) modulo-inverse ...)\n   ...)\n  (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  match
  "'(eval\n  (λ (a b) (-> (match (app = (app modulo ...) 0) ...) <-))\n  (env ((□? (a b)))))"
  #f
  141
  123
  11
  7
  74
  5
  79
  1
  187/252
  92
  #f
  169/123
  (19 19 0))
'(clean-cache
  rsa
  2
  700
  220
  app
  "'(eval\n  (match (app = (app modulo a b) 0) (#f) (_ (-> (app cons 0 1) <-)))\n  (env ((□? (a b)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  number
  "'(eval (app cons 0 (-> 1 <-)) (env ((□? (a b)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  number
  "'(eval (app cons (-> 0 <-) 1) (env ((□? (a b)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval (app (-> cons <-) 0 1) (env ((□? (a b)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  let*
  "'(eval\n  (match (app = (app modulo a b) 0) ((#f) (-> (let* (x:y ... y) ...) <-)) _)\n  (env ((□? (a b)))))"
  #f
  4
  3
  0
  1
  0
  0
  0
  1
  0
  3
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  app
  "'(eval (let* (... x (y (-> (app cdr x:y) <-)) () ...) ...) (env ((□? (a b)))))"
  #f
  206
  181
  16
  9
  123
  7
  130
  1
  1619/2160
  104
  #f
  272/181
  (32 33 0))
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval (app cdr (-> x:y <-)) (env ((□? (a b)))))"
  #f
  139
  120
  11
  8
  72
  5
  77
  1
  889/1380
  84
  #f
  41/30
  (30 115 0))
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval (app (-> cdr <-) x:y) (env ((□? (a b)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  app
  "'(eval (let* (... x:y (x (-> (app car x:y) <-)) y ...) ...) (env ((□? (a b)))))"
  #f
  206
  181
  16
  9
  123
  7
  130
  1
  1619/2160
  104
  #f
  272/181
  (35 37 0))
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval (app car (-> x:y <-)) (env ((□? (a b)))))"
  #f
  139
  120
  11
  8
  72
  5
  77
  1
  889/1380
  84
  #f
  41/30
  (19 20 0))
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval (app (-> car <-) x:y) (env ((□? (a b)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  app
  "'(eval\n  (let* (... () (x:y (-> (app extended-gcd b (app modulo a b)) <-)) x ...) ...)\n  (env ((□? (a b)))))"
  #f
  133
  114
  11
  8
  69
  5
  74
  1
  437/675
  84
  #f
  25/19
  (19 19 0))
'(clean-cache
  rsa
  2
  700
  220
  app
  "'(eval (app extended-gcd b (-> (app modulo a b) <-)) (env ((□? (a b)))))"
  #f
  92
  73
  11
  8
  39
  5
  44
  1
  53/87
  57
  #f
  89/73
  (16 31 0))
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval (app modulo a (-> b <-)) (env ((□? (a b)))))"
  #f
  90
  71
  11
  8
  39
  5
  44
  1
  268/435
  56
  #f
  86/71
  (13 14 0))
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval (app modulo (-> a <-) b) (env ((□? (a b)))))"
  #f
  76
  58
  11
  7
  39
  5
  44
  1
  731/870
  43
  #f
  73/58
  (10 10 0))
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval (app (-> modulo <-) a b) (env ((□? (a b)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval (app extended-gcd (-> b <-) (app modulo a b)) (env ((□? (a b)))))"
  #f
  75
  57
  11
  7
  39
  5
  44
  1
  367/435
  43
  #f
  71/57
  (11 11 0))
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval (app (-> extended-gcd <-) b (app modulo a b)) (env ((□? (a b)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  app
  "'(eval\n  (let* (x:y ... y) (-> (app cons y (app - x (app * ...))) <-))\n  (env ((□? (a b)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  app
  "'(eval\n  (app cons y (-> (app - x (app * y (app quotient ...))) <-))\n  (env ((□? (a b)))))"
  #f
  246
  221
  16
  9
  139
  7
  146
  1
  989/1440
  121
  #f
  335/221
  (45 46 0))
'(clean-cache
  rsa
  2
  700
  220
  app
  "'(eval (app - x (-> (app * y (app quotient a b)) <-)) (env ((□? (a b)))))"
  #f
  231
  206
  16
  9
  130
  7
  137
  1
  1523/2160
  117
  #f
  3/2
  (39 41 0))
'(clean-cache
  rsa
  2
  700
  220
  app
  "'(eval (app * y (-> (app quotient a b) <-)) (env ((□? (a b)))))"
  #f
  94
  76
  11
  7
  48
  5
  53
  1
  779/990
  53
  #f
  99/76
  (13 13 0))
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval (app quotient a (-> b <-)) (env ((□? (a b)))))"
  #f
  90
  71
  11
  8
  39
  5
  44
  1
  539/900
  56
  #f
  86/71
  (12 12 0))
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval (app quotient (-> a <-) b) (env ((□? (a b)))))"
  #f
  76
  58
  11
  7
  39
  5
  44
  1
  367/450
  43
  #f
  73/58
  (10 10 0))
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval (app (-> quotient <-) a b) (env ((□? (a b)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval (app * (-> y <-) (app quotient a b)) (env ((□? (a b)))))"
  #f
  210
  185
  16
  9
  124
  7
  131
  1
  401/540
  104
  #f
  56/37
  (30 31 0))
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval (app (-> * <-) y (app quotient a b)) (env ((□? (a b)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval (app - (-> x <-) (app * y (app quotient a b))) (env ((□? (a b)))))"
  #f
  210
  185
  16
  9
  124
  7
  131
  1
  401/540
  104
  #f
  56/37
  (30 31 0))
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval (app (-> - <-) x (app * y (app quotient a b))) (env ((□? (a b)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval\n  (app cons (-> y <-) (app - x (app * y (app quotient ...))))\n  (env ((□? (a b)))))"
  #f
  210
  185
  16
  9
  124
  7
  131
  1
  401/540
  104
  #f
  56/37
  (31 32 0))
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval\n  (app (-> cons <-) y (app - x (app * y (app quotient ...))))\n  (env ((□? (a b)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  app
  "'(eval (match (-> (app = (app modulo a b) 0) <-) (#f) _) (env ((□? (a b)))))"
  #f
  112
  94
  11
  7
  57
  5
  62
  1
  103/135
  67
  #f
  121/94
  (15 15 0))
'(clean-cache
  rsa
  2
  700
  220
  number
  "'(eval (app = (app modulo a b) (-> 0 <-)) (env ((□? (a b)))))"
  (number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  app
  "'(eval (app = (-> (app modulo a b) <-) 0) (env ((□? (a b)))))"
  #f
  94
  76
  11
  7
  48
  5
  53
  1
  779/990
  53
  #f
  99/76
  (13 13 0))
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval (app modulo a (-> b <-)) (env ((□? (a b)))))"
  #f
  90
  71
  11
  8
  39
  5
  44
  1
  539/900
  56
  #f
  86/71
  (12 12 0))
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval (app modulo (-> a <-) b) (env ((□? (a b)))))"
  #f
  76
  58
  11
  7
  39
  5
  44
  1
  367/450
  43
  #f
  73/58
  (9 9 0))
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval (app (-> modulo <-) a b) (env ((□? (a b)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval (app (-> = <-) (app modulo a b) 0) (env ((□? (a b)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  lambda
  "'(eval\n  (letrec* (... car (cdr (-> (λ (cdr-v) ...) <-)) extended-gcd ...) ...)\n  (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  match
  "'(eval (λ (cdr-v) (-> (match cdr-v ...) <-)) (env ((□? (cdr-v)))))"
  #f
  203
  177
  16
  10
  121
  7
  128
  1
  181/240
  100
  #f
  90/59
  (32 33 0))
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval (match cdr-v ((cons cdr-c cdr-d) (-> cdr-d <-))) (env ((□? (cdr-v)))))"
  #f
  200
  174
  16
  10
  120
  7
  127
  1
  137/180
  100
  #f
  44/29
  (29 30 0))
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval (match (-> cdr-v <-) (cons cdr-c cdr-d)) (env ((□? (cdr-v)))))"
  #f
  149
  126
  13
  10
  75
  6
  81
  1
  452/705
  84
  #f
  89/63
  (20 21 0))
'(clean-cache
  rsa
  2
  700
  220
  lambda
  "'(eval (letrec* (... () (car (-> (λ (car-v) ...) <-)) cdr ...) ...) (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  match
  "'(eval (λ (car-v) (-> (match car-v ...) <-)) (env ((□? (car-v)))))"
  #f
  231
  205
  16
  10
  156
  7
  163
  1
  3749/4440
  113
  #f
  314/205
  (39 40 0))
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval (match car-v ((cons car-c car-d) (-> car-c <-))) (env ((□? (car-v)))))"
  #f
  213
  187
  16
  10
  141
  7
  148
  1
  3769/4440
  106
  #f
  285/187
  (32 33 0))
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval (match (-> car-v <-) (cons car-c car-d)) (env ((□? (car-v)))))"
  #f
  153
  129
  14
  10
  88
  6
  94
  1
  2293/2940
  87
  #f
  182/129
  (20 21 0))
'(clean-cache
  rsa
  2
  700
  220
  match
  "'(eval\n  (letrec*\n   (car ... decrypted-ciphertext)\n   (-> (match (app not (app = ...)) ...) <-))\n  (env ()))"
  #f
  #f)
'(clean-cache
  rsa
  2
  700
  220
  app
  "'(eval\n  (match\n   (app not (app = plaintext decrypted-ciphertext))\n   (#f)\n   (_ (-> (app error \"RSA fail!\") <-)))\n  (env ()))"
  #f
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  string
  "'(eval (app error (-> \"RSA fail!\" <-)) (env ()))"
  (string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval (app (-> error <-) \"RSA fail!\") (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  app
  "'(eval\n  (match\n   (app not (app = plaintext decrypted-ciphertext))\n   ((#f) (-> (app display \"RSA success!\") <-))\n   _)\n  (env ()))"
  #f
  3
  3
  0
  0
  3
  0
  3
  1
  1
  3
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  string
  "'(eval (app display (-> \"RSA success!\" <-)) (env ()))"
  (string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval (app (-> display <-) \"RSA success!\") (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  app
  "'(eval\n  (match (-> (app not (app = plaintext decrypted-ciphertext)) <-) (#f) _)\n  (env ()))"
  #f
  #f)
'(clean-cache
  rsa
  2
  700
  220
  app
  "'(eval (app not (-> (app = plaintext decrypted-ciphertext) <-)) (env ()))"
  #f
  #f)
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval (app = plaintext (-> decrypted-ciphertext <-)) (env ()))"
  #f
  #f)
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval (app = (-> plaintext <-) decrypted-ciphertext) (env ()))"
  (number char string quoted constructor)
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval (app (-> = <-) plaintext decrypted-ciphertext) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  rsa
  2
  700
  220
  ref-or-constructor
  "'(eval (app (-> not <-) (app = plaintext decrypted-ciphertext)) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
