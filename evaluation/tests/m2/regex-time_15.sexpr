'(clean-cache
  regex
  2
  15
  255
  lettypes
  "\"'(eval ((top) lettypes (cons ... nil) ...) (env ()))\""
  29
  18
  7
  4
  18
  5
  23
  1
  1
  7
  #f
  79/18
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  regex
  2
  15
  255
  letrec*
  "\"'(eval (lettypes cons ... nil (letrec* (car ... check-expect) ...)) (env ()))\""
  28
  17
  7
  4
  17
  5
  22
  1
  1
  7
  #f
  75/17
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  regex
  2
  15
  255
  app
  "\"'(eval\n  (λ (check expect) (-> (app equal? check expect) <-))\n  (env ((□? (check expect)))))\""
  26
  15
  7
  4
  12
  5
  17
  1
  11/13
  6
  #f
  22/5
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval (app equal? check (-> expect <-)) (env ((□? (check expect)))))\""
  6
  3
  2
  1
  2
  2
  4
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval (app equal? (-> check <-) expect) (env ((□? (check expect)))))\""
  22
  11
  7
  4
  10
  5
  15
  1
  10/11
  4
  #f
  48/11
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  regex
  2
  255
  match
  "\"'(eval\n  (λ (pattern data) (-> (match (app null? data) ...) <-))\n  (env ((□? (pattern data)))))\""
  #f)
'(clean-cache
  regex
  2
  15
  255
  app
  "\"'(eval\n  (match\n   (app null? data)\n   (#f)\n   (_ (-> (app regex-empty? (app regex-empty pattern)) <-)))\n  (env ((□? (pattern data)))))\""
  42
  16
  14
  12
  6
  2
  8
  1
  9/26
  7
  #f
  71/16
  ((3/2 3/2 0) (2 2 0) (2 2 0)))
'(clean-cache
  regex
  2
  15
  255
  app
  "\"'(eval\n  (app regex-empty? (-> (app regex-empty pattern) <-))\n  (env ((□? (pattern data)))))\""
  36
  11
  14
  11
  6
  2
  8
  1
  6/11
  5
  #f
  49/11
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval (app regex-empty (-> pattern <-)) (env ((□? (pattern data)))))\""
  50
  23
  17
  10
  22
  4
  26
  1
  14/15
  11
  #t
  103/23
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  regex
  2
  15
  255
  app
  "\"'(eval\n  (match\n   (app null? data)\n   ((#f)\n    (->\n     (app\n      regex-match\n      (app regex-derivative pattern (app car data))\n      (app cdr data))\n     <-))\n   _)\n  (env ((□? (pattern data)))))\""
  19
  10
  5
  4
  5
  3
  8
  1
  1/2
  4
  #f
  22/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  regex
  2
  15
  255
  app
  "\"'(eval\n  (app\n   regex-match\n   (app regex-derivative pattern (app car data))\n   (-> (app cdr data) <-))\n  (env ((□? (pattern data)))))\""
  50
  32
  11
  7
  26
  3
  29
  1
  8/9
  24
  #f
  83/16
  ((7 15/2 0) (7 15/2 0) (8 17/2 0)))
'(clean-cache
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval (app cdr (-> data <-)) (env ((□? (pattern data)))))\""
  42
  25
  11
  6
  24
  3
  27
  1
  59/60
  23
  #f
  128/25
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(clean-cache
  regex
  2
  15
  255
  app
  "\"'(eval\n  (app\n   regex-match\n   (-> (app regex-derivative pattern (app car data)) <-)\n   (app cdr data))\n  (env ((□? (pattern data)))))\""
  37
  12
  14
  11
  6
  2
  8
  1
  1/2
  5
  #f
  53/12
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  regex
  2
  15
  255
  app
  "\"'(eval\n  (app regex-derivative pattern (-> (app car data) <-))\n  (env ((□? (pattern data)))))\""
  76
  45
  20
  11
  39
  4
  43
  1
  235/264
  36
  #f
  232/45
  ((19/2 19/2 0) (9 19/2 0) (9 19/2 0)))
'(clean-cache
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval (app car (-> data <-)) (env ((□? (pattern data)))))\""
  42
  25
  11
  6
  24
  3
  27
  1
  15/16
  23
  #f
  128/25
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(clean-cache
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval\n  (app regex-derivative (-> pattern <-) (app car data))\n  (env ((□? (pattern data)))))\""
  50
  23
  17
  10
  22
  4
  26
  1
  14/15
  11
  #t
  103/23
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  regex
  2
  15
  255
  app
  "\"'(eval (match (-> (app null? data) <-) (#f) _) (env ((□? (pattern data)))))\""
  74
  53
  13
  8
  44
  4
  48
  1
  257/300
  44
  #f
  272/53
  ((11 11 0) (21/2 11 0) (21/2 11 0)))
'(clean-cache
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval (app null? (-> data <-)) (env ((□? (pattern data)))))\""
  42
  25
  11
  6
  24
  3
  27
  1
  15/16
  23
  #f
  128/25
  ((4 9/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(clean-cache
  regex
  2
  255
  let
  "\"'(eval (λ (re c) (-> (let (_) ...) <-)) (env ((□? (re c)))))\""
  #f)
'(clean-cache
  regex
  2
  15
  255
  app
  "\"'(eval\n  (let (... () (_ (-> (app debug-trace) <-)) () ...) ...)\n  (env ((□? (re c)))))\""
  7
  4
  0
  3
  1
  0
  1
  1
  1/4
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  255
  match
  "\"'(eval (let (_) (-> (match (app regex-empty? re) ...) <-)) (env ((□? (re c)))))\""
  #f)
'(clean-cache
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval\n  (match (app regex-empty? re) (#f) (_ (-> regex-NULL <-)))\n  (env ((□? (re c)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  255
  match
  "\"'(eval\n  (match\n   (app regex-empty? re)\n   ((#f) (-> (match (app regex-null? re) ...) <-))\n   _)\n  (env ((□? (re c)))))\""
  #f)
'(clean-cache
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval\n  (match (app regex-null? re) (#f) (_ (-> regex-NULL <-)))\n  (env ((□? (re c)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  255
  match
  "\"'(eval\n  (match (app regex-null? re) ((#f) (-> (match (app eq? c re) ...) <-)) _)\n  (env ((□? (re c)))))\""
  #f)
'(clean-cache
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval (match (app eq? c re) (#f) (_ (-> regex-BLANK <-))) (env ((□? (re c)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  255
  match
  "\"'(eval\n  (match (app eq? c re) ((#f) (-> (match (app regex-atom? re) ...) <-)) _)\n  (env ((□? (re c)))))\""
  #f)
'(clean-cache
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval\n  (match (app regex-atom? re) (#f) (_ (-> regex-NULL <-)))\n  (env ((□? (re c)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  15
  255
  match
  "\"'(eval\n  (match\n   (app regex-atom? re)\n   ((#f) (-> (match (app match-seq re (λ (pat1 pat2) ...)) ...) <-))\n   _)\n  (env ((□? (re c)))))\""
  32
  17
  6
  9
  10
  2
  12
  1
  10/17
  8
  #f
  76/17
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval\n  (match (app match-seq re (λ (pat1 pat2) ...)) (#f) (c-x (-> c-x <-)))\n  (env ((□? (re c)))))\""
  32
  17
  6
  9
  10
  2
  12
  1
  10/17
  8
  #f
  76/17
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  regex
  2
  15
  255
  match
  "\"'(eval\n  (match\n   (app match-seq re (λ (pat1 pat2) ...))\n   ((#f) (-> (match (app match-alt re (λ (pat1 pat2) ...)) ...) <-))\n   c-x)\n  (env ((□? (re c)))))\""
  32
  17
  6
  9
  10
  2
  12
  1
  10/17
  8
  #f
  76/17
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval\n  (match (app match-alt re (λ (pat1 pat2) ...)) (#f) (c-x (-> c-x <-)))\n  (env ((□? (re c)))))\""
  32
  17
  6
  9
  10
  2
  12
  1
  10/17
  8
  #f
  76/17
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  regex
  2
  15
  255
  match
  "\"'(eval\n  (match\n   (app match-alt re (λ (pat1 pat2) ...))\n   ((#f) (-> (match (app match-rep re (λ (pat) ...)) ...) <-))\n   c-x)\n  (env ((□? (re c)))))\""
  34
  17
  7
  10
  10
  2
  12
  1
  10/17
  8
  #f
  76/17
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval\n  (match (app match-rep re (λ (pat) ...)) (#f) (c-x (-> c-x <-)))\n  (env ((□? (re c)))))\""
  34
  17
  7
  10
  10
  2
  12
  1
  10/17
  8
  #f
  76/17
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval\n  (match (app match-rep re (λ (pat) ...)) ((#f) (-> regex-NULL <-)) c-x)\n  (env ((□? (re c)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  15
  255
  app
  "\"'(eval\n  (match (-> (app match-rep re (λ (pat) ...)) <-) (#f) c-x)\n  (env ((□? (re c)))))\""
  33
  16
  7
  10
  10
  2
  12
  1
  5/8
  8
  #f
  9/2
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  regex
  2
  15
  255
  app
  "\"'(eval\n  (λ (pat) (-> (app seq (app regex-derivative pat c) (app rep pat)) <-))\n  (env ((□? (pat)) (□? (re c)))))\""
  35
  11
  13
  11
  6
  2
  8
  1
  6/11
  5
  #f
  49/11
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  regex
  2
  15
  255
  app
  "\"'(eval\n  (app seq (app regex-derivative pat c) (-> (app rep pat) <-))\n  (env ((□? (pat)) (□? (re c)))))\""
  30
  11
  10
  9
  6
  2
  8
  1
  6/11
  5
  #f
  49/11
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval (app rep (-> pat <-)) (env ((□? (pat)) (□? (re c)))))\""
  57
  17
  23
  17
  13
  3
  16
  1
  13/17
  8
  #f
  76/17
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  regex
  2
  15
  255
  app
  "\"'(eval\n  (app seq (-> (app regex-derivative pat c) <-) (app rep pat))\n  (env ((□? (pat)) (□? (re c)))))\""
  37
  12
  14
  11
  6
  2
  8
  1
  1/2
  5
  #f
  53/12
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-derivative pat (-> c <-)) (env ((□? (pat)) (□? (re c)))))\""
  #f)
'(clean-cache
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval (app regex-derivative (-> pat <-) c) (env ((□? (pat)) (□? (re c)))))\""
  57
  17
  23
  17
  13
  3
  16
  1
  13/17
  8
  #f
  76/17
  ((2 2 0) (5/2 5/2 0) (2 2 0)))
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app match-rep (-> re <-) (λ (pat) ...)) (env ((□? (re c)))))\""
  #f)
'(clean-cache
  regex
  2
  15
  255
  app
  "\"'(eval\n  (match (-> (app match-alt re (λ (pat1 pat2) ...)) <-) (#f) c-x)\n  (env ((□? (re c)))))\""
  31
  16
  6
  9
  10
  2
  12
  1
  5/8
  8
  #f
  9/2
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  regex
  2
  15
  255
  app
  "\"'(eval\n  (λ (pat1 pat2)\n    (->\n     (app alt (app regex-derivative pat1 c) (app regex-derivative pat2 c))\n     <-))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  34
  11
  12
  11
  6
  2
  8
  1
  6/11
  5
  #f
  49/11
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  regex
  2
  15
  255
  app
  "\"'(eval\n  (app alt (app regex-derivative pat1 c) (-> (app regex-derivative pat2 c) <-))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  37
  12
  14
  11
  6
  2
  8
  1
  1/2
  5
  #f
  53/12
  ((3/2 2 0) (3/2 3/2 0) (2 2 0)))
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval\n  (app regex-derivative pat2 (-> c <-))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  #f)
'(clean-cache
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval\n  (app regex-derivative (-> pat2 <-) c)\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  59
  21
  22
  16
  17
  3
  20
  1
  15/19
  9
  #f
  31/7
  ((2 5/2 0) (2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  regex
  2
  15
  255
  app
  "\"'(eval\n  (app alt (-> (app regex-derivative pat1 c) <-) (app regex-derivative pat2 c))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  37
  12
  14
  11
  6
  2
  8
  1
  1/2
  5
  #f
  53/12
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval\n  (app regex-derivative pat1 (-> c <-))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  #f)
'(clean-cache
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval\n  (app regex-derivative (-> pat1 <-) c)\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  57
  17
  23
  17
  13
  3
  16
  1
  13/17
  8
  #f
  76/17
  ((2 5/2 0) (2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app match-alt (-> re <-) (λ (pat1 pat2) ...)) (env ((□? (re c)))))\""
  #f)
'(clean-cache
  regex
  2
  15
  255
  app
  "\"'(eval\n  (match (-> (app match-seq re (λ (pat1 pat2) ...)) <-) (#f) c-x)\n  (env ((□? (re c)))))\""
  31
  16
  6
  9
  10
  2
  12
  1
  5/8
  8
  #f
  9/2
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  regex
  2
  15
  255
  app
  "\"'(eval\n  (λ (pat1 pat2)\n    (->\n     (app\n      alt\n      (app seq (app regex-derivative pat1 c) pat2)\n      (app seq (app regex-empty pat1) (app regex-derivative pat2 c)))\n     <-))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  34
  11
  12
  11
  6
  2
  8
  1
  6/11
  5
  #f
  49/11
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  regex
  2
  15
  255
  app
  "\"'(eval\n  (app\n   alt\n   (app seq (app regex-derivative pat1 c) pat2)\n   (-> (app seq (app regex-empty pat1) (app regex-derivative pat2 c)) <-))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  35
  11
  13
  11
  6
  2
  8
  1
  6/11
  5
  #f
  49/11
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  regex
  2
  15
  255
  app
  "\"'(eval\n  (app seq (app regex-empty pat1) (-> (app regex-derivative pat2 c) <-))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  37
  12
  14
  11
  6
  2
  8
  1
  1/2
  5
  #f
  53/12
  ((3/2 2 0) (2 2 0) (3/2 3/2 0)))
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval\n  (app regex-derivative pat2 (-> c <-))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  #f)
'(clean-cache
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval\n  (app regex-derivative (-> pat2 <-) c)\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  59
  21
  22
  16
  17
  3
  20
  1
  15/19
  9
  #f
  31/7
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  regex
  2
  15
  255
  app
  "\"'(eval\n  (app seq (-> (app regex-empty pat1) <-) (app regex-derivative pat2 c))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  36
  11
  14
  11
  6
  2
  8
  1
  6/11
  5
  #f
  49/11
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval (app regex-empty (-> pat1 <-)) (env ((□? (pat1 pat2)) (□? (re c)))))\""
  57
  17
  23
  17
  13
  3
  16
  1
  13/17
  8
  #f
  76/17
  ((2 5/2 0) (2 2 0) (2 5/2 0)))
'(clean-cache
  regex
  2
  15
  255
  app
  "\"'(eval\n  (app\n   alt\n   (-> (app seq (app regex-derivative pat1 c) pat2) <-)\n   (app seq (app regex-empty pat1) (app regex-derivative pat2 c)))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  35
  11
  13
  11
  6
  2
  8
  1
  6/11
  5
  #f
  49/11
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval\n  (app seq (app regex-derivative pat1 c) (-> pat2 <-))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  59
  21
  22
  16
  17
  3
  20
  1
  15/19
  9
  #f
  31/7
  ((2 5/2 0) (2 5/2 0) (5/2 5/2 0)))
'(clean-cache
  regex
  2
  15
  255
  app
  "\"'(eval\n  (app seq (-> (app regex-derivative pat1 c) <-) pat2)\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  37
  12
  14
  11
  6
  2
  8
  1
  1/2
  5
  #f
  53/12
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval\n  (app regex-derivative pat1 (-> c <-))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  #f)
'(clean-cache
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval\n  (app regex-derivative (-> pat1 <-) c)\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  57
  17
  23
  17
  13
  3
  16
  1
  13/17
  8
  #f
  76/17
  ((2 5/2 0) (2 5/2 0) (2 5/2 0)))
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app match-seq (-> re <-) (λ (pat1 pat2) ...)) (env ((□? (re c)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval (match (-> (app regex-atom? re) <-) (#f) _) (env ((□? (re c)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-atom? (-> re <-)) (env ((□? (re c)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval (match (-> (app eq? c re) <-) (#f) _) (env ((□? (re c)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app eq? c (-> re <-)) (env ((□? (re c)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app eq? (-> c <-) re) (env ((□? (re c)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval (match (-> (app regex-null? re) <-) (#f) _) (env ((□? (re c)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-null? (-> re <-)) (env ((□? (re c)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval (match (-> (app regex-empty? re) <-) (#f) _) (env ((□? (re c)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-empty? (-> re <-)) (env ((□? (re c)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  match
  "\"'(eval (λ (re) (-> (match (app regex-empty? re) ...) <-)) (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  15
  255
  app
  "\"'(eval\n  (match (app regex-empty? re) (#f) (_ (-> (app #t) <-)))\n  (env ((□? (re)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  255
  match
  "\"'(eval\n  (match\n   (app regex-empty? re)\n   ((#f) (-> (match (app regex-null? re) ...) <-))\n   _)\n  (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  15
  255
  app
  "\"'(eval\n  (match (app regex-null? re) (#f) (_ (-> (app #f) <-)))\n  (env ((□? (re)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  255
  match
  "\"'(eval\n  (match\n   (app regex-null? re)\n   ((#f) (-> (match (app regex-atom? re) ...) <-))\n   _)\n  (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  15
  255
  app
  "\"'(eval\n  (match (app regex-atom? re) (#f) (_ (-> (app #f) <-)))\n  (env ((□? (re)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  15
  255
  match
  "\"'(eval\n  (match\n   (app regex-atom? re)\n   ((#f) (-> (match (app match-seq re (λ (pat1 pat2) ...)) ...) <-))\n   _)\n  (env ((□? (re)))))\""
  32
  17
  6
  9
  10
  2
  12
  1
  10/17
  8
  #f
  76/17
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval\n  (match (app match-seq re (λ (pat1 pat2) ...)) (#f) (c-x (-> c-x <-)))\n  (env ((□? (re)))))\""
  32
  17
  6
  9
  10
  2
  12
  1
  10/17
  8
  #f
  76/17
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  regex
  2
  15
  255
  match
  "\"'(eval\n  (match\n   (app match-seq re (λ (pat1 pat2) ...))\n   ((#f) (-> (match (app match-alt re (λ (pat1 pat2) ...)) ...) <-))\n   c-x)\n  (env ((□? (re)))))\""
  32
  17
  6
  9
  10
  2
  12
  1
  10/17
  8
  #f
  76/17
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval\n  (match (app match-alt re (λ (pat1 pat2) ...)) (#f) (c-x (-> c-x <-)))\n  (env ((□? (re)))))\""
  32
  17
  6
  9
  10
  2
  12
  1
  10/17
  8
  #f
  76/17
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  regex
  2
  15
  255
  match
  "\"'(eval\n  (match\n   (app match-alt re (λ (pat1 pat2) ...))\n   ((#f) (-> (match (app regex-rep? re) ...) <-))\n   c-x)\n  (env ((□? (re)))))\""
  27
  12
  7
  8
  5
  2
  7
  1
  5/12
  5
  #f
  53/12
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  regex
  2
  15
  255
  app
  "\"'(eval (match (app regex-rep? re) (#f) (_ (-> (app #t) <-))) (env ((□? (re)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  15
  255
  app
  "\"'(eval (match (app regex-rep? re) ((#f) (-> (app #f) <-)) _) (env ((□? (re)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  15
  255
  app
  "\"'(eval (match (-> (app regex-rep? re) <-) (#f) _) (env ((□? (re)))))\""
  26
  11
  7
  8
  5
  2
  7
  1
  5/11
  5
  #f
  49/11
  ((1/2 1 0) (1 1 0) (1/2 1 0)))
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-rep? (-> re <-)) (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  15
  255
  app
  "\"'(eval\n  (match (-> (app match-alt re (λ (pat1 pat2) ...)) <-) (#f) c-x)\n  (env ((□? (re)))))\""
  31
  16
  6
  9
  10
  2
  12
  1
  5/8
  8
  #f
  9/2
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  regex
  2
  15
  255
  app
  "\"'(eval\n  (λ (pat1 pat2)\n    (-> (app alt (app regex-empty pat1) (app regex-empty pat2)) <-))\n  (env ((□? (pat1 pat2)) (□? (re)))))\""
  34
  11
  12
  11
  6
  2
  8
  1
  6/11
  5
  #f
  49/11
  ((2 8 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  regex
  2
  15
  255
  app
  "\"'(eval\n  (app alt (app regex-empty pat1) (-> (app regex-empty pat2) <-))\n  (env ((□? (pat1 pat2)) (□? (re)))))\""
  36
  11
  14
  11
  6
  2
  8
  1
  6/11
  5
  #f
  49/11
  ((3/2 3/2 0) (3/2 3/2 0) (2 2 0)))
'(clean-cache
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval (app regex-empty (-> pat2 <-)) (env ((□? (pat1 pat2)) (□? (re)))))\""
  59
  21
  22
  16
  17
  3
  20
  1
  15/19
  9
  #f
  31/7
  ((2 5/2 0) (2 2 0) (2 2 0)))
'(clean-cache
  regex
  2
  15
  255
  app
  "\"'(eval\n  (app alt (-> (app regex-empty pat1) <-) (app regex-empty pat2))\n  (env ((□? (pat1 pat2)) (□? (re)))))\""
  36
  11
  14
  11
  6
  2
  8
  1
  6/11
  5
  #f
  49/11
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval (app regex-empty (-> pat1 <-)) (env ((□? (pat1 pat2)) (□? (re)))))\""
  57
  17
  23
  17
  13
  3
  16
  1
  13/17
  8
  #f
  76/17
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app match-alt (-> re <-) (λ (pat1 pat2) ...)) (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  15
  255
  app
  "\"'(eval\n  (match (-> (app match-seq re (λ (pat1 pat2) ...)) <-) (#f) c-x)\n  (env ((□? (re)))))\""
  31
  16
  6
  9
  10
  2
  12
  1
  5/8
  8
  #f
  9/2
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  regex
  2
  15
  255
  app
  "\"'(eval\n  (λ (pat1 pat2)\n    (-> (app seq (app regex-empty pat1) (app regex-empty pat2)) <-))\n  (env ((□? (pat1 pat2)) (□? (re)))))\""
  35
  11
  13
  11
  6
  2
  8
  1
  6/11
  5
  #f
  49/11
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  regex
  2
  15
  255
  app
  "\"'(eval\n  (app seq (app regex-empty pat1) (-> (app regex-empty pat2) <-))\n  (env ((□? (pat1 pat2)) (□? (re)))))\""
  36
  11
  14
  11
  6
  2
  8
  1
  6/11
  5
  #f
  49/11
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval (app regex-empty (-> pat2 <-)) (env ((□? (pat1 pat2)) (□? (re)))))\""
  59
  21
  22
  16
  17
  3
  20
  1
  15/19
  9
  #f
  31/7
  ((5/2 5/2 0) (2 2 0) (2 2 0)))
'(clean-cache
  regex
  2
  15
  255
  app
  "\"'(eval\n  (app seq (-> (app regex-empty pat1) <-) (app regex-empty pat2))\n  (env ((□? (pat1 pat2)) (□? (re)))))\""
  36
  11
  14
  11
  6
  2
  8
  1
  6/11
  5
  #f
  49/11
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval (app regex-empty (-> pat1 <-)) (env ((□? (pat1 pat2)) (□? (re)))))\""
  57
  17
  23
  17
  13
  3
  16
  1
  13/17
  8
  #f
  76/17
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app match-seq (-> re <-) (λ (pat1 pat2) ...)) (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval (match (-> (app regex-atom? re) <-) (#f) _) (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-atom? (-> re <-)) (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval (match (-> (app regex-null? re) <-) (#f) _) (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-null? (-> re <-)) (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval (match (-> (app regex-empty? re) <-) (#f) _) (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-empty? (-> re <-)) (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  15
  255
  match
  "\"'(eval (λ (pat) (-> (match (app regex-null? pat) ...) <-)) (env ((□? (pat)))))\""
  94
  37
  33
  24
  21
  5
  26
  1
  2/3
  14
  #f
  162/37
  ((5 5 0) (5 5 0) (5 5 0)))
'(clean-cache
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval\n  (match (app regex-null? pat) (#f) (_ (-> regex-BLANK <-)))\n  (env ((□? (pat)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  15
  255
  match
  "\"'(eval\n  (match\n   (app regex-null? pat)\n   ((#f) (-> (match (app regex-empty? pat) ...) <-))\n   _)\n  (env ((□? (pat)))))\""
  92
  37
  32
  23
  21
  5
  26
  1
  2/3
  14
  #f
  162/37
  ((5 5 0) (11/2 11/2 0) (5 5 0)))
'(clean-cache
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval\n  (match (app regex-empty? pat) (#f) (_ (-> regex-BLANK <-)))\n  (env ((□? (pat)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  15
  255
  app
  "\"'(eval\n  (match\n   (app regex-empty? pat)\n   ((#f) (-> (app cons 'rep (app cons pat (app nil))) <-))\n   _)\n  (env ((□? (pat)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  15
  255
  app
  "\"'(eval (app cons 'rep (-> (app cons pat (app nil)) <-)) (env ((□? (pat)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  15
  255
  app
  "\"'(eval (app cons pat (-> (app nil) <-)) (env ((□? (pat)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval (app cons (-> pat <-) (app nil)) (env ((□? (pat)))))\""
  64
  20
  25
  19
  13
  4
  17
  1
  13/18
  8
  #f
  22/5
  ((5/2 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  regex
  2
  15
  255
  app
  "\"'(eval (match (-> (app regex-empty? pat) <-) (#f) _) (env ((□? (pat)))))\""
  89
  34
  32
  23
  20
  5
  25
  1
  49/72
  14
  #f
  75/17
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval (app regex-empty? (-> pat <-)) (env ((□? (pat)))))\""
  64
  20
  25
  19
  13
  4
  17
  1
  13/18
  8
  #f
  22/5
  ((3 3 0) (3 3 0) (5/2 5/2 0)))
'(clean-cache
  regex
  2
  15
  255
  app
  "\"'(eval (match (-> (app regex-null? pat) <-) (#f) _) (env ((□? (pat)))))\""
  91
  34
  33
  24
  20
  5
  25
  1
  49/72
  14
  #f
  75/17
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(clean-cache
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval (app regex-null? (-> pat <-)) (env ((□? (pat)))))\""
  64
  20
  25
  19
  13
  4
  17
  1
  13/18
  8
  #f
  22/5
  ((3 3 0) (3 3 0) (3 3 0)))
'(clean-cache
  regex
  2
  15
  255
  match
  "\"'(eval\n  (λ (pat1 pat2) (-> (match (app regex-null? pat1) ...) <-))\n  (env ((□? (pat1 pat2)))))\""
  122
  61
  38
  23
  29
  6
  35
  1
  242/595
  22
  #f
  266/61
  ((8 17/2 0) (8 17/2 0) (8 17/2 0)))
'(clean-cache
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval\n  (match (app regex-null? pat1) (#f) (_ (-> pat2 <-)))\n  (env ((□? (pat1 pat2)))))\""
  91
  34
  38
  19
  17
  6
  23
  1
  14/31
  14
  #f
  75/17
  ((13/2 13/2 0) (6 6 0) (6 6 0)))
'(clean-cache
  regex
  2
  15
  255
  match
  "\"'(eval\n  (match\n   (app regex-null? pat1)\n   ((#f) (-> (match (app regex-null? pat2) ...) <-))\n   _)\n  (env ((□? (pat1 pat2)))))\""
  122
  61
  38
  23
  29
  6
  35
  1
  242/595
  22
  #f
  266/61
  ((17/2 17/2 0) (17/2 17/2 0) (19/2 10 0)))
'(clean-cache
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval\n  (match (app regex-null? pat2) (#f) (_ (-> pat1 <-)))\n  (env ((□? (pat1 pat2)))))\""
  91
  34
  38
  19
  17
  6
  23
  1
  14/31
  14
  #f
  75/17
  ((6 6 0) (6 6 0) (13/2 13/2 0)))
'(clean-cache
  regex
  2
  15
  255
  app
  "\"'(eval\n  (match\n   (app regex-null? pat2)\n   ((#f) (-> (app cons 'alt (app cons pat1 (app cons pat2 (app nil)))) <-))\n   _)\n  (env ((□? (pat1 pat2)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  15
  255
  app
  "\"'(eval\n  (app cons 'alt (-> (app cons pat1 (app cons pat2 (app nil))) <-))\n  (env ((□? (pat1 pat2)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  15
  255
  app
  "\"'(eval\n  (app cons pat1 (-> (app cons pat2 (app nil)) <-))\n  (env ((□? (pat1 pat2)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  15
  255
  app
  "\"'(eval (app cons pat2 (-> (app nil) <-)) (env ((□? (pat1 pat2)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval (app cons (-> pat2 <-) (app nil)) (env ((□? (pat1 pat2)))))\""
  91
  34
  38
  19
  17
  6
  23
  1
  14/31
  14
  #f
  75/17
  ((6 6 0) (6 6 0) (6 13/2 0)))
'(clean-cache
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval\n  (app cons (-> pat1 <-) (app cons pat2 (app nil)))\n  (env ((□? (pat1 pat2)))))\""
  91
  34
  38
  19
  17
  6
  23
  1
  14/31
  14
  #f
  75/17
  ((6 6 0) (6 6 0) (6 6 0)))
'(clean-cache
  regex
  2
  15
  255
  app
  "\"'(eval (match (-> (app regex-null? pat2) <-) (#f) _) (env ((□? (pat1 pat2)))))\""
  118
  57
  38
  23
  29
  6
  35
  1
  44/105
  22
  #f
  250/57
  ((8 8 0) (17/2 17/2 0) (8 8 0)))
'(clean-cache
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval (app regex-null? (-> pat2 <-)) (env ((□? (pat1 pat2)))))\""
  91
  34
  38
  19
  17
  6
  23
  1
  14/31
  14
  #f
  75/17
  ((6 6 0) (6 13/2 0) (6 6 0)))
'(clean-cache
  regex
  2
  15
  255
  app
  "\"'(eval (match (-> (app regex-null? pat1) <-) (#f) _) (env ((□? (pat1 pat2)))))\""
  118
  57
  38
  23
  29
  6
  35
  1
  44/105
  22
  #f
  250/57
  ((8 8 0) (8 17/2 0) (8 8 0)))
'(clean-cache
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval (app regex-null? (-> pat1 <-)) (env ((□? (pat1 pat2)))))\""
  91
  34
  38
  19
  17
  6
  23
  1
  14/31
  14
  #f
  75/17
  ((15/2 15/2 0) (6 6 0) (6 6 0)))
'(clean-cache
  regex
  2
  15
  255
  match
  "\"'(eval\n  (λ (pat1 pat2) (-> (match (app regex-null? pat1) ...) <-))\n  (env ((□? (pat1 pat2)))))\""
  135
  77
  34
  24
  36
  5
  41
  1
  533/1395
  26
  #f
  334/77
  ((19/2 19/2 0) (9 19/2 0) (21/2 21/2 0)))
'(clean-cache
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval\n  (match (app regex-null? pat1) (#f) (_ (-> regex-NULL <-)))\n  (env ((□? (pat1 pat2)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  255
  match
  "\"'(eval\n  (match\n   (app regex-null? pat1)\n   ((#f) (-> (match (app regex-null? pat2) ...) <-))\n   _)\n  (env ((□? (pat1 pat2)))))\""
  #f)
'(clean-cache
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval\n  (match (app regex-null? pat2) (#f) (_ (-> regex-NULL <-)))\n  (env ((□? (pat1 pat2)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  15
  255
  match
  "\"'(eval\n  (match\n   (app regex-null? pat2)\n   ((#f) (-> (match (app regex-empty? pat1) ...) <-))\n   _)\n  (env ((□? (pat1 pat2)))))\""
  124
  76
  26
  22
  35
  4
  39
  1
  73/243
  25
  #f
  329/76
  ((17/2 17/2 0) (17/2 17/2 0) (17/2 9 0)))
'(clean-cache
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval\n  (match (app regex-empty? pat1) (#f) (_ (-> pat2 <-)))\n  (env ((□? (pat1 pat2)))))\""
  161
  69
  58
  34
  42
  9
  51
  1
  19/30
  27
  #f
  101/23
  ((21/2 21/2 0) (21/2 21/2 0) (21/2 21/2 0)))
'(clean-cache
  regex
  2
  15
  255
  match
  "\"'(eval\n  (match\n   (app regex-empty? pat1)\n   ((#f) (-> (match (app regex-empty? pat2) ...) <-))\n   _)\n  (env ((□? (pat1 pat2)))))\""
  204
  109
  58
  37
  64
  9
  73
  1
  7474/12243
  39
  #f
  475/109
  ((14 29/2 0) (14 29/2 0) (14 29/2 0)))
'(clean-cache
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval\n  (match (app regex-empty? pat2) (#f) (_ (-> pat1 <-)))\n  (env ((□? (pat1 pat2)))))\""
  85
  42
  26
  17
  19
  4
  23
  1
  1/3
  15
  #f
  61/14
  ((6 6 0) (11/2 11/2 0) (11/2 6 0)))
'(clean-cache
  regex
  2
  15
  255
  app
  "\"'(eval\n  (match\n   (app regex-empty? pat2)\n   ((#f) (-> (app cons 'seq (app cons pat1 (app cons pat2 (app nil)))) <-))\n   _)\n  (env ((□? (pat1 pat2)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  15
  255
  app
  "\"'(eval\n  (app cons 'seq (-> (app cons pat1 (app cons pat2 (app nil))) <-))\n  (env ((□? (pat1 pat2)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  15
  255
  app
  "\"'(eval\n  (app cons pat1 (-> (app cons pat2 (app nil)) <-))\n  (env ((□? (pat1 pat2)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  15
  255
  app
  "\"'(eval (app cons pat2 (-> (app nil) <-)) (env ((□? (pat1 pat2)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval (app cons (-> pat2 <-) (app nil)) (env ((□? (pat1 pat2)))))\""
  161
  69
  58
  34
  42
  9
  51
  1
  19/30
  27
  #f
  101/23
  ((21/2 21/2 0) (23/2 23/2 0) (21/2 21/2 0)))
'(clean-cache
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval\n  (app cons (-> pat1 <-) (app cons pat2 (app nil)))\n  (env ((□? (pat1 pat2)))))\""
  85
  42
  26
  17
  19
  4
  23
  1
  1/3
  15
  #f
  61/14
  ((11/2 6 0) (6 6 0) (11/2 11/2 0)))
'(clean-cache
  regex
  2
  15
  255
  app
  "\"'(eval (match (-> (app regex-empty? pat2) <-) (#f) _) (env ((□? (pat1 pat2)))))\""
  197
  102
  58
  37
  62
  9
  71
  1
  1852/3003
  39
  #f
  149/34
  ((14 29/2 0) (27/2 14 0) (14 14 0)))
'(clean-cache
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval (app regex-empty? (-> pat2 <-)) (env ((□? (pat1 pat2)))))\""
  161
  69
  58
  34
  42
  9
  51
  1
  19/30
  27
  #f
  101/23
  ((21/2 21/2 0) (21/2 21/2 0) (21/2 21/2 0)))
'(clean-cache
  regex
  2
  15
  255
  app
  "\"'(eval (match (-> (app regex-empty? pat1) <-) (#f) _) (env ((□? (pat1 pat2)))))\""
  119
  71
  26
  22
  35
  4
  39
  1
  73/234
  25
  #f
  309/71
  ((8 8 0) (10 10 0) (8 17/2 0)))
'(clean-cache
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval (app regex-empty? (-> pat1 <-)) (env ((□? (pat1 pat2)))))\""
  85
  42
  26
  17
  19
  4
  23
  1
  1/3
  15
  #f
  61/14
  ((11/2 11/2 0) (11/2 11/2 0) (6 6 0)))
'(clean-cache
  regex
  2
  15
  255
  app
  "\"'(eval (match (-> (app regex-null? pat2) <-) (#f) _) (env ((□? (pat1 pat2)))))\""
  197
  102
  58
  37
  62
  9
  71
  1
  14783/24024
  39
  #f
  149/34
  ((27/2 14 0) (27/2 14 0) (27/2 14 0)))
'(clean-cache
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval (app regex-null? (-> pat2 <-)) (env ((□? (pat1 pat2)))))\""
  161
  69
  58
  34
  42
  9
  51
  1
  19/30
  27
  #f
  101/23
  ((21/2 21/2 0) (21/2 21/2 0) (11 23/2 0)))
'(clean-cache
  regex
  2
  15
  255
  app
  "\"'(eval (match (-> (app regex-null? pat1) <-) (#f) _) (env ((□? (pat1 pat2)))))\""
  130
  72
  34
  24
  36
  5
  41
  1
  533/1350
  26
  #f
  157/36
  ((9 9 0) (9 9 0) (21/2 11 0)))
'(clean-cache
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval (app regex-null? (-> pat1 <-)) (env ((□? (pat1 pat2)))))\""
  85
  42
  26
  17
  19
  4
  23
  1
  1/3
  15
  #f
  61/14
  ((6 6 0) (11/2 6 0) (11/2 11/2 0)))
'(clean-cache
  regex
  2
  15
  255
  app
  "\"'(eval\n  (λ (re f) (-> (app and (app regex-rep? re) (app f (app cadr re))) <-))\n  (env ((□? (re f)))))\""
  28
  13
  7
  8
  5
  2
  7
  1
  5/13
  6
  #f
  58/13
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  regex
  2
  15
  255
  app
  "\"'(eval\n  (app and (app regex-rep? re) (-> (app f (app cadr re)) <-))\n  (env ((□? (re f)))))\""
  46
  17
  15
  14
  9
  3
  12
  1
  9/14
  9
  #f
  77/17
  ((2 2 0) (2 5/2 0) (2 2 0)))
'(clean-cache
  regex
  2
  15
  255
  app
  "\"'(eval (app f (-> (app cadr re) <-)) (env ((□? (re f)))))\""
  50
  14
  21
  15
  10
  3
  13
  1
  5/7
  6
  #f
  31/7
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app cadr (-> re <-)) (env ((□? (re f)))))\""
  #f)
'(clean-cache
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app cadr re)) (env ((□? (re f)))))\""
  6
  2
  2
  2
  0
  1
  1
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  15
  255
  app
  "\"'(eval\n  (app and (-> (app regex-rep? re) <-) (app f (app cadr re)))\n  (env ((□? (re f)))))\""
  26
  11
  7
  8
  5
  2
  7
  1
  5/11
  5
  #f
  49/11
  ((1/2 1 0) (1/2 1 0) (1 1 0)))
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-rep? (-> re <-)) (env ((□? (re f)))))\""
  #f)
'(clean-cache
  regex
  2
  15
  255
  app
  "\"'(eval\n  (λ (re f)\n    (-> (app and (app regex-alt? re) (app f (app cadr re) (app caddr re))) <-))\n  (env ((□? (re f)))))\""
  26
  13
  6
  7
  5
  2
  7
  1
  5/13
  6
  #f
  58/13
  ((1/2 1/2 0) (1 1 0) (1/2 1/2 0)))
'(clean-cache
  regex
  2
  15
  255
  app
  "\"'(eval\n  (app and (app regex-alt? re) (-> (app f (app cadr re) (app caddr re)) <-))\n  (env ((□? (re f)))))\""
  62
  30
  15
  17
  16
  3
  19
  1
  9/17
  14
  #f
  68/15
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(clean-cache
  regex
  2
  15
  255
  app
  "\"'(eval (app f (app cadr re) (-> (app caddr re) <-)) (env ((□? (re f)))))\""
  52
  18
  20
  14
  14
  3
  17
  1
  3/4
  7
  #f
  79/18
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app caddr (-> re <-)) (env ((□? (re f)))))\""
  #f)
'(clean-cache
  regex
  2
  15
  255
  app
  "\"'(eval (app f (-> (app cadr re) <-) (app caddr re)) (env ((□? (re f)))))\""
  50
  14
  21
  15
  10
  3
  13
  1
  5/7
  6
  #f
  31/7
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app cadr (-> re <-)) (env ((□? (re f)))))\""
  #f)
'(clean-cache
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app cadr re) (app caddr re)) (env ((□? (re f)))))\""
  9
  3
  3
  3
  0
  1
  1
  1
  0
  2
  #f
  16/3
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  regex
  2
  15
  255
  app
  "\"'(eval\n  (app and (-> (app regex-alt? re) <-) (app f (app cadr re) (app caddr re)))\n  (env ((□? (re f)))))\""
  24
  11
  6
  7
  5
  2
  7
  1
  5/11
  5
  #f
  49/11
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-alt? (-> re <-)) (env ((□? (re f)))))\""
  #f)
'(clean-cache
  regex
  2
  15
  255
  app
  "\"'(eval\n  (λ (re f)\n    (-> (app and (app regex-seq? re) (app f (app cadr re) (app caddr re))) <-))\n  (env ((□? (re f)))))\""
  26
  13
  6
  7
  5
  2
  7
  1
  5/13
  6
  #f
  58/13
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  regex
  2
  15
  255
  app
  "\"'(eval\n  (app and (app regex-seq? re) (-> (app f (app cadr re) (app caddr re)) <-))\n  (env ((□? (re f)))))\""
  71
  31
  20
  20
  17
  4
  21
  1
  7/11
  15
  #f
  141/31
  ((4 4 0) (4 4 0) (4 4 0)))
'(clean-cache
  regex
  2
  15
  255
  app
  "\"'(eval (app f (app cadr re) (-> (app caddr re) <-)) (env ((□? (re f)))))\""
  52
  18
  20
  14
  14
  3
  17
  1
  3/4
  7
  #f
  79/18
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app caddr (-> re <-)) (env ((□? (re f)))))\""
  #f)
'(clean-cache
  regex
  2
  15
  255
  app
  "\"'(eval (app f (-> (app cadr re) <-) (app caddr re)) (env ((□? (re f)))))\""
  50
  14
  21
  15
  10
  3
  13
  1
  5/7
  6
  #f
  31/7
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app cadr (-> re <-)) (env ((□? (re f)))))\""
  #f)
'(clean-cache
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app cadr re) (app caddr re)) (env ((□? (re f)))))\""
  9
  3
  3
  3
  0
  1
  1
  1
  0
  2
  #f
  16/3
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  regex
  2
  15
  255
  app
  "\"'(eval\n  (app and (-> (app regex-seq? re) <-) (app f (app cadr re) (app caddr re)))\n  (env ((□? (re f)))))\""
  24
  11
  6
  7
  5
  2
  7
  1
  5/11
  5
  #f
  49/11
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-seq? (-> re <-)) (env ((□? (re f)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval\n  (λ (re) (-> (app or (app char? re) (app symbol? re)) <-))\n  (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval (app or (app char? re) (-> (app symbol? re) <-)) (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app symbol? (-> re <-)) (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval (app or (-> (app char? re) <-) (app symbol? re)) (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app char? (-> re <-)) (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval (λ (re) (-> (app eq? re (app #t)) <-)) (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  15
  255
  app
  "\"'(eval (app eq? re (-> (app #t) <-)) (env ((□? (re)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app eq? (-> re <-) (app #t)) (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval (λ (re) (-> (app eq? re (app #f)) <-)) (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  15
  255
  app
  "\"'(eval (app eq? re (-> (app #f) <-)) (env ((□? (re)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app eq? (-> re <-) (app #f)) (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval\n  (λ (re) (-> (app and (app pair? re) (app eq? (app car re) 'rep)) <-))\n  (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval\n  (app and (app pair? re) (-> (app eq? (app car re) 'rep) <-))\n  (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval (app eq? (-> (app car re) <-) 'rep) (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app car (-> re <-)) (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval\n  (app and (-> (app pair? re) <-) (app eq? (app car re) 'rep))\n  (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app pair? (-> re <-)) (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval\n  (λ (re) (-> (app and (app pair? re) (app eq? (app car re) 'seq)) <-))\n  (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval\n  (app and (app pair? re) (-> (app eq? (app car re) 'seq) <-))\n  (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval (app eq? (-> (app car re) <-) 'seq) (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app car (-> re <-)) (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval\n  (app and (-> (app pair? re) <-) (app eq? (app car re) 'seq))\n  (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app pair? (-> re <-)) (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval\n  (λ (re) (-> (app and (app pair? re) (app eq? (app car re) 'alt)) <-))\n  (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval\n  (app and (app pair? re) (-> (app eq? (app car re) 'alt) <-))\n  (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval (app eq? (-> (app car re) <-) 'alt) (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app car (-> re <-)) (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval\n  (app and (-> (app pair? re) <-) (app eq? (app car re) 'alt))\n  (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app pair? (-> re <-)) (env ((□? (re)))))\""
  #f)
'(clean-cache
  regex
  2
  15
  255
  app
  "\"'(eval\n  (letrec* (... regex-NULL (regex-BLANK (-> (app #t) <-)) regex-alt? ...) ...)\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  15
  255
  app
  "\"'(eval\n  (letrec* (... caddr (regex-NULL (-> (app #f) <-)) regex-BLANK ...) ...)\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval (λ (p) (-> (app car (app cdr (app cdr p))) <-)) (env ((□? (p)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval (app car (-> (app cdr (app cdr p)) <-)) (env ((□? (p)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval (app cdr (-> (app cdr p) <-)) (env ((□? (p)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app cdr (-> p <-)) (env ((□? (p)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval (λ (p) (-> (app car (app cdr p)) <-)) (env ((□? (p)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval (app car (-> (app cdr p) <-)) (env ((□? (p)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app cdr (-> p <-)) (env ((□? (p)))))\""
  #f)
'(clean-cache
  regex
  2
  15
  255
  match
  "\"'(eval (λ (null?-v) (-> (match null?-v ...) <-)) (env ((□? (null?-v)))))\""
  69
  48
  13
  8
  38
  4
  42
  1
  37/44
  40
  #f
  247/48
  ((11 23/2 0) (11 11 0) (12 25/2 0)))
'(clean-cache
  regex
  2
  15
  255
  app
  "\"'(eval (match null?-v (nil) (_ (-> (app #f) <-))) (env ((□? (null?-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  15
  255
  app
  "\"'(eval (match null?-v ((nil) (-> (app #t) <-)) _) (env ((□? (null?-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval (match (-> null?-v <-) (nil) _) (env ((□? (null?-v)))))\""
  52
  31
  13
  8
  29
  4
  33
  1
  95/102
  26
  #f
  158/31
  ((9/2 9/2 0) (5 5 0) (9/2 9/2 0)))
'(clean-cache
  regex
  2
  255
  match
  "\"'(eval (λ (pair?-v) (-> (match pair?-v ...) <-)) (env ((□? (pair?-v)))))\""
  #f)
'(clean-cache
  regex
  2
  15
  255
  app
  "\"'(eval\n  (match pair?-v (cons pair?-c pair?-d) (_ (-> (app #f) <-)))\n  (env ((□? (pair?-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  15
  255
  app
  "\"'(eval\n  (match pair?-v ((cons pair?-c pair?-d) (-> (app #t) <-)) _)\n  (env ((□? (pair?-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (match (-> pair?-v <-) (cons pair?-c pair?-d) _) (env ((□? (pair?-v)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval\n  (λ (cadr-v) (-> (app car (app cdr (app cdr cadr-v))) <-))\n  (env ((□? (cadr-v)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval (app car (-> (app cdr (app cdr cadr-v)) <-)) (env ((□? (cadr-v)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval (app cdr (-> (app cdr cadr-v) <-)) (env ((□? (cadr-v)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app cdr (-> cadr-v <-)) (env ((□? (cadr-v)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval (λ (cadr-v) (-> (app car (app cdr cadr-v)) <-)) (env ((□? (cadr-v)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  app
  "\"'(eval (app car (-> (app cdr cadr-v) <-)) (env ((□? (cadr-v)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app cdr (-> cadr-v <-)) (env ((□? (cadr-v)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  match
  "\"'(eval (λ (cdr-v) (-> (match cdr-v ...) <-)) (env ((□? (cdr-v)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (match cdr-v ((cons cdr-c cdr-d) (-> cdr-d <-))) (env ((□? (cdr-v)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (match (-> cdr-v <-) (cons cdr-c cdr-d)) (env ((□? (cdr-v)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  match
  "\"'(eval (λ (car-v) (-> (match car-v ...) <-)) (env ((□? (car-v)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (match car-v ((cons car-c car-d) (-> car-c <-))) (env ((□? (car-v)))))\""
  #f)
'(clean-cache
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (match (-> car-v <-) (cons car-c car-d)) (env ((□? (car-v)))))\""
  #f)
'(clean-cache
  regex
  2
  15
  255
  app
  "\"'(eval\n  (letrec*\n   (car ... check-expect)\n   (->\n    (app\n     check-expect\n     (app\n      regex-match\n      (app\n       cons\n       'seq\n       (app\n        cons\n        'foo\n        (app cons (app cons 'rep (app cons 'bar (app nil))) (app nil))))\n      (app cons 'foo (app cons 'bar (app nil))))\n     (app #f))\n    <-))\n  (env ()))\""
  27
  16
  7
  4
  16
  5
  21
  1
  1
  7
  #f
  71/16
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  regex
  2
  15
  255
  app
  "\"'(eval\n  (app\n   check-expect\n   (app\n    regex-match\n    (app\n     cons\n     'seq\n     (app\n      cons\n      'foo\n      (app cons (app cons 'rep (app cons 'bar (app nil))) (app nil))))\n    (app cons 'foo (app cons 'bar (app nil))))\n   (-> (app #f) <-))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  15
  255
  app
  "\"'(eval\n  (app\n   check-expect\n   (->\n    (app\n     regex-match\n     (app\n      cons\n      'seq\n      (app\n       cons\n       'foo\n       (app cons (app cons 'rep (app cons 'bar (app nil))) (app nil))))\n     (app cons 'foo (app cons 'bar (app nil))))\n    <-)\n   (app #f))\n  (env ()))\""
  18
  10
  5
  3
  10
  3
  13
  1
  1
  4
  #f
  22/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  regex
  2
  15
  255
  app
  "\"'(eval\n  (app\n   regex-match\n   (app\n    cons\n    'seq\n    (app\n     cons\n     'foo\n     (app cons (app cons 'rep (app cons 'bar (app nil))) (app nil))))\n   (-> (app cons 'foo (app cons 'bar (app nil))) <-))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  15
  255
  app
  "\"'(eval (app cons 'foo (-> (app cons 'bar (app nil)) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  15
  255
  app
  "\"'(eval (app cons 'bar (-> (app nil) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  15
  255
  app
  "\"'(eval\n  (app\n   regex-match\n   (->\n    (app\n     cons\n     'seq\n     (app\n      cons\n      'foo\n      (app cons (app cons 'rep (app cons 'bar (app nil))) (app nil))))\n    <-)\n   (app cons 'foo (app cons 'bar (app nil))))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  15
  255
  app
  "\"'(eval\n  (app\n   cons\n   'seq\n   (->\n    (app\n     cons\n     'foo\n     (app cons (app cons 'rep (app cons 'bar (app nil))) (app nil)))\n    <-))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  15
  255
  app
  "\"'(eval\n  (app\n   cons\n   'foo\n   (-> (app cons (app cons 'rep (app cons 'bar (app nil))) (app nil)) <-))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  15
  255
  app
  "\"'(eval\n  (app cons (app cons 'rep (app cons 'bar (app nil))) (-> (app nil) <-))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  15
  255
  app
  "\"'(eval\n  (app cons (-> (app cons 'rep (app cons 'bar (app nil))) <-) (app nil))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  15
  255
  app
  "\"'(eval (app cons 'rep (-> (app cons 'bar (app nil)) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(clean-cache
  regex
  2
  15
  255
  app
  "\"'(eval (app cons 'bar (-> (app nil) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval (match (-> (app regex-null? re) <-) (#f) _) (env ((□? (re c)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval (app cons (-> pat <-) (app nil)) (env ((□? (pat)))))\""
  64
  20
  25
  19
  13
  4
  17
  1
  13/18
  8
  #f
  22/5
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  0
  regex
  2
  15
  255
  app
  "\"'(eval (match (-> (app regex-null? pat1) <-) (#f) _) (env ((□? (pat1 pat2)))))\""
  178
  77
  63
  38
  42
  10
  52
  1
  313/595
  30
  #f
  338/77
  ((17/2 17/2 0) (17/2 17/2 0) (9 9 0)))
'(shuffled-cache
  0
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval\n  (match (app match-seq re (λ (pat1 pat2) ...)) (#f) (c-x (-> c-x <-)))\n  (env ((□? (re)))))\""
  205
  94
  69
  42
  52
  12
  64
  1
  1289/2380
  38
  #f
  207/47
  ((1 1 0) (3/2 3/2 0) (1 1 0)))
'(shuffled-cache
  0
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval\n  (match (app regex-empty? pat2) (#f) (_ (-> pat1 <-)))\n  (env ((□? (pat1 pat2)))))\""
  262
  146
  69
  47
  76
  12
  88
  1
  531/1078
  54
  #f
  319/73
  ((11/2 11/2 0) (11/2 11/2 0) (11/2 11/2 0)))
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app match-seq (-> re <-) (λ (pat1 pat2) ...)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval (app regex-empty (-> pat1 <-)) (env ((□? (pat1 pat2)) (□? (re)))))\""
  57
  17
  23
  17
  13
  3
  16
  1
  13/17
  8
  #f
  76/17
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app pair? (-> re <-)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  15
  255
  app
  "\"'(eval (app cons pat (-> (app nil) <-)) (env ((□? (pat)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  15
  255
  app
  "\"'(eval\n  (app\n   cons\n   'seq\n   (->\n    (app\n     cons\n     'foo\n     (app cons (app cons 'rep (app cons 'bar (app nil))) (app nil)))\n    <-))\n  (env ()))\""
  5
  4
  0
  1
  2
  0
  2
  1
  1/2
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  15
  255
  app
  "\"'(eval\n  (app seq (app regex-empty pat1) (-> (app regex-empty pat2) <-))\n  (env ((□? (pat1 pat2)) (□? (re)))))\""
  40
  15
  14
  11
  8
  2
  10
  1
  8/15
  9
  #f
  23/5
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  regex
  2
  15
  255
  app
  "\"'(eval\n  (match\n   (app regex-empty? pat2)\n   ((#f) (-> (app cons 'seq (app cons pat1 (app cons pat2 (app nil)))) <-))\n   _)\n  (env ((□? (pat1 pat2)))))\""
  42
  17
  14
  11
  8
  2
  10
  1
  8/17
  11
  #t
  79/17
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval\n  (match (app regex-atom? re) (#f) (_ (-> regex-NULL <-)))\n  (env ((□? (re c)))))\""
  45
  20
  14
  11
  10
  2
  12
  1
  1/2
  14
  #t
  47/10
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  255
  match
  "\"'(eval\n  (λ (pattern data) (-> (match (app null? data) ...) <-))\n  (env ((□? (pattern data)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  15
  255
  app
  "\"'(eval\n  (λ (check expect) (-> (app equal? check expect) <-))\n  (env ((□? (check expect)))))\""
  26
  15
  7
  4
  12
  5
  17
  1
  11/13
  6
  #f
  22/5
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  regex
  2
  15
  255
  app
  "\"'(eval\n  (app seq (app regex-empty pat1) (-> (app regex-derivative pat2 c) <-))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  62
  27
  21
  14
  18
  7
  25
  1
  17/25
  11
  #f
  119/27
  ((2 2 0) (3/2 2 0) (2 2 0)))
'(shuffled-cache
  0
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval (app regex-null? (-> pat1 <-)) (env ((□? (pat1 pat2)))))\""
  127
  59
  45
  23
  33
  11
  44
  1
  25/46
  23
  #f
  259/59
  ((11/2 11/2 0) (5 5 0) (5 5 0)))
'(shuffled-cache
  0
  regex
  2
  15
  255
  app
  "\"'(eval (match (-> (app regex-empty? pat) <-) (#f) _) (env ((□? (pat)))))\""
  201
  92
  70
  39
  52
  15
  67
  1
  1147/1980
  36
  #f
  101/23
  ((9/2 5 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  0
  regex
  2
  15
  255
  app
  "\"'(eval (match (app regex-rep? re) ((#f) (-> (app #f) <-)) _) (env ((□? (re)))))\""
  203
  94
  70
  39
  52
  15
  67
  1
  1147/2040
  38
  #t
  207/47
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  15
  255
  app
  "\"'(eval\n  (match pair?-v (cons pair?-c pair?-d) (_ (-> (app #f) <-)))\n  (env ((□? (pair?-v)))))\""
  206
  96
  70
  40
  52
  15
  67
  1
  1147/2100
  40
  #t
  53/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app eq? c (-> re <-)) (env ((□? (re c)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  15
  255
  app
  "\"'(eval\n  (match (-> (app match-alt re (λ (pat1 pat2) ...)) <-) (#f) c-x)\n  (env ((□? (re)))))\""
  31
  16
  6
  9
  10
  2
  12
  1
  5/8
  8
  #f
  9/2
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  regex
  2
  15
  255
  app
  "\"'(eval (app cons 'bar (-> (app nil) <-)) (env ()))\""
  33
  18
  6
  9
  12
  2
  14
  1
  2/3
  10
  #t
  41/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  15
  255
  match
  "\"'(eval (λ (pat) (-> (match (app regex-null? pat) ...) <-)) (env ((□? (pat)))))\""
  122
  55
  39
  28
  33
  7
  40
  1
  2/3
  24
  #f
  244/55
  ((5 5 0) (6 6 0) (11/2 11/2 0)))
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval\n  (λ (cadr-v) (-> (app car (app cdr (app cdr cadr-v))) <-))\n  (env ((□? (cadr-v)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  15
  255
  app
  "\"'(eval\n  (λ (pat1 pat2)\n    (->\n     (app alt (app regex-derivative pat1 c) (app regex-derivative pat2 c))\n     <-))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  34
  11
  12
  11
  6
  2
  8
  1
  6/11
  5
  #f
  49/11
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  regex
  2
  15
  255
  app
  "\"'(eval\n  (app cons (app cons 'rep (app cons 'bar (app nil))) (-> (app nil) <-))\n  (env ()))\""
  36
  13
  12
  11
  8
  2
  10
  1
  8/13
  7
  #t
  59/13
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  15
  255
  match
  "\"'(eval\n  (match\n   (app regex-null? pat2)\n   ((#f) (-> (match (app regex-empty? pat1) ...) <-))\n   _)\n  (env ((□? (pat1 pat2)))))\""
  153
  89
  38
  26
  43
  6
  49
  1
  29/72
  32
  #f
  388/89
  ((19/2 10 0) (19/2 10 0) (19/2 10 0)))
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app car (-> re <-)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (match (-> pair?-v <-) (cons pair?-c pair?-d) _) (env ((□? (pair?-v)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval (app equal? check (-> expect <-)) (env ((□? (check expect)))))\""
  6
  3
  2
  1
  2
  2
  4
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app match-seq (-> re <-) (λ (pat1 pat2) ...)) (env ((□? (re c)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  15
  255
  match
  "\"'(eval\n  (match\n   (app regex-atom? re)\n   ((#f) (-> (match (app match-seq re (λ (pat1 pat2) ...)) ...) <-))\n   _)\n  (env ((□? (re c)))))\""
  32
  17
  6
  9
  10
  2
  12
  1
  10/17
  8
  #f
  76/17
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  regex
  2
  15
  255
  app
  "\"'(eval\n  (λ (pat1 pat2)\n    (-> (app seq (app regex-empty pat1) (app regex-empty pat2)) <-))\n  (env ((□? (pat1 pat2)) (□? (re)))))\""
  66
  28
  19
  19
  16
  4
  20
  1
  4/7
  13
  #f
  125/28
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval\n  (app cons (-> pat1 <-) (app cons pat2 (app nil)))\n  (env ((□? (pat1 pat2)))))\""
  140
  71
  40
  29
  35
  7
  42
  1
  47/104
  28
  #f
  312/71
  ((6 6 0) (6 6 0) (6 6 0)))
'(shuffled-cache
  0
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval (match (app eq? c re) (#f) (_ (-> regex-BLANK <-))) (env ((□? (re c)))))\""
  143
  74
  40
  29
  37
  7
  44
  1
  51/110
  31
  #t
  327/74
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  15
  255
  app
  "\"'(eval (app cons 'rep (-> (app cons pat (app nil)) <-)) (env ((□? (pat)))))\""
  145
  76
  40
  29
  37
  7
  44
  1
  17/38
  33
  #t
  337/76
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  15
  255
  app
  "\"'(eval\n  (app\n   alt\n   (-> (app seq (app regex-derivative pat1 c) pat2) <-)\n   (app seq (app regex-empty pat1) (app regex-derivative pat2 c)))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  156
  86
  40
  30
  41
  7
  48
  1
  51/118
  36
  #f
  190/43
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval\n  (app cons (-> pat1 <-) (app cons pat2 (app nil)))\n  (env ((□? (pat1 pat2)))))\""
  182
  106
  44
  32
  49
  8
  57
  1
  51/128
  42
  #f
  233/53
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app char? (-> re <-)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  15
  255
  app
  "\"'(eval\n  (λ (re f) (-> (app and (app regex-rep? re) (app f (app cadr re))) <-))\n  (env ((□? (re f)))))\""
  28
  13
  7
  8
  5
  2
  7
  1
  5/13
  6
  #f
  58/13
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  regex
  2
  15
  255
  match
  "\"'(eval\n  (match\n   (app regex-null? pat)\n   ((#f) (-> (match (app regex-empty? pat) ...) <-))\n   _)\n  (env ((□? (pat)))))\""
  122
  57
  39
  26
  30
  7
  37
  1
  71/114
  24
  #f
  84/19
  ((11/2 11/2 0) (11/2 11/2 0) (11/2 11/2 0)))
'(shuffled-cache
  0
  regex
  2
  15
  255
  app
  "\"'(eval\n  (match (-> (app match-rep re (λ (pat) ...)) <-) (#f) c-x)\n  (env ((□? (re c)))))\""
  125
  59
  39
  27
  30
  7
  37
  1
  71/117
  24
  #f
  260/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval\n  (app and (-> (app pair? re) <-) (app eq? (app car re) 'seq))\n  (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  15
  255
  app
  "\"'(eval (app cons 'rep (-> (app cons 'bar (app nil)) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  15
  255
  app
  "\"'(eval\n  (app\n   check-expect\n   (app\n    regex-match\n    (app\n     cons\n     'seq\n     (app\n      cons\n      'foo\n      (app cons (app cons 'rep (app cons 'bar (app nil))) (app nil))))\n    (app cons 'foo (app cons 'bar (app nil))))\n   (-> (app #f) <-))\n  (env ()))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval\n  (app regex-derivative (-> pattern <-) (app car data))\n  (env ((□? (pattern data)))))\""
  54
  27
  17
  10
  26
  4
  30
  1
  18/19
  15
  #t
  41/9
  ((5/2 5/2 0) (5/2 3 0) (3 3 0)))
'(shuffled-cache
  0
  regex
  2
  15
  255
  app
  "\"'(eval\n  (match (-> (app match-alt re (λ (pat1 pat2) ...)) <-) (#f) c-x)\n  (env ((□? (re c)))))\""
  84
  43
  23
  18
  36
  6
  42
  1
  4/5
  23
  #f
  195/43
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-alt? (-> re <-)) (env ((□? (re f)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app cadr (-> re <-)) (env ((□? (re f)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  15
  255
  app
  "\"'(eval (app f (app cadr re) (-> (app caddr re) <-)) (env ((□? (re f)))))\""
  52
  18
  20
  14
  14
  3
  17
  1
  3/4
  7
  #f
  79/18
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval (app regex-empty (-> pat2 <-)) (env ((□? (pat1 pat2)) (□? (re)))))\""
  64
  25
  22
  17
  17
  3
  20
  1
  14/19
  11
  #f
  111/25
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app eq? (-> re <-) (app #t)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval\n  (match (app regex-empty? pat) (#f) (_ (-> regex-BLANK <-)))\n  (env ((□? (pat)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app cdr (-> cadr-v <-)) (env ((□? (cadr-v)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  15
  255
  app
  "\"'(eval (match (-> (app regex-null? pat2) <-) (#f) _) (env ((□? (pat1 pat2)))))\""
  197
  102
  58
  37
  62
  9
  71
  1
  14783/24024
  39
  #f
  149/34
  ((29/2 15 0) (29/2 29/2 0) (27/2 14 0)))
'(shuffled-cache
  0
  regex
  2
  15
  255
  app
  "\"'(eval\n  (app and (-> (app regex-seq? re) <-) (app f (app cadr re) (app caddr re)))\n  (env ((□? (re f)))))\""
  216
  113
  64
  39
  71
  11
  82
  1
  18941/29106
  44
  #f
  496/113
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval\n  (λ (re) (-> (app or (app char? re) (app symbol? re)) <-))\n  (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  match
  "\"'(eval\n  (match\n   (app regex-null? re)\n   ((#f) (-> (match (app regex-atom? re) ...) <-))\n   _)\n  (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval (app regex-empty (-> pat1 <-)) (env ((□? (pat1 pat2)) (□? (re)))))\""
  57
  17
  23
  17
  13
  3
  16
  1
  13/17
  8
  #f
  76/17
  ((2 5/2 0) (2 2 0) (2 5/2 0)))
'(shuffled-cache
  0
  regex
  2
  15
  255
  app
  "\"'(eval\n  (match (app regex-empty? re) (#f) (_ (-> (app #t) <-)))\n  (env ((□? (re)))))\""
  59
  19
  23
  17
  13
  3
  16
  1
  13/19
  10
  #t
  86/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app match-rep (-> re <-) (λ (pat) ...)) (env ((□? (re c)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app match-alt (-> re <-) (λ (pat1 pat2) ...)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  15
  255
  app
  "\"'(eval (app f (-> (app cadr re) <-) (app caddr re)) (env ((□? (re f)))))\""
  50
  14
  21
  15
  10
  3
  13
  1
  5/7
  6
  #f
  31/7
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval\n  (app regex-derivative (-> pat1 <-) c)\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  66
  25
  23
  18
  17
  3
  20
  1
  12/19
  11
  #f
  111/25
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  regex
  2
  15
  255
  app
  "\"'(eval (app f (-> (app cadr re) <-) (app caddr re)) (env ((□? (re f)))))\""
  67
  26
  23
  18
  17
  3
  20
  1
  12/19
  11
  #f
  115/26
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  15
  255
  app
  "\"'(eval\n  (app and (app regex-rep? re) (-> (app f (app cadr re)) <-))\n  (env ((□? (re f)))))\""
  111
  43
  38
  30
  26
  6
  32
  1
  7/11
  20
  #f
  192/43
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  regex
  2
  15
  255
  app
  "\"'(eval\n  (match\n   (app regex-null? pat2)\n   ((#f) (-> (app cons 'alt (app cons pat1 (app cons pat2 (app nil)))) <-))\n   _)\n  (env ((□? (pat1 pat2)))))\""
  113
  45
  38
  30
  26
  6
  32
  1
  3/5
  22
  #t
  202/45
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  15
  255
  app
  "\"'(eval\n  (match\n   (app regex-empty? pat)\n   ((#f) (-> (app cons 'rep (app cons pat (app nil))) <-))\n   _)\n  (env ((□? (pat)))))\""
  115
  47
  38
  30
  26
  6
  32
  1
  21/37
  24
  #t
  212/47
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval (app null? (-> data <-)) (env ((□? (pattern data)))))\""
  144
  73
  41
  30
  51
  8
  59
  1
  33/50
  46
  #f
  343/73
  ((7/2 7/2 0) (3 7/2 0) (3 3 0)))
'(shuffled-cache
  0
  regex
  2
  15
  255
  lettypes
  "\"'(eval ((top) lettypes (cons ... nil) ...) (env ()))\""
  228
  133
  59
  36
  111
  13
  124
  1
  279/344
  79
  #f
  624/133
  ((6 6 0) (13/2 13/2 0) (6 6 0)))
'(shuffled-cache
  0
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval (match (-> null?-v <-) (nil) _) (env ((□? (null?-v)))))\""
  230
  134
  59
  37
  111
  13
  124
  1
  833/1032
  79
  #f
  631/134
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (match (-> car-v <-) (cons car-c car-d)) (env ((□? (car-v)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  15
  255
  app
  "\"'(eval\n  (app cons pat1 (-> (app cons pat2 (app nil)) <-))\n  (env ((□? (pat1 pat2)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app car (-> re <-)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  15
  255
  app
  "\"'(eval (match (-> (app null? data) <-) (#f) _) (env ((□? (pattern data)))))\""
  74
  53
  13
  8
  44
  4
  48
  1
  257/300
  44
  #f
  272/53
  ((25/2 25/2 0) (21/2 11 0) (13 27/2 0)))
'(shuffled-cache
  0
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app cadr re) (app caddr re)) (env ((□? (re f)))))\""
  83
  56
  16
  11
  44
  5
  49
  1
  257/336
  46
  #f
  36/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval\n  (app and (-> (app pair? re) <-) (app eq? (app car re) 'alt))\n  (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval\n  (app regex-derivative (-> pat2 <-) c)\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  59
  21
  22
  16
  17
  3
  20
  1
  15/19
  9
  #f
  31/7
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval\n  (match (app regex-null? pat2) (#f) (_ (-> regex-NULL <-)))\n  (env ((□? (pat1 pat2)))))\""
  63
  24
  22
  17
  19
  3
  22
  1
  17/22
  12
  #t
  9/2
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval (app eq? (-> (app car re) <-) 'seq) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  15
  255
  app
  "\"'(eval\n  (match (-> (app match-seq re (λ (pat1 pat2) ...)) <-) (#f) c-x)\n  (env ((□? (re)))))\""
  31
  16
  6
  9
  10
  2
  12
  1
  5/8
  8
  #f
  9/2
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  regex
  2
  15
  255
  app
  "\"'(eval\n  (λ (pat) (-> (app seq (app regex-derivative pat c) (app rep pat)) <-))\n  (env ((□? (pat)) (□? (re c)))))\""
  65
  27
  19
  19
  16
  4
  20
  1
  16/27
  13
  #f
  121/27
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval (match (-> (app regex-atom? re) <-) (#f) _) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval (app cons (-> pat2 <-) (app nil)) (env ((□? (pat1 pat2)))))\""
  91
  34
  38
  19
  17
  6
  23
  1
  14/31
  14
  #f
  75/17
  ((6 13/2 0) (6 13/2 0) (6 6 0)))
'(shuffled-cache
  0
  regex
  2
  15
  255
  app
  "\"'(eval\n  (app and (-> (app regex-alt? re) <-) (app f (app cadr re) (app caddr re)))\n  (env ((□? (re f)))))\""
  115
  45
  44
  26
  22
  8
  30
  1
  19/42
  19
  #f
  199/45
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  regex
  2
  15
  255
  app
  "\"'(eval\n  (app seq (-> (app regex-derivative pat c) <-) (app rep pat))\n  (env ((□? (pat)) (□? (re c)))))\""
  126
  55
  44
  27
  26
  8
  34
  1
  19/44
  22
  #f
  22/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  regex
  2
  15
  255
  app
  "\"'(eval (app cons pat2 (-> (app nil) <-)) (env ((□? (pat1 pat2)))))\""
  133
  59
  44
  30
  26
  8
  34
  1
  19/46
  26
  #t
  262/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval (app or (app char? re) (-> (app symbol? re) <-)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  15
  255
  app
  "\"'(eval\n  (app seq (-> (app regex-derivative pat1 c) <-) pat2)\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  37
  12
  14
  11
  6
  2
  8
  1
  1/2
  5
  #f
  53/12
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  regex
  2
  15
  255
  app
  "\"'(eval\n  (app cons pat1 (-> (app cons pat2 (app nil)) <-))\n  (env ((□? (pat1 pat2)))))\""
  40
  14
  14
  12
  6
  2
  8
  1
  3/7
  7
  #t
  9/2
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  15
  255
  match
  "\"'(eval\n  (match\n   (app regex-null? pat1)\n   ((#f) (-> (match (app regex-null? pat2) ...) <-))\n   _)\n  (env ((□? (pat1 pat2)))))\""
  138
  76
  38
  24
  33
  6
  39
  1
  242/665
  30
  #f
  337/76
  ((15/2 15/2 0) (15/2 15/2 0) (15/2 8 0)))
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval (app eq? (-> (app car re) <-) 'alt) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval\n  (match (app match-alt re (λ (pat1 pat2) ...)) (#f) (c-x (-> c-x <-)))\n  (env ((□? (re c)))))\""
  32
  17
  6
  9
  10
  2
  12
  1
  10/17
  8
  #f
  76/17
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  regex
  2
  255
  match
  "\"'(eval\n  (match\n   (app regex-empty? re)\n   ((#f) (-> (match (app regex-null? re) ...) <-))\n   _)\n  (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval\n  (match (app match-seq re (λ (pat1 pat2) ...)) (#f) (c-x (-> c-x <-)))\n  (env ((□? (re c)))))\""
  32
  17
  6
  9
  10
  2
  12
  1
  10/17
  8
  #f
  76/17
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval\n  (match (app regex-null? pat2) (#f) (_ (-> pat1 <-)))\n  (env ((□? (pat1 pat2)))))\""
  122
  51
  44
  27
  27
  8
  35
  1
  1/2
  22
  #f
  226/51
  ((6 6 0) (13/2 13/2 0) (7 7 0)))
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-atom? (-> re <-)) (env ((□? (re c)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  15
  255
  app
  "\"'(eval\n  (letrec* (... caddr (regex-NULL (-> (app #f) <-)) regex-BLANK ...) ...)\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval (λ (p) (-> (app car (app cdr (app cdr p))) <-)) (env ((□? (p)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval\n  (λ (re) (-> (app and (app pair? re) (app eq? (app car re) 'seq)) <-))\n  (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  15
  255
  app
  "\"'(eval (match (-> (app regex-rep? re) <-) (#f) _) (env ((□? (re)))))\""
  26
  11
  7
  8
  5
  2
  7
  1
  5/11
  5
  #f
  49/11
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval\n  (match (app regex-empty? re) (#f) (_ (-> regex-NULL <-)))\n  (env ((□? (re c)))))\""
  30
  14
  7
  9
  7
  2
  9
  1
  1/2
  8
  #t
  32/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  15
  255
  app
  "\"'(eval (app eq? re (-> (app #f) <-)) (env ((□? (re)))))\""
  33
  16
  7
  10
  7
  2
  9
  1
  7/16
  10
  #t
  37/8
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval (match (-> (app regex-null? pat) <-) (#f) _) (env ((□? (pat)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  15
  255
  app
  "\"'(eval\n  (app alt (app regex-derivative pat1 c) (-> (app regex-derivative pat2 c) <-))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  149
  62
  54
  33
  33
  9
  42
  1
  22/39
  29
  #f
  277/62
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  regex
  2
  15
  255
  app
  "\"'(eval (match (-> (app regex-null? pat2) <-) (#f) _) (env ((□? (pat1 pat2)))))\""
  219
  106
  70
  43
  55
  12
  67
  1
  1445/2898
  45
  #f
  469/106
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval (app car (-> (app cdr cadr-v) <-)) (env ((□? (cadr-v)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-null? (-> re <-)) (env ((□? (re c)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval (app cdr (-> (app cdr p) <-)) (env ((□? (p)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval (match (-> (app regex-null? re) <-) (#f) _) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval (match (-> (app regex-atom? re) <-) (#f) _) (env ((□? (re c)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  15
  255
  app
  "\"'(eval\n  (app\n   cons\n   'foo\n   (-> (app cons (app cons 'rep (app cons 'bar (app nil))) (app nil)) <-))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  255
  match
  "\"'(eval (λ (car-v) (-> (match car-v ...) <-)) (env ((□? (car-v)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval (app cdr (-> data <-)) (env ((□? (pattern data)))))\""
  42
  25
  11
  6
  24
  3
  27
  1
  59/60
  23
  #f
  128/25
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval (app or (-> (app char? re) <-) (app symbol? re)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  15
  255
  app
  "\"'(eval (match (-> (app regex-null? pat1) <-) (#f) _) (env ((□? (pat1 pat2)))))\""
  130
  72
  34
  24
  36
  5
  41
  1
  533/1350
  26
  #f
  157/36
  ((9 19/2 0) (10 21/2 0) (9 19/2 0)))
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app cons (-> pat2 <-) (app nil)) (env ((□? (pat1 pat2)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  15
  255
  app
  "\"'(eval\n  (app alt (app regex-empty pat1) (-> (app regex-empty pat2) <-))\n  (env ((□? (pat1 pat2)) (□? (re)))))\""
  272
  172
  58
  42
  96
  9
  105
  1
  5023/9702
  62
  #f
  375/86
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  regex
  2
  15
  255
  app
  "\"'(eval\n  (app cons (-> (app cons 'rep (app cons 'bar (app nil))) <-) (app nil))\n  (env ()))\""
  274
  174
  58
  42
  98
  9
  107
  1
  5331/10010
  64
  #t
  380/87
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval (λ (re) (-> (app eq? re (app #t)) <-)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  15
  255
  app
  "\"'(eval (app cons pat2 (-> (app nil) <-)) (env ((□? (pat1 pat2)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval (app car (-> (app cdr (app cdr p)) <-)) (env ((□? (p)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval (app regex-null? (-> pat2 <-)) (env ((□? (pat1 pat2)))))\""
  161
  69
  58
  34
  42
  9
  51
  1
  19/30
  27
  #f
  101/23
  ((21/2 21/2 0) (21/2 11 0) (21/2 11 0)))
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval (match (-> (app regex-empty? re) <-) (#f) _) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-atom? (-> re <-)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval\n  (app regex-derivative pat1 (-> c <-))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval (app eq? (-> (app car re) <-) 'rep) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval (app cdr (-> (app cdr cadr-v) <-)) (env ((□? (cadr-v)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app caddr (-> re <-)) (env ((□? (re f)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  15
  255
  app
  "\"'(eval\n  (app seq (app regex-derivative pat c) (-> (app rep pat) <-))\n  (env ((□? (pat)) (□? (re c)))))\""
  30
  11
  10
  9
  6
  2
  8
  1
  6/11
  5
  #f
  49/11
  ((1 3/2 0) (1 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  regex
  2
  15
  255
  app
  "\"'(eval\n  (match (-> (app match-seq re (λ (pat1 pat2) ...)) <-) (#f) c-x)\n  (env ((□? (re c)))))\""
  60
  27
  16
  17
  16
  4
  20
  1
  16/27
  13
  #f
  121/27
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval\n  (app seq (app regex-derivative pat1 c) (-> pat2 <-))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  111
  46
  38
  27
  32
  7
  39
  1
  15/22
  20
  #f
  102/23
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval (app regex-null? (-> pat <-)) (env ((□? (pat)))))\""
  144
  70
  44
  30
  47
  8
  55
  1
  38/55
  28
  #f
  22/5
  ((5/2 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app car (-> re <-)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval (app regex-empty? (-> pat2 <-)) (env ((□? (pat1 pat2)))))\""
  161
  69
  58
  34
  42
  9
  51
  1
  19/30
  27
  #f
  101/23
  ((21/2 11 0) (21/2 11 0) (21/2 11 0)))
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app symbol? (-> re <-)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval\n  (app and (app pair? re) (-> (app eq? (app car re) 'seq) <-))\n  (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  15
  255
  app
  "\"'(eval\n  (letrec*\n   (car ... check-expect)\n   (->\n    (app\n     check-expect\n     (app\n      regex-match\n      (app\n       cons\n       'seq\n       (app\n        cons\n        'foo\n        (app cons (app cons 'rep (app cons 'bar (app nil))) (app nil))))\n      (app cons 'foo (app cons 'bar (app nil))))\n     (app #f))\n    <-))\n  (env ()))\""
  27
  16
  7
  4
  16
  5
  21
  1
  1
  7
  #f
  71/16
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval\n  (app\n   regex-match\n   (app regex-derivative pattern (app car data))\n   (-> (app cdr data) <-))\n  (env ((□? (pattern data)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  15
  255
  app
  "\"'(eval\n  (match pair?-v ((cons pair?-c pair?-d) (-> (app #t) <-)) _)\n  (env ((□? (pair?-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval (app regex-null? (-> pat1 <-)) (env ((□? (pat1 pat2)))))\""
  88
  44
  26
  18
  19
  4
  23
  1
  4/13
  17
  #f
  193/44
  ((13/2 13/2 0) (6 6 0) (6 6 0)))
'(shuffled-cache
  0
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval\n  (match (app match-rep re (λ (pat) ...)) (#f) (c-x (-> c-x <-)))\n  (env ((□? (re c)))))\""
  120
  61
  33
  26
  29
  6
  35
  1
  18/43
  25
  #f
  269/61
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval\n  (λ (re) (-> (app and (app pair? re) (app eq? (app car re) 'rep)) <-))\n  (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval (app regex-derivative (-> pat <-) c) (env ((□? (pat)) (□? (re c)))))\""
  57
  17
  23
  17
  13
  3
  16
  1
  13/17
  8
  #f
  76/17
  ((5/2 5/2 0) (5/2 5/2 0) (2 5/2 0)))
'(shuffled-cache
  0
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app cadr re) (app caddr re)) (env ((□? (re f)))))\""
  64
  20
  26
  18
  13
  4
  17
  1
  13/20
  10
  #f
  23/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  regex
  2
  15
  255
  app
  "\"'(eval (app eq? re (-> (app #t) <-)) (env ((□? (re)))))\""
  67
  22
  26
  19
  13
  4
  17
  1
  13/22
  12
  #t
  51/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval (app regex-empty (-> pat1 <-)) (env ((□? (pat1 pat2)) (□? (re c)))))\""
  82
  33
  28
  21
  20
  4
  24
  1
  14/27
  17
  #f
  151/33
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval\n  (match (app match-rep re (λ (pat) ...)) ((#f) (-> regex-NULL <-)) c-x)\n  (env ((□? (re c)))))\""
  85
  36
  28
  21
  22
  4
  26
  1
  8/15
  20
  #t
  83/18
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  15
  255
  app
  "\"'(eval\n  (match\n   (app null? data)\n   (#f)\n   (_ (-> (app regex-empty? (app regex-empty pattern)) <-)))\n  (env ((□? (pattern data)))))\""
  123
  52
  42
  29
  28
  6
  34
  1
  41/86
  27
  #f
  237/52
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval\n  (match (app regex-null? re) (#f) (_ (-> regex-NULL <-)))\n  (env ((□? (re c)))))\""
  124
  53
  42
  29
  28
  6
  34
  1
  41/88
  28
  #t
  242/53
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-empty? (-> re <-)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  match
  "\"'(eval (λ (pair?-v) (-> (match pair?-v ...) <-)) (env ((□? (pair?-v)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval (match (-> (app regex-empty? re) <-) (#f) _) (env ((□? (re c)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  15
  255
  app
  "\"'(eval\n  (app seq (-> (app regex-empty pat1) <-) (app regex-derivative pat2 c))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  36
  11
  14
  11
  6
  2
  8
  1
  6/11
  5
  #f
  49/11
  ((2 2 0) (3/2 3/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app cadr re)) (env ((□? (re f)))))\""
  41
  13
  16
  12
  6
  3
  9
  1
  6/13
  7
  #t
  59/13
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app cdr (-> p <-)) (env ((□? (p)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  15
  255
  app
  "\"'(eval\n  (app\n   regex-match\n   (-> (app regex-derivative pattern (app car data)) <-)\n   (app cdr data))\n  (env ((□? (pattern data)))))\""
  37
  12
  14
  11
  6
  2
  8
  1
  1/2
  5
  #f
  53/12
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app pair? (-> re <-)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app cdr (-> p <-)) (env ((□? (p)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  15
  255
  app
  "\"'(eval\n  (match (app regex-null? re) (#f) (_ (-> (app #f) <-)))\n  (env ((□? (re)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  15
  255
  match
  "\"'(eval\n  (match\n   (app match-alt re (λ (pat1 pat2) ...))\n   ((#f) (-> (match (app match-rep re (λ (pat) ...)) ...) <-))\n   c-x)\n  (env ((□? (re c)))))\""
  36
  19
  7
  10
  10
  2
  12
  1
  10/19
  10
  #f
  86/19
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-seq? (-> re <-)) (env ((□? (re f)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  15
  255
  letrec*
  "\"'(eval (lettypes cons ... nil (letrec* (car ... check-expect) ...)) (env ()))\""
  28
  17
  7
  4
  17
  5
  22
  1
  1
  7
  #f
  75/17
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  regex
  2
  15
  255
  match
  "\"'(eval\n  (λ (pat1 pat2) (-> (match (app regex-null? pat1) ...) <-))\n  (env ((□? (pat1 pat2)))))\""
  149
  78
  45
  26
  46
  11
  57
  1
  1079/1785
  29
  #f
  341/78
  ((17/2 9 0) (9 19/2 0) (17/2 17/2 0)))
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-empty? (-> re <-)) (env ((□? (re c)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval (app regex-empty (-> pat2 <-)) (env ((□? (pat1 pat2)) (□? (re)))))\""
  59
  21
  22
  16
  17
  3
  20
  1
  15/19
  9
  #f
  31/7
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app cadr (-> re <-)) (env ((□? (re f)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  15
  255
  app
  "\"'(eval\n  (app alt (-> (app regex-empty pat1) <-) (app regex-empty pat2))\n  (env ((□? (pat1 pat2)) (□? (re)))))\""
  36
  11
  14
  11
  6
  2
  8
  1
  6/11
  5
  #f
  49/11
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-rep? (-> re <-)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-null? (-> re <-)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  match
  "\"'(eval\n  (match\n   (app regex-empty? pat1)\n   ((#f) (-> (match (app regex-empty? pat2) ...) <-))\n   _)\n  (env ((□? (pat1 pat2)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  15
  255
  match
  "\"'(eval\n  (λ (pat1 pat2) (-> (match (app regex-null? pat1) ...) <-))\n  (env ((□? (pat1 pat2)))))\""
  284
  187
  58
  39
  112
  9
  121
  1
  8126/15015
  63
  #f
  811/187
  ((6 6 0) (6 6 0) (6 6 0)))
'(shuffled-cache
  0
  regex
  2
  255
  match
  "\"'(eval\n  (match\n   (app regex-empty? re)\n   ((#f) (-> (match (app regex-null? re) ...) <-))\n   _)\n  (env ((□? (re c)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  match
  "\"'(eval (let (_) (-> (match (app regex-empty? re) ...) <-)) (env ((□? (re c)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  15
  255
  app
  "\"'(eval\n  (app alt (-> (app regex-derivative pat1 c) <-) (app regex-derivative pat2 c))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  37
  12
  14
  11
  6
  2
  8
  1
  1/2
  5
  #f
  53/12
  ((2 2 0) (3/2 2 0) (3/2 2 0)))
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval\n  (app regex-derivative pat2 (-> c <-))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  match
  "\"'(eval (λ (cdr-v) (-> (match cdr-v ...) <-)) (env ((□? (cdr-v)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval\n  (match (app regex-null? pat) (#f) (_ (-> regex-BLANK <-)))\n  (env ((□? (pat)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  15
  255
  app
  "\"'(eval (match null?-v ((nil) (-> (app #t) <-)) _) (env ((□? (null?-v)))))\""
  7
  5
  0
  2
  2
  0
  2
  1
  2/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval (λ (re) (-> (app eq? re (app #f)) <-)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval\n  (app and (-> (app pair? re) <-) (app eq? (app car re) 'rep))\n  (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval (app regex-null? (-> pat2 <-)) (env ((□? (pat1 pat2)))))\""
  91
  34
  38
  19
  17
  6
  23
  1
  14/31
  14
  #f
  75/17
  ((13/2 13/2 0) (13/2 13/2 0) (13/2 13/2 0)))
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval (λ (p) (-> (app car (app cdr p)) <-)) (env ((□? (p)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-rep? (-> re <-)) (env ((□? (re f)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  15
  255
  app
  "\"'(eval\n  (match (app regex-atom? re) (#f) (_ (-> (app #f) <-)))\n  (env ((□? (re)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval (λ (cadr-v) (-> (app car (app cdr cadr-v)) <-)) (env ((□? (cadr-v)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  15
  255
  app
  "\"'(eval (app f (app cadr re) (-> (app caddr re) <-)) (env ((□? (re f)))))\""
  52
  18
  20
  14
  14
  3
  17
  1
  3/4
  7
  #f
  79/18
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  regex
  2
  255
  match
  "\"'(eval (λ (re) (-> (match (app regex-empty? re) ...) <-)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  15
  255
  app
  "\"'(eval\n  (letrec* (... regex-NULL (regex-BLANK (-> (app #t) <-)) regex-alt? ...) ...)\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval\n  (app and (app pair? re) (-> (app eq? (app car re) 'rep) <-))\n  (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  15
  255
  app
  "\"'(eval\n  (app\n   regex-match\n   (app\n    cons\n    'seq\n    (app\n     cons\n     'foo\n     (app cons (app cons 'rep (app cons 'bar (app nil))) (app nil))))\n   (-> (app cons 'foo (app cons 'bar (app nil))) <-))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  15
  255
  app
  "\"'(eval\n  (λ (re f)\n    (-> (app and (app regex-alt? re) (app f (app cadr re) (app caddr re))) <-))\n  (env ((□? (re f)))))\""
  28
  15
  6
  7
  7
  2
  9
  1
  7/15
  8
  #f
  68/15
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval (app equal? (-> check <-) expect) (env ((□? (check expect)))))\""
  50
  26
  13
  11
  17
  7
  24
  1
  17/26
  12
  #f
  58/13
  ((1/2 1/2 0) (1/2 1/2 0) (1 1 0)))
'(shuffled-cache
  0
  regex
  2
  255
  match
  "\"'(eval\n  (match\n   (app regex-null? pat1)\n   ((#f) (-> (match (app regex-null? pat2) ...) <-))\n   _)\n  (env ((□? (pat1 pat2)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval\n  (app regex-derivative (-> pat1 <-) c)\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  268
  148
  75
  45
  91
  17
  108
  1
  25541/40656
  55
  #f
  647/148
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval\n  (match (app regex-empty? pat1) (#f) (_ (-> pat2 <-)))\n  (env ((□? (pat1 pat2)))))\""
  269
  149
  75
  45
  91
  17
  108
  1
  25541/41118
  55
  #f
  651/149
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app cadr (-> re <-)) (env ((□? (re f)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval (app regex-empty? (-> pat1 <-)) (env ((□? (pat1 pat2)))))\""
  85
  42
  26
  17
  19
  4
  23
  1
  1/3
  15
  #f
  61/14
  ((7 7 0) (11/2 11/2 0) (11/2 6 0)))
'(shuffled-cache
  0
  regex
  2
  15
  255
  app
  "\"'(eval (app cons 'foo (-> (app cons 'bar (app nil)) <-)) (env ()))\""
  87
  44
  26
  17
  21
  4
  25
  1
  5/13
  17
  #t
  193/44
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval\n  (app and (app pair? re) (-> (app eq? (app car re) 'alt) <-))\n  (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  15
  255
  app
  "\"'(eval\n  (app regex-empty? (-> (app regex-empty pattern) <-))\n  (env ((□? (pattern data)))))\""
  36
  11
  14
  11
  6
  2
  8
  1
  6/11
  5
  #f
  49/11
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  regex
  2
  15
  255
  app
  "\"'(eval (app f (-> (app cadr re) <-)) (env ((□? (re f)))))\""
  85
  25
  35
  25
  16
  5
  21
  1
  16/25
  11
  #f
  111/25
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  regex
  2
  15
  255
  app
  "\"'(eval\n  (app cons 'alt (-> (app cons pat1 (app cons pat2 (app nil))) <-))\n  (env ((□? (pat1 pat2)))))\""
  88
  27
  35
  26
  16
  5
  21
  1
  16/27
  13
  #t
  121/27
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  15
  255
  match
  "\"'(eval\n  (match\n   (app match-alt re (λ (pat1 pat2) ...))\n   ((#f) (-> (match (app regex-rep? re) ...) <-))\n   c-x)\n  (env ((□? (re)))))\""
  110
  39
  42
  29
  21
  7
  28
  1
  7/13
  18
  #f
  58/13
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval\n  (match (app regex-null? pat1) (#f) (_ (-> pat2 <-)))\n  (env ((□? (pat1 pat2)))))\""
  180
  74
  66
  40
  36
  11
  47
  1
  29/61
  33
  #f
  166/37
  ((11/2 11/2 0) (5 11/2 0) (5 11/2 0)))
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval (app car (-> (app cdr (app cdr cadr-v)) <-)) (env ((□? (cadr-v)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app caddr (-> re <-)) (env ((□? (re f)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  15
  255
  app
  "\"'(eval\n  (app and (app regex-seq? re) (-> (app f (app cadr re) (app caddr re)) <-))\n  (env ((□? (re f)))))\""
  71
  31
  20
  20
  17
  4
  21
  1
  7/11
  15
  #f
  141/31
  ((4 4 0) (4 4 0) (4 4 0)))
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (match (-> cdr-v <-) (cons cdr-c cdr-d)) (env ((□? (cdr-v)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  15
  255
  app
  "\"'(eval\n  (app cons 'seq (-> (app cons pat1 (app cons pat2 (app nil))) <-))\n  (env ((□? (pat1 pat2)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  15
  255
  app
  "\"'(eval\n  (app and (app regex-alt? re) (-> (app f (app cadr re) (app caddr re)) <-))\n  (env ((□? (re f)))))\""
  64
  32
  15
  17
  16
  3
  19
  1
  9/19
  16
  #f
  73/16
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  0
  regex
  2
  255
  let
  "\"'(eval (λ (re c) (-> (let (_) ...) <-)) (env ((□? (re c)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval (app car (-> (app cdr p) <-)) (env ((□? (p)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  15
  255
  app
  "\"'(eval\n  (match\n   (app null? data)\n   ((#f)\n    (->\n     (app\n      regex-match\n      (app regex-derivative pattern (app car data))\n      (app cdr data))\n     <-))\n   _)\n  (env ((□? (pattern data)))))\""
  19
  10
  5
  4
  5
  3
  8
  1
  1/2
  4
  #f
  22/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval\n  (match (app regex-null? pat1) (#f) (_ (-> regex-NULL <-)))\n  (env ((□? (pat1 pat2)))))\""
  23
  13
  5
  5
  7
  3
  10
  1
  7/13
  7
  #t
  59/13
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app cdr (-> cadr-v <-)) (env ((□? (cadr-v)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  15
  255
  app
  "\"'(eval\n  (λ (pat1 pat2)\n    (-> (app alt (app regex-empty pat1) (app regex-empty pat2)) <-))\n  (env ((□? (pat1 pat2)) (□? (re)))))\""
  34
  11
  12
  11
  6
  2
  8
  1
  6/11
  5
  #f
  49/11
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval\n  (app regex-derivative (-> pat2 <-) c)\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  91
  32
  34
  25
  23
  5
  28
  1
  7/10
  14
  #f
  71/16
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  regex
  2
  15
  255
  app
  "\"'(eval\n  (λ (pat1 pat2)\n    (->\n     (app\n      alt\n      (app seq (app regex-derivative pat1 c) pat2)\n      (app seq (app regex-empty pat1) (app regex-derivative pat2 c)))\n     <-))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  105
  45
  34
  26
  30
  5
  35
  1
  11/16
  19
  #f
  199/45
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app eq? (-> re <-) (app #f)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval (app car (-> data <-)) (env ((□? (pattern data)))))\""
  42
  25
  11
  6
  24
  3
  27
  1
  15/16
  23
  #f
  128/25
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (match car-v ((cons car-c car-d) (-> car-c <-))) (env ((□? (car-v)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval (app rep (-> pat <-)) (env ((□? (pat)) (□? (re c)))))\""
  57
  17
  23
  17
  13
  3
  16
  1
  13/17
  8
  #f
  76/17
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  regex
  2
  255
  match
  "\"'(eval\n  (match (app regex-null? re) ((#f) (-> (match (app eq? c re) ...) <-)) _)\n  (env ((□? (re c)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  15
  255
  app
  "\"'(eval\n  (app\n   regex-match\n   (->\n    (app\n     cons\n     'seq\n     (app\n      cons\n      'foo\n      (app cons (app cons 'rep (app cons 'bar (app nil))) (app nil))))\n    <-)\n   (app cons 'foo (app cons 'bar (app nil))))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  15
  255
  match
  "\"'(eval\n  (match\n   (app match-seq re (λ (pat1 pat2) ...))\n   ((#f) (-> (match (app match-alt re (λ (pat1 pat2) ...)) ...) <-))\n   c-x)\n  (env ((□? (re)))))\""
  34
  19
  6
  9
  12
  2
  14
  1
  12/19
  10
  #f
  86/19
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (match cdr-v ((cons cdr-c cdr-d) (-> cdr-d <-))) (env ((□? (cdr-v)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  15
  255
  app
  "\"'(eval (app cons 'bar (-> (app nil) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  15
  255
  app
  "\"'(eval\n  (app regex-derivative pattern (-> (app car data) <-))\n  (env ((□? (pattern data)))))\""
  76
  45
  20
  11
  39
  4
  43
  1
  235/264
  36
  #f
  232/45
  ((9 19/2 0) (9 19/2 0) (9 19/2 0)))
'(shuffled-cache
  0
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval\n  (match (app match-alt re (λ (pat1 pat2) ...)) (#f) (c-x (-> c-x <-)))\n  (env ((□? (re)))))\""
  105
  62
  26
  17
  49
  6
  55
  1
  355/468
  44
  #f
  154/31
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval (match (-> (app eq? c re) <-) (#f) _) (env ((□? (re c)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  15
  255
  app
  "\"'(eval\n  (λ (re f)\n    (-> (app and (app regex-seq? re) (app f (app cadr re) (app caddr re))) <-))\n  (env ((□? (re f)))))\""
  26
  13
  6
  7
  5
  2
  7
  1
  5/13
  6
  #f
  58/13
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app pair? (-> re <-)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  15
  255
  match
  "\"'(eval\n  (match\n   (app regex-atom? re)\n   ((#f) (-> (match (app match-seq re (λ (pat1 pat2) ...)) ...) <-))\n   _)\n  (env ((□? (re)))))\""
  32
  17
  6
  9
  10
  2
  12
  1
  10/17
  8
  #f
  76/17
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app eq? (-> c <-) re) (env ((□? (re c)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  15
  255
  app
  "\"'(eval\n  (app\n   check-expect\n   (->\n    (app\n     regex-match\n     (app\n      cons\n      'seq\n      (app\n       cons\n       'foo\n       (app cons (app cons 'rep (app cons 'bar (app nil))) (app nil))))\n     (app cons 'foo (app cons 'bar (app nil))))\n    <-)\n   (app #f))\n  (env ()))\""
  18
  10
  5
  3
  10
  3
  13
  1
  1
  4
  #f
  22/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  regex
  2
  15
  255
  app
  "\"'(eval (match (app regex-rep? re) (#f) (_ (-> (app #t) <-))) (env ((□? (re)))))\""
  21
  12
  5
  4
  10
  3
  13
  1
  5/6
  6
  #t
  9/2
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  15
  255
  app
  "\"'(eval\n  (app seq (-> (app regex-empty pat1) <-) (app regex-empty pat2))\n  (env ((□? (pat1 pat2)) (□? (re)))))\""
  55
  23
  19
  13
  16
  5
  21
  1
  16/23
  11
  #f
  103/23
  ((3/2 3/2 0) (3/2 2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval\n  (app regex-derivative pat2 (-> c <-))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  match
  "\"'(eval\n  (match (app eq? c re) ((#f) (-> (match (app regex-atom? re) ...) <-)) _)\n  (env ((□? (re c)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app match-alt (-> re <-) (λ (pat1 pat2) ...)) (env ((□? (re c)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  15
  255
  app
  "\"'(eval\n  (app and (-> (app regex-rep? re) <-) (app f (app cadr re)))\n  (env ((□? (re f)))))\""
  26
  11
  7
  8
  5
  2
  7
  1
  5/11
  5
  #f
  49/11
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  regex
  2
  15
  255
  app
  "\"'(eval (match null?-v (nil) (_ (-> (app #f) <-))) (env ((□? (null?-v)))))\""
  29
  13
  7
  9
  5
  2
  7
  1
  5/13
  7
  #t
  59/13
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  15
  255
  app
  "\"'(eval (match (-> (app regex-empty? pat2) <-) (#f) _) (env ((□? (pat1 pat2)))))\""
  222
  115
  65
  42
  67
  11
  78
  1
  8563/15015
  46
  #f
  22/5
  ((14 29/2 0) (14 14 0) (14 14 0)))
'(shuffled-cache
  0
  regex
  2
  15
  255
  match
  "\"'(eval (λ (null?-v) (-> (match null?-v ...) <-)) (env ((□? (null?-v)))))\""
  276
  163
  70
  43
  106
  14
  120
  1
  4035/6314
  84
  #f
  751/163
  ((11 23/2 0) (11 23/2 0) (23/2 23/2 0)))
'(shuffled-cache
  0
  regex
  2
  15
  255
  app
  "\"'(eval\n  (let (... () (_ (-> (app debug-trace) <-)) () ...) ...)\n  (env ((□? (re c)))))\""
  282
  167
  70
  45
  107
  14
  121
  1
  2056/3311
  88
  #t
  771/167
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-derivative pat (-> c <-)) (env ((□? (pat)) (□? (re c)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  255
  ref-or-constructor
  "\"'(eval\n  (app regex-derivative pat1 (-> c <-))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  15
  255
  match
  "\"'(eval\n  (match\n   (app match-seq re (λ (pat1 pat2) ...))\n   ((#f) (-> (match (app match-alt re (λ (pat1 pat2) ...)) ...) <-))\n   c-x)\n  (env ((□? (re c)))))\""
  32
  17
  6
  9
  10
  2
  12
  1
  10/17
  8
  #f
  76/17
  ((1 1 0) (1 1 0) (1 3/2 0)))
'(shuffled-cache
  0
  regex
  2
  15
  255
  app
  "\"'(eval (match (-> (app regex-empty? pat1) <-) (#f) _) (env ((□? (pat1 pat2)))))\""
  150
  88
  32
  30
  45
  6
  51
  1
  163/387
  33
  #f
  35/8
  ((17/2 17/2 0) (17/2 17/2 0) (17/2 17/2 0)))
'(shuffled-cache
  0
  regex
  2
  255
  app
  "\"'(eval\n  (λ (re) (-> (app and (app pair? re) (app eq? (app car re) 'alt)) <-))\n  (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  0
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval (app regex-empty (-> pattern <-)) (env ((□? (pattern data)))))\""
  50
  23
  17
  10
  22
  4
  26
  1
  14/15
  11
  #t
  103/23
  ((5/2 5/2 0) (5/2 3 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval (app regex-empty? (-> pat <-)) (env ((□? (pat)))))\""
  110
  43
  42
  25
  35
  8
  43
  1
  9/11
  19
  #f
  191/43
  ((7/2 7/2 0) (3 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  0
  regex
  2
  15
  255
  app
  "\"'(eval\n  (app\n   alt\n   (app seq (app regex-derivative pat1 c) pat2)\n   (-> (app seq (app regex-empty pat1) (app regex-derivative pat2 c)) <-))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  139
  54
  55
  30
  41
  10
  51
  1
  3/4
  24
  #f
  40/9
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  regex
  2
  15
  255
  app
  "\"'(eval\n  (app seq (app regex-empty pat1) (-> (app regex-empty pat2) <-))\n  (env ((□? (pat1 pat2)) (□? (re)))))\""
  36
  11
  14
  11
  6
  2
  8
  1
  6/11
  5
  #f
  49/11
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-seq? (-> re <-)) (env ((□? (re f)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  15
  255
  app
  "\"'(eval\n  (letrec* (... caddr (regex-NULL (-> (app #f) <-)) regex-BLANK ...) ...)\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  15
  255
  match
  "\"'(eval (λ (null?-v) (-> (match null?-v ...) <-)) (env ((□? (null?-v)))))\""
  71
  50
  13
  8
  40
  4
  44
  1
  41/48
  42
  #f
  257/50
  ((21/2 21/2 0) (21/2 21/2 0) (21/2 21/2 0)))
'(shuffled-cache
  1
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval\n  (match (app match-alt re (λ (pat1 pat2) ...)) (#f) (c-x (-> c-x <-)))\n  (env ((□? (re c)))))\""
  103
  67
  19
  17
  50
  6
  56
  1
  61/82
  50
  #f
  333/67
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval\n  (match (app match-seq re (λ (pat1 pat2) ...)) (#f) (c-x (-> c-x <-)))\n  (env ((□? (re)))))\""
  126
  83
  21
  22
  59
  7
  66
  1
  15/22
  57
  #f
  404/83
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  regex
  2
  255
  let
  "\"'(eval (λ (re c) (-> (let (_) ...) <-)) (env ((□? (re c)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  15
  255
  app
  "\"'(eval\n  (match (-> (app match-alt re (λ (pat1 pat2) ...)) <-) (#f) c-x)\n  (env ((□? (re c)))))\""
  31
  16
  6
  9
  10
  2
  12
  1
  5/8
  8
  #f
  9/2
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  regex
  2
  15
  255
  app
  "\"'(eval\n  (λ (re f)\n    (-> (app and (app regex-seq? re) (app f (app cadr re) (app caddr re))) <-))\n  (env ((□? (re f)))))\""
  48
  28
  8
  12
  14
  3
  17
  1
  6/13
  13
  #f
  125/28
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  regex
  2
  15
  255
  app
  "\"'(eval\n  (app and (-> (app regex-alt? re) <-) (app f (app cadr re) (app caddr re)))\n  (env ((□? (re f)))))\""
  55
  34
  8
  13
  14
  3
  17
  1
  5/13
  16
  #f
  76/17
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app eq? (-> re <-) (app #t)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app cdr (-> p <-)) (env ((□? (p)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  15
  255
  app
  "\"'(eval\n  (app cons pat1 (-> (app cons pat2 (app nil)) <-))\n  (env ((□? (pat1 pat2)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  15
  255
  app
  "\"'(eval (app cons 'rep (-> (app cons pat (app nil)) <-)) (env ((□? (pat)))))\""
  6
  4
  0
  2
  0
  0
  0
  1
  0
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval (app eq? (-> (app car re) <-) 'seq) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval\n  (match (app regex-atom? re) (#f) (_ (-> regex-NULL <-)))\n  (env ((□? (re c)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  15
  255
  app
  "\"'(eval (match null?-v (nil) (_ (-> (app #f) <-))) (env ((□? (null?-v)))))\""
  7
  5
  0
  2
  2
  0
  2
  1
  2/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app pair? (-> re <-)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  15
  255
  app
  "\"'(eval\n  (app cons (-> (app cons 'rep (app cons 'bar (app nil))) <-) (app nil))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval\n  (match (app regex-null? pat) (#f) (_ (-> regex-BLANK <-)))\n  (env ((□? (pat)))))\""
  6
  5
  0
  1
  4
  0
  4
  1
  4/5
  5
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval (app regex-empty? (-> pat1 <-)) (env ((□? (pat1 pat2)))))\""
  90
  47
  26
  17
  23
  4
  27
  1
  12/29
  20
  #f
  208/47
  ((6 6 0) (11/2 6 0) (6 6 0)))
'(shuffled-cache
  1
  regex
  2
  15
  255
  app
  "\"'(eval (match (-> (app regex-null? pat2) <-) (#f) _) (env ((□? (pat1 pat2)))))\""
  250
  153
  58
  39
  92
  9
  101
  1
  563/990
  60
  #f
  224/51
  ((21/2 21/2 0) (21/2 21/2 0) (11 11 0)))
'(shuffled-cache
  1
  regex
  2
  15
  255
  app
  "\"'(eval (app f (-> (app cadr re) <-) (app caddr re)) (env ((□? (re f)))))\""
  268
  165
  62
  41
  102
  10
  112
  1
  653/1110
  64
  #f
  724/165
  ((1/2 1/2 0) (1/2 1 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  regex
  2
  15
  255
  app
  "\"'(eval\n  (match (app regex-atom? re) (#f) (_ (-> (app #f) <-)))\n  (env ((□? (re)))))\""
  270
  167
  62
  41
  102
  10
  112
  1
  653/1140
  66
  #t
  734/167
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  15
  255
  match
  "\"'(eval\n  (match\n   (app regex-null? pat2)\n   ((#f) (-> (match (app regex-empty? pat1) ...) <-))\n   _)\n  (env ((□? (pat1 pat2)))))\""
  299
  196
  62
  41
  120
  10
  130
  1
  9377/16590
  74
  #f
  429/98
  ((2 5/2 0) (2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app match-seq (-> re <-) (λ (pat1 pat2) ...)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval (app eq? (-> (app car re) <-) 'alt) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval (match (-> (app regex-empty? re) <-) (#f) _) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  15
  255
  app
  "\"'(eval\n  (λ (re f)\n    (-> (app and (app regex-alt? re) (app f (app cadr re) (app caddr re))) <-))\n  (env ((□? (re f)))))\""
  26
  13
  6
  7
  5
  2
  7
  1
  5/13
  6
  #f
  58/13
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app cadr (-> re <-)) (env ((□? (re f)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval (match (-> (app regex-empty? pat2) <-) (#f) _) (env ((□? (pat1 pat2)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (match (-> cdr-v <-) (cons cdr-c cdr-d)) (env ((□? (cdr-v)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app cdr (-> cadr-v <-)) (env ((□? (cadr-v)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval\n  (app cons (-> pat1 <-) (app cons pat2 (app nil)))\n  (env ((□? (pat1 pat2)))))\""
  91
  34
  38
  19
  17
  6
  23
  1
  14/31
  14
  #f
  75/17
  ((13/2 13/2 0) (6 6 0) (13/2 13/2 0)))
'(shuffled-cache
  1
  regex
  2
  15
  255
  app
  "\"'(eval\n  (app and (-> (app regex-seq? re) <-) (app f (app cadr re) (app caddr re)))\n  (env ((□? (re f)))))\""
  115
  45
  44
  26
  22
  8
  30
  1
  19/42
  19
  #f
  199/45
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  regex
  2
  15
  255
  app
  "\"'(eval\n  (match (-> (app match-rep re (λ (pat) ...)) <-) (#f) c-x)\n  (env ((□? (re c)))))\""
  137
  60
  47
  30
  31
  9
  40
  1
  26/55
  26
  #f
  133/30
  ((1/2 1/2 0) (1/2 1 0) (1 1 0)))
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval (match (-> (app regex-null? re) <-) (#f) _) (env ((□? (re c)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app car (-> re <-)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval (match (-> (app regex-atom? re) <-) (#f) _) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  15
  255
  app
  "\"'(eval\n  (app cons 'seq (-> (app cons pat1 (app cons pat2 (app nil))) <-))\n  (env ((□? (pat1 pat2)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  15
  255
  app
  "\"'(eval\n  (app\n   cons\n   'seq\n   (->\n    (app\n     cons\n     'foo\n     (app cons (app cons 'rep (app cons 'bar (app nil))) (app nil)))\n    <-))\n  (env ()))\""
  5
  4
  0
  1
  2
  0
  2
  1
  1/2
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  255
  match
  "\"'(eval\n  (match\n   (app regex-null? re)\n   ((#f) (-> (match (app regex-atom? re) ...) <-))\n   _)\n  (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval (app regex-empty (-> pat1 <-)) (env ((□? (pat1 pat2)) (□? (re)))))\""
  57
  17
  23
  17
  13
  3
  16
  1
  13/17
  8
  #f
  76/17
  ((5/2 5/2 0) (5/2 5/2 0) (3 3 0)))
'(shuffled-cache
  1
  regex
  2
  15
  255
  match
  "\"'(eval\n  (match\n   (app regex-atom? re)\n   ((#f) (-> (match (app match-seq re (λ (pat1 pat2) ...)) ...) <-))\n   _)\n  (env ((□? (re c)))))\""
  84
  33
  29
  22
  22
  5
  27
  1
  2/3
  15
  #f
  49/11
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app car (-> re <-)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval\n  (app regex-derivative pat1 (-> c <-))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  match
  "\"'(eval (λ (pair?-v) (-> (match pair?-v ...) <-)) (env ((□? (pair?-v)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-null? (-> re <-)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app char? (-> re <-)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  15
  255
  app
  "\"'(eval (match (-> (app regex-empty? pat) <-) (#f) _) (env ((□? (pat)))))\""
  89
  34
  32
  23
  20
  5
  25
  1
  49/72
  14
  #f
  75/17
  ((9/2 5 0) (9/2 5 0) (5 5 0)))
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval (app cdr (-> (app cdr cadr-v) <-)) (env ((□? (cadr-v)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app cadr (-> re <-)) (env ((□? (re f)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  15
  255
  match
  "\"'(eval (λ (pat) (-> (match (app regex-null? pat) ...) <-)) (env ((□? (pat)))))\""
  94
  37
  33
  24
  21
  5
  26
  1
  2/3
  14
  #f
  162/37
  ((11/2 11/2 0) (5 5 0) (5 5 0)))
'(shuffled-cache
  1
  regex
  2
  15
  255
  app
  "\"'(eval\n  (λ (pat) (-> (app seq (app regex-derivative pat c) (app rep pat)) <-))\n  (env ((□? (pat)) (□? (re c)))))\""
  117
  51
  38
  28
  29
  6
  35
  1
  31/48
  20
  #f
  224/51
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  regex
  2
  15
  255
  app
  "\"'(eval (app cons 'bar (-> (app nil) <-)) (env ()))\""
  119
  53
  38
  28
  31
  6
  37
  1
  2/3
  22
  #t
  234/53
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (match car-v ((cons car-c car-d) (-> car-c <-))) (env ((□? (car-v)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-empty? (-> re <-)) (env ((□? (re c)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval\n  (match (app regex-empty? pat1) (#f) (_ (-> pat2 <-)))\n  (env ((□? (pat1 pat2)))))\""
  161
  69
  58
  34
  42
  9
  51
  1
  19/30
  27
  #f
  101/23
  ((21/2 11 0) (21/2 11 0) (12 12 0)))
'(shuffled-cache
  1
  regex
  2
  15
  255
  app
  "\"'(eval\n  (match\n   (app regex-empty? pat)\n   ((#f) (-> (app cons 'rep (app cons pat (app nil))) <-))\n   _)\n  (env ((□? (pat)))))\""
  163
  71
  58
  34
  42
  9
  51
  1
  95/156
  29
  #t
  313/71
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval\n  (match (app match-alt re (λ (pat1 pat2) ...)) (#f) (c-x (-> c-x <-)))\n  (env ((□? (re)))))\""
  190
  88
  64
  38
  52
  11
  63
  1
  125/207
  37
  #f
  389/88
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app cadr re) (app caddr re)) (env ((□? (re f)))))\""
  195
  90
  67
  38
  52
  12
  64
  1
  125/213
  39
  #t
  133/30
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval (λ (re) (-> (app eq? re (app #t)) <-)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  15
  255
  app
  "\"'(eval (match null?-v ((nil) (-> (app #t) <-)) _) (env ((□? (null?-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (match (-> pair?-v <-) (cons pair?-c pair?-d) _) (env ((□? (pair?-v)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval (match (-> (app regex-null? re) <-) (#f) _) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  15
  255
  app
  "\"'(eval (app cons pat (-> (app nil) <-)) (env ((□? (pat)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  15
  255
  match
  "\"'(eval\n  (match\n   (app regex-null? pat1)\n   ((#f) (-> (match (app regex-null? pat2) ...) <-))\n   _)\n  (env ((□? (pat1 pat2)))))\""
  124
  63
  38
  23
  29
  6
  35
  1
  121/315
  24
  #f
  92/21
  ((17/2 17/2 0) (17/2 9 0) (9 9 0)))
'(shuffled-cache
  1
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app cadr re)) (env ((□? (re f)))))\""
  129
  65
  40
  24
  29
  7
  36
  1
  242/665
  26
  #t
  22/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  15
  255
  app
  "\"'(eval\n  (match (-> (app match-seq re (λ (pat1 pat2) ...)) <-) (#f) c-x)\n  (env ((□? (re)))))\""
  159
  81
  46
  32
  39
  9
  48
  1
  139/315
  34
  #f
  358/81
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  regex
  2
  15
  255
  app
  "\"'(eval\n  (λ (pat1 pat2)\n    (-> (app seq (app regex-empty pat1) (app regex-empty pat2)) <-))\n  (env ((□? (pat1 pat2)) (□? (re)))))\""
  169
  90
  46
  33
  43
  9
  52
  1
  335/784
  37
  #f
  397/90
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval\n  (app regex-derivative pat1 (-> c <-))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval (λ (cadr-v) (-> (app car (app cdr cadr-v)) <-)) (env ((□? (cadr-v)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval\n  (app and (-> (app pair? re) <-) (app eq? (app car re) 'rep))\n  (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval\n  (app regex-derivative (-> pat2 <-) c)\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  59
  21
  22
  16
  17
  3
  20
  1
  15/19
  9
  #f
  31/7
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  regex
  2
  15
  255
  app
  "\"'(eval (match (app regex-rep? re) ((#f) (-> (app #f) <-)) _) (env ((□? (re)))))\""
  62
  23
  22
  17
  17
  3
  20
  1
  5/7
  11
  #t
  103/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  15
  255
  app
  "\"'(eval\n  (app seq (-> (app regex-derivative pat c) <-) (app rep pat))\n  (env ((□? (pat)) (□? (re c)))))\""
  95
  35
  36
  24
  23
  5
  28
  1
  7/11
  16
  #f
  156/35
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  regex
  2
  255
  match
  "\"'(eval (let (_) (-> (match (app regex-empty? re) ...) <-)) (env ((□? (re c)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval\n  (match (app regex-empty? pat2) (#f) (_ (-> pat1 <-)))\n  (env ((□? (pat1 pat2)))))\""
  85
  42
  26
  17
  19
  4
  23
  1
  1/3
  15
  #f
  61/14
  ((11/2 6 0) (6 6 0) (6 6 0)))
'(shuffled-cache
  1
  regex
  2
  15
  255
  match
  "\"'(eval\n  (match\n   (app regex-empty? pat1)\n   ((#f) (-> (match (app regex-empty? pat2) ...) <-))\n   _)\n  (env ((□? (pat1 pat2)))))\""
  250
  153
  58
  39
  90
  9
  99
  1
  509/930
  54
  #f
  74/17
  ((23/2 23/2 0) (23/2 23/2 0) (23/2 12 0)))
'(shuffled-cache
  1
  regex
  2
  15
  255
  app
  "\"'(eval\n  (app\n   alt\n   (-> (app seq (app regex-derivative pat1 c) pat2) <-)\n   (app seq (app regex-empty pat1) (app regex-derivative pat2 c)))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  264
  166
  58
  40
  98
  9
  107
  1
  569/1035
  59
  #f
  723/166
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval (app or (app char? re) (-> (app symbol? re) <-)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval\n  (match (app regex-empty? re) (#f) (_ (-> regex-NULL <-)))\n  (env ((□? (re c)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  15
  255
  app
  "\"'(eval\n  (app seq (app regex-empty pat1) (-> (app regex-derivative pat2 c) <-))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  40
  15
  14
  11
  8
  2
  10
  1
  8/15
  8
  #f
  68/15
  ((2 2 0) (3/2 3/2 0) (2 2 0)))
'(shuffled-cache
  1
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval\n  (match (app match-seq re (λ (pat1 pat2) ...)) (#f) (c-x (-> c-x <-)))\n  (env ((□? (re c)))))\""
  71
  32
  20
  19
  18
  4
  22
  1
  9/16
  16
  #f
  9/2
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  regex
  2
  15
  255
  app
  "\"'(eval (app cons pat2 (-> (app nil) <-)) (env ((□? (pat1 pat2)))))\""
  73
  34
  20
  19
  18
  4
  22
  1
  9/17
  18
  #t
  77/17
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app pair? (-> re <-)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  15
  255
  app
  "\"'(eval (match (-> (app regex-null? pat) <-) (#f) _) (env ((□? (pat)))))\""
  91
  34
  33
  24
  20
  5
  25
  1
  49/72
  14
  #f
  75/17
  ((11/2 11/2 0) (5 5 0) (9/2 5 0)))
'(shuffled-cache
  1
  regex
  2
  15
  255
  app
  "\"'(eval\n  (app and (-> (app regex-rep? re) <-) (app f (app cadr re)))\n  (env ((□? (re f)))))\""
  111
  45
  40
  26
  29
  7
  36
  1
  76/105
  19
  #f
  199/45
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  regex
  2
  15
  255
  app
  "\"'(eval\n  (λ (pat1 pat2)\n    (->\n     (app alt (app regex-derivative pat1 c) (app regex-derivative pat2 c))\n     <-))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  130
  55
  44
  31
  34
  8
  42
  1
  167/252
  23
  #f
  243/55
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  regex
  2
  15
  255
  app
  "\"'(eval\n  (match pair?-v ((cons pair?-c pair?-d) (-> (app #t) <-)) _)\n  (env ((□? (pair?-v)))))\""
  133
  57
  44
  32
  34
  8
  42
  1
  167/264
  25
  #t
  253/57
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  15
  255
  app
  "\"'(eval\n  (λ (pat1 pat2)\n    (-> (app alt (app regex-empty pat1) (app regex-empty pat2)) <-))\n  (env ((□? (pat1 pat2)) (□? (re)))))\""
  143
  66
  44
  33
  38
  8
  46
  1
  337/552
  28
  #f
  146/33
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  regex
  2
  15
  255
  app
  "\"'(eval\n  (app and (app regex-rep? re) (-> (app f (app cadr re)) <-))\n  (env ((□? (re f)))))\""
  166
  79
  51
  36
  46
  10
  56
  1
  997/1680
  34
  #f
  350/79
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  regex
  2
  15
  255
  app
  "\"'(eval (app cons 'bar (-> (app nil) <-)) (env ()))\""
  168
  81
  51
  36
  48
  10
  58
  1
  1057/1740
  36
  #t
  40/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  15
  255
  app
  "\"'(eval\n  (app and (app regex-seq? re) (-> (app f (app cadr re) (app caddr re)) <-))\n  (env ((□? (re f)))))\""
  205
  109
  54
  42
  62
  11
  73
  1
  139/252
  48
  #f
  486/109
  ((5/2 3 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  regex
  2
  15
  255
  match
  "\"'(eval\n  (match\n   (app regex-atom? re)\n   ((#f) (-> (match (app match-seq re (λ (pat1 pat2) ...)) ...) <-))\n   _)\n  (env ((□? (re)))))\""
  225
  125
  56
  44
  71
  12
  83
  1
  1823/3360
  55
  #f
  557/125
  ((1/2 1 0) (1/2 1/2 0) (1 1 0)))
'(shuffled-cache
  1
  regex
  2
  15
  255
  match
  "\"'(eval\n  (λ (pat1 pat2) (-> (match (app regex-null? pat1) ...) <-))\n  (env ((□? (pat1 pat2)))))\""
  297
  168
  77
  52
  86
  15
  101
  1
  20683/42420
  70
  #f
  31/7
  ((17/2 17/2 0) (17/2 17/2 0) (17/2 17/2 0)))
'(shuffled-cache
  1
  regex
  2
  15
  255
  app
  "\"'(eval (app f (app cadr re) (-> (app caddr re) <-)) (env ((□? (re f)))))\""
  320
  187
  80
  53
  102
  16
  118
  1
  24043/46620
  77
  #f
  827/187
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  regex
  2
  255
  match
  "\"'(eval (λ (cdr-v) (-> (match cdr-v ...) <-)) (env ((□? (cdr-v)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  15
  255
  match
  "\"'(eval\n  (match\n   (app regex-null? pat1)\n   ((#f) (-> (match (app regex-null? pat2) ...) <-))\n   _)\n  (env ((□? (pat1 pat2)))))\""
  204
  109
  58
  37
  64
  9
  73
  1
  14915/24486
  39
  #f
  475/109
  ((29/2 29/2 0) (14 29/2 0) (14 29/2 0)))
'(shuffled-cache
  1
  regex
  2
  255
  match
  "\"'(eval\n  (match\n   (app regex-empty? re)\n   ((#f) (-> (match (app regex-null? re) ...) <-))\n   _)\n  (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  15
  255
  app
  "\"'(eval (match (-> (app regex-rep? re) <-) (#f) _) (env ((□? (re)))))\""
  26
  11
  7
  8
  5
  2
  7
  1
  5/11
  5
  #f
  49/11
  ((1 1 0) (1 1 0) (1/2 1 0)))
'(shuffled-cache
  1
  regex
  2
  15
  255
  app
  "\"'(eval\n  (app\n   check-expect\n   (->\n    (app\n     regex-match\n     (app\n      cons\n      'seq\n      (app\n       cons\n       'foo\n       (app cons (app cons 'rep (app cons 'bar (app nil))) (app nil))))\n     (app cons 'foo (app cons 'bar (app nil))))\n    <-)\n   (app #f))\n  (env ()))\""
  44
  21
  12
  11
  15
  5
  20
  1
  5/7
  9
  #f
  31/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app eq? (-> re <-) (app #f)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval (app regex-empty (-> pattern <-)) (env ((□? (pattern data)))))\""
  50
  23
  17
  10
  22
  4
  26
  1
  14/15
  11
  #t
  103/23
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval (app eq? (-> (app car re) <-) 'rep) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app match-alt (-> re <-) (λ (pat1 pat2) ...)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  15
  255
  app
  "\"'(eval (app f (app cadr re) (-> (app caddr re) <-)) (env ((□? (re f)))))\""
  52
  18
  20
  14
  14
  3
  17
  1
  3/4
  7
  #f
  79/18
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  regex
  2
  15
  255
  app
  "\"'(eval\n  (app cons (app cons 'rep (app cons 'bar (app nil))) (-> (app nil) <-))\n  (env ()))\""
  54
  20
  20
  14
  16
  3
  19
  1
  7/9
  9
  #t
  89/20
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-empty? (-> re <-)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  15
  255
  lettypes
  "\"'(eval ((top) lettypes (cons ... nil) ...) (env ()))\""
  29
  18
  7
  4
  18
  5
  23
  1
  1
  7
  #f
  79/18
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-rep? (-> re <-)) (env ((□? (re f)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  match
  "\"'(eval\n  (λ (pattern data) (-> (match (app null? data) ...) <-))\n  (env ((□? (pattern data)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval\n  (match (app regex-null? pat1) (#f) (_ (-> regex-NULL <-)))\n  (env ((□? (pat1 pat2)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval (app rep (-> pat <-)) (env ((□? (pat)) (□? (re c)))))\""
  61
  20
  23
  18
  15
  3
  18
  1
  3/4
  11
  #f
  91/20
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  regex
  2
  15
  255
  app
  "\"'(eval (match (-> (app regex-null? pat1) <-) (#f) _) (env ((□? (pat1 pat2)))))\""
  201
  106
  57
  38
  61
  8
  69
  1
  218/375
  42
  #f
  233/53
  ((11 11 0) (11 11 0) (11 23/2 0)))
'(shuffled-cache
  1
  regex
  2
  15
  255
  app
  "\"'(eval\n  (app seq (-> (app regex-empty pat1) <-) (app regex-derivative pat2 c))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  201
  106
  57
  38
  61
  8
  69
  1
  218/375
  42
  #f
  233/53
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app eq? (-> c <-) re) (env ((□? (re c)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app match-seq (-> re <-) (λ (pat1 pat2) ...)) (env ((□? (re c)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  15
  255
  match
  "\"'(eval\n  (λ (pat1 pat2) (-> (match (app regex-null? pat1) ...) <-))\n  (env ((□? (pat1 pat2)))))\""
  135
  77
  34
  24
  36
  5
  41
  1
  533/1395
  26
  #f
  334/77
  ((19/2 19/2 0) (19/2 19/2 0) (19/2 19/2 0)))
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval (λ (p) (-> (app car (app cdr (app cdr p))) <-)) (env ((□? (p)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  15
  255
  app
  "\"'(eval\n  (app alt (-> (app regex-empty pat1) <-) (app regex-empty pat2))\n  (env ((□? (pat1 pat2)) (□? (re)))))\""
  36
  11
  14
  11
  6
  2
  8
  1
  6/11
  5
  #f
  49/11
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval\n  (λ (re) (-> (app and (app pair? re) (app eq? (app car re) 'alt)) <-))\n  (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-rep? (-> re <-)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval (app cdr (-> data <-)) (env ((□? (pattern data)))))\""
  42
  25
  11
  6
  24
  3
  27
  1
  59/60
  23
  #f
  128/25
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval (app car (-> (app cdr (app cdr cadr-v)) <-)) (env ((□? (cadr-v)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  15
  255
  app
  "\"'(eval\n  (app\n   regex-match\n   (-> (app regex-derivative pattern (app car data)) <-)\n   (app cdr data))\n  (env ((□? (pattern data)))))\""
  37
  12
  14
  11
  6
  2
  8
  1
  1/2
  5
  #f
  53/12
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval\n  (match (app match-rep re (λ (pat) ...)) ((#f) (-> regex-NULL <-)) c-x)\n  (env ((□? (re c)))))\""
  40
  15
  14
  11
  8
  2
  10
  1
  8/15
  8
  #t
  68/15
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval\n  (app regex-derivative (-> pat2 <-) c)\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  96
  36
  36
  24
  25
  5
  30
  1
  23/34
  17
  #f
  161/36
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-alt? (-> re <-)) (env ((□? (re f)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval (app regex-empty? (-> pat <-)) (env ((□? (pat)))))\""
  64
  20
  25
  19
  13
  4
  17
  1
  13/18
  8
  #f
  22/5
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  1
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval\n  (app seq (app regex-derivative pat1 c) (-> pat2 <-))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  91
  39
  30
  22
  28
  5
  33
  1
  22/31
  15
  #f
  57/13
  ((1 1 0) (2 2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval (app regex-null? (-> pat2 <-)) (env ((□? (pat1 pat2)))))\""
  198
  96
  64
  38
  59
  10
  69
  1
  245/372
  36
  #f
  35/8
  ((19/2 19/2 0) (19/2 10 0) (11 23/2 0)))
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval (app car (-> (app cdr cadr-v) <-)) (env ((□? (cadr-v)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  15
  255
  app
  "\"'(eval\n  (match\n   (app regex-null? pat2)\n   ((#f) (-> (app cons 'alt (app cons pat1 (app cons pat2 (app nil)))) <-))\n   _)\n  (env ((□? (pat1 pat2)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  15
  255
  app
  "\"'(eval\n  (app cons 'alt (-> (app cons pat1 (app cons pat2 (app nil))) <-))\n  (env ((□? (pat1 pat2)))))\""
  5
  4
  0
  1
  0
  0
  0
  1
  0
  4
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval (match (-> null?-v <-) (nil) _) (env ((□? (null?-v)))))\""
  57
  35
  13
  9
  29
  4
  33
  1
  95/126
  30
  #f
  178/35
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app match-alt (-> re <-) (λ (pat1 pat2) ...)) (env ((□? (re c)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval (match (app eq? c re) (#f) (_ (-> regex-BLANK <-))) (env ((□? (re c)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval\n  (app and (app pair? re) (-> (app eq? (app car re) 'rep) <-))\n  (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval\n  (λ (re) (-> (app and (app pair? re) (app eq? (app car re) 'seq)) <-))\n  (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  15
  255
  app
  "\"'(eval (match (-> (app regex-empty? pat1) <-) (#f) _) (env ((□? (pat1 pat2)))))\""
  119
  71
  26
  22
  35
  4
  39
  1
  73/234
  25
  #f
  309/71
  ((17/2 9 0) (17/2 17/2 0) (17/2 17/2 0)))
'(shuffled-cache
  1
  regex
  2
  15
  255
  app
  "\"'(eval\n  (let (... () (_ (-> (app debug-trace) <-)) () ...) ...)\n  (env ((□? (re c)))))\""
  125
  75
  26
  24
  36
  4
  40
  1
  41/135
  29
  #t
  329/75
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-atom? (-> re <-)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  15
  255
  app
  "\"'(eval\n  (app\n   regex-match\n   (->\n    (app\n     cons\n     'seq\n     (app\n      cons\n      'foo\n      (app cons (app cons 'rep (app cons 'bar (app nil))) (app nil))))\n    <-)\n   (app cons 'foo (app cons 'bar (app nil))))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  15
  255
  match
  "\"'(eval\n  (match\n   (app match-alt re (λ (pat1 pat2) ...))\n   ((#f) (-> (match (app match-rep re (λ (pat) ...)) ...) <-))\n   c-x)\n  (env ((□? (re c)))))\""
  36
  19
  7
  10
  12
  2
  14
  1
  12/19
  10
  #f
  86/19
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app eq? c (-> re <-)) (env ((□? (re c)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  match
  "\"'(eval\n  (match (app regex-null? re) ((#f) (-> (match (app eq? c re) ...) <-)) _)\n  (env ((□? (re c)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval\n  (match (app match-rep re (λ (pat) ...)) (#f) (c-x (-> c-x <-)))\n  (env ((□? (re c)))))\""
  34
  17
  7
  10
  10
  2
  12
  1
  10/17
  8
  #f
  76/17
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  regex
  2
  255
  match
  "\"'(eval\n  (match\n   (app regex-empty? re)\n   ((#f) (-> (match (app regex-null? re) ...) <-))\n   _)\n  (env ((□? (re c)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  15
  255
  app
  "\"'(eval (app cons 'rep (-> (app cons 'bar (app nil)) <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  15
  255
  match
  "\"'(eval\n  (match\n   (app match-alt re (λ (pat1 pat2) ...))\n   ((#f) (-> (match (app regex-rep? re) ...) <-))\n   c-x)\n  (env ((□? (re)))))\""
  29
  14
  7
  8
  7
  2
  9
  1
  1/2
  7
  #f
  9/2
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  regex
  2
  15
  255
  app
  "\"'(eval\n  (match\n   (app regex-empty? pat2)\n   ((#f) (-> (app cons 'seq (app cons pat1 (app cons pat2 (app nil)))) <-))\n   _)\n  (env ((□? (pat1 pat2)))))\""
  32
  16
  7
  9
  7
  2
  9
  1
  7/16
  9
  #t
  73/16
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval\n  (λ (re) (-> (app or (app char? re) (app symbol? re)) <-))\n  (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  15
  255
  app
  "\"'(eval\n  (match (app regex-null? re) (#f) (_ (-> (app #f) <-)))\n  (env ((□? (re)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval (app regex-null? (-> pat1 <-)) (env ((□? (pat1 pat2)))))\""
  93
  36
  38
  19
  17
  6
  23
  1
  14/33
  16
  #f
  40/9
  ((6 6 0) (6 6 0) (13/2 13/2 0)))
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app car (-> re <-)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval (app equal? (-> check <-) expect) (env ((□? (check expect)))))\""
  22
  11
  7
  4
  10
  5
  15
  1
  10/11
  4
  #f
  48/11
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  regex
  2
  15
  255
  app
  "\"'(eval\n  (app\n   check-expect\n   (app\n    regex-match\n    (app\n     cons\n     'seq\n     (app\n      cons\n      'foo\n      (app cons (app cons 'rep (app cons 'bar (app nil))) (app nil))))\n    (app cons 'foo (app cons 'bar (app nil))))\n   (-> (app #f) <-))\n  (env ()))\""
  24
  13
  7
  4
  12
  5
  17
  1
  12/13
  6
  #t
  58/13
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  15
  255
  app
  "\"'(eval\n  (match (app regex-empty? re) (#f) (_ (-> (app #t) <-)))\n  (env ((□? (re)))))\""
  27
  15
  7
  5
  12
  5
  17
  1
  4/5
  8
  #t
  68/15
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app caddr (-> re <-)) (env ((□? (re f)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app cadr re) (app caddr re)) (env ((□? (re f)))))\""
  9
  3
  3
  3
  0
  1
  1
  1
  0
  2
  #f
  16/3
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval (app regex-null? (-> pat <-)) (env ((□? (pat)))))\""
  71
  23
  28
  20
  13
  5
  18
  1
  13/21
  10
  #f
  104/23
  ((3 3 0) (3 3 0) (3 3 0)))
'(shuffled-cache
  1
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval (app regex-empty (-> pat1 <-)) (env ((□? (pat1 pat2)) (□? (re c)))))\""
  86
  34
  30
  22
  20
  5
  25
  1
  7/13
  15
  #f
  9/2
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  regex
  2
  15
  255
  app
  "\"'(eval\n  (λ (pat1 pat2)\n    (->\n     (app\n      alt\n      (app seq (app regex-derivative pat1 c) pat2)\n      (app seq (app regex-empty pat1) (app regex-derivative pat2 c)))\n     <-))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  120
  49
  42
  29
  29
  7
  36
  1
  43/74
  22
  #f
  220/49
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-derivative pat (-> c <-)) (env ((□? (pat)) (□? (re c)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval (match (-> (app regex-atom? re) <-) (#f) _) (env ((□? (re c)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  15
  255
  app
  "\"'(eval\n  (app and (app regex-alt? re) (-> (app f (app cadr re) (app caddr re)) <-))\n  (env ((□? (re f)))))\""
  62
  30
  15
  17
  16
  3
  19
  1
  9/17
  14
  #f
  68/15
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  1
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval\n  (match (app regex-null? pat2) (#f) (_ (-> regex-NULL <-)))\n  (env ((□? (pat1 pat2)))))\""
  65
  33
  15
  17
  18
  3
  21
  1
  11/20
  17
  #t
  151/33
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app cadr (-> re <-)) (env ((□? (re f)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval (app or (-> (app char? re) <-) (app symbol? re)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  15
  255
  app
  "\"'(eval (match (-> (app null? data) <-) (#f) _) (env ((□? (pattern data)))))\""
  74
  53
  13
  8
  44
  4
  48
  1
  257/300
  44
  #f
  272/53
  ((21/2 11 0) (21/2 11 0) (11 11 0)))
'(shuffled-cache
  1
  regex
  2
  15
  255
  app
  "\"'(eval\n  (app seq (-> (app regex-derivative pat1 c) <-) pat2)\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  110
  65
  27
  18
  50
  6
  56
  1
  329/444
  49
  #f
  5
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  regex
  2
  255
  match
  "\"'(eval (λ (car-v) (-> (match car-v ...) <-)) (env ((□? (car-v)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval\n  (match (app regex-null? pat2) (#f) (_ (-> pat1 <-)))\n  (env ((□? (pat1 pat2)))))\""
  91
  34
  38
  19
  17
  6
  23
  1
  14/31
  14
  #f
  75/17
  ((6 13/2 0) (6 6 0) (13/2 13/2 0)))
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app cdr (-> cadr-v <-)) (env ((□? (cadr-v)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval\n  (λ (re) (-> (app and (app pair? re) (app eq? (app car re) 'rep)) <-))\n  (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  15
  255
  app
  "\"'(eval\n  (app seq (-> (app regex-empty pat1) <-) (app regex-empty pat2))\n  (env ((□? (pat1 pat2)) (□? (re)))))\""
  36
  11
  14
  11
  6
  2
  8
  1
  6/11
  5
  #f
  49/11
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  regex
  2
  255
  match
  "\"'(eval\n  (match (app eq? c re) ((#f) (-> (match (app regex-atom? re) ...) <-)) _)\n  (env ((□? (re c)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  15
  255
  app
  "\"'(eval\n  (app cons pat1 (-> (app cons pat2 (app nil)) <-))\n  (env ((□? (pat1 pat2)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  15
  255
  app
  "\"'(eval\n  (app seq (app regex-derivative pat c) (-> (app rep pat) <-))\n  (env ((□? (pat)) (□? (re c)))))\""
  32
  13
  10
  9
  6
  2
  8
  1
  6/13
  7
  #f
  59/13
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval (app car (-> data <-)) (env ((□? (pattern data)))))\""
  74
  38
  21
  15
  30
  5
  35
  1
  21/29
  30
  #f
  187/38
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval (app cdr (-> (app cdr p) <-)) (env ((□? (p)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval\n  (app and (app pair? re) (-> (app eq? (app car re) 'alt) <-))\n  (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  15
  255
  app
  "\"'(eval\n  (letrec*\n   (car ... check-expect)\n   (->\n    (app\n     check-expect\n     (app\n      regex-match\n      (app\n       cons\n       'seq\n       (app\n        cons\n        'foo\n        (app cons (app cons 'rep (app cons 'bar (app nil))) (app nil))))\n      (app cons 'foo (app cons 'bar (app nil))))\n     (app #f))\n    <-))\n  (env ()))\""
  27
  16
  7
  4
  16
  5
  21
  1
  1
  7
  #f
  71/16
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval (app regex-derivative (-> pat <-) c) (env ((□? (pat)) (□? (re c)))))\""
  83
  33
  30
  20
  29
  8
  37
  1
  29/33
  15
  #f
  49/11
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (match (-> car-v <-) (cons car-c car-d)) (env ((□? (car-v)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval (app regex-empty? (-> pat2 <-)) (env ((□? (pat1 pat2)))))\""
  161
  69
  58
  34
  42
  9
  51
  1
  19/30
  27
  #f
  101/23
  ((21/2 21/2 0) (21/2 21/2 0) (21/2 11 0)))
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app symbol? (-> re <-)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval\n  (match (app regex-null? pat1) (#f) (_ (-> pat2 <-)))\n  (env ((□? (pat1 pat2)))))\""
  91
  34
  38
  19
  17
  6
  23
  1
  14/31
  14
  #f
  75/17
  ((7 7 0) (6 13/2 0) (13/2 7 0)))
'(shuffled-cache
  1
  regex
  2
  15
  255
  app
  "\"'(eval (match (app regex-rep? re) (#f) (_ (-> (app #t) <-))) (env ((□? (re)))))\""
  93
  36
  38
  19
  17
  6
  23
  1
  14/33
  16
  #t
  40/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval (app car (-> (app cdr (app cdr p)) <-)) (env ((□? (p)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval\n  (match (app regex-null? re) (#f) (_ (-> regex-NULL <-)))\n  (env ((□? (re c)))))\""
  4
  3
  0
  1
  2
  0
  2
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval (app cons (-> pat2 <-) (app nil)) (env ((□? (pat1 pat2)))))\""
  94
  37
  38
  19
  19
  6
  25
  1
  8/17
  17
  #f
  165/37
  ((6 6 0) (6 6 0) (6 13/2 0)))
'(shuffled-cache
  1
  regex
  2
  15
  255
  app
  "\"'(eval\n  (app regex-derivative pattern (-> (app car data) <-))\n  (env ((□? (pattern data)))))\""
  169
  82
  58
  29
  58
  10
  68
  1
  61/96
  53
  #f
  397/82
  ((19/2 10 0) (19/2 10 0) (19/2 10 0)))
'(shuffled-cache
  1
  regex
  2
  255
  match
  "\"'(eval (λ (re) (-> (match (app regex-empty? re) ...) <-)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  15
  255
  app
  "\"'(eval (match (-> (app regex-null? pat2) <-) (#f) _) (env ((□? (pat1 pat2)))))\""
  118
  57
  38
  23
  29
  6
  35
  1
  44/105
  22
  #f
  250/57
  ((8 8 0) (8 8 0) (8 8 0)))
'(shuffled-cache
  1
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval (app cons (-> pat <-) (app nil)) (env ((□? (pat)))))\""
  178
  77
  63
  38
  42
  10
  52
  1
  313/595
  30
  #f
  338/77
  ((3 7/2 0) (3 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval (match (-> (app regex-empty? re) <-) (#f) _) (env ((□? (re c)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval\n  (λ (cadr-v) (-> (app car (app cdr (app cdr cadr-v))) <-))\n  (env ((□? (cadr-v)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  15
  255
  app
  "\"'(eval\n  (match pair?-v (cons pair?-c pair?-d) (_ (-> (app #f) <-)))\n  (env ((□? (pair?-v)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app pair? (-> re <-)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  15
  255
  app
  "\"'(eval\n  (app alt (app regex-empty pat1) (-> (app regex-empty pat2) <-))\n  (env ((□? (pat1 pat2)) (□? (re)))))\""
  36
  11
  14
  11
  6
  2
  8
  1
  6/11
  5
  #f
  49/11
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval\n  (app and (-> (app pair? re) <-) (app eq? (app car re) 'alt))\n  (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  15
  255
  app
  "\"'(eval\n  (letrec* (... regex-NULL (regex-BLANK (-> (app #t) <-)) regex-alt? ...) ...)\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval\n  (app and (app pair? re) (-> (app eq? (app car re) 'seq) <-))\n  (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  15
  255
  app
  "\"'(eval\n  (app\n   regex-match\n   (app\n    cons\n    'seq\n    (app\n     cons\n     'foo\n     (app cons (app cons 'rep (app cons 'bar (app nil))) (app nil))))\n   (-> (app cons 'foo (app cons 'bar (app nil))) <-))\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval\n  (app regex-derivative (-> pat1 <-) c)\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  59
  19
  23
  17
  15
  3
  18
  1
  15/19
  10
  #f
  86/19
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval (app car (-> (app cdr p) <-)) (env ((□? (p)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-atom? (-> re <-)) (env ((□? (re c)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  15
  255
  app
  "\"'(eval (match (-> (app regex-null? pat1) <-) (#f) _) (env ((□? (pat1 pat2)))))\""
  118
  57
  38
  23
  29
  6
  35
  1
  44/105
  22
  #f
  250/57
  ((8 17/2 0) (8 17/2 0) (8 17/2 0)))
'(shuffled-cache
  1
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval (app regex-null? (-> pat1 <-)) (env ((□? (pat1 pat2)))))\""
  162
  97
  38
  27
  45
  6
  51
  1
  1382/4305
  34
  #f
  422/97
  ((4 4 0) (4 4 0) (4 4 0)))
'(shuffled-cache
  1
  regex
  2
  15
  255
  app
  "\"'(eval\n  (app regex-empty? (-> (app regex-empty pattern) <-))\n  (env ((□? (pattern data)))))\""
  172
  106
  38
  28
  49
  6
  55
  1
  1382/4515
  37
  #f
  461/106
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  regex
  2
  15
  255
  app
  "\"'(eval\n  (λ (re f) (-> (app and (app regex-rep? re) (app f (app cadr re))) <-))\n  (env ((□? (re f)))))\""
  199
  119
  45
  35
  54
  8
  62
  1
  1907/5880
  43
  #f
  519/119
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (match cdr-v ((cons cdr-c cdr-d) (-> cdr-d <-))) (env ((□? (cdr-v)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  15
  255
  app
  "\"'(eval (app cons pat2 (-> (app nil) <-)) (env ((□? (pat1 pat2)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  15
  255
  app
  "\"'(eval\n  (match (-> (app match-alt re (λ (pat1 pat2) ...)) <-) (#f) c-x)\n  (env ((□? (re)))))\""
  34
  18
  6
  10
  10
  2
  12
  1
  5/9
  10
  #f
  41/9
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval\n  (app regex-derivative (-> pattern <-) (app car data))\n  (env ((□? (pattern data)))))\""
  83
  41
  23
  19
  32
  6
  38
  1
  8/11
  21
  #t
  185/41
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app cdr (-> p <-)) (env ((□? (p)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval (app regex-null? (-> pat2 <-)) (env ((□? (pat1 pat2)))))\""
  91
  34
  38
  19
  17
  6
  23
  1
  14/31
  14
  #f
  75/17
  ((13/2 13/2 0) (6 13/2 0) (13/2 13/2 0)))
'(shuffled-cache
  1
  regex
  2
  15
  255
  match
  "\"'(eval\n  (match\n   (app regex-null? pat)\n   ((#f) (-> (match (app regex-empty? pat) ...) <-))\n   _)\n  (env ((□? (pat)))))\""
  168
  70
  63
  35
  37
  10
  47
  1
  329/624
  27
  #f
  307/70
  ((5 5 0) (5 5 0) (5 5 0)))
'(shuffled-cache
  1
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval (app regex-empty (-> pat2 <-)) (env ((□? (pat1 pat2)) (□? (re)))))\""
  205
  99
  68
  38
  58
  11
  69
  1
  461/780
  38
  #f
  434/99
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval (λ (re) (-> (app eq? re (app #f)) <-)) (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app regex-null? (-> re <-)) (env ((□? (re c)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  15
  255
  app
  "\"'(eval (app eq? re (-> (app #t) <-)) (env ((□? (re)))))\""
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  15
  255
  app
  "\"'(eval\n  (app\n   regex-match\n   (app regex-derivative pattern (app car data))\n   (-> (app cdr data) <-))\n  (env ((□? (pattern data)))))\""
  53
  34
  11
  8
  26
  3
  29
  1
  40/51
  26
  #f
  88/17
  ((15/2 15/2 0) (7 15/2 0) (15/2 15/2 0)))
'(shuffled-cache
  1
  regex
  2
  15
  255
  letrec*
  "\"'(eval (lettypes cons ... nil (letrec* (car ... check-expect) ...)) (env ()))\""
  142
  93
  29
  20
  85
  8
  93
  1
  148/159
  59
  #f
  151/31
  ((6 13/2 0) (6 13/2 0) (6 6 0)))
'(shuffled-cache
  1
  regex
  2
  15
  255
  app
  "\"'(eval (app eq? re (-> (app #f) <-)) (env ((□? (re)))))\""
  145
  95
  29
  21
  85
  8
  93
  1
  148/165
  61
  #t
  463/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  15
  255
  app
  "\"'(eval\n  (app\n   cons\n   'foo\n   (-> (app cons (app cons 'rep (app cons 'bar (app nil))) (app nil)) <-))\n  (env ()))\""
  147
  97
  29
  21
  87
  8
  95
  1
  154/171
  63
  #t
  473/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval (λ (p) (-> (app car (app cdr p)) <-)) (env ((□? (p)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval\n  (app and (-> (app pair? re) <-) (app eq? (app car re) 'seq))\n  (env ((□? (re)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  15
  255
  app
  "\"'(eval\n  (app alt (-> (app regex-derivative pat1 c) <-) (app regex-derivative pat2 c))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  37
  12
  14
  11
  6
  2
  8
  1
  1/2
  5
  #f
  53/12
  ((3/2 3/2 0) (3/2 2 0) (2 2 0)))
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app match-rep (-> re <-) (λ (pat) ...)) (env ((□? (re c)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval\n  (app regex-derivative pat2 (-> c <-))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval (app equal? check (-> expect <-)) (env ((□? (check expect)))))\""
  6
  3
  2
  1
  2
  2
  4
  1
  2/3
  3
  #t
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval (app regex-empty (-> pat1 <-)) (env ((□? (pat1 pat2)) (□? (re)))))\""
  63
  20
  25
  18
  15
  5
  20
  1
  3/4
  11
  #f
  91/20
  ((2 5/2 0) (2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  1
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval (app cons (-> pat2 <-) (app nil)) (env ((□? (pat1 pat2)))))\""
  191
  87
  66
  38
  55
  12
  67
  1
  61/96
  36
  #f
  128/29
  ((19/2 19/2 0) (19/2 10 0) (19/2 19/2 0)))
'(shuffled-cache
  1
  regex
  2
  15
  255
  app
  "\"'(eval (app cons 'foo (-> (app cons 'bar (app nil)) <-)) (env ()))\""
  193
  89
  66
  38
  57
  12
  69
  1
  64/99
  38
  #t
  394/89
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval\n  (match (app regex-empty? pat) (#f) (_ (-> regex-BLANK <-)))\n  (env ((□? (pat)))))\""
  196
  92
  66
  38
  59
  12
  71
  1
  134/207
  41
  #t
  409/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  regex
  2
  255
  app
  "\"'(eval (match (-> (app eq? c re) <-) (#f) _) (env ((□? (re c)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  15
  255
  app
  "\"'(eval (app f (-> (app cadr re) <-) (app caddr re)) (env ((□? (re f)))))\""
  50
  14
  21
  15
  10
  3
  13
  1
  5/7
  6
  #f
  31/7
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval (app caddr (-> re <-)) (env ((□? (re f)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  15
  255
  match
  "\"'(eval\n  (match\n   (app match-seq re (λ (pat1 pat2) ...))\n   ((#f) (-> (match (app match-alt re (λ (pat1 pat2) ...)) ...) <-))\n   c-x)\n  (env ((□? (re)))))\""
  32
  17
  6
  9
  10
  2
  12
  1
  10/17
  8
  #f
  76/17
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  regex
  2
  15
  255
  app
  "\"'(eval\n  (match\n   (app null? data)\n   ((#f)\n    (->\n     (app\n      regex-match\n      (app regex-derivative pattern (app car data))\n      (app cdr data))\n     <-))\n   _)\n  (env ((□? (pattern data)))))\""
  51
  27
  11
  13
  15
  5
  20
  1
  5/9
  12
  #f
  40/9
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval (app null? (-> data <-)) (env ((□? (pattern data)))))\""
  159
  100
  33
  26
  76
  8
  84
  1
  712/885
  58
  #f
  483/100
  ((23/2 12 0) (12 12 0) (12 12 0)))
'(shuffled-cache
  1
  regex
  2
  15
  255
  match
  "\"'(eval\n  (match\n   (app match-seq re (λ (pat1 pat2) ...))\n   ((#f) (-> (match (app match-alt re (λ (pat1 pat2) ...)) ...) <-))\n   c-x)\n  (env ((□? (re c)))))\""
  171
  111
  33
  27
  80
  8
  88
  1
  356/465
  63
  #f
  532/111
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  regex
  2
  255
  ref-or-constructor
  "\"'(eval\n  (app regex-derivative pat2 (-> c <-))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  #f)
'(shuffled-cache
  1
  regex
  2
  15
  255
  app
  "\"'(eval\n  (λ (check expect) (-> (app equal? check expect) <-))\n  (env ((□? (check expect)))))\""
  26
  15
  7
  4
  12
  5
  17
  1
  11/13
  6
  #f
  22/5
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  regex
  2
  15
  255
  app
  "\"'(eval (app f (-> (app cadr re) <-)) (env ((□? (re f)))))\""
  75
  29
  28
  18
  22
  8
  30
  1
  7/9
  12
  #f
  128/29
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval\n  (app regex-derivative (-> pat1 <-) c)\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  91
  40
  30
  21
  29
  8
  37
  1
  23/32
  17
  #f
  177/40
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  regex
  2
  15
  255
  app
  "\"'(eval\n  (app alt (app regex-derivative pat1 c) (-> (app regex-derivative pat2 c) <-))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  130
  57
  44
  29
  39
  10
  49
  1
  31/44
  24
  #f
  84/19
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  1
  regex
  2
  15
  255
  app
  "\"'(eval\n  (match (-> (app match-seq re (λ (pat1 pat2) ...)) <-) (#f) c-x)\n  (env ((□? (re c)))))\""
  156
  73
  50
  33
  49
  12
  61
  1
  41/60
  32
  #f
  324/73
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval\n  (app cons (-> pat1 <-) (app cons pat2 (app nil)))\n  (env ((□? (pat1 pat2)))))\""
  215
  113
  62
  40
  66
  14
  80
  1
  21/37
  45
  #f
  497/113
  ((9/2 5 0) (5 5 0) (5 5 0)))
'(shuffled-cache
  1
  regex
  2
  15
  255
  app
  "\"'(eval\n  (match\n   (app null? data)\n   (#f)\n   (_ (-> (app regex-empty? (app regex-empty pattern)) <-)))\n  (env ((□? (pattern data)))))\""
  231
  127
  62
  42
  70
  14
  84
  1
  97/182
  50
  #f
  558/127
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  regex
  2
  15
  255
  app
  "\"'(eval\n  (app\n   alt\n   (app seq (app regex-derivative pat1 c) pat2)\n   (-> (app seq (app regex-empty pat1) (app regex-derivative pat2 c)) <-))\n  (env ((□? (pat1 pat2)) (□? (re c)))))\""
  254
  138
  70
  46
  75
  15
  90
  1
  326/623
  55
  #f
  607/138
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  regex
  2
  15
  255
  ref-or-constructor
  "\"'(eval (app regex-empty (-> pat2 <-)) (env ((□? (pat1 pat2)) (□? (re)))))\""
  290
  166
  75
  49
  95
  16
  111
  1
  1952/3535
  65
  #f
  729/166
  ((5/2 3 0) (3 3 0) (5/2 5/2 0)))
