'(clean-cache
  primtest
  2
  5
  180
  letrec*
  "'(eval ((top) letrec* (square ... byte-size) ...) (env ()))"
  #f
  #f)
'(clean-cache
  primtest
  2
  5
  180
  number
  "'(eval (letrec* (... iterations (byte-size (-> 15 <-)) () ...) ...) (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  primtest
  2
  5
  180
  number
  "'(eval\n  (letrec*\n   (... generate-fermat-prime (iterations (-> 10 <-)) byte-size ...)\n   ...)\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  primtest
  2
  5
  180
  lambda
  "'(eval\n  (letrec*\n   (...\n    is-fermat-prime?\n    (generate-fermat-prime (-> (λ (byte-size iterations) ...) <-))\n    iterations\n    ...)\n   ...)\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  primtest
  2
  5
  180
  let
  "'(eval\n  (λ (byte-size iterations) (-> (let (n) ...) <-))\n  (env ((□? (byte-size iterations)))))"
  #f
  #f)
'(clean-cache
  primtest
  2
  5
  180
  app
  "'(eval\n  (let (... () (n (-> (app random byte-size) <-)) () ...) ...)\n  (env ((□? (byte-size iterations)))))"
  #f
  18
  14
  3
  1
  11
  2
  13
  1
  3/4
  13
  #f
  15/14
  ((0 0 0)))
'(clean-cache
  primtest
  2
  5
  180
  ref-or-constructor
  "'(eval (app random (-> byte-size <-)) (env ((□? (byte-size iterations)))))"
  #f
  10
  6
  3
  1
  5
  2
  7
  1
  3/4
  6
  #t
  1
  ((0 0 0)))
'(clean-cache
  primtest
  2
  5
  180
  ref-or-constructor
  "'(eval (app (-> random <-) byte-size) (env ((□? (byte-size iterations)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  primtest
  2
  5
  180
  match
  "'(eval\n  (let (n)\n    (->\n     (match\n      (app\n       and\n       (app not (app is-trivial-composite? n))\n       (app is-fermat-prime? n iterations))\n      ...)\n     <-))\n  (env ((□? (byte-size iterations)))))"
  #f
  #f)
'(clean-cache
  primtest
  2
  5
  180
  ref-or-constructor
  "'(eval\n  (match\n   (app\n    and\n    (app not (app is-trivial-composite? n))\n    (app is-fermat-prime? n iterations))\n   (#f)\n   (_ (-> n <-)))\n  (env ((□? (byte-size iterations)))))"
  #f
  22
  18
  3
  1
  14
  2
  16
  1
  3/4
  13
  #f
  23/18
  ((0 0 0)))
'(clean-cache
  primtest
  2
  5
  180
  app
  "'(eval\n  (match\n   (app\n    and\n    (app not (app is-trivial-composite? n))\n    (app is-fermat-prime? n iterations))\n   ((#f) (-> (app generate-fermat-prime byte-size iterations) <-))\n   _)\n  (env ((□? (byte-size iterations)))))"
  #f
  #f)
'(clean-cache
  primtest
  2
  5
  180
  ref-or-constructor
  "'(eval\n  (app generate-fermat-prime byte-size (-> iterations <-))\n  (env ((□? (byte-size iterations)))))"
  #f
  10
  6
  3
  1
  5
  2
  7
  1
  11/12
  6
  #t
  1
  ((0 0 0)))
'(clean-cache
  primtest
  2
  5
  180
  ref-or-constructor
  "'(eval\n  (app generate-fermat-prime (-> byte-size <-) iterations)\n  (env ((□? (byte-size iterations)))))"
  #f
  10
  6
  3
  1
  5
  2
  7
  1
  11/12
  6
  #t
  1
  ((0 0 0)))
'(clean-cache
  primtest
  2
  5
  180
  ref-or-constructor
  "'(eval\n  (app (-> generate-fermat-prime <-) byte-size iterations)\n  (env ((□? (byte-size iterations)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  primtest
  2
  5
  180
  app
  "'(eval\n  (match\n   (->\n    (app\n     and\n     (app not (app is-trivial-composite? n))\n     (app is-fermat-prime? n iterations))\n    <-)\n   (#f)\n   _)\n  (env ((□? (byte-size iterations)))))"
  #f
  #f)
'(clean-cache
  primtest
  2
  5
  180
  app
  "'(eval\n  (app\n   and\n   (app not (app is-trivial-composite? n))\n   (-> (app is-fermat-prime? n iterations) <-))\n  (env ((□? (byte-size iterations)))))"
  #f
  #f)
'(clean-cache
  primtest
  2
  5
  180
  ref-or-constructor
  "'(eval\n  (app is-fermat-prime? n (-> iterations <-))\n  (env ((□? (byte-size iterations)))))"
  #f
  10
  6
  3
  1
  5
  2
  7
  1
  3/4
  6
  #t
  1
  ((0 0 0)))
'(clean-cache
  primtest
  2
  5
  180
  ref-or-constructor
  "'(eval\n  (app is-fermat-prime? (-> n <-) iterations)\n  (env ((□? (byte-size iterations)))))"
  #f
  22
  18
  3
  1
  14
  2
  16
  1
  3/4
  13
  #f
  23/18
  ((0 0 0)))
'(clean-cache
  primtest
  2
  5
  180
  ref-or-constructor
  "'(eval\n  (app (-> is-fermat-prime? <-) n iterations)\n  (env ((□? (byte-size iterations)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  primtest
  2
  5
  180
  app
  "'(eval\n  (app\n   and\n   (-> (app not (app is-trivial-composite? n)) <-)\n   (app is-fermat-prime? n iterations))\n  (env ((□? (byte-size iterations)))))"
  #f
  #f)
'(clean-cache
  primtest
  2
  5
  180
  app
  "'(eval\n  (app not (-> (app is-trivial-composite? n) <-))\n  (env ((□? (byte-size iterations)))))"
  #f
  #f)
'(clean-cache
  primtest
  2
  5
  180
  ref-or-constructor
  "'(eval\n  (app is-trivial-composite? (-> n <-))\n  (env ((□? (byte-size iterations)))))"
  #f
  22
  18
  3
  1
  14
  2
  16
  1
  3/4
  13
  #f
  23/18
  ((0 0 0)))
'(clean-cache
  primtest
  2
  5
  180
  ref-or-constructor
  "'(eval\n  (app (-> is-trivial-composite? <-) n)\n  (env ((□? (byte-size iterations)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  primtest
  2
  5
  180
  ref-or-constructor
  "'(eval\n  (app (-> not <-) (app is-trivial-composite? n))\n  (env ((□? (byte-size iterations)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  primtest
  2
  5
  180
  ref-or-constructor
  "'(eval\n  (app\n   (-> and <-)\n   (app not (app is-trivial-composite? n))\n   (app is-fermat-prime? n iterations))\n  (env ((□? (byte-size iterations)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  primtest
  2
  5
  180
  lambda
  "'(eval\n  (letrec*\n   (...\n    is-trivial-composite?\n    (is-fermat-prime? (-> (λ (n iterations) ...) <-))\n    generate-fermat-prime\n    ...)\n   ...)\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  primtest
  2
  5
  180
  app
  "'(eval\n  (λ (n iterations)\n    (-> (app or (app <= iterations 0) (let* (byte-size ... a) ...)) <-))\n  (env ((□? (n iterations)))))"
  #f
  #f)
'(clean-cache
  primtest
  2
  5
  180
  let*
  "'(eval\n  (app or (app <= iterations 0) (-> (let* (byte-size ... a) ...) <-))\n  (env ((□? (n iterations)))))"
  #f
  #f)
'(clean-cache
  primtest
  2
  5
  180
  app
  "'(eval\n  (let* (... byte-size (a (-> (app random byte-size) <-)) () ...) ...)\n  (env ((□? (n iterations)))))"
  #f
  #f)
'(clean-cache
  primtest
  2
  5
  180
  ref-or-constructor
  "'(eval (app random (-> byte-size <-)) (env ((□? (n iterations)))))"
  #f
  107
  97
  6
  4
  61
  3
  64
  1
  262/399
  53
  #f
  141/97
  ((5 5 0)))
'(clean-cache
  primtest
  2
  5
  180
  ref-or-constructor
  "'(eval (app (-> random <-) byte-size) (env ((□? (n iterations)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  primtest
  2
  5
  180
  app
  "'(eval\n  (let* (...\n         ()\n         (byte-size (-> (app ceiling (app / (app log n) (app log 2))) <-))\n         a\n         ...)\n    ...)\n  (env ((□? (n iterations)))))"
  #f
  100
  90
  6
  4
  57
  3
  60
  1
  125/189
  53
  #f
  127/90
  ((4 4 0)))
'(clean-cache
  primtest
  2
  5
  180
  app
  "'(eval\n  (app ceiling (-> (app / (app log n) (app log 2)) <-))\n  (env ((□? (n iterations)))))"
  #f
  86
  76
  6
  4
  49
  3
  52
  1
  113/168
  46
  #f
  53/38
  ((4 4 0)))
'(clean-cache
  primtest
  2
  5
  180
  app
  "'(eval (app / (app log n) (-> (app log 2) <-)) (env ((□? (n iterations)))))"
  #f
  4
  3
  0
  1
  0
  0
  0
  1
  0
  3
  #t
  1
  ((0 0 0)))
'(clean-cache
  primtest
  2
  5
  180
  number
  "'(eval (app log (-> 2 <-)) (env ((□? (n iterations)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  primtest
  2
  5
  180
  ref-or-constructor
  "'(eval (app (-> log <-) 2) (env ((□? (n iterations)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  primtest
  2
  5
  180
  app
  "'(eval (app / (-> (app log n) <-) (app log 2)) (env ((□? (n iterations)))))"
  #f
  53
  43
  6
  4
  29
  3
  32
  1
  54/77
  20
  #f
  66/43
  ((2 2 0)))
'(clean-cache
  primtest
  2
  5
  180
  ref-or-constructor
  "'(eval (app log (-> n <-)) (env ((□? (n iterations)))))"
  #f
  39
  29
  6
  4
  21
  3
  24
  1
  46/63
  13
  #f
  45/29
  ((2 2 0)))
'(clean-cache
  primtest
  2
  5
  180
  ref-or-constructor
  "'(eval (app (-> log <-) n) (env ((□? (n iterations)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  primtest
  2
  5
  180
  ref-or-constructor
  "'(eval (app (-> / <-) (app log n) (app log 2)) (env ((□? (n iterations)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  primtest
  2
  5
  180
  ref-or-constructor
  "'(eval\n  (app (-> ceiling <-) (app / (app log n) (app log 2)))\n  (env ((□? (n iterations)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  primtest
  2
  5
  180
  match
  "'(eval\n  (let* (byte-size ... a)\n    (-> (match (app = (app modulo-power a (app - n 1) n) 1) ...) <-))\n  (env ((□? (n iterations)))))"
  #f
  #f)
'(clean-cache
  primtest
  2
  5
  180
  app
  "'(eval\n  (match\n   (app = (app modulo-power a (app - n 1) n) 1)\n   (#f)\n   (_ (-> (app is-fermat-prime? n (app - iterations 1)) <-)))\n  (env ((□? (n iterations)))))"
  #f
  #f)
'(clean-cache
  primtest
  2
  5
  180
  app
  "'(eval\n  (app is-fermat-prime? n (-> (app - iterations 1) <-))\n  (env ((□? (n iterations)))))"
  #f
  47
  37
  6
  4
  24
  3
  27
  1
  169/224
  29
  #f
  45/37
  ((2 2 0)))
'(clean-cache
  primtest
  2
  5
  180
  number
  "'(eval (app - iterations (-> 1 <-)) (env ((□? (n iterations)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  primtest
  2
  5
  180
  ref-or-constructor
  "'(eval (app - (-> iterations <-) 1) (env ((□? (n iterations)))))"
  #f
  45
  35
  6
  4
  24
  3
  27
  1
  523/672
  27
  #f
  43/35
  ((2 2 0)))
'(clean-cache
  primtest
  2
  5
  180
  ref-or-constructor
  "'(eval (app (-> - <-) iterations 1) (env ((□? (n iterations)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  primtest
  2
  5
  180
  ref-or-constructor
  "'(eval\n  (app is-fermat-prime? (-> n <-) (app - iterations 1))\n  (env ((□? (n iterations)))))"
  #f
  38
  28
  6
  4
  21
  3
  24
  1
  23/28
  13
  #f
  43/28
  ((2 2 0)))
'(clean-cache
  primtest
  2
  5
  180
  ref-or-constructor
  "'(eval\n  (app (-> is-fermat-prime? <-) n (app - iterations 1))\n  (env ((□? (n iterations)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  primtest
  2
  5
  180
  app
  "'(eval\n  (match\n   (app = (app modulo-power a (app - n 1) n) 1)\n   ((#f) (-> (app #f) <-))\n   _)\n  (env ((□? (n iterations)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  primtest
  2
  5
  180
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (n iterations)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  primtest
  2
  5
  180
  app
  "'(eval\n  (match (-> (app = (app modulo-power a (app - n 1) n) 1) <-) (#f) _)\n  (env ((□? (n iterations)))))"
  #f
  #f)
'(clean-cache
  primtest
  2
  5
  180
  number
  "'(eval\n  (app = (app modulo-power a (app - n 1) n) (-> 1 <-))\n  (env ((□? (n iterations)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  primtest
  2
  5
  180
  app
  "'(eval\n  (app = (-> (app modulo-power a (app - n 1) n) <-) 1)\n  (env ((□? (n iterations)))))"
  #f
  #f)
'(clean-cache
  primtest
  2
  5
  180
  ref-or-constructor
  "'(eval (app modulo-power a (app - n 1) (-> n <-)) (env ((□? (n iterations)))))"
  #f
  39
  29
  6
  4
  21
  3
  24
  1
  46/63
  13
  #f
  45/29
  ((2 2 0)))
'(clean-cache
  primtest
  2
  5
  180
  app
  "'(eval (app modulo-power a (-> (app - n 1) <-) n) (env ((□? (n iterations)))))"
  #f
  60
  50
  6
  4
  33
  3
  36
  1
  29/42
  27
  #f
  73/50
  ((3 3 0)))
'(clean-cache
  primtest
  2
  5
  180
  number
  "'(eval (app - n (-> 1 <-)) (env ((□? (n iterations)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  primtest
  2
  5
  180
  ref-or-constructor
  "'(eval (app - (-> n <-) 1) (env ((□? (n iterations)))))"
  #f
  39
  29
  6
  4
  21
  3
  24
  1
  46/63
  13
  #f
  45/29
  ((2 2 0)))
'(clean-cache
  primtest
  2
  5
  180
  ref-or-constructor
  "'(eval (app (-> - <-) n 1) (env ((□? (n iterations)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  primtest
  2
  5
  180
  ref-or-constructor
  "'(eval (app modulo-power (-> a <-) (app - n 1) n) (env ((□? (n iterations)))))"
  #f
  #f)
'(clean-cache
  primtest
  2
  5
  180
  ref-or-constructor
  "'(eval (app (-> modulo-power <-) a (app - n 1) n) (env ((□? (n iterations)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  primtest
  2
  5
  180
  ref-or-constructor
  "'(eval\n  (app (-> = <-) (app modulo-power a (app - n 1) n) 1)\n  (env ((□? (n iterations)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  primtest
  2
  5
  180
  app
  "'(eval\n  (app or (-> (app <= iterations 0) <-) (let* (byte-size ... a) ...))\n  (env ((□? (n iterations)))))"
  #f
  66
  56
  6
  4
  36
  3
  39
  1
  75/112
  44
  #f
  17/14
  ((3 3 0)))
'(clean-cache
  primtest
  2
  5
  180
  number
  "'(eval (app <= iterations (-> 0 <-)) (env ((□? (n iterations)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  primtest
  2
  5
  180
  ref-or-constructor
  "'(eval (app <= (-> iterations <-) 0) (env ((□? (n iterations)))))"
  #f
  45
  35
  6
  4
  24
  3
  27
  1
  59/84
  27
  #f
  43/35
  ((2 2 0)))
'(clean-cache
  primtest
  2
  5
  180
  ref-or-constructor
  "'(eval (app (-> <= <-) iterations 0) (env ((□? (n iterations)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  primtest
  2
  5
  180
  ref-or-constructor
  "'(eval\n  (app (-> or <-) (app <= iterations 0) (let* (byte-size ... a) ...))\n  (env ((□? (n iterations)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  primtest
  2
  5
  180
  lambda
  "'(eval\n  (letrec*\n   (...\n    modulo-power\n    (is-trivial-composite? (-> (λ (n) ...) <-))\n    is-fermat-prime?\n    ...)\n   ...)\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  primtest
  2
  5
  180
  app
  "'(eval\n  (λ (n)\n    (->\n     (app\n      or\n      (app = (app modulo n 2) 0)\n      (app = (app modulo n 3) 0)\n      (app = (app modulo n 5) 0)\n      (app = (app modulo n 7) 0)\n      (app = (app modulo n 11) 0)\n      (app = (app modulo n 13) 0)\n      (app = (app modulo n 17) 0)\n      (app = (app modulo n 19) 0)\n      (app = (app modulo n 23) 0))\n     <-))\n  (env ((□? (n)))))"
  #f
  #f)
'(clean-cache
  primtest
  2
  5
  180
  app
  "'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (-> (app = (app modulo n 23) 0) <-))\n  (env ((□? (n)))))"
  #f
  54
  46
  5
  3
  29
  3
  32
  1
  9/14
  29
  #f
  63/46
  ((1 1 0)))
'(clean-cache
  primtest
  2
  5
  180
  number
  "'(eval (app = (app modulo n 23) (-> 0 <-)) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  primtest
  2
  5
  180
  app
  "'(eval (app = (-> (app modulo n 23) <-) 0) (env ((□? (n)))))"
  #f
  42
  34
  5
  3
  23
  3
  26
  1
  15/22
  21
  #f
  47/34
  ((1 1 0)))
'(clean-cache
  primtest
  2
  5
  180
  number
  "'(eval (app modulo n (-> 23 <-)) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  primtest
  2
  5
  180
  ref-or-constructor
  "'(eval (app modulo (-> n <-) 23) (env ((□? (n)))))"
  #f
  30
  22
  5
  3
  17
  3
  20
  1
  3/4
  13
  #f
  31/22
  ((1 1 0)))
'(clean-cache
  primtest
  2
  5
  180
  ref-or-constructor
  "'(eval (app (-> modulo <-) n 23) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  primtest
  2
  5
  180
  ref-or-constructor
  "'(eval (app (-> = <-) (app modulo n 23) 0) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  primtest
  2
  5
  180
  app
  "'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (-> (app = (app modulo n 19) 0) <-)\n   (app = (app modulo n 23) 0))\n  (env ((□? (n)))))"
  #f
  54
  46
  5
  3
  29
  3
  32
  1
  9/14
  29
  #f
  63/46
  ((1 1 0)))
'(clean-cache
  primtest
  2
  5
  180
  number
  "'(eval (app = (app modulo n 19) (-> 0 <-)) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  primtest
  2
  5
  180
  app
  "'(eval (app = (-> (app modulo n 19) <-) 0) (env ((□? (n)))))"
  #f
  42
  34
  5
  3
  23
  3
  26
  1
  15/22
  21
  #f
  47/34
  ((1 1 0)))
'(clean-cache
  primtest
  2
  5
  180
  number
  "'(eval (app modulo n (-> 19 <-)) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  primtest
  2
  5
  180
  ref-or-constructor
  "'(eval (app modulo (-> n <-) 19) (env ((□? (n)))))"
  #f
  30
  22
  5
  3
  17
  3
  20
  1
  3/4
  13
  #f
  31/22
  ((1 1 0)))
'(clean-cache
  primtest
  2
  5
  180
  ref-or-constructor
  "'(eval (app (-> modulo <-) n 19) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  primtest
  2
  5
  180
  ref-or-constructor
  "'(eval (app (-> = <-) (app modulo n 19) 0) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  primtest
  2
  5
  180
  app
  "'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (-> (app = (app modulo n 17) 0) <-)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env ((□? (n)))))"
  #f
  54
  46
  5
  3
  29
  3
  32
  1
  9/14
  29
  #f
  63/46
  ((1 1 0)))
'(clean-cache
  primtest
  2
  5
  180
  number
  "'(eval (app = (app modulo n 17) (-> 0 <-)) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  primtest
  2
  5
  180
  app
  "'(eval (app = (-> (app modulo n 17) <-) 0) (env ((□? (n)))))"
  #f
  42
  34
  5
  3
  23
  3
  26
  1
  15/22
  21
  #f
  47/34
  ((1 1 0)))
'(clean-cache
  primtest
  2
  5
  180
  number
  "'(eval (app modulo n (-> 17 <-)) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  primtest
  2
  5
  180
  ref-or-constructor
  "'(eval (app modulo (-> n <-) 17) (env ((□? (n)))))"
  #f
  30
  22
  5
  3
  17
  3
  20
  1
  3/4
  13
  #f
  31/22
  ((1 1 0)))
'(clean-cache
  primtest
  2
  5
  180
  ref-or-constructor
  "'(eval (app (-> modulo <-) n 17) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  primtest
  2
  5
  180
  ref-or-constructor
  "'(eval (app (-> = <-) (app modulo n 17) 0) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  primtest
  2
  5
  180
  app
  "'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (-> (app = (app modulo n 13) 0) <-)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env ((□? (n)))))"
  #f
  54
  46
  5
  3
  29
  3
  32
  1
  9/14
  29
  #f
  63/46
  ((1 1 0)))
'(clean-cache
  primtest
  2
  5
  180
  number
  "'(eval (app = (app modulo n 13) (-> 0 <-)) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  primtest
  2
  5
  180
  app
  "'(eval (app = (-> (app modulo n 13) <-) 0) (env ((□? (n)))))"
  #f
  42
  34
  5
  3
  23
  3
  26
  1
  15/22
  21
  #f
  47/34
  ((1 1 0)))
'(clean-cache
  primtest
  2
  5
  180
  number
  "'(eval (app modulo n (-> 13 <-)) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  primtest
  2
  5
  180
  ref-or-constructor
  "'(eval (app modulo (-> n <-) 13) (env ((□? (n)))))"
  #f
  30
  22
  5
  3
  17
  3
  20
  1
  3/4
  13
  #f
  31/22
  ((1 1 0)))
'(clean-cache
  primtest
  2
  5
  180
  ref-or-constructor
  "'(eval (app (-> modulo <-) n 13) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  primtest
  2
  5
  180
  ref-or-constructor
  "'(eval (app (-> = <-) (app modulo n 13) 0) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  primtest
  2
  5
  180
  app
  "'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (-> (app = (app modulo n 11) 0) <-)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env ((□? (n)))))"
  #f
  54
  46
  5
  3
  29
  3
  32
  1
  9/14
  29
  #f
  63/46
  ((1 1 0)))
'(clean-cache
  primtest
  2
  5
  180
  number
  "'(eval (app = (app modulo n 11) (-> 0 <-)) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  primtest
  2
  5
  180
  app
  "'(eval (app = (-> (app modulo n 11) <-) 0) (env ((□? (n)))))"
  #f
  42
  34
  5
  3
  23
  3
  26
  1
  15/22
  21
  #f
  47/34
  ((1 1 0)))
'(clean-cache
  primtest
  2
  5
  180
  number
  "'(eval (app modulo n (-> 11 <-)) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  primtest
  2
  5
  180
  ref-or-constructor
  "'(eval (app modulo (-> n <-) 11) (env ((□? (n)))))"
  #f
  30
  22
  5
  3
  17
  3
  20
  1
  3/4
  13
  #f
  31/22
  ((1 1 0)))
'(clean-cache
  primtest
  2
  5
  180
  ref-or-constructor
  "'(eval (app (-> modulo <-) n 11) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  primtest
  2
  5
  180
  ref-or-constructor
  "'(eval (app (-> = <-) (app modulo n 11) 0) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  primtest
  2
  5
  180
  app
  "'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (-> (app = (app modulo n 7) 0) <-)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env ((□? (n)))))"
  #f
  54
  46
  5
  3
  29
  3
  32
  1
  9/14
  29
  #f
  63/46
  ((1 1 0)))
'(clean-cache
  primtest
  2
  5
  180
  number
  "'(eval (app = (app modulo n 7) (-> 0 <-)) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  primtest
  2
  5
  180
  app
  "'(eval (app = (-> (app modulo n 7) <-) 0) (env ((□? (n)))))"
  #f
  42
  34
  5
  3
  23
  3
  26
  1
  15/22
  21
  #f
  47/34
  ((1 1 0)))
'(clean-cache
  primtest
  2
  5
  180
  number
  "'(eval (app modulo n (-> 7 <-)) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  primtest
  2
  5
  180
  ref-or-constructor
  "'(eval (app modulo (-> n <-) 7) (env ((□? (n)))))"
  #f
  30
  22
  5
  3
  17
  3
  20
  1
  3/4
  13
  #f
  31/22
  ((1 1 0)))
'(clean-cache
  primtest
  2
  5
  180
  ref-or-constructor
  "'(eval (app (-> modulo <-) n 7) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  primtest
  2
  5
  180
  ref-or-constructor
  "'(eval (app (-> = <-) (app modulo n 7) 0) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  primtest
  2
  5
  180
  app
  "'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (-> (app = (app modulo n 5) 0) <-)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env ((□? (n)))))"
  #f
  54
  46
  5
  3
  29
  3
  32
  1
  9/14
  29
  #f
  63/46
  ((1 1 0)))
'(clean-cache
  primtest
  2
  5
  180
  number
  "'(eval (app = (app modulo n 5) (-> 0 <-)) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  primtest
  2
  5
  180
  app
  "'(eval (app = (-> (app modulo n 5) <-) 0) (env ((□? (n)))))"
  #f
  42
  34
  5
  3
  23
  3
  26
  1
  15/22
  21
  #f
  47/34
  ((1 1 0)))
'(clean-cache
  primtest
  2
  5
  180
  number
  "'(eval (app modulo n (-> 5 <-)) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  primtest
  2
  5
  180
  ref-or-constructor
  "'(eval (app modulo (-> n <-) 5) (env ((□? (n)))))"
  #f
  30
  22
  5
  3
  17
  3
  20
  1
  3/4
  13
  #f
  31/22
  ((1 1 0)))
'(clean-cache
  primtest
  2
  5
  180
  ref-or-constructor
  "'(eval (app (-> modulo <-) n 5) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  primtest
  2
  5
  180
  ref-or-constructor
  "'(eval (app (-> = <-) (app modulo n 5) 0) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  primtest
  2
  5
  180
  app
  "'(eval\n  (app\n   or\n   (app = (app modulo n 2) 0)\n   (-> (app = (app modulo n 3) 0) <-)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env ((□? (n)))))"
  #f
  54
  46
  5
  3
  29
  3
  32
  1
  9/14
  29
  #f
  63/46
  ((1 1 0)))
'(clean-cache
  primtest
  2
  5
  180
  number
  "'(eval (app = (app modulo n 3) (-> 0 <-)) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  primtest
  2
  5
  180
  app
  "'(eval (app = (-> (app modulo n 3) <-) 0) (env ((□? (n)))))"
  #f
  42
  34
  5
  3
  23
  3
  26
  1
  15/22
  21
  #f
  47/34
  ((1 1 0)))
'(clean-cache
  primtest
  2
  5
  180
  number
  "'(eval (app modulo n (-> 3 <-)) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  primtest
  2
  5
  180
  ref-or-constructor
  "'(eval (app modulo (-> n <-) 3) (env ((□? (n)))))"
  #f
  30
  22
  5
  3
  17
  3
  20
  1
  3/4
  13
  #f
  31/22
  ((1 1 0)))
'(clean-cache
  primtest
  2
  5
  180
  ref-or-constructor
  "'(eval (app (-> modulo <-) n 3) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  primtest
  2
  5
  180
  ref-or-constructor
  "'(eval (app (-> = <-) (app modulo n 3) 0) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  primtest
  2
  5
  180
  app
  "'(eval\n  (app\n   or\n   (-> (app = (app modulo n 2) 0) <-)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env ((□? (n)))))"
  #f
  54
  46
  5
  3
  29
  3
  32
  1
  9/14
  29
  #f
  63/46
  ((1 1 0)))
'(clean-cache
  primtest
  2
  5
  180
  number
  "'(eval (app = (app modulo n 2) (-> 0 <-)) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  primtest
  2
  5
  180
  app
  "'(eval (app = (-> (app modulo n 2) <-) 0) (env ((□? (n)))))"
  #f
  42
  34
  5
  3
  23
  3
  26
  1
  15/22
  21
  #f
  47/34
  ((1 1 0)))
'(clean-cache
  primtest
  2
  5
  180
  number
  "'(eval (app modulo n (-> 2 <-)) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  primtest
  2
  5
  180
  ref-or-constructor
  "'(eval (app modulo (-> n <-) 2) (env ((□? (n)))))"
  #f
  30
  22
  5
  3
  17
  3
  20
  1
  3/4
  13
  #f
  31/22
  ((1 1 0)))
'(clean-cache
  primtest
  2
  5
  180
  ref-or-constructor
  "'(eval (app (-> modulo <-) n 2) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  primtest
  2
  5
  180
  ref-or-constructor
  "'(eval (app (-> = <-) (app modulo n 2) 0) (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  primtest
  2
  5
  180
  ref-or-constructor
  "'(eval\n  (app\n   (-> or <-)\n   (app = (app modulo n 2) 0)\n   (app = (app modulo n 3) 0)\n   (app = (app modulo n 5) 0)\n   (app = (app modulo n 7) 0)\n   (app = (app modulo n 11) 0)\n   (app = (app modulo n 13) 0)\n   (app = (app modulo n 17) 0)\n   (app = (app modulo n 19) 0)\n   (app = (app modulo n 23) 0))\n  (env ((□? (n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  primtest
  2
  5
  180
  lambda
  "'(eval\n  (letrec*\n   (...\n    square\n    (modulo-power (-> (λ (base exp n) ...) <-))\n    is-trivial-composite?\n    ...)\n   ...)\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  primtest
  2
  5
  180
  match
  "'(eval\n  (λ (base exp n) (-> (match (app = exp 0) ...) <-))\n  (env ((□? (base exp n)))))"
  #f
  #f)
'(clean-cache
  primtest
  2
  5
  180
  number
  "'(eval (match (app = exp 0) (#f) (_ (-> 1 <-))) (env ((□? (base exp n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  primtest
  2
  5
  180
  match
  "'(eval\n  (match (app = exp 0) ((#f) (-> (match (app odd? exp) ...) <-)) _)\n  (env ((□? (base exp n)))))"
  #f
  #f)
'(clean-cache
  primtest
  2
  5
  180
  app
  "'(eval\n  (match\n   (app odd? exp)\n   (#f)\n   (_\n    (->\n     (app modulo (app * base (app modulo-power base (app - exp 1) n)) n)\n     <-)))\n  (env ((□? (base exp n)))))"
  #f
  #f)
'(clean-cache
  primtest
  2
  5
  180
  ref-or-constructor
  "'(eval\n  (app modulo (app * base (app modulo-power base (app - exp 1) n)) (-> n <-))\n  (env ((□? (base exp n)))))"
  #f
  #f)
'(clean-cache
  primtest
  2
  5
  180
  app
  "'(eval\n  (app modulo (-> (app * base (app modulo-power base (app - exp 1) n)) <-) n)\n  (env ((□? (base exp n)))))"
  #f
  #f)
'(clean-cache
  primtest
  2
  5
  180
  app
  "'(eval\n  (app * base (-> (app modulo-power base (app - exp 1) n) <-))\n  (env ((□? (base exp n)))))"
  #f
  #f)
'(clean-cache
  primtest
  2
  5
  180
  ref-or-constructor
  "'(eval\n  (app modulo-power base (app - exp 1) (-> n <-))\n  (env ((□? (base exp n)))))"
  #f
  #f)
'(clean-cache
  primtest
  2
  5
  180
  app
  "'(eval\n  (app modulo-power base (-> (app - exp 1) <-) n)\n  (env ((□? (base exp n)))))"
  #f
  #f)
'(clean-cache
  primtest
  2
  5
  180
  number
  "'(eval (app - exp (-> 1 <-)) (env ((□? (base exp n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  primtest
  2
  5
  180
  ref-or-constructor
  "'(eval (app - (-> exp <-) 1) (env ((□? (base exp n)))))"
  #f
  #f)
'(clean-cache
  primtest
  2
  5
  180
  ref-or-constructor
  "'(eval (app (-> - <-) exp 1) (env ((□? (base exp n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  primtest
  2
  5
  180
  ref-or-constructor
  "'(eval\n  (app modulo-power (-> base <-) (app - exp 1) n)\n  (env ((□? (base exp n)))))"
  #f
  #f)
'(clean-cache
  primtest
  2
  5
  180
  ref-or-constructor
  "'(eval\n  (app (-> modulo-power <-) base (app - exp 1) n)\n  (env ((□? (base exp n)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  primtest
  2
  5
  180
  ref-or-constructor
  "'(eval\n  (app * (-> base <-) (app modulo-power base (app - exp 1) n))\n  (env ((□? (base exp n)))))"
  #f
  #f)
'(clean-cache
  primtest
  2
  5
  180
  ref-or-constructor
  "'(eval\n  (app (-> * <-) base (app modulo-power base (app - exp 1) n))\n  (env ((□? (base exp n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  primtest
  2
  5
  180
  ref-or-constructor
  "'(eval\n  (app (-> modulo <-) (app * base (app modulo-power base (app - exp 1) n)) n)\n  (env ((□? (base exp n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  primtest
  2
  5
  180
  app
  "'(eval\n  (match\n   (app odd? exp)\n   ((#f)\n    (->\n     (app modulo (app square (app modulo-power base (app / exp 2) n)) n)\n     <-))\n   _)\n  (env ((□? (base exp n)))))"
  #f
  #f)
'(clean-cache
  primtest
  2
  5
  180
  ref-or-constructor
  "'(eval\n  (app modulo (app square (app modulo-power base (app / exp 2) n)) (-> n <-))\n  (env ((□? (base exp n)))))"
  #f
  #f)
'(clean-cache
  primtest
  2
  5
  180
  app
  "'(eval\n  (app modulo (-> (app square (app modulo-power base (app / exp 2) n)) <-) n)\n  (env ((□? (base exp n)))))"
  #f
  #f)
'(clean-cache
  primtest
  2
  5
  180
  app
  "'(eval\n  (app square (-> (app modulo-power base (app / exp 2) n) <-))\n  (env ((□? (base exp n)))))"
  #f
  #f)
'(clean-cache
  primtest
  2
  5
  180
  ref-or-constructor
  "'(eval\n  (app modulo-power base (app / exp 2) (-> n <-))\n  (env ((□? (base exp n)))))"
  #f
  #f)
'(clean-cache
  primtest
  2
  5
  180
  app
  "'(eval\n  (app modulo-power base (-> (app / exp 2) <-) n)\n  (env ((□? (base exp n)))))"
  #f
  #f)
'(clean-cache
  primtest
  2
  5
  180
  number
  "'(eval (app / exp (-> 2 <-)) (env ((□? (base exp n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  primtest
  2
  5
  180
  ref-or-constructor
  "'(eval (app / (-> exp <-) 2) (env ((□? (base exp n)))))"
  #f
  #f)
'(clean-cache
  primtest
  2
  5
  180
  ref-or-constructor
  "'(eval (app (-> / <-) exp 2) (env ((□? (base exp n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  primtest
  2
  5
  180
  ref-or-constructor
  "'(eval\n  (app modulo-power (-> base <-) (app / exp 2) n)\n  (env ((□? (base exp n)))))"
  #f
  #f)
'(clean-cache
  primtest
  2
  5
  180
  ref-or-constructor
  "'(eval\n  (app (-> modulo-power <-) base (app / exp 2) n)\n  (env ((□? (base exp n)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  primtest
  2
  5
  180
  ref-or-constructor
  "'(eval\n  (app (-> square <-) (app modulo-power base (app / exp 2) n))\n  (env ((□? (base exp n)))))"
  #t
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  primtest
  2
  5
  180
  ref-or-constructor
  "'(eval\n  (app (-> modulo <-) (app square (app modulo-power base (app / exp 2) n)) n)\n  (env ((□? (base exp n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  primtest
  2
  5
  180
  app
  "'(eval (match (-> (app odd? exp) <-) (#f) _) (env ((□? (base exp n)))))"
  #f
  #f)
'(clean-cache
  primtest
  2
  5
  180
  ref-or-constructor
  "'(eval (app odd? (-> exp <-)) (env ((□? (base exp n)))))"
  #f
  #f)
'(clean-cache
  primtest
  2
  5
  180
  ref-or-constructor
  "'(eval (app (-> odd? <-) exp) (env ((□? (base exp n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  primtest
  2
  5
  180
  app
  "'(eval (match (-> (app = exp 0) <-) (#f) _) (env ((□? (base exp n)))))"
  #f
  #f)
'(clean-cache
  primtest
  2
  5
  180
  number
  "'(eval (app = exp (-> 0 <-)) (env ((□? (base exp n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  primtest
  2
  5
  180
  ref-or-constructor
  "'(eval (app = (-> exp <-) 0) (env ((□? (base exp n)))))"
  #f
  #f)
'(clean-cache
  primtest
  2
  5
  180
  ref-or-constructor
  "'(eval (app (-> = <-) exp 0) (env ((□? (base exp n)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  primtest
  2
  5
  180
  lambda
  "'(eval\n  (letrec* (... () (square (-> (λ (x) ...) <-)) modulo-power ...) ...)\n  (env ()))"
  #t
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  primtest
  2
  5
  180
  app
  "'(eval (λ (x) (-> (app * x x) <-)) (env ((□? (x)))))"
  #f
  #f)
'(clean-cache
  primtest
  2
  5
  180
  ref-or-constructor
  "'(eval (app * x (-> x <-)) (env ((□? (x)))))"
  #f
  #f)
'(clean-cache
  primtest
  2
  5
  180
  ref-or-constructor
  "'(eval (app * (-> x <-) x) (env ((□? (x)))))"
  #f
  #f)
'(clean-cache
  primtest
  2
  5
  180
  ref-or-constructor
  "'(eval (app (-> * <-) x x) (env ((□? (x)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  ((0 0 0)))
'(clean-cache
  primtest
  2
  5
  180
  app
  "'(eval\n  (letrec*\n   (square ... byte-size)\n   (-> (app generate-fermat-prime byte-size iterations) <-))\n  (env ()))"
  #f
  #f)
'(clean-cache
  primtest
  2
  5
  180
  ref-or-constructor
  "'(eval (app generate-fermat-prime byte-size (-> iterations <-)) (env ()))"
  #t
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  primtest
  2
  5
  180
  ref-or-constructor
  "'(eval (app generate-fermat-prime (-> byte-size <-) iterations) (env ()))"
  #t
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
'(clean-cache
  primtest
  2
  5
  180
  ref-or-constructor
  "'(eval (app (-> generate-fermat-prime <-) byte-size iterations) (env ()))"
  #t
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  ((0 0 0)))
