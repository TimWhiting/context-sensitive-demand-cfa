'(expression:
  (let ((ack
         (λ (m n)
           (match
            (app = m 0)
            (#t (app + n 1))
            (#f
             (match
              (app = n 0)
              (#t (app ack (app - m 1) 1))
              (#f (app ack (app - m 1) (app ack m (app - n 1))))))))))
    (app ack 3 12)))

(list 'query: '(top) (menv '()))

(list
 (list
  'eval
  '(app + n (-> 1 <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app + (-> n <-) 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app = m (-> 0 <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app = n (-> 0 <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app = (-> m <-) 0)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app = (-> m <-) 0)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app = (-> m <-) 0)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))
      (let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app = (-> n <-) 0)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list 'eval '(app ack 3 (-> 12 <-)) (menv '()))
 (list 'eval '(app ack (-> 3 <-) 12) (menv '()))
 (list
  'eval
  '(app (-> + <-) n 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app (-> = <-) m 0)
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app (-> = <-) m 0)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app (-> = <-) m 0)
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))
      (let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app (-> = <-) n 0)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list 'eval '(app (-> ack <-) 3 12) (menv '()))
 (list
  'eval
  '(app (-> ack <-) (app - m 1) 1)
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list 'eval '(let (ack) (-> (app ack 3 12) <-)) (menv '()))
 (list
  'eval
  '(let ((->
          ack
          =
          (λ (m n)
            (match
             (app = m 0)
             (#t (app + n 1))
             (#f
              (match
               (app = n 0)
               (#t (app ack (app - m 1) 1))
               (#f (app ack (app - m 1) (app ack m (app - n 1))))))))
          <-))
     bod)
  (menv '()))
 (list
  'eval
  '(match
    (-> (app = m 0) <-)
    (#t (app + n 1))
    (#f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))
      (let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(match
    (-> (app = m 0) <-)
    (#t (app + n 1))
    (#f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(match
    (-> (app = m 0) <-)
    (#t (app + n 1))
    (#f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(match
    (-> (app = n 0) <-)
    (#t (app ack (app - m 1) 1))
    (#f (app ack (app - m 1) (app ack m (app - n 1)))))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(match
    (app = m 0)
    (#t (app + n 1))
    (->
     #f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))
     <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(match
    (app = m 0)
    (-> #t (app + n 1) <-)
    (#f
     (match
      (app = n 0)
      (#t (app ack (app - m 1) 1))
      (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(match
    (app = n 0)
    (#t (app ack (app - m 1) 1))
    (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(match
    (app = n 0)
    (-> #t (app ack (app - m 1) 1) <-)
    (#f (app ack (app - m 1) (app ack m (app - n 1)))))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list 'eval '(top) (menv '()))
 (list
  'eval
  '(λ (m n)
     (->
      (match
       (app = m 0)
       (#t (app + n 1))
       (#f
        (match
         (app = n 0)
         (#t (app ack (app - m 1) 1))
         (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
      <-))
  (menv
   '(((match
       (app = n 0)
       (#t (app ack (app - m 1) 1))
       (-> #f (app ack (app - m 1) (app ack m (app - n 1))) <-))
      (let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(λ (m n)
     (->
      (match
       (app = m 0)
       (#t (app + n 1))
       (#f
        (match
         (app = n 0)
         (#t (app ack (app - m 1) 1))
         (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
      <-))
  (menv
   '(((match
       (app = n 0)
       (-> #t (app ack (app - m 1) 1) <-)
       (#f (app ack (app - m 1) (app ack m (app - n 1)))))
      (let (ack) (-> (app ack 3 12) <-))))))
 (list
  'eval
  '(λ (m n)
     (->
      (match
       (app = m 0)
       (#t (app + n 1))
       (#f
        (match
         (app = n 0)
         (#t (app ack (app - m 1) 1))
         (#f (app ack (app - m 1) (app ack m (app - n 1)))))))
      <-))
  (menv '(((let (ack) (-> (app ack 3 12) <-))))))
 (list 'expr '(app (-> ack <-) 3 12) (menv '()))
 (list 'expr '(app (-> ack <-) m (app - n 1)) (menv '((□? (m n)))))
 (list
  'expr
  '(app (-> ack <-) (app - m 1) (app ack m (app - n 1)))
  (menv '((□? (m n)))))
 (list 'expr '(app (-> ack <-) (app - m 1) 1) (menv '((□? (m n)))))
 (list
  'expr
  '(let ((->
          ack
          =
          (λ (m n)
            (match
             (app = m 0)
             (#t (app + n 1))
             (#f
              (match
               (app = n 0)
               (#t (app ack (app - m 1) 1))
               (#f (app ack (app - m 1) (app ack m (app - n 1))))))))
          <-))
     bod)
  (menv '()))
 (list 'refine (menv '((□? (m n))))))
38

