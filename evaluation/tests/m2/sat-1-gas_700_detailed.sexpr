'(clean-cache
  sat-1
  2
  700
  94
  letrec*
  "'(eval ((top) letrec* (phi ... sat-solve-4) ...) (env ()))"
  #f
  511
  410
  62
  39
  250
  26
  276
  1
  86491/102080
  269
  #f
  629/410
  (153 158 2))
'(clean-cache
  sat-1
  2
  700
  94
  lambda
  "'(eval\n  (letrec* (... try (sat-solve-4 (-> (λ (p) ...) <-)) () ...) ...)\n  (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-1
  2
  700
  94
  app
  "'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env ((□? (p)))))"
  #f
  516
  414
  62
  40
  247
  26
  273
  1
  985257/1199440
  272
  #f
  635/414
  (153 157 3))
'(clean-cache
  sat-1
  2
  700
  94
  lambda
  "'(eval (app try (-> (λ (n1) ...) <-)) (env ((□? (p)))))"
  (lambda number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-1
  2
  700
  94
  app
  "'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env ((□? (n1)) (□? (p)))))"
  #f
  478
  377
  62
  39
  208
  26
  234
  1
  29922/36685
  250
  #f
  573/377
  (148 152 2))
'(clean-cache
  sat-1
  2
  700
  94
  lambda
  "'(eval (app try (-> (λ (n2) ...) <-)) (env ((□? (n1)) (□? (p)))))"
  (lambda number char string quoted constructor)
  3
  1
  0
  2
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-1
  2
  700
  94
  app
  "'(eval\n  (λ (n2) (-> (app try (λ (n3) ...)) <-))\n  (env ((□? (n2)) (□? (n1)) (□? (p)))))"
  #f
  442
  341
  62
  39
  180
  26
  206
  1
  31817/39150
  230
  #f
  502/341
  (142 146 2))
'(clean-cache
  sat-1
  2
  700
  94
  lambda
  "'(eval (app try (-> (λ (n3) ...) <-)) (env ((□? (n2)) (□? (n1)) (□? (p)))))"
  (lambda number char string quoted constructor)
  4
  1
  0
  3
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-1
  2
  700
  94
  app
  "'(eval\n  (λ (n3) (-> (app try (λ (n4) ...)) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))"
  #f
  402
  301
  62
  39
  156
  26
  182
  1
  1867/2520
  210
  #f
  59/43
  (123 126 2))
'(clean-cache
  sat-1
  2
  700
  94
  lambda
  "'(eval\n  (app try (-> (λ (n4) ...) <-))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))"
  (lambda number char string quoted constructor)
  5
  1
  0
  4
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-1
  2
  700
  94
  app
  "'(eval\n  (λ (n4) (-> (app p n1 n2 n3 n4) <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))"
  #f
  381
  283
  57
  41
  154
  25
  179
  1
  3164/4995
  193
  #f
  373/283
  (102 105 2))
'(clean-cache
  sat-1
  2
  700
  94
  ref-or-constructor
  "'(eval\n  (app p n1 n2 n3 (-> n4 <-))\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))"
  #f
  16
  7
  3
  6
  1
  0
  1
  1
  1/7
  6
  #f
  8/7
  (1 1 0))
'(clean-cache
  sat-1
  2
  700
  94
  ref-or-constructor
  "'(eval\n  (app p n1 n2 (-> n3 <-) n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))"
  #f
  16
  7
  3
  6
  1
  0
  1
  1
  1/7
  6
  #f
  8/7
  (1 1 0))
'(clean-cache
  sat-1
  2
  700
  94
  ref-or-constructor
  "'(eval\n  (app p n1 (-> n2 <-) n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))"
  #f
  16
  7
  3
  6
  1
  0
  1
  1
  1/7
  6
  #f
  8/7
  (0 0 0))
'(clean-cache
  sat-1
  2
  700
  94
  ref-or-constructor
  "'(eval\n  (app p (-> n1 <-) n2 n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))"
  #f
  16
  7
  3
  6
  1
  0
  1
  1
  1/7
  6
  #f
  8/7
  (0 0 0))
'(clean-cache
  sat-1
  2
  700
  94
  ref-or-constructor
  "'(eval\n  (app (-> p <-) n1 n2 n3 n4)\n  (env ((□? (n4)) (□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))"
  #f
  10
  3
  2
  5
  2
  2
  4
  1
  2/3
  3
  #t
  1
  (0 0 0))
'(clean-cache
  sat-1
  2
  700
  94
  ref-or-constructor
  "'(eval\n  (app (-> try <-) (λ (n4) ...))\n  (env ((□? (n3)) (□? (n2)) (□? (n1)) (□? (p)))))"
  (lambda number char string quoted constructor)
  6
  2
  0
  4
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  sat-1
  2
  700
  94
  ref-or-constructor
  "'(eval (app (-> try <-) (λ (n3) ...)) (env ((□? (n2)) (□? (n1)) (□? (p)))))"
  (lambda number char string quoted constructor)
  5
  2
  0
  3
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  sat-1
  2
  700
  94
  ref-or-constructor
  "'(eval (app (-> try <-) (λ (n2) ...)) (env ((□? (n1)) (□? (p)))))"
  (lambda number char string quoted constructor)
  4
  2
  0
  2
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  sat-1
  2
  700
  94
  ref-or-constructor
  "'(eval (app (-> try <-) (λ (n1) ...)) (env ((□? (p)))))"
  (lambda number char string quoted constructor)
  3
  2
  0
  1
  1
  0
  1
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  sat-1
  2
  700
  94
  lambda
  "'(eval\n  (letrec* (... phi (try (-> (λ (f) ...) <-)) sat-solve-4 ...) ...)\n  (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-1
  2
  700
  94
  match
  "'(eval (λ (f) (-> (match (app f (app #t ...)) ...) <-)) (env ((□? (f)))))"
  #f
  643
  505
  62
  76
  246
  26
  272
  1
  1109861/1396395
  335
  #f
  797/505
  (269 277 4))
'(clean-cache
  sat-1
  2
  700
  94
  app
  "'(eval (match (app f (app #t)) (#f) (_ (-> (app #t) <-))) (env ((□? (f)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  sat-1
  2
  700
  94
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (f)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-1
  2
  700
  94
  match
  "'(eval\n  (match (app f (app #t)) ((#f) (-> (match (app f (app #f ...)) ...) <-)) _)\n  (env ((□? (f)))))"
  #f
  605
  467
  62
  76
  228
  26
  254
  1
  53854/66495
  313
  #f
  722/467
  (237 243 4))
'(clean-cache
  sat-1
  2
  700
  94
  app
  "'(eval (match (app f (app #f)) (#f) (_ (-> (app #t) <-))) (env ((□? (f)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  sat-1
  2
  700
  94
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (f)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-1
  2
  700
  94
  app
  "'(eval (match (app f (app #f)) ((#f) (-> (app #f) <-)) _) (env ((□? (f)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  sat-1
  2
  700
  94
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (f)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-1
  2
  700
  94
  app
  "'(eval (match (-> (app f (app #f)) <-) (#f) _) (env ((□? (f)))))"
  #f
  577
  439
  62
  76
  223
  26
  249
  1
  18467/22165
  291
  #f
  688/439
  (228 234 4))
'(clean-cache
  sat-1
  2
  700
  94
  app
  "'(eval (app f (-> (app #f) <-)) (env ((□? (f)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  sat-1
  2
  700
  94
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (f)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-1
  2
  700
  94
  ref-or-constructor
  "'(eval (app (-> f <-) (app #f)) (env ((□? (f)))))"
  #f
  15
  5
  5
  5
  0
  1
  1
  1
  0
  4
  #f
  8/5
  (1 1 0))
'(clean-cache
  sat-1
  2
  700
  94
  app
  "'(eval (match (-> (app f (app #t)) <-) (#f) _) (env ((□? (f)))))"
  #f
  577
  439
  62
  76
  223
  26
  249
  1
  18467/22165
  291
  #f
  688/439
  (225 231 4))
'(clean-cache
  sat-1
  2
  700
  94
  app
  "'(eval (app f (-> (app #t) <-)) (env ((□? (f)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  sat-1
  2
  700
  94
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (f)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-1
  2
  700
  94
  ref-or-constructor
  "'(eval (app (-> f <-) (app #t)) (env ((□? (f)))))"
  #f
  15
  5
  5
  5
  0
  1
  1
  1
  0
  4
  #f
  8/5
  (1 1 0))
'(clean-cache
  sat-1
  2
  700
  94
  lambda
  "'(eval\n  (letrec* (... () (phi (-> (λ (x1 x2 x3 x4) ...) <-)) try ...) ...)\n  (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-1
  2
  700
  94
  match
  "'(eval\n  (λ (x1 x2 x3 x4) (-> (match (match x1 ...) ...) <-))\n  (env ((□? (x1 x2 x3 x4)))))"
  #f
  357
  265
  55
  37
  152
  23
  175
  1
  3389/4725
  176
  #f
  354/265
  (87 90 1))
'(clean-cache
  sat-1
  2
  700
  94
  match
  "'(eval\n  (match (match x1 ...) (#f) (_ (-> (match (match (app not ...) ...) ...) <-)))\n  (env ((□? (x1 x2 x3 x4)))))"
  #f
  210
  161
  30
  19
  83
  10
  93
  1
  205/329
  108
  #f
  214/161
  (36 37 0))
'(clean-cache
  sat-1
  2
  700
  94
  match
  "'(eval\n  (match (match (app not x2) ...) (#f) (_ (-> (match (match x4 ...) ...) <-)))\n  (env ((□? (x1 x2 x3 x4)))))"
  #f
  95
  72
  11
  12
  31
  2
  33
  1
  6/13
  50
  #f
  47/36
  (11 12 0))
'(clean-cache
  sat-1
  2
  700
  94
  app
  "'(eval\n  (match (match x4 ...) (#f) (_ (-> (app #t) <-)))\n  (env ((□? (x1 x2 x3 x4)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  sat-1
  2
  700
  94
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (x1 x2 x3 x4)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-1
  2
  700
  94
  app
  "'(eval\n  (match (match x4 ...) ((#f) (-> (app #f) <-)) _)\n  (env ((□? (x1 x2 x3 x4)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  sat-1
  2
  700
  94
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (x1 x2 x3 x4)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-1
  2
  700
  94
  match
  "'(eval (match (-> (match x4 ...) <-) (#f) _) (env ((□? (x1 x2 x3 x4)))))"
  #f
  77
  54
  11
  12
  21
  2
  23
  1
  55/126
  36
  #f
  4/3
  (10 11 0))
'(clean-cache
  sat-1
  2
  700
  94
  app
  "'(eval (match x4 (#f) (_ (-> (app #t) <-))) (env ((□? (x1 x2 x3 x4)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  sat-1
  2
  700
  94
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (x1 x2 x3 x4)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-1
  2
  700
  94
  match
  "'(eval (match x4 ((#f) (-> (match x2 ...) <-)) _) (env ((□? (x1 x2 x3 x4)))))"
  #f
  37
  20
  6
  11
  3
  2
  5
  1
  1/5
  16
  #f
  6/5
  (2 2 0))
'(clean-cache
  sat-1
  2
  700
  94
  app
  "'(eval (match x2 (#f) (_ (-> (app #t) <-))) (env ((□? (x1 x2 x3 x4)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  sat-1
  2
  700
  94
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (x1 x2 x3 x4)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-1
  2
  700
  94
  app
  "'(eval (match x2 ((#f) (-> (app #f) <-)) _) (env ((□? (x1 x2 x3 x4)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  sat-1
  2
  700
  94
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (x1 x2 x3 x4)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-1
  2
  700
  94
  ref-or-constructor
  "'(eval (match (-> x2 <-) (#f) _) (env ((□? (x1 x2 x3 x4)))))"
  #f
  28
  12
  6
  10
  3
  2
  5
  1
  3/10
  10
  #f
  7/6
  (2 2 0))
'(clean-cache
  sat-1
  2
  700
  94
  ref-or-constructor
  "'(eval (match (-> x4 <-) (#f) _) (env ((□? (x1 x2 x3 x4)))))"
  #f
  25
  12
  6
  7
  3
  2
  5
  1
  3/10
  10
  #f
  7/6
  (2 3 0))
'(clean-cache
  sat-1
  2
  700
  94
  app
  "'(eval\n  (match (match (app not x2) ...) ((#f) (-> (app #f) <-)) _)\n  (env ((□? (x1 x2 x3 x4)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  sat-1
  2
  700
  94
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (x1 x2 x3 x4)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-1
  2
  700
  94
  match
  "'(eval\n  (match (-> (match (app not x2) ...) <-) (#f) _)\n  (env ((□? (x1 x2 x3 x4)))))"
  #f
  83
  54
  15
  14
  13
  6
  19
  1
  7/27
  39
  #f
  23/18
  (9 9 0))
'(clean-cache
  sat-1
  2
  700
  94
  app
  "'(eval\n  (match (app not x2) (#f) (_ (-> (app #t) <-)))\n  (env ((□? (x1 x2 x3 x4)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  sat-1
  2
  700
  94
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (x1 x2 x3 x4)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-1
  2
  700
  94
  match
  "'(eval\n  (match (app not x2) ((#f) (-> (match (app not x3) ...) <-)) _)\n  (env ((□? (x1 x2 x3 x4)))))"
  #f
  41
  26
  6
  9
  5
  2
  7
  1
  5/19
  20
  #f
  16/13
  (3 3 0))
'(clean-cache
  sat-1
  2
  700
  94
  app
  "'(eval\n  (match (app not x3) (#f) (_ (-> (app #t) <-)))\n  (env ((□? (x1 x2 x3 x4)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  sat-1
  2
  700
  94
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (x1 x2 x3 x4)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-1
  2
  700
  94
  app
  "'(eval\n  (match (app not x3) ((#f) (-> (app #f) <-)) _)\n  (env ((□? (x1 x2 x3 x4)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  sat-1
  2
  700
  94
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (x1 x2 x3 x4)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-1
  2
  700
  94
  app
  "'(eval (match (-> (app not x3) <-) (#f) _) (env ((□? (x1 x2 x3 x4)))))"
  #f
  33
  18
  6
  9
  5
  2
  7
  1
  5/14
  14
  #f
  11/9
  (2 3 0))
'(clean-cache
  sat-1
  2
  700
  94
  ref-or-constructor
  "'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4)))))"
  #f
  26
  12
  6
  8
  3
  2
  5
  1
  3/10
  10
  #f
  7/6
  (2 2 0))
'(clean-cache
  sat-1
  2
  700
  94
  ref-or-constructor
  "'(eval (app (-> not <-) x3) (env ((□? (x1 x2 x3 x4)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-1
  2
  700
  94
  app
  "'(eval (match (-> (app not x2) <-) (#f) _) (env ((□? (x1 x2 x3 x4)))))"
  #f
  35
  18
  6
  11
  5
  2
  7
  1
  5/14
  14
  #f
  11/9
  (3 3 0))
'(clean-cache
  sat-1
  2
  700
  94
  ref-or-constructor
  "'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))"
  #f
  28
  12
  6
  10
  3
  2
  5
  1
  3/10
  10
  #f
  7/6
  (2 2 0))
'(clean-cache
  sat-1
  2
  700
  94
  ref-or-constructor
  "'(eval (app (-> not <-) x2) (env ((□? (x1 x2 x3 x4)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-1
  2
  700
  94
  app
  "'(eval\n  (match (match x1 ...) ((#f) (-> (app #f) <-)) _)\n  (env ((□? (x1 x2 x3 x4)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  sat-1
  2
  700
  94
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (x1 x2 x3 x4)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-1
  2
  700
  94
  match
  "'(eval (match (-> (match x1 ...) <-) (#f) _) (env ((□? (x1 x2 x3 x4)))))"
  #f
  142
  88
  30
  24
  32
  19
  51
  1
  628/2079
  63
  #f
  113/88
  (26 27 0))
'(clean-cache
  sat-1
  2
  700
  94
  app
  "'(eval (match x1 (#f) (_ (-> (app #t) <-))) (env ((□? (x1 x2 x3 x4)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  sat-1
  2
  700
  94
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (x1 x2 x3 x4)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-1
  2
  700
  94
  match
  "'(eval\n  (match x1 ((#f) (-> (match (app not x2) ...) <-)) _)\n  (env ((□? (x1 x2 x3 x4)))))"
  #f
  83
  54
  15
  14
  13
  6
  19
  1
  7/27
  39
  #f
  23/18
  (9 9 0))
'(clean-cache
  sat-1
  2
  700
  94
  app
  "'(eval\n  (match (app not x2) (#f) (_ (-> (app #t) <-)))\n  (env ((□? (x1 x2 x3 x4)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  sat-1
  2
  700
  94
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (x1 x2 x3 x4)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-1
  2
  700
  94
  match
  "'(eval\n  (match (app not x2) ((#f) (-> (match (app not x3) ...) <-)) _)\n  (env ((□? (x1 x2 x3 x4)))))"
  #f
  41
  26
  6
  9
  5
  2
  7
  1
  5/19
  20
  #f
  16/13
  (2 3 0))
'(clean-cache
  sat-1
  2
  700
  94
  app
  "'(eval\n  (match (app not x3) (#f) (_ (-> (app #t) <-)))\n  (env ((□? (x1 x2 x3 x4)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  sat-1
  2
  700
  94
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (x1 x2 x3 x4)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-1
  2
  700
  94
  app
  "'(eval\n  (match (app not x3) ((#f) (-> (app #f) <-)) _)\n  (env ((□? (x1 x2 x3 x4)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  sat-1
  2
  700
  94
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (x1 x2 x3 x4)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-1
  2
  700
  94
  app
  "'(eval (match (-> (app not x3) <-) (#f) _) (env ((□? (x1 x2 x3 x4)))))"
  #f
  33
  18
  6
  9
  5
  2
  7
  1
  5/14
  14
  #f
  11/9
  (2 2 0))
'(clean-cache
  sat-1
  2
  700
  94
  ref-or-constructor
  "'(eval (app not (-> x3 <-)) (env ((□? (x1 x2 x3 x4)))))"
  #f
  26
  12
  6
  8
  3
  2
  5
  1
  3/10
  10
  #f
  7/6
  (2 2 0))
'(clean-cache
  sat-1
  2
  700
  94
  ref-or-constructor
  "'(eval (app (-> not <-) x3) (env ((□? (x1 x2 x3 x4)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-1
  2
  700
  94
  app
  "'(eval (match (-> (app not x2) <-) (#f) _) (env ((□? (x1 x2 x3 x4)))))"
  #f
  35
  18
  6
  11
  5
  2
  7
  1
  5/14
  14
  #f
  11/9
  (2 2 0))
'(clean-cache
  sat-1
  2
  700
  94
  ref-or-constructor
  "'(eval (app not (-> x2 <-)) (env ((□? (x1 x2 x3 x4)))))"
  #f
  28
  12
  6
  10
  3
  2
  5
  1
  3/10
  10
  #f
  7/6
  (1 1 0))
'(clean-cache
  sat-1
  2
  700
  94
  ref-or-constructor
  "'(eval (app (-> not <-) x2) (env ((□? (x1 x2 x3 x4)))))"
  #t
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  sat-1
  2
  700
  94
  ref-or-constructor
  "'(eval (match (-> x1 <-) (#f) _) (env ((□? (x1 x2 x3 x4)))))"
  #f
  29
  12
  6
  11
  8
  5
  13
  1
  4/5
  10
  #f
  7/6
  (1 1 0))
'(clean-cache
  sat-1
  2
  700
  94
  app
  "'(eval (letrec* (phi ... sat-solve-4) (-> (app sat-solve-4 phi) <-)) (env ()))"
  #f
  510
  409
  62
  39
  249
  26
  275
  1
  256283/303050
  269
  #f
  627/409
  (148 152 2))
'(clean-cache
  sat-1
  2
  700
  94
  ref-or-constructor
  "'(eval (app sat-solve-4 (-> phi <-)) (env ()))"
  (lambda number char string quoted constructor)
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
'(clean-cache
  sat-1
  2
  700
  94
  ref-or-constructor
  "'(eval (app (-> sat-solve-4 <-) phi) (env ()))"
  (lambda number char string quoted constructor)
  2
  2
  0
  0
  2
  0
  2
  1
  1
  2
  #t
  1
  (0 0 0))
