'(clean-cache
  kcfa-2
  2
  1000
  32
  app
  "'(eval ((top) app (λ (f1) ...) (λ (x1) ...)) (env ()))"
  #f
  29
  21
  8
  0
  21
  8
  29
  1
  1
  21
  #t
  1
  (1 1 0))
'(clean-cache
  kcfa-2
  2
  1000
  32
  lambda
  "'(eval (app (λ (f1) ...) (-> (λ (x1) ...) <-)) (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa-2
  2
  1000
  32
  app
  "'(eval (λ (x1) (-> (app (λ (f2) ...) (λ (x2) ...)) <-)) (env ((□? (x1)))))"
  #f
  73
  54
  15
  4
  31
  11
  42
  1
  3821/5670
  43
  #f
  77/54
  (12 12 0))
'(clean-cache
  kcfa-2
  2
  1000
  32
  lambda
  "'(eval (app (λ (f2) ...) (-> (λ (x2) ...) <-)) (env ((□? (x1)))))"
  (lambda number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa-2
  2
  1000
  32
  app
  "'(eval\n  (λ (x2) (-> (app (λ (z) ...) (λ (y1 y2) ...)) <-))\n  (env ((□? (x2)) (□? (x1)))))"
  #f
  43
  24
  12
  7
  5
  3
  8
  1
  5/12
  20
  #f
  17/12
  (7 8 0))
'(clean-cache
  kcfa-2
  2
  1000
  32
  lambda
  "'(eval (app (λ (z) ...) (-> (λ (y1 y2) ...) <-)) (env ((□? (x2)) (□? (x1)))))"
  (lambda number char string quoted constructor)
  3
  1
  0
  2
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa-2
  2
  1000
  32
  ref-or-constructor
  "'(eval (λ (y1 y2) (-> y1 <-)) (env ((□? (y1 y2)) (□? (x2)) (□? (x1)))))"
  #f
  31
  12
  9
  10
  5
  3
  8
  1
  5/8
  10
  #f
  4/3
  (2 3 0))
'(clean-cache
  kcfa-2
  2
  1000
  32
  lambda
  "'(eval (app (-> (λ (z) ...) <-) (λ (y1 y2) ...)) (env ((□? (x2)) (□? (x1)))))"
  (lambda number char string quoted constructor)
  3
  1
  0
  2
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa-2
  2
  1000
  32
  app
  "'(eval (λ (z) (-> (app z x1 x2) <-)) (env ((□? (z)) (□? (x2)) (□? (x1)))))"
  #f
  50
  25
  12
  13
  5
  3
  8
  1
  5/11
  21
  #f
  37/25
  (7 7 0))
'(clean-cache
  kcfa-2
  2
  1000
  32
  ref-or-constructor
  "'(eval (app z x1 (-> x2 <-)) (env ((□? (z)) (□? (x2)) (□? (x1)))))"
  #f
  13
  6
  3
  4
  0
  0
  0
  1
  0
  5
  #f
  7/6
  (1 1 0))
'(clean-cache
  kcfa-2
  2
  1000
  32
  ref-or-constructor
  "'(eval (app z (-> x1 <-) x2) (env ((□? (z)) (□? (x2)) (□? (x1)))))"
  #f
  12
  6
  3
  3
  5
  3
  8
  1
  5/6
  5
  #f
  7/6
  (0 0 0))
'(clean-cache
  kcfa-2
  2
  1000
  32
  ref-or-constructor
  "'(eval (app (-> z <-) x1 x2) (env ((□? (z)) (□? (x2)) (□? (x1)))))"
  #f
  6
  2
  1
  3
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa-2
  2
  1000
  32
  lambda
  "'(eval (app (-> (λ (f2) ...) <-) (λ (x2) ...)) (env ((□? (x1)))))"
  (lambda number char string quoted constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa-2
  2
  1000
  32
  let
  "'(eval (λ (f2) (-> (let (_) ...) <-)) (env ((□? (f2)) (□? (x1)))))"
  #f
  103
  69
  24
  10
  25
  11
  36
  1
  25/48
  54
  #f
  34/23
  (20 21 0))
'(clean-cache
  kcfa-2
  2
  1000
  32
  app
  "'(eval\n  (let (... () (_ (-> (app f2 (app #t)) <-)) () ...) ...)\n  (env ((□? (f2)) (□? (x1)))))"
  #f
  91
  57
  24
  10
  21
  11
  32
  1
  8/15
  48
  #f
  88/57
  (18 18 0))
'(clean-cache
  kcfa-2
  2
  1000
  32
  app
  "'(eval (app f2 (-> (app #t) <-)) (env ((□? (f2)) (□? (x1)))))"
  #f
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa-2
  2
  1000
  32
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (f2)) (□? (x1)))))"
  (constructor)
  3
  1
  0
  2
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa-2
  2
  1000
  32
  ref-or-constructor
  "'(eval (app (-> f2 <-) (app #t)) (env ((□? (f2)) (□? (x1)))))"
  #f
  5
  2
  1
  2
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa-2
  2
  1000
  32
  app
  "'(eval (let (_) (-> (app f2 (app #f)) <-)) (env ((□? (f2)) (□? (x1)))))"
  #f
  91
  57
  24
  10
  21
  11
  32
  1
  8/15
  48
  #f
  88/57
  (18 19 0))
'(clean-cache
  kcfa-2
  2
  1000
  32
  app
  "'(eval (app f2 (-> (app #f) <-)) (env ((□? (f2)) (□? (x1)))))"
  #f
  4
  2
  0
  2
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa-2
  2
  1000
  32
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (f2)) (□? (x1)))))"
  (constructor)
  3
  1
  0
  2
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa-2
  2
  1000
  32
  ref-or-constructor
  "'(eval (app (-> f2 <-) (app #f)) (env ((□? (f2)) (□? (x1)))))"
  #f
  5
  2
  1
  2
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa-2
  2
  1000
  32
  lambda
  "'(eval (app (-> (λ (f1) ...) <-) (λ (x1) ...)) (env ()))"
  (lambda number char string quoted constructor)
  1
  1
  0
  0
  1
  0
  1
  1
  1
  1
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa-2
  2
  1000
  32
  let
  "'(eval (λ (f1) (-> (let (_) ...) <-)) (env ((□? (f1)))))"
  #f
  49
  35
  12
  2
  19
  8
  27
  1
  23/40
  35
  #t
  41/35
  (5 5 0))
'(clean-cache
  kcfa-2
  2
  1000
  32
  app
  "'(eval\n  (let (... () (_ (-> (app f1 (app #t)) <-)) () ...) ...)\n  (env ((□? (f1)))))"
  #f
  47
  33
  12
  2
  18
  8
  26
  1
  11/19
  33
  #t
  13/11
  (7 8 0))
'(clean-cache
  kcfa-2
  2
  1000
  32
  app
  "'(eval (app f1 (-> (app #t) <-)) (env ((□? (f1)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa-2
  2
  1000
  32
  constructor
  "'(eval (app (-> #t <-)) (env ((□? (f1)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa-2
  2
  1000
  32
  ref-or-constructor
  "'(eval (app (-> f1 <-) (app #t)) (env ((□? (f1)))))"
  #f
  4
  2
  1
  1
  1
  1
  2
  1
  1/2
  2
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa-2
  2
  1000
  32
  app
  "'(eval (let (_) (-> (app f1 (app #f)) <-)) (env ((□? (f1)))))"
  #f
  47
  33
  12
  2
  18
  8
  26
  1
  11/19
  33
  #t
  13/11
  (6 6 0))
'(clean-cache
  kcfa-2
  2
  1000
  32
  app
  "'(eval (app f1 (-> (app #f) <-)) (env ((□? (f1)))))"
  #f
  3
  2
  0
  1
  0
  0
  0
  1
  0
  2
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa-2
  2
  1000
  32
  constructor
  "'(eval (app (-> #f <-)) (env ((□? (f1)))))"
  (constructor)
  2
  1
  0
  1
  0
  0
  0
  1
  0
  1
  #t
  1
  (0 0 0))
'(clean-cache
  kcfa-2
  2
  1000
  32
  ref-or-constructor
  "'(eval (app (-> f1 <-) (app #f)) (env ((□? (f1)))))"
  #f
  4
  2
  1
  1
  1
  1
  2
  1
  1/2
  2
  #t
  1
  (0 0 0))
