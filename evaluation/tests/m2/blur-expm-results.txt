'(expression:
  (letrec ((id (λ (x) x))
           (blur (λ (y) y))
           (lp
            (λ (a n)
              (match
               (app <= n 1)
               ((#t) (app id a))
               ((#f)
                (let* ((r (app (app blur id) (app #t)))
                       (s (app (app blur id) (app #f))))
                  (app not (app (app blur lp) s (app - n 1)))))))))
    (app lp (app #f) 2)))
(list
 'query:
 '(app (-> (app blur id) <-) (app #t))
 (expenv
  '((((let-bod
       letrec
       ((id (λ (x) x))
        (blur (λ (y) y))
        (lp
         (λ (a n)
           (match
            (app <= n 1)
            ((#t) (app id a))
            ((#f)
             (let* ((r (app (app blur id) (app #t)))
                    (s (app (app blur id) (app #f))))
               (app not (app (app blur lp) s (app - n 1)))))))))
       (top))
      app
      lp
      (app #f)
      2)))))
(list 'clos/con: (list (list '(λ (x) x) (expenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(letrec ((-> id = (λ (x) x) <-) blur lp) bod) (expenv '()))
(list 'clos/con: (list (list '(λ (x) x) (expenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(let* ((-> r = (app (app blur id) (app #t)) <-) s) bod)
 (expenv
  '((((let-bod
       letrec
       ((id (λ (x) x))
        (blur (λ (y) y))
        (lp
         (λ (a n)
           (match
            (app <= n 1)
            ((#t) (app id a))
            ((#f)
             (let* ((r (app (app blur id) (app #t)))
                    (s (app (app blur id) (app #f))))
               (app not (app (app blur lp) s (app - n 1)))))))))
       (top))
      app
      lp
      (app #f)
      2)))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (expenv '(((letrec (id blur lp) (-> (app lp (app #f) 2) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (y) (-> y <-))
 (expenv
  '((((rat
       ((app #f))
       (bin
        let*
        s
        (app not (app (app blur lp) s (app - n 1)))
        ((r (app (app blur id) (app #t))))
        ()
        (match-clause
         (#f)
         (app <= n 1)
         (((#t) (app id a)))
         ()
         (bod
          (a n)
          (bin
           letrec
           lp
           (app lp (app #f) 2)
           ((id (λ (x) x)) (blur (λ (y) y)))
           ()
           (top))))))
      app
      blur
      id)
     ((let-bod
       letrec
       ((id (λ (x) x))
        (blur (λ (y) y))
        (lp
         (λ (a n)
           (match
            (app <= n 1)
            ((#t) (app id a))
            ((#f)
             (let* ((r (app (app blur id) (app #t)))
                    (s (app (app blur id) (app #f))))
               (app not (app (app blur lp) s (app - n 1)))))))))
       (top))
      app
      lp
      (app #f)
      2)))))
(list 'clos/con: (list (list '(λ (x) x) (expenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (y) (-> y <-))
 (expenv
  '((((rat
       ((app #f))
       (bin
        let*
        s
        (app not (app (app blur lp) s (app - n 1)))
        ((r (app (app blur id) (app #t))))
        ()
        (match-clause
         (#f)
         (app <= n 1)
         (((#t) (app id a)))
         ()
         (bod
          (a n)
          (bin
           letrec
           lp
           (app lp (app #f) 2)
           ((id (λ (x) x)) (blur (λ (y) y)))
           ()
           (top))))))
      app
      blur
      id)
     ((ran
       not
       ()
       ()
       (let-bod
        let*
        ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
        (match-clause
         (#f)
         (app <= n 1)
         (((#t) (app id a)))
         ()
         (bod
          (a n)
          (bin
           letrec
           lp
           (app lp (app #f) 2)
           ((id (λ (x) x)) (blur (λ (y) y)))
           ()
           (top))))))
      app
      (app blur lp)
      s
      (app - n 1))))))
(list 'clos/con: (list (list '(λ (x) x) (expenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(let* ((-> r = (app (app blur id) (app #t)) <-) s) bod)
 (expenv
  '((((ran
       not
       ()
       ()
       (let-bod
        let*
        ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
        (match-clause
         (#f)
         (app <= n 1)
         (((#t) (app id a)))
         ()
         (bod
          (a n)
          (bin
           letrec
           lp
           (app lp (app #f) 2)
           ((id (λ (x) x)) (blur (λ (y) y)))
           ()
           (top))))))
      app
      (app blur lp)
      s
      (app - n 1))
     ((let-bod
       letrec
       ((id (λ (x) x))
        (blur (λ (y) y))
        (lp
         (λ (a n)
           (match
            (app <= n 1)
            ((#t) (app id a))
            ((#f)
             (let* ((r (app (app blur id) (app #t)))
                    (s (app (app blur id) (app #f))))
               (app not (app (app blur lp) s (app - n 1)))))))))
       (top))
      app
      lp
      (app #f)
      2)))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (expenv
    '(((app not (-> (app (app blur lp) s (app - n 1)) <-))
       (letrec (id blur lp) (-> (app lp (app #f) 2) <-))))))
  (list
   '(#t ())
   (expenv
    '(((app not (-> (app (app blur lp) s (app - n 1)) <-))
       (app not (-> (app (app blur lp) s (app - n 1)) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(let* ((-> r = (app (app blur id) (app #t)) <-) s) bod)
 (expenv
  '((((ran
       not
       ()
       ()
       (let-bod
        let*
        ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
        (match-clause
         (#f)
         (app <= n 1)
         (((#t) (app id a)))
         ()
         (bod
          (a n)
          (bin
           letrec
           lp
           (app lp (app #f) 2)
           ((id (λ (x) x)) (blur (λ (y) y)))
           ()
           (top))))))
      app
      (app blur lp)
      s
      (app - n 1))
     ((ran
       not
       ()
       ()
       (let-bod
        let*
        ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
        (match-clause
         (#f)
         (app <= n 1)
         (((#t) (app id a)))
         ()
         (bod
          (a n)
          (bin
           letrec
           lp
           (app lp (app #f) 2)
           ((id (λ (x) x)) (blur (λ (y) y)))
           ()
           (top))))))
      app
      (app blur lp)
      s
      (app - n 1))))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (expenv
    '(((app not (-> (app (app blur lp) s (app - n 1)) <-))
       (letrec (id blur lp) (-> (app lp (app #f) 2) <-))))))
  (list
   '(#t ())
   (expenv
    '(((app not (-> (app (app blur lp) s (app - n 1)) <-))
       (app not (-> (app (app blur lp) s (app - n 1)) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (app blur id) (-> (app #f) <-))
 (expenv
  '((((ran
       not
       ()
       ()
       (let-bod
        let*
        ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
        (match-clause
         (#f)
         (app <= n 1)
         (((#t) (app id a)))
         ()
         (bod
          (a n)
          (bin
           letrec
           lp
           (app lp (app #f) 2)
           ((id (λ (x) x)) (blur (λ (y) y)))
           ()
           (top))))))
      app
      (app blur lp)
      s
      (app - n 1))
     ((let-bod
       letrec
       ((id (λ (x) x))
        (blur (λ (y) y))
        (lp
         (λ (a n)
           (match
            (app <= n 1)
            ((#t) (app id a))
            ((#f)
             (let* ((r (app (app blur id) (app #t)))
                    (s (app (app blur id) (app #f))))
               (app not (app (app blur lp) s (app - n 1)))))))))
       (top))
      app
      lp
      (app #f)
      2)))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (expenv
    '(((app not (-> (app (app blur lp) s (app - n 1)) <-))
       (letrec (id blur lp) (-> (app lp (app #f) 2) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (app blur id) (-> (app #f) <-))
 (expenv
  '((((ran
       not
       ()
       ()
       (let-bod
        let*
        ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
        (match-clause
         (#f)
         (app <= n 1)
         (((#t) (app id a)))
         ()
         (bod
          (a n)
          (bin
           letrec
           lp
           (app lp (app #f) 2)
           ((id (λ (x) x)) (blur (λ (y) y)))
           ()
           (top))))))
      app
      (app blur lp)
      s
      (app - n 1))
     ((ran
       not
       ()
       ()
       (let-bod
        let*
        ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
        (match-clause
         (#f)
         (app <= n 1)
         (((#t) (app id a)))
         ()
         (bod
          (a n)
          (bin
           letrec
           lp
           (app lp (app #f) 2)
           ((id (λ (x) x)) (blur (λ (y) y)))
           ()
           (top))))))
      app
      (app blur lp)
      s
      (app - n 1))))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (expenv
    '(((app not (-> (app (app blur lp) s (app - n 1)) <-))
       (app not (-> (app (app blur lp) s (app - n 1)) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> (app blur lp) <-) s (app - n 1))
 (expenv
  '((((ran
       not
       ()
       ()
       (let-bod
        let*
        ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
        (match-clause
         (#f)
         (app <= n 1)
         (((#t) (app id a)))
         ()
         (bod
          (a n)
          (bin
           letrec
           lp
           (app lp (app #f) 2)
           ((id (λ (x) x)) (blur (λ (y) y)))
           ()
           (top))))))
      app
      (app blur lp)
      s
      (app - n 1))
     ((let-bod
       letrec
       ((id (λ (x) x))
        (blur (λ (y) y))
        (lp
         (λ (a n)
           (match
            (app <= n 1)
            ((#t) (app id a))
            ((#f)
             (let* ((r (app (app blur id) (app #t)))
                    (s (app (app blur id) (app #f))))
               (app not (app (app blur lp) s (app - n 1)))))))))
       (top))
      app
      lp
      (app #f)
      2)))))
(list
 'clos/con:
 (list
  (list
   '(λ (a n)
      (match
       (app <= n 1)
       ((#t) (app id a))
       ((#f)
        (let* ((r (app (app blur id) (app #t)))
               (s (app (app blur id) (app #f))))
          (app not (app (app blur lp) s (app - n 1)))))))
   (expenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> (app blur lp) <-) s (app - n 1))
 (expenv
  '((((ran
       not
       ()
       ()
       (let-bod
        let*
        ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
        (match-clause
         (#f)
         (app <= n 1)
         (((#t) (app id a)))
         ()
         (bod
          (a n)
          (bin
           letrec
           lp
           (app lp (app #f) 2)
           ((id (λ (x) x)) (blur (λ (y) y)))
           ()
           (top))))))
      app
      (app blur lp)
      s
      (app - n 1))
     ((ran
       not
       ()
       ()
       (let-bod
        let*
        ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
        (match-clause
         (#f)
         (app <= n 1)
         (((#t) (app id a)))
         ()
         (bod
          (a n)
          (bin
           letrec
           lp
           (app lp (app #f) 2)
           ((id (λ (x) x)) (blur (λ (y) y)))
           ()
           (top))))))
      app
      (app blur lp)
      s
      (app - n 1))))))
(list
 'clos/con:
 (list
  (list
   '(λ (a n)
      (match
       (app <= n 1)
       ((#t) (app id a))
       ((#f)
        (let* ((r (app (app blur id) (app #t)))
               (s (app (app blur id) (app #f))))
          (app not (app (app blur lp) s (app - n 1)))))))
   (expenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> blur <-) id)
 (expenv
  '((((let-bod
       letrec
       ((id (λ (x) x))
        (blur (λ (y) y))
        (lp
         (λ (a n)
           (match
            (app <= n 1)
            ((#t) (app id a))
            ((#f)
             (let* ((r (app (app blur id) (app #t)))
                    (s (app (app blur id) (app #f))))
               (app not (app (app blur lp) s (app - n 1)))))))))
       (top))
      app
      lp
      (app #f)
      2)))))
(list 'clos/con: (list (list '(λ (y) y) (expenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> (app blur lp) <-) s (app - n 1))
 (expenv
  '((((let-bod
       letrec
       ((id (λ (x) x))
        (blur (λ (y) y))
        (lp
         (λ (a n)
           (match
            (app <= n 1)
            ((#t) (app id a))
            ((#f)
             (let* ((r (app (app blur id) (app #t)))
                    (s (app (app blur id) (app #f))))
               (app not (app (app blur lp) s (app - n 1)))))))))
       (top))
      app
      lp
      (app #f)
      2)))))
(list
 'clos/con:
 (list
  (list
   '(λ (a n)
      (match
       (app <= n 1)
       ((#t) (app id a))
       ((#f)
        (let* ((r (app (app blur id) (app #t)))
               (s (app (app blur id) (app #f))))
          (app not (app (app blur lp) s (app - n 1)))))))
   (expenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (x) (-> x <-))
 (expenv
  '((((bin
       let*
       r
       (app not (app (app blur lp) s (app - n 1)))
       ()
       ((s (app (app blur id) (app #f))))
       (match-clause
        (#f)
        (app <= n 1)
        (((#t) (app id a)))
        ()
        (bod
         (a n)
         (bin
          letrec
          lp
          (app lp (app #f) 2)
          ((id (λ (x) x)) (blur (λ (y) y)))
          ()
          (top)))))
      app
      (app blur id)
      (app #t))
     ((let-bod
       letrec
       ((id (λ (x) x))
        (blur (λ (y) y))
        (lp
         (λ (a n)
           (match
            (app <= n 1)
            ((#t) (app id a))
            ((#f)
             (let* ((r (app (app blur id) (app #t)))
                    (s (app (app blur id) (app #f))))
               (app not (app (app blur lp) s (app - n 1)))))))))
       (top))
      app
      lp
      (app #f)
      2)))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (expenv '(((letrec (id blur lp) (-> (app lp (app #f) 2) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (x) (-> x <-))
 (expenv
  '((((bin
       let*
       r
       (app not (app (app blur lp) s (app - n 1)))
       ()
       ((s (app (app blur id) (app #f))))
       (match-clause
        (#f)
        (app <= n 1)
        (((#t) (app id a)))
        ()
        (bod
         (a n)
         (bin
          letrec
          lp
          (app lp (app #f) 2)
          ((id (λ (x) x)) (blur (λ (y) y)))
          ()
          (top)))))
      app
      (app blur id)
      (app #t))
     ((ran
       not
       ()
       ()
       (let-bod
        let*
        ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
        (match-clause
         (#f)
         (app <= n 1)
         (((#t) (app id a)))
         ()
         (bod
          (a n)
          (bin
           letrec
           lp
           (app lp (app #f) 2)
           ((id (λ (x) x)) (blur (λ (y) y)))
           ()
           (top))))))
      app
      (app blur lp)
      s
      (app - n 1))))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (expenv
    '(((app not (-> (app (app blur lp) s (app - n 1)) <-))
       (letrec (id blur lp) (-> (app lp (app #f) 2) <-))))))
  (list
   '(#t ())
   (expenv
    '(((app not (-> (app (app blur lp) s (app - n 1)) <-))
       (app not (-> (app (app blur lp) s (app - n 1)) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (app blur id) (-> (app #f) <-))
 (expenv
  '((((let-bod
       letrec
       ((id (λ (x) x))
        (blur (λ (y) y))
        (lp
         (λ (a n)
           (match
            (app <= n 1)
            ((#t) (app id a))
            ((#f)
             (let* ((r (app (app blur id) (app #t)))
                    (s (app (app blur id) (app #f))))
               (app not (app (app blur lp) s (app - n 1)))))))))
       (top))
      app
      lp
      (app #f)
      2)))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (expenv '(((letrec (id blur lp) (-> (app lp (app #f) 2) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> blur <-) id)
 (expenv
  '((((ran
       not
       ()
       ()
       (let-bod
        let*
        ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
        (match-clause
         (#f)
         (app <= n 1)
         (((#t) (app id a)))
         ()
         (bod
          (a n)
          (bin
           letrec
           lp
           (app lp (app #f) 2)
           ((id (λ (x) x)) (blur (λ (y) y)))
           ()
           (top))))))
      app
      (app blur lp)
      s
      (app - n 1))
     ((let-bod
       letrec
       ((id (λ (x) x))
        (blur (λ (y) y))
        (lp
         (λ (a n)
           (match
            (app <= n 1)
            ((#t) (app id a))
            ((#f)
             (let* ((r (app (app blur id) (app #t)))
                    (s (app (app blur id) (app #f))))
               (app not (app (app blur lp) s (app - n 1)))))))))
       (top))
      app
      lp
      (app #f)
      2)))))
(list 'clos/con: (list (list '(λ (y) y) (expenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> blur <-) id)
 (expenv
  '((((ran
       not
       ()
       ()
       (let-bod
        let*
        ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
        (match-clause
         (#f)
         (app <= n 1)
         (((#t) (app id a)))
         ()
         (bod
          (a n)
          (bin
           letrec
           lp
           (app lp (app #f) 2)
           ((id (λ (x) x)) (blur (λ (y) y)))
           ()
           (top))))))
      app
      (app blur lp)
      s
      (app - n 1))
     ((ran
       not
       ()
       ()
       (let-bod
        let*
        ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
        (match-clause
         (#f)
         (app <= n 1)
         (((#t) (app id a)))
         ()
         (bod
          (a n)
          (bin
           letrec
           lp
           (app lp (app #f) 2)
           ((id (λ (x) x)) (blur (λ (y) y)))
           ()
           (top))))))
      app
      (app blur lp)
      s
      (app - n 1))))))
(list 'clos/con: (list (list '(λ (y) y) (expenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(letrec (id
           blur
           (->
            lp
            =
            (λ (a n)
              (match
               (app <= n 1)
               ((#t) (app id a))
               ((#f)
                (let* ((r (app (app blur id) (app #t)))
                       (s (app (app blur id) (app #f))))
                  (app not (app (app blur lp) s (app - n 1)))))))
            <-))
    bod)
 (expenv '()))
(list
 'clos/con:
 (list
  (list
   '(λ (a n)
      (match
       (app <= n 1)
       ((#t) (app id a))
       ((#f)
        (let* ((r (app (app blur id) (app #t)))
               (s (app (app blur id) (app #f))))
          (app not (app (app blur lp) s (app - n 1)))))))
   (expenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> #f <-))
 (expenv
  '((((let-bod
       letrec
       ((id (λ (x) x))
        (blur (λ (y) y))
        (lp
         (λ (a n)
           (match
            (app <= n 1)
            ((#t) (app id a))
            ((#f)
             (let* ((r (app (app blur id) (app #t)))
                    (s (app (app blur id) (app #f))))
               (app not (app (app blur lp) s (app - n 1)))))))))
       (top))
      app
      lp
      (app #f)
      2)))))
(list
 'clos/con:
 (list
  (list #f (expenv '(((letrec (id blur lp) (-> (app lp (app #f) 2) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app <= n 1) <-)
   ((#t) (app id a))
   ((#f)
    (let* ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
      (app not (app (app blur lp) s (app - n 1))))))
 (expenv
  '((((let-bod
       letrec
       ((id (λ (x) x))
        (blur (λ (y) y))
        (lp
         (λ (a n)
           (match
            (app <= n 1)
            ((#t) (app id a))
            ((#f)
             (let* ((r (app (app blur id) (app #t)))
                    (s (app (app blur id) (app #f))))
               (app not (app (app blur lp) s (app - n 1)))))))))
       (top))
      app
      lp
      (app #f)
      2)))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (expenv '(((letrec (id blur lp) (-> (app lp (app #f) 2) <-))))))
  (list
   '(#f ())
   (expenv '(((letrec (id blur lp) (-> (app lp (app #f) 2) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (app blur lp) s (-> (app - n 1) <-))
 (expenv
  '((((let-bod
       letrec
       ((id (λ (x) x))
        (blur (λ (y) y))
        (lp
         (λ (a n)
           (match
            (app <= n 1)
            ((#t) (app id a))
            ((#f)
             (let* ((r (app (app blur id) (app #t)))
                    (s (app (app blur id) (app #f))))
               (app not (app (app blur lp) s (app - n 1)))))))))
       (top))
      app
      lp
      (app #f)
      2)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> not <-) (app (app blur lp) s (app - n 1)))
 (expenv
  '((((ran
       not
       ()
       ()
       (let-bod
        let*
        ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
        (match-clause
         (#f)
         (app <= n 1)
         (((#t) (app id a)))
         ()
         (bod
          (a n)
          (bin
           letrec
           lp
           (app lp (app #f) 2)
           ((id (λ (x) x)) (blur (λ (y) y)))
           ()
           (top))))))
      app
      (app blur lp)
      s
      (app - n 1))
     ((let-bod
       letrec
       ((id (λ (x) x))
        (blur (λ (y) y))
        (lp
         (λ (a n)
           (match
            (app <= n 1)
            ((#t) (app id a))
            ((#f)
             (let* ((r (app (app blur id) (app #t)))
                    (s (app (app blur id) (app #f))))
               (app not (app (app blur lp) s (app - n 1)))))))))
       (top))
      app
      lp
      (app #f)
      2)))))
'(clos/con: (#<procedure:do-not>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> not <-) (app (app blur lp) s (app - n 1)))
 (expenv
  '((((ran
       not
       ()
       ()
       (let-bod
        let*
        ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
        (match-clause
         (#f)
         (app <= n 1)
         (((#t) (app id a)))
         ()
         (bod
          (a n)
          (bin
           letrec
           lp
           (app lp (app #f) 2)
           ((id (λ (x) x)) (blur (λ (y) y)))
           ()
           (top))))))
      app
      (app blur lp)
      s
      (app - n 1))
     ((ran
       not
       ()
       ()
       (let-bod
        let*
        ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
        (match-clause
         (#f)
         (app <= n 1)
         (((#t) (app id a)))
         ()
         (bod
          (a n)
          (bin
           letrec
           lp
           (app lp (app #f) 2)
           ((id (λ (x) x)) (blur (λ (y) y)))
           ()
           (top))))))
      app
      (app blur lp)
      s
      (app - n 1))))))
'(clos/con: (#<procedure:do-not>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app (-> lp <-) (app #f) 2) (expenv '()))
(list
 'clos/con:
 (list
  (list
   '(λ (a n)
      (match
       (app <= n 1)
       ((#t) (app id a))
       ((#f)
        (let* ((r (app (app blur id) (app #t)))
               (s (app (app blur id) (app #f))))
          (app not (app (app blur lp) s (app - n 1)))))))
   (expenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app id (-> a <-))
 (expenv
  '((((ran
       not
       ()
       ()
       (let-bod
        let*
        ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
        (match-clause
         (#f)
         (app <= n 1)
         (((#t) (app id a)))
         ()
         (bod
          (a n)
          (bin
           letrec
           lp
           (app lp (app #f) 2)
           ((id (λ (x) x)) (blur (λ (y) y)))
           ()
           (top))))))
      app
      (app blur lp)
      s
      (app - n 1))
     ((let-bod
       letrec
       ((id (λ (x) x))
        (blur (λ (y) y))
        (lp
         (λ (a n)
           (match
            (app <= n 1)
            ((#t) (app id a))
            ((#f)
             (let* ((r (app (app blur id) (app #t)))
                    (s (app (app blur id) (app #f))))
               (app not (app (app blur lp) s (app - n 1)))))))))
       (top))
      app
      lp
      (app #f)
      2)))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (expenv '(((letrec (id blur lp) (-> (app lp (app #f) 2) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app id (-> a <-))
 (expenv
  '((((ran
       not
       ()
       ()
       (let-bod
        let*
        ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
        (match-clause
         (#f)
         (app <= n 1)
         (((#t) (app id a)))
         ()
         (bod
          (a n)
          (bin
           letrec
           lp
           (app lp (app #f) 2)
           ((id (λ (x) x)) (blur (λ (y) y)))
           ()
           (top))))))
      app
      (app blur lp)
      s
      (app - n 1))
     ((ran
       not
       ()
       ()
       (let-bod
        let*
        ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
        (match-clause
         (#f)
         (app <= n 1)
         (((#t) (app id a)))
         ()
         (bod
          (a n)
          (bin
           letrec
           lp
           (app lp (app #f) 2)
           ((id (λ (x) x)) (blur (λ (y) y)))
           ()
           (top))))))
      app
      (app blur lp)
      s
      (app - n 1))))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (expenv
    '(((app not (-> (app (app blur lp) s (app - n 1)) <-))
       (letrec (id blur lp) (-> (app lp (app #f) 2) <-))))))
  (list
   '(#f ())
   (expenv
    '(((app not (-> (app (app blur lp) s (app - n 1)) <-))
       (app not (-> (app (app blur lp) s (app - n 1)) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (app blur lp) s (-> (app - n 1) <-))
 (expenv
  '((((ran
       not
       ()
       ()
       (let-bod
        let*
        ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
        (match-clause
         (#f)
         (app <= n 1)
         (((#t) (app id a)))
         ()
         (bod
          (a n)
          (bin
           letrec
           lp
           (app lp (app #f) 2)
           ((id (λ (x) x)) (blur (λ (y) y)))
           ()
           (top))))))
      app
      (app blur lp)
      s
      (app - n 1))
     ((let-bod
       letrec
       ((id (λ (x) x))
        (blur (λ (y) y))
        (lp
         (λ (a n)
           (match
            (app <= n 1)
            ((#t) (app id a))
            ((#f)
             (let* ((r (app (app blur id) (app #t)))
                    (s (app (app blur id) (app #f))))
               (app not (app (app blur lp) s (app - n 1)))))))))
       (top))
      app
      lp
      (app #f)
      2)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (app blur lp) s (-> (app - n 1) <-))
 (expenv
  '((((ran
       not
       ()
       ()
       (let-bod
        let*
        ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
        (match-clause
         (#f)
         (app <= n 1)
         (((#t) (app id a)))
         ()
         (bod
          (a n)
          (bin
           letrec
           lp
           (app lp (app #f) 2)
           ((id (λ (x) x)) (blur (λ (y) y)))
           ()
           (top))))))
      app
      (app blur lp)
      s
      (app - n 1))
     ((ran
       not
       ()
       ()
       (let-bod
        let*
        ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
        (match-clause
         (#f)
         (app <= n 1)
         (((#t) (app id a)))
         ()
         (bod
          (a n)
          (bin
           letrec
           lp
           (app lp (app #f) 2)
           ((id (λ (x) x)) (blur (λ (y) y)))
           ()
           (top))))))
      app
      (app blur lp)
      s
      (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (a n)
    (->
     (match
      (app <= n 1)
      ((#t) (app id a))
      ((#f)
       (let* ((r (app (app blur id) (app #t)))
              (s (app (app blur id) (app #f))))
         (app not (app (app blur lp) s (app - n 1))))))
     <-))
 (expenv
  '((((ran
       not
       ()
       ()
       (let-bod
        let*
        ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
        (match-clause
         (#f)
         (app <= n 1)
         (((#t) (app id a)))
         ()
         (bod
          (a n)
          (bin
           letrec
           lp
           (app lp (app #f) 2)
           ((id (λ (x) x)) (blur (λ (y) y)))
           ()
           (top))))))
      app
      (app blur lp)
      s
      (app - n 1))
     ((let-bod
       letrec
       ((id (λ (x) x))
        (blur (λ (y) y))
        (lp
         (λ (a n)
           (match
            (app <= n 1)
            ((#t) (app id a))
            ((#f)
             (let* ((r (app (app blur id) (app #t)))
                    (s (app (app blur id) (app #f))))
               (app not (app (app blur lp) s (app - n 1)))))))))
       (top))
      app
      lp
      (app #f)
      2)))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (expenv
    '(((app not (-> (app (app blur lp) s (app - n 1)) <-))
       (letrec (id blur lp) (-> (app lp (app #f) 2) <-))))))
  (list
   '(#t ())
   (expenv
    '(((app not (-> (app (app blur lp) s (app - n 1)) <-))
       (letrec (id blur lp) (-> (app lp (app #f) 2) <-))))))
  (list
   '(#f ())
   (expenv '(((letrec (id blur lp) (-> (app lp (app #f) 2) <-))))))
  (list
   '(#f ())
   (expenv
    '(((app not (-> (app (app blur lp) s (app - n 1)) <-))
       (app not (-> (app (app blur lp) s (app - n 1)) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (a n)
    (->
     (match
      (app <= n 1)
      ((#t) (app id a))
      ((#f)
       (let* ((r (app (app blur id) (app #t)))
              (s (app (app blur id) (app #f))))
         (app not (app (app blur lp) s (app - n 1))))))
     <-))
 (expenv
  '((((ran
       not
       ()
       ()
       (let-bod
        let*
        ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
        (match-clause
         (#f)
         (app <= n 1)
         (((#t) (app id a)))
         ()
         (bod
          (a n)
          (bin
           letrec
           lp
           (app lp (app #f) 2)
           ((id (λ (x) x)) (blur (λ (y) y)))
           ()
           (top))))))
      app
      (app blur lp)
      s
      (app - n 1))
     ((ran
       not
       ()
       ()
       (let-bod
        let*
        ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
        (match-clause
         (#f)
         (app <= n 1)
         (((#t) (app id a)))
         ()
         (bod
          (a n)
          (bin
           letrec
           lp
           (app lp (app #f) 2)
           ((id (λ (x) x)) (blur (λ (y) y)))
           ()
           (top))))))
      app
      (app blur lp)
      s
      (app - n 1))))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (expenv
    '(((app not (-> (app (app blur lp) s (app - n 1)) <-))
       (letrec (id blur lp) (-> (app lp (app #f) 2) <-))))))
  (list
   '(#t ())
   (expenv
    '(((app not (-> (app (app blur lp) s (app - n 1)) <-))
       (app not (-> (app (app blur lp) s (app - n 1)) <-))))))
  (list
   '(#f ())
   (expenv '(((letrec (id blur lp) (-> (app lp (app #f) 2) <-))))))
  (list
   '(#f ())
   (expenv
    '(((app not (-> (app (app blur lp) s (app - n 1)) <-))
       (app not (-> (app (app blur lp) s (app - n 1)) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> #t <-))
 (expenv
  '((((ran
       not
       ()
       ()
       (let-bod
        let*
        ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
        (match-clause
         (#f)
         (app <= n 1)
         (((#t) (app id a)))
         ()
         (bod
          (a n)
          (bin
           letrec
           lp
           (app lp (app #f) 2)
           ((id (λ (x) x)) (blur (λ (y) y)))
           ()
           (top))))))
      app
      (app blur lp)
      s
      (app - n 1))
     ((let-bod
       letrec
       ((id (λ (x) x))
        (blur (λ (y) y))
        (lp
         (λ (a n)
           (match
            (app <= n 1)
            ((#t) (app id a))
            ((#f)
             (let* ((r (app (app blur id) (app #t)))
                    (s (app (app blur id) (app #f))))
               (app not (app (app blur lp) s (app - n 1)))))))))
       (top))
      app
      lp
      (app #f)
      2)))))
(list
 'clos/con:
 (list
  (list
   #t
   (expenv
    '(((app not (-> (app (app blur lp) s (app - n 1)) <-))
       (letrec (id blur lp) (-> (app lp (app #f) 2) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> #t <-))
 (expenv
  '((((ran
       not
       ()
       ()
       (let-bod
        let*
        ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
        (match-clause
         (#f)
         (app <= n 1)
         (((#t) (app id a)))
         ()
         (bod
          (a n)
          (bin
           letrec
           lp
           (app lp (app #f) 2)
           ((id (λ (x) x)) (blur (λ (y) y)))
           ()
           (top))))))
      app
      (app blur lp)
      s
      (app - n 1))
     ((ran
       not
       ()
       ()
       (let-bod
        let*
        ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
        (match-clause
         (#f)
         (app <= n 1)
         (((#t) (app id a)))
         ()
         (bod
          (a n)
          (bin
           letrec
           lp
           (app lp (app #f) 2)
           ((id (λ (x) x)) (blur (λ (y) y)))
           ()
           (top))))))
      app
      (app blur lp)
      s
      (app - n 1))))))
(list
 'clos/con:
 (list
  (list
   #t
   (expenv
    '(((app not (-> (app (app blur lp) s (app - n 1)) <-))
       (app not (-> (app (app blur lp) s (app - n 1)) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (app blur lp) (-> s <-) (app - n 1))
 (expenv
  '((((ran
       not
       ()
       ()
       (let-bod
        let*
        ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
        (match-clause
         (#f)
         (app <= n 1)
         (((#t) (app id a)))
         ()
         (bod
          (a n)
          (bin
           letrec
           lp
           (app lp (app #f) 2)
           ((id (λ (x) x)) (blur (λ (y) y)))
           ()
           (top))))))
      app
      (app blur lp)
      s
      (app - n 1))
     ((let-bod
       letrec
       ((id (λ (x) x))
        (blur (λ (y) y))
        (lp
         (λ (a n)
           (match
            (app <= n 1)
            ((#t) (app id a))
            ((#f)
             (let* ((r (app (app blur id) (app #t)))
                    (s (app (app blur id) (app #f))))
               (app not (app (app blur lp) s (app - n 1)))))))))
       (top))
      app
      lp
      (app #f)
      2)))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (expenv
    '(((app not (-> (app (app blur lp) s (app - n 1)) <-))
       (letrec (id blur lp) (-> (app lp (app #f) 2) <-))))))
  (list
   '(#f ())
   (expenv
    '(((app not (-> (app (app blur lp) s (app - n 1)) <-))
       (app not (-> (app (app blur lp) s (app - n 1)) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (app blur lp) (-> s <-) (app - n 1))
 (expenv
  '((((ran
       not
       ()
       ()
       (let-bod
        let*
        ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
        (match-clause
         (#f)
         (app <= n 1)
         (((#t) (app id a)))
         ()
         (bod
          (a n)
          (bin
           letrec
           lp
           (app lp (app #f) 2)
           ((id (λ (x) x)) (blur (λ (y) y)))
           ()
           (top))))))
      app
      (app blur lp)
      s
      (app - n 1))
     ((ran
       not
       ()
       ()
       (let-bod
        let*
        ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
        (match-clause
         (#f)
         (app <= n 1)
         (((#t) (app id a)))
         ()
         (bod
          (a n)
          (bin
           letrec
           lp
           (app lp (app #f) 2)
           ((id (λ (x) x)) (blur (λ (y) y)))
           ()
           (top))))))
      app
      (app blur lp)
      s
      (app - n 1))))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (expenv
    '(((app not (-> (app (app blur lp) s (app - n 1)) <-))
       (letrec (id blur lp) (-> (app lp (app #f) 2) <-))))))
  (list
   '(#f ())
   (expenv
    '(((app not (-> (app (app blur lp) s (app - n 1)) <-))
       (app not (-> (app (app blur lp) s (app - n 1)) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (app blur id) (-> (app #t) <-))
 (expenv
  '((((ran
       not
       ()
       ()
       (let-bod
        let*
        ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
        (match-clause
         (#f)
         (app <= n 1)
         (((#t) (app id a)))
         ()
         (bod
          (a n)
          (bin
           letrec
           lp
           (app lp (app #f) 2)
           ((id (λ (x) x)) (blur (λ (y) y)))
           ()
           (top))))))
      app
      (app blur lp)
      s
      (app - n 1))
     ((let-bod
       letrec
       ((id (λ (x) x))
        (blur (λ (y) y))
        (lp
         (λ (a n)
           (match
            (app <= n 1)
            ((#t) (app id a))
            ((#f)
             (let* ((r (app (app blur id) (app #t)))
                    (s (app (app blur id) (app #f))))
               (app not (app (app blur lp) s (app - n 1)))))))))
       (top))
      app
      lp
      (app #f)
      2)))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (expenv
    '(((app not (-> (app (app blur lp) s (app - n 1)) <-))
       (letrec (id blur lp) (-> (app lp (app #f) 2) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (app blur id) (-> (app #t) <-))
 (expenv
  '((((ran
       not
       ()
       ()
       (let-bod
        let*
        ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
        (match-clause
         (#f)
         (app <= n 1)
         (((#t) (app id a)))
         ()
         (bod
          (a n)
          (bin
           letrec
           lp
           (app lp (app #f) 2)
           ((id (λ (x) x)) (blur (λ (y) y)))
           ()
           (top))))))
      app
      (app blur lp)
      s
      (app - n 1))
     ((ran
       not
       ()
       ()
       (let-bod
        let*
        ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
        (match-clause
         (#f)
         (app <= n 1)
         (((#t) (app id a)))
         ()
         (bod
          (a n)
          (bin
           letrec
           lp
           (app lp (app #f) 2)
           ((id (λ (x) x)) (blur (λ (y) y)))
           ()
           (top))))))
      app
      (app blur lp)
      s
      (app - n 1))))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (expenv
    '(((app not (-> (app (app blur lp) s (app - n 1)) <-))
       (app not (-> (app (app blur lp) s (app - n 1)) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app blur (-> id <-))
 (expenv
  '((((let-bod
       letrec
       ((id (λ (x) x))
        (blur (λ (y) y))
        (lp
         (λ (a n)
           (match
            (app <= n 1)
            ((#t) (app id a))
            ((#f)
             (let* ((r (app (app blur id) (app #t)))
                    (s (app (app blur id) (app #f))))
               (app not (app (app blur lp) s (app - n 1)))))))))
       (top))
      app
      lp
      (app #f)
      2)))))
(list 'clos/con: (list (list '(λ (x) x) (expenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> (app blur id) <-) (app #f))
 (expenv
  '((((let-bod
       letrec
       ((id (λ (x) x))
        (blur (λ (y) y))
        (lp
         (λ (a n)
           (match
            (app <= n 1)
            ((#t) (app id a))
            ((#f)
             (let* ((r (app (app blur id) (app #t)))
                    (s (app (app blur id) (app #f))))
               (app not (app (app blur lp) s (app - n 1)))))))))
       (top))
      app
      lp
      (app #f)
      2)))))
(list 'clos/con: (list (list '(λ (x) x) (expenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (x) (-> x <-))
 (expenv
  '((((bin
       let*
       s
       (app not (app (app blur lp) s (app - n 1)))
       ((r (app (app blur id) (app #t))))
       ()
       (match-clause
        (#f)
        (app <= n 1)
        (((#t) (app id a)))
        ()
        (bod
         (a n)
         (bin
          letrec
          lp
          (app lp (app #f) 2)
          ((id (λ (x) x)) (blur (λ (y) y)))
          ()
          (top)))))
      app
      (app blur id)
      (app #f))
     ((let-bod
       letrec
       ((id (λ (x) x))
        (blur (λ (y) y))
        (lp
         (λ (a n)
           (match
            (app <= n 1)
            ((#t) (app id a))
            ((#f)
             (let* ((r (app (app blur id) (app #t)))
                    (s (app (app blur id) (app #f))))
               (app not (app (app blur lp) s (app - n 1)))))))))
       (top))
      app
      lp
      (app #f)
      2)))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (expenv '(((letrec (id blur lp) (-> (app lp (app #f) 2) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (x) (-> x <-))
 (expenv
  '((((bin
       let*
       s
       (app not (app (app blur lp) s (app - n 1)))
       ((r (app (app blur id) (app #t))))
       ()
       (match-clause
        (#f)
        (app <= n 1)
        (((#t) (app id a)))
        ()
        (bod
         (a n)
         (bin
          letrec
          lp
          (app lp (app #f) 2)
          ((id (λ (x) x)) (blur (λ (y) y)))
          ()
          (top)))))
      app
      (app blur id)
      (app #f))
     ((ran
       not
       ()
       ()
       (let-bod
        let*
        ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
        (match-clause
         (#f)
         (app <= n 1)
         (((#t) (app id a)))
         ()
         (bod
          (a n)
          (bin
           letrec
           lp
           (app lp (app #f) 2)
           ((id (λ (x) x)) (blur (λ (y) y)))
           ()
           (top))))))
      app
      (app blur lp)
      s
      (app - n 1))))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (expenv
    '(((app not (-> (app (app blur lp) s (app - n 1)) <-))
       (letrec (id blur lp) (-> (app lp (app #f) 2) <-))))))
  (list
   '(#f ())
   (expenv
    '(((app not (-> (app (app blur lp) s (app - n 1)) <-))
       (app not (-> (app (app blur lp) s (app - n 1)) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> blur <-) lp)
 (expenv
  '((((ran
       not
       ()
       ()
       (let-bod
        let*
        ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
        (match-clause
         (#f)
         (app <= n 1)
         (((#t) (app id a)))
         ()
         (bod
          (a n)
          (bin
           letrec
           lp
           (app lp (app #f) 2)
           ((id (λ (x) x)) (blur (λ (y) y)))
           ()
           (top))))))
      app
      (app blur lp)
      s
      (app - n 1))
     ((let-bod
       letrec
       ((id (λ (x) x))
        (blur (λ (y) y))
        (lp
         (λ (a n)
           (match
            (app <= n 1)
            ((#t) (app id a))
            ((#f)
             (let* ((r (app (app blur id) (app #t)))
                    (s (app (app blur id) (app #f))))
               (app not (app (app blur lp) s (app - n 1)))))))))
       (top))
      app
      lp
      (app #f)
      2)))))
(list 'clos/con: (list (list '(λ (y) y) (expenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> blur <-) lp)
 (expenv
  '((((ran
       not
       ()
       ()
       (let-bod
        let*
        ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
        (match-clause
         (#f)
         (app <= n 1)
         (((#t) (app id a)))
         ()
         (bod
          (a n)
          (bin
           letrec
           lp
           (app lp (app #f) 2)
           ((id (λ (x) x)) (blur (λ (y) y)))
           ()
           (top))))))
      app
      (app blur lp)
      s
      (app - n 1))
     ((ran
       not
       ()
       ()
       (let-bod
        let*
        ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
        (match-clause
         (#f)
         (app <= n 1)
         (((#t) (app id a)))
         ()
         (bod
          (a n)
          (bin
           letrec
           lp
           (app lp (app #f) 2)
           ((id (λ (x) x)) (blur (λ (y) y)))
           ()
           (top))))))
      app
      (app blur lp)
      s
      (app - n 1))))))
(list 'clos/con: (list (list '(λ (y) y) (expenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> #t <-))
 (expenv
  '((((let-bod
       letrec
       ((id (λ (x) x))
        (blur (λ (y) y))
        (lp
         (λ (a n)
           (match
            (app <= n 1)
            ((#t) (app id a))
            ((#f)
             (let* ((r (app (app blur id) (app #t)))
                    (s (app (app blur id) (app #f))))
               (app not (app (app blur lp) s (app - n 1)))))))))
       (top))
      app
      lp
      (app #f)
      2)))))
(list
 'clos/con:
 (list
  (list #t (expenv '(((letrec (id blur lp) (-> (app lp (app #f) 2) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> <= <-) n 1)
 (expenv
  '((((ran
       not
       ()
       ()
       (let-bod
        let*
        ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
        (match-clause
         (#f)
         (app <= n 1)
         (((#t) (app id a)))
         ()
         (bod
          (a n)
          (bin
           letrec
           lp
           (app lp (app #f) 2)
           ((id (λ (x) x)) (blur (λ (y) y)))
           ()
           (top))))))
      app
      (app blur lp)
      s
      (app - n 1))
     ((let-bod
       letrec
       ((id (λ (x) x))
        (blur (λ (y) y))
        (lp
         (λ (a n)
           (match
            (app <= n 1)
            ((#t) (app id a))
            ((#f)
             (let* ((r (app (app blur id) (app #t)))
                    (s (app (app blur id) (app #f))))
               (app not (app (app blur lp) s (app - n 1)))))))))
       (top))
      app
      lp
      (app #f)
      2)))))
'(clos/con: (#<procedure:do-lte>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> <= <-) n 1)
 (expenv
  '((((ran
       not
       ()
       ()
       (let-bod
        let*
        ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
        (match-clause
         (#f)
         (app <= n 1)
         (((#t) (app id a)))
         ()
         (bod
          (a n)
          (bin
           letrec
           lp
           (app lp (app #f) 2)
           ((id (λ (x) x)) (blur (λ (y) y)))
           ()
           (top))))))
      app
      (app blur lp)
      s
      (app - n 1))
     ((ran
       not
       ()
       ()
       (let-bod
        let*
        ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
        (match-clause
         (#f)
         (app <= n 1)
         (((#t) (app id a)))
         ()
         (bod
          (a n)
          (bin
           letrec
           lp
           (app lp (app #f) 2)
           ((id (λ (x) x)) (blur (λ (y) y)))
           ()
           (top))))))
      app
      (app blur lp)
      s
      (app - n 1))))))
'(clos/con: (#<procedure:do-lte>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> (app blur id) <-) (app #t))
 (expenv
  '((((ran
       not
       ()
       ()
       (let-bod
        let*
        ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
        (match-clause
         (#f)
         (app <= n 1)
         (((#t) (app id a)))
         ()
         (bod
          (a n)
          (bin
           letrec
           lp
           (app lp (app #f) 2)
           ((id (λ (x) x)) (blur (λ (y) y)))
           ()
           (top))))))
      app
      (app blur lp)
      s
      (app - n 1))
     ((let-bod
       letrec
       ((id (λ (x) x))
        (blur (λ (y) y))
        (lp
         (λ (a n)
           (match
            (app <= n 1)
            ((#t) (app id a))
            ((#f)
             (let* ((r (app (app blur id) (app #t)))
                    (s (app (app blur id) (app #f))))
               (app not (app (app blur lp) s (app - n 1)))))))))
       (top))
      app
      lp
      (app #f)
      2)))))
(list 'clos/con: (list (list '(λ (x) x) (expenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> (app blur id) <-) (app #t))
 (expenv
  '((((ran
       not
       ()
       ()
       (let-bod
        let*
        ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
        (match-clause
         (#f)
         (app <= n 1)
         (((#t) (app id a)))
         ()
         (bod
          (a n)
          (bin
           letrec
           lp
           (app lp (app #f) 2)
           ((id (λ (x) x)) (blur (λ (y) y)))
           ()
           (top))))))
      app
      (app blur lp)
      s
      (app - n 1))
     ((ran
       not
       ()
       ()
       (let-bod
        let*
        ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
        (match-clause
         (#f)
         (app <= n 1)
         (((#t) (app id a)))
         ()
         (bod
          (a n)
          (bin
           letrec
           lp
           (app lp (app #f) 2)
           ((id (λ (x) x)) (blur (λ (y) y)))
           ()
           (top))))))
      app
      (app blur lp)
      s
      (app - n 1))))))
(list 'clos/con: (list (list '(λ (x) x) (expenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> blur <-) lp)
 (expenv
  '((((let-bod
       letrec
       ((id (λ (x) x))
        (blur (λ (y) y))
        (lp
         (λ (a n)
           (match
            (app <= n 1)
            ((#t) (app id a))
            ((#f)
             (let* ((r (app (app blur id) (app #t)))
                    (s (app (app blur id) (app #f))))
               (app not (app (app blur lp) s (app - n 1)))))))))
       (top))
      app
      lp
      (app #f)
      2)))))
(list 'clos/con: (list (list '(λ (y) y) (expenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (y) (-> y <-))
 (expenv
  '((((rat
       (s (app - n 1))
       (ran
        not
        ()
        ()
        (let-bod
         let*
         ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
         (match-clause
          (#f)
          (app <= n 1)
          (((#t) (app id a)))
          ()
          (bod
           (a n)
           (bin
            letrec
            lp
            (app lp (app #f) 2)
            ((id (λ (x) x)) (blur (λ (y) y)))
            ()
            (top)))))))
      app
      blur
      lp)
     ((let-bod
       letrec
       ((id (λ (x) x))
        (blur (λ (y) y))
        (lp
         (λ (a n)
           (match
            (app <= n 1)
            ((#t) (app id a))
            ((#f)
             (let* ((r (app (app blur id) (app #t)))
                    (s (app (app blur id) (app #f))))
               (app not (app (app blur lp) s (app - n 1)))))))))
       (top))
      app
      lp
      (app #f)
      2)))))
(list
 'clos/con:
 (list
  (list
   '(λ (a n)
      (match
       (app <= n 1)
       ((#t) (app id a))
       ((#f)
        (let* ((r (app (app blur id) (app #t)))
               (s (app (app blur id) (app #f))))
          (app not (app (app blur lp) s (app - n 1)))))))
   (expenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (y) (-> y <-))
 (expenv
  '((((rat
       (s (app - n 1))
       (ran
        not
        ()
        ()
        (let-bod
         let*
         ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
         (match-clause
          (#f)
          (app <= n 1)
          (((#t) (app id a)))
          ()
          (bod
           (a n)
           (bin
            letrec
            lp
            (app lp (app #f) 2)
            ((id (λ (x) x)) (blur (λ (y) y)))
            ()
            (top)))))))
      app
      blur
      lp)
     ((ran
       not
       ()
       ()
       (let-bod
        let*
        ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
        (match-clause
         (#f)
         (app <= n 1)
         (((#t) (app id a)))
         ()
         (bod
          (a n)
          (bin
           letrec
           lp
           (app lp (app #f) 2)
           ((id (λ (x) x)) (blur (λ (y) y)))
           ()
           (top))))))
      app
      (app blur lp)
      s
      (app - n 1))))))
(list
 'clos/con:
 (list
  (list
   '(λ (a n)
      (match
       (app <= n 1)
       ((#t) (app id a))
       ((#f)
        (let* ((r (app (app blur id) (app #t)))
               (s (app (app blur id) (app #f))))
          (app not (app (app blur lp) s (app - n 1)))))))
   (expenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - n (-> 1 <-))
 (expenv
  '((((let-bod
       letrec
       ((id (λ (x) x))
        (blur (λ (y) y))
        (lp
         (λ (a n)
           (match
            (app <= n 1)
            ((#t) (app id a))
            ((#f)
             (let* ((r (app (app blur id) (app #t)))
                    (s (app (app blur id) (app #f))))
               (app not (app (app blur lp) s (app - n 1)))))))))
       (top))
      app
      lp
      (app #f)
      2)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> id <-) a)
 (expenv
  '((((ran
       not
       ()
       ()
       (let-bod
        let*
        ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
        (match-clause
         (#f)
         (app <= n 1)
         (((#t) (app id a)))
         ()
         (bod
          (a n)
          (bin
           letrec
           lp
           (app lp (app #f) 2)
           ((id (λ (x) x)) (blur (λ (y) y)))
           ()
           (top))))))
      app
      (app blur lp)
      s
      (app - n 1))
     ((let-bod
       letrec
       ((id (λ (x) x))
        (blur (λ (y) y))
        (lp
         (λ (a n)
           (match
            (app <= n 1)
            ((#t) (app id a))
            ((#f)
             (let* ((r (app (app blur id) (app #t)))
                    (s (app (app blur id) (app #f))))
               (app not (app (app blur lp) s (app - n 1)))))))))
       (top))
      app
      lp
      (app #f)
      2)))))
(list 'clos/con: (list (list '(λ (x) x) (expenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> id <-) a)
 (expenv
  '((((ran
       not
       ()
       ()
       (let-bod
        let*
        ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
        (match-clause
         (#f)
         (app <= n 1)
         (((#t) (app id a)))
         ()
         (bod
          (a n)
          (bin
           letrec
           lp
           (app lp (app #f) 2)
           ((id (λ (x) x)) (blur (λ (y) y)))
           ()
           (top))))))
      app
      (app blur lp)
      s
      (app - n 1))
     ((ran
       not
       ()
       ()
       (let-bod
        let*
        ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
        (match-clause
         (#f)
         (app <= n 1)
         (((#t) (app id a)))
         ()
         (bod
          (a n)
          (bin
           letrec
           lp
           (app lp (app #f) 2)
           ((id (λ (x) x)) (blur (λ (y) y)))
           ()
           (top))))))
      app
      (app blur lp)
      s
      (app - n 1))))))
(list 'clos/con: (list (list '(λ (x) x) (expenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app <= n 1)
   (-> (#t) (app id a) <-)
   ((#f)
    (let* ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
      (app not (app (app blur lp) s (app - n 1))))))
 (expenv
  '((((ran
       not
       ()
       ()
       (let-bod
        let*
        ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
        (match-clause
         (#f)
         (app <= n 1)
         (((#t) (app id a)))
         ()
         (bod
          (a n)
          (bin
           letrec
           lp
           (app lp (app #f) 2)
           ((id (λ (x) x)) (blur (λ (y) y)))
           ()
           (top))))))
      app
      (app blur lp)
      s
      (app - n 1))
     ((let-bod
       letrec
       ((id (λ (x) x))
        (blur (λ (y) y))
        (lp
         (λ (a n)
           (match
            (app <= n 1)
            ((#t) (app id a))
            ((#f)
             (let* ((r (app (app blur id) (app #t)))
                    (s (app (app blur id) (app #f))))
               (app not (app (app blur lp) s (app - n 1)))))))))
       (top))
      app
      lp
      (app #f)
      2)))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (expenv
    '(((app not (-> (app (app blur lp) s (app - n 1)) <-))
       (letrec (id blur lp) (-> (app lp (app #f) 2) <-))))))
  (list
   '(#f ())
   (expenv '(((letrec (id blur lp) (-> (app lp (app #f) 2) <-))))))
  (list
   '(#f ())
   (expenv
    '(((app not (-> (app (app blur lp) s (app - n 1)) <-))
       (app not (-> (app (app blur lp) s (app - n 1)) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app <= n 1)
   (-> (#t) (app id a) <-)
   ((#f)
    (let* ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
      (app not (app (app blur lp) s (app - n 1))))))
 (expenv
  '((((ran
       not
       ()
       ()
       (let-bod
        let*
        ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
        (match-clause
         (#f)
         (app <= n 1)
         (((#t) (app id a)))
         ()
         (bod
          (a n)
          (bin
           letrec
           lp
           (app lp (app #f) 2)
           ((id (λ (x) x)) (blur (λ (y) y)))
           ()
           (top))))))
      app
      (app blur lp)
      s
      (app - n 1))
     ((ran
       not
       ()
       ()
       (let-bod
        let*
        ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
        (match-clause
         (#f)
         (app <= n 1)
         (((#t) (app id a)))
         ()
         (bod
          (a n)
          (bin
           letrec
           lp
           (app lp (app #f) 2)
           ((id (λ (x) x)) (blur (λ (y) y)))
           ()
           (top))))))
      app
      (app blur lp)
      s
      (app - n 1))))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (expenv
    '(((app not (-> (app (app blur lp) s (app - n 1)) <-))
       (letrec (id blur lp) (-> (app lp (app #f) 2) <-))))))
  (list
   '(#f ())
   (expenv '(((letrec (id blur lp) (-> (app lp (app #f) 2) <-))))))
  (list
   '(#f ())
   (expenv
    '(((app not (-> (app (app blur lp) s (app - n 1)) <-))
       (app not (-> (app (app blur lp) s (app - n 1)) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app <= n 1)
   (-> (#t) (app id a) <-)
   ((#f)
    (let* ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
      (app not (app (app blur lp) s (app - n 1))))))
 (expenv
  '((((let-bod
       letrec
       ((id (λ (x) x))
        (blur (λ (y) y))
        (lp
         (λ (a n)
           (match
            (app <= n 1)
            ((#t) (app id a))
            ((#f)
             (let* ((r (app (app blur id) (app #t)))
                    (s (app (app blur id) (app #f))))
               (app not (app (app blur lp) s (app - n 1)))))))))
       (top))
      app
      lp
      (app #f)
      2)))))
(list 'clos/con: (list (list '(#f ()) (expenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(top) (expenv '()))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (expenv '(((letrec (id blur lp) (-> (app lp (app #f) 2) <-))))))
  (list
   '(#f ())
   (expenv '(((letrec (id blur lp) (-> (app lp (app #f) 2) <-))))))
  (list '(#f ()) (expenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - n (-> 1 <-))
 (expenv
  '((((ran
       not
       ()
       ()
       (let-bod
        let*
        ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
        (match-clause
         (#f)
         (app <= n 1)
         (((#t) (app id a)))
         ()
         (bod
          (a n)
          (bin
           letrec
           lp
           (app lp (app #f) 2)
           ((id (λ (x) x)) (blur (λ (y) y)))
           ()
           (top))))))
      app
      (app blur lp)
      s
      (app - n 1))
     ((let-bod
       letrec
       ((id (λ (x) x))
        (blur (λ (y) y))
        (lp
         (λ (a n)
           (match
            (app <= n 1)
            ((#t) (app id a))
            ((#f)
             (let* ((r (app (app blur id) (app #t)))
                    (s (app (app blur id) (app #f))))
               (app not (app (app blur lp) s (app - n 1)))))))))
       (top))
      app
      lp
      (app #f)
      2)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app - n (-> 1 <-))
 (expenv
  '((((ran
       not
       ()
       ()
       (let-bod
        let*
        ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
        (match-clause
         (#f)
         (app <= n 1)
         (((#t) (app id a)))
         ()
         (bod
          (a n)
          (bin
           letrec
           lp
           (app lp (app #f) 2)
           ((id (λ (x) x)) (blur (λ (y) y)))
           ()
           (top))))))
      app
      (app blur lp)
      s
      (app - n 1))
     ((ran
       not
       ()
       ()
       (let-bod
        let*
        ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
        (match-clause
         (#f)
         (app <= n 1)
         (((#t) (app id a)))
         ()
         (bod
          (a n)
          (bin
           letrec
           lp
           (app lp (app #f) 2)
           ((id (λ (x) x)) (blur (λ (y) y)))
           ()
           (top))))))
      app
      (app blur lp)
      s
      (app - n 1))))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) n 1)
 (expenv
  '((((ran
       not
       ()
       ()
       (let-bod
        let*
        ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
        (match-clause
         (#f)
         (app <= n 1)
         (((#t) (app id a)))
         ()
         (bod
          (a n)
          (bin
           letrec
           lp
           (app lp (app #f) 2)
           ((id (λ (x) x)) (blur (λ (y) y)))
           ()
           (top))))))
      app
      (app blur lp)
      s
      (app - n 1))
     ((let-bod
       letrec
       ((id (λ (x) x))
        (blur (λ (y) y))
        (lp
         (λ (a n)
           (match
            (app <= n 1)
            ((#t) (app id a))
            ((#f)
             (let* ((r (app (app blur id) (app #t)))
                    (s (app (app blur id) (app #f))))
               (app not (app (app blur lp) s (app - n 1)))))))))
       (top))
      app
      lp
      (app #f)
      2)))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) n 1)
 (expenv
  '((((ran
       not
       ()
       ()
       (let-bod
        let*
        ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
        (match-clause
         (#f)
         (app <= n 1)
         (((#t) (app id a)))
         ()
         (bod
          (a n)
          (bin
           letrec
           lp
           (app lp (app #f) 2)
           ((id (λ (x) x)) (blur (λ (y) y)))
           ()
           (top))))))
      app
      (app blur lp)
      s
      (app - n 1))
     ((ran
       not
       ()
       ()
       (let-bod
        let*
        ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
        (match-clause
         (#f)
         (app <= n 1)
         (((#t) (app id a)))
         ()
         (bod
          (a n)
          (bin
           letrec
           lp
           (app lp (app #f) 2)
           ((id (λ (x) x)) (blur (λ (y) y)))
           ()
           (top))))))
      app
      (app blur lp)
      s
      (app - n 1))))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app lp (-> (app #f) <-) 2) (expenv '()))
(list 'clos/con: (list (list '(#f ()) (expenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> <= <-) n 1)
 (expenv
  '((((let-bod
       letrec
       ((id (λ (x) x))
        (blur (λ (y) y))
        (lp
         (λ (a n)
           (match
            (app <= n 1)
            ((#t) (app id a))
            ((#f)
             (let* ((r (app (app blur id) (app #t)))
                    (s (app (app blur id) (app #f))))
               (app not (app (app blur lp) s (app - n 1)))))))))
       (top))
      app
      lp
      (app #f)
      2)))))
'(clos/con: (#<procedure:do-lte>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(let* (r (-> s = (app (app blur id) (app #f)) <-)) bod)
 (expenv
  '((((let-bod
       letrec
       ((id (λ (x) x))
        (blur (λ (y) y))
        (lp
         (λ (a n)
           (match
            (app <= n 1)
            ((#t) (app id a))
            ((#f)
             (let* ((r (app (app blur id) (app #t)))
                    (s (app (app blur id) (app #f))))
               (app not (app (app blur lp) s (app - n 1)))))))))
       (top))
      app
      lp
      (app #f)
      2)))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (expenv '(((letrec (id blur lp) (-> (app lp (app #f) 2) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app blur (-> id <-))
 (expenv
  '((((ran
       not
       ()
       ()
       (let-bod
        let*
        ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
        (match-clause
         (#f)
         (app <= n 1)
         (((#t) (app id a)))
         ()
         (bod
          (a n)
          (bin
           letrec
           lp
           (app lp (app #f) 2)
           ((id (λ (x) x)) (blur (λ (y) y)))
           ()
           (top))))))
      app
      (app blur lp)
      s
      (app - n 1))
     ((let-bod
       letrec
       ((id (λ (x) x))
        (blur (λ (y) y))
        (lp
         (λ (a n)
           (match
            (app <= n 1)
            ((#t) (app id a))
            ((#f)
             (let* ((r (app (app blur id) (app #t)))
                    (s (app (app blur id) (app #f))))
               (app not (app (app blur lp) s (app - n 1)))))))))
       (top))
      app
      lp
      (app #f)
      2)))))
(list 'clos/con: (list (list '(λ (x) x) (expenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app blur (-> id <-))
 (expenv
  '((((ran
       not
       ()
       ()
       (let-bod
        let*
        ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
        (match-clause
         (#f)
         (app <= n 1)
         (((#t) (app id a)))
         ()
         (bod
          (a n)
          (bin
           letrec
           lp
           (app lp (app #f) 2)
           ((id (λ (x) x)) (blur (λ (y) y)))
           ()
           (top))))))
      app
      (app blur lp)
      s
      (app - n 1))
     ((ran
       not
       ()
       ()
       (let-bod
        let*
        ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
        (match-clause
         (#f)
         (app <= n 1)
         (((#t) (app id a)))
         ()
         (bod
          (a n)
          (bin
           letrec
           lp
           (app lp (app #f) 2)
           ((id (λ (x) x)) (blur (λ (y) y)))
           ()
           (top))))))
      app
      (app blur lp)
      s
      (app - n 1))))))
(list 'clos/con: (list (list '(λ (x) x) (expenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(let* (r (-> s = (app (app blur id) (app #f)) <-)) bod)
 (expenv
  '((((ran
       not
       ()
       ()
       (let-bod
        let*
        ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
        (match-clause
         (#f)
         (app <= n 1)
         (((#t) (app id a)))
         ()
         (bod
          (a n)
          (bin
           letrec
           lp
           (app lp (app #f) 2)
           ((id (λ (x) x)) (blur (λ (y) y)))
           ()
           (top))))))
      app
      (app blur lp)
      s
      (app - n 1))
     ((let-bod
       letrec
       ((id (λ (x) x))
        (blur (λ (y) y))
        (lp
         (λ (a n)
           (match
            (app <= n 1)
            ((#t) (app id a))
            ((#f)
             (let* ((r (app (app blur id) (app #t)))
                    (s (app (app blur id) (app #f))))
               (app not (app (app blur lp) s (app - n 1)))))))))
       (top))
      app
      lp
      (app #f)
      2)))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (expenv
    '(((app not (-> (app (app blur lp) s (app - n 1)) <-))
       (letrec (id blur lp) (-> (app lp (app #f) 2) <-))))))
  (list
   '(#f ())
   (expenv
    '(((app not (-> (app (app blur lp) s (app - n 1)) <-))
       (app not (-> (app (app blur lp) s (app - n 1)) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(let* (r (-> s = (app (app blur id) (app #f)) <-)) bod)
 (expenv
  '((((ran
       not
       ()
       ()
       (let-bod
        let*
        ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
        (match-clause
         (#f)
         (app <= n 1)
         (((#t) (app id a)))
         ()
         (bod
          (a n)
          (bin
           letrec
           lp
           (app lp (app #f) 2)
           ((id (λ (x) x)) (blur (λ (y) y)))
           ()
           (top))))))
      app
      (app blur lp)
      s
      (app - n 1))
     ((ran
       not
       ()
       ()
       (let-bod
        let*
        ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
        (match-clause
         (#f)
         (app <= n 1)
         (((#t) (app id a)))
         ()
         (bod
          (a n)
          (bin
           letrec
           lp
           (app lp (app #f) 2)
           ((id (λ (x) x)) (blur (λ (y) y)))
           ()
           (top))))))
      app
      (app blur lp)
      s
      (app - n 1))))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (expenv
    '(((app not (-> (app (app blur lp) s (app - n 1)) <-))
       (letrec (id blur lp) (-> (app lp (app #f) 2) <-))))))
  (list
   '(#f ())
   (expenv
    '(((app not (-> (app (app blur lp) s (app - n 1)) <-))
       (app not (-> (app (app blur lp) s (app - n 1)) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app blur (-> lp <-))
 (expenv
  '((((ran
       not
       ()
       ()
       (let-bod
        let*
        ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
        (match-clause
         (#f)
         (app <= n 1)
         (((#t) (app id a)))
         ()
         (bod
          (a n)
          (bin
           letrec
           lp
           (app lp (app #f) 2)
           ((id (λ (x) x)) (blur (λ (y) y)))
           ()
           (top))))))
      app
      (app blur lp)
      s
      (app - n 1))
     ((let-bod
       letrec
       ((id (λ (x) x))
        (blur (λ (y) y))
        (lp
         (λ (a n)
           (match
            (app <= n 1)
            ((#t) (app id a))
            ((#f)
             (let* ((r (app (app blur id) (app #t)))
                    (s (app (app blur id) (app #f))))
               (app not (app (app blur lp) s (app - n 1)))))))))
       (top))
      app
      lp
      (app #f)
      2)))))
(list
 'clos/con:
 (list
  (list
   '(λ (a n)
      (match
       (app <= n 1)
       ((#t) (app id a))
       ((#f)
        (let* ((r (app (app blur id) (app #t)))
               (s (app (app blur id) (app #f))))
          (app not (app (app blur lp) s (app - n 1)))))))
   (expenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app blur (-> lp <-))
 (expenv
  '((((ran
       not
       ()
       ()
       (let-bod
        let*
        ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
        (match-clause
         (#f)
         (app <= n 1)
         (((#t) (app id a)))
         ()
         (bod
          (a n)
          (bin
           letrec
           lp
           (app lp (app #f) 2)
           ((id (λ (x) x)) (blur (λ (y) y)))
           ()
           (top))))))
      app
      (app blur lp)
      s
      (app - n 1))
     ((ran
       not
       ()
       ()
       (let-bod
        let*
        ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
        (match-clause
         (#f)
         (app <= n 1)
         (((#t) (app id a)))
         ()
         (bod
          (a n)
          (bin
           letrec
           lp
           (app lp (app #f) 2)
           ((id (λ (x) x)) (blur (λ (y) y)))
           ()
           (top))))))
      app
      (app blur lp)
      s
      (app - n 1))))))
(list
 'clos/con:
 (list
  (list
   '(λ (a n)
      (match
       (app <= n 1)
       ((#t) (app id a))
       ((#f)
        (let* ((r (app (app blur id) (app #t)))
               (s (app (app blur id) (app #f))))
          (app not (app (app blur lp) s (app - n 1)))))))
   (expenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app not (-> (app (app blur lp) s (app - n 1)) <-))
 (expenv
  '((((ran
       not
       ()
       ()
       (let-bod
        let*
        ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
        (match-clause
         (#f)
         (app <= n 1)
         (((#t) (app id a)))
         ()
         (bod
          (a n)
          (bin
           letrec
           lp
           (app lp (app #f) 2)
           ((id (λ (x) x)) (blur (λ (y) y)))
           ()
           (top))))))
      app
      (app blur lp)
      s
      (app - n 1))
     ((let-bod
       letrec
       ((id (λ (x) x))
        (blur (λ (y) y))
        (lp
         (λ (a n)
           (match
            (app <= n 1)
            ((#t) (app id a))
            ((#f)
             (let* ((r (app (app blur id) (app #t)))
                    (s (app (app blur id) (app #f))))
               (app not (app (app blur lp) s (app - n 1)))))))))
       (top))
      app
      lp
      (app #f)
      2)))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (expenv
    '(((app not (-> (app (app blur lp) s (app - n 1)) <-))
       (letrec (id blur lp) (-> (app lp (app #f) 2) <-))))))
  (list
   '(#t ())
   (expenv
    '(((app not (-> (app (app blur lp) s (app - n 1)) <-))
       (app not (-> (app (app blur lp) s (app - n 1)) <-))))))
  (list
   '(#f ())
   (expenv '(((letrec (id blur lp) (-> (app lp (app #f) 2) <-))))))
  (list
   '(#f ())
   (expenv
    '(((app not (-> (app (app blur lp) s (app - n 1)) <-))
       (app not (-> (app (app blur lp) s (app - n 1)) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app not (-> (app (app blur lp) s (app - n 1)) <-))
 (expenv
  '((((ran
       not
       ()
       ()
       (let-bod
        let*
        ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
        (match-clause
         (#f)
         (app <= n 1)
         (((#t) (app id a)))
         ()
         (bod
          (a n)
          (bin
           letrec
           lp
           (app lp (app #f) 2)
           ((id (λ (x) x)) (blur (λ (y) y)))
           ()
           (top))))))
      app
      (app blur lp)
      s
      (app - n 1))
     ((ran
       not
       ()
       ()
       (let-bod
        let*
        ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
        (match-clause
         (#f)
         (app <= n 1)
         (((#t) (app id a)))
         ()
         (bod
          (a n)
          (bin
           letrec
           lp
           (app lp (app #f) 2)
           ((id (λ (x) x)) (blur (λ (y) y)))
           ()
           (top))))))
      app
      (app blur lp)
      s
      (app - n 1))))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (expenv
    '(((app not (-> (app (app blur lp) s (app - n 1)) <-))
       (letrec (id blur lp) (-> (app lp (app #f) 2) <-))))))
  (list
   '(#t ())
   (expenv
    '(((app not (-> (app (app blur lp) s (app - n 1)) <-))
       (app not (-> (app (app blur lp) s (app - n 1)) <-))))))
  (list
   '(#f ())
   (expenv '(((letrec (id blur lp) (-> (app lp (app #f) 2) <-))))))
  (list
   '(#f ())
   (expenv
    '(((app not (-> (app (app blur lp) s (app - n 1)) <-))
       (app not (-> (app (app blur lp) s (app - n 1)) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> (app blur id) <-) (app #f))
 (expenv
  '((((ran
       not
       ()
       ()
       (let-bod
        let*
        ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
        (match-clause
         (#f)
         (app <= n 1)
         (((#t) (app id a)))
         ()
         (bod
          (a n)
          (bin
           letrec
           lp
           (app lp (app #f) 2)
           ((id (λ (x) x)) (blur (λ (y) y)))
           ()
           (top))))))
      app
      (app blur lp)
      s
      (app - n 1))
     ((let-bod
       letrec
       ((id (λ (x) x))
        (blur (λ (y) y))
        (lp
         (λ (a n)
           (match
            (app <= n 1)
            ((#t) (app id a))
            ((#f)
             (let* ((r (app (app blur id) (app #t)))
                    (s (app (app blur id) (app #f))))
               (app not (app (app blur lp) s (app - n 1)))))))))
       (top))
      app
      lp
      (app #f)
      2)))))
(list 'clos/con: (list (list '(λ (x) x) (expenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> (app blur id) <-) (app #f))
 (expenv
  '((((ran
       not
       ()
       ()
       (let-bod
        let*
        ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
        (match-clause
         (#f)
         (app <= n 1)
         (((#t) (app id a)))
         ()
         (bod
          (a n)
          (bin
           letrec
           lp
           (app lp (app #f) 2)
           ((id (λ (x) x)) (blur (λ (y) y)))
           ()
           (top))))))
      app
      (app blur lp)
      s
      (app - n 1))
     ((ran
       not
       ()
       ()
       (let-bod
        let*
        ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
        (match-clause
         (#f)
         (app <= n 1)
         (((#t) (app id a)))
         ()
         (bod
          (a n)
          (bin
           letrec
           lp
           (app lp (app #f) 2)
           ((id (λ (x) x)) (blur (λ (y) y)))
           ()
           (top))))))
      app
      (app blur lp)
      s
      (app - n 1))))))
(list 'clos/con: (list (list '(λ (x) x) (expenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app id (-> a <-))
 (expenv
  '((((let-bod
       letrec
       ((id (λ (x) x))
        (blur (λ (y) y))
        (lp
         (λ (a n)
           (match
            (app <= n 1)
            ((#t) (app id a))
            ((#f)
             (let* ((r (app (app blur id) (app #t)))
                    (s (app (app blur id) (app #f))))
               (app not (app (app blur lp) s (app - n 1)))))))))
       (top))
      app
      lp
      (app #f)
      2)))))
(list 'clos/con: (list (list '(#f ()) (expenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> - <-) n 1)
 (expenv
  '((((let-bod
       letrec
       ((id (λ (x) x))
        (blur (λ (y) y))
        (lp
         (λ (a n)
           (match
            (app <= n 1)
            ((#t) (app id a))
            ((#f)
             (let* ((r (app (app blur id) (app #t)))
                    (s (app (app blur id) (app #f))))
               (app not (app (app blur lp) s (app - n 1)))))))))
       (top))
      app
      lp
      (app #f)
      2)))))
'(clos/con: (#<procedure:do-sub>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> n <-) 1)
 (expenv
  '((((ran
       not
       ()
       ()
       (let-bod
        let*
        ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
        (match-clause
         (#f)
         (app <= n 1)
         (((#t) (app id a)))
         ()
         (bod
          (a n)
          (bin
           letrec
           lp
           (app lp (app #f) 2)
           ((id (λ (x) x)) (blur (λ (y) y)))
           ()
           (top))))))
      app
      (app blur lp)
      s
      (app - n 1))
     ((let-bod
       letrec
       ((id (λ (x) x))
        (blur (λ (y) y))
        (lp
         (λ (a n)
           (match
            (app <= n 1)
            ((#t) (app id a))
            ((#f)
             (let* ((r (app (app blur id) (app #t)))
                    (s (app (app blur id) (app #f))))
               (app not (app (app blur lp) s (app - n 1)))))))))
       (top))
      app
      lp
      (app #f)
      2)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> n <-) 1)
 (expenv
  '((((ran
       not
       ()
       ()
       (let-bod
        let*
        ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
        (match-clause
         (#f)
         (app <= n 1)
         (((#t) (app id a)))
         ()
         (bod
          (a n)
          (bin
           letrec
           lp
           (app lp (app #f) 2)
           ((id (λ (x) x)) (blur (λ (y) y)))
           ()
           (top))))))
      app
      (app blur lp)
      s
      (app - n 1))
     ((ran
       not
       ()
       ()
       (let-bod
        let*
        ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
        (match-clause
         (#f)
         (app <= n 1)
         (((#t) (app id a)))
         ()
         (bod
          (a n)
          (bin
           letrec
           lp
           (app lp (app #f) 2)
           ((id (λ (x) x)) (blur (λ (y) y)))
           ()
           (top))))))
      app
      (app blur lp)
      s
      (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app blur (-> id <-))
 (expenv
  '((((ran
       not
       ()
       ()
       (let-bod
        let*
        ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
        (match-clause
         (#f)
         (app <= n 1)
         (((#t) (app id a)))
         ()
         (bod
          (a n)
          (bin
           letrec
           lp
           (app lp (app #f) 2)
           ((id (λ (x) x)) (blur (λ (y) y)))
           ()
           (top))))))
      app
      (app blur lp)
      s
      (app - n 1))
     ((let-bod
       letrec
       ((id (λ (x) x))
        (blur (λ (y) y))
        (lp
         (λ (a n)
           (match
            (app <= n 1)
            ((#t) (app id a))
            ((#f)
             (let* ((r (app (app blur id) (app #t)))
                    (s (app (app blur id) (app #f))))
               (app not (app (app blur lp) s (app - n 1)))))))))
       (top))
      app
      lp
      (app #f)
      2)))))
(list 'clos/con: (list (list '(λ (x) x) (expenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app blur (-> id <-))
 (expenv
  '((((ran
       not
       ()
       ()
       (let-bod
        let*
        ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
        (match-clause
         (#f)
         (app <= n 1)
         (((#t) (app id a)))
         ()
         (bod
          (a n)
          (bin
           letrec
           lp
           (app lp (app #f) 2)
           ((id (λ (x) x)) (blur (λ (y) y)))
           ()
           (top))))))
      app
      (app blur lp)
      s
      (app - n 1))
     ((ran
       not
       ()
       ()
       (let-bod
        let*
        ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
        (match-clause
         (#f)
         (app <= n 1)
         (((#t) (app id a)))
         ()
         (bod
          (a n)
          (bin
           letrec
           lp
           (app lp (app #f) 2)
           ((id (λ (x) x)) (blur (λ (y) y)))
           ()
           (top))))))
      app
      (app blur lp)
      s
      (app - n 1))))))
(list 'clos/con: (list (list '(λ (x) x) (expenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app <= n (-> 1 <-))
 (expenv
  '((((ran
       not
       ()
       ()
       (let-bod
        let*
        ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
        (match-clause
         (#f)
         (app <= n 1)
         (((#t) (app id a)))
         ()
         (bod
          (a n)
          (bin
           letrec
           lp
           (app lp (app #f) 2)
           ((id (λ (x) x)) (blur (λ (y) y)))
           ()
           (top))))))
      app
      (app blur lp)
      s
      (app - n 1))
     ((let-bod
       letrec
       ((id (λ (x) x))
        (blur (λ (y) y))
        (lp
         (λ (a n)
           (match
            (app <= n 1)
            ((#t) (app id a))
            ((#f)
             (let* ((r (app (app blur id) (app #t)))
                    (s (app (app blur id) (app #f))))
               (app not (app (app blur lp) s (app - n 1)))))))))
       (top))
      app
      lp
      (app #f)
      2)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app <= n (-> 1 <-))
 (expenv
  '((((ran
       not
       ()
       ()
       (let-bod
        let*
        ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
        (match-clause
         (#f)
         (app <= n 1)
         (((#t) (app id a)))
         ()
         (bod
          (a n)
          (bin
           letrec
           lp
           (app lp (app #f) 2)
           ((id (λ (x) x)) (blur (λ (y) y)))
           ()
           (top))))))
      app
      (app blur lp)
      s
      (app - n 1))
     ((ran
       not
       ()
       ()
       (let-bod
        let*
        ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
        (match-clause
         (#f)
         (app <= n 1)
         (((#t) (app id a)))
         ()
         (bod
          (a n)
          (bin
           letrec
           lp
           (app lp (app #f) 2)
           ((id (λ (x) x)) (blur (λ (y) y)))
           ()
           (top))))))
      app
      (app blur lp)
      s
      (app - n 1))))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app <= n 1)
   ((#t) (app id a))
   (->
    (#f)
    (let* ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
      (app not (app (app blur lp) s (app - n 1))))
    <-))
 (expenv
  '((((ran
       not
       ()
       ()
       (let-bod
        let*
        ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
        (match-clause
         (#f)
         (app <= n 1)
         (((#t) (app id a)))
         ()
         (bod
          (a n)
          (bin
           letrec
           lp
           (app lp (app #f) 2)
           ((id (λ (x) x)) (blur (λ (y) y)))
           ()
           (top))))))
      app
      (app blur lp)
      s
      (app - n 1))
     ((let-bod
       letrec
       ((id (λ (x) x))
        (blur (λ (y) y))
        (lp
         (λ (a n)
           (match
            (app <= n 1)
            ((#t) (app id a))
            ((#f)
             (let* ((r (app (app blur id) (app #t)))
                    (s (app (app blur id) (app #f))))
               (app not (app (app blur lp) s (app - n 1)))))))))
       (top))
      app
      lp
      (app #f)
      2)))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (expenv
    '(((app not (-> (app (app blur lp) s (app - n 1)) <-))
       (letrec (id blur lp) (-> (app lp (app #f) 2) <-))))))
  (list
   '(#t ())
   (expenv
    '(((app not (-> (app (app blur lp) s (app - n 1)) <-))
       (letrec (id blur lp) (-> (app lp (app #f) 2) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app <= n 1)
   ((#t) (app id a))
   (->
    (#f)
    (let* ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
      (app not (app (app blur lp) s (app - n 1))))
    <-))
 (expenv
  '((((ran
       not
       ()
       ()
       (let-bod
        let*
        ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
        (match-clause
         (#f)
         (app <= n 1)
         (((#t) (app id a)))
         ()
         (bod
          (a n)
          (bin
           letrec
           lp
           (app lp (app #f) 2)
           ((id (λ (x) x)) (blur (λ (y) y)))
           ()
           (top))))))
      app
      (app blur lp)
      s
      (app - n 1))
     ((ran
       not
       ()
       ()
       (let-bod
        let*
        ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
        (match-clause
         (#f)
         (app <= n 1)
         (((#t) (app id a)))
         ()
         (bod
          (a n)
          (bin
           letrec
           lp
           (app lp (app #f) 2)
           ((id (λ (x) x)) (blur (λ (y) y)))
           ()
           (top))))))
      app
      (app blur lp)
      s
      (app - n 1))))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (expenv
    '(((app not (-> (app (app blur lp) s (app - n 1)) <-))
       (app not (-> (app (app blur lp) s (app - n 1)) <-))))))
  (list
   '(#f ())
   (expenv
    '(((app not (-> (app (app blur lp) s (app - n 1)) <-))
       (app not (-> (app (app blur lp) s (app - n 1)) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(letrec (id blur lp) (-> (app lp (app #f) 2) <-)) (expenv '()))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (expenv '(((letrec (id blur lp) (-> (app lp (app #f) 2) <-))))))
  (list
   '(#f ())
   (expenv '(((letrec (id blur lp) (-> (app lp (app #f) 2) <-))))))
  (list '(#f ()) (expenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app lp (app #f) (-> 2 <-)) (expenv '()))
'(clos/con: ⊥)
'(literals: (2 ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (a n)
    (->
     (match
      (app <= n 1)
      ((#t) (app id a))
      ((#f)
       (let* ((r (app (app blur id) (app #t)))
              (s (app (app blur id) (app #f))))
         (app not (app (app blur lp) s (app - n 1))))))
     <-))
 (expenv
  '((((let-bod
       letrec
       ((id (λ (x) x))
        (blur (λ (y) y))
        (lp
         (λ (a n)
           (match
            (app <= n 1)
            ((#t) (app id a))
            ((#f)
             (let* ((r (app (app blur id) (app #t)))
                    (s (app (app blur id) (app #f))))
               (app not (app (app blur lp) s (app - n 1)))))))))
       (top))
      app
      lp
      (app #f)
      2)))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (expenv '(((letrec (id blur lp) (-> (app lp (app #f) 2) <-))))))
  (list
   '(#f ())
   (expenv '(((letrec (id blur lp) (-> (app lp (app #f) 2) <-))))))
  (list '(#f ()) (expenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(letrec (id (-> blur = (λ (y) y) <-) lp) bod) (expenv '()))
(list 'clos/con: (list (list '(λ (y) y) (expenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (x) (-> x <-))
 (expenv
  '((((match-clause
       (#t)
       (app <= n 1)
       ()
       (((#f)
         (let* ((r (app (app blur id) (app #t)))
                (s (app (app blur id) (app #f))))
           (app not (app (app blur lp) s (app - n 1))))))
       (bod
        (a n)
        (bin
         letrec
         lp
         (app lp (app #f) 2)
         ((id (λ (x) x)) (blur (λ (y) y)))
         ()
         (top))))
      app
      id
      a)
     ((let-bod
       letrec
       ((id (λ (x) x))
        (blur (λ (y) y))
        (lp
         (λ (a n)
           (match
            (app <= n 1)
            ((#t) (app id a))
            ((#f)
             (let* ((r (app (app blur id) (app #t)))
                    (s (app (app blur id) (app #f))))
               (app not (app (app blur lp) s (app - n 1)))))))))
       (top))
      app
      lp
      (app #f)
      2)))))
(list 'clos/con: (list (list '(#f ()) (expenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (x) (-> x <-))
 (expenv
  '((((match-clause
       (#t)
       (app <= n 1)
       ()
       (((#f)
         (let* ((r (app (app blur id) (app #t)))
                (s (app (app blur id) (app #f))))
           (app not (app (app blur lp) s (app - n 1))))))
       (bod
        (a n)
        (bin
         letrec
         lp
         (app lp (app #f) 2)
         ((id (λ (x) x)) (blur (λ (y) y)))
         ()
         (top))))
      app
      id
      a)
     ((ran
       not
       ()
       ()
       (let-bod
        let*
        ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
        (match-clause
         (#f)
         (app <= n 1)
         (((#t) (app id a)))
         ()
         (bod
          (a n)
          (bin
           letrec
           lp
           (app lp (app #f) 2)
           ((id (λ (x) x)) (blur (λ (y) y)))
           ()
           (top))))))
      app
      (app blur lp)
      s
      (app - n 1))))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (expenv
    '(((app not (-> (app (app blur lp) s (app - n 1)) <-))
       (letrec (id blur lp) (-> (app lp (app #f) 2) <-))))))
  (list
   '(#f ())
   (expenv '(((letrec (id blur lp) (-> (app lp (app #f) 2) <-))))))
  (list
   '(#f ())
   (expenv
    '(((app not (-> (app (app blur lp) s (app - n 1)) <-))
       (app not (-> (app (app blur lp) s (app - n 1)) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app - (-> n <-) 1)
 (expenv
  '((((let-bod
       letrec
       ((id (λ (x) x))
        (blur (λ (y) y))
        (lp
         (λ (a n)
           (match
            (app <= n 1)
            ((#t) (app id a))
            ((#f)
             (let* ((r (app (app blur id) (app #t)))
                    (s (app (app blur id) (app #f))))
               (app not (app (app blur lp) s (app - n 1)))))))))
       (top))
      app
      lp
      (app #f)
      2)))))
'(clos/con: ⊥)
'(literals: (2 ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (app <= n 1)
   ((#t) (app id a))
   (->
    (#f)
    (let* ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
      (app not (app (app blur lp) s (app - n 1))))
    <-))
 (expenv
  '((((let-bod
       letrec
       ((id (λ (x) x))
        (blur (λ (y) y))
        (lp
         (λ (a n)
           (match
            (app <= n 1)
            ((#t) (app id a))
            ((#f)
             (let* ((r (app (app blur id) (app #t)))
                    (s (app (app blur id) (app #f))))
               (app not (app (app blur lp) s (app - n 1)))))))))
       (top))
      app
      lp
      (app #f)
      2)))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (expenv '(((letrec (id blur lp) (-> (app lp (app #f) 2) <-))))))
  (list
   '(#f ())
   (expenv '(((letrec (id blur lp) (-> (app lp (app #f) 2) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app <= n (-> 1 <-))
 (expenv
  '((((let-bod
       letrec
       ((id (λ (x) x))
        (blur (λ (y) y))
        (lp
         (λ (a n)
           (match
            (app <= n 1)
            ((#t) (app id a))
            ((#f)
             (let* ((r (app (app blur id) (app #t)))
                    (s (app (app blur id) (app #f))))
               (app not (app (app blur lp) s (app - n 1)))))))))
       (top))
      app
      lp
      (app #f)
      2)))))
'(clos/con: ⊥)
'(literals: (1 ⊥ ⊥ ⊥))
(list
 'query:
 '(app <= (-> n <-) 1)
 (expenv
  '((((let-bod
       letrec
       ((id (λ (x) x))
        (blur (λ (y) y))
        (lp
         (λ (a n)
           (match
            (app <= n 1)
            ((#t) (app id a))
            ((#f)
             (let* ((r (app (app blur id) (app #t)))
                    (s (app (app blur id) (app #f))))
               (app not (app (app blur lp) s (app - n 1)))))))))
       (top))
      app
      lp
      (app #f)
      2)))))
'(clos/con: ⊥)
'(literals: (2 ⊥ ⊥ ⊥))
(list
 'query:
 '(app (app blur id) (-> (app #t) <-))
 (expenv
  '((((let-bod
       letrec
       ((id (λ (x) x))
        (blur (λ (y) y))
        (lp
         (λ (a n)
           (match
            (app <= n 1)
            ((#t) (app id a))
            ((#f)
             (let* ((r (app (app blur id) (app #t)))
                    (s (app (app blur id) (app #f))))
               (app not (app (app blur lp) s (app - n 1)))))))))
       (top))
      app
      lp
      (app #f)
      2)))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (expenv '(((letrec (id blur lp) (-> (app lp (app #f) 2) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(let* (r s) (-> (app not (app (app blur lp) s (app - n 1))) <-))
 (expenv
  '((((ran
       not
       ()
       ()
       (let-bod
        let*
        ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
        (match-clause
         (#f)
         (app <= n 1)
         (((#t) (app id a)))
         ()
         (bod
          (a n)
          (bin
           letrec
           lp
           (app lp (app #f) 2)
           ((id (λ (x) x)) (blur (λ (y) y)))
           ()
           (top))))))
      app
      (app blur lp)
      s
      (app - n 1))
     ((let-bod
       letrec
       ((id (λ (x) x))
        (blur (λ (y) y))
        (lp
         (λ (a n)
           (match
            (app <= n 1)
            ((#t) (app id a))
            ((#f)
             (let* ((r (app (app blur id) (app #t)))
                    (s (app (app blur id) (app #f))))
               (app not (app (app blur lp) s (app - n 1)))))))))
       (top))
      app
      lp
      (app #f)
      2)))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (expenv
    '(((app not (-> (app (app blur lp) s (app - n 1)) <-))
       (letrec (id blur lp) (-> (app lp (app #f) 2) <-))))))
  (list
   '(#t ())
   (expenv
    '(((app not (-> (app (app blur lp) s (app - n 1)) <-))
       (letrec (id blur lp) (-> (app lp (app #f) 2) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(let* (r s) (-> (app not (app (app blur lp) s (app - n 1))) <-))
 (expenv
  '((((ran
       not
       ()
       ()
       (let-bod
        let*
        ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
        (match-clause
         (#f)
         (app <= n 1)
         (((#t) (app id a)))
         ()
         (bod
          (a n)
          (bin
           letrec
           lp
           (app lp (app #f) 2)
           ((id (λ (x) x)) (blur (λ (y) y)))
           ()
           (top))))))
      app
      (app blur lp)
      s
      (app - n 1))
     ((ran
       not
       ()
       ()
       (let-bod
        let*
        ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
        (match-clause
         (#f)
         (app <= n 1)
         (((#t) (app id a)))
         ()
         (bod
          (a n)
          (bin
           letrec
           lp
           (app lp (app #f) 2)
           ((id (λ (x) x)) (blur (λ (y) y)))
           ()
           (top))))))
      app
      (app blur lp)
      s
      (app - n 1))))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (expenv
    '(((app not (-> (app (app blur lp) s (app - n 1)) <-))
       (app not (-> (app (app blur lp) s (app - n 1)) <-))))))
  (list
   '(#f ())
   (expenv
    '(((app not (-> (app (app blur lp) s (app - n 1)) <-))
       (app not (-> (app (app blur lp) s (app - n 1)) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app <= (-> n <-) 1)
 (expenv
  '((((ran
       not
       ()
       ()
       (let-bod
        let*
        ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
        (match-clause
         (#f)
         (app <= n 1)
         (((#t) (app id a)))
         ()
         (bod
          (a n)
          (bin
           letrec
           lp
           (app lp (app #f) 2)
           ((id (λ (x) x)) (blur (λ (y) y)))
           ()
           (top))))))
      app
      (app blur lp)
      s
      (app - n 1))
     ((let-bod
       letrec
       ((id (λ (x) x))
        (blur (λ (y) y))
        (lp
         (λ (a n)
           (match
            (app <= n 1)
            ((#t) (app id a))
            ((#f)
             (let* ((r (app (app blur id) (app #t)))
                    (s (app (app blur id) (app #f))))
               (app not (app (app blur lp) s (app - n 1)))))))))
       (top))
      app
      lp
      (app #f)
      2)))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app <= (-> n <-) 1)
 (expenv
  '((((ran
       not
       ()
       ()
       (let-bod
        let*
        ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
        (match-clause
         (#f)
         (app <= n 1)
         (((#t) (app id a)))
         ()
         (bod
          (a n)
          (bin
           letrec
           lp
           (app lp (app #f) 2)
           ((id (λ (x) x)) (blur (λ (y) y)))
           ()
           (top))))))
      app
      (app blur lp)
      s
      (app - n 1))
     ((ran
       not
       ()
       ()
       (let-bod
        let*
        ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
        (match-clause
         (#f)
         (app <= n 1)
         (((#t) (app id a)))
         ()
         (bod
          (a n)
          (bin
           letrec
           lp
           (app lp (app #f) 2)
           ((id (λ (x) x)) (blur (λ (y) y)))
           ()
           (top))))))
      app
      (app blur lp)
      s
      (app - n 1))))))
'(clos/con: ⊥)
'(literals: (⊤ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (app blur lp) (-> s <-) (app - n 1))
 (expenv
  '((((let-bod
       letrec
       ((id (λ (x) x))
        (blur (λ (y) y))
        (lp
         (λ (a n)
           (match
            (app <= n 1)
            ((#t) (app id a))
            ((#f)
             (let* ((r (app (app blur id) (app #t)))
                    (s (app (app blur id) (app #f))))
               (app not (app (app blur lp) s (app - n 1)))))))))
       (top))
      app
      lp
      (app #f)
      2)))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (expenv '(((letrec (id blur lp) (-> (app lp (app #f) 2) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app <= n 1) <-)
   ((#t) (app id a))
   ((#f)
    (let* ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
      (app not (app (app blur lp) s (app - n 1))))))
 (expenv
  '((((ran
       not
       ()
       ()
       (let-bod
        let*
        ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
        (match-clause
         (#f)
         (app <= n 1)
         (((#t) (app id a)))
         ()
         (bod
          (a n)
          (bin
           letrec
           lp
           (app lp (app #f) 2)
           ((id (λ (x) x)) (blur (λ (y) y)))
           ()
           (top))))))
      app
      (app blur lp)
      s
      (app - n 1))
     ((let-bod
       letrec
       ((id (λ (x) x))
        (blur (λ (y) y))
        (lp
         (λ (a n)
           (match
            (app <= n 1)
            ((#t) (app id a))
            ((#f)
             (let* ((r (app (app blur id) (app #t)))
                    (s (app (app blur id) (app #f))))
               (app not (app (app blur lp) s (app - n 1)))))))))
       (top))
      app
      lp
      (app #f)
      2)))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (expenv
    '(((app not (-> (app (app blur lp) s (app - n 1)) <-))
       (letrec (id blur lp) (-> (app lp (app #f) 2) <-))))))
  (list
   '(#t ())
   (expenv
    '(((app not (-> (app (app blur lp) s (app - n 1)) <-))
       (letrec (id blur lp) (-> (app lp (app #f) 2) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(match
   (-> (app <= n 1) <-)
   ((#t) (app id a))
   ((#f)
    (let* ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
      (app not (app (app blur lp) s (app - n 1))))))
 (expenv
  '((((ran
       not
       ()
       ()
       (let-bod
        let*
        ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
        (match-clause
         (#f)
         (app <= n 1)
         (((#t) (app id a)))
         ()
         (bod
          (a n)
          (bin
           letrec
           lp
           (app lp (app #f) 2)
           ((id (λ (x) x)) (blur (λ (y) y)))
           ()
           (top))))))
      app
      (app blur lp)
      s
      (app - n 1))
     ((ran
       not
       ()
       ()
       (let-bod
        let*
        ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
        (match-clause
         (#f)
         (app <= n 1)
         (((#t) (app id a)))
         ()
         (bod
          (a n)
          (bin
           letrec
           lp
           (app lp (app #f) 2)
           ((id (λ (x) x)) (blur (λ (y) y)))
           ()
           (top))))))
      app
      (app blur lp)
      s
      (app - n 1))))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (expenv
    '(((app not (-> (app (app blur lp) s (app - n 1)) <-))
       (app not (-> (app (app blur lp) s (app - n 1)) <-))))))
  (list
   '(#f ())
   (expenv
    '(((app not (-> (app (app blur lp) s (app - n 1)) <-))
       (app not (-> (app (app blur lp) s (app - n 1)) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (y) (-> y <-))
 (expenv
  '((((rat
       ((app #t))
       (bin
        let*
        r
        (app not (app (app blur lp) s (app - n 1)))
        ()
        ((s (app (app blur id) (app #f))))
        (match-clause
         (#f)
         (app <= n 1)
         (((#t) (app id a)))
         ()
         (bod
          (a n)
          (bin
           letrec
           lp
           (app lp (app #f) 2)
           ((id (λ (x) x)) (blur (λ (y) y)))
           ()
           (top))))))
      app
      blur
      id)
     ((let-bod
       letrec
       ((id (λ (x) x))
        (blur (λ (y) y))
        (lp
         (λ (a n)
           (match
            (app <= n 1)
            ((#t) (app id a))
            ((#f)
             (let* ((r (app (app blur id) (app #t)))
                    (s (app (app blur id) (app #f))))
               (app not (app (app blur lp) s (app - n 1)))))))))
       (top))
      app
      lp
      (app #f)
      2)))))
(list 'clos/con: (list (list '(λ (x) x) (expenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(λ (y) (-> y <-))
 (expenv
  '((((rat
       ((app #t))
       (bin
        let*
        r
        (app not (app (app blur lp) s (app - n 1)))
        ()
        ((s (app (app blur id) (app #f))))
        (match-clause
         (#f)
         (app <= n 1)
         (((#t) (app id a)))
         ()
         (bod
          (a n)
          (bin
           letrec
           lp
           (app lp (app #f) 2)
           ((id (λ (x) x)) (blur (λ (y) y)))
           ()
           (top))))))
      app
      blur
      id)
     ((ran
       not
       ()
       ()
       (let-bod
        let*
        ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
        (match-clause
         (#f)
         (app <= n 1)
         (((#t) (app id a)))
         ()
         (bod
          (a n)
          (bin
           letrec
           lp
           (app lp (app #f) 2)
           ((id (λ (x) x)) (blur (λ (y) y)))
           ()
           (top))))))
      app
      (app blur lp)
      s
      (app - n 1))))))
(list 'clos/con: (list (list '(λ (x) x) (expenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app not (-> (app (app blur lp) s (app - n 1)) <-))
 (expenv
  '((((let-bod
       letrec
       ((id (λ (x) x))
        (blur (λ (y) y))
        (lp
         (λ (a n)
           (match
            (app <= n 1)
            ((#t) (app id a))
            ((#f)
             (let* ((r (app (app blur id) (app #t)))
                    (s (app (app blur id) (app #f))))
               (app not (app (app blur lp) s (app - n 1)))))))))
       (top))
      app
      lp
      (app #f)
      2)))))
(list
 'clos/con:
 (list
  (list
   '(#f ())
   (expenv
    '(((app not (-> (app (app blur lp) s (app - n 1)) <-))
       (letrec (id blur lp) (-> (app lp (app #f) 2) <-))))))
  (list
   '(#t ())
   (expenv
    '(((app not (-> (app (app blur lp) s (app - n 1)) <-))
       (letrec (id blur lp) (-> (app lp (app #f) 2) <-))))))
  (list
   '(#f ())
   (expenv '(((letrec (id blur lp) (-> (app lp (app #f) 2) <-))))))
  (list
   '(#f ())
   (expenv
    '(((app not (-> (app (app blur lp) s (app - n 1)) <-))
       (app not (-> (app (app blur lp) s (app - n 1)) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> blur <-) id)
 (expenv
  '((((let-bod
       letrec
       ((id (λ (x) x))
        (blur (λ (y) y))
        (lp
         (λ (a n)
           (match
            (app <= n 1)
            ((#t) (app id a))
            ((#f)
             (let* ((r (app (app blur id) (app #t)))
                    (s (app (app blur id) (app #f))))
               (app not (app (app blur lp) s (app - n 1)))))))))
       (top))
      app
      lp
      (app #f)
      2)))))
(list 'clos/con: (list (list '(λ (y) y) (expenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(let* (r s) (-> (app not (app (app blur lp) s (app - n 1))) <-))
 (expenv
  '((((let-bod
       letrec
       ((id (λ (x) x))
        (blur (λ (y) y))
        (lp
         (λ (a n)
           (match
            (app <= n 1)
            ((#t) (app id a))
            ((#f)
             (let* ((r (app (app blur id) (app #t)))
                    (s (app (app blur id) (app #f))))
               (app not (app (app blur lp) s (app - n 1)))))))))
       (top))
      app
      lp
      (app #f)
      2)))))
(list
 'clos/con:
 (list
  (list
   '(#t ())
   (expenv '(((letrec (id blur lp) (-> (app lp (app #f) 2) <-))))))
  (list
   '(#f ())
   (expenv '(((letrec (id blur lp) (-> (app lp (app #f) 2) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> #f <-))
 (expenv
  '((((ran
       not
       ()
       ()
       (let-bod
        let*
        ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
        (match-clause
         (#f)
         (app <= n 1)
         (((#t) (app id a)))
         ()
         (bod
          (a n)
          (bin
           letrec
           lp
           (app lp (app #f) 2)
           ((id (λ (x) x)) (blur (λ (y) y)))
           ()
           (top))))))
      app
      (app blur lp)
      s
      (app - n 1))
     ((let-bod
       letrec
       ((id (λ (x) x))
        (blur (λ (y) y))
        (lp
         (λ (a n)
           (match
            (app <= n 1)
            ((#t) (app id a))
            ((#f)
             (let* ((r (app (app blur id) (app #t)))
                    (s (app (app blur id) (app #f))))
               (app not (app (app blur lp) s (app - n 1)))))))))
       (top))
      app
      lp
      (app #f)
      2)))))
(list
 'clos/con:
 (list
  (list
   #f
   (expenv
    '(((app not (-> (app (app blur lp) s (app - n 1)) <-))
       (letrec (id blur lp) (-> (app lp (app #f) 2) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> #f <-))
 (expenv
  '((((ran
       not
       ()
       ()
       (let-bod
        let*
        ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
        (match-clause
         (#f)
         (app <= n 1)
         (((#t) (app id a)))
         ()
         (bod
          (a n)
          (bin
           letrec
           lp
           (app lp (app #f) 2)
           ((id (λ (x) x)) (blur (λ (y) y)))
           ()
           (top))))))
      app
      (app blur lp)
      s
      (app - n 1))
     ((ran
       not
       ()
       ()
       (let-bod
        let*
        ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
        (match-clause
         (#f)
         (app <= n 1)
         (((#t) (app id a)))
         ()
         (bod
          (a n)
          (bin
           letrec
           lp
           (app lp (app #f) 2)
           ((id (λ (x) x)) (blur (λ (y) y)))
           ()
           (top))))))
      app
      (app blur lp)
      s
      (app - n 1))))))
(list
 'clos/con:
 (list
  (list
   #f
   (expenv
    '(((app not (-> (app (app blur lp) s (app - n 1)) <-))
       (app not (-> (app (app blur lp) s (app - n 1)) <-))))))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> blur <-) id)
 (expenv
  '((((ran
       not
       ()
       ()
       (let-bod
        let*
        ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
        (match-clause
         (#f)
         (app <= n 1)
         (((#t) (app id a)))
         ()
         (bod
          (a n)
          (bin
           letrec
           lp
           (app lp (app #f) 2)
           ((id (λ (x) x)) (blur (λ (y) y)))
           ()
           (top))))))
      app
      (app blur lp)
      s
      (app - n 1))
     ((let-bod
       letrec
       ((id (λ (x) x))
        (blur (λ (y) y))
        (lp
         (λ (a n)
           (match
            (app <= n 1)
            ((#t) (app id a))
            ((#f)
             (let* ((r (app (app blur id) (app #t)))
                    (s (app (app blur id) (app #f))))
               (app not (app (app blur lp) s (app - n 1)))))))))
       (top))
      app
      lp
      (app #f)
      2)))))
(list 'clos/con: (list (list '(λ (y) y) (expenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> blur <-) id)
 (expenv
  '((((ran
       not
       ()
       ()
       (let-bod
        let*
        ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
        (match-clause
         (#f)
         (app <= n 1)
         (((#t) (app id a)))
         ()
         (bod
          (a n)
          (bin
           letrec
           lp
           (app lp (app #f) 2)
           ((id (λ (x) x)) (blur (λ (y) y)))
           ()
           (top))))))
      app
      (app blur lp)
      s
      (app - n 1))
     ((ran
       not
       ()
       ()
       (let-bod
        let*
        ((r (app (app blur id) (app #t))) (s (app (app blur id) (app #f))))
        (match-clause
         (#f)
         (app <= n 1)
         (((#t) (app id a)))
         ()
         (bod
          (a n)
          (bin
           letrec
           lp
           (app lp (app #f) 2)
           ((id (λ (x) x)) (blur (λ (y) y)))
           ()
           (top))))))
      app
      (app blur lp)
      s
      (app - n 1))))))
(list 'clos/con: (list (list '(λ (y) y) (expenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> not <-) (app (app blur lp) s (app - n 1)))
 (expenv
  '((((let-bod
       letrec
       ((id (λ (x) x))
        (blur (λ (y) y))
        (lp
         (λ (a n)
           (match
            (app <= n 1)
            ((#t) (app id a))
            ((#f)
             (let* ((r (app (app blur id) (app #t)))
                    (s (app (app blur id) (app #f))))
               (app not (app (app blur lp) s (app - n 1)))))))))
       (top))
      app
      lp
      (app #f)
      2)))))
'(clos/con: (#<procedure:do-not>))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app (-> id <-) a)
 (expenv
  '((((let-bod
       letrec
       ((id (λ (x) x))
        (blur (λ (y) y))
        (lp
         (λ (a n)
           (match
            (app <= n 1)
            ((#t) (app id a))
            ((#f)
             (let* ((r (app (app blur id) (app #t)))
                    (s (app (app blur id) (app #f))))
               (app not (app (app blur lp) s (app - n 1)))))))))
       (top))
      app
      lp
      (app #f)
      2)))))
(list 'clos/con: (list (list '(λ (x) x) (expenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app blur (-> id <-))
 (expenv
  '((((let-bod
       letrec
       ((id (λ (x) x))
        (blur (λ (y) y))
        (lp
         (λ (a n)
           (match
            (app <= n 1)
            ((#t) (app id a))
            ((#f)
             (let* ((r (app (app blur id) (app #t)))
                    (s (app (app blur id) (app #f))))
               (app not (app (app blur lp) s (app - n 1)))))))))
       (top))
      app
      lp
      (app #f)
      2)))))
(list 'clos/con: (list (list '(λ (x) x) (expenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list
 'query:
 '(app blur (-> lp <-))
 (expenv
  '((((let-bod
       letrec
       ((id (λ (x) x))
        (blur (λ (y) y))
        (lp
         (λ (a n)
           (match
            (app <= n 1)
            ((#t) (app id a))
            ((#f)
             (let* ((r (app (app blur id) (app #t)))
                    (s (app (app blur id) (app #f))))
               (app not (app (app blur lp) s (app - n 1)))))))))
       (top))
      app
      lp
      (app #f)
      2)))))
(list
 'clos/con:
 (list
  (list
   '(λ (a n)
      (match
       (app <= n 1)
       ((#t) (app id a))
       ((#f)
        (let* ((r (app (app blur id) (app #t)))
               (s (app (app blur id) (app #f))))
          (app not (app (app blur lp) s (app - n 1)))))))
   (expenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
(list 'query: '(app (-> #f <-)) (expenv '()))
(list 'clos/con: (list (list #f (expenv '()))))
'(literals: (⊥ ⊥ ⊥ ⊥))
