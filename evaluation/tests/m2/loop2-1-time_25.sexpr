'(clean-cache
  loop2-1
  2
  26
  letrec
  "\"'(eval ((top) letrec (lp1) ...) (env ()))\""
  #f)
'(clean-cache
  loop2-1
  2
  26
  match
  "\"'(eval (λ (i x) (-> (match (app = 0 i) ...) <-)) (env ((□? (i x)))))\""
  #f)
'(clean-cache
  loop2-1
  2
  26
  ref-or-constructor
  "\"'(eval (match (app = 0 i) (#f) (_ (-> x <-))) (env ((□? (i x)))))\""
  #f)
'(clean-cache
  loop2-1
  2
  26
  letrec
  "\"'(eval\n  (match (app = 0 i) ((#f) (-> (letrec (lp2) ...) <-)) _)\n  (env ((□? (i x)))))\""
  #f)
'(clean-cache
  loop2-1
  2
  26
  match
  "\"'(eval\n  (λ (j f y) (-> (match (app = 0 j) ...) <-))\n  (env ((□? (j f y)) (□? (i x)))))\""
  #f)
'(clean-cache
  loop2-1
  2
  26
  app
  "\"'(eval\n  (match (app = 0 j) (#f) (_ (-> (app lp1 (app - i 1) y) <-)))\n  (env ((□? (j f y)) (□? (i x)))))\""
  #f)
'(clean-cache
  loop2-1
  2
  26
  ref-or-constructor
  "\"'(eval (app lp1 (app - i 1) (-> y <-)) (env ((□? (j f y)) (□? (i x)))))\""
  #f)
'(clean-cache
  loop2-1
  2
  25
  26
  app
  "\"'(eval (app lp1 (-> (app - i 1) <-) y) (env ((□? (j f y)) (□? (i x)))))\""
  21
  13
  3
  5
  1
  2
  3
  1
  1/5
  9
  #f
  17/13
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  loop2-1
  2
  25
  26
  ref-or-constructor
  "\"'(eval (app - (-> i <-) 1) (env ((□? (j f y)) (□? (i x)))))\""
  21
  13
  3
  5
  1
  2
  3
  1
  1/5
  9
  #f
  17/13
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  loop2-1
  2
  26
  app
  "\"'(eval\n  (match (app = 0 j) ((#f) (-> (app lp2 (app - j 1) f (app f y)) <-)) _)\n  (env ((□? (j f y)) (□? (i x)))))\""
  #f)
'(clean-cache
  loop2-1
  2
  26
  app
  "\"'(eval\n  (app lp2 (app - j 1) f (-> (app f y) <-))\n  (env ((□? (j f y)) (□? (i x)))))\""
  #f)
'(clean-cache
  loop2-1
  2
  26
  ref-or-constructor
  "\"'(eval (app f (-> y <-)) (env ((□? (j f y)) (□? (i x)))))\""
  #f)
'(clean-cache
  loop2-1
  2
  25
  26
  ref-or-constructor
  "\"'(eval (app (-> f <-) y) (env ((□? (j f y)) (□? (i x)))))\""
  14
  7
  3
  4
  0
  0
  0
  1
  0
  7
  #t
  1
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  loop2-1
  2
  25
  26
  ref-or-constructor
  "\"'(eval\n  (app lp2 (app - j 1) (-> f <-) (app f y))\n  (env ((□? (j f y)) (□? (i x)))))\""
  13
  6
  3
  4
  0
  0
  0
  1
  0
  6
  #t
  1
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  loop2-1
  2
  25
  26
  app
  "\"'(eval\n  (app lp2 (-> (app - j 1) <-) f (app f y))\n  (env ((□? (j f y)) (□? (i x)))))\""
  28
  21
  3
  4
  0
  0
  0
  1
  0
  13
  #f
  29/21
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  loop2-1
  2
  25
  26
  ref-or-constructor
  "\"'(eval (app - (-> j <-) 1) (env ((□? (j f y)) (□? (i x)))))\""
  28
  21
  3
  4
  0
  0
  0
  1
  0
  13
  #f
  29/21
  ((1 1 0) (1 1 0) (1 1 0)))
'(clean-cache
  loop2-1
  2
  25
  26
  app
  "\"'(eval (match (-> (app = 0 j) <-) (#f) _) (env ((□? (j f y)) (□? (i x)))))\""
  44
  37
  3
  4
  0
  0
  0
  1
  0
  24
  #f
  50/37
  ((2 2 0) (2 2 0) (2 2 0)))
'(clean-cache
  loop2-1
  2
  25
  26
  ref-or-constructor
  "\"'(eval (app = 0 (-> j <-)) (env ((□? (j f y)) (□? (i x)))))\""
  29
  22
  3
  4
  0
  0
  0
  1
  0
  13
  #f
  31/22
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(clean-cache
  loop2-1
  2
  26
  app
  "\"'(eval (letrec (lp2) (-> (app lp2 10 (λ (n) ...) x) <-)) (env ((□? (i x)))))\""
  #f)
'(clean-cache
  loop2-1
  2
  26
  ref-or-constructor
  "\"'(eval (app lp2 10 (λ (n) ...) (-> x <-)) (env ((□? (i x)))))\""
  #f)
'(clean-cache
  loop2-1
  2
  26
  app
  "\"'(eval (λ (n) (-> (app + n i) <-)) (env ((□? (n)) (□? (i x)))))\""
  #f)
'(clean-cache
  loop2-1
  2
  25
  26
  ref-or-constructor
  "\"'(eval (app + n (-> i <-)) (env ((□? (n)) (□? (i x)))))\""
  23
  14
  3
  6
  1
  2
  3
  1
  1/6
  9
  #f
  19/14
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  loop2-1
  2
  26
  ref-or-constructor
  "\"'(eval (app + (-> n <-) i) (env ((□? (n)) (□? (i x)))))\""
  #f)
'(clean-cache
  loop2-1
  2
  25
  26
  app
  "\"'(eval (match (-> (app = 0 i) <-) (#f) _) (env ((□? (i x)))))\""
  31
  23
  3
  5
  4
  2
  6
  1
  2/9
  16
  #f
  30/23
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  loop2-1
  2
  25
  26
  ref-or-constructor
  "\"'(eval (app = 0 (-> i <-)) (env ((□? (i x)))))\""
  22
  14
  3
  5
  1
  2
  3
  1
  1/6
  9
  #f
  19/14
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(clean-cache
  loop2-1
  2
  26
  app
  "\"'(eval (letrec (lp1) (-> (app lp1 10 0) <-)) (env ()))\""
  #f)
'(shuffled-cache
  0
  loop2-1
  2
  26
  app
  "\"'(eval (letrec (lp1) (-> (app lp1 10 0) <-)) (env ()))\""
  #f)
'(shuffled-cache
  0
  loop2-1
  2
  25
  26
  ref-or-constructor
  "\"'(eval (app + n (-> i <-)) (env ((□? (n)) (□? (i x)))))\""
  23
  14
  3
  6
  1
  2
  3
  1
  1/6
  9
  #f
  19/14
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  loop2-1
  2
  25
  26
  app
  "\"'(eval (match (-> (app = 0 i) <-) (#f) _) (env ((□? (i x)))))\""
  30
  21
  3
  6
  4
  2
  6
  1
  1/4
  14
  #f
  4/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  loop2-1
  2
  26
  match
  "\"'(eval\n  (λ (j f y) (-> (match (app = 0 j) ...) <-))\n  (env ((□? (j f y)) (□? (i x)))))\""
  #f)
'(shuffled-cache
  0
  loop2-1
  2
  26
  ref-or-constructor
  "\"'(eval (app lp2 10 (λ (n) ...) (-> x <-)) (env ((□? (i x)))))\""
  #f)
'(shuffled-cache
  0
  loop2-1
  2
  26
  ref-or-constructor
  "\"'(eval (match (app = 0 i) (#f) (_ (-> x <-))) (env ((□? (i x)))))\""
  #f)
'(shuffled-cache
  0
  loop2-1
  2
  26
  app
  "\"'(eval\n  (app lp2 (app - j 1) f (-> (app f y) <-))\n  (env ((□? (j f y)) (□? (i x)))))\""
  #f)
'(shuffled-cache
  0
  loop2-1
  2
  26
  letrec
  "\"'(eval ((top) letrec (lp1) ...) (env ()))\""
  #f)
'(shuffled-cache
  0
  loop2-1
  2
  26
  app
  "\"'(eval\n  (match (app = 0 j) ((#f) (-> (app lp2 (app - j 1) f (app f y)) <-)) _)\n  (env ((□? (j f y)) (□? (i x)))))\""
  #f)
'(shuffled-cache
  0
  loop2-1
  2
  26
  ref-or-constructor
  "\"'(eval (app f (-> y <-)) (env ((□? (j f y)) (□? (i x)))))\""
  #f)
'(shuffled-cache
  0
  loop2-1
  2
  26
  ref-or-constructor
  "\"'(eval (app lp1 (app - i 1) (-> y <-)) (env ((□? (j f y)) (□? (i x)))))\""
  #f)
'(shuffled-cache
  0
  loop2-1
  2
  26
  match
  "\"'(eval (λ (i x) (-> (match (app = 0 i) ...) <-)) (env ((□? (i x)))))\""
  #f)
'(shuffled-cache
  0
  loop2-1
  2
  25
  26
  ref-or-constructor
  "\"'(eval (app - (-> i <-) 1) (env ((□? (j f y)) (□? (i x)))))\""
  21
  13
  3
  5
  1
  2
  3
  1
  1/5
  9
  #f
  17/13
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  loop2-1
  2
  25
  26
  ref-or-constructor
  "\"'(eval\n  (app lp2 (app - j 1) (-> f <-) (app f y))\n  (env ((□? (j f y)) (□? (i x)))))\""
  153
  125
  16
  12
  49
  8
  57
  1
  127/245
  92
  #t
  33/25
  ((37/2 37/2 0) (37/2 37/2 0) (37/2 37/2 0)))
'(shuffled-cache
  0
  loop2-1
  2
  25
  26
  ref-or-constructor
  "\"'(eval (app (-> f <-) y) (env ((□? (j f y)) (□? (i x)))))\""
  154
  126
  16
  12
  49
  8
  57
  1
  127/280
  93
  #t
  4/3
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  loop2-1
  2
  25
  26
  ref-or-constructor
  "\"'(eval (app = 0 (-> j <-)) (env ((□? (j f y)) (□? (i x)))))\""
  235
  207
  16
  12
  88
  8
  96
  1
  17289/37240
  142
  #f
  281/207
  ((7 7 0) (15/2 15/2 0) (15/2 15/2 0)))
'(shuffled-cache
  0
  loop2-1
  2
  25
  26
  app
  "\"'(eval (letrec (lp2) (-> (app lp2 10 (λ (n) ...) x) <-)) (env ((□? (i x)))))\""
  456
  397
  37
  22
  233
  29
  262
  1
  128543/167580
  229
  #f
  579/397
  ((23 23 0) (23 23 0) (23 23 0)))
'(shuffled-cache
  0
  loop2-1
  2
  25
  26
  ref-or-constructor
  "\"'(eval (app - (-> j <-) 1) (env ((□? (j f y)) (□? (i x)))))\""
  457
  398
  37
  22
  233
  29
  262
  1
  256897/335160
  229
  #f
  581/398
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  loop2-1
  2
  25
  26
  app
  "\"'(eval (app lp1 (-> (app - i 1) <-) y) (env ((□? (j f y)) (□? (i x)))))\""
  457
  398
  37
  22
  233
  29
  262
  1
  256897/335160
  229
  #f
  581/398
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  loop2-1
  2
  25
  26
  ref-or-constructor
  "\"'(eval (app = 0 (-> i <-)) (env ((□? (i x)))))\""
  458
  399
  37
  22
  233
  29
  262
  1
  252907/335160
  229
  #f
  583/399
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  loop2-1
  2
  25
  26
  letrec
  "\"'(eval\n  (match (app = 0 i) ((#f) (-> (letrec (lp2) ...) <-)) _)\n  (env ((□? (i x)))))\""
  462
  403
  37
  22
  235
  29
  264
  1
  49943/67032
  229
  #f
  591/403
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  loop2-1
  2
  25
  26
  app
  "\"'(eval\n  (match (app = 0 j) (#f) (_ (-> (app lp1 (app - i 1) y) <-)))\n  (env ((□? (j f y)) (□? (i x)))))\""
  480
  421
  37
  22
  242
  29
  271
  1
  243787/335160
  240
  #f
  616/421
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  loop2-1
  2
  25
  26
  app
  "\"'(eval (λ (n) (-> (app + n i) <-)) (env ((□? (n)) (□? (i x)))))\""
  509
  443
  39
  27
  242
  29
  271
  1
  10501/14896
  248
  #f
  652/443
  ((11/2 11/2 0) (11/2 11/2 0) (11/2 11/2 0)))
'(shuffled-cache
  0
  loop2-1
  2
  25
  26
  ref-or-constructor
  "\"'(eval (app + (-> n <-) i) (env ((□? (n)) (□? (i x)))))\""
  509
  443
  39
  27
  242
  29
  271
  1
  10501/14896
  248
  #f
  652/443
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  loop2-1
  2
  25
  26
  app
  "\"'(eval\n  (app lp2 (-> (app - j 1) <-) f (app f y))\n  (env ((□? (j f y)) (□? (i x)))))\""
  528
  462
  39
  27
  242
  29
  271
  1
  177483/254800
  262
  #f
  338/231
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  0
  loop2-1
  2
  25
  26
  app
  "\"'(eval (match (-> (app = 0 j) <-) (#f) _) (env ((□? (j f y)) (□? (i x)))))\""
  556
  490
  39
  27
  242
  29
  271
  1
  9588731/14523600
  282
  #f
  356/245
  ((4 4 0) (4 4 0) (4 4 0)))
'(shuffled-cache
  1
  loop2-1
  2
  26
  ref-or-constructor
  "\"'(eval (app lp1 (app - i 1) (-> y <-)) (env ((□? (j f y)) (□? (i x)))))\""
  #f)
'(shuffled-cache
  1
  loop2-1
  2
  26
  app
  "\"'(eval (letrec (lp2) (-> (app lp2 10 (λ (n) ...) x) <-)) (env ((□? (i x)))))\""
  #f)
'(shuffled-cache
  1
  loop2-1
  2
  26
  app
  "\"'(eval (letrec (lp1) (-> (app lp1 10 0) <-)) (env ()))\""
  #f)
'(shuffled-cache
  1
  loop2-1
  2
  25
  26
  ref-or-constructor
  "\"'(eval (app - (-> i <-) 1) (env ((□? (j f y)) (□? (i x)))))\""
  21
  13
  3
  5
  1
  2
  3
  1
  1/5
  9
  #f
  17/13
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  loop2-1
  2
  25
  26
  ref-or-constructor
  "\"'(eval (app = 0 (-> j <-)) (env ((□? (j f y)) (□? (i x)))))\""
  213
  185
  16
  12
  76
  8
  84
  1
  5/11
  119
  #f
  251/185
  ((45/2 45/2 0) (45/2 45/2 0) (45/2 45/2 0)))
'(shuffled-cache
  1
  loop2-1
  2
  26
  app
  "\"'(eval\n  (app lp2 (app - j 1) f (-> (app f y) <-))\n  (env ((□? (j f y)) (□? (i x)))))\""
  #f)
'(shuffled-cache
  1
  loop2-1
  2
  25
  26
  app
  "\"'(eval (match (-> (app = 0 i) <-) (#f) _) (env ((□? (i x)))))\""
  31
  23
  3
  5
  4
  2
  6
  1
  2/9
  16
  #f
  30/23
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  loop2-1
  2
  26
  letrec
  "\"'(eval\n  (match (app = 0 i) ((#f) (-> (letrec (lp2) ...) <-)) _)\n  (env ((□? (i x)))))\""
  #f)
'(shuffled-cache
  1
  loop2-1
  2
  25
  26
  app
  "\"'(eval (app lp1 (-> (app - i 1) <-) y) (env ((□? (j f y)) (□? (i x)))))\""
  21
  13
  3
  5
  1
  2
  3
  1
  1/5
  9
  #f
  17/13
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  loop2-1
  2
  26
  app
  "\"'(eval\n  (match (app = 0 j) (#f) (_ (-> (app lp1 (app - i 1) y) <-)))\n  (env ((□? (j f y)) (□? (i x)))))\""
  #f)
'(shuffled-cache
  1
  loop2-1
  2
  26
  match
  "\"'(eval\n  (λ (j f y) (-> (match (app = 0 j) ...) <-))\n  (env ((□? (j f y)) (□? (i x)))))\""
  #f)
'(shuffled-cache
  1
  loop2-1
  2
  26
  ref-or-constructor
  "\"'(eval (app f (-> y <-)) (env ((□? (j f y)) (□? (i x)))))\""
  #f)
'(shuffled-cache
  1
  loop2-1
  2
  26
  letrec
  "\"'(eval ((top) letrec (lp1) ...) (env ()))\""
  #f)
'(shuffled-cache
  1
  loop2-1
  2
  25
  26
  ref-or-constructor
  "\"'(eval (app - (-> j <-) 1) (env ((□? (j f y)) (□? (i x)))))\""
  28
  21
  3
  4
  0
  0
  0
  1
  0
  13
  #f
  29/21
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  loop2-1
  2
  26
  ref-or-constructor
  "\"'(eval (app + (-> n <-) i) (env ((□? (n)) (□? (i x)))))\""
  #f)
'(shuffled-cache
  1
  loop2-1
  2
  26
  ref-or-constructor
  "\"'(eval (match (app = 0 i) (#f) (_ (-> x <-))) (env ((□? (i x)))))\""
  #f)
'(shuffled-cache
  1
  loop2-1
  2
  25
  26
  ref-or-constructor
  "\"'(eval (app = 0 (-> i <-)) (env ((□? (i x)))))\""
  22
  14
  3
  5
  1
  2
  3
  1
  1/6
  9
  #f
  19/14
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  loop2-1
  2
  25
  26
  ref-or-constructor
  "\"'(eval (app + n (-> i <-)) (env ((□? (n)) (□? (i x)))))\""
  24
  15
  3
  6
  1
  2
  3
  1
  1/7
  9
  #f
  7/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  loop2-1
  2
  26
  ref-or-constructor
  "\"'(eval (app lp2 10 (λ (n) ...) (-> x <-)) (env ((□? (i x)))))\""
  #f)
'(shuffled-cache
  1
  loop2-1
  2
  26
  app
  "\"'(eval\n  (match (app = 0 j) ((#f) (-> (app lp2 (app - j 1) f (app f y)) <-)) _)\n  (env ((□? (j f y)) (□? (i x)))))\""
  #f)
'(shuffled-cache
  1
  loop2-1
  2
  25
  26
  app
  "\"'(eval\n  (app lp2 (-> (app - j 1) <-) f (app f y))\n  (env ((□? (j f y)) (□? (i x)))))\""
  28
  21
  3
  4
  0
  0
  0
  1
  0
  13
  #f
  29/21
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  loop2-1
  2
  25
  26
  ref-or-constructor
  "\"'(eval\n  (app lp2 (app - j 1) (-> f <-) (app f y))\n  (env ((□? (j f y)) (□? (i x)))))\""
  34
  27
  3
  4
  0
  0
  0
  1
  0
  19
  #t
  35/27
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  loop2-1
  2
  25
  26
  app
  "\"'(eval (match (-> (app = 0 j) <-) (#f) _) (env ((□? (j f y)) (□? (i x)))))\""
  50
  43
  3
  4
  0
  0
  0
  1
  0
  30
  #f
  56/43
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  loop2-1
  2
  26
  app
  "\"'(eval (λ (n) (-> (app + n i) <-)) (env ((□? (n)) (□? (i x)))))\""
  #f)
'(shuffled-cache
  1
  loop2-1
  2
  25
  26
  ref-or-constructor
  "\"'(eval (app (-> f <-) y) (env ((□? (j f y)) (□? (i x)))))\""
  14
  7
  3
  4
  0
  0
  0
  1
  0
  7
  #t
  1
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  loop2-1
  2
  26
  match
  "\"'(eval (λ (i x) (-> (match (app = 0 i) ...) <-)) (env ((□? (i x)))))\""
  #f)
