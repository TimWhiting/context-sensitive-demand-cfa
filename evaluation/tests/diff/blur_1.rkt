difference: (Î» (a n) (-> (match (app <= n 1) ...) <-)), env: (env (((app not (-> (app (app blur lp) s (app - n 1)) <-)))))
	mcfa:(#<set: ((top) app #f)> . #(struct:literal (#(struct:bottom) #(struct:bottom) #(struct:bottom) #(struct:bottom))))
	demand:(#<set: ((top) app #f) ((top) app #t)> . #(struct:literal (#(struct:bottom) #(struct:bottom) #(struct:bottom) #(struct:bottom))))
difference: (app not (-> (app (app blur lp) s (app - n 1)) <-)), env: (env (((letrec (id ... lp) (-> (app lp (app #f) 2) <-)))))
	mcfa:(#<set: ((top) app #f)> . #(struct:literal (#(struct:bottom) #(struct:bottom) #(struct:bottom) #(struct:bottom))))
	demand:(#<set: ((top) app #f) ((top) app #t)> . #(struct:literal (#(struct:bottom) #(struct:bottom) #(struct:bottom) #(struct:bottom))))
difference: (match (-> (app <= n 1) <-) (#f) _), env: (env (((app not (-> (app (app blur lp) s (app - n 1)) <-)))))
	mcfa:(#<set: ((top) app #t)> . #(struct:literal (#(struct:bottom) #(struct:bottom) #(struct:bottom) #(struct:bottom))))
	demand:(#<set: ((top) app #f) ((top) app #t)> . #(struct:literal (#(struct:bottom) #(struct:bottom) #(struct:bottom) #(struct:bottom))))
difference: (let* (r ... s) (-> (app not (app (app blur lp) s (app - n 1))) <-)), env: (env (((letrec (id ... lp) (-> (app lp (app #f) 2) <-)))))
	mcfa:(#<set: ((top) app #t)> . #(struct:literal (#(struct:bottom) #(struct:bottom) #(struct:bottom) #(struct:bottom))))
	demand:(#<set: ((top) app #f) ((top) app #t)> . #(struct:literal (#(struct:bottom) #(struct:bottom) #(struct:bottom) #(struct:bottom))))
difference: (match (app <= n 1) ((#f) (-> (let* (r ... s) ...) <-)) _), env: (env (((letrec (id ... lp) (-> (app lp (app #f) 2) <-)))))
	mcfa:(#<set: ((top) app #t)> . #(struct:literal (#(struct:bottom) #(struct:bottom) #(struct:bottom) #(struct:bottom))))
	demand:(#<set: ((top) app #f) ((top) app #t)> . #(struct:literal (#(struct:bottom) #(struct:bottom) #(struct:bottom) #(struct:bottom))))
difference: (app <= (-> n <-) 1), env: (env (((app not (-> (app (app blur lp) s (app - n 1)) <-)))))
	mcfa:(#<set:> . #(struct:literal (#(struct:singleton 1) #(struct:bottom) #(struct:bottom) #(struct:bottom))))
	demand:(#<set:> . #(struct:literal (#(struct:top) #(struct:bottom) #(struct:bottom) #(struct:bottom))))
