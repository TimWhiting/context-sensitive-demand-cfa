difference: (match (app match-rep re (λ (pat) ...)) (#f) (c-x (-> c-x <-)))
	mcfa:(#<set: (app cons (-> (quote foo) <-) (app cons (quote bar) (app nil))) (app cons (-> (quote foo) <-) (app cons (app cons (quote rep) (app cons (quote bar) (app nil))) (app nil))) (match (app regex-empty? pat2) ((#f) (-> (app cons (quote seq) (app cons pat1 (app cons pat2 (app nil)))) <-)) _) (app cons (-> (quote bar) <-) (app nil)) (app cons (-> (quote rep) <-) (app cons pat (app nil))) (app cons (-> (quote seq) <-) (app cons (quote foo) (app cons (app cons (quote rep) (app cons (quote bar) (app nil))) (app nil)))) (app cons (-> (quote alt) <-) (app cons pat1 (app cons pat2 (app nil)))) ((top) app #t) (app cons (-> (quote rep) <-) (app cons (quote bar) (app nil))) (app cons (-> (app cons (quote rep) (app cons (quote bar) (app nil))) <-) (app nil)) (match (app regex-null? pat2) ((#f) (-> (app cons (quote alt) (app cons pat1 (app cons pat2 (app nil)))) <-)) _) (app cons (-> (quote seq) <-) (app cons pat1 (app cons pat2 (app nil)))) (match (app regex-empty? pat) ((#f) (-> (app cons (quote rep) (app cons pat (app nil))) <-)) _)> . #(struct:literal (#(struct:bottom) #(struct:bottom) #(struct:bottom) #(struct:bottom))))
	demand:(#<set: (app cons (-> (quote foo) <-) (app cons (quote bar) (app nil))) ((top) app #f) (app cons (-> (quote foo) <-) (app cons (app cons (quote rep) (app cons (quote bar) (app nil))) (app nil))) (match (app regex-empty? pat2) ((#f) (-> (app cons (quote seq) (app cons pat1 (app cons pat2 (app nil)))) <-)) _) (app cons (-> (quote bar) <-) (app nil)) (app cons (-> (quote rep) <-) (app cons pat (app nil))) (app cons (-> (quote seq) <-) (app cons (quote foo) (app cons (app cons (quote rep) (app cons (quote bar) (app nil))) (app nil)))) (app cons (-> (quote alt) <-) (app cons pat1 (app cons pat2 (app nil)))) ((top) app #t) (app cons (-> (quote rep) <-) (app cons (quote bar) (app nil))) (app cons (-> (app cons (quote rep) (app cons (quote bar) (app nil))) <-) (app nil)) (match (app regex-null? pat2) ((#f) (-> (app cons (quote alt) (app cons pat1 (app cons pat2 (app nil)))) <-)) _) (app cons (-> (quote seq) <-) (app cons pat1 (app cons pat2 (app nil)))) (match (app regex-empty? pat) ((#f) (-> (app cons (quote rep) (app cons pat (app nil))) <-)) _)> . #(struct:literal (#(struct:bottom) #(struct:bottom) #(struct:bottom) #(struct:bottom))))
difference: (match (app match-seq re (λ (pat1 pat2) ...)) (#f) (c-x (-> c-x <-)))
	mcfa:(#<set: (app cons (-> (quote foo) <-) (app cons (quote bar) (app nil))) (app cons (-> (quote foo) <-) (app cons (app cons (quote rep) (app cons (quote bar) (app nil))) (app nil))) (match (app regex-empty? pat2) ((#f) (-> (app cons (quote seq) (app cons pat1 (app cons pat2 (app nil)))) <-)) _) (app cons (-> (quote bar) <-) (app nil)) (app cons (-> (quote rep) <-) (app cons pat (app nil))) (app cons (-> (quote seq) <-) (app cons (quote foo) (app cons (app cons (quote rep) (app cons (quote bar) (app nil))) (app nil)))) (app cons (-> (quote alt) <-) (app cons pat1 (app cons pat2 (app nil)))) ((top) app #t) (app cons (-> (quote rep) <-) (app cons (quote bar) (app nil))) (app cons (-> (app cons (quote rep) (app cons (quote bar) (app nil))) <-) (app nil)) (match (app regex-null? pat2) ((#f) (-> (app cons (quote alt) (app cons pat1 (app cons pat2 (app nil)))) <-)) _) (app cons (-> (quote seq) <-) (app cons pat1 (app cons pat2 (app nil)))) (match (app regex-empty? pat) ((#f) (-> (app cons (quote rep) (app cons pat (app nil))) <-)) _)> . #(struct:literal (#(struct:bottom) #(struct:bottom) #(struct:bottom) #(struct:bottom))))
	demand:(#<set: (app cons (-> (quote foo) <-) (app cons (quote bar) (app nil))) ((top) app #f) (app cons (-> (quote foo) <-) (app cons (app cons (quote rep) (app cons (quote bar) (app nil))) (app nil))) (match (app regex-empty? pat2) ((#f) (-> (app cons (quote seq) (app cons pat1 (app cons pat2 (app nil)))) <-)) _) (app cons (-> (quote bar) <-) (app nil)) (app cons (-> (quote rep) <-) (app cons pat (app nil))) (app cons (-> (quote seq) <-) (app cons (quote foo) (app cons (app cons (quote rep) (app cons (quote bar) (app nil))) (app nil)))) (app cons (-> (quote alt) <-) (app cons pat1 (app cons pat2 (app nil)))) ((top) app #t) (app cons (-> (quote rep) <-) (app cons (quote bar) (app nil))) (app cons (-> (app cons (quote rep) (app cons (quote bar) (app nil))) <-) (app nil)) (match (app regex-null? pat2) ((#f) (-> (app cons (quote alt) (app cons pat1 (app cons pat2 (app nil)))) <-)) _) (app cons (-> (quote seq) <-) (app cons pat1 (app cons pat2 (app nil)))) (match (app regex-empty? pat) ((#f) (-> (app cons (quote rep) (app cons pat (app nil))) <-)) _)> . #(struct:literal (#(struct:bottom) #(struct:bottom) #(struct:bottom) #(struct:bottom))))
difference: (match (app match-seq re (λ (pat1 pat2) ...)) (#f) (c-x (-> c-x <-)))
	mcfa:(#<set: (app cons (-> (quote foo) <-) (app cons (quote bar) (app nil))) (app cons (-> (quote foo) <-) (app cons (app cons (quote rep) (app cons (quote bar) (app nil))) (app nil))) (match (app regex-empty? pat2) ((#f) (-> (app cons (quote seq) (app cons pat1 (app cons pat2 (app nil)))) <-)) _) (app cons (-> (quote bar) <-) (app nil)) (app cons (-> (quote rep) <-) (app cons pat (app nil))) (app cons (-> (quote seq) <-) (app cons (quote foo) (app cons (app cons (quote rep) (app cons (quote bar) (app nil))) (app nil)))) (app cons (-> (quote alt) <-) (app cons pat1 (app cons pat2 (app nil)))) ((top) app #t) (app cons (-> (quote rep) <-) (app cons (quote bar) (app nil))) (app cons (-> (app cons (quote rep) (app cons (quote bar) (app nil))) <-) (app nil)) (match (app regex-null? pat2) ((#f) (-> (app cons (quote alt) (app cons pat1 (app cons pat2 (app nil)))) <-)) _) (app cons (-> (quote seq) <-) (app cons pat1 (app cons pat2 (app nil)))) (match (app regex-empty? pat) ((#f) (-> (app cons (quote rep) (app cons pat (app nil))) <-)) _)> . #(struct:literal (#(struct:bottom) #(struct:bottom) #(struct:bottom) #(struct:bottom))))
	demand:(#<set: (app cons (-> (quote foo) <-) (app cons (quote bar) (app nil))) ((top) app #f) (app cons (-> (quote foo) <-) (app cons (app cons (quote rep) (app cons (quote bar) (app nil))) (app nil))) (match (app regex-empty? pat2) ((#f) (-> (app cons (quote seq) (app cons pat1 (app cons pat2 (app nil)))) <-)) _) (app cons (-> (quote bar) <-) (app nil)) (app cons (-> (quote rep) <-) (app cons pat (app nil))) (app cons (-> (quote seq) <-) (app cons (quote foo) (app cons (app cons (quote rep) (app cons (quote bar) (app nil))) (app nil)))) (app cons (-> (quote alt) <-) (app cons pat1 (app cons pat2 (app nil)))) ((top) app #t) (app cons (-> (quote rep) <-) (app cons (quote bar) (app nil))) (app cons (-> (app cons (quote rep) (app cons (quote bar) (app nil))) <-) (app nil)) (match (app regex-null? pat2) ((#f) (-> (app cons (quote alt) (app cons pat1 (app cons pat2 (app nil)))) <-)) _) (app cons (-> (quote seq) <-) (app cons pat1 (app cons pat2 (app nil)))) (match (app regex-empty? pat) ((#f) (-> (app cons (quote rep) (app cons pat (app nil))) <-)) _)> . #(struct:literal (#(struct:bottom) #(struct:bottom) #(struct:bottom) #(struct:bottom))))
difference: (match (app match-alt re (λ (pat1 pat2) ...)) (#f) (c-x (-> c-x <-)))
	mcfa:(#<set: (app cons (-> (quote foo) <-) (app cons (quote bar) (app nil))) (app cons (-> (quote foo) <-) (app cons (app cons (quote rep) (app cons (quote bar) (app nil))) (app nil))) (match (app regex-empty? pat2) ((#f) (-> (app cons (quote seq) (app cons pat1 (app cons pat2 (app nil)))) <-)) _) (app cons (-> (quote bar) <-) (app nil)) (app cons (-> (quote rep) <-) (app cons pat (app nil))) (app cons (-> (quote seq) <-) (app cons (quote foo) (app cons (app cons (quote rep) (app cons (quote bar) (app nil))) (app nil)))) (app cons (-> (quote alt) <-) (app cons pat1 (app cons pat2 (app nil)))) ((top) app #t) (app cons (-> (quote rep) <-) (app cons (quote bar) (app nil))) (app cons (-> (app cons (quote rep) (app cons (quote bar) (app nil))) <-) (app nil)) (match (app regex-null? pat2) ((#f) (-> (app cons (quote alt) (app cons pat1 (app cons pat2 (app nil)))) <-)) _) (app cons (-> (quote seq) <-) (app cons pat1 (app cons pat2 (app nil)))) (match (app regex-empty? pat) ((#f) (-> (app cons (quote rep) (app cons pat (app nil))) <-)) _)> . #(struct:literal (#(struct:bottom) #(struct:bottom) #(struct:bottom) #(struct:bottom))))
	demand:(#<set: (app cons (-> (quote foo) <-) (app cons (quote bar) (app nil))) ((top) app #f) (app cons (-> (quote foo) <-) (app cons (app cons (quote rep) (app cons (quote bar) (app nil))) (app nil))) (match (app regex-empty? pat2) ((#f) (-> (app cons (quote seq) (app cons pat1 (app cons pat2 (app nil)))) <-)) _) (app cons (-> (quote bar) <-) (app nil)) (app cons (-> (quote rep) <-) (app cons pat (app nil))) (app cons (-> (quote seq) <-) (app cons (quote foo) (app cons (app cons (quote rep) (app cons (quote bar) (app nil))) (app nil)))) (app cons (-> (quote alt) <-) (app cons pat1 (app cons pat2 (app nil)))) ((top) app #t) (app cons (-> (quote rep) <-) (app cons (quote bar) (app nil))) (app cons (-> (app cons (quote rep) (app cons (quote bar) (app nil))) <-) (app nil)) (match (app regex-null? pat2) ((#f) (-> (app cons (quote alt) (app cons pat1 (app cons pat2 (app nil)))) <-)) _) (app cons (-> (quote seq) <-) (app cons pat1 (app cons pat2 (app nil)))) (match (app regex-empty? pat) ((#f) (-> (app cons (quote rep) (app cons pat (app nil))) <-)) _)> . #(struct:literal (#(struct:bottom) #(struct:bottom) #(struct:bottom) #(struct:bottom))))
difference: (match (app match-alt re (λ (pat1 pat2) ...)) (#f) (c-x (-> c-x <-)))
	mcfa:(#<set: (app cons (-> (quote foo) <-) (app cons (quote bar) (app nil))) (app cons (-> (quote foo) <-) (app cons (app cons (quote rep) (app cons (quote bar) (app nil))) (app nil))) (match (app regex-empty? pat2) ((#f) (-> (app cons (quote seq) (app cons pat1 (app cons pat2 (app nil)))) <-)) _) (app cons (-> (quote bar) <-) (app nil)) (app cons (-> (quote rep) <-) (app cons pat (app nil))) (app cons (-> (quote seq) <-) (app cons (quote foo) (app cons (app cons (quote rep) (app cons (quote bar) (app nil))) (app nil)))) (app cons (-> (quote alt) <-) (app cons pat1 (app cons pat2 (app nil)))) ((top) app #t) (app cons (-> (quote rep) <-) (app cons (quote bar) (app nil))) (app cons (-> (app cons (quote rep) (app cons (quote bar) (app nil))) <-) (app nil)) (match (app regex-null? pat2) ((#f) (-> (app cons (quote alt) (app cons pat1 (app cons pat2 (app nil)))) <-)) _) (app cons (-> (quote seq) <-) (app cons pat1 (app cons pat2 (app nil)))) (match (app regex-empty? pat) ((#f) (-> (app cons (quote rep) (app cons pat (app nil))) <-)) _)> . #(struct:literal (#(struct:bottom) #(struct:bottom) #(struct:bottom) #(struct:bottom))))
	demand:(#<set: (app cons (-> (quote foo) <-) (app cons (quote bar) (app nil))) ((top) app #f) (app cons (-> (quote foo) <-) (app cons (app cons (quote rep) (app cons (quote bar) (app nil))) (app nil))) (match (app regex-empty? pat2) ((#f) (-> (app cons (quote seq) (app cons pat1 (app cons pat2 (app nil)))) <-)) _) (app cons (-> (quote bar) <-) (app nil)) (app cons (-> (quote rep) <-) (app cons pat (app nil))) (app cons (-> (quote seq) <-) (app cons (quote foo) (app cons (app cons (quote rep) (app cons (quote bar) (app nil))) (app nil)))) (app cons (-> (quote alt) <-) (app cons pat1 (app cons pat2 (app nil)))) ((top) app #t) (app cons (-> (quote rep) <-) (app cons (quote bar) (app nil))) (app cons (-> (app cons (quote rep) (app cons (quote bar) (app nil))) <-) (app nil)) (match (app regex-null? pat2) ((#f) (-> (app cons (quote alt) (app cons pat1 (app cons pat2 (app nil)))) <-)) _) (app cons (-> (quote seq) <-) (app cons pat1 (app cons pat2 (app nil)))) (match (app regex-empty? pat) ((#f) (-> (app cons (quote rep) (app cons pat (app nil))) <-)) _)> . #(struct:literal (#(struct:bottom) #(struct:bottom) #(struct:bottom) #(struct:bottom))))
