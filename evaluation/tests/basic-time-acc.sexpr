'(shuffled-cache
  0
  sat-small
  0
  10
  33
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) (app not x2)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  0
  33
  constructor
  "\"'(eval (app (-> #t <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-small
  0
  10
  33
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 (app not x2)) (env (())))\""
  19
  11
  6
  2
  11
  6
  17
  1
  1
  57/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  0
  10
  33
  ref-or-constructor
  "\"'(eval (app sat-solve-2 (-> phi <-)) (env ()))\""
  21
  13
  6
  2
  13
  6
  19
  1
  1
  67/13
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  0
  10
  33
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  25
  16
  7
  2
  16
  7
  23
  1
  1
  21/4
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  0
  10
  33
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env (())))\""
  51
  33
  12
  6
  33
  12
  45
  1
  1
  179/33
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-small
  0
  10
  33
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env (())))\""
  51
  33
  12
  6
  33
  12
  45
  1
  1
  179/33
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  0
  33
  lambda
  "\"'(eval (letrec* (... () (phi (-> (λ (x1 x2) ...) <-)) try ...) ...) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-small
  0
  10
  33
  app
  "\"'(eval (letrec* (phi ... sat-solve-2) (-> (app sat-solve-2 phi) <-)) (env ()))\""
  53
  34
  12
  7
  34
  12
  46
  1
  1
  185/34
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  0
  10
  33
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env (())))\""
  53
  34
  12
  7
  34
  12
  46
  1
  1
  185/34
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  0
  10
  33
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env (())))\""
  53
  34
  12
  7
  34
  12
  46
  1
  1
  185/34
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  0
  10
  33
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env (() ())))\""
  53
  34
  12
  7
  34
  12
  46
  1
  1
  185/34
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  0
  10
  33
  app
  "\"'(eval (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-)) (env (())))\""
  53
  34
  12
  7
  34
  12
  46
  1
  1
  185/34
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  0
  10
  33
  app
  "\"'(eval (λ (x1 x2) (-> (app or x1 (app not x2)) <-)) (env (())))\""
  53
  34
  12
  7
  34
  12
  46
  1
  1
  185/34
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  0
  33
  lambda
  "\"'(eval\n  (letrec* (... try (sat-solve-2 (-> (λ (p) ...) <-)) () ...) ...)\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-small
  0
  10
  33
  ref-or-constructor
  "\"'(eval (app p (-> n1 <-) n2) (env (() () ())))\""
  53
  34
  12
  7
  34
  12
  46
  1
  1
  185/34
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  0
  10
  33
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-2 <-) phi) (env ()))\""
  53
  34
  12
  7
  34
  12
  46
  1
  1
  185/34
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  0
  10
  33
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env (())))\""
  53
  34
  12
  7
  34
  12
  46
  1
  1
  185/34
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  0
  33
  lambda
  "\"'(eval (app try (-> (λ (n1) ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-small
  0
  10
  33
  app
  "\"'(eval (app or x1 (-> (app not x2) <-)) (env (())))\""
  53
  34
  12
  7
  34
  12
  46
  1
  1
  185/34
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  0
  10
  33
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env (())))\""
  53
  34
  12
  7
  34
  12
  46
  1
  1
  185/34
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  0
  10
  33
  ref-or-constructor
  "\"'(eval (app (-> p <-) n1 n2) (env (() () ())))\""
  53
  34
  12
  7
  34
  12
  46
  1
  1
  185/34
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  0
  10
  33
  letrec*
  "\"'(eval ((top) letrec* (phi ... sat-solve-2) ...) (env ()))\""
  54
  35
  12
  7
  35
  12
  47
  1
  1
  191/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  0
  33
  lambda
  "\"'(eval (app try (-> (λ (n2) ...) <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-small
  0
  10
  33
  app
  "\"'(eval (app f (-> (app #f) <-)) (env (())))\""
  54
  35
  12
  7
  35
  12
  47
  1
  1
  191/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  0
  10
  33
  app
  "\"'(eval (λ (n2) (-> (app p n1 n2) <-)) (env (() () ())))\""
  54
  35
  12
  7
  35
  12
  47
  1
  1
  191/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  0
  10
  33
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env (())))\""
  54
  35
  12
  7
  35
  12
  47
  1
  1
  191/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  0
  33
  lambda
  "\"'(eval\n  (letrec* (... phi (try (-> (λ (f) ...) <-)) sat-solve-2 ...) ...)\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-small
  0
  10
  33
  ref-or-constructor
  "\"'(eval (app p n1 (-> n2 <-)) (env (() () ())))\""
  54
  35
  12
  7
  35
  12
  47
  1
  1
  191/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  0
  10
  33
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env (() ())))\""
  54
  35
  12
  7
  35
  12
  47
  1
  1
  191/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  0
  10
  33
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (())))\""
  54
  35
  12
  7
  35
  12
  47
  1
  1
  191/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-small
  0
  33
  constructor
  "\"'(eval (app (-> #f <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-small
  0
  10
  33
  app
  "\"'(eval (app f (-> (app #t) <-)) (env (())))\""
  54
  35
  12
  7
  35
  12
  47
  1
  1
  191/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  0
  10
  33
  app
  "\"'(eval (λ (n2) (-> (app p n1 n2) <-)) (env (() () ())))\""
  35
  23
  9
  3
  23
  9
  32
  1
  1
  122/23
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-small
  0
  10
  33
  ref-or-constructor
  "\"'(eval (app sat-solve-2 (-> phi <-)) (env ()))\""
  35
  23
  9
  3
  23
  9
  32
  1
  1
  122/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  0
  10
  33
  app
  "\"'(eval (app or x1 (-> (app not x2) <-)) (env (())))\""
  35
  23
  9
  3
  23
  9
  32
  1
  1
  122/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  0
  10
  33
  ref-or-constructor
  "\"'(eval (app p n1 (-> n2 <-)) (env (() () ())))\""
  35
  23
  9
  3
  23
  9
  32
  1
  1
  122/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  0
  10
  33
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env (() ())))\""
  35
  23
  9
  3
  23
  9
  32
  1
  1
  122/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  0
  33
  lambda
  "\"'(eval (letrec* (... () (phi (-> (λ (x1 x2) ...) <-)) try ...) ...) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-small
  0
  10
  33
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-2 <-) phi) (env ()))\""
  35
  23
  9
  3
  23
  9
  32
  1
  1
  122/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  0
  10
  33
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env (())))\""
  41
  26
  12
  3
  26
  12
  38
  1
  1
  69/13
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  0
  10
  33
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 (app not x2)) (env (())))\""
  41
  26
  12
  3
  26
  12
  38
  1
  1
  69/13
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  0
  10
  33
  app
  "\"'(eval (λ (x1 x2) (-> (app or x1 (app not x2)) <-)) (env (())))\""
  41
  26
  12
  3
  26
  12
  38
  1
  1
  69/13
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  0
  33
  lambda
  "\"'(eval\n  (letrec* (... phi (try (-> (λ (f) ...) <-)) sat-solve-2 ...) ...)\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-small
  0
  10
  33
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env (())))\""
  50
  32
  12
  6
  32
  12
  44
  1
  1
  173/32
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  0
  33
  constructor
  "\"'(eval (app (-> #t <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-small
  0
  33
  lambda
  "\"'(eval\n  (letrec* (... try (sat-solve-2 (-> (λ (p) ...) <-)) () ...) ...)\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-small
  0
  10
  33
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) (app not x2)) (env (())))\""
  50
  32
  12
  6
  32
  12
  44
  1
  1
  173/32
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  0
  10
  33
  ref-or-constructor
  "\"'(eval (app (-> p <-) n1 n2) (env (() () ())))\""
  50
  32
  12
  6
  32
  12
  44
  1
  1
  173/32
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  0
  10
  33
  ref-or-constructor
  "\"'(eval (app p (-> n1 <-) n2) (env (() () ())))\""
  50
  32
  12
  6
  32
  12
  44
  1
  1
  173/32
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  0
  10
  33
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (())))\""
  50
  32
  12
  6
  32
  12
  44
  1
  1
  173/32
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  0
  10
  33
  app
  "\"'(eval (app f (-> (app #f) <-)) (env (())))\""
  50
  32
  12
  6
  32
  12
  44
  1
  1
  173/32
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  0
  33
  constructor
  "\"'(eval (app (-> #f <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-small
  0
  10
  33
  app
  "\"'(eval (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-)) (env (())))\""
  50
  32
  12
  6
  32
  12
  44
  1
  1
  173/32
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  0
  10
  33
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env (())))\""
  51
  33
  12
  6
  33
  12
  45
  1
  1
  179/33
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  0
  10
  33
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  51
  33
  12
  6
  33
  12
  45
  1
  1
  179/33
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  0
  10
  33
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env (() ())))\""
  51
  33
  12
  6
  33
  12
  45
  1
  1
  179/33
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  0
  10
  33
  app
  "\"'(eval (letrec* (phi ... sat-solve-2) (-> (app sat-solve-2 phi) <-)) (env ()))\""
  53
  34
  12
  7
  34
  12
  46
  1
  1
  185/34
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  0
  10
  33
  letrec*
  "\"'(eval ((top) letrec* (phi ... sat-solve-2) ...) (env ()))\""
  54
  35
  12
  7
  35
  12
  47
  1
  1
  191/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  0
  10
  33
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env (())))\""
  54
  35
  12
  7
  35
  12
  47
  1
  1
  191/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  0
  10
  33
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env (())))\""
  54
  35
  12
  7
  35
  12
  47
  1
  1
  191/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  0
  10
  33
  app
  "\"'(eval (app f (-> (app #t) <-)) (env (())))\""
  54
  35
  12
  7
  35
  12
  47
  1
  1
  191/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  0
  33
  lambda
  "\"'(eval (app try (-> (λ (n1) ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-small
  0
  10
  33
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env (())))\""
  54
  35
  12
  7
  35
  12
  47
  1
  1
  191/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-small
  0
  33
  lambda
  "\"'(eval (app try (-> (λ (n2) ...) <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-small
  0
  10
  33
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env (())))\""
  54
  35
  12
  7
  35
  12
  47
  1
  1
  191/35
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  10
  58
  app
  "\"'(eval (app or x1 (-> (app not x2) <-) (app not x3)) (env (())))\""
  22
  14
  6
  2
  14
  6
  20
  1
  1
  73/14
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  58
  lambda
  "\"'(eval (app try (-> (λ (n2) ...) <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app (-> or <-) x4 x2) (env (())))\""
  24
  16
  6
  2
  16
  6
  22
  1
  1
  83/16
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) (app not x2) (app not x3)) (env (())))\""
  28
  19
  7
  2
  19
  7
  26
  1
  1
  100/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-4 <-) phi) (env ()))\""
  28
  19
  7
  2
  19
  7
  26
  1
  1
  100/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  10
  58
  app
  "\"'(eval (λ (n4) (-> (app p n1 n2 n3 n4) <-)) (env (() () () () ())))\""
  59
  45
  11
  3
  45
  11
  56
  1
  1
  49/9
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app p n1 n2 (-> n3 <-) n4) (env (() () () () ())))\""
  59
  45
  11
  3
  45
  11
  56
  1
  1
  49/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env (())))\""
  59
  45
  11
  3
  45
  11
  56
  1
  1
  49/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  10
  58
  letrec*
  "\"'(eval ((top) letrec* (phi ... sat-solve-4) ...) (env ()))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  sat-1
  0
  58
  lambda
  "\"'(eval\n  (letrec* (... () (phi (-> (λ (x1 x2 x3 x4) ...) <-)) try ...) ...)\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-1
  0
  10
  58
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env (())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  10
  58
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env (())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app p (-> n1 <-) n2 n3 n4) (env (() () () () ())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env (())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 (-> n4 <-)) (env (() () () () ())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env (())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  10
  58
  app
  "\"'(eval (app or (app not x2) (-> (app not x3) <-)) (env (())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  58
  lambda
  "\"'(eval (app try (-> (λ (n4) ...) <-)) (env (() () () ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-1
  0
  10
  58
  app
  "\"'(eval (app f (-> (app #f) <-)) (env (())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  10
  58
  app
  "\"'(eval (app or x1 (app not x2) (-> (app not x3) <-)) (env (())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env (() () ())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  10
  58
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env (())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  58
  constructor
  "\"'(eval (app (-> #f <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env (())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env (())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  58
  lambda
  "\"'(eval (app try (-> (λ (n1) ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 (app not x2) (app not x3)) (env (())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  58
  lambda
  "\"'(eval (app try (-> (λ (n3) ...) <-)) (env (() () ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-1
  0
  10
  58
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env (() ())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  10
  58
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  10
  58
  app
  "\"'(eval (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-)) (env (())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env (() ())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  10
  58
  app
  "\"'(eval (app f (-> (app #t) <-)) (env (())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  58
  constructor
  "\"'(eval (app (-> #t <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app p n1 (-> n2 <-) n3 n4) (env (() () () () ())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app sat-solve-4 (-> phi <-)) (env ()))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  10
  58
  app
  "\"'(eval (letrec* (phi ... sat-solve-4) (-> (app sat-solve-4 phi) <-)) (env ()))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  10
  58
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env (())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  10
  58
  app
  "\"'(eval (λ (n3) (-> (app try (λ (n4) ...)) <-)) (env (() () () ())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env (())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  10
  58
  app
  "\"'(eval (λ (n2) (-> (app try (λ (n3) ...)) <-)) (env (() () ())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env (())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n4) ...)) (env (() () () ())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  58
  lambda
  "\"'(eval\n  (letrec* (... try (sat-solve-4 (-> (λ (p) ...) <-)) () ...) ...)\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-1
  0
  10
  58
  app
  "\"'(eval (app or (-> (app not x2) <-) (app not x3)) (env (())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  58
  lambda
  "\"'(eval\n  (letrec* (... phi (try (-> (λ (f) ...) <-)) sat-solve-4 ...) ...)\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-1
  0
  10
  58
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4)\n    (->\n     (app\n      and\n      (app or x1 (app not x2) (app not x3))\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env (())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  10
  58
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env (())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env (())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app (-> p <-) n1 n2 n3 n4) (env (() () () () ())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x2) (app not x3)) (env (())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  10
  58
  app
  "\"'(eval (app or x1 (-> (app not x2) <-) (app not x3)) (env (())))\""
  22
  14
  6
  2
  14
  6
  20
  1
  1
  73/14
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (())))\""
  26
  17
  7
  2
  17
  7
  24
  1
  1
  90/17
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env (() () ())))\""
  26
  17
  7
  2
  17
  7
  24
  1
  1
  90/17
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-4 <-) phi) (env ()))\""
  26
  17
  7
  2
  17
  7
  24
  1
  1
  90/17
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  10
  58
  app
  "\"'(eval (app or (-> (app not x2) <-) (app not x3)) (env (())))\""
  29
  20
  7
  2
  20
  7
  27
  1
  1
  107/20
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  10
  58
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  37
  27
  8
  2
  27
  8
  35
  1
  1
  146/27
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (())))\""
  37
  27
  8
  2
  27
  8
  35
  1
  1
  146/27
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  37
  27
  8
  2
  27
  8
  35
  1
  1
  146/27
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) (app not x2) (app not x3)) (env (())))\""
  37
  27
  8
  2
  27
  8
  35
  1
  1
  146/27
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  10
  58
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env (())))\""
  42
  32
  8
  2
  32
  8
  40
  1
  1
  87/16
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  10
  58
  app
  "\"'(eval (letrec* (phi ... sat-solve-4) (-> (app sat-solve-4 phi) <-)) (env ()))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  sat-1
  0
  58
  lambda
  "\"'(eval\n  (letrec* (... phi (try (-> (λ (f) ...) <-)) sat-solve-4 ...) ...)\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-1
  0
  58
  lambda
  "\"'(eval (app try (-> (λ (n2) ...) <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app (-> p <-) n1 n2 n3 n4) (env (() () () () ())))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n4) ...)) (env (() () () ())))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app sat-solve-4 (-> phi <-)) (env ()))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  10
  58
  app
  "\"'(eval (app f (-> (app #t) <-)) (env (())))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  58
  constructor
  "\"'(eval (app (-> #t <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-1
  0
  10
  58
  app
  "\"'(eval (app f (-> (app #f) <-)) (env (())))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  10
  58
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 (app not x2) (app not x3))\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env (())))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  10
  58
  app
  "\"'(eval (app or (app not x2) (-> (app not x3) <-)) (env (())))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app p n1 n2 (-> n3 <-) n4) (env (() () () () ())))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env (())))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x2) (app not x3)) (env (())))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 (app not x2) (app not x3)) (env (())))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env (())))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  10
  58
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4)\n    (->\n     (app\n      and\n      (app or x1 (app not x2) (app not x3))\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env (())))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  10
  58
  app
  "\"'(eval (λ (n2) (-> (app try (λ (n3) ...)) <-)) (env (() () ())))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  10
  58
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env (() ())))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  58
  lambda
  "\"'(eval (app try (-> (λ (n4) ...) <-)) (env (() () () ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-1
  0
  10
  58
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env (())))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  10
  58
  app
  "\"'(eval (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-)) (env (())))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  58
  lambda
  "\"'(eval (app try (-> (λ (n3) ...) <-)) (env (() () ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-1
  0
  10
  58
  app
  "\"'(eval (λ (n3) (-> (app try (λ (n4) ...)) <-)) (env (() () () ())))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (())))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env (())))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  58
  constructor
  "\"'(eval (app (-> #f <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-1
  0
  58
  lambda
  "\"'(eval\n  (letrec* (... try (sat-solve-4 (-> (λ (p) ...) <-)) () ...) ...)\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (())))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app p (-> n1 <-) n2 n3 n4) (env (() () () () ())))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  10
  58
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env (())))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env (())))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app (-> or <-) x4 x2) (env (())))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  58
  lambda
  "\"'(eval\n  (letrec* (... () (phi (-> (λ (x1 x2 x3 x4) ...) <-)) try ...) ...)\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  10
  58
  app
  "\"'(eval (λ (n4) (-> (app p n1 n2 n3 n4) <-)) (env (() () () () ())))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  10
  58
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env (())))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app p n1 (-> n2 <-) n3 n4) (env (() () () () ())))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  10
  58
  app
  "\"'(eval (app or x1 (app not x2) (-> (app not x3) <-)) (env (())))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env (())))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  58
  lambda
  "\"'(eval (app try (-> (λ (n1) ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 (-> n4 <-)) (env (() () () () ())))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  84
  59
  16
  9
  59
  16
  75
  1
  1
  329/59
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  10
  58
  letrec*
  "\"'(eval ((top) letrec* (phi ... sat-solve-4) ...) (env ()))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env (())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env (() ())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env (())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-1
  0
  10
  58
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env (())))\""
  85
  60
  16
  9
  60
  16
  76
  1
  1
  67/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) (-> n7 <-))\n  (env (() () () () () () () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (() () () () () () ())))\""
  12
  8
  3
  1
  8
  3
  11
  1
  1
  41/8
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  96
  app
  "\"'(eval (app or (-> (app not x2) <-) (app not x3)) (env (() () () () () () ())))\""
  28
  17
  9
  2
  17
  9
  26
  1
  1
  89/17
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app (app p n1) n2) n3) n4) n5) (-> n6 <-))\n  (env (() () () () () () () ())))\""
  31
  19
  10
  2
  19
  10
  29
  1
  1
  100/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env (() () () () () () ())))\""
  32
  20
  10
  2
  20
  10
  30
  1
  1
  21/4
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  96
  app
  "\"'(eval\n  (app (-> (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) <-) n7)\n  (env (() () () () () () () ())))\""
  55
  35
  12
  8
  35
  12
  47
  1
  1
  36/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 x2) (env (() () () () () () ())))\""
  56
  36
  12
  8
  36
  12
  48
  1
  1
  185/36
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  96
  lambda
  "\"'(eval (λ (x6) (-> (λ (x7) ...) <-)) (env (() () () () () ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env (() ())))\""
  56
  36
  12
  8
  36
  12
  48
  1
  1
  185/36
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app (-> not <-) x4) (env (() () () () () () ())))\""
  57
  37
  12
  8
  37
  12
  49
  1
  1
  190/37
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  96
  lambda
  "\"'(eval (app try (-> (λ (n7) ...) <-)) (env (() () () () () () ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (() () () () () () ())))\""
  64
  41
  15
  8
  41
  15
  56
  1
  1
  212/41
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  96
  lambda
  "\"'(eval (λ (x4) (-> (λ (x5) ...) <-)) (env (() () () ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app or x1 (-> x2 <-)) (env (() () () () () () ())))\""
  65
  42
  15
  8
  42
  15
  57
  1
  1
  109/21
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  96
  app
  "\"'(eval (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  0
  10
  96
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env (() () () () () () ())))\""
  24
  14
  8
  2
  14
  8
  22
  1
  1
  73/14
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env (() () () () () () ())))\""
  28
  17
  9
  2
  17
  9
  26
  1
  1
  90/17
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  96
  lambda
  "\"'(eval (λ (x1) (-> (λ (x2) ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-7 <-) phi) (env ()))\""
  29
  18
  9
  2
  18
  9
  27
  1
  1
  95/18
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (() () () () () () ())))\""
  35
  21
  12
  2
  21
  12
  33
  1
  1
  16/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  96
  app
  "\"'(eval (λ (n3) (-> (app try (λ (n4) ...)) <-)) (env (() () () ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app sat-solve-7 (-> phi <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  96
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env (() () () () () () ())))\""
  34
  19
  13
  2
  19
  13
  32
  1
  1
  100/19
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x4) x1) (env (() () () () () () ())))\""
  35
  20
  13
  2
  20
  13
  33
  1
  1
  21/4
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env (() () ())))\""
  36
  21
  13
  2
  21
  13
  34
  1
  1
  110/21
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  96
  lambda
  "\"'(eval (app try (-> (λ (n1) ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (() () () () () () ())))\""
  38
  23
  13
  2
  23
  13
  36
  1
  1
  120/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app (-> or <-) x3 x4) (env (() () () () () () ())))\""
  39
  24
  13
  2
  24
  13
  37
  1
  1
  125/24
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  96
  lambda
  "\"'(eval (letrec* (... () (phi (-> (λ (x1) ...) <-)) try ...) ...) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app (-> p <-) n1) (env (() () () () () () () ())))\""
  42
  25
  15
  2
  25
  15
  40
  1
  1
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  96
  app
  "\"'(eval (app (-> (app (app p n1) n2) <-) n3) (env (() () () () () () () ())))\""
  48
  29
  15
  4
  29
  15
  44
  1
  1
  150/29
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  96
  app
  "\"'(eval\n  (λ (n7)\n    (-> (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7) <-))\n  (env (() () () () () () () ())))\""
  97
  71
  17
  9
  71
  17
  88
  1
  1
  385/71
  ((4 4 0) (4 4 0) (4 4 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  96
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env (())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((2 2 0) (5/2 5/2 0) (2 2 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n7) ...)) (env (() () () () () () ())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x2) (app not x3)) (env (() () () () () () ())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  96
  app
  "\"'(eval\n  (app (-> (app (app (app (app (app p n1) n2) n3) n4) n5) <-) n6)\n  (env (() () () () () () () ())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env (() () () () () () ())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  96
  app
  "\"'(eval (λ (n6) (-> (app try (λ (n7) ...)) <-)) (env (() () () () () () ())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app p (-> n1 <-)) (env (() () () () () () () ())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env (())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app (app (app p n1) n2) (-> n3 <-)) (env (() () () () () () () ())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  96
  app
  "\"'(eval (app f (-> (app #t) <-)) (env (())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  96
  lambda
  "\"'(eval (λ (x3) (-> (λ (x4) ...) <-)) (env (() () ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  0
  96
  lambda
  "\"'(eval (app try (-> (λ (n4) ...) <-)) (env (() () () ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  0
  96
  lambda
  "\"'(eval (app try (-> (λ (n2) ...) <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  0
  10
  96
  app
  "\"'(eval (letrec* (phi ... sat-solve-7) (-> (app sat-solve-7 phi) <-)) (env ()))\""
  137
  94
  25
  18
  94
  25
  119
  1
  1
  523/94
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  96
  lambda
  "\"'(eval (λ (x5) (-> (λ (x6) ...) <-)) (env (() () () () ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  0
  10
  96
  app
  "\"'(eval\n  (λ (x7)\n    (->\n     (app\n      and\n      (app or x1 x2)\n      (app or x1 (app not x2) (app not x3))\n      (app or x3 x4)\n      (app or (app not x4) x1)\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env (() () () () () () ())))\""
  137
  94
  25
  18
  94
  25
  119
  1
  1
  523/94
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  96
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 x2) <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (() () () () () () ())))\""
  137
  94
  25
  18
  94
  25
  119
  1
  1
  523/94
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  96
  app
  "\"'(eval\n  (app (-> (app (app (app (app p n1) n2) n3) n4) <-) n5)\n  (env (() () () () () () () ())))\""
  137
  94
  25
  18
  94
  25
  119
  1
  1
  523/94
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  96
  app
  "\"'(eval (app f (-> (app #f) <-)) (env (())))\""
  137
  94
  25
  18
  94
  25
  119
  1
  1
  523/94
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app or (-> x3 <-) x4) (env (() () () () () () ())))\""
  137
  94
  25
  18
  94
  25
  119
  1
  1
  523/94
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  96
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (() () () () () () ())))\""
  137
  94
  25
  18
  94
  25
  119
  1
  1
  523/94
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n6) ...)) (env (() () () () () ())))\""
  137
  94
  25
  18
  94
  25
  119
  1
  1
  523/94
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app or x3 (-> x4 <-)) (env (() () () () () () ())))\""
  137
  94
  25
  18
  94
  25
  119
  1
  1
  523/94
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env (())))\""
  137
  94
  25
  18
  94
  25
  119
  1
  1
  523/94
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app (-> or <-) x4 x2) (env (() () () () () () ())))\""
  137
  94
  25
  18
  94
  25
  119
  1
  1
  523/94
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  96
  constructor
  "\"'(eval (app (-> #f <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  0
  10
  96
  app
  "\"'(eval (λ (n2) (-> (app try (λ (n3) ...)) <-)) (env (() () ())))\""
  137
  94
  25
  18
  94
  25
  119
  1
  1
  523/94
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  96
  app
  "\"'(eval (app (-> (app p n1) <-) n2) (env (() () () () () () () ())))\""
  137
  94
  25
  18
  94
  25
  119
  1
  1
  523/94
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  96
  app
  "\"'(eval (app or (app not x2) (-> (app not x3) <-)) (env (() () () () () () ())))\""
  137
  94
  25
  18
  94
  25
  119
  1
  1
  523/94
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env (())))\""
  137
  94
  25
  18
  94
  25
  119
  1
  1
  523/94
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app not (-> x4 <-)) (env (() () () () () () ())))\""
  137
  94
  25
  18
  94
  25
  119
  1
  1
  523/94
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  96
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env (() () () () () () ())))\""
  137
  94
  25
  18
  94
  25
  119
  1
  1
  523/94
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env (())))\""
  137
  94
  25
  18
  94
  25
  119
  1
  1
  523/94
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  96
  app
  "\"'(eval\n  (app (-> (app (app (app p n1) n2) n3) <-) n4)\n  (env (() () () () () () () ())))\""
  137
  94
  25
  18
  94
  25
  119
  1
  1
  523/94
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app (app p n1) (-> n2 <-)) (env (() () () () () () () ())))\""
  137
  94
  25
  18
  94
  25
  119
  1
  1
  523/94
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env (() () () () () () ())))\""
  137
  94
  25
  18
  94
  25
  119
  1
  1
  523/94
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  96
  letrec*
  "\"'(eval ((top) letrec* (phi ... sat-solve-7) ...) (env ()))\""
  138
  95
  25
  18
  95
  25
  120
  1
  1
  529/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  96
  lambda
  "\"'(eval\n  (letrec* (... phi (try (-> (λ (f) ...) <-)) sat-solve-7 ...) ...)\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app p n1) n2) n3) (-> n4 <-))\n  (env (() () () () () () () ())))\""
  138
  95
  25
  18
  95
  25
  120
  1
  1
  529/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 (app not x2) (app not x3))\n  (env (() () () () () () ())))\""
  138
  95
  25
  18
  95
  25
  120
  1
  1
  529/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  96
  lambda
  "\"'(eval (app try (-> (λ (n3) ...) <-)) (env (() () ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  0
  10
  96
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env (() () () () () () ())))\""
  138
  95
  25
  18
  95
  25
  120
  1
  1
  529/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  96
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env (() ())))\""
  138
  95
  25
  18
  95
  25
  120
  1
  1
  529/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) x2) (env (() () () () () () ())))\""
  138
  95
  25
  18
  95
  25
  120
  1
  1
  529/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  96
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env (())))\""
  138
  95
  25
  18
  95
  25
  120
  1
  1
  529/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  96
  app
  "\"'(eval (λ (n4) (-> (app try (λ (n5) ...)) <-)) (env (() () () () ())))\""
  138
  95
  25
  18
  95
  25
  120
  1
  1
  529/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (() () () () () () ())))\""
  138
  95
  25
  18
  95
  25
  120
  1
  1
  529/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  96
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env (())))\""
  138
  95
  25
  18
  95
  25
  120
  1
  1
  529/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  96
  lambda
  "\"'(eval\n  (letrec* (... try (sat-solve-7 (-> (λ (p) ...) <-)) () ...) ...)\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  0
  10
  96
  app
  "\"'(eval (λ (n5) (-> (app try (λ (n6) ...)) <-)) (env (() () () () () ())))\""
  138
  95
  25
  18
  95
  25
  120
  1
  1
  529/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (() () () () () () ())))\""
  138
  95
  25
  18
  95
  25
  120
  1
  1
  529/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  96
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or x3 x4) <-)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (() () () () () () ())))\""
  138
  95
  25
  18
  95
  25
  120
  1
  1
  529/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n5) ...)) (env (() () () () ())))\""
  138
  95
  25
  18
  95
  25
  120
  1
  1
  529/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app or (app not x4) (-> x1 <-)) (env (() () () () () () ())))\""
  138
  95
  25
  18
  95
  25
  120
  1
  1
  529/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  96
  app
  "\"'(eval (app or (-> (app not x4) <-) x1) (env (() () () () () () ())))\""
  138
  95
  25
  18
  95
  25
  120
  1
  1
  529/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (() () () () () () ())))\""
  138
  95
  25
  18
  95
  25
  120
  1
  1
  529/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  96
  constructor
  "\"'(eval (app (-> #t <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env (() () () () () () ())))\""
  138
  95
  25
  18
  95
  25
  120
  1
  1
  529/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  96
  lambda
  "\"'(eval (λ (x2) (-> (λ (x3) ...) <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n4) ...)) (env (() () () ())))\""
  138
  95
  25
  18
  95
  25
  120
  1
  1
  529/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  96
  lambda
  "\"'(eval (app try (-> (λ (n5) ...) <-)) (env (() () () () ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app p n1) n2) n3) n4) (-> n5 <-))\n  (env (() () () () () () () ())))\""
  140
  96
  26
  18
  96
  26
  122
  1
  1
  535/96
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-2
  0
  96
  lambda
  "\"'(eval (app try (-> (λ (n6) ...) <-)) (env (() () () () () ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-2
  0
  10
  96
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (-> (app or (app not x4) x1) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (() () () () () () ())))\""
  140
  96
  26
  18
  96
  26
  122
  1
  1
  535/96
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n6) ...)) (env (() () () () () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  96
  app
  "\"'(eval\n  (app or x1 (app not x2) (-> (app not x3) <-))\n  (env (() () () () () () ())))\""
  27
  15
  10
  2
  15
  10
  25
  1
  1
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env (() () () () () () ())))\""
  31
  18
  11
  2
  18
  11
  29
  1
  1
  95/18
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app (-> p <-) n1) (env (() () () () () () () ())))\""
  36
  21
  13
  2
  21
  13
  34
  1
  1
  110/21
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  96
  app
  "\"'(eval (λ (n3) (-> (app try (λ (n4) ...)) <-)) (env (() () () ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app (-> or <-) x4 x2) (env (() () () () () () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (() () () () () () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env (())))\""
  18
  10
  8
  0
  10
  8
  18
  1
  1
  28/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  96
  app
  "\"'(eval (app (-> (app (app p n1) n2) <-) n3) (env (() () () () () () () ())))\""
  29
  17
  10
  2
  17
  10
  27
  1
  1
  91/17
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x2) (app not x3)) (env (() () () () () () ())))\""
  30
  18
  10
  2
  18
  10
  28
  1
  1
  16/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app or x1 (-> x2 <-)) (env (() () () () () () ())))\""
  50
  28
  18
  4
  28
  18
  46
  1
  1
  37/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  96
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env (() () () () () () ())))\""
  63
  38
  21
  4
  38
  21
  59
  1
  1
  102/19
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  96
  app
  "\"'(eval (app or (-> (app not x2) <-) (app not x3)) (env (() () () () () () ())))\""
  63
  38
  21
  4
  38
  21
  59
  1
  1
  102/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  96
  app
  "\"'(eval (app or (-> (app not x4) <-) x1) (env (() () () () () () ())))\""
  71
  43
  24
  4
  43
  24
  67
  1
  1
  232/43
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  96
  lambda
  "\"'(eval (letrec* (... () (phi (-> (λ (x1) ...) <-)) try ...) ...) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n7) ...)) (env (() () () () () () ())))\""
  72
  44
  24
  4
  44
  24
  68
  1
  1
  237/44
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env (())))\""
  73
  45
  24
  4
  45
  24
  69
  1
  1
  242/45
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  96
  lambda
  "\"'(eval (λ (x6) (-> (λ (x7) ...) <-)) (env (() () () () () ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  0
  10
  96
  app
  "\"'(eval\n  (λ (n7)\n    (-> (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) n7) <-))\n  (env (() () () () () () () ())))\""
  114
  80
  25
  9
  80
  25
  105
  1
  1
  109/20
  ((7/2 7/2 0) (7/2 7/2 0) (7/2 7/2 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-7 <-) phi) (env ()))\""
  114
  80
  25
  9
  80
  25
  105
  1
  1
  109/20
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  96
  lambda
  "\"'(eval (app try (-> (λ (n5) ...) <-)) (env (() () () () ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  0
  96
  lambda
  "\"'(eval (λ (x1) (-> (λ (x2) ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  0
  10
  96
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env (() () () () () () ())))\""
  114
  80
  25
  9
  80
  25
  105
  1
  1
  109/20
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app or (-> x3 <-) x4) (env (() () () () () () ())))\""
  114
  80
  25
  9
  80
  25
  105
  1
  1
  109/20
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  96
  app
  "\"'(eval (λ (n6) (-> (app try (λ (n7) ...)) <-)) (env (() () () () () () ())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app not (-> x4 <-)) (env (() () () () () () ())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  96
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (-> (app or (app not x4) x1) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (() () () () () () ())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  96
  app
  "\"'(eval (λ (n4) (-> (app try (λ (n5) ...)) <-)) (env (() () () () ())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  96
  lambda
  "\"'(eval (app try (-> (λ (n6) ...) <-)) (env (() () () () () ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env (() () ())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (() () () () () () ())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  96
  constructor
  "\"'(eval (app (-> #f <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env (())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env (() ())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  96
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env (())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  96
  app
  "\"'(eval (app f (-> (app #f) <-)) (env (())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  96
  constructor
  "\"'(eval (app (-> #t <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  0
  96
  lambda
  "\"'(eval (app try (-> (λ (n1) ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app p n1) n2) n3) (-> n4 <-))\n  (env (() () () () () () () ())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 x2) (env (() () () () () () ())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  96
  lambda
  "\"'(eval\n  (letrec* (... phi (try (-> (λ (f) ...) <-)) sat-solve-7 ...) ...)\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  0
  96
  lambda
  "\"'(eval\n  (letrec* (... try (sat-solve-7 (-> (λ (p) ...) <-)) () ...) ...)\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  0
  96
  lambda
  "\"'(eval (app try (-> (λ (n2) ...) <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (() () () () () () ())))\""
  134
  92
  25
  17
  92
  25
  117
  1
  1
  511/92
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) (-> n7 <-))\n  (env (() () () () () () () ())))\""
  136
  93
  26
  17
  93
  26
  119
  1
  1
  517/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  96
  lambda
  "\"'(eval (app try (-> (λ (n4) ...) <-)) (env (() () () ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  0
  10
  96
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 x2) <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (() () () () () () ())))\""
  136
  93
  26
  17
  93
  26
  119
  1
  1
  517/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  96
  lambda
  "\"'(eval (λ (x2) (-> (λ (x3) ...) <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  0
  10
  96
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env (() ())))\""
  136
  93
  26
  17
  93
  26
  119
  1
  1
  517/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  96
  lambda
  "\"'(eval (λ (x4) (-> (λ (x5) ...) <-)) (env (() () () ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  0
  96
  lambda
  "\"'(eval (λ (x3) (-> (λ (x4) ...) <-)) (env (() () ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app sat-solve-7 (-> phi <-)) (env ()))\""
  136
  93
  26
  17
  93
  26
  119
  1
  1
  517/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env (() () () () () () ())))\""
  136
  93
  26
  17
  93
  26
  119
  1
  1
  517/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env (() () () () () () ())))\""
  136
  93
  26
  17
  93
  26
  119
  1
  1
  517/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  96
  app
  "\"'(eval (λ (n2) (-> (app try (λ (n3) ...)) <-)) (env (() () ())))\""
  136
  93
  26
  17
  93
  26
  119
  1
  1
  517/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app p n1) n2) n3) n4) (-> n5 <-))\n  (env (() () () () () () () ())))\""
  138
  94
  27
  17
  94
  27
  121
  1
  1
  523/94
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (() () () () () () ())))\""
  138
  94
  27
  17
  94
  27
  121
  1
  1
  523/94
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app or x3 (-> x4 <-)) (env (() () () () () () ())))\""
  138
  94
  27
  17
  94
  27
  121
  1
  1
  523/94
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  96
  app
  "\"'(eval\n  (app (-> (app (app (app (app (app p n1) n2) n3) n4) n5) <-) n6)\n  (env (() () () () () () () ())))\""
  138
  94
  27
  17
  94
  27
  121
  1
  1
  523/94
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  96
  app
  "\"'(eval (app (-> (app p n1) <-) n2) (env (() () () () () () () ())))\""
  138
  94
  27
  17
  94
  27
  121
  1
  1
  523/94
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  96
  app
  "\"'(eval (letrec* (phi ... sat-solve-7) (-> (app sat-solve-7 phi) <-)) (env ()))\""
  141
  96
  27
  18
  96
  27
  123
  1
  1
  535/96
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  96
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env (())))\""
  141
  96
  27
  18
  96
  27
  123
  1
  1
  535/96
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  96
  app
  "\"'(eval\n  (app (-> (app (app (app p n1) n2) n3) <-) n4)\n  (env (() () () () () () () ())))\""
  141
  96
  27
  18
  96
  27
  123
  1
  1
  535/96
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app or (app not x4) (-> x1 <-)) (env (() () () () () () ())))\""
  141
  96
  27
  18
  96
  27
  123
  1
  1
  535/96
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  96
  lambda
  "\"'(eval (λ (x5) (-> (λ (x6) ...) <-)) (env (() () () () ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  0
  10
  96
  app
  "\"'(eval\n  (λ (x7)\n    (->\n     (app\n      and\n      (app or x1 x2)\n      (app or x1 (app not x2) (app not x3))\n      (app or x3 x4)\n      (app or (app not x4) x1)\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env (() () () () () () ())))\""
  141
  96
  27
  18
  96
  27
  123
  1
  1
  535/96
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  96
  app
  "\"'(eval\n  (app (-> (app (app (app (app p n1) n2) n3) n4) <-) n5)\n  (env (() () () () () () () ())))\""
  141
  96
  27
  18
  96
  27
  123
  1
  1
  535/96
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n4) ...)) (env (() () () ())))\""
  141
  96
  27
  18
  96
  27
  123
  1
  1
  535/96
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  96
  app
  "\"'(eval (app f (-> (app #t) <-)) (env (())))\""
  141
  96
  27
  18
  96
  27
  123
  1
  1
  535/96
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  96
  app
  "\"'(eval\n  (app (-> (app (app (app (app (app (app p n1) n2) n3) n4) n5) n6) <-) n7)\n  (env (() () () () () () () ())))\""
  141
  96
  27
  18
  96
  27
  123
  1
  1
  535/96
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  96
  app
  "\"'(eval (λ (n5) (-> (app try (λ (n6) ...)) <-)) (env (() () () () () ())))\""
  141
  96
  27
  18
  96
  27
  123
  1
  1
  535/96
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env (() () () () () () ())))\""
  141
  96
  27
  18
  96
  27
  123
  1
  1
  535/96
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  96
  app
  "\"'(eval (app or (app not x2) (-> (app not x3) <-)) (env (() () () () () () ())))\""
  141
  96
  27
  18
  96
  27
  123
  1
  1
  535/96
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval\n  (app (-> or <-) x1 (app not x2) (app not x3))\n  (env (() () () () () () ())))\""
  141
  96
  27
  18
  96
  27
  123
  1
  1
  535/96
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app (-> or <-) x3 x4) (env (() () () () () () ())))\""
  141
  96
  27
  18
  96
  27
  123
  1
  1
  535/96
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env (())))\""
  141
  96
  27
  18
  96
  27
  123
  1
  1
  535/96
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app (-> not <-) x4) (env (() () () () () () ())))\""
  141
  96
  27
  18
  96
  27
  123
  1
  1
  535/96
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  96
  letrec*
  "\"'(eval ((top) letrec* (phi ... sat-solve-7) ...) (env ()))\""
  142
  97
  27
  18
  97
  27
  124
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) x2) (env (() () () () () () ())))\""
  142
  97
  27
  18
  97
  27
  124
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (() () () () () () ())))\""
  142
  97
  27
  18
  97
  27
  124
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app (app p n1) (-> n2 <-)) (env (() () () () () () () ())))\""
  142
  97
  27
  18
  97
  27
  124
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  96
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or x3 x4) <-)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (() () () () () () ())))\""
  142
  97
  27
  18
  97
  27
  124
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  96
  app
  "\"'(eval\n  (app or x1 (-> (app not x2) <-) (app not x3))\n  (env (() () () () () () ())))\""
  142
  97
  27
  18
  97
  27
  124
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  96
  lambda
  "\"'(eval (app try (-> (λ (n3) ...) <-)) (env (() () ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (() () () () () () ())))\""
  142
  97
  27
  18
  97
  27
  124
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval\n  (app or (-> x1 <-) (app not x2) (app not x3))\n  (env (() () () () () () ())))\""
  142
  97
  27
  18
  97
  27
  124
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n5) ...)) (env (() () () () ())))\""
  142
  97
  27
  18
  97
  27
  124
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  96
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (() () () () () () ())))\""
  142
  97
  27
  18
  97
  27
  124
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  96
  app
  "\"'(eval (λ (f) (-> (app or (app f (app #t)) (app f (app #f))) <-)) (env (())))\""
  142
  97
  27
  18
  97
  27
  124
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (() () () () () () ())))\""
  142
  97
  27
  18
  97
  27
  124
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  96
  lambda
  "\"'(eval (app try (-> (λ (n7) ...) <-)) (env (() () () () () () ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app (app (app p n1) n2) (-> n3 <-)) (env (() () () () () () () ())))\""
  142
  97
  27
  18
  97
  27
  124
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  96
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env (())))\""
  142
  97
  27
  18
  97
  27
  124
  1
  1
  541/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval\n  (app (app (app (app (app (app p n1) n2) n3) n4) n5) (-> n6 <-))\n  (env (() () () () () () () ())))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app p (-> n1 <-)) (env (() () () () () () () ())))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-2
  0
  10
  96
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x4) x1) (env (() () () () () () ())))\""
  144
  98
  28
  18
  98
  28
  126
  1
  1
  547/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  100
  lambda
  "\"'(eval (app try (-> (λ (n4) ...) <-)) (env (() () () ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-3
  0
  10
  100
  app
  "\"'(eval (app or x1 (app not x2) (-> (app not x3) <-)) (env (())))\""
  23
  15
  6
  2
  15
  6
  21
  1
  1
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-7 <-) phi) (env ()))\""
  23
  15
  6
  2
  15
  6
  21
  1
  1
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  100
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  35
  25
  8
  2
  25
  8
  33
  1
  1
  134/25
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app or (app not x4) (-> x1 <-)) (env (())))\""
  36
  26
  8
  2
  26
  8
  34
  1
  1
  70/13
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  100
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env ()))\""
  38
  28
  8
  2
  28
  8
  36
  1
  1
  75/14
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  100
  app
  "\"'(eval (app or (app not x2) (-> (app not x3) <-)) (env (())))\""
  41
  31
  8
  2
  31
  8
  39
  1
  1
  167/31
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env (())))\""
  45
  34
  9
  2
  34
  9
  43
  1
  1
  92/17
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> p <-) n1 n2 n3 n4 n5 n6 n7) (env (() () () () () () () ())))\""
  50
  37
  11
  2
  37
  11
  48
  1
  1
  199/37
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n4) ...)) (env (() () () ())))\""
  50
  37
  11
  2
  37
  11
  48
  1
  1
  199/37
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 n4 n5 n6 (-> n7 <-)) (env (() () () () () () () ())))\""
  53
  39
  12
  2
  39
  12
  51
  1
  1
  70/13
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  100
  app
  "\"'(eval (λ (n3) (-> (app try (λ (n4) ...)) <-)) (env (() () () ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-3
  0
  100
  lambda
  "\"'(eval (app try (-> (λ (n5) ...) <-)) (env (() () () () ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-3
  0
  10
  100
  letrec*
  "\"'(eval ((top) letrec* (println ... sat-solve-7) ...) (env ()))\""
  5
  5
  0
  0
  5
  0
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 (-> n4 <-) n5 n6 n7) (env (() () () () () () () ())))\""
  16
  12
  3
  1
  12
  3
  15
  1
  1
  61/12
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  100
  app
  "\"'(eval (let (... () (_ (-> (app display s) <-)) () ...) ...) (env (())))\""
  22
  16
  5
  1
  16
  5
  21
  1
  1
  79/16
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  100
  lambda
  "\"'(eval\n  (letrec* (... phi (try (-> (λ (f) ...) <-)) sat-solve-7 ...) ...)\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> display <-) s) (env (())))\""
  22
  16
  5
  1
  16
  5
  21
  1
  1
  79/16
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n5) ...)) (env (() () () () ())))\""
  23
  17
  5
  1
  17
  5
  22
  1
  1
  84/17
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env (())))\""
  33
  22
  9
  2
  22
  9
  31
  1
  1
  111/22
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> not <-) x4) (env (())))\""
  34
  23
  9
  2
  23
  9
  32
  1
  1
  116/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  100
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4 x5 x6 x7)\n    (->\n     (app\n      and\n      (app or x1 x2)\n      (app or x1 (app not x2) (app not x3))\n      (app or x3 x4)\n      (app or (app not x4) x1)\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env (())))\""
  77
  64
  11
  2
  64
  11
  75
  1
  1
  347/64
  ((4 4 0) (4 4 0) (4 4 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env (())))\""
  92
  71
  19
  2
  71
  19
  90
  1
  1
  388/71
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) x2) (env (())))\""
  92
  71
  19
  2
  71
  19
  90
  1
  1
  388/71
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env (())))\""
  93
  72
  19
  2
  72
  19
  91
  1
  1
  131/24
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app or (-> x3 <-) x4) (env (())))\""
  93
  72
  19
  2
  72
  19
  91
  1
  1
  131/24
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  100
  app
  "\"'(eval\n  (let (... () (_ (-> (app display (app sat-solve-7 phi)) <-)) () ...) ...)\n  (env ()))\""
  126
  93
  21
  12
  93
  21
  114
  1
  1
  517/93
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (())))\""
  126
  93
  21
  12
  93
  21
  114
  1
  1
  517/93
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  100
  lambda
  "\"'(eval (app try (-> (λ (n2) ...) <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-3
  0
  10
  100
  let
  "\"'(eval (λ (s) (-> (let (_) ...) <-)) (env (())))\""
  129
  96
  21
  12
  96
  21
  117
  1
  1
  133/24
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  100
  app
  "\"'(eval (app or (-> (app not x4) <-) x1) (env (())))\""
  129
  96
  21
  12
  96
  21
  117
  1
  1
  133/24
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> display <-) (app sat-solve-7 phi)) (env ()))\""
  129
  96
  21
  12
  96
  21
  117
  1
  1
  133/24
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  129
  96
  21
  12
  96
  21
  117
  1
  1
  133/24
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  100
  lambda
  "\"'(eval (app try (-> (λ (n3) ...) <-)) (env (() () ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  129
  96
  21
  12
  96
  21
  117
  1
  1
  133/24
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x2) (app not x3)) (env (())))\""
  129
  96
  21
  12
  96
  21
  117
  1
  1
  133/24
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 (app not x2) (app not x3)) (env (())))\""
  129
  96
  21
  12
  96
  21
  117
  1
  1
  133/24
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app p n1 n2 (-> n3 <-) n4 n5 n6 n7) (env (() () () () () () () ())))\""
  129
  96
  21
  12
  96
  21
  117
  1
  1
  133/24
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  100
  app
  "\"'(eval (λ (n5) (-> (app try (λ (n6) ...)) <-)) (env (() () () () () ())))\""
  129
  96
  21
  12
  96
  21
  117
  1
  1
  133/24
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env (())))\""
  129
  96
  21
  12
  96
  21
  117
  1
  1
  133/24
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  100
  app
  "\"'(eval (let (_) (-> (app or (app f (app #t)) (app f (app #f))) <-)) (env (())))\""
  129
  96
  21
  12
  96
  21
  117
  1
  1
  133/24
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env (())))\""
  129
  96
  21
  12
  96
  21
  117
  1
  1
  133/24
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env (())))\""
  129
  96
  21
  12
  96
  21
  117
  1
  1
  133/24
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> newline <-)) (env ()))\""
  129
  96
  21
  12
  96
  21
  117
  1
  1
  133/24
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  100
  let
  "\"'(eval (letrec* (println ... sat-solve-7) (-> (let (_) ...) <-)) (env ()))\""
  129
  96
  21
  12
  96
  21
  117
  1
  1
  133/24
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  100
  constructor
  "\"'(eval (app (-> #t <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-3
  0
  10
  100
  app
  "\"'(eval (app or (-> (app not x2) <-) (app not x3)) (env (())))\""
  129
  96
  21
  12
  96
  21
  117
  1
  1
  133/24
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  100
  app
  "\"'(eval\n  (λ (n7) (-> (app p n1 n2 n3 n4 n5 n6 n7) <-))\n  (env (() () () () () () () ())))\""
  129
  96
  21
  12
  96
  21
  117
  1
  1
  133/24
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app p n1 (-> n2 <-) n3 n4 n5 n6 n7) (env (() () () () () () () ())))\""
  129
  96
  21
  12
  96
  21
  117
  1
  1
  133/24
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x4) x1) (env (())))\""
  129
  96
  21
  12
  96
  21
  117
  1
  1
  133/24
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  100
  app
  "\"'(eval (λ (n2) (-> (app try (λ (n3) ...)) <-)) (env (() () ())))\""
  129
  96
  21
  12
  96
  21
  117
  1
  1
  133/24
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  100
  constructor
  "\"'(eval (app (-> #f <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 n4 n5 (-> n6 <-) n7) (env (() () () () () () () ())))\""
  131
  97
  22
  12
  97
  22
  119
  1
  1
  538/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  100
  app
  "\"'(eval (λ (n6) (-> (app try (λ (n7) ...)) <-)) (env (() () () () () () ())))\""
  131
  97
  22
  12
  97
  22
  119
  1
  1
  538/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  100
  lambda
  "\"'(eval (app try (-> (λ (n6) ...) <-)) (env (() () () () () ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-3
  0
  10
  100
  app
  "\"'(eval (app or x1 (-> (app not x2) <-) (app not x3)) (env (())))\""
  131
  97
  22
  12
  97
  22
  119
  1
  1
  538/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (())))\""
  131
  97
  22
  12
  97
  22
  119
  1
  1
  538/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> or <-) x4 x2) (env (())))\""
  131
  97
  22
  12
  97
  22
  119
  1
  1
  538/97
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  100
  lambda
  "\"'(eval (letrec* (... () (println (-> (λ (s) ...) <-)) phi ...) ...) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-3
  0
  10
  100
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (-> (app or (app not x4) x1) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  132
  98
  22
  12
  98
  22
  120
  1
  1
  543/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env (())))\""
  132
  98
  22
  12
  98
  22
  120
  1
  1
  543/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  100
  lambda
  "\"'(eval\n  (letrec*\n   (... println (phi (-> (λ (x1 x2 x3 x4 x5 x6 x7) ...) <-)) try ...)\n   ...)\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app or x3 (-> x4 <-)) (env (())))\""
  132
  98
  22
  12
  98
  22
  120
  1
  1
  543/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  100
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 x2) <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  132
  98
  22
  12
  98
  22
  120
  1
  1
  543/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 x2) (env (())))\""
  132
  98
  22
  12
  98
  22
  120
  1
  1
  543/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env (() () ())))\""
  132
  98
  22
  12
  98
  22
  120
  1
  1
  543/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app not (-> x4 <-)) (env (())))\""
  132
  98
  22
  12
  98
  22
  120
  1
  1
  543/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  132
  98
  22
  12
  98
  22
  120
  1
  1
  543/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> or <-) x3 x4) (env (())))\""
  132
  98
  22
  12
  98
  22
  120
  1
  1
  543/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) (app not x2) (app not x3)) (env (())))\""
  132
  98
  22
  12
  98
  22
  120
  1
  1
  543/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  100
  string
  "\"'(eval (app println (-> \"trying\" <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (())))\""
  132
  98
  22
  12
  98
  22
  120
  1
  1
  543/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  100
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env (())))\""
  132
  98
  22
  12
  98
  22
  120
  1
  1
  543/98
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  100
  app
  "\"'(eval (let (... () (_ (-> (app println \"trying\") <-)) () ...) ...) (env (())))\""
  135
  100
  22
  13
  100
  22
  122
  1
  1
  553/100
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  100
  lambda
  "\"'(eval\n  (letrec* (... try (sat-solve-7 (-> (λ (p) ...) <-)) () ...) ...)\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app or x1 (-> x2 <-)) (env (())))\""
  135
  100
  22
  13
  100
  22
  122
  1
  1
  553/100
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app display (-> s <-)) (env (())))\""
  135
  100
  22
  13
  100
  22
  122
  1
  1
  553/100
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  100
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env (())))\""
  135
  100
  22
  13
  100
  22
  122
  1
  1
  553/100
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  100
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or x3 x4) <-)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  135
  100
  22
  13
  100
  22
  122
  1
  1
  553/100
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  100
  lambda
  "\"'(eval (app try (-> (λ (n7) ...) <-)) (env (() () () () () () ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n6) ...)) (env (() () () () () ())))\""
  135
  100
  22
  13
  100
  22
  122
  1
  1
  553/100
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app sat-solve-7 (-> phi <-)) (env ()))\""
  135
  100
  22
  13
  100
  22
  122
  1
  1
  553/100
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  100
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env (() ())))\""
  135
  100
  22
  13
  100
  22
  122
  1
  1
  553/100
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 n4 (-> n5 <-) n6 n7) (env (() () () () () () () ())))\""
  137
  101
  23
  13
  101
  23
  124
  1
  1
  559/101
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  100
  app
  "\"'(eval (λ (n4) (-> (app try (λ (n5) ...)) <-)) (env (() () () () ())))\""
  137
  101
  23
  13
  101
  23
  124
  1
  1
  559/101
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  100
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env (())))\""
  137
  101
  23
  13
  101
  23
  124
  1
  1
  559/101
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  100
  app
  "\"'(eval (app display (-> (app sat-solve-7 phi) <-)) (env ()))\""
  137
  101
  23
  13
  101
  23
  124
  1
  1
  559/101
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  100
  app
  "\"'(eval (app f (-> (app #f) <-)) (env (())))\""
  137
  101
  23
  13
  101
  23
  124
  1
  1
  559/101
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n7) ...)) (env (() () () () () () ())))\""
  137
  101
  23
  13
  101
  23
  124
  1
  1
  559/101
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  100
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env (())))\""
  137
  101
  23
  13
  101
  23
  124
  1
  1
  559/101
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  100
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env (())))\""
  137
  101
  23
  13
  101
  23
  124
  1
  1
  559/101
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env (() ())))\""
  137
  101
  23
  13
  101
  23
  124
  1
  1
  559/101
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> println <-) \"trying\") (env (())))\""
  137
  101
  23
  13
  101
  23
  124
  1
  1
  559/101
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  100
  app
  "\"'(eval (app f (-> (app #t) <-)) (env (())))\""
  137
  101
  23
  13
  101
  23
  124
  1
  1
  559/101
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  100
  let
  "\"'(eval (λ (f) (-> (let (_) ...) <-)) (env (())))\""
  137
  101
  23
  13
  101
  23
  124
  1
  1
  559/101
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  100
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env (())))\""
  137
  101
  23
  13
  101
  23
  124
  1
  1
  559/101
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (())))\""
  137
  101
  23
  13
  101
  23
  124
  1
  1
  559/101
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> newline <-)) (env (())))\""
  137
  101
  23
  13
  101
  23
  124
  1
  1
  559/101
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app p (-> n1 <-) n2 n3 n4 n5 n6 n7) (env (() () () () () () () ())))\""
  137
  101
  23
  13
  101
  23
  124
  1
  1
  559/101
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  sat-3
  0
  100
  lambda
  "\"'(eval (app try (-> (λ (n1) ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  0
  10
  100
  letrec*
  "\"'(eval ((top) letrec* (println ... sat-solve-7) ...) (env ()))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n5) ...)) (env (() () () () ())))\""
  6
  6
  0
  0
  6
  0
  6
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> display <-) s) (env (())))\""
  7
  7
  0
  0
  7
  0
  7
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  100
  let
  "\"'(eval (λ (f) (-> (let (_) ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app or x1 (-> x2 <-)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app or (-> x3 <-) x4) (env (())))\""
  22
  13
  7
  2
  13
  7
  20
  1
  1
  69/13
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (())))\""
  23
  14
  7
  2
  14
  7
  21
  1
  1
  75/14
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  100
  app
  "\"'(eval (let (... () (_ (-> (app println \"trying\") <-)) () ...) ...) (env (())))\""
  30
  20
  7
  3
  20
  7
  27
  1
  1
  21/4
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  100
  app
  "\"'(eval (app f (-> (app #t) <-)) (env (())))\""
  30
  20
  7
  3
  20
  7
  27
  1
  1
  21/4
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  100
  app
  "\"'(eval (app or x1 (-> (app not x2) <-) (app not x3)) (env (())))\""
  35
  25
  7
  3
  25
  7
  32
  1
  1
  132/25
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n7) ...)) (env (() () () () () () ())))\""
  36
  26
  7
  3
  26
  7
  33
  1
  1
  137/26
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x2) (app not x3)) (env (())))\""
  37
  27
  7
  3
  27
  7
  34
  1
  1
  142/27
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  100
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (-> (app or x1 (app not x2) (app not x3)) <-)\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  46
  35
  8
  3
  35
  8
  43
  1
  1
  187/35
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  100
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (-> (app or (app not x4) x1) <-)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  55
  43
  9
  3
  43
  9
  52
  1
  1
  232/43
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) (app not x2) (app not x3)) (env (())))\""
  55
  43
  9
  3
  43
  9
  52
  1
  1
  232/43
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app p (-> n1 <-) n2 n3 n4 n5 n6 n7) (env (() () () () () () () ())))\""
  55
  43
  9
  3
  43
  9
  52
  1
  1
  232/43
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f (app #t)) (app f (app #f))) (env (())))\""
  56
  44
  9
  3
  44
  9
  53
  1
  1
  237/44
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  100
  app
  "\"'(eval (let (_) (-> (app or (app f (app #t)) (app f (app #f))) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app sat-solve-7 (-> phi <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 n4 n5 (-> n6 <-) n7) (env (() () () () () () () ())))\""
  13
  9
  3
  1
  9
  3
  12
  1
  1
  46/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n2) ...)) (env (() ())))\""
  14
  10
  3
  1
  10
  3
  13
  1
  1
  51/10
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app or x3 (-> x4 <-)) (env (())))\""
  24
  15
  7
  2
  15
  7
  22
  1
  1
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (())))\""
  25
  16
  7
  2
  16
  7
  23
  1
  1
  83/16
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  100
  lambda
  "\"'(eval (letrec* (... () (println (-> (λ (s) ...) <-)) phi ...) ...) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app or x4 (-> x2 <-)) (env (())))\""
  29
  19
  8
  2
  19
  8
  27
  1
  1
  100/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> newline <-)) (env ()))\""
  30
  20
  8
  2
  20
  8
  28
  1
  1
  21/4
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  100
  lambda
  "\"'(eval (app try (-> (λ (n7) ...) <-)) (env (() () () () () () ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  32
  22
  8
  2
  22
  8
  30
  1
  1
  58/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  100
  app
  "\"'(eval (app f (-> (app #f) <-)) (env (())))\""
  32
  22
  8
  2
  22
  8
  30
  1
  1
  58/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  100
  app
  "\"'(eval (app or (-> (app f (app #t)) <-) (app f (app #f))) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> p <-) n1 n2 n3 n4 n5 n6 n7) (env (() () () () () () () ())))\""
  5
  3
  2
  0
  3
  2
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> or <-) x3 x4) (env (())))\""
  6
  4
  2
  0
  4
  2
  6
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  100
  let
  "\"'(eval (λ (s) (-> (let (_) ...) <-)) (env (())))\""
  9
  7
  2
  0
  7
  2
  9
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> println <-) \"trying\") (env (())))\""
  11
  9
  2
  0
  9
  2
  11
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  100
  app
  "\"'(eval (app or (app f (app #t)) (-> (app f (app #f)) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app not (-> x4 <-)) (env (())))\""
  18
  10
  6
  2
  10
  6
  16
  1
  1
  26/5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-3
  0
  100
  lambda
  "\"'(eval\n  (letrec* (... try (sat-solve-7 (-> (λ (p) ...) <-)) () ...) ...)\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  0
  100
  lambda
  "\"'(eval (app try (-> (λ (n1) ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  0
  100
  app
  "\"'(eval (λ (p) (-> (app try (λ (n1) ...)) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  0
  100
  lambda
  "\"'(eval (app try (-> (λ (n3) ...) <-)) (env (() () ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  0
  100
  app
  "\"'(eval (app display (-> (app sat-solve-7 phi) <-)) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app p n1 (-> n2 <-) n3 n4 n5 n6 n7) (env (() () () () () () () ())))\""
  11
  7
  3
  1
  7
  3
  10
  1
  1
  36/7
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> display <-) (app sat-solve-7 phi)) (env ()))\""
  12
  8
  3
  1
  8
  3
  11
  1
  1
  41/8
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  100
  lambda
  "\"'(eval (app try (-> (λ (n5) ...) <-)) (env (() () () () ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> not <-) x4) (env (())))\""
  14
  10
  3
  1
  10
  3
  13
  1
  1
  51/10
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  100
  app
  "\"'(eval (λ (n4) (-> (app try (λ (n5) ...)) <-)) (env (() () () () ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  0
  10
  100
  app
  "\"'(eval\n  (app\n   and\n   (-> (app or x1 x2) <-)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  26
  17
  7
  2
  17
  7
  24
  1
  1
  90/17
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  1
  sat-3
  0
  100
  lambda
  "\"'(eval (app try (-> (λ (n4) ...) <-)) (env (() () () ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #t)) (env (())))\""
  42
  25
  15
  2
  25
  15
  40
  1
  1
  136/25
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n3) ...)) (env (() () ())))\""
  43
  26
  15
  2
  26
  15
  41
  1
  1
  141/26
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  100
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (-> (app or (app not x2) (app not x3)) <-)\n   (app or x4 x2))\n  (env (())))\""
  53
  35
  16
  2
  35
  16
  51
  1
  1
  192/35
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  1
  sat-3
  0
  100
  constructor
  "\"'(eval (app (-> #f <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  0
  10
  100
  let
  "\"'(eval (letrec* (println ... sat-solve-7) (-> (let (_) ...) <-)) (env ()))\""
  56
  38
  16
  2
  38
  16
  54
  1
  1
  207/38
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n4) ...)) (env (() () () ())))\""
  57
  39
  16
  2
  39
  16
  55
  1
  1
  212/39
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  100
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (-> (app or x3 x4) <-)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  63
  44
  17
  2
  44
  17
  61
  1
  1
  241/44
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env (())))\""
  64
  45
  17
  2
  45
  17
  62
  1
  1
  82/15
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app not (-> x2 <-)) (env (())))\""
  64
  45
  17
  2
  45
  17
  62
  1
  1
  82/15
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app or (-> x1 <-) x2) (env (())))\""
  64
  45
  17
  2
  45
  17
  62
  1
  1
  82/15
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  100
  lambda
  "\"'(eval\n  (letrec*\n   (... println (phi (-> (λ (x1 x2 x3 x4 x5 x6 x7) ...) <-)) try ...)\n   ...)\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 (-> n4 <-) n5 n6 n7) (env (() () () () () () () ())))\""
  65
  46
  17
  2
  46
  17
  63
  1
  1
  251/46
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 x2) (env (())))\""
  65
  46
  17
  2
  46
  17
  63
  1
  1
  251/46
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  100
  app
  "\"'(eval (λ (n2) (-> (app try (λ (n3) ...)) <-)) (env (() () ())))\""
  114
  84
  19
  11
  84
  19
  103
  1
  1
  118/21
  ((9/2 9/2 0) (9/2 9/2 0) (9/2 9/2 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  100
  app
  "\"'(eval (λ (n6) (-> (app try (λ (n7) ...)) <-)) (env (() () () () () () ())))\""
  114
  84
  19
  11
  84
  19
  103
  1
  1
  118/21
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> or <-) x1 (app not x2) (app not x3)) (env (())))\""
  114
  84
  19
  11
  84
  19
  103
  1
  1
  118/21
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 n4 n5 n6 (-> n7 <-)) (env (() () () () () () () ())))\""
  116
  85
  20
  11
  85
  20
  105
  1
  1
  478/85
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  100
  app
  "\"'(eval\n  (let (... () (_ (-> (app display (app sat-solve-7 phi)) <-)) () ...) ...)\n  (env ()))\""
  121
  89
  20
  12
  89
  20
  109
  1
  1
  500/89
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> sat-solve-7 <-) phi) (env ()))\""
  121
  89
  20
  12
  89
  20
  109
  1
  1
  500/89
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  100
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env (())))\""
  123
  91
  20
  12
  91
  20
  111
  1
  1
  510/91
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  100
  app
  "\"'(eval\n  (λ (n7) (-> (app p n1 n2 n3 n4 n5 n6 n7) <-))\n  (env (() () () () () () () ())))\""
  123
  91
  20
  12
  91
  20
  111
  1
  1
  510/91
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app #f)) (env (())))\""
  123
  91
  20
  12
  91
  20
  111
  1
  1
  510/91
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  100
  app
  "\"'(eval\n  (app\n   and\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (-> (app or x4 x2) <-))\n  (env (())))\""
  123
  91
  20
  12
  91
  20
  111
  1
  1
  510/91
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> not <-) x2) (env (())))\""
  123
  91
  20
  12
  91
  20
  111
  1
  1
  510/91
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  100
  lambda
  "\"'(eval (app try (-> (λ (n2) ...) <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> and <-)\n   (app or x1 x2)\n   (app or x1 (app not x2) (app not x3))\n   (app or x3 x4)\n   (app or (app not x4) x1)\n   (app or (app not x2) (app not x3))\n   (app or x4 x2))\n  (env (())))\""
  123
  91
  20
  12
  91
  20
  111
  1
  1
  510/91
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  100
  app
  "\"'(eval (app or (-> (app not x4) <-) x1) (env (())))\""
  123
  91
  20
  12
  91
  20
  111
  1
  1
  510/91
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  100
  app
  "\"'(eval (app or x1 (app not x2) (-> (app not x3) <-)) (env (())))\""
  123
  91
  20
  12
  91
  20
  111
  1
  1
  510/91
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> newline <-)) (env (())))\""
  123
  91
  20
  12
  91
  20
  111
  1
  1
  510/91
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  100
  app
  "\"'(eval (let (... () (_ (-> (app display s) <-)) () ...) ...) (env (())))\""
  129
  95
  22
  12
  95
  22
  117
  1
  1
  528/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app not (-> x3 <-)) (env (())))\""
  129
  95
  22
  12
  95
  22
  117
  1
  1
  528/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> or <-) x4 x2) (env (())))\""
  129
  95
  22
  12
  95
  22
  117
  1
  1
  528/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app display (-> s <-)) (env (())))\""
  129
  95
  22
  12
  95
  22
  117
  1
  1
  528/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  100
  app
  "\"'(eval (app or (-> (app not x2) <-) (app not x3)) (env (())))\""
  129
  95
  22
  12
  95
  22
  117
  1
  1
  528/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n6) ...)) (env (() () () () () ())))\""
  129
  95
  22
  12
  95
  22
  117
  1
  1
  528/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app or (-> x4 <-) x2) (env (())))\""
  129
  95
  22
  12
  95
  22
  117
  1
  1
  528/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> try <-) (λ (n1) ...)) (env (())))\""
  129
  95
  22
  12
  95
  22
  117
  1
  1
  528/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app or (app not x4) (-> x1 <-)) (env (())))\""
  129
  95
  22
  12
  95
  22
  117
  1
  1
  528/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app p n1 n2 (-> n3 <-) n4 n5 n6 n7) (env (() () () () () () () ())))\""
  129
  95
  22
  12
  95
  22
  117
  1
  1
  528/95
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  100
  lambda
  "\"'(eval (app try (-> (λ (n6) ...) <-)) (env (() () () () () ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app p n1 n2 n3 n4 (-> n5 <-) n6 n7) (env (() () () () () () () ())))\""
  131
  96
  23
  12
  96
  23
  119
  1
  1
  89/16
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  100
  app
  "\"'(eval (λ (n3) (-> (app try (λ (n4) ...)) <-)) (env (() () () ())))\""
  131
  96
  23
  12
  96
  23
  119
  1
  1
  89/16
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  100
  app
  "\"'(eval (app or (app not x2) (-> (app not x3) <-)) (env (())))\""
  131
  96
  23
  12
  96
  23
  119
  1
  1
  89/16
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app not x4) x1) (env (())))\""
  131
  96
  23
  12
  96
  23
  119
  1
  1
  89/16
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  100
  app
  "\"'(eval\n  (λ (x1 x2 x3 x4 x5 x6 x7)\n    (->\n     (app\n      and\n      (app or x1 x2)\n      (app or x1 (app not x2) (app not x3))\n      (app or x3 x4)\n      (app or (app not x4) x1)\n      (app or (app not x2) (app not x3))\n      (app or x4 x2))\n     <-))\n  (env (())))\""
  131
  96
  23
  12
  96
  23
  119
  1
  1
  89/16
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  100
  constructor
  "\"'(eval (app (-> #t <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  0
  10
  100
  app
  "\"'(eval (let (_) (-> (app newline) <-)) (env ()))\""
  131
  96
  23
  12
  96
  23
  119
  1
  1
  89/16
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  100
  ref-or-constructor
  "\"'(eval (app (-> not <-) x3) (env (())))\""
  131
  96
  23
  12
  96
  23
  119
  1
  1
  89/16
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  100
  app
  "\"'(eval (λ (n5) (-> (app try (λ (n6) ...)) <-)) (env (() () () () () ())))\""
  131
  96
  23
  12
  96
  23
  119
  1
  1
  89/16
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  10
  100
  app
  "\"'(eval (λ (n1) (-> (app try (λ (n2) ...)) <-)) (env (() ())))\""
  131
  96
  23
  12
  96
  23
  119
  1
  1
  89/16
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  1
  sat-3
  0
  100
  lambda
  "\"'(eval\n  (letrec* (... phi (try (-> (λ (f) ...) <-)) sat-solve-7 ...) ...)\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  1
  sat-3
  0
  100
  string
  "\"'(eval (app println (-> \"trying\" <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> ormap <-) (λ (r) ...) is) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  constructor
  "\"'(eval (app (-> #t <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval\n  (letrec*\n   (... horizon-add1 (foldl (-> (λ (f acc l) ...) <-)) fold/coord ...)\n   ...)\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval\n  (letrec* (... full? (oc< (-> (λ (oc₀ oc₁) ...) <-)) horizon< ...) ...)\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval\n  (app\n   max-maybe-move\n   mm\n   (-> (app move co (match (app wins? bo this-mark) ...)) <-))\n  (env (() ())))\""
  7
  7
  0
  0
  7
  0
  7
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (match i ((Ze) (-> (app Tw) <-)) (On) (Tw)) (env (())))\""
  9
  9
  0
  0
  9
  0
  9
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   ((#f) (-> mo₀ <-))\n   _)\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> full? <-) bo) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  string
  "\"'(eval (app error 'human-action (-> \"not implemented\" <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (app horizon (-> (app lose) <-) 0) (env (() ())))\""
  5
  5
  0
  0
  5
  0
  5
  1
  1
  24/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (match\n   (-> (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) <-)\n   (#f)\n   _)\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app maximin bo (-> ma <-) (app mark⁻¹ ma)) (env (() ())))\""
  11
  7
  4
  0
  7
  4
  11
  1
  1
  36/7
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> and <-) (app f x) (app andmap f rest-xs)) (env (())))\""
  12
  8
  4
  0
  8
  4
  12
  1
  1
  41/8
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  match
  "\"'(eval\n  (app\n   some\n   (->\n    (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...)\n    <-))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  match
  "\"'(eval (λ (b co m) (-> (match (app b co) ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app ormap f (-> rest-xs <-)) (env (())))\""
  16
  12
  4
  0
  12
  4
  16
  1
  1
  65/12
  ((1/2 1 0) (1/2 1 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...) (env (())))\""
  22
  17
  4
  1
  17
  4
  21
  1
  1
  90/17
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> lose <-)) (env (())))\""
  23
  18
  4
  1
  18
  4
  22
  1
  1
  95/18
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (match a ((blank) (-> (app #t) <-)) _) (env (())))\""
  25
  20
  4
  1
  20
  4
  24
  1
  1
  21/4
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (λ (b m)\n    (->\n     (app\n      or\n      (app ormap (λ (r) ...) is)\n      (app ormap (λ (c) ...) is)\n      (app andmap (λ (rc) ...) is)\n      (app andmap (λ (rc) ...) is))\n     <-))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> Ze <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  app
  "\"'(eval (λ (r) (-> (app marked-with? b (app coord r c) m) <-)) (env (() () ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> cons <-) (app On) (app cons (app Tw) (app nil))) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (match\n   h₁\n   ((horizon oc₁ sc₁)\n    (->\n     (app or (app oc< oc₀ oc₁) (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n     <-)))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> board-mark <-) co this-mark bo) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  app
  "\"'(eval (match (-> (app wins? bo this-mark) <-) (#f) _) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₁ <-) (app win)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app f (app coord r c) (-> x <-)) (env (() () ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> play-turn <-) empty-board player-one player-two) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₁ <-)) (env (())))\""
  7
  5
  2
  0
  5
  2
  7
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (match\n   (-> (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) <-)\n   (#f)\n   _)\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (match (-> xs <-) (empty) (cons x rest-xs)) (env (())))\""
  16
  12
  4
  0
  12
  4
  16
  1
  1
  65/12
  ((1 1 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> horizon-add1 <-)\n   (app move-horizon (app some-v (app minimax bo that-mark this-mark))))\n  (env (() ())))\""
  18
  14
  4
  0
  14
  4
  18
  1
  1
  75/14
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app equal? (-> oc₁ <-) (app lose)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> foldl <-) (λ (r x) ...) x is) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app board-lookup (-> co <-) bo) (env (() ())))\""
  10
  7
  2
  1
  7
  2
  9
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval (letrec* (... wins? (full? (-> (λ (b) ...) <-)) oc< ...) ...) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> coord <-) rc rc) (env (() ())))\""
  12
  9
  2
  1
  9
  2
  11
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  app
  "\"'(eval (match (-> (app wins? bo this-mark) <-) (#f) _) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (app make-ai-action (-> (app X) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval (app foldl (-> (λ (c x) ...) <-) x is) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  app
  "\"'(eval (match (-> (app b co) <-) (blank) (marked m*)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) (app make-ai-action (app X)))\n   (-> (app player (app O) (app make-ai-action (app O))) <-))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app board-lookup (-> co <-) bo) (env (() ())))\""
  10
  7
  2
  1
  7
  2
  9
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app minimax bo that-mark (-> this-mark <-)) (env (() ())))\""
  28
  16
  11
  1
  16
  11
  27
  1
  1
  83/16
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app action (-> bo <-)) (env (() ())))\""
  40
  24
  14
  2
  24
  14
  38
  1
  1
  31/6
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  app
  "\"'(eval (app horizon oc (-> (app + sc 1) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (app player (-> (app X) <-) human-action) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval\n  (letrec*\n   (...\n    max-maybe-move\n    (minimax (-> (λ (bo this-mark that-mark) ...) <-))\n    maximin\n    ...)\n   ...)\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> Tw <-)) (env ()))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app foldl f (app f x acc) (-> xs <-)) (env (())))\""
  20
  16
  4
  0
  16
  4
  20
  1
  1
  85/16
  ((1 1 0) (1/2 1 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval (app fold/coord (-> (λ (co mm) ...) <-) (app none)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  match
  "\"'(eval (λ (h₀ h₁) (-> (match h₀ ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  app
  "\"'(eval (app or (app f x) (-> (app ormap f rest-xs) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app foldl (λ (c x) ...) (-> x <-) is) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  let
  "\"'(eval (λ (bo this-play that-play) (-> (let (_) ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) oc₁ (app lose)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app board-lookup co (-> bo <-)) (env (() ())))\""
  10
  7
  2
  1
  7
  2
  9
  1
  1
  5
  ((0 1/2 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app board-lookup (-> co <-) bo) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app marked-with? b (app coord r c) (-> m <-)) (env (() () ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  app
  "\"'(eval (let (... () (co (-> (app action bo) <-)) () ...) ...) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  match
  "\"'(eval (λ (a) (-> (match a ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  letrec
  "\"'(eval (let (... () (co (-> (letrec (loop) ...) <-)) () ...) ...) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  string
  "\"'(eval (app error (-> \"invalid match for some-v\" <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> f <-) x acc) (env (())))\""
  9
  5
  4
  0
  5
  4
  9
  1
  1
  26/5
  ((1/2 1/2 0) (0 1/2 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (match (-> oc₀ <-) (win) (draw) (lose)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (match l ((nil) (-> acc <-)) (cons x xs)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  let
  "\"'(eval\n  (match this-play ((player mark action) (-> (let (co) ...) <-)))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (app cons (-> (app Tw) <-) (app nil)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> void <-)) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env (() () ())))\""
  40
  28
  11
  1
  28
  11
  39
  1
  1
  149/28
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app wins? bo (-> mark <-)) (env (())))\""
  77
  58
  18
  1
  58
  18
  76
  1
  1
  11/2
  ((2 2 0) (2 2 0) (2 5/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₀) (env (())))\""
  79
  60
  18
  1
  60
  18
  78
  1
  1
  329/60
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval\n  (letrec*\n   (... board-lookup (marked-with? (-> (λ (b co m) ...) <-)) i⁻¹ ...)\n   ...)\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> draw-board! <-) bo) (env (())))\""
  82
  63
  18
  1
  63
  18
  81
  1
  1
  344/63
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app marked-with? (-> b <-) (app coord rc rc) m) (env (() ())))\""
  99
  75
  22
  2
  75
  22
  97
  1
  1
  404/75
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env (() () ())))\""
  100
  76
  22
  2
  76
  22
  98
  1
  1
  409/76
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  app
  "\"'(eval (app foldl f (-> (app f x acc) <-) xs) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> blank? <-) (app board-lookup co bo)) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app O) (app make-ai-action (app O))) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) human-action) <-)\n   (app player (app O) human-action))\n  (env (())))\""
  5
  5
  0
  0
  5
  0
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (match (-> some-v-v <-) (some some-v-x) _) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval\n  (app\n   min-maybe-move\n   mm\n   (-> (app move co (match (app wins? bo this-mark) ...)) <-))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> cons <-) (app Ze) (app cons (app On) (app cons (app Tw) (app nil))))\n  (env ()))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  match
  "\"'(eval\n  (let (co) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (app fold/coord (λ (co mm) ...) (-> (app none) <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval\n  (letrec* (... () (some-v (-> (λ (some-v-v) ...) <-)) marked? ...) ...)\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app ormap (-> f <-) rest-xs) (env (())))\""
  10
  6
  4
  0
  6
  4
  10
  1
  1
  31/6
  ((0 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval (λ (co₀ ma bo) (-> (λ (co) ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  match
  "\"'(eval (λ (h) (-> (match h ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (match (-> i <-) (Ze) (On) (Tw)) (env (())))\""
  42
  28
  13
  1
  28
  13
  41
  1
  1
  151/28
  ((2 2 0) (5/2 3 0) (2 2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  constructor
  "\"'(eval (app (-> #f <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> move <-) co (match (app wins? bo this-mark) ...))\n  (env (() ())))\""
  44
  30
  13
  1
  30
  13
  43
  1
  1
  161/30
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₀ <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> win <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app board-lookup (-> co <-) bo) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (match l (nil) ((cons x xs) (-> (app foldl f (app f x acc) xs) <-)))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app maximin bo that-mark (-> this-mark <-)) (env (() ())))\""
  30
  18
  11
  1
  18
  11
  29
  1
  1
  16/3
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  match
  "\"'(eval (λ (some-v-v) (-> (match some-v-v ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (app\n   or\n   (-> (app ormap (λ (r) ...) is) <-)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (match a (marked _) (_ (-> (app #f) <-))) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> marked-with? <-) b (app coord r c) m) (env (() () ())))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval\n  (letrec* (... some-v (marked? (-> (λ (a) ...) <-)) blank? ...) ...)\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app equal? (-> m <-) m*) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app player (app X) (-> human-action <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> co <-)))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (app b (-> (app coord r c) <-)) (env (() () ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (app equal? oc₁ (-> (app lose) <-)) (env (())))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...) (env (())))\""
  10
  9
  0
  1
  9
  0
  9
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (app horizon (app draw) 0) <-)))\n  (env (() ())))\""
  12
  11
  0
  1
  11
  0
  11
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app + (-> sc <-) 1) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app f (-> x <-)) (env (())))\""
  23
  19
  4
  0
  19
  4
  23
  1
  1
  102/19
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  app
  "\"'(eval (app and (-> (app equal? oc₀ oc₁) <-) (app < sc₀ sc₁)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> make-ai-action <-) (app O)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app f x (-> acc <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> coord <-) rc (app i⁻¹ rc)) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (app player (app O) (-> (app make-ai-action (app O)) <-)) (env (())))\""
  6
  5
  0
  1
  5
  0
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> (app loop) <-)) _)\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval\n  (letrec*\n   (... blank? (move-coord (-> (λ (move-coord-v) ...) <-)) move-horizon ...)\n   ...)\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval\n  (letrec*\n   (... play-game (two-player-game (-> (λ () ...) <-)) one-player-game ...)\n   ...)\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env (() () ())))\""
  33
  25
  7
  1
  25
  7
  32
  1
  1
  134/25
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (match (-> xs <-) (empty) (cons x rest-xs)) (env (())))\""
  49
  33
  15
  1
  33
  15
  48
  1
  1
  179/33
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> board-mark <-) co this-mark bo) (env (() ())))\""
  51
  35
  15
  1
  35
  15
  50
  1
  1
  27/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (app maximin bo ma (-> (app mark⁻¹ ma) <-)) (env (() ())))\""
  74
  51
  21
  2
  51
  21
  72
  1
  1
  91/17
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  match
  "\"'(eval\n  (app\n   some\n   (->\n    (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...)\n    <-))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  app
  "\"'(eval (app some-v (-> (app maximin bo that-mark this-mark) <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon< <-) (app move-horizon mo₀) (app move-horizon mo₁))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  number
  "\"'(eval (app + sc (-> 1 <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  number
  "\"'(eval (app horizon (app win) (-> 0 <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app play-turn (-> empty-board <-) player-one player-two) (env (())))\""
  6
  6
  0
  0
  6
  0
  6
  1
  1
  14/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env (() () ())))\""
  37
  29
  7
  1
  29
  7
  36
  1
  1
  152/29
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app b (-> co <-)) (env (())))\""
  51
  38
  12
  1
  38
  12
  50
  1
  1
  100/19
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (let (... () (_ (-> (app draw-board! bo) <-)) () ...) ...) (env (())))\""
  57
  43
  12
  2
  43
  12
  55
  1
  1
  225/43
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> loop <-)) (env (() ())))\""
  59
  45
  12
  2
  45
  12
  57
  1
  1
  47/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval\n  (match (app wins? bo this-mark) (#f) (_ (-> (app horizon (app lose) 0) <-)))\n  (env (() ())))\""
  61
  47
  12
  2
  47
  12
  59
  1
  1
  245/47
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (match (-> h₁ <-) (horizon oc₁ sc₁)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  let
  "\"'(eval (let (co) (-> (let (bo) ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₀ <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  match
  "\"'(eval (λ (oc₀ oc₁) (-> (match oc₀ ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval\n  (app\n   play-game\n   (-> (app player (app X) human-action) <-)\n   (app player (app O) (app make-ai-action (app O))))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  constructor
  "\"'(eval (app (-> #t <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval\n  (letrec*\n   (... move-coord (move-horizon (-> (λ (move-horizon-v) ...) <-)) is ...)\n   ...)\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env (())))\""
  5
  5
  0
  0
  5
  0
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app coord r (-> c <-)) (env (() () ())))\""
  44
  32
  11
  1
  32
  11
  43
  1
  1
  169/32
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  match
  "\"'(eval (let (_) (-> (match this-play ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> loop <-)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  match
  "\"'(eval (λ (co) (-> (match (app equal? co₀ co) ...) <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app coord rc (-> rc <-)) (env (() ())))\""
  39
  27
  11
  1
  27
  11
  38
  1
  1
  16/3
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval\n  (app cons (-> (app Ze) <-) (app cons (app On) (app cons (app Tw) (app nil))))\n  (env ()))\""
  39
  27
  11
  1
  27
  11
  38
  1
  1
  16/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env (())))\""
  40
  28
  11
  1
  28
  11
  39
  1
  1
  149/28
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env (() () ())))\""
  57
  37
  18
  2
  37
  18
  55
  1
  1
  203/37
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> or <-)\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env (())))\""
  58
  38
  18
  2
  38
  18
  56
  1
  1
  104/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> cons <-) (app Tw) (app nil)) (env ()))\""
  58
  38
  18
  2
  38
  18
  56
  1
  1
  104/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> none <-)) (env (())))\""
  59
  39
  18
  2
  39
  18
  57
  1
  1
  71/13
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> b <-) (app coord r c)) (env (() () ())))\""
  76
  51
  22
  3
  51
  22
  73
  1
  1
  91/17
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (app move-coord (-> (app some-v (app maximin bo ma (app mark⁻¹ ma))) <-))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> move-horizon <-) (app some-v (app minimax bo that-mark this-mark)))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (app horizon< (app move-horizon mo₀) (-> (app move-horizon mo₁) <-))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> horizon< <-) (app move-horizon mo₀) (app move-horizon mo₁))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app maximin (-> bo <-) ma (app mark⁻¹ ma)) (env (() ())))\""
  44
  21
  20
  3
  21
  20
  41
  1
  1
  107/21
  ((5/2 5/2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> or <-)\n   (app oc< oc₀ oc₁)\n   (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n  (env (())))\""
  45
  22
  20
  3
  22
  20
  42
  1
  1
  56/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (match (-> ma <-) (X) (O)) (env (())))\""
  55
  30
  22
  3
  30
  22
  52
  1
  1
  77/15
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (match (-> move-coord-v <-) (move move-coord-x _) _) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval (app andmap (-> (λ (c) ...) <-) is) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> b <-) co) (env (())))\""
  27
  17
  9
  1
  17
  9
  26
  1
  1
  5
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env (())))\""
  28
  18
  9
  1
  18
  9
  27
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f) (-> (app play-turn bo that-play this-play) <-))\n   _)\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  app
  "\"'(eval (match (-> (app full? bo) <-) (#f) _) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (match\n   xs\n   (empty)\n   ((cons x rest-xs) (-> (app and (app f x) (app andmap f rest-xs)) <-)))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> horizon <-) oc (app + sc 1)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app ormap (λ (c) ...) (-> is <-)) (env (())))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  app
  "\"'(eval (λ (rc) (-> (app marked-with? b (app coord rc rc) m) <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> Ze <-)) (env ()))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  match
  "\"'(eval\n  (match (app wins? bo this-mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app marked (-> ma <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (match i (Ze) ((On) (-> (app On) <-)) (Tw)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app marked-with? (-> b <-) (app coord r c) m) (env (() () ())))\""
  19
  14
  4
  1
  14
  4
  18
  1
  1
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app play-turn empty-board player-one (-> player-two <-)) (env (())))\""
  30
  21
  8
  1
  21
  8
  29
  1
  1
  107/21
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> some-v <-) (app minimax bo that-mark this-mark)) (env (() ())))\""
  32
  23
  8
  1
  23
  8
  31
  1
  1
  117/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app oc< (-> oc₀ <-) oc₁) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> display <-) \"Cat's game.\\n\") (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (match i (Ze) (On) ((Tw) (-> (app Ze) <-))) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> move-coord <-) (app some-v (app maximin bo ma (app mark⁻¹ ma))))\n  (env (() ())))\""
  5
  5
  0
  0
  5
  0
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  app
  "\"'(eval (match (-> (app full? bo) <-) (#f) _) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> or <-) (app f x) (app ormap f rest-xs)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (app f (-> (app coord r c) <-) x) (env (() () ())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> draw <-)) (env (() ())))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app O) human-action) (env (())))\""
  5
  5
  0
  0
  5
  0
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval\n  (match\n   move-horizon-v\n   (move _ move-horizon-x)\n   (_ (-> (app error \"invalid match for move-horizon\") <-)))\n  (env (())))\""
  7
  7
  0
  0
  7
  0
  7
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app < (-> sc₀ <-) sc₁) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> play-game <-)\n   (app player (app X) human-action)\n   (app player (app O) human-action))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app bo (-> co <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> On <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval\n  (match h ((horizon oc sc) (-> (app horizon oc (app + sc 1)) <-)))\n  (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> foldl <-) (λ (c x) ...) x is) (env (() ())))\""
  5
  5
  0
  0
  5
  0
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env (())))\""
  6
  6
  0
  0
  6
  0
  6
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  app
  "\"'(eval (match (-> (app full? bo) <-) (#f) _) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app andmap (λ (r) ...) (-> is <-)) (env (() ())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> maximin <-) bo ma (app mark⁻¹ ma)) (env (() ())))\""
  5
  5
  0
  0
  5
  0
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app coord (-> rc <-) (app i⁻¹ rc)) (env (() ())))\""
  39
  27
  11
  1
  27
  11
  38
  1
  1
  16/3
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  app
  "\"'(eval (app some-v (-> (app maximin bo ma (app mark⁻¹ ma)) <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval\n  (letrec*\n   (...\n    move-horizon\n    (is\n     (->\n      (app cons (app Ze) (app cons (app On) (app cons (app Tw) (app nil))))\n      <-))\n    mark⁻¹\n    ...)\n   ...)\n  (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app minimax bo (-> that-mark <-) this-mark) (env (() ())))\""
  32
  20
  11
  1
  20
  11
  31
  1
  1
  53/10
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> min-maybe-move <-)\n   mm\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env (() ())))\""
  34
  22
  11
  1
  22
  11
  33
  1
  1
  58/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app marked-with? (-> b <-) (app coord r c) m) (env (() () ())))\""
  51
  34
  15
  2
  34
  15
  49
  1
  1
  88/17
  ((1 1 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app board-mark co (-> mark <-) bo) (env (())))\""
  88
  64
  22
  2
  64
  22
  86
  1
  1
  173/32
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (match (-> move-horizon-v <-) (move _ move-horizon-x) _) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (match a (blank) (_ (-> (app #f) <-))) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (app cons (-> (app On) <-) (app cons (app Tw) (app nil))) (env ()))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (app equal? oc₁ (-> (app win) <-)) (env (())))\""
  6
  6
  0
  0
  6
  0
  6
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval (app andmap (-> (λ (rc) ...) <-) is) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> nil <-)) (env ()))\""
  8
  8
  0
  0
  8
  0
  8
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app player (app O) (-> human-action <-)) (env (())))\""
  10
  10
  0
  0
  10
  0
  10
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> move <-) co (match (app wins? bo this-mark) ...))\n  (env (() ())))\""
  11
  11
  0
  0
  11
  0
  11
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (app horizon< (-> (app move-horizon mo₀) <-) (app move-horizon mo₁))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   (#f)\n   (_ (-> mo₁ <-)))\n  (env (())))\""
  5
  3
  2
  0
  3
  2
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (app make-ai-action (-> (app O) <-)) (env (())))\""
  7
  5
  2
  0
  5
  2
  7
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  app
  "\"'(eval (λ (b) (-> (app andmap (λ (r) ...) is) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (match oc₀ ((win) (-> (app #f) <-)) (draw) (lose)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval\n  (letrec*\n   (...\n    play-turn\n    (play-game (-> (λ (player-one player-two) ...) <-))\n    two-player-game\n    ...)\n   ...)\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  match
  "\"'(eval (λ (f acc l) (-> (match l ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env (() () ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (r) ...) is) (env (() ())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (app coord rc (-> (app i⁻¹ rc) <-)) (env (() ())))\""
  55
  40
  13
  2
  40
  13
  53
  1
  1
  43/8
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> wins? <-) bo this-mark) (env (() ())))\""
  57
  42
  13
  2
  42
  13
  55
  1
  1
  75/14
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app board-mark (-> co <-) this-mark bo) (env (() ())))\""
  65
  47
  15
  3
  47
  15
  62
  1
  1
  250/47
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  match
  "\"'(eval\n  (λ (co mm) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) human-action)\n   (-> (app player (app O) (app make-ai-action (app O))) <-))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval\n  (letrec* (... ormap (andmap (-> (λ (f xs) ...) <-)) wins? ...) ...)\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval\n  (letrec* (... andmap (wins? (-> (λ (b m) ...) <-)) full? ...) ...)\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> marked <-) ma) (env (() ())))\""
  5
  5
  0
  0
  5
  0
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (app marked-with? b (-> (app coord rc rc) <-) m) (env (() ())))\""
  7
  7
  0
  0
  7
  0
  7
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app equal? co₀ (-> co <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval\n  (letrec*\n   (... human-action (make-ai-action (-> (λ (ma) ...) <-)) draw-board! ...)\n   ...)\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) ((#f) (-> mm <-)) _)\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  match
  "\"'(eval (λ (move-coord-v) (-> (match move-coord-v ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  match
  "\"'(eval (λ (f xs) (-> (match xs ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  app
  "\"'(eval (λ (c) (-> (app andmap (λ (r) ...) is) <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app board-mark (-> co <-) mark bo) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> some <-) mo₁) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (match (-> this-play <-) (player mark action)) (env (())))\""
  25
  18
  7
  0
  18
  7
  25
  1
  1
  109/18
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> horizon <-) (app draw) 0) (env (() ())))\""
  26
  19
  7
  0
  19
  7
  26
  1
  1
  6
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  number
  "\"'(eval (app horizon (app draw) (-> 0 <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app foldl (λ (r x) ...) x (-> is <-)) (env (())))\""
  30
  23
  7
  0
  23
  7
  30
  1
  1
  133/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app equal? oc₀ (-> oc₁ <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app wins? (-> bo <-) mark) (env (())))\""
  6
  5
  0
  1
  5
  0
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (match (-> h <-) (horizon oc sc)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (c) ...) is) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval\n  (letrec*\n   (... board-mark (board-lookup (-> (λ (co bo) ...) <-)) marked-with? ...)\n   ...)\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (app marked-with? b (-> (app coord r c) <-) m) (env (() () ())))\""
  5
  5
  0
  0
  5
  0
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (app move-horizon (-> (app some-v (app minimax bo that-mark this-mark)) <-))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> error <-) 'human-action \"not implemented\") (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  match
  "\"'(eval (match h₀ ((horizon oc₀ sc₀) (-> (match h₁ ...) <-))) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval\n  (letrec*\n   (...\n    fold/coord\n    (min-maybe-move (-> (λ (mmo mo₁) ...) <-))\n    max-maybe-move\n    ...)\n   ...)\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (λ (bo)\n    (-> (app move-coord (app some-v (app maximin bo ma (app mark⁻¹ ma)))) <-))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (c) ...) is) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> maximin <-) bo that-mark this-mark) (env (() ())))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> board-lookup <-) co bo) (env (() ())))\""
  6
  6
  0
  0
  6
  0
  6
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval\n  (letrec* (... oc< (horizon< (-> (λ (h₀ h₁) ...) <-)) horizon-add1 ...) ...)\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app f (-> x <-)) (env (())))\""
  38
  30
  8
  0
  30
  8
  38
  1
  1
  157/30
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> foldl <-) f (app f x acc) xs) (env (())))\""
  40
  32
  8
  0
  32
  8
  40
  1
  1
  167/32
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> blank <-)) (env (())))\""
  41
  33
  8
  0
  33
  8
  41
  1
  1
  172/33
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> minimax <-) bo that-mark this-mark) (env (() ())))\""
  43
  35
  8
  0
  35
  8
  43
  1
  1
  26/5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval\n  (letrec*\n   (... foldl (fold/coord (-> (λ (f x) ...) <-)) min-maybe-move ...)\n   ...)\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> marked-with? <-) b (app coord r c) m) (env (() () ())))\""
  46
  38
  8
  0
  38
  8
  46
  1
  1
  197/38
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  app
  "\"'(eval (app blank? (-> (app board-lookup co bo) <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) m m*) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> wins? <-) bo mark) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  match
  "\"'(eval (λ (mmo mo₁) (-> (match mmo ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (match (-> (app blank? (app board-lookup co bo)) <-) (#f) _)\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app draw-board! (-> bo <-)) (env (())))\""
  6
  5
  0
  1
  5
  0
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval (app ormap (-> (λ (c) ...) <-) is) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app marked-with? b (app coord r c) (-> m <-)) (env (() () ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app andmap (λ (rc) ...) (-> is <-)) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (app\n   horizon-add1\n   (->\n    (app move-horizon (app some-v (app minimax bo that-mark this-mark)))\n    <-))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (app horizon (-> (app draw) <-) 0) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> f <-) (app coord r c) x) (env (() () ())))\""
  9
  6
  3
  0
  6
  3
  9
  1
  1
  31/6
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval (λ (ma) (-> (λ (bo) ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (λ (rc) (-> (app marked-with? b (app coord rc (app i⁻¹ rc)) m) <-))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app marked-with? (-> b <-) (app coord rc (app i⁻¹ rc)) m)\n  (env (() ())))\""
  17
  12
  4
  1
  12
  4
  16
  1
  1
  5
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> error <-) \"invalid match for move-horizon\") (env (())))\""
  18
  13
  4
  1
  13
  4
  17
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (λ (player-one player-two)\n    (-> (app play-turn empty-board player-one player-two) <-))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval\n  (letrec*\n   (... empty-board (board-mark (-> (λ (co₀ ma bo) ...) <-)) board-lookup ...)\n   ...)\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval\n  (letrec*\n   (...\n    two-player-game\n    (one-player-game (-> (λ () ...) <-))\n    zero-player-game\n    ...)\n   ...)\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (app horizon< (-> (app move-horizon mo₀) <-) (app move-horizon mo₁))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  constructor
  "\"'(eval (app (-> #f <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app i⁻¹ (-> rc <-)) (env (() ())))\""
  40
  28
  11
  1
  28
  11
  39
  1
  1
  149/28
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (-> (app ormap (λ (c) ...) is) <-)\n   (app andmap (λ (rc) ...) is)\n   (app andmap (λ (rc) ...) is))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app andmap (-> f <-) rest-xs) (env (())))\""
  16
  8
  8
  0
  8
  8
  16
  1
  1
  45/8
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app coord (-> r <-) c) (env (() () ())))\""
  47
  35
  11
  1
  35
  11
  46
  1
  1
  27/5
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (app\n   horizon-add1\n   (->\n    (app move-horizon (app some-v (app maximin bo that-mark this-mark)))\n    <-))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app board-mark co (-> this-mark <-) bo) (env (() ())))\""
  31
  19
  11
  1
  19
  11
  30
  1
  1
  102/19
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (app player (-> (app O) <-) (app make-ai-action (app O))) (env (())))\""
  33
  21
  11
  1
  21
  11
  32
  1
  1
  16/3
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> play-game <-)\n   (app player (app X) (app make-ai-action (app X)))\n   (app player (app O) (app make-ai-action (app O))))\n  (env (())))\""
  35
  23
  11
  1
  23
  11
  34
  1
  1
  122/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) oc₀ oc₁) (env (())))\""
  36
  24
  11
  1
  24
  11
  35
  1
  1
  127/24
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  app
  "\"'(eval (λ (c) (-> (app marked-with? b (app coord r c) m) <-)) (env (() () ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app foldl (λ (r x) ...) (-> x <-) is) (env (())))\""
  8
  5
  3
  0
  5
  3
  8
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f)\n    (->\n     (app\n      horizon-add1\n      (app move-horizon (app some-v (app minimax bo that-mark this-mark))))\n     <-))\n   _)\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  quoted
  "\"'(eval (app error (-> 'human-action <-) \"not implemented\") (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval\n  (letrec*\n   (...\n    minimax\n    (maximin (-> (λ (bo this-mark that-mark) ...) <-))\n    human-action\n    ...)\n   ...)\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  string
  "\"'(eval (app display (-> \"Cat's game.\\n\" <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (app\n   or\n   (-> (app oc< oc₀ oc₁) <-)\n   (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app board-lookup co (-> bo <-)) (env (() ())))\""
  12
  8
  3
  1
  8
  3
  11
  1
  1
  41/8
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (match ma ((X) (-> (app O) <-)) (O)) (env (())))\""
  14
  10
  3
  1
  10
  3
  13
  1
  1
  51/10
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  match
  "\"'(eval (λ (f xs) (-> (match xs ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval (app andmap (-> (λ (r) ...) <-) is) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval\n  (letrec*\n   (... one-player-game (zero-player-game (-> (λ () ...) <-)) () ...)\n   ...)\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> draw <-)) (env (() ())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app X) (app make-ai-action (app X))) (env (())))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> lose <-)) (env (() ())))\""
  5
  5
  0
  0
  5
  0
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> error <-) \"invalid match for some-v\") (env (())))\""
  6
  6
  0
  0
  6
  0
  6
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (match a ((marked _) (-> (app #t) <-)) _) (env (())))\""
  8
  8
  0
  0
  8
  0
  8
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> horizon <-) (app draw) 0) (env (() ())))\""
  9
  9
  0
  0
  9
  0
  9
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> board-lookup <-) co bo) (env (() ())))\""
  11
  11
  0
  0
  11
  0
  11
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> coord <-) r c) (env (() () ())))\""
  12
  12
  0
  0
  12
  0
  12
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  match
  "\"'(eval\n  (match (app wins? bo mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (match xs ((empty) (-> (app #f) <-)) (cons x rest-xs)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  app
  "\"'(eval (app some-v (-> (app minimax bo that-mark this-mark) <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  number
  "\"'(eval (app horizon (app lose) (-> 0 <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app foldl (λ (c x) ...) x (-> is <-)) (env (() ())))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  19/4
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  match
  "\"'(eval (λ (i) (-> (match i ...) <-)) (env (())))\""
  51
  37
  13
  1
  37
  13
  50
  1
  1
  197/37
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (app player (app O) (-> (app make-ai-action (app O)) <-)) (env (())))\""
  56
  41
  13
  2
  41
  13
  54
  1
  1
  217/41
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> draw-board! <-) bo) (env (())))\""
  58
  43
  13
  2
  43
  13
  56
  1
  1
  227/43
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval\n  (letrec* (... marked? (blank? (-> (λ (a) ...) <-)) move-coord ...) ...)\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> move-horizon <-) mo₁) (env (())))\""
  61
  46
  13
  2
  46
  13
  59
  1
  1
  121/23
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval (letrec (... () (loop (-> (λ () ...) <-)) () ...) ...) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval\n  (letrec* (... is (mark⁻¹ (-> (λ (ma) ...) <-)) empty-board ...) ...)\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval\n  (match (app wins? bo this-mark) (#f) (_ (-> (app horizon (app win) 0) <-)))\n  (env (() ())))\""
  65
  50
  13
  2
  50
  13
  63
  1
  1
  131/25
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> make-ai-action <-) (app X)) (env (())))\""
  66
  51
  13
  2
  51
  13
  64
  1
  1
  89/17
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> f <-) x) (env (())))\""
  74
  59
  13
  2
  59
  13
  72
  1
  1
  317/59
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> + <-) sc 1) (env (())))\""
  75
  60
  13
  2
  60
  13
  73
  1
  1
  161/30
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval\n  (letrec* (... i⁻¹ (ormap (-> (λ (f xs) ...) <-)) andmap ...) ...)\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app play-turn empty-board (-> player-one <-) player-two) (env (())))\""
  87
  68
  17
  2
  68
  17
  85
  1
  1
  91/17
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (match (-> h₀ <-) (horizon oc₀ sc₀)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> ormap <-) (λ (c) ...) is) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> void <-)) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app coord (-> rc <-) rc) (env (() ())))\""
  42
  30
  11
  1
  30
  11
  41
  1
  1
  53/10
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (app\n   or\n   (app oc< oc₀ oc₁)\n   (-> (app and (app equal? oc₀ oc₁) (app < sc₀ sc₁)) <-))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> play-game <-)\n   (app player (app X) human-action)\n   (app player (app O) (app make-ai-action (app O))))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  app
  "\"'(eval (λ (r) (-> (app andmap (λ (c) ...) is) <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> play-turn <-) bo that-play this-play) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> marked-with? <-) b (app coord rc (app i⁻¹ rc)) m)\n  (env (() ())))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (rc) ...) is) (env (())))\""
  6
  6
  0
  0
  6
  0
  6
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app player (app X) (-> human-action <-)) (env (())))\""
  8
  8
  0
  0
  8
  0
  8
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  let
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> (let (bo) ...) <-)))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app board-lookup co (-> bo <-)) (env (() ())))\""
  48
  22
  23
  3
  22
  23
  45
  1
  1
  113/22
  ((5/2 5/2 0) (3 3 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> fold/coord <-) (λ (co mm) ...) (app none)) (env (())))\""
  50
  24
  23
  3
  24
  23
  47
  1
  1
  41/8
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> some <-)\n   (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n  (env (())))\""
  51
  25
  23
  3
  25
  23
  48
  1
  1
  128/25
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (λ (co) (-> (app blank) <-)) (env (())))\""
  53
  27
  23
  3
  27
  23
  50
  1
  1
  46/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  let
  "\"'(eval (match (app wins? bo mark) (#f) (_ (-> (let (_) ...) <-))) (env (())))\""
  56
  30
  23
  3
  30
  23
  53
  1
  1
  51/10
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> f <-) x) (env (())))\""
  64
  34
  27
  3
  34
  27
  61
  1
  1
  175/34
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app board-mark (-> co <-) this-mark bo) (env (() ())))\""
  71
  38
  29
  4
  38
  29
  67
  1
  1
  195/38
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (match mmo (some mo₀) ((none) (-> (app some mo₁) <-))) (env (())))\""
  73
  40
  29
  4
  40
  29
  69
  1
  1
  41/8
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> oc< <-) oc₀ oc₁) (env (())))\""
  75
  42
  29
  4
  42
  29
  71
  1
  1
  215/42
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app board-lookup co (-> bo <-)) (env (() ())))\""
  88
  49
  35
  4
  49
  35
  84
  1
  1
  253/49
  ((1 1 0) (1 1 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval\n  (letrec* (... horizon< (horizon-add1 (-> (λ (h) ...) <-)) foldl ...) ...)\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (app move-horizon (-> (app some-v (app maximin bo that-mark this-mark)) <-))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (app horizon (-> (app draw) <-) 0) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval (app ormap (-> (λ (r) ...) <-) is) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (rc) ...) is) (env (())))\""
  5
  5
  0
  0
  5
  0
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  app
  "\"'(eval (app or (-> (app f x) <-) (app ormap f rest-xs)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) f rest-xs) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval\n  (letrec* (... mark⁻¹ (empty-board (-> (λ (co) ...) <-)) board-mark ...) ...)\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval\n  (letrec*\n   (... min-maybe-move (max-maybe-move (-> (λ (mmo mo₁) ...) <-)) minimax ...)\n   ...)\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (app player (app X) (-> (app make-ai-action (app X)) <-)) (env (())))\""
  9
  8
  0
  1
  8
  0
  8
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (match xs ((empty) (-> (app #t) <-)) (cons x rest-xs)) (env (())))\""
  11
  10
  0
  1
  10
  0
  10
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  match
  "\"'(eval (let (bo) (-> (match (app wins? bo mark) ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (app\n   or\n   (app ormap (λ (r) ...) is)\n   (app ormap (λ (c) ...) is)\n   (app andmap (λ (rc) ...) is)\n   (-> (app andmap (λ (rc) ...) is) <-))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> wins? <-) bo this-mark) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  letrec*
  "\"'(eval\n  (lettypes cons ... player (letrec* (some-v ... zero-player-game) ...))\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) oc₁ (app win)) (env (())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  app
  "\"'(eval (λ (r x) (-> (app foldl (λ (c x) ...) x is) <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval\n  (letrec* (... marked-with? (i⁻¹ (-> (λ (i) ...) <-)) ormap ...) ...)\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> On <-)) (env ()))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app wins? bo (-> this-mark <-)) (env (() ())))\""
  33
  21
  11
  1
  21
  11
  32
  1
  1
  16/3
  ((2 2 0) (2 2 0) (2 2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> X <-)) (env (())))\""
  34
  22
  11
  1
  22
  11
  33
  1
  1
  117/22
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (app horizon< (app move-horizon mo₀) (-> (app move-horizon mo₁) <-))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app play-turn bo (-> that-play <-) this-play) (env (())))\""
  23
  16
  7
  0
  16
  7
  23
  1
  1
  47/8
  ((3/2 3/2 0) (3/2 3/2 0) (3/2 3/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval\n  (match\n   (app horizon< (app move-horizon mo₀) (app move-horizon mo₁))\n   (#f)\n   (_ (-> mo₀ <-)))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co this-mark bo) <-)) () ...) ...)\n  (env (() ())))\""
  5
  4
  0
  1
  4
  0
  4
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (letrec* (some-v ... zero-player-game) (-> (app zero-player-game) <-))\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app full? (-> bo <-)) (env (())))\""
  6
  5
  0
  1
  5
  0
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  app
  "\"'(eval (λ (f x) (-> (app foldl (λ (r x) ...) x is) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> equal? <-) co₀ co) (env (() ())))\""
  1
  1
  0
  0
  1
  0
  1
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app f (-> x <-) acc) (env (())))\""
  24
  20
  4
  0
  20
  4
  24
  1
  1
  107/20
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> ormap <-) f rest-xs) (env (())))\""
  26
  22
  4
  0
  22
  4
  26
  1
  1
  117/22
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (app player (-> (app X) <-) human-action) (env (())))\""
  28
  24
  4
  0
  24
  4
  28
  1
  1
  127/24
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> board-lookup <-) co bo) (env (() ())))\""
  30
  26
  4
  0
  26
  4
  30
  1
  1
  137/26
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> error <-) \"invalid match for move-coord\") (env (())))\""
  31
  27
  4
  0
  27
  4
  31
  1
  1
  142/27
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> andmap <-) (λ (r) ...) is) (env (())))\""
  33
  29
  4
  0
  29
  4
  33
  1
  1
  152/29
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> Tw <-)) (env (())))\""
  34
  30
  4
  0
  30
  4
  34
  1
  1
  157/30
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app X) human-action) (env (())))\""
  35
  31
  4
  0
  31
  4
  35
  1
  1
  162/31
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   max-maybe-move\n   (-> mm <-)\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app full? (-> bo <-)) (env (() ())))\""
  6
  5
  0
  1
  5
  0
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (match (-> a <-) (marked _) _) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> fold/coord <-) (λ (co mm) ...) (app none)) (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  lettypes
  "\"'(eval ((top) lettypes (cons ... player) ...) (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  constructor
  "\"'(eval (app (-> #f <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> full? <-) bo) (env (() ())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval\n  (match (app equal? co₀ co) (#f) (_ (-> (app marked ma) <-)))\n  (env (() ())))\""
  5
  5
  0
  0
  5
  0
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> marked-with? <-) b (app coord rc rc) m) (env (() ())))\""
  7
  7
  0
  0
  7
  0
  7
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app board-mark co (-> this-mark <-) bo) (env (() ())))\""
  26
  17
  9
  0
  17
  9
  26
  1
  1
  89/17
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  app
  "\"'(eval (app not (-> (app equal? oc₁ (app lose)) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  app
  "\"'(eval (λ (co bo) (-> (app bo co) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval\n  (match (app full? bo) (#f) (_ (-> (app horizon (app draw) 0) <-)))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  match
  "\"'(eval (λ (move-horizon-v) (-> (match move-horizon-v ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> action <-) bo) (env (() ())))\""
  38
  30
  7
  1
  30
  7
  37
  1
  1
  17/3
  ((5/2 5/2 0) (5/2 5/2 0) (5/2 5/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> O <-)) (env (())))\""
  39
  31
  7
  1
  31
  7
  38
  1
  1
  175/31
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (λ ()\n    (->\n     (app\n      play-game\n      (app player (app X) (app make-ai-action (app X)))\n      (app player (app O) (app make-ai-action (app O))))\n     <-))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app andmap (λ (r) ...) (-> is <-)) (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (app cons (app On) (-> (app cons (app Tw) (app nil)) <-)) (env ()))\""
  5
  5
  0
  0
  5
  0
  5
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  number
  "\"'(eval (app horizon (app draw) (-> 0 <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  match
  "\"'(eval (λ (ma) (-> (match ma ...) <-)) (env (())))\""
  25
  19
  6
  0
  19
  6
  25
  1
  1
  97/19
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (match mmo (some mo₀) ((none) (-> (app some mo₁) <-))) (env (())))\""
  27
  21
  6
  0
  21
  6
  27
  1
  1
  107/21
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app O) (app make-ai-action (app O))) (env (())))\""
  28
  22
  6
  0
  22
  6
  28
  1
  1
  56/11
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  string
  "\"'(eval (app error (-> \"invalid match for move-coord\" <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval\n  (letrec*\n   (...\n    draw-board!\n    (play-turn (-> (λ (bo this-play that-play) ...) <-))\n    play-game\n    ...)\n   ...)\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (match (-> mmo <-) (some mo₀) (none)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co this-mark bo) <-)) () ...) ...)\n  (env (() ())))\""
  5
  4
  0
  1
  4
  0
  4
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (match\n   (app full? bo)\n   ((#f)\n    (->\n     (app\n      horizon-add1\n      (app move-horizon (app some-v (app maximin bo that-mark this-mark))))\n     <-))\n   _)\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   min-maybe-move\n   (-> mm <-)\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  app
  "\"'(eval (λ (c x) (-> (app f (app coord r c) x) <-)) (env (() () ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app < sc₀ (-> sc₁ <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (λ (bo this-mark that-mark)\n    (-> (app fold/coord (λ (co mm) ...) (app none)) <-))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> some-v <-) (app maximin bo ma (app mark⁻¹ ma))) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  match
  "\"'(eval\n  (app move co (-> (match (app wins? bo this-mark) ...) <-))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  let
  "\"'(eval\n  (match (app blank? (app board-lookup co bo)) (#f) (_ (-> (let (bo) ...) <-)))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval (app andmap (-> (λ (c) ...) <-) is) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (match (-> mmo <-) (some mo₀) (none)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval (app andmap (-> (λ (r) ...) <-) is) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  app
  "\"'(eval (λ (r) (-> (app andmap (λ (c) ...) is) <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval\n  (app\n   play-game\n   (app player (app X) human-action)\n   (-> (app player (app O) human-action) <-))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval\n  (app marked-with? b (-> (app coord rc (app i⁻¹ rc)) <-) m)\n  (env (() ())))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app board-mark co mark (-> bo <-)) (env (())))\""
  16
  12
  3
  1
  12
  3
  15
  1
  1
  61/12
  ((1/2 1/2 0) (1/2 1/2 0) (1/2 1/2 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (match oc₀ (win) ((draw) (-> (app equal? oc₁ (app win)) <-)) (lose))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app wins? bo (-> this-mark <-)) (env (() ())))\""
  19
  10
  9
  0
  10
  9
  19
  1
  1
  27/5
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  app
  "\"'(eval (match (-> (app wins? bo mark) <-) (#f) _) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> some-v <-) (app maximin bo that-mark this-mark)) (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> make-ai-action <-) (app O)) (env (())))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (app player (-> (app O) <-) human-action) (env (())))\""
  6
  6
  0
  0
  6
  0
  6
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  constructor
  "\"'(eval (app (-> #f <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> and <-) (app equal? oc₀ oc₁) (app < sc₀ sc₁)) (env (())))\""
  8
  8
  0
  0
  8
  0
  8
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> mark⁻¹ <-) ma) (env (() ())))\""
  10
  10
  0
  0
  10
  0
  10
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> i⁻¹ <-) rc) (env (() ())))\""
  12
  12
  0
  0
  12
  0
  12
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  match
  "\"'(eval\n  (match (app wins? bo this-mark) ((#f) (-> (match (app full? bo) ...) <-)) _)\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> max-maybe-move <-)\n   mm\n   (app move co (match (app wins? bo this-mark) ...)))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app\n   (-> some <-)\n   (match (app horizon< (app move-horizon mo₀) (app move-horizon mo₁)) ...))\n  (env (())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (match (-> l <-) (nil) (cons x xs)) (env (())))\""
  19
  15
  4
  0
  15
  4
  19
  1
  1
  16/3
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (app player (-> (app O) <-) (app make-ai-action (app O))) (env (())))\""
  21
  17
  4
  0
  17
  4
  21
  1
  1
  90/17
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app andmap (λ (c) ...) (-> is <-)) (env (() ())))\""
  22
  18
  4
  0
  18
  4
  22
  1
  1
  95/18
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> player <-) (app X) human-action) (env (())))\""
  23
  19
  4
  0
  19
  4
  23
  1
  1
  100/19
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> blank? <-) (app board-lookup co bo)) (env (() ())))\""
  25
  21
  4
  0
  21
  4
  25
  1
  1
  110/21
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app andmap f (-> rest-xs <-)) (env (())))\""
  40
  28
  12
  0
  28
  12
  40
  1
  1
  75/14
  ((1 1 0) (1 1 0) (1 1 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (λ (bo this-mark that-mark)\n    (-> (app fold/coord (λ (co mm) ...) (app none)) <-))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  app
  "\"'(eval (letrec (loop) (-> (app loop) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  app
  "\"'(eval (app and (app equal? oc₀ oc₁) (-> (app < sc₀ sc₁) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app marked-with? b (app coord rc rc) (-> m <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  let
  "\"'(eval (λ () (-> (let (co) ...) <-)) (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  let
  "\"'(eval (match (app full? bo) (#f) (_ (-> (let (_) ...) <-))) (env (())))\""
  4
  4
  0
  0
  4
  0
  4
  1
  1
  19/4
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app (-> draw-board! <-) bo) (env (())))\""
  6
  6
  0
  0
  6
  0
  6
  1
  1
  29/6
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app some (-> mo₁ <-)) (env (())))\""
  11
  9
  2
  0
  9
  2
  11
  1
  1
  44/9
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  string
  "\"'(eval (app error (-> \"invalid match for move-horizon\" <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app full? (-> bo <-)) (env (() ())))\""
  18
  15
  2
  1
  15
  2
  17
  1
  1
  73/15
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  match
  "\"'(eval\n  (λ (co mm) (-> (match (app blank? (app board-lookup co bo)) ...) <-))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval\n  (app marked-with? b (app coord rc (app i⁻¹ rc)) (-> m <-))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  match
  "\"'(eval (λ (mmo mo₁) (-> (match mmo ...) <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval\n  (match move-horizon-v ((move _ move-horizon-x) (-> move-horizon-x <-)) _)\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval\n  (app (-> move-horizon <-) (app some-v (app maximin bo that-mark this-mark)))\n  (env (() ())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app play-turn (-> bo <-) that-play this-play) (env (())))\""
  8
  7
  0
  1
  7
  0
  7
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app wins? (-> bo <-) this-mark) (env (() ())))\""
  11
  10
  0
  1
  10
  0
  10
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval\n  (let (... () (bo (-> (app board-mark co mark bo) <-)) () ...) ...)\n  (env (())))\""
  11
  10
  0
  1
  10
  0
  10
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval (app horizon (-> (app win) <-) 0) (env (() ())))\""
  13
  12
  0
  1
  12
  0
  12
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (let (bo)\n    (->\n     (app min-maybe-move mm (app move co (match (app wins? bo this-mark) ...)))\n     <-))\n  (env (() ())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  app
  "\"'(eval\n  (match\n   some-v-v\n   (some some-v-x)\n   (_ (-> (app error \"invalid match for some-v\") <-)))\n  (env (())))\""
  2
  2
  0
  0
  2
  0
  2
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  app
  "\"'(eval (app and (-> (app f x) <-) (app andmap f rest-xs)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  lambda
  "\"'(eval\n  (letrec*\n   (... maximin (human-action (-> (λ (bo) ...) <-)) make-ai-action ...)\n   ...)\n  (env ()))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app maximin (-> bo <-) that-mark this-mark) (env (() ())))\""
  7
  6
  0
  1
  6
  0
  6
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  ref-or-constructor
  "\"'(eval (app oc< oc₀ (-> oc₁ <-)) (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app andmap (λ (c) ...) (-> is <-)) (env (() ())))\""
  3
  3
  0
  0
  3
  0
  3
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  10
  569
  ref-or-constructor
  "\"'(eval (app move-horizon (-> mo₁ <-)) (env (())))\""
  8
  6
  2
  0
  6
  2
  8
  1
  1
  5
  ((0 0 0) (0 0 0) (0 0 0)))
'(shuffled-cache
  0
  tic-tac-toe
  0
  569
  app
  "\"'(eval\n  (match\n   xs\n   (empty)\n   ((cons x rest-xs) (-> (app or (app f x) (app ormap f rest-xs)) <-)))\n  (env (())))\""
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  #f)
